
IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f674  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002810  0801f858  0801f858  00020858  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022068  08022068  000272e0  2**0
                  CONTENTS
  4 .ARM          00000008  08022068  08022068  00023068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022070  08022070  000272e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  08022070  08022070  00023070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08022084  08022084  00023084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000032e0  20000000  08022088  00024000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c490  200032e0  08025368  000272e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000f770  08025368  00027770  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000272e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c7da  00000000  00000000  00027310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006463  00000000  00000000  00053aea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fa8  00000000  00000000  00059f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017e2  00000000  00000000  0005bef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e86e  00000000  00000000  0005d6da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a8db  00000000  00000000  0008bf48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d326  00000000  00000000  000b6823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000de  00000000  00000000  001d3b49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000952c  00000000  00000000  001d3c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001dd154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000016fd  00000000  00000000  001dd1ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000060  00000000  00000000  001de8aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200032e0 	.word	0x200032e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801f83c 	.word	0x0801f83c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200032e4 	.word	0x200032e4
 800021c:	0801f83c 	.word	0x0801f83c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_ldivmod>:
 8000c68:	b97b      	cbnz	r3, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6a:	b972      	cbnz	r2, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bfbe      	ittt	lt
 8000c70:	2000      	movlt	r0, #0
 8000c72:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c76:	e006      	blt.n	8000c86 <__aeabi_ldivmod+0x1e>
 8000c78:	bf08      	it	eq
 8000c7a:	2800      	cmpeq	r0, #0
 8000c7c:	bf1c      	itt	ne
 8000c7e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c82:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c86:	f000 b9b5 	b.w	8000ff4 <__aeabi_idiv0>
 8000c8a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c92:	2900      	cmp	r1, #0
 8000c94:	db09      	blt.n	8000caa <__aeabi_ldivmod+0x42>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db1a      	blt.n	8000cd0 <__aeabi_ldivmod+0x68>
 8000c9a:	f000 f84d 	bl	8000d38 <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4770      	bx	lr
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db1b      	blt.n	8000cec <__aeabi_ldivmod+0x84>
 8000cb4:	f000 f840 	bl	8000d38 <__udivmoddi4>
 8000cb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc0:	b004      	add	sp, #16
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	4252      	negs	r2, r2
 8000cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f82f 	bl	8000d38 <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4240      	negs	r0, r0
 8000ce6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cea:	4770      	bx	lr
 8000cec:	4252      	negs	r2, r2
 8000cee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf2:	f000 f821 	bl	8000d38 <__udivmoddi4>
 8000cf6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfe:	b004      	add	sp, #16
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_uldivmod>:
 8000d08:	b953      	cbnz	r3, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0a:	b94a      	cbnz	r2, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	bf08      	it	eq
 8000d10:	2800      	cmpeq	r0, #0
 8000d12:	bf1c      	itt	ne
 8000d14:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d18:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d1c:	f000 b96a 	b.w	8000ff4 <__aeabi_idiv0>
 8000d20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d28:	f000 f806 	bl	8000d38 <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9d08      	ldr	r5, [sp, #32]
 8000d3e:	460c      	mov	r4, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14e      	bne.n	8000de2 <__udivmoddi4+0xaa>
 8000d44:	4694      	mov	ip, r2
 8000d46:	458c      	cmp	ip, r1
 8000d48:	4686      	mov	lr, r0
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	d962      	bls.n	8000e16 <__udivmoddi4+0xde>
 8000d50:	b14a      	cbz	r2, 8000d66 <__udivmoddi4+0x2e>
 8000d52:	f1c2 0320 	rsb	r3, r2, #32
 8000d56:	4091      	lsls	r1, r2
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d60:	4319      	orrs	r1, r3
 8000d62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6a:	fa1f f68c 	uxth.w	r6, ip
 8000d6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d76:	fb07 1114 	mls	r1, r7, r4, r1
 8000d7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7e:	fb04 f106 	mul.w	r1, r4, r6
 8000d82:	4299      	cmp	r1, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x64>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d8e:	f080 8112 	bcs.w	8000fb6 <__udivmoddi4+0x27e>
 8000d92:	4299      	cmp	r1, r3
 8000d94:	f240 810f 	bls.w	8000fb6 <__udivmoddi4+0x27e>
 8000d98:	3c02      	subs	r4, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	fa1f f38e 	uxth.w	r3, lr
 8000da2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da6:	fb07 1110 	mls	r1, r7, r0, r1
 8000daa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dae:	fb00 f606 	mul.w	r6, r0, r6
 8000db2:	429e      	cmp	r6, r3
 8000db4:	d90a      	bls.n	8000dcc <__udivmoddi4+0x94>
 8000db6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dba:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dbe:	f080 80fc 	bcs.w	8000fba <__udivmoddi4+0x282>
 8000dc2:	429e      	cmp	r6, r3
 8000dc4:	f240 80f9 	bls.w	8000fba <__udivmoddi4+0x282>
 8000dc8:	4463      	add	r3, ip
 8000dca:	3802      	subs	r0, #2
 8000dcc:	1b9b      	subs	r3, r3, r6
 8000dce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	b11d      	cbz	r5, 8000dde <__udivmoddi4+0xa6>
 8000dd6:	40d3      	lsrs	r3, r2
 8000dd8:	2200      	movs	r2, #0
 8000dda:	e9c5 3200 	strd	r3, r2, [r5]
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d905      	bls.n	8000df2 <__udivmoddi4+0xba>
 8000de6:	b10d      	cbz	r5, 8000dec <__udivmoddi4+0xb4>
 8000de8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dec:	2100      	movs	r1, #0
 8000dee:	4608      	mov	r0, r1
 8000df0:	e7f5      	b.n	8000dde <__udivmoddi4+0xa6>
 8000df2:	fab3 f183 	clz	r1, r3
 8000df6:	2900      	cmp	r1, #0
 8000df8:	d146      	bne.n	8000e88 <__udivmoddi4+0x150>
 8000dfa:	42a3      	cmp	r3, r4
 8000dfc:	d302      	bcc.n	8000e04 <__udivmoddi4+0xcc>
 8000dfe:	4290      	cmp	r0, r2
 8000e00:	f0c0 80f0 	bcc.w	8000fe4 <__udivmoddi4+0x2ac>
 8000e04:	1a86      	subs	r6, r0, r2
 8000e06:	eb64 0303 	sbc.w	r3, r4, r3
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	2d00      	cmp	r5, #0
 8000e0e:	d0e6      	beq.n	8000dde <__udivmoddi4+0xa6>
 8000e10:	e9c5 6300 	strd	r6, r3, [r5]
 8000e14:	e7e3      	b.n	8000dde <__udivmoddi4+0xa6>
 8000e16:	2a00      	cmp	r2, #0
 8000e18:	f040 8090 	bne.w	8000f3c <__udivmoddi4+0x204>
 8000e1c:	eba1 040c 	sub.w	r4, r1, ip
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa1f f78c 	uxth.w	r7, ip
 8000e28:	2101      	movs	r1, #1
 8000e2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e32:	fb08 4416 	mls	r4, r8, r6, r4
 8000e36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e3a:	fb07 f006 	mul.w	r0, r7, r6
 8000e3e:	4298      	cmp	r0, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x11c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x11a>
 8000e4c:	4298      	cmp	r0, r3
 8000e4e:	f200 80cd 	bhi.w	8000fec <__udivmoddi4+0x2b4>
 8000e52:	4626      	mov	r6, r4
 8000e54:	1a1c      	subs	r4, r3, r0
 8000e56:	fa1f f38e 	uxth.w	r3, lr
 8000e5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb00 f707 	mul.w	r7, r0, r7
 8000e6a:	429f      	cmp	r7, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x148>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x146>
 8000e78:	429f      	cmp	r7, r3
 8000e7a:	f200 80b0 	bhi.w	8000fde <__udivmoddi4+0x2a6>
 8000e7e:	4620      	mov	r0, r4
 8000e80:	1bdb      	subs	r3, r3, r7
 8000e82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0x9c>
 8000e88:	f1c1 0620 	rsb	r6, r1, #32
 8000e8c:	408b      	lsls	r3, r1
 8000e8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e92:	431f      	orrs	r7, r3
 8000e94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e98:	fa04 f301 	lsl.w	r3, r4, r1
 8000e9c:	ea43 030c 	orr.w	r3, r3, ip
 8000ea0:	40f4      	lsrs	r4, r6
 8000ea2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea6:	0c38      	lsrs	r0, r7, #16
 8000ea8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eac:	fbb4 fef0 	udiv	lr, r4, r0
 8000eb0:	fa1f fc87 	uxth.w	ip, r7
 8000eb4:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ebc:	fb0e f90c 	mul.w	r9, lr, ip
 8000ec0:	45a1      	cmp	r9, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	d90a      	bls.n	8000ede <__udivmoddi4+0x1a6>
 8000ec8:	193c      	adds	r4, r7, r4
 8000eca:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000ece:	f080 8084 	bcs.w	8000fda <__udivmoddi4+0x2a2>
 8000ed2:	45a1      	cmp	r9, r4
 8000ed4:	f240 8081 	bls.w	8000fda <__udivmoddi4+0x2a2>
 8000ed8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000edc:	443c      	add	r4, r7
 8000ede:	eba4 0409 	sub.w	r4, r4, r9
 8000ee2:	fa1f f983 	uxth.w	r9, r3
 8000ee6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eea:	fb00 4413 	mls	r4, r0, r3, r4
 8000eee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef6:	45a4      	cmp	ip, r4
 8000ef8:	d907      	bls.n	8000f0a <__udivmoddi4+0x1d2>
 8000efa:	193c      	adds	r4, r7, r4
 8000efc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f00:	d267      	bcs.n	8000fd2 <__udivmoddi4+0x29a>
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d965      	bls.n	8000fd2 <__udivmoddi4+0x29a>
 8000f06:	3b02      	subs	r3, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f12:	eba4 040c 	sub.w	r4, r4, ip
 8000f16:	429c      	cmp	r4, r3
 8000f18:	46ce      	mov	lr, r9
 8000f1a:	469c      	mov	ip, r3
 8000f1c:	d351      	bcc.n	8000fc2 <__udivmoddi4+0x28a>
 8000f1e:	d04e      	beq.n	8000fbe <__udivmoddi4+0x286>
 8000f20:	b155      	cbz	r5, 8000f38 <__udivmoddi4+0x200>
 8000f22:	ebb8 030e 	subs.w	r3, r8, lr
 8000f26:	eb64 040c 	sbc.w	r4, r4, ip
 8000f2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2e:	40cb      	lsrs	r3, r1
 8000f30:	431e      	orrs	r6, r3
 8000f32:	40cc      	lsrs	r4, r1
 8000f34:	e9c5 6400 	strd	r6, r4, [r5]
 8000f38:	2100      	movs	r1, #0
 8000f3a:	e750      	b.n	8000dde <__udivmoddi4+0xa6>
 8000f3c:	f1c2 0320 	rsb	r3, r2, #32
 8000f40:	fa20 f103 	lsr.w	r1, r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa24 f303 	lsr.w	r3, r4, r3
 8000f4c:	4094      	lsls	r4, r2
 8000f4e:	430c      	orrs	r4, r1
 8000f50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f58:	fa1f f78c 	uxth.w	r7, ip
 8000f5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f60:	fb08 3110 	mls	r1, r8, r0, r3
 8000f64:	0c23      	lsrs	r3, r4, #16
 8000f66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f6a:	fb00 f107 	mul.w	r1, r0, r7
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x24c>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f7a:	d22c      	bcs.n	8000fd6 <__udivmoddi4+0x29e>
 8000f7c:	4299      	cmp	r1, r3
 8000f7e:	d92a      	bls.n	8000fd6 <__udivmoddi4+0x29e>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1a5b      	subs	r3, r3, r1
 8000f86:	b2a4      	uxth	r4, r4
 8000f88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f94:	fb01 f307 	mul.w	r3, r1, r7
 8000f98:	42a3      	cmp	r3, r4
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x276>
 8000f9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fa4:	d213      	bcs.n	8000fce <__udivmoddi4+0x296>
 8000fa6:	42a3      	cmp	r3, r4
 8000fa8:	d911      	bls.n	8000fce <__udivmoddi4+0x296>
 8000faa:	3902      	subs	r1, #2
 8000fac:	4464      	add	r4, ip
 8000fae:	1ae4      	subs	r4, r4, r3
 8000fb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb4:	e739      	b.n	8000e2a <__udivmoddi4+0xf2>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	e6f0      	b.n	8000d9c <__udivmoddi4+0x64>
 8000fba:	4608      	mov	r0, r1
 8000fbc:	e706      	b.n	8000dcc <__udivmoddi4+0x94>
 8000fbe:	45c8      	cmp	r8, r9
 8000fc0:	d2ae      	bcs.n	8000f20 <__udivmoddi4+0x1e8>
 8000fc2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fca:	3801      	subs	r0, #1
 8000fcc:	e7a8      	b.n	8000f20 <__udivmoddi4+0x1e8>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	e7ed      	b.n	8000fae <__udivmoddi4+0x276>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	e799      	b.n	8000f0a <__udivmoddi4+0x1d2>
 8000fd6:	4630      	mov	r0, r6
 8000fd8:	e7d4      	b.n	8000f84 <__udivmoddi4+0x24c>
 8000fda:	46d6      	mov	lr, sl
 8000fdc:	e77f      	b.n	8000ede <__udivmoddi4+0x1a6>
 8000fde:	4463      	add	r3, ip
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	e74d      	b.n	8000e80 <__udivmoddi4+0x148>
 8000fe4:	4606      	mov	r6, r0
 8000fe6:	4623      	mov	r3, r4
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e70f      	b.n	8000e0c <__udivmoddi4+0xd4>
 8000fec:	3e02      	subs	r6, #2
 8000fee:	4463      	add	r3, ip
 8000ff0:	e730      	b.n	8000e54 <__udivmoddi4+0x11c>
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ffc:	4a04      	ldr	r2, [pc, #16]	@ (8001010 <MX_FREERTOS_Init+0x18>)
 8000ffe:	2100      	movs	r1, #0
 8001000:	4804      	ldr	r0, [pc, #16]	@ (8001014 <MX_FREERTOS_Init+0x1c>)
 8001002:	f008 f941 	bl	8009288 <osThreadNew>
 8001006:	4603      	mov	r3, r0
 8001008:	4a03      	ldr	r2, [pc, #12]	@ (8001018 <MX_FREERTOS_Init+0x20>)
 800100a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	0801f9e8 	.word	0x0801f9e8
 8001014:	08002d71 	.word	0x08002d71
 8001018:	200032fc 	.word	0x200032fc

0800101c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	@ 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001028:	f009 fa02 	bl	800a430 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800102c:	4b5a      	ldr	r3, [pc, #360]	@ (8001198 <pvPortMallocMicroROS+0x17c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d101      	bne.n	8001038 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001034:	f000 f986 	bl	8001344 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001038:	4b58      	ldr	r3, [pc, #352]	@ (800119c <pvPortMallocMicroROS+0x180>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4013      	ands	r3, r2
 8001040:	2b00      	cmp	r3, #0
 8001042:	f040 8090 	bne.w	8001166 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d01e      	beq.n	800108a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800104c:	2208      	movs	r2, #8
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	2b00      	cmp	r3, #0
 800105c:	d015      	beq.n	800108a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f023 0307 	bic.w	r3, r3, #7
 8001064:	3308      	adds	r3, #8
 8001066:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00b      	beq.n	800108a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001076:	f383 8811 	msr	BASEPRI, r3
 800107a:	f3bf 8f6f 	isb	sy
 800107e:	f3bf 8f4f 	dsb	sy
 8001082:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	e7fd      	b.n	8001086 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d06a      	beq.n	8001166 <pvPortMallocMicroROS+0x14a>
 8001090:	4b43      	ldr	r3, [pc, #268]	@ (80011a0 <pvPortMallocMicroROS+0x184>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	429a      	cmp	r2, r3
 8001098:	d865      	bhi.n	8001166 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800109a:	4b42      	ldr	r3, [pc, #264]	@ (80011a4 <pvPortMallocMicroROS+0x188>)
 800109c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800109e:	4b41      	ldr	r3, [pc, #260]	@ (80011a4 <pvPortMallocMicroROS+0x188>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80010a4:	e004      	b.n	80010b0 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80010a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80010aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80010b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d903      	bls.n	80010c2 <pvPortMallocMicroROS+0xa6>
 80010ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f1      	bne.n	80010a6 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80010c2:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <pvPortMallocMicroROS+0x17c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d04c      	beq.n	8001166 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80010cc:	6a3b      	ldr	r3, [r7, #32]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2208      	movs	r2, #8
 80010d2:	4413      	add	r3, r2
 80010d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80010d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	6a3b      	ldr	r3, [r7, #32]
 80010dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80010de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	1ad2      	subs	r2, r2, r3
 80010e6:	2308      	movs	r3, #8
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d920      	bls.n	8001130 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80010ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4413      	add	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00b      	beq.n	8001118 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001104:	f383 8811 	msr	BASEPRI, r3
 8001108:	f3bf 8f6f 	isb	sy
 800110c:	f3bf 8f4f 	dsb	sy
 8001110:	613b      	str	r3, [r7, #16]
}
 8001112:	bf00      	nop
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	1ad2      	subs	r2, r2, r3
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800112a:	69b8      	ldr	r0, [r7, #24]
 800112c:	f000 f96c 	bl	8001408 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001130:	4b1b      	ldr	r3, [pc, #108]	@ (80011a0 <pvPortMallocMicroROS+0x184>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	4a19      	ldr	r2, [pc, #100]	@ (80011a0 <pvPortMallocMicroROS+0x184>)
 800113c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800113e:	4b18      	ldr	r3, [pc, #96]	@ (80011a0 <pvPortMallocMicroROS+0x184>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <pvPortMallocMicroROS+0x18c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	429a      	cmp	r2, r3
 8001148:	d203      	bcs.n	8001152 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800114a:	4b15      	ldr	r3, [pc, #84]	@ (80011a0 <pvPortMallocMicroROS+0x184>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a16      	ldr	r2, [pc, #88]	@ (80011a8 <pvPortMallocMicroROS+0x18c>)
 8001150:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	4b11      	ldr	r3, [pc, #68]	@ (800119c <pvPortMallocMicroROS+0x180>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	431a      	orrs	r2, r3
 800115c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001166:	f009 f971 	bl	800a44c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	2b00      	cmp	r3, #0
 8001172:	d00b      	beq.n	800118c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001178:	f383 8811 	msr	BASEPRI, r3
 800117c:	f3bf 8f6f 	isb	sy
 8001180:	f3bf 8f4f 	dsb	sy
 8001184:	60fb      	str	r3, [r7, #12]
}
 8001186:	bf00      	nop
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 800118c:	69fb      	ldr	r3, [r7, #28]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3728      	adds	r7, #40	@ 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20006e44 	.word	0x20006e44
 800119c:	20006e50 	.word	0x20006e50
 80011a0:	20006e48 	.word	0x20006e48
 80011a4:	20006e3c 	.word	0x20006e3c
 80011a8:	20006e4c 	.word	0x20006e4c

080011ac <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d04a      	beq.n	8001254 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80011be:	2308      	movs	r3, #8
 80011c0:	425b      	negs	r3, r3
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	4413      	add	r3, r2
 80011c6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	4b22      	ldr	r3, [pc, #136]	@ (800125c <vPortFreeMicroROS+0xb0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4013      	ands	r3, r2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d10b      	bne.n	80011f2 <vPortFreeMicroROS+0x46>
	__asm volatile
 80011da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011de:	f383 8811 	msr	BASEPRI, r3
 80011e2:	f3bf 8f6f 	isb	sy
 80011e6:	f3bf 8f4f 	dsb	sy
 80011ea:	60fb      	str	r3, [r7, #12]
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	e7fd      	b.n	80011ee <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00b      	beq.n	8001212 <vPortFreeMicroROS+0x66>
	__asm volatile
 80011fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011fe:	f383 8811 	msr	BASEPRI, r3
 8001202:	f3bf 8f6f 	isb	sy
 8001206:	f3bf 8f4f 	dsb	sy
 800120a:	60bb      	str	r3, [r7, #8]
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	e7fd      	b.n	800120e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <vPortFreeMicroROS+0xb0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4013      	ands	r3, r2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d019      	beq.n	8001254 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d115      	bne.n	8001254 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <vPortFreeMicroROS+0xb0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	43db      	mvns	r3, r3
 8001232:	401a      	ands	r2, r3
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001238:	f009 f8fa 	bl	800a430 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <vPortFreeMicroROS+0xb4>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4413      	add	r3, r2
 8001246:	4a06      	ldr	r2, [pc, #24]	@ (8001260 <vPortFreeMicroROS+0xb4>)
 8001248:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800124a:	6938      	ldr	r0, [r7, #16]
 800124c:	f000 f8dc 	bl	8001408 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001250:	f009 f8fc 	bl	800a44c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001254:	bf00      	nop
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20006e50 	.word	0x20006e50
 8001260:	20006e48 	.word	0x20006e48

08001264 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001264:	b480      	push	{r7}
 8001266:	b087      	sub	sp, #28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001270:	2308      	movs	r3, #8
 8001272:	425b      	negs	r3, r3
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	4413      	add	r3, r2
 8001278:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	4b06      	ldr	r3, [pc, #24]	@ (800129c <getBlockSize+0x38>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	43db      	mvns	r3, r3
 8001288:	4013      	ands	r3, r2
 800128a:	60fb      	str	r3, [r7, #12]

	return count;
 800128c:	68fb      	ldr	r3, [r7, #12]
}
 800128e:	4618      	mov	r0, r3
 8001290:	371c      	adds	r7, #28
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20006e50 	.word	0x20006e50

080012a0 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80012aa:	f009 f8c1 	bl	800a430 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80012ae:	6838      	ldr	r0, [r7, #0]
 80012b0:	f7ff feb4 	bl	800101c <pvPortMallocMicroROS>
 80012b4:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d017      	beq.n	80012ec <pvPortReallocMicroROS+0x4c>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d014      	beq.n	80012ec <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ffce 	bl	8001264 <getBlockSize>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2208      	movs	r2, #8
 80012cc:	1a9b      	subs	r3, r3, r2
 80012ce:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d201      	bcs.n	80012dc <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	68b8      	ldr	r0, [r7, #8]
 80012e2:	f01c fb7c 	bl	801d9de <memcpy>

		vPortFreeMicroROS(pv);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ff60 	bl	80011ac <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80012ec:	f009 f8ae 	bl	800a44c <xTaskResumeAll>

	return newmem;
 80012f0:	68bb      	ldr	r3, [r7, #8]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001304:	f009 f894 	bl	800a430 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	fb02 f303 	mul.w	r3, r2, r3
 8001310:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001312:	6978      	ldr	r0, [r7, #20]
 8001314:	f7ff fe82 	bl	800101c <pvPortMallocMicroROS>
 8001318:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	613b      	str	r3, [r7, #16]

  	while(count--)
 800131e:	e004      	b.n	800132a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	613a      	str	r2, [r7, #16]
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	1e5a      	subs	r2, r3, #1
 800132e:	617a      	str	r2, [r7, #20]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1f5      	bne.n	8001320 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001334:	f009 f88a 	bl	800a44c <xTaskResumeAll>
  	return mem;
 8001338:	68fb      	ldr	r3, [r7, #12]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800134a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800134e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001350:	4b27      	ldr	r3, [pc, #156]	@ (80013f0 <prvHeapInit+0xac>)
 8001352:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00c      	beq.n	8001378 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	3307      	adds	r3, #7
 8001362:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f023 0307 	bic.w	r3, r3, #7
 800136a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	4a1f      	ldr	r2, [pc, #124]	@ (80013f0 <prvHeapInit+0xac>)
 8001374:	4413      	add	r3, r2
 8001376:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800137c:	4a1d      	ldr	r2, [pc, #116]	@ (80013f4 <prvHeapInit+0xb0>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001382:	4b1c      	ldr	r3, [pc, #112]	@ (80013f4 <prvHeapInit+0xb0>)
 8001384:	2200      	movs	r2, #0
 8001386:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	4413      	add	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001390:	2208      	movs	r2, #8
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	1a9b      	subs	r3, r3, r2
 8001396:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f023 0307 	bic.w	r3, r3, #7
 800139e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4a15      	ldr	r2, [pc, #84]	@ (80013f8 <prvHeapInit+0xb4>)
 80013a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80013a6:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <prvHeapInit+0xb4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2200      	movs	r2, #0
 80013ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80013ae:	4b12      	ldr	r3, [pc, #72]	@ (80013f8 <prvHeapInit+0xb4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	1ad2      	subs	r2, r2, r3
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80013c4:	4b0c      	ldr	r3, [pc, #48]	@ (80013f8 <prvHeapInit+0xb4>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	4a0a      	ldr	r2, [pc, #40]	@ (80013fc <prvHeapInit+0xb8>)
 80013d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	4a09      	ldr	r2, [pc, #36]	@ (8001400 <prvHeapInit+0xbc>)
 80013da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80013dc:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <prvHeapInit+0xc0>)
 80013de:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80013e2:	601a      	str	r2, [r3, #0]
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	2000623c 	.word	0x2000623c
 80013f4:	20006e3c 	.word	0x20006e3c
 80013f8:	20006e44 	.word	0x20006e44
 80013fc:	20006e4c 	.word	0x20006e4c
 8001400:	20006e48 	.word	0x20006e48
 8001404:	20006e50 	.word	0x20006e50

08001408 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001410:	4b28      	ldr	r3, [pc, #160]	@ (80014b4 <prvInsertBlockIntoFreeList+0xac>)
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	e002      	b.n	800141c <prvInsertBlockIntoFreeList+0x14>
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	429a      	cmp	r2, r3
 8001424:	d8f7      	bhi.n	8001416 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	4413      	add	r3, r2
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	429a      	cmp	r2, r3
 8001436:	d108      	bne.n	800144a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	441a      	add	r2, r3
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	441a      	add	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d118      	bne.n	8001490 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <prvInsertBlockIntoFreeList+0xb0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	429a      	cmp	r2, r3
 8001468:	d00d      	beq.n	8001486 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	441a      	add	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	e008      	b.n	8001498 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001486:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <prvInsertBlockIntoFreeList+0xb0>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	e003      	b.n	8001498 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	429a      	cmp	r2, r3
 800149e:	d002      	beq.n	80014a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80014a6:	bf00      	nop
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20006e3c 	.word	0x20006e3c
 80014b8:	20006e44 	.word	0x20006e44

080014bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80014c2:	4b1e      	ldr	r3, [pc, #120]	@ (800153c <MX_DMA_Init+0x80>)
 80014c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014c6:	4a1d      	ldr	r2, [pc, #116]	@ (800153c <MX_DMA_Init+0x80>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	6493      	str	r3, [r2, #72]	@ 0x48
 80014ce:	4b1b      	ldr	r3, [pc, #108]	@ (800153c <MX_DMA_Init+0x80>)
 80014d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014da:	4b18      	ldr	r3, [pc, #96]	@ (800153c <MX_DMA_Init+0x80>)
 80014dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014de:	4a17      	ldr	r2, [pc, #92]	@ (800153c <MX_DMA_Init+0x80>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6493      	str	r3, [r2, #72]	@ 0x48
 80014e6:	4b15      	ldr	r3, [pc, #84]	@ (800153c <MX_DMA_Init+0x80>)
 80014e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2105      	movs	r1, #5
 80014f6:	200b      	movs	r0, #11
 80014f8:	f002 fc65 	bl	8003dc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014fc:	200b      	movs	r0, #11
 80014fe:	f002 fc7c 	bl	8003dfa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2105      	movs	r1, #5
 8001506:	200c      	movs	r0, #12
 8001508:	f002 fc5d 	bl	8003dc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800150c:	200c      	movs	r0, #12
 800150e:	f002 fc74 	bl	8003dfa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	2105      	movs	r1, #5
 8001516:	200d      	movs	r0, #13
 8001518:	f002 fc55 	bl	8003dc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800151c:	200d      	movs	r0, #13
 800151e:	f002 fc6c 	bl	8003dfa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2105      	movs	r1, #5
 8001526:	200e      	movs	r0, #14
 8001528:	f002 fc4d 	bl	8003dc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800152c:	200e      	movs	r0, #14
 800152e:	f002 fc64 	bl	8003dfa <HAL_NVIC_EnableIRQ>

}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000

08001540 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800154e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001550:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001554:	4904      	ldr	r1, [pc, #16]	@ (8001568 <cubemx_transport_open+0x28>)
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f005 fd58 	bl	800700c <HAL_UART_Receive_DMA>
    return true;
 800155c:	2301      	movs	r3, #1
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20006e54 	.word	0x20006e54

0800156c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800157a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f005 fd91 	bl	80070a4 <HAL_UART_DMAStop>
    return true;
 8001582:	2301      	movs	r3, #1
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
 8001598:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80015a0:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015a8:	2b20      	cmp	r3, #32
 80015aa:	d11b      	bne.n	80015e4 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	461a      	mov	r2, r3
 80015b2:	68b9      	ldr	r1, [r7, #8]
 80015b4:	6978      	ldr	r0, [r7, #20]
 80015b6:	f005 fca9 	bl	8006f0c <HAL_UART_Transmit_DMA>
 80015ba:	4603      	mov	r3, r0
 80015bc:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80015be:	e002      	b.n	80015c6 <cubemx_transport_write+0x3a>
            osDelay(1);
 80015c0:	2001      	movs	r0, #1
 80015c2:	f007 fef3 	bl	80093ac <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80015c6:	7cfb      	ldrb	r3, [r7, #19]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d104      	bne.n	80015d6 <cubemx_transport_write+0x4a>
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015d2:	2b20      	cmp	r3, #32
 80015d4:	d1f4      	bne.n	80015c0 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 80015d6:	7cfb      	ldrb	r3, [r7, #19]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <cubemx_transport_write+0x54>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	e002      	b.n	80015e6 <cubemx_transport_write+0x5a>
 80015e0:	2300      	movs	r3, #0
 80015e2:	e000      	b.n	80015e6 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 80015e4:	2300      	movs	r3, #0
    }
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001604:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800160a:	b672      	cpsid	i
}
 800160c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800161c:	4a1b      	ldr	r2, [pc, #108]	@ (800168c <cubemx_transport_read+0x9c>)
 800161e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001620:	b662      	cpsie	i
}
 8001622:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	3301      	adds	r3, #1
 8001628:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 800162a:	2001      	movs	r0, #1
 800162c:	f007 febe 	bl	80093ac <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001630:	4b17      	ldr	r3, [pc, #92]	@ (8001690 <cubemx_transport_read+0xa0>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b15      	ldr	r3, [pc, #84]	@ (800168c <cubemx_transport_read+0x9c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	429a      	cmp	r2, r3
 800163a:	d103      	bne.n	8001644 <cubemx_transport_read+0x54>
 800163c:	69fa      	ldr	r2, [r7, #28]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	429a      	cmp	r2, r3
 8001642:	dbe2      	blt.n	800160a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001648:	e011      	b.n	800166e <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 800164a:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <cubemx_transport_read+0xa0>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68b9      	ldr	r1, [r7, #8]
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	440b      	add	r3, r1
 8001654:	490f      	ldr	r1, [pc, #60]	@ (8001694 <cubemx_transport_read+0xa4>)
 8001656:	5c8a      	ldrb	r2, [r1, r2]
 8001658:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 800165a:	4b0d      	ldr	r3, [pc, #52]	@ (8001690 <cubemx_transport_read+0xa0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	3301      	adds	r3, #1
 8001660:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001664:	4a0a      	ldr	r2, [pc, #40]	@ (8001690 <cubemx_transport_read+0xa0>)
 8001666:	6013      	str	r3, [r2, #0]
        wrote++;
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	3301      	adds	r3, #1
 800166c:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800166e:	4b08      	ldr	r3, [pc, #32]	@ (8001690 <cubemx_transport_read+0xa0>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4b06      	ldr	r3, [pc, #24]	@ (800168c <cubemx_transport_read+0x9c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d003      	beq.n	8001682 <cubemx_transport_read+0x92>
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	429a      	cmp	r2, r3
 8001680:	d3e3      	bcc.n	800164a <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8001682:	69bb      	ldr	r3, [r7, #24]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3720      	adds	r7, #32
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20007658 	.word	0x20007658
 8001690:	20007654 	.word	0x20007654
 8001694:	20006e54 	.word	0x20006e54

08001698 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	@ 0x28
 800169c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ae:	4b2b      	ldr	r3, [pc, #172]	@ (800175c <MX_GPIO_Init+0xc4>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b2:	4a2a      	ldr	r2, [pc, #168]	@ (800175c <MX_GPIO_Init+0xc4>)
 80016b4:	f043 0304 	orr.w	r3, r3, #4
 80016b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ba:	4b28      	ldr	r3, [pc, #160]	@ (800175c <MX_GPIO_Init+0xc4>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016c6:	4b25      	ldr	r3, [pc, #148]	@ (800175c <MX_GPIO_Init+0xc4>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ca:	4a24      	ldr	r2, [pc, #144]	@ (800175c <MX_GPIO_Init+0xc4>)
 80016cc:	f043 0320 	orr.w	r3, r3, #32
 80016d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016d2:	4b22      	ldr	r3, [pc, #136]	@ (800175c <MX_GPIO_Init+0xc4>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d6:	f003 0320 	and.w	r3, r3, #32
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	4b1f      	ldr	r3, [pc, #124]	@ (800175c <MX_GPIO_Init+0xc4>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e2:	4a1e      	ldr	r2, [pc, #120]	@ (800175c <MX_GPIO_Init+0xc4>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ea:	4b1c      	ldr	r3, [pc, #112]	@ (800175c <MX_GPIO_Init+0xc4>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	4b19      	ldr	r3, [pc, #100]	@ (800175c <MX_GPIO_Init+0xc4>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fa:	4a18      	ldr	r2, [pc, #96]	@ (800175c <MX_GPIO_Init+0xc4>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001702:	4b16      	ldr	r3, [pc, #88]	@ (800175c <MX_GPIO_Init+0xc4>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	2120      	movs	r1, #32
 8001712:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001716:	f003 f85b 	bl	80047d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800171a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800171e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001720:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	480b      	ldr	r0, [pc, #44]	@ (8001760 <MX_GPIO_Init+0xc8>)
 8001732:	f002 feb3 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001736:	2320      	movs	r3, #32
 8001738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173a:	2301      	movs	r3, #1
 800173c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	2300      	movs	r3, #0
 8001744:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001750:	f002 fea4 	bl	800449c <HAL_GPIO_Init>

}
 8001754:	bf00      	nop
 8001756:	3728      	adds	r7, #40	@ 0x28
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40021000 	.word	0x40021000
 8001760:	48000800 	.word	0x48000800

08001764 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001768:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <MX_I2C1_Init+0x74>)
 800176a:	4a1c      	ldr	r2, [pc, #112]	@ (80017dc <MX_I2C1_Init+0x78>)
 800176c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 800176e:	4b1a      	ldr	r3, [pc, #104]	@ (80017d8 <MX_I2C1_Init+0x74>)
 8001770:	4a1b      	ldr	r2, [pc, #108]	@ (80017e0 <MX_I2C1_Init+0x7c>)
 8001772:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001774:	4b18      	ldr	r3, [pc, #96]	@ (80017d8 <MX_I2C1_Init+0x74>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800177a:	4b17      	ldr	r3, [pc, #92]	@ (80017d8 <MX_I2C1_Init+0x74>)
 800177c:	2201      	movs	r2, #1
 800177e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001780:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <MX_I2C1_Init+0x74>)
 8001782:	2200      	movs	r2, #0
 8001784:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001786:	4b14      	ldr	r3, [pc, #80]	@ (80017d8 <MX_I2C1_Init+0x74>)
 8001788:	2200      	movs	r2, #0
 800178a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800178c:	4b12      	ldr	r3, [pc, #72]	@ (80017d8 <MX_I2C1_Init+0x74>)
 800178e:	2200      	movs	r2, #0
 8001790:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001792:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <MX_I2C1_Init+0x74>)
 8001794:	2200      	movs	r2, #0
 8001796:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001798:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <MX_I2C1_Init+0x74>)
 800179a:	2200      	movs	r2, #0
 800179c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800179e:	480e      	ldr	r0, [pc, #56]	@ (80017d8 <MX_I2C1_Init+0x74>)
 80017a0:	f003 f848 	bl	8004834 <HAL_I2C_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017aa:	f001 fcab 	bl	8003104 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017ae:	2100      	movs	r1, #0
 80017b0:	4809      	ldr	r0, [pc, #36]	@ (80017d8 <MX_I2C1_Init+0x74>)
 80017b2:	f003 feb7 	bl	8005524 <HAL_I2CEx_ConfigAnalogFilter>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017bc:	f001 fca2 	bl	8003104 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017c0:	2100      	movs	r1, #0
 80017c2:	4805      	ldr	r0, [pc, #20]	@ (80017d8 <MX_I2C1_Init+0x74>)
 80017c4:	f003 fef9 	bl	80055ba <HAL_I2CEx_ConfigDigitalFilter>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017ce:	f001 fc99 	bl	8003104 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2000765c 	.word	0x2000765c
 80017dc:	40005400 	.word	0x40005400
 80017e0:	40621236 	.word	0x40621236

080017e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b09e      	sub	sp, #120	@ 0x78
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	2254      	movs	r2, #84	@ 0x54
 8001802:	2100      	movs	r1, #0
 8001804:	4618      	mov	r0, r3
 8001806:	f01c f80f 	bl	801d828 <memset>
  if(i2cHandle->Instance==I2C1)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a1f      	ldr	r2, [pc, #124]	@ (800188c <HAL_I2C_MspInit+0xa8>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d136      	bne.n	8001882 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001814:	2340      	movs	r3, #64	@ 0x40
 8001816:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001818:	2300      	movs	r3, #0
 800181a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800181c:	f107 0310 	add.w	r3, r7, #16
 8001820:	4618      	mov	r0, r3
 8001822:	f004 fd89 	bl	8006338 <HAL_RCCEx_PeriphCLKConfig>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800182c:	f001 fc6a 	bl	8003104 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001830:	4b17      	ldr	r3, [pc, #92]	@ (8001890 <HAL_I2C_MspInit+0xac>)
 8001832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001834:	4a16      	ldr	r2, [pc, #88]	@ (8001890 <HAL_I2C_MspInit+0xac>)
 8001836:	f043 0302 	orr.w	r3, r3, #2
 800183a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800183c:	4b14      	ldr	r3, [pc, #80]	@ (8001890 <HAL_I2C_MspInit+0xac>)
 800183e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001848:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800184c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800184e:	2312      	movs	r3, #18
 8001850:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800185a:	2304      	movs	r3, #4
 800185c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001862:	4619      	mov	r1, r3
 8001864:	480b      	ldr	r0, [pc, #44]	@ (8001894 <HAL_I2C_MspInit+0xb0>)
 8001866:	f002 fe19 	bl	800449c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800186a:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <HAL_I2C_MspInit+0xac>)
 800186c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800186e:	4a08      	ldr	r2, [pc, #32]	@ (8001890 <HAL_I2C_MspInit+0xac>)
 8001870:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001874:	6593      	str	r3, [r2, #88]	@ 0x58
 8001876:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <HAL_I2C_MspInit+0xac>)
 8001878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001882:	bf00      	nop
 8001884:	3778      	adds	r7, #120	@ 0x78
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40005400 	.word	0x40005400
 8001890:	40021000 	.word	0x40021000
 8001894:	48000400 	.word	0x48000400

08001898 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800189c:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <MX_IWDG_Init+0x34>)
 800189e:	4a0c      	ldr	r2, [pc, #48]	@ (80018d0 <MX_IWDG_Init+0x38>)
 80018a0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80018a2:	4b0a      	ldr	r3, [pc, #40]	@ (80018cc <MX_IWDG_Init+0x34>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80018a8:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <MX_IWDG_Init+0x34>)
 80018aa:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80018ae:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 80018b0:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <MX_IWDG_Init+0x34>)
 80018b2:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80018b6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80018b8:	4804      	ldr	r0, [pc, #16]	@ (80018cc <MX_IWDG_Init+0x34>)
 80018ba:	f003 feca 	bl	8005652 <HAL_IWDG_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80018c4:	f001 fc1e 	bl	8003104 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200076b0 	.word	0x200076b0
 80018d0:	40003000 	.word	0x40003000

080018d4 <KalmanFilter_Init>:
// Sampling time
float32_t dt;

// Function to initialize the Kalman Filter
void KalmanFilter_Init(KalmanFilter *kf, float32_t delta_t)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b092      	sub	sp, #72	@ 0x48
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	ed87 0a00 	vstr	s0, [r7]
    dt = delta_t;
 80018e0:	4a8b      	ldr	r2, [pc, #556]	@ (8001b10 <KalmanFilter_Init+0x23c>)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	6013      	str	r3, [r2, #0]

    // Initialize matrix instances
    arm_mat_init_f32(&kf->x_k, STATE_DIM, 1, kf->x_k_data);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3308      	adds	r3, #8
 80018ec:	2201      	movs	r2, #1
 80018ee:	2106      	movs	r1, #6
 80018f0:	f01b fa42 	bl	801cd78 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P_k, STATE_DIM, STATE_DIM, kf->P_k_data);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f103 0020 	add.w	r0, r3, #32
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3328      	adds	r3, #40	@ 0x28
 80018fe:	2206      	movs	r2, #6
 8001900:	2106      	movs	r1, #6
 8001902:	f01b fa39 	bl	801cd78 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->A, STATE_DIM, STATE_DIM, kf->A_data);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f103 00b8 	add.w	r0, r3, #184	@ 0xb8
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	33c0      	adds	r3, #192	@ 0xc0
 8001910:	2206      	movs	r2, #6
 8001912:	2106      	movs	r1, #6
 8001914:	f01b fa30 	bl	801cd78 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, STATE_DIM, 3, kf->B_data);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f503 70a8 	add.w	r0, r3, #336	@ 0x150
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8001924:	2203      	movs	r2, #3
 8001926:	2106      	movs	r1, #6
 8001928:	f01b fa26 	bl	801cd78 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, STATE_DIM, STATE_DIM, kf->Q_data);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f503 70d0 	add.w	r0, r3, #416	@ 0x1a0
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8001938:	2206      	movs	r2, #6
 800193a:	2106      	movs	r1, #6
 800193c:	f01b fa1c 	bl	801cd78 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->H, MEASUREMENT_DIM, STATE_DIM, kf->H_data);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f503 700e 	add.w	r0, r3, #568	@ 0x238
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800194c:	2206      	movs	r2, #6
 800194e:	2106      	movs	r1, #6
 8001950:	f01b fa12 	bl	801cd78 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, MEASUREMENT_DIM, MEASUREMENT_DIM, kf->R_data);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f503 7034 	add.w	r0, r3, #720	@ 0x2d0
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 8001960:	2206      	movs	r2, #6
 8001962:	2106      	movs	r1, #6
 8001964:	f01b fa08 	bl	801cd78 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->K_k, STATE_DIM, MEASUREMENT_DIM, kf->K_k_data);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f503 705a 	add.w	r0, r3, #872	@ 0x368
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f503 735c 	add.w	r3, r3, #880	@ 0x370
 8001974:	2206      	movs	r2, #6
 8001976:	2106      	movs	r1, #6
 8001978:	f01b f9fe 	bl	801cd78 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->z_k, MEASUREMENT_DIM, 1, kf->z_k_data);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f503 6080 	add.w	r0, r3, #1024	@ 0x400
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8001988:	2201      	movs	r2, #1
 800198a:	2106      	movs	r1, #6
 800198c:	f01b f9f4 	bl	801cd78 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->u_k, 3, 1, kf->u_k_data);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f503 6084 	add.w	r0, r3, #1056	@ 0x420
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 800199c:	2201      	movs	r2, #1
 800199e:	2103      	movs	r1, #3
 80019a0:	f01b f9ea 	bl	801cd78 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->I, STATE_DIM, STATE_DIM, kf->I_data);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f203 4034 	addw	r0, r3, #1076	@ 0x434
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f203 433c 	addw	r3, r3, #1084	@ 0x43c
 80019b0:	2206      	movs	r2, #6
 80019b2:	2106      	movs	r1, #6
 80019b4:	f01b f9e0 	bl	801cd78 <arm_mat_init_f32>

    // Initialize temporary matrices as needed
    arm_mat_init_f32(&kf->temp1, STATE_DIM, STATE_DIM, kf->temp1_data);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f203 40cc 	addw	r0, r3, #1228	@ 0x4cc
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
 80019c4:	2206      	movs	r2, #6
 80019c6:	2106      	movs	r1, #6
 80019c8:	f01b f9d6 	bl	801cd78 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp2, STATE_DIM, STATE_DIM, kf->temp2_data);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f203 5064 	addw	r0, r3, #1380	@ 0x564
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f203 536c 	addw	r3, r3, #1388	@ 0x56c
 80019d8:	2206      	movs	r2, #6
 80019da:	2106      	movs	r1, #6
 80019dc:	f01b f9cc 	bl	801cd78 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp3, MEASUREMENT_DIM, MEASUREMENT_DIM, kf->temp3_data);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f203 50fc 	addw	r0, r3, #1532	@ 0x5fc
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f203 6304 	addw	r3, r3, #1540	@ 0x604
 80019ec:	2206      	movs	r2, #6
 80019ee:	2106      	movs	r1, #6
 80019f0:	f01b f9c2 	bl	801cd78 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp4, STATE_DIM, MEASUREMENT_DIM, kf->temp4_data);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f203 6094 	addw	r0, r3, #1684	@ 0x694
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f203 639c 	addw	r3, r3, #1692	@ 0x69c
 8001a00:	2206      	movs	r2, #6
 8001a02:	2106      	movs	r1, #6
 8001a04:	f01b f9b8 	bl	801cd78 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp5, MEASUREMENT_DIM, STATE_DIM, kf->temp5_data);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f203 702c 	addw	r0, r3, #1836	@ 0x72c
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f203 7334 	addw	r3, r3, #1844	@ 0x734
 8001a14:	2206      	movs	r2, #6
 8001a16:	2106      	movs	r1, #6
 8001a18:	f01b f9ae 	bl	801cd78 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp6, STATE_DIM, 1, kf->temp6_data);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f203 70c4 	addw	r0, r3, #1988	@ 0x7c4
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f203 73cc 	addw	r3, r3, #1996	@ 0x7cc
 8001a28:	2201      	movs	r2, #1
 8001a2a:	2106      	movs	r1, #6
 8001a2c:	f01b f9a4 	bl	801cd78 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp7, MEASUREMENT_DIM, 1, kf->temp7_data);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f203 70e4 	addw	r0, r3, #2020	@ 0x7e4
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f203 73ec 	addw	r3, r3, #2028	@ 0x7ec
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	2106      	movs	r1, #6
 8001a40:	f01b f99a 	bl	801cd78 <arm_mat_init_f32>

    // Initialize identity matrix I
    memset(kf->I_data, 0, sizeof(kf->I_data));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f203 433c 	addw	r3, r3, #1084	@ 0x43c
 8001a4a:	2290      	movs	r2, #144	@ 0x90
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f01b feea 	bl	801d828 <memset>
    for (int i = 0; i < STATE_DIM; i++)
 8001a54:	2300      	movs	r3, #0
 8001a56:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a58:	e00f      	b.n	8001a7a <KalmanFilter_Init+0x1a6>
    {
        kf->I_data[i * STATE_DIM + i] = 1.0f;
 8001a5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	1a9b      	subs	r3, r3, r2
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001a72:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < STATE_DIM; i++)
 8001a74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a76:	3301      	adds	r3, #1
 8001a78:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a7c:	2b05      	cmp	r3, #5
 8001a7e:	ddec      	ble.n	8001a5a <KalmanFilter_Init+0x186>
    }

    // State transition matrix A
    memset(kf->A_data, 0, sizeof(kf->A_data));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	33c0      	adds	r3, #192	@ 0xc0
 8001a84:	2290      	movs	r2, #144	@ 0x90
 8001a86:	2100      	movs	r1, #0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f01b fecd 	bl	801d828 <memset>
    for (int i = 0; i < 3; i++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	643b      	str	r3, [r7, #64]	@ 0x40
 8001a92:	e02e      	b.n	8001af2 <KalmanFilter_Init+0x21e>
    {
        kf->A_data[i * STATE_DIM + i] = 1.0f;                 // Diagonal elements for angles
 8001a94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001a96:	4613      	mov	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	1a9b      	subs	r3, r3, r2
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	3330      	adds	r3, #48	@ 0x30
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001aa8:	601a      	str	r2, [r3, #0]
        kf->A_data[i * STATE_DIM + i + 3] = -dt;              // Coupling with biases
 8001aaa:	4b19      	ldr	r3, [pc, #100]	@ (8001b10 <KalmanFilter_Init+0x23c>)
 8001aac:	edd3 7a00 	vldr	s15, [r3]
 8001ab0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	1a9b      	subs	r3, r3, r2
 8001ab8:	3303      	adds	r3, #3
 8001aba:	eef1 7a67 	vneg.f32	s15, s15
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	3330      	adds	r3, #48	@ 0x30
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	edc3 7a00 	vstr	s15, [r3]
        kf->A_data[(i + 3) * STATE_DIM + i + 3] = 1.0f;       // Diagonal elements for biases
 8001aca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001acc:	1cda      	adds	r2, r3, #3
 8001ace:	4613      	mov	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4413      	add	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ada:	4413      	add	r3, r2
 8001adc:	3303      	adds	r3, #3
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	3330      	adds	r3, #48	@ 0x30
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001aea:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++)
 8001aec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001aee:	3301      	adds	r3, #1
 8001af0:	643b      	str	r3, [r7, #64]	@ 0x40
 8001af2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	ddcd      	ble.n	8001a94 <KalmanFilter_Init+0x1c0>
    }

    // Control input matrix B
    memset(kf->B_data, 0, sizeof(kf->B_data));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8001afe:	2248      	movs	r2, #72	@ 0x48
 8001b00:	2100      	movs	r1, #0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f01b fe90 	bl	801d828 <memset>
    for (int i = 0; i < 3; i++)
 8001b08:	2300      	movs	r3, #0
 8001b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b0c:	e00e      	b.n	8001b2c <KalmanFilter_Init+0x258>
 8001b0e:	bf00      	nop
 8001b10:	200076c0 	.word	0x200076c0
    {
        kf->B_data[i * 3 + i] = dt; // B[i][i] = dt
 8001b14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4a86      	ldr	r2, [pc, #536]	@ (8001d34 <KalmanFilter_Init+0x460>)
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	3356      	adds	r3, #86	@ 0x56
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	440b      	add	r3, r1
 8001b24:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++)
 8001b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b28:	3301      	adds	r3, #1
 8001b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	ddf0      	ble.n	8001b14 <KalmanFilter_Init+0x240>
    }

    // Process noise covariance Q
    float32_t sigma_phi = 0.001f;
 8001b32:	4b81      	ldr	r3, [pc, #516]	@ (8001d38 <KalmanFilter_Init+0x464>)
 8001b34:	637b      	str	r3, [r7, #52]	@ 0x34
    float32_t sigma_theta = 0.001f;
 8001b36:	4b80      	ldr	r3, [pc, #512]	@ (8001d38 <KalmanFilter_Init+0x464>)
 8001b38:	633b      	str	r3, [r7, #48]	@ 0x30
    float32_t sigma_psi = 0.001f;
 8001b3a:	4b7f      	ldr	r3, [pc, #508]	@ (8001d38 <KalmanFilter_Init+0x464>)
 8001b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float32_t sigma_bias_phi = 0.003f;
 8001b3e:	4b7f      	ldr	r3, [pc, #508]	@ (8001d3c <KalmanFilter_Init+0x468>)
 8001b40:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t sigma_bias_theta = 0.003f;
 8001b42:	4b7e      	ldr	r3, [pc, #504]	@ (8001d3c <KalmanFilter_Init+0x468>)
 8001b44:	627b      	str	r3, [r7, #36]	@ 0x24
    float32_t sigma_bias_psi = 0.003f;
 8001b46:	4b7d      	ldr	r3, [pc, #500]	@ (8001d3c <KalmanFilter_Init+0x468>)
 8001b48:	623b      	str	r3, [r7, #32]
    memset(kf->Q_data, 0, sizeof(kf->Q_data));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8001b50:	2290      	movs	r2, #144	@ 0x90
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f01b fe67 	bl	801d828 <memset>
    kf->Q_data[0 * STATE_DIM + 0] = sigma_phi * sigma_phi * dt * dt;
 8001b5a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b5e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b62:	4b74      	ldr	r3, [pc, #464]	@ (8001d34 <KalmanFilter_Init+0x460>)
 8001b64:	edd3 7a00 	vldr	s15, [r3]
 8001b68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b6c:	4b71      	ldr	r3, [pc, #452]	@ (8001d34 <KalmanFilter_Init+0x460>)
 8001b6e:	edd3 7a00 	vldr	s15, [r3]
 8001b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	edc3 7a6a 	vstr	s15, [r3, #424]	@ 0x1a8
    kf->Q_data[1 * STATE_DIM + 1] = sigma_theta * sigma_theta * dt * dt;
 8001b7c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001b80:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b84:	4b6b      	ldr	r3, [pc, #428]	@ (8001d34 <KalmanFilter_Init+0x460>)
 8001b86:	edd3 7a00 	vldr	s15, [r3]
 8001b8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b8e:	4b69      	ldr	r3, [pc, #420]	@ (8001d34 <KalmanFilter_Init+0x460>)
 8001b90:	edd3 7a00 	vldr	s15, [r3]
 8001b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	edc3 7a71 	vstr	s15, [r3, #452]	@ 0x1c4
    kf->Q_data[2 * STATE_DIM + 2] = sigma_psi * sigma_psi * dt * dt;
 8001b9e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001ba2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001ba6:	4b63      	ldr	r3, [pc, #396]	@ (8001d34 <KalmanFilter_Init+0x460>)
 8001ba8:	edd3 7a00 	vldr	s15, [r3]
 8001bac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bb0:	4b60      	ldr	r3, [pc, #384]	@ (8001d34 <KalmanFilter_Init+0x460>)
 8001bb2:	edd3 7a00 	vldr	s15, [r3]
 8001bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	edc3 7a78 	vstr	s15, [r3, #480]	@ 0x1e0
    kf->Q_data[3 * STATE_DIM + 3] = sigma_bias_phi * sigma_bias_phi * dt ;
 8001bc0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001bc4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001bc8:	4b5a      	ldr	r3, [pc, #360]	@ (8001d34 <KalmanFilter_Init+0x460>)
 8001bca:	edd3 7a00 	vldr	s15, [r3]
 8001bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	edc3 7a7f 	vstr	s15, [r3, #508]	@ 0x1fc
    kf->Q_data[4 * STATE_DIM + 4] = sigma_bias_theta * sigma_bias_theta * dt;
 8001bd8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001bdc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001be0:	4b54      	ldr	r3, [pc, #336]	@ (8001d34 <KalmanFilter_Init+0x460>)
 8001be2:	edd3 7a00 	vldr	s15, [r3]
 8001be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	edc3 7a86 	vstr	s15, [r3, #536]	@ 0x218
    kf->Q_data[5 * STATE_DIM + 5] = sigma_bias_psi * sigma_bias_psi * dt ;
 8001bf0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001bf4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001bf8:	4b4e      	ldr	r3, [pc, #312]	@ (8001d34 <KalmanFilter_Init+0x460>)
 8001bfa:	edd3 7a00 	vldr	s15, [r3]
 8001bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	edc3 7a8d 	vstr	s15, [r3, #564]	@ 0x234

    // Measurement matrix H
    memset(kf->H_data, 0, sizeof(kf->H_data));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8001c0e:	2290      	movs	r2, #144	@ 0x90
 8001c10:	2100      	movs	r1, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f01b fe08 	bl	801d828 <memset>
    // Accelerometer measurements for roll and pitch
    kf->H_data[0 * STATE_DIM + 0] = 1.0f; // phi_acc depends on phi
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001c1e:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240
    kf->H_data[1 * STATE_DIM + 1] = 1.0f; // theta_acc depends on theta
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001c28:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
    // Magnetometer measurement for yaw
    kf->H_data[2 * STATE_DIM + 2] = 1.0f; // psi_mag depends on psi
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001c32:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
    // Gyroscope measurements
    kf->H_data[3 * STATE_DIM + 0] = 1.0f;   kf->H_data[3 * STATE_DIM + 3] = -1.0f; // omega_phi
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001c3c:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a3f      	ldr	r2, [pc, #252]	@ (8001d40 <KalmanFilter_Init+0x46c>)
 8001c44:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
    kf->H_data[4 * STATE_DIM + 1] = 1.0f;   kf->H_data[4 * STATE_DIM + 4] = -1.0f; // omega_theta
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001c4e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a3a      	ldr	r2, [pc, #232]	@ (8001d40 <KalmanFilter_Init+0x46c>)
 8001c56:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
    kf->H_data[5 * STATE_DIM + 2] = 1.0f;   kf->H_data[5 * STATE_DIM + 5] = -1.0f; // omega_psi
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001c60:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a36      	ldr	r2, [pc, #216]	@ (8001d40 <KalmanFilter_Init+0x46c>)
 8001c68:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

    // Measurement noise covariance R
    float32_t sigma_acc_phi = 0.03f;
 8001c6c:	4b35      	ldr	r3, [pc, #212]	@ (8001d44 <KalmanFilter_Init+0x470>)
 8001c6e:	61fb      	str	r3, [r7, #28]
    float32_t sigma_acc_theta = 0.03f;
 8001c70:	4b34      	ldr	r3, [pc, #208]	@ (8001d44 <KalmanFilter_Init+0x470>)
 8001c72:	61bb      	str	r3, [r7, #24]
    float32_t sigma_mag_psi = 1000.0f; // Large value due to lack of magnetometer
 8001c74:	4b34      	ldr	r3, [pc, #208]	@ (8001d48 <KalmanFilter_Init+0x474>)
 8001c76:	617b      	str	r3, [r7, #20]
    float32_t sigma_gyro_phi = 0.02f;
 8001c78:	4b34      	ldr	r3, [pc, #208]	@ (8001d4c <KalmanFilter_Init+0x478>)
 8001c7a:	613b      	str	r3, [r7, #16]
    float32_t sigma_gyro_theta = 0.02f;
 8001c7c:	4b33      	ldr	r3, [pc, #204]	@ (8001d4c <KalmanFilter_Init+0x478>)
 8001c7e:	60fb      	str	r3, [r7, #12]
    float32_t sigma_gyro_psi = 0.02f;
 8001c80:	4b32      	ldr	r3, [pc, #200]	@ (8001d4c <KalmanFilter_Init+0x478>)
 8001c82:	60bb      	str	r3, [r7, #8]
    memset(kf->R_data, 0, sizeof(kf->R_data));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 8001c8a:	2290      	movs	r2, #144	@ 0x90
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f01b fdca 	bl	801d828 <memset>
    kf->R_data[0 * MEASUREMENT_DIM + 0] = sigma_acc_phi * sigma_acc_phi ;
 8001c94:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c98:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	edc3 7ab6 	vstr	s15, [r3, #728]	@ 0x2d8
    kf->R_data[1 * MEASUREMENT_DIM + 1] = sigma_acc_theta * sigma_acc_theta ;
 8001ca2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ca6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	edc3 7abd 	vstr	s15, [r3, #756]	@ 0x2f4
    kf->R_data[2 * MEASUREMENT_DIM + 2] = sigma_mag_psi * sigma_mag_psi ; // High uncertainty for psi_mag
 8001cb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cb4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	edc3 7ac4 	vstr	s15, [r3, #784]	@ 0x310
    kf->R_data[3 * MEASUREMENT_DIM + 3] = sigma_gyro_phi * sigma_gyro_phi ;
 8001cbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cc2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	edc3 7acb 	vstr	s15, [r3, #812]	@ 0x32c
    kf->R_data[4 * MEASUREMENT_DIM + 4] = sigma_gyro_theta * sigma_gyro_theta ;
 8001ccc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cd0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	edc3 7ad2 	vstr	s15, [r3, #840]	@ 0x348
    kf->R_data[5 * MEASUREMENT_DIM + 5] = sigma_gyro_psi * sigma_gyro_psi ;
 8001cda:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cde:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	edc3 7ad9 	vstr	s15, [r3, #868]	@ 0x364

    // Initialize error covariance matrix P_k
    memset(kf->P_k_data, 0, sizeof(kf->P_k_data));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3328      	adds	r3, #40	@ 0x28
 8001cec:	2290      	movs	r2, #144	@ 0x90
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f01b fd99 	bl	801d828 <memset>
    for (int i = 0; i < STATE_DIM; i++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cfa:	e00d      	b.n	8001d18 <KalmanFilter_Init+0x444>
    {
        kf->P_k_data[i * STATE_DIM + i] = 1.0f;
 8001cfc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001cfe:	4613      	mov	r3, r2
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	1a9b      	subs	r3, r3, r2
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	330a      	adds	r3, #10
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001d10:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < STATE_DIM; i++)
 8001d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d14:	3301      	adds	r3, #1
 8001d16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d1a:	2b05      	cmp	r3, #5
 8001d1c:	ddee      	ble.n	8001cfc <KalmanFilter_Init+0x428>
    }

    // Initialize state vector x_k
    memset(kf->x_k_data, 0, sizeof(kf->x_k_data));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3308      	adds	r3, #8
 8001d22:	2218      	movs	r2, #24
 8001d24:	2100      	movs	r1, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f01b fd7e 	bl	801d828 <memset>
}
 8001d2c:	bf00      	nop
 8001d2e:	3748      	adds	r7, #72	@ 0x48
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	200076c0 	.word	0x200076c0
 8001d38:	3a83126f 	.word	0x3a83126f
 8001d3c:	3b449ba6 	.word	0x3b449ba6
 8001d40:	bf800000 	.word	0xbf800000
 8001d44:	3cf5c28f 	.word	0x3cf5c28f
 8001d48:	447a0000 	.word	0x447a0000
 8001d4c:	3ca3d70a 	.word	0x3ca3d70a

08001d50 <ComputeControlInput>:

// Function to compute the control input u_{i+1}
void ComputeControlInput(float32_t phi_i, float32_t theta_i, float32_t psi_i, float32_t omega_phi_i, float32_t omega_theta_i, float32_t omega_psi_i, float32_t *u_i1)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b0a0      	sub	sp, #128	@ 0x80
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	ed87 0a07 	vstr	s0, [r7, #28]
 8001d5a:	edc7 0a06 	vstr	s1, [r7, #24]
 8001d5e:	ed87 1a05 	vstr	s2, [r7, #20]
 8001d62:	edc7 1a04 	vstr	s3, [r7, #16]
 8001d66:	ed87 2a03 	vstr	s4, [r7, #12]
 8001d6a:	edc7 2a02 	vstr	s5, [r7, #8]
 8001d6e:	6078      	str	r0, [r7, #4]
    // Compute the rotation matrix R_i^{-1} (from inertial frame to body frame)
    float32_t cos_phi = cosf(phi_i);
 8001d70:	ed97 0a07 	vldr	s0, [r7, #28]
 8001d74:	f01c fe44 	bl	801ea00 <cosf>
 8001d78:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74
    float32_t sin_phi = sinf(phi_i);
 8001d7c:	ed97 0a07 	vldr	s0, [r7, #28]
 8001d80:	f01c fe82 	bl	801ea88 <sinf>
 8001d84:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
    float32_t cos_theta = cosf(theta_i);
 8001d88:	ed97 0a06 	vldr	s0, [r7, #24]
 8001d8c:	f01c fe38 	bl	801ea00 <cosf>
 8001d90:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
    float32_t sin_theta = sinf(theta_i);
 8001d94:	ed97 0a06 	vldr	s0, [r7, #24]
 8001d98:	f01c fe76 	bl	801ea88 <sinf>
 8001d9c:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68
    float32_t cos_psi = cosf(psi_i);
 8001da0:	ed97 0a05 	vldr	s0, [r7, #20]
 8001da4:	f01c fe2c 	bl	801ea00 <cosf>
 8001da8:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
    float32_t sin_psi = sinf(psi_i);
 8001dac:	ed97 0a05 	vldr	s0, [r7, #20]
 8001db0:	f01c fe6a 	bl	801ea88 <sinf>
 8001db4:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60

    // Compute the elements of the rotation matrix R_i^{-1}
    float32_t R_inv[3][3];
    R_inv[0][0] = cos_theta * cos_psi;
 8001db8:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001dbc:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    R_inv[0][1] = sin_phi * sin_theta * cos_psi - cos_phi * sin_psi;
 8001dc8:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001dcc:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001dd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dd4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001dd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ddc:	edd7 6a1d 	vldr	s13, [r7, #116]	@ 0x74
 8001de0:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001de4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dec:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    R_inv[0][2] = cos_phi * sin_theta * cos_psi + sin_phi * sin_psi;
 8001df0:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001df4:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001df8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dfc:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001e00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e04:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 8001e08:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001e0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e14:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    R_inv[1][0] = cos_theta * sin_psi;
 8001e18:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001e1c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e24:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    R_inv[1][1] = sin_phi * sin_theta * sin_psi + cos_phi * cos_psi;
 8001e28:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001e2c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001e30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e34:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001e38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e3c:	edd7 6a1d 	vldr	s13, [r7, #116]	@ 0x74
 8001e40:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e4c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    R_inv[1][2] = cos_phi * sin_theta * sin_psi - sin_phi * cos_psi;
 8001e50:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001e54:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001e58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e5c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001e60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e64:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 8001e68:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001e6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e74:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    R_inv[2][0] = -sin_theta;
 8001e78:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001e7c:	eef1 7a67 	vneg.f32	s15, s15
 8001e80:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    R_inv[2][1] = sin_phi * cos_theta;
 8001e84:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001e88:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e90:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    R_inv[2][2] = cos_phi * cos_theta;
 8001e94:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001e98:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea0:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

    // Gyroscope measurement vector omega_i in body frame
    float32_t omega_i[3] = {omega_phi_i, omega_theta_i, omega_psi_i};
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Compute omega_inertial = R_i^{-1} * omega_i
    float32_t omega_inertial[3];
    for (int i = 0; i < 3; i++)
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001eb4:	e038      	b.n	8001f28 <ComputeControlInput+0x1d8>
    {
        omega_inertial[i] = 0.0f;
 8001eb6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	3380      	adds	r3, #128	@ 0x80
 8001ebc:	443b      	add	r3, r7
 8001ebe:	3b5c      	subs	r3, #92	@ 0x5c
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 3; j++)
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001eca:	e027      	b.n	8001f1c <ComputeControlInput+0x1cc>
        {
            omega_inertial[i] += R_inv[i][j] * omega_i[j];
 8001ecc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	3380      	adds	r3, #128	@ 0x80
 8001ed2:	443b      	add	r3, r7
 8001ed4:	3b5c      	subs	r3, #92	@ 0x5c
 8001ed6:	ed93 7a00 	vldr	s14, [r3]
 8001eda:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001edc:	4613      	mov	r3, r2
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4413      	add	r3, r2
 8001ee2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	3380      	adds	r3, #128	@ 0x80
 8001eea:	443b      	add	r3, r7
 8001eec:	3b44      	subs	r3, #68	@ 0x44
 8001eee:	edd3 6a00 	vldr	s13, [r3]
 8001ef2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	3380      	adds	r3, #128	@ 0x80
 8001ef8:	443b      	add	r3, r7
 8001efa:	3b50      	subs	r3, #80	@ 0x50
 8001efc:	edd3 7a00 	vldr	s15, [r3]
 8001f00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f08:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	3380      	adds	r3, #128	@ 0x80
 8001f0e:	443b      	add	r3, r7
 8001f10:	3b5c      	subs	r3, #92	@ 0x5c
 8001f12:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++)
 8001f16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f18:	3301      	adds	r3, #1
 8001f1a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	ddd4      	ble.n	8001ecc <ComputeControlInput+0x17c>
    for (int i = 0; i < 3; i++)
 8001f22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f24:	3301      	adds	r3, #1
 8001f26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001f28:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	ddc3      	ble.n	8001eb6 <ComputeControlInput+0x166>
        }
    }

    // Control input u_{i+1} = omega_inertial
    u_i1[0] = omega_inertial[0]; // Roll rate in inertial frame
 8001f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	601a      	str	r2, [r3, #0]
    u_i1[1] = omega_inertial[1]; // Pitch rate in inertial frame
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3304      	adds	r3, #4
 8001f38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f3a:	601a      	str	r2, [r3, #0]
    u_i1[2] = omega_inertial[2]; // Yaw rate in inertial frame
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3308      	adds	r3, #8
 8001f40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f42:	601a      	str	r2, [r3, #0]
}
 8001f44:	bf00      	nop
 8001f46:	3780      	adds	r7, #128	@ 0x80
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <KalmanFilter_Update>:

// Function to update the Kalman Filter with new measurements
void KalmanFilter_Update(KalmanFilter *kf, float32_t phi_acc, float32_t theta_acc, float32_t psi_mag, float32_t omega_phi, float32_t omega_theta, float32_t omega_psi)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b090      	sub	sp, #64	@ 0x40
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	61f8      	str	r0, [r7, #28]
 8001f54:	ed87 0a06 	vstr	s0, [r7, #24]
 8001f58:	edc7 0a05 	vstr	s1, [r7, #20]
 8001f5c:	ed87 1a04 	vstr	s2, [r7, #16]
 8001f60:	edc7 1a03 	vstr	s3, [r7, #12]
 8001f64:	ed87 2a02 	vstr	s4, [r7, #8]
 8001f68:	edc7 2a01 	vstr	s5, [r7, #4]
    arm_status status;

    // Current estimates
    float32_t phi_i = kf->x_k_data[0];
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float32_t theta_i = kf->x_k_data[1];
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	63bb      	str	r3, [r7, #56]	@ 0x38
    float32_t psi_i = kf->x_k_data[2];
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	637b      	str	r3, [r7, #52]	@ 0x34

    // Compute control input u_{i+1}
    float32_t u_i1[3];
    ComputeControlInput(phi_i, theta_i, psi_i, omega_phi, omega_theta, omega_psi, u_i1);
 8001f7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f82:	4618      	mov	r0, r3
 8001f84:	edd7 2a01 	vldr	s5, [r7, #4]
 8001f88:	ed97 2a02 	vldr	s4, [r7, #8]
 8001f8c:	edd7 1a03 	vldr	s3, [r7, #12]
 8001f90:	ed97 1a0d 	vldr	s2, [r7, #52]	@ 0x34
 8001f94:	edd7 0a0e 	vldr	s1, [r7, #56]	@ 0x38
 8001f98:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8001f9c:	f7ff fed8 	bl	8001d50 <ComputeControlInput>

    // Set the control input vector u_k
    kf->u_k_data[0] = u_i1[0];
 8001fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 8001fa8:	601a      	str	r2, [r3, #0]
    kf->u_k_data[1] = u_i1[1];
 8001faa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f203 432c 	addw	r3, r3, #1068	@ 0x42c
 8001fb2:	601a      	str	r2, [r3, #0]
    kf->u_k_data[2] = u_i1[2];
 8001fb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f503 6386 	add.w	r3, r3, #1072	@ 0x430
 8001fbc:	601a      	str	r2, [r3, #0]

    // Predict Step
    // x_k = A * x_k + B * u_k
    status = arm_mat_mult_f32(&kf->A, &kf->x_k, &kf->temp6); // temp6 = A * x_k
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	f103 00b8 	add.w	r0, r3, #184	@ 0xb8
 8001fc4:	69f9      	ldr	r1, [r7, #28]
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	f203 73c4 	addw	r3, r3, #1988	@ 0x7c4
 8001fcc:	461a      	mov	r2, r3
 8001fce:	f01a fd2d 	bl	801ca2c <arm_mat_mult_f32>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    status = arm_mat_mult_f32(&kf->B, &kf->u_k, &kf->temp1); // temp1 = B * u_k
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f503 70a8 	add.w	r0, r3, #336	@ 0x150
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	f503 6184 	add.w	r1, r3, #1056	@ 0x420
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f203 43cc 	addw	r3, r3, #1228	@ 0x4cc
 8001fea:	461a      	mov	r2, r3
 8001fec:	f01a fd1e 	bl	801ca2c <arm_mat_mult_f32>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    status = arm_mat_add_f32(&kf->temp6, &kf->temp1, &kf->x_k); // x_k = temp6 + temp1
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f203 70c4 	addw	r0, r3, #1988	@ 0x7c4
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f203 43cc 	addw	r3, r3, #1228	@ 0x4cc
 8002002:	69fa      	ldr	r2, [r7, #28]
 8002004:	4619      	mov	r1, r3
 8002006:	f01a febb 	bl	801cd80 <arm_mat_add_f32>
 800200a:	4603      	mov	r3, r0
 800200c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    // P_k = A * P_k * A^T + Q
    status = arm_mat_mult_f32(&kf->A, &kf->P_k, &kf->temp1); // temp1 = A * P_k
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f103 00b8 	add.w	r0, r3, #184	@ 0xb8
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	f103 0120 	add.w	r1, r3, #32
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f203 43cc 	addw	r3, r3, #1228	@ 0x4cc
 8002022:	461a      	mov	r2, r3
 8002024:	f01a fd02 	bl	801ca2c <arm_mat_mult_f32>
 8002028:	4603      	mov	r3, r0
 800202a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    status = arm_mat_trans_f32(&kf->A, &kf->temp2); // temp2 = A^T
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	f103 02b8 	add.w	r2, r3, #184	@ 0xb8
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f203 5364 	addw	r3, r3, #1380	@ 0x564
 800203a:	4619      	mov	r1, r3
 800203c:	4610      	mov	r0, r2
 800203e:	f01a fc2f 	bl	801c8a0 <arm_mat_trans_f32>
 8002042:	4603      	mov	r3, r0
 8002044:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    status = arm_mat_mult_f32(&kf->temp1, &kf->temp2, &kf->P_k); // P_k = temp1 * temp2
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f203 40cc 	addw	r0, r3, #1228	@ 0x4cc
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	f203 5164 	addw	r1, r3, #1380	@ 0x564
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	3320      	adds	r3, #32
 8002058:	461a      	mov	r2, r3
 800205a:	f01a fce7 	bl	801ca2c <arm_mat_mult_f32>
 800205e:	4603      	mov	r3, r0
 8002060:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    status = arm_mat_add_f32(&kf->P_k, &kf->Q, &kf->P_k); // P_k = P_k + Q
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f103 0020 	add.w	r0, r3, #32
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	f503 71d0 	add.w	r1, r3, #416	@ 0x1a0
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	3320      	adds	r3, #32
 8002074:	461a      	mov	r2, r3
 8002076:	f01a fe83 	bl	801cd80 <arm_mat_add_f32>
 800207a:	4603      	mov	r3, r0
 800207c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    // Update State
    // z_k = [phi_acc; theta_acc; psi_mag; omega_phi; omega_theta; omega_psi]
    kf->z_k_data[0] = phi_acc;
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	601a      	str	r2, [r3, #0]
    kf->z_k_data[1] = theta_acc;
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	601a      	str	r2, [r3, #0]
    kf->z_k_data[2] = psi_mag; // This value is not available; set as needed
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	601a      	str	r2, [r3, #0]
    kf->z_k_data[3] = omega_phi;
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	f203 4314 	addw	r3, r3, #1044	@ 0x414
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	601a      	str	r2, [r3, #0]
    kf->z_k_data[4] = omega_theta;
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	601a      	str	r2, [r3, #0]
    kf->z_k_data[5] = omega_psi;
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	601a      	str	r2, [r3, #0]

    // y_k = z_k - H * x_k
    status = arm_mat_mult_f32(&kf->H, &kf->x_k, &kf->temp7); // temp7 = H * x_k
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f503 700e 	add.w	r0, r3, #568	@ 0x238
 80020c2:	69f9      	ldr	r1, [r7, #28]
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f203 73e4 	addw	r3, r3, #2020	@ 0x7e4
 80020ca:	461a      	mov	r2, r3
 80020cc:	f01a fcae 	bl	801ca2c <arm_mat_mult_f32>
 80020d0:	4603      	mov	r3, r0
 80020d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    status = arm_mat_sub_f32(&kf->z_k, &kf->temp7, &kf->temp7); // temp7 = y_k = z_k - H * x_k
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	f503 6080 	add.w	r0, r3, #1024	@ 0x400
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f203 71e4 	addw	r1, r3, #2020	@ 0x7e4
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	f203 73e4 	addw	r3, r3, #2020	@ 0x7e4
 80020e8:	461a      	mov	r2, r3
 80020ea:	f01a fc35 	bl	801c958 <arm_mat_sub_f32>
 80020ee:	4603      	mov	r3, r0
 80020f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    // S_k = H * P_k * H^T + R
    status = arm_mat_mult_f32(&kf->H, &kf->P_k, &kf->temp4); // temp4 = H * P_k
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f503 700e 	add.w	r0, r3, #568	@ 0x238
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	f103 0120 	add.w	r1, r3, #32
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f203 6394 	addw	r3, r3, #1684	@ 0x694
 8002106:	461a      	mov	r2, r3
 8002108:	f01a fc90 	bl	801ca2c <arm_mat_mult_f32>
 800210c:	4603      	mov	r3, r0
 800210e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    status = arm_mat_trans_f32(&kf->H, &kf->temp5); // temp5 = H^T
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	f503 720e 	add.w	r2, r3, #568	@ 0x238
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f203 732c 	addw	r3, r3, #1836	@ 0x72c
 800211e:	4619      	mov	r1, r3
 8002120:	4610      	mov	r0, r2
 8002122:	f01a fbbd 	bl	801c8a0 <arm_mat_trans_f32>
 8002126:	4603      	mov	r3, r0
 8002128:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    status = arm_mat_mult_f32(&kf->temp4, &kf->temp5, &kf->temp3); // temp3 = temp4 * temp5
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f203 6094 	addw	r0, r3, #1684	@ 0x694
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	f203 712c 	addw	r1, r3, #1836	@ 0x72c
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f203 53fc 	addw	r3, r3, #1532	@ 0x5fc
 800213e:	461a      	mov	r2, r3
 8002140:	f01a fc74 	bl	801ca2c <arm_mat_mult_f32>
 8002144:	4603      	mov	r3, r0
 8002146:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    status = arm_mat_add_f32(&kf->temp3, &kf->R, &kf->temp3); // temp3 = S_k = H * P_k * H^T + R
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	f203 50fc 	addw	r0, r3, #1532	@ 0x5fc
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f503 7134 	add.w	r1, r3, #720	@ 0x2d0
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	f203 53fc 	addw	r3, r3, #1532	@ 0x5fc
 800215c:	461a      	mov	r2, r3
 800215e:	f01a fe0f 	bl	801cd80 <arm_mat_add_f32>
 8002162:	4603      	mov	r3, r0
 8002164:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    // K_k = P_k * H^T * inv(S_k)
    status = arm_mat_inverse_f32(&kf->temp3, &kf->temp2); // temp2 = inv(S_k)
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f203 52fc 	addw	r2, r3, #1532	@ 0x5fc
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	f203 5364 	addw	r3, r3, #1380	@ 0x564
 8002174:	4619      	mov	r1, r3
 8002176:	4610      	mov	r0, r2
 8002178:	f01a fcf8 	bl	801cb6c <arm_mat_inverse_f32>
 800217c:	4603      	mov	r3, r0
 800217e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    status = arm_mat_mult_f32(&kf->P_k, &kf->temp5, &kf->temp4); // temp4 = P_k * H^T
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	f103 0020 	add.w	r0, r3, #32
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f203 712c 	addw	r1, r3, #1836	@ 0x72c
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	f203 6394 	addw	r3, r3, #1684	@ 0x694
 8002194:	461a      	mov	r2, r3
 8002196:	f01a fc49 	bl	801ca2c <arm_mat_mult_f32>
 800219a:	4603      	mov	r3, r0
 800219c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    status = arm_mat_mult_f32(&kf->temp4, &kf->temp2, &kf->K_k); // K_k = temp4 * temp2
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f203 6094 	addw	r0, r3, #1684	@ 0x694
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	f203 5164 	addw	r1, r3, #1380	@ 0x564
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 80021b2:	461a      	mov	r2, r3
 80021b4:	f01a fc3a 	bl	801ca2c <arm_mat_mult_f32>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    // x_k = x_k + K_k * y_k
    status = arm_mat_mult_f32(&kf->K_k, &kf->temp7, &kf->temp6); // temp6 = K_k * y_k
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f503 705a 	add.w	r0, r3, #872	@ 0x368
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f203 71e4 	addw	r1, r3, #2020	@ 0x7e4
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	f203 73c4 	addw	r3, r3, #1988	@ 0x7c4
 80021d0:	461a      	mov	r2, r3
 80021d2:	f01a fc2b 	bl	801ca2c <arm_mat_mult_f32>
 80021d6:	4603      	mov	r3, r0
 80021d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    status = arm_mat_add_f32(&kf->x_k, &kf->temp6, &kf->x_k); // x_k = x_k + temp6
 80021dc:	69f8      	ldr	r0, [r7, #28]
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	f203 73c4 	addw	r3, r3, #1988	@ 0x7c4
 80021e4:	69fa      	ldr	r2, [r7, #28]
 80021e6:	4619      	mov	r1, r3
 80021e8:	f01a fdca 	bl	801cd80 <arm_mat_add_f32>
 80021ec:	4603      	mov	r3, r0
 80021ee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    // P_k = (I - K_k * H) * P_k
    status = arm_mat_mult_f32(&kf->K_k, &kf->H, &kf->temp1); // temp1 = K_k * H
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	f503 705a 	add.w	r0, r3, #872	@ 0x368
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f503 710e 	add.w	r1, r3, #568	@ 0x238
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	f203 43cc 	addw	r3, r3, #1228	@ 0x4cc
 8002204:	461a      	mov	r2, r3
 8002206:	f01a fc11 	bl	801ca2c <arm_mat_mult_f32>
 800220a:	4603      	mov	r3, r0
 800220c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    status = arm_mat_sub_f32(&kf->I, &kf->temp1, &kf->temp2); // temp2 = I - K_k * H
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f203 4034 	addw	r0, r3, #1076	@ 0x434
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	f203 41cc 	addw	r1, r3, #1228	@ 0x4cc
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f203 5364 	addw	r3, r3, #1380	@ 0x564
 8002222:	461a      	mov	r2, r3
 8002224:	f01a fb98 	bl	801c958 <arm_mat_sub_f32>
 8002228:	4603      	mov	r3, r0
 800222a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    status = arm_mat_mult_f32(&kf->temp2, &kf->P_k, &kf->P_k); // P_k = temp2 * P_k
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	f203 5064 	addw	r0, r3, #1380	@ 0x564
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f103 0120 	add.w	r1, r3, #32
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3320      	adds	r3, #32
 800223e:	461a      	mov	r2, r3
 8002240:	f01a fbf4 	bl	801ca2c <arm_mat_mult_f32>
 8002244:	4603      	mov	r3, r0
 8002246:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
}
 800224a:	bf00      	nop
 800224c:	3740      	adds	r7, #64	@ 0x40
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002258:	f001 fcaf 	bl	8003bba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800225c:	f000 f826 	bl	80022ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002260:	f7ff fa1a 	bl	8001698 <MX_GPIO_Init>
  MX_DMA_Init();
 8002264:	f7ff f92a 	bl	80014bc <MX_DMA_Init>
  MX_IWDG_Init();
 8002268:	f7ff fb16 	bl	8001898 <MX_IWDG_Init>
  MX_LPUART1_UART_Init();
 800226c:	f001 fa84 	bl	8003778 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8002270:	f7ff fa78 	bl	8001764 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002274:	f001 faca 	bl	800380c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c1) == 1);
 8002278:	bf00      	nop
 800227a:	4809      	ldr	r0, [pc, #36]	@ (80022a0 <main+0x4c>)
 800227c:	f006 fbda 	bl	8008a34 <MPU6050_Init>
 8002280:	4603      	mov	r3, r0
 8002282:	2b01      	cmp	r3, #1
 8002284:	d0f9      	beq.n	800227a <main+0x26>
//  KalmanFilter_Init();
//  KalmanFilter_Init(&kf_roll, 0.01f);
//  KalmanFilter_Init(&kf_pitch, 0.01f);
  KalmanFilter_Init(&kf, 0.01);
 8002286:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 80022a4 <main+0x50>
 800228a:	4807      	ldr	r0, [pc, #28]	@ (80022a8 <main+0x54>)
 800228c:	f7ff fb22 	bl	80018d4 <KalmanFilter_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002290:	f006 ffb0 	bl	80091f4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002294:	f7fe feb0 	bl	8000ff8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002298:	f006 ffd0 	bl	800923c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800229c:	bf00      	nop
 800229e:	e7fd      	b.n	800229c <main+0x48>
 80022a0:	2000765c 	.word	0x2000765c
 80022a4:	3c23d70a 	.word	0x3c23d70a
 80022a8:	20007b90 	.word	0x20007b90

080022ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b094      	sub	sp, #80	@ 0x50
 80022b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022b2:	f107 0318 	add.w	r3, r7, #24
 80022b6:	2238      	movs	r2, #56	@ 0x38
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f01b fab4 	bl	801d828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	60da      	str	r2, [r3, #12]
 80022cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80022ce:	2000      	movs	r0, #0
 80022d0:	f003 fa1e 	bl	8005710 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80022d4:	230a      	movs	r3, #10
 80022d6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022de:	2340      	movs	r3, #64	@ 0x40
 80022e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80022e2:	2301      	movs	r3, #1
 80022e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022e6:	2302      	movs	r3, #2
 80022e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022ea:	2302      	movs	r3, #2
 80022ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80022ee:	2304      	movs	r3, #4
 80022f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80022f2:	2355      	movs	r3, #85	@ 0x55
 80022f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022f6:	2302      	movs	r3, #2
 80022f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80022fa:	2302      	movs	r3, #2
 80022fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80022fe:	2302      	movs	r3, #2
 8002300:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002302:	f107 0318 	add.w	r3, r7, #24
 8002306:	4618      	mov	r0, r3
 8002308:	f003 fab6 	bl	8005878 <HAL_RCC_OscConfig>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002312:	f000 fef7 	bl	8003104 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002316:	230f      	movs	r3, #15
 8002318:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800231a:	2303      	movs	r3, #3
 800231c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800232a:	1d3b      	adds	r3, r7, #4
 800232c:	2104      	movs	r1, #4
 800232e:	4618      	mov	r0, r3
 8002330:	f003 fdb4 	bl	8005e9c <HAL_RCC_ClockConfig>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800233a:	f000 fee3 	bl	8003104 <Error_Handler>
  }
}
 800233e:	bf00      	nop
 8002340:	3750      	adds	r7, #80	@ 0x50
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <timer_callback>:

/* USER CODE BEGIN 4 */
void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8002348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800234c:	b094      	sub	sp, #80	@ 0x50
 800234e:	af00      	add	r7, sp, #0
 8002350:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002352:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	if (timer != NULL) {
 8002356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 8104 	beq.w	8002566 <timer_callback+0x21e>

		// Synchronize time with the agent
		rmw_uros_sync_session(1000);
 800235e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002362:	f00d ff05 	bl	8010170 <rmw_uros_sync_session>
		device_status = HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 1, 10);
 8002366:	230a      	movs	r3, #10
 8002368:	2201      	movs	r2, #1
 800236a:	21d0      	movs	r1, #208	@ 0xd0
 800236c:	4890      	ldr	r0, [pc, #576]	@ (80025b0 <timer_callback+0x268>)
 800236e:	f002 fd2b 	bl	8004dc8 <HAL_I2C_IsDeviceReady>
 8002372:	4603      	mov	r3, r0
 8002374:	461a      	mov	r2, r3
 8002376:	4b8f      	ldr	r3, [pc, #572]	@ (80025b4 <timer_callback+0x26c>)
 8002378:	701a      	strb	r2, [r3, #0]


		if(device_status == HAL_OK){
 800237a:	4b8e      	ldr	r3, [pc, #568]	@ (80025b4 <timer_callback+0x26c>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	f040 80e5 	bne.w	800254e <timer_callback+0x206>
			is_active = true;
 8002384:	4b8c      	ldr	r3, [pc, #560]	@ (80025b8 <timer_callback+0x270>)
 8002386:	2201      	movs	r2, #1
 8002388:	701a      	strb	r2, [r3, #0]
			if(is_calib ) {
 800238a:	4b8c      	ldr	r3, [pc, #560]	@ (80025bc <timer_callback+0x274>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 80d3 	beq.w	800253a <timer_callback+0x1f2>

				double linear_x, angular_z;
				readImuCalibrated();
 8002394:	463b      	mov	r3, r7
 8002396:	4618      	mov	r0, r3
 8002398:	f000 f9c2 	bl	8002720 <readImuCalibrated>

				rpfromAccel();
 800239c:	f000 fb54 	bl	8002a48 <rpfromAccel>
				rpfromGyro();
 80023a0:	f000 fc02 	bl	8002ba8 <rpfromGyro>
				RCCHECK(rcl_publish(&mpu6050_publisher, &mpu6050_msg, NULL));
 80023a4:	2200      	movs	r2, #0
 80023a6:	4986      	ldr	r1, [pc, #536]	@ (80025c0 <timer_callback+0x278>)
 80023a8:	4886      	ldr	r0, [pc, #536]	@ (80025c4 <timer_callback+0x27c>)
 80023aa:	f00b ff91 	bl	800e2d0 <rcl_publish>

//				v_x = Kalman_getAngle(&KX, accel_angle.roll, data.gx, 0.01);
//				v_y = Kalman_getAngle(&KY, accel_angle.pitch, data.gy, 0.01);

				KalmanFilter_Update(&kf, accel_angle.roll, accel_angle.pitch, 0, data.gx, data.gy, data.gz);
 80023ae:	4b86      	ldr	r3, [pc, #536]	@ (80025c8 <timer_callback+0x280>)
 80023b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b4:	4610      	mov	r0, r2
 80023b6:	4619      	mov	r1, r3
 80023b8:	f7fe fc06 	bl	8000bc8 <__aeabi_d2f>
 80023bc:	4604      	mov	r4, r0
 80023be:	4b82      	ldr	r3, [pc, #520]	@ (80025c8 <timer_callback+0x280>)
 80023c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80023c4:	4610      	mov	r0, r2
 80023c6:	4619      	mov	r1, r3
 80023c8:	f7fe fbfe 	bl	8000bc8 <__aeabi_d2f>
 80023cc:	4605      	mov	r5, r0
 80023ce:	4b7f      	ldr	r3, [pc, #508]	@ (80025cc <timer_callback+0x284>)
 80023d0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023d4:	4610      	mov	r0, r2
 80023d6:	4619      	mov	r1, r3
 80023d8:	f7fe fbf6 	bl	8000bc8 <__aeabi_d2f>
 80023dc:	4606      	mov	r6, r0
 80023de:	4b7b      	ldr	r3, [pc, #492]	@ (80025cc <timer_callback+0x284>)
 80023e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80023e4:	4610      	mov	r0, r2
 80023e6:	4619      	mov	r1, r3
 80023e8:	f7fe fbee 	bl	8000bc8 <__aeabi_d2f>
 80023ec:	4680      	mov	r8, r0
 80023ee:	4b77      	ldr	r3, [pc, #476]	@ (80025cc <timer_callback+0x284>)
 80023f0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80023f4:	4610      	mov	r0, r2
 80023f6:	4619      	mov	r1, r3
 80023f8:	f7fe fbe6 	bl	8000bc8 <__aeabi_d2f>
 80023fc:	4603      	mov	r3, r0
 80023fe:	ee02 3a90 	vmov	s5, r3
 8002402:	ee02 8a10 	vmov	s4, r8
 8002406:	ee01 6a90 	vmov	s3, r6
 800240a:	ed9f 1a71 	vldr	s2, [pc, #452]	@ 80025d0 <timer_callback+0x288>
 800240e:	ee00 5a90 	vmov	s1, r5
 8002412:	ee00 4a10 	vmov	s0, r4
 8002416:	486f      	ldr	r0, [pc, #444]	@ (80025d4 <timer_callback+0x28c>)
 8002418:	f7ff fd98 	bl	8001f4c <KalmanFilter_Update>

				linear_x = kf.x_k_data[0];
 800241c:	4b6d      	ldr	r3, [pc, #436]	@ (80025d4 <timer_callback+0x28c>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe f8c9 	bl	80005b8 <__aeabi_f2d>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
				angular_z = - kf.x_k_data[1];
 800242e:	4b69      	ldr	r3, [pc, #420]	@ (80025d4 <timer_callback+0x28c>)
 8002430:	edd3 7a03 	vldr	s15, [r3, #12]
 8002434:	eef1 7a67 	vneg.f32	s15, s15
 8002438:	ee17 3a90 	vmov	r3, s15
 800243c:	4618      	mov	r0, r3
 800243e:	f7fe f8bb 	bl	80005b8 <__aeabi_f2d>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

				if((kf.x_k_data[0] >= -0.1) && (kf.x_k_data[0] <= 0.1)){
 800244a:	4b62      	ldr	r3, [pc, #392]	@ (80025d4 <timer_callback+0x28c>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe f8b2 	bl	80005b8 <__aeabi_f2d>
 8002454:	a346      	add	r3, pc, #280	@ (adr r3, 8002570 <timer_callback+0x228>)
 8002456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245a:	f7fe fb8b 	bl	8000b74 <__aeabi_dcmpge>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d012      	beq.n	800248a <timer_callback+0x142>
 8002464:	4b5b      	ldr	r3, [pc, #364]	@ (80025d4 <timer_callback+0x28c>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe f8a5 	bl	80005b8 <__aeabi_f2d>
 800246e:	a342      	add	r3, pc, #264	@ (adr r3, 8002578 <timer_callback+0x230>)
 8002470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002474:	f7fe fb74 	bl	8000b60 <__aeabi_dcmple>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <timer_callback+0x142>
					linear_x = 0.0;
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
				}
				if((kf.x_k_data[1] >= -0.1) && (kf.x_k_data[1] <= 0.1)){
 800248a:	4b52      	ldr	r3, [pc, #328]	@ (80025d4 <timer_callback+0x28c>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe f892 	bl	80005b8 <__aeabi_f2d>
 8002494:	a336      	add	r3, pc, #216	@ (adr r3, 8002570 <timer_callback+0x228>)
 8002496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249a:	f7fe fb6b 	bl	8000b74 <__aeabi_dcmpge>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d012      	beq.n	80024ca <timer_callback+0x182>
 80024a4:	4b4b      	ldr	r3, [pc, #300]	@ (80025d4 <timer_callback+0x28c>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fe f885 	bl	80005b8 <__aeabi_f2d>
 80024ae:	a332      	add	r3, pc, #200	@ (adr r3, 8002578 <timer_callback+0x230>)
 80024b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b4:	f7fe fb54 	bl	8000b60 <__aeabi_dcmple>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <timer_callback+0x182>
					angular_z = 0.0;
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
				}



				cmdvel_msg.linear.x =  mapd(linear_x,-60.0,60.0,-5.0,5.0);
 80024ca:	ed9f 4b2d 	vldr	d4, [pc, #180]	@ 8002580 <timer_callback+0x238>
 80024ce:	ed9f 3b2e 	vldr	d3, [pc, #184]	@ 8002588 <timer_callback+0x240>
 80024d2:	ed9f 2b2f 	vldr	d2, [pc, #188]	@ 8002590 <timer_callback+0x248>
 80024d6:	ed9f 1b30 	vldr	d1, [pc, #192]	@ 8002598 <timer_callback+0x250>
 80024da:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 80024de:	f000 fbff 	bl	8002ce0 <mapd>
 80024e2:	eeb0 7a40 	vmov.f32	s14, s0
 80024e6:	eef0 7a60 	vmov.f32	s15, s1
 80024ea:	4b3b      	ldr	r3, [pc, #236]	@ (80025d8 <timer_callback+0x290>)
 80024ec:	ed83 7b00 	vstr	d7, [r3]
				cmdvel_msg.angular.z = mapd(angular_z,-60.0,60.0,-2.0,2.0);
 80024f0:	ed9f 4b2b 	vldr	d4, [pc, #172]	@ 80025a0 <timer_callback+0x258>
 80024f4:	ed9f 3b2c 	vldr	d3, [pc, #176]	@ 80025a8 <timer_callback+0x260>
 80024f8:	ed9f 2b25 	vldr	d2, [pc, #148]	@ 8002590 <timer_callback+0x248>
 80024fc:	ed9f 1b26 	vldr	d1, [pc, #152]	@ 8002598 <timer_callback+0x250>
 8002500:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8002504:	f000 fbec 	bl	8002ce0 <mapd>
 8002508:	eeb0 7a40 	vmov.f32	s14, s0
 800250c:	eef0 7a60 	vmov.f32	s15, s1
 8002510:	4b31      	ldr	r3, [pc, #196]	@ (80025d8 <timer_callback+0x290>)
 8002512:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28

				cmdvel_msg.angular.x =  v_x;
 8002516:	4b31      	ldr	r3, [pc, #196]	@ (80025dc <timer_callback+0x294>)
 8002518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251c:	492e      	ldr	r1, [pc, #184]	@ (80025d8 <timer_callback+0x290>)
 800251e:	e9c1 2306 	strd	r2, r3, [r1, #24]
				cmdvel_msg.angular.y = v_y;
 8002522:	4b2f      	ldr	r3, [pc, #188]	@ (80025e0 <timer_callback+0x298>)
 8002524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002528:	492b      	ldr	r1, [pc, #172]	@ (80025d8 <timer_callback+0x290>)
 800252a:	e9c1 2308 	strd	r2, r3, [r1, #32]

				RCCHECK(rcl_publish(&cmd_vel, &cmdvel_msg, NULL));
 800252e:	2200      	movs	r2, #0
 8002530:	4929      	ldr	r1, [pc, #164]	@ (80025d8 <timer_callback+0x290>)
 8002532:	482c      	ldr	r0, [pc, #176]	@ (80025e4 <timer_callback+0x29c>)
 8002534:	f00b fecc 	bl	800e2d0 <rcl_publish>
 8002538:	e012      	b.n	8002560 <timer_callback+0x218>

			}
			else{
				readImuNonCalibrated();
 800253a:	463b      	mov	r3, r7
 800253c:	4618      	mov	r0, r3
 800253e:	f000 f9d7 	bl	80028f0 <readImuNonCalibrated>
				RCCHECK(rcl_publish(&mpu6050_publisher, &mpu6050_msg, NULL));
 8002542:	2200      	movs	r2, #0
 8002544:	491e      	ldr	r1, [pc, #120]	@ (80025c0 <timer_callback+0x278>)
 8002546:	481f      	ldr	r0, [pc, #124]	@ (80025c4 <timer_callback+0x27c>)
 8002548:	f00b fec2 	bl	800e2d0 <rcl_publish>
 800254c:	e008      	b.n	8002560 <timer_callback+0x218>
			}
		}
		else{
			is_active = false;
 800254e:	4b1a      	ldr	r3, [pc, #104]	@ (80025b8 <timer_callback+0x270>)
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]
			if(reset_flag == 1){
 8002554:	4b24      	ldr	r3, [pc, #144]	@ (80025e8 <timer_callback+0x2a0>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <timer_callback+0x218>
				HAL_NVIC_SystemReset();
 800255c:	f001 fc5b 	bl	8003e16 <HAL_NVIC_SystemReset>
			}
		}

		HAL_IWDG_Refresh(&hiwdg);
 8002560:	4822      	ldr	r0, [pc, #136]	@ (80025ec <timer_callback+0x2a4>)
 8002562:	f003 f8c5 	bl	80056f0 <HAL_IWDG_Refresh>
	}

}
 8002566:	bf00      	nop
 8002568:	3750      	adds	r7, #80	@ 0x50
 800256a:	46bd      	mov	sp, r7
 800256c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002570:	9999999a 	.word	0x9999999a
 8002574:	bfb99999 	.word	0xbfb99999
 8002578:	9999999a 	.word	0x9999999a
 800257c:	3fb99999 	.word	0x3fb99999
 8002580:	00000000 	.word	0x00000000
 8002584:	40140000 	.word	0x40140000
 8002588:	00000000 	.word	0x00000000
 800258c:	c0140000 	.word	0xc0140000
 8002590:	00000000 	.word	0x00000000
 8002594:	404e0000 	.word	0x404e0000
 8002598:	00000000 	.word	0x00000000
 800259c:	c04e0000 	.word	0xc04e0000
 80025a0:	00000000 	.word	0x00000000
 80025a4:	40000000 	.word	0x40000000
 80025a8:	00000000 	.word	0x00000000
 80025ac:	c0000000 	.word	0xc0000000
 80025b0:	2000765c 	.word	0x2000765c
 80025b4:	20008394 	.word	0x20008394
 80025b8:	200076c5 	.word	0x200076c5
 80025bc:	200076c4 	.word	0x200076c4
 80025c0:	200077c0 	.word	0x200077c0
 80025c4:	200077b8 	.word	0x200077b8
 80025c8:	20007b40 	.word	0x20007b40
 80025cc:	20007ae8 	.word	0x20007ae8
 80025d0:	00000000 	.word	0x00000000
 80025d4:	20007b90 	.word	0x20007b90
 80025d8:	20007b60 	.word	0x20007b60
 80025dc:	20008398 	.word	0x20008398
 80025e0:	200083a0 	.word	0x200083a0
 80025e4:	20007b58 	.word	0x20007b58
 80025e8:	200083a8 	.word	0x200083a8
 80025ec:	200076b0 	.word	0x200076b0

080025f0 <service_callback>:


void service_callback(const void * request_msg, void * response_msg){
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
	// Cast messages to expected types
	imu_interfaces__srv__ImuCalibration_Request * req_in = (imu_interfaces__srv__ImuCalibration_Request * ) request_msg;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	613b      	str	r3, [r7, #16]

	imu_interfaces__srv__ImuCalibration_Response * res_in = (imu_interfaces__srv__ImuCalibration_Response * ) response_msg;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	60fb      	str	r3, [r7, #12]

	for(int i = 0; i < 9; i++){
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	e01e      	b.n	8002646 <service_callback+0x56>
		mpu6050_msg.linear_acceleration_covariance[i] = req_in->imu_calib.linear_acceleration_covariance[i];
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	331f      	adds	r3, #31
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4413      	add	r3, r2
 8002612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002616:	4827      	ldr	r0, [pc, #156]	@ (80026b4 <service_callback+0xc4>)
 8002618:	6979      	ldr	r1, [r7, #20]
 800261a:	311f      	adds	r1, #31
 800261c:	00c9      	lsls	r1, r1, #3
 800261e:	4401      	add	r1, r0
 8002620:	e9c1 2300 	strd	r2, r3, [r1]
		mpu6050_msg.angular_velocity_covariance[i] = req_in->imu_calib.angular_velocity_covariance[i];
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	3313      	adds	r3, #19
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002632:	4820      	ldr	r0, [pc, #128]	@ (80026b4 <service_callback+0xc4>)
 8002634:	6979      	ldr	r1, [r7, #20]
 8002636:	3113      	adds	r1, #19
 8002638:	00c9      	lsls	r1, r1, #3
 800263a:	4401      	add	r1, r0
 800263c:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i = 0; i < 9; i++){
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	3301      	adds	r3, #1
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	2b08      	cmp	r3, #8
 800264a:	dddd      	ble.n	8002608 <service_callback+0x18>
	}


	accel_offset.x = req_in->imu_calib.linear_acceleration.x;
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 8002652:	4919      	ldr	r1, [pc, #100]	@ (80026b8 <service_callback+0xc8>)
 8002654:	e9c1 2300 	strd	r2, r3, [r1]
	accel_offset.y = req_in->imu_calib.linear_acceleration.y;
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 800265e:	4916      	ldr	r1, [pc, #88]	@ (80026b8 <service_callback+0xc8>)
 8002660:	e9c1 2302 	strd	r2, r3, [r1, #8]
	accel_offset.z = req_in->imu_calib.linear_acceleration.z;
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 800266a:	4913      	ldr	r1, [pc, #76]	@ (80026b8 <service_callback+0xc8>)
 800266c:	e9c1 2304 	strd	r2, r3, [r1, #16]

	gyro_offset.x = req_in->imu_calib.angular_velocity.x;
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8002676:	4911      	ldr	r1, [pc, #68]	@ (80026bc <service_callback+0xcc>)
 8002678:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_offset.y = req_in->imu_calib.angular_velocity.y;
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8002682:	490e      	ldr	r1, [pc, #56]	@ (80026bc <service_callback+0xcc>)
 8002684:	e9c1 2302 	strd	r2, r3, [r1, #8]
	gyro_offset.z = req_in->imu_calib.angular_velocity.z;
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800268e:	490b      	ldr	r1, [pc, #44]	@ (80026bc <service_callback+0xcc>)
 8002690:	e9c1 2304 	strd	r2, r3, [r1, #16]

	is_calib = true;
 8002694:	4b0a      	ldr	r3, [pc, #40]	@ (80026c0 <service_callback+0xd0>)
 8002696:	2201      	movs	r2, #1
 8002698:	701a      	strb	r2, [r3, #0]

	res_in->success = true;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2201      	movs	r2, #1
 800269e:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80026a0:	2120      	movs	r1, #32
 80026a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026a6:	f002 f8ab 	bl	8004800 <HAL_GPIO_TogglePin>


}
 80026aa:	bf00      	nop
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	200077c0 	.word	0x200077c0
 80026b8:	20007ab8 	.word	0x20007ab8
 80026bc:	20007ad0 	.word	0x20007ad0
 80026c0:	200076c4 	.word	0x200076c4

080026c4 <status_callback>:

void status_callback(const void * request_msg, void * response_msg){
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
	// Cast messages to expected types

	std_srvs__srv__Trigger_Response * res_in = (std_srvs__srv__Trigger_Response  * ) response_msg;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	60fb      	str	r3, [r7, #12]

	if(is_active){
 80026d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002710 <status_callback+0x4c>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d009      	beq.n	80026ee <status_callback+0x2a>
		res_in->success = true;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2201      	movs	r2, #1
 80026de:	701a      	strb	r2, [r3, #0]
		rosidl_runtime_c__String__assign(&res_in->message, "Connection Successful");
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	3304      	adds	r3, #4
 80026e4:	490b      	ldr	r1, [pc, #44]	@ (8002714 <status_callback+0x50>)
 80026e6:	4618      	mov	r0, r3
 80026e8:	f00e f9dc 	bl	8010aa4 <rosidl_runtime_c__String__assign>
		reset_flag = 1;


	}

}
 80026ec:	e00b      	b.n	8002706 <status_callback+0x42>
		res_in->success = false;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
		rosidl_runtime_c__String__assign(&res_in->message, "Connection Failed. Resetting . . .");
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	3304      	adds	r3, #4
 80026f8:	4907      	ldr	r1, [pc, #28]	@ (8002718 <status_callback+0x54>)
 80026fa:	4618      	mov	r0, r3
 80026fc:	f00e f9d2 	bl	8010aa4 <rosidl_runtime_c__String__assign>
		reset_flag = 1;
 8002700:	4b06      	ldr	r3, [pc, #24]	@ (800271c <status_callback+0x58>)
 8002702:	2201      	movs	r2, #1
 8002704:	701a      	strb	r2, [r3, #0]
}
 8002706:	bf00      	nop
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	200076c5 	.word	0x200076c5
 8002714:	0801f868 	.word	0x0801f868
 8002718:	0801f880 	.word	0x0801f880
 800271c:	200083a8 	.word	0x200083a8

08002720 <readImuCalibrated>:

tuple_double_t readImuCalibrated(){
 8002720:	b5b0      	push	{r4, r5, r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
	MPU6050_Read_All(&hi2c1, &MPU6050);
 8002728:	496b      	ldr	r1, [pc, #428]	@ (80028d8 <readImuCalibrated+0x1b8>)
 800272a:	486c      	ldr	r0, [pc, #432]	@ (80028dc <readImuCalibrated+0x1bc>)
 800272c:	f006 f9dc 	bl	8008ae8 <MPU6050_Read_All>
	mpu6050_msg.header.stamp.sec = rmw_uros_epoch_millis() / 1000;
 8002730:	f00d fd02 	bl	8010138 <rmw_uros_epoch_millis>
 8002734:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	f7fe fa94 	bl	8000c68 <__aeabi_ldivmod>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4b66      	ldr	r3, [pc, #408]	@ (80028e0 <readImuCalibrated+0x1c0>)
 8002746:	601a      	str	r2, [r3, #0]
	mpu6050_msg.header.stamp.nanosec = 	rmw_uros_epoch_nanos();
 8002748:	f00d fd04 	bl	8010154 <rmw_uros_epoch_nanos>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4b63      	ldr	r3, [pc, #396]	@ (80028e0 <readImuCalibrated+0x1c0>)
 8002752:	605a      	str	r2, [r3, #4]
	mpu6050_msg.linear_acceleration.x = G2M_S2 * MPU6050.Ax - accel_offset.x;
 8002754:	4b60      	ldr	r3, [pc, #384]	@ (80028d8 <readImuCalibrated+0x1b8>)
 8002756:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800275a:	a35b      	add	r3, pc, #364	@ (adr r3, 80028c8 <readImuCalibrated+0x1a8>)
 800275c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002760:	f7fd ff82 	bl	8000668 <__aeabi_dmul>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4610      	mov	r0, r2
 800276a:	4619      	mov	r1, r3
 800276c:	4b5d      	ldr	r3, [pc, #372]	@ (80028e4 <readImuCalibrated+0x1c4>)
 800276e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002772:	f7fd fdc1 	bl	80002f8 <__aeabi_dsub>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	4959      	ldr	r1, [pc, #356]	@ (80028e0 <readImuCalibrated+0x1c0>)
 800277c:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
	mpu6050_msg.linear_acceleration.y = G2M_S2 * MPU6050.Ay - accel_offset.y;
 8002780:	4b55      	ldr	r3, [pc, #340]	@ (80028d8 <readImuCalibrated+0x1b8>)
 8002782:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002786:	a350      	add	r3, pc, #320	@ (adr r3, 80028c8 <readImuCalibrated+0x1a8>)
 8002788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278c:	f7fd ff6c 	bl	8000668 <__aeabi_dmul>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4610      	mov	r0, r2
 8002796:	4619      	mov	r1, r3
 8002798:	4b52      	ldr	r3, [pc, #328]	@ (80028e4 <readImuCalibrated+0x1c4>)
 800279a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800279e:	f7fd fdab 	bl	80002f8 <__aeabi_dsub>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	494e      	ldr	r1, [pc, #312]	@ (80028e0 <readImuCalibrated+0x1c0>)
 80027a8:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
	mpu6050_msg.linear_acceleration.z = G2M_S2 * MPU6050.Az - accel_offset.z;
 80027ac:	4b4a      	ldr	r3, [pc, #296]	@ (80028d8 <readImuCalibrated+0x1b8>)
 80027ae:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80027b2:	a345      	add	r3, pc, #276	@ (adr r3, 80028c8 <readImuCalibrated+0x1a8>)
 80027b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b8:	f7fd ff56 	bl	8000668 <__aeabi_dmul>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	4610      	mov	r0, r2
 80027c2:	4619      	mov	r1, r3
 80027c4:	4b47      	ldr	r3, [pc, #284]	@ (80028e4 <readImuCalibrated+0x1c4>)
 80027c6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80027ca:	f7fd fd95 	bl	80002f8 <__aeabi_dsub>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	4943      	ldr	r1, [pc, #268]	@ (80028e0 <readImuCalibrated+0x1c0>)
 80027d4:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0

	mpu6050_msg.angular_velocity.x = DEG2RAD * MPU6050.Gx - gyro_offset.x;
 80027d8:	4b3f      	ldr	r3, [pc, #252]	@ (80028d8 <readImuCalibrated+0x1b8>)
 80027da:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80027de:	a33c      	add	r3, pc, #240	@ (adr r3, 80028d0 <readImuCalibrated+0x1b0>)
 80027e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e4:	f7fd ff40 	bl	8000668 <__aeabi_dmul>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4610      	mov	r0, r2
 80027ee:	4619      	mov	r1, r3
 80027f0:	4b3d      	ldr	r3, [pc, #244]	@ (80028e8 <readImuCalibrated+0x1c8>)
 80027f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f6:	f7fd fd7f 	bl	80002f8 <__aeabi_dsub>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4938      	ldr	r1, [pc, #224]	@ (80028e0 <readImuCalibrated+0x1c0>)
 8002800:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	mpu6050_msg.angular_velocity.y = DEG2RAD * MPU6050.Gy - gyro_offset.y;
 8002804:	4b34      	ldr	r3, [pc, #208]	@ (80028d8 <readImuCalibrated+0x1b8>)
 8002806:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800280a:	a331      	add	r3, pc, #196	@ (adr r3, 80028d0 <readImuCalibrated+0x1b0>)
 800280c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002810:	f7fd ff2a 	bl	8000668 <__aeabi_dmul>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4610      	mov	r0, r2
 800281a:	4619      	mov	r1, r3
 800281c:	4b32      	ldr	r3, [pc, #200]	@ (80028e8 <readImuCalibrated+0x1c8>)
 800281e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002822:	f7fd fd69 	bl	80002f8 <__aeabi_dsub>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	492d      	ldr	r1, [pc, #180]	@ (80028e0 <readImuCalibrated+0x1c0>)
 800282c:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	mpu6050_msg.angular_velocity.z = DEG2RAD * MPU6050.Gz - gyro_offset.z;
 8002830:	4b29      	ldr	r3, [pc, #164]	@ (80028d8 <readImuCalibrated+0x1b8>)
 8002832:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002836:	a326      	add	r3, pc, #152	@ (adr r3, 80028d0 <readImuCalibrated+0x1b0>)
 8002838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283c:	f7fd ff14 	bl	8000668 <__aeabi_dmul>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4610      	mov	r0, r2
 8002846:	4619      	mov	r1, r3
 8002848:	4b27      	ldr	r3, [pc, #156]	@ (80028e8 <readImuCalibrated+0x1c8>)
 800284a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800284e:	f7fd fd53 	bl	80002f8 <__aeabi_dsub>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	4922      	ldr	r1, [pc, #136]	@ (80028e0 <readImuCalibrated+0x1c0>)
 8002858:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

	data.ax = mpu6050_msg.linear_acceleration.x;
 800285c:	4b20      	ldr	r3, [pc, #128]	@ (80028e0 <readImuCalibrated+0x1c0>)
 800285e:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 8002862:	4922      	ldr	r1, [pc, #136]	@ (80028ec <readImuCalibrated+0x1cc>)
 8002864:	e9c1 2300 	strd	r2, r3, [r1]
	data.ay = mpu6050_msg.linear_acceleration.y;
 8002868:	4b1d      	ldr	r3, [pc, #116]	@ (80028e0 <readImuCalibrated+0x1c0>)
 800286a:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 800286e:	491f      	ldr	r1, [pc, #124]	@ (80028ec <readImuCalibrated+0x1cc>)
 8002870:	e9c1 2302 	strd	r2, r3, [r1, #8]
	data.az = mpu6050_msg.linear_acceleration.z;
 8002874:	4b1a      	ldr	r3, [pc, #104]	@ (80028e0 <readImuCalibrated+0x1c0>)
 8002876:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 800287a:	491c      	ldr	r1, [pc, #112]	@ (80028ec <readImuCalibrated+0x1cc>)
 800287c:	e9c1 2304 	strd	r2, r3, [r1, #16]

	data.gx = mpu6050_msg.angular_velocity.x;
 8002880:	4b17      	ldr	r3, [pc, #92]	@ (80028e0 <readImuCalibrated+0x1c0>)
 8002882:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8002886:	4919      	ldr	r1, [pc, #100]	@ (80028ec <readImuCalibrated+0x1cc>)
 8002888:	e9c1 2306 	strd	r2, r3, [r1, #24]
	data.gy = mpu6050_msg.angular_velocity.y;
 800288c:	4b14      	ldr	r3, [pc, #80]	@ (80028e0 <readImuCalibrated+0x1c0>)
 800288e:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8002892:	4916      	ldr	r1, [pc, #88]	@ (80028ec <readImuCalibrated+0x1cc>)
 8002894:	e9c1 2308 	strd	r2, r3, [r1, #32]
	data.gz = mpu6050_msg.angular_velocity.z;
 8002898:	4b11      	ldr	r3, [pc, #68]	@ (80028e0 <readImuCalibrated+0x1c0>)
 800289a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800289e:	4913      	ldr	r1, [pc, #76]	@ (80028ec <readImuCalibrated+0x1cc>)
 80028a0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	return data;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a11      	ldr	r2, [pc, #68]	@ (80028ec <readImuCalibrated+0x1cc>)
 80028a8:	461c      	mov	r4, r3
 80028aa:	4615      	mov	r5, r2
 80028ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80028b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bdb0      	pop	{r4, r5, r7, pc}
 80028c4:	f3af 8000 	nop.w
 80028c8:	51eb851f 	.word	0x51eb851f
 80028cc:	40239eb8 	.word	0x40239eb8
 80028d0:	a2529d39 	.word	0xa2529d39
 80028d4:	3f91df46 	.word	0x3f91df46
 80028d8:	20007a60 	.word	0x20007a60
 80028dc:	2000765c 	.word	0x2000765c
 80028e0:	200077c0 	.word	0x200077c0
 80028e4:	20007ab8 	.word	0x20007ab8
 80028e8:	20007ad0 	.word	0x20007ad0
 80028ec:	20007ae8 	.word	0x20007ae8

080028f0 <readImuNonCalibrated>:

tuple_double_t readImuNonCalibrated(){
 80028f0:	b5b0      	push	{r4, r5, r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
	MPU6050_Read_All(&hi2c1, &MPU6050);
 80028f8:	494f      	ldr	r1, [pc, #316]	@ (8002a38 <readImuNonCalibrated+0x148>)
 80028fa:	4850      	ldr	r0, [pc, #320]	@ (8002a3c <readImuNonCalibrated+0x14c>)
 80028fc:	f006 f8f4 	bl	8008ae8 <MPU6050_Read_All>
	mpu6050_msg.header.stamp.sec = rmw_uros_epoch_millis() / 1000;
 8002900:	f00d fc1a 	bl	8010138 <rmw_uros_epoch_millis>
 8002904:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	f7fe f9ac 	bl	8000c68 <__aeabi_ldivmod>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4b4a      	ldr	r3, [pc, #296]	@ (8002a40 <readImuNonCalibrated+0x150>)
 8002916:	601a      	str	r2, [r3, #0]
	mpu6050_msg.header.stamp.nanosec = 	rmw_uros_epoch_nanos();
 8002918:	f00d fc1c 	bl	8010154 <rmw_uros_epoch_nanos>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4b47      	ldr	r3, [pc, #284]	@ (8002a40 <readImuNonCalibrated+0x150>)
 8002922:	605a      	str	r2, [r3, #4]
	mpu6050_msg.linear_acceleration.x = G2M_S2 * MPU6050.Ax ;
 8002924:	4b44      	ldr	r3, [pc, #272]	@ (8002a38 <readImuNonCalibrated+0x148>)
 8002926:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800292a:	a33f      	add	r3, pc, #252	@ (adr r3, 8002a28 <readImuNonCalibrated+0x138>)
 800292c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002930:	f7fd fe9a 	bl	8000668 <__aeabi_dmul>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4941      	ldr	r1, [pc, #260]	@ (8002a40 <readImuNonCalibrated+0x150>)
 800293a:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
	mpu6050_msg.linear_acceleration.y = G2M_S2 * MPU6050.Ay;
 800293e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a38 <readImuNonCalibrated+0x148>)
 8002940:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002944:	a338      	add	r3, pc, #224	@ (adr r3, 8002a28 <readImuNonCalibrated+0x138>)
 8002946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294a:	f7fd fe8d 	bl	8000668 <__aeabi_dmul>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	493b      	ldr	r1, [pc, #236]	@ (8002a40 <readImuNonCalibrated+0x150>)
 8002954:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
	mpu6050_msg.linear_acceleration.z = G2M_S2 * MPU6050.Az;
 8002958:	4b37      	ldr	r3, [pc, #220]	@ (8002a38 <readImuNonCalibrated+0x148>)
 800295a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800295e:	a332      	add	r3, pc, #200	@ (adr r3, 8002a28 <readImuNonCalibrated+0x138>)
 8002960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002964:	f7fd fe80 	bl	8000668 <__aeabi_dmul>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4934      	ldr	r1, [pc, #208]	@ (8002a40 <readImuNonCalibrated+0x150>)
 800296e:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0

	mpu6050_msg.angular_velocity.x = DEG2RAD * MPU6050.Gx;
 8002972:	4b31      	ldr	r3, [pc, #196]	@ (8002a38 <readImuNonCalibrated+0x148>)
 8002974:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002978:	a32d      	add	r3, pc, #180	@ (adr r3, 8002a30 <readImuNonCalibrated+0x140>)
 800297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297e:	f7fd fe73 	bl	8000668 <__aeabi_dmul>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	492e      	ldr	r1, [pc, #184]	@ (8002a40 <readImuNonCalibrated+0x150>)
 8002988:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	mpu6050_msg.angular_velocity.y = DEG2RAD * MPU6050.Gy ;
 800298c:	4b2a      	ldr	r3, [pc, #168]	@ (8002a38 <readImuNonCalibrated+0x148>)
 800298e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002992:	a327      	add	r3, pc, #156	@ (adr r3, 8002a30 <readImuNonCalibrated+0x140>)
 8002994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002998:	f7fd fe66 	bl	8000668 <__aeabi_dmul>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4927      	ldr	r1, [pc, #156]	@ (8002a40 <readImuNonCalibrated+0x150>)
 80029a2:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	mpu6050_msg.angular_velocity.z = DEG2RAD * MPU6050.Gz ;
 80029a6:	4b24      	ldr	r3, [pc, #144]	@ (8002a38 <readImuNonCalibrated+0x148>)
 80029a8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80029ac:	a320      	add	r3, pc, #128	@ (adr r3, 8002a30 <readImuNonCalibrated+0x140>)
 80029ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b2:	f7fd fe59 	bl	8000668 <__aeabi_dmul>
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	4921      	ldr	r1, [pc, #132]	@ (8002a40 <readImuNonCalibrated+0x150>)
 80029bc:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

	data.ax = mpu6050_msg.linear_acceleration.x;
 80029c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002a40 <readImuNonCalibrated+0x150>)
 80029c2:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 80029c6:	491f      	ldr	r1, [pc, #124]	@ (8002a44 <readImuNonCalibrated+0x154>)
 80029c8:	e9c1 2300 	strd	r2, r3, [r1]
	data.ay = mpu6050_msg.linear_acceleration.y;
 80029cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002a40 <readImuNonCalibrated+0x150>)
 80029ce:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 80029d2:	491c      	ldr	r1, [pc, #112]	@ (8002a44 <readImuNonCalibrated+0x154>)
 80029d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	data.az = mpu6050_msg.linear_acceleration.z;
 80029d8:	4b19      	ldr	r3, [pc, #100]	@ (8002a40 <readImuNonCalibrated+0x150>)
 80029da:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 80029de:	4919      	ldr	r1, [pc, #100]	@ (8002a44 <readImuNonCalibrated+0x154>)
 80029e0:	e9c1 2304 	strd	r2, r3, [r1, #16]

	data.gx = mpu6050_msg.angular_velocity.x;
 80029e4:	4b16      	ldr	r3, [pc, #88]	@ (8002a40 <readImuNonCalibrated+0x150>)
 80029e6:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 80029ea:	4916      	ldr	r1, [pc, #88]	@ (8002a44 <readImuNonCalibrated+0x154>)
 80029ec:	e9c1 2306 	strd	r2, r3, [r1, #24]
	data.gy = mpu6050_msg.angular_velocity.y;
 80029f0:	4b13      	ldr	r3, [pc, #76]	@ (8002a40 <readImuNonCalibrated+0x150>)
 80029f2:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80029f6:	4913      	ldr	r1, [pc, #76]	@ (8002a44 <readImuNonCalibrated+0x154>)
 80029f8:	e9c1 2308 	strd	r2, r3, [r1, #32]
	data.gz = mpu6050_msg.angular_velocity.z;
 80029fc:	4b10      	ldr	r3, [pc, #64]	@ (8002a40 <readImuNonCalibrated+0x150>)
 80029fe:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8002a02:	4910      	ldr	r1, [pc, #64]	@ (8002a44 <readImuNonCalibrated+0x154>)
 8002a04:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	return data;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a0e      	ldr	r2, [pc, #56]	@ (8002a44 <readImuNonCalibrated+0x154>)
 8002a0c:	461c      	mov	r4, r3
 8002a0e:	4615      	mov	r5, r2
 8002a10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a18:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002a1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bdb0      	pop	{r4, r5, r7, pc}
 8002a28:	51eb851f 	.word	0x51eb851f
 8002a2c:	40239eb8 	.word	0x40239eb8
 8002a30:	a2529d39 	.word	0xa2529d39
 8002a34:	3f91df46 	.word	0x3f91df46
 8002a38:	20007a60 	.word	0x20007a60
 8002a3c:	2000765c 	.word	0x2000765c
 8002a40:	200077c0 	.word	0x200077c0
 8002a44:	20007ae8 	.word	0x20007ae8

08002a48 <rpfromAccel>:

void rpfromAccel(){
 8002a48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a4c:	ed2d 8b02 	vpush	{d8}
 8002a50:	af00      	add	r7, sp, #0
//	accel_angle.roll =  atan2(data.ay, data.az) * RAD2DEG ;
	accel_angle.roll =  atan2(data.ay, sqrt(data.ax * data.ax + data.az * data.az )) * RAD2DEG ;
 8002a52:	4b51      	ldr	r3, [pc, #324]	@ (8002b98 <rpfromAccel+0x150>)
 8002a54:	ed93 8b02 	vldr	d8, [r3, #8]
 8002a58:	4b4f      	ldr	r3, [pc, #316]	@ (8002b98 <rpfromAccel+0x150>)
 8002a5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a5e:	4b4e      	ldr	r3, [pc, #312]	@ (8002b98 <rpfromAccel+0x150>)
 8002a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a64:	f7fd fe00 	bl	8000668 <__aeabi_dmul>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4690      	mov	r8, r2
 8002a6e:	4699      	mov	r9, r3
 8002a70:	4b49      	ldr	r3, [pc, #292]	@ (8002b98 <rpfromAccel+0x150>)
 8002a72:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002a76:	4b48      	ldr	r3, [pc, #288]	@ (8002b98 <rpfromAccel+0x150>)
 8002a78:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002a7c:	f7fd fdf4 	bl	8000668 <__aeabi_dmul>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4640      	mov	r0, r8
 8002a86:	4649      	mov	r1, r9
 8002a88:	f7fd fc38 	bl	80002fc <__adddf3>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	ec43 2b17 	vmov	d7, r2, r3
 8002a94:	eeb0 0a47 	vmov.f32	s0, s14
 8002a98:	eef0 0a67 	vmov.f32	s1, s15
 8002a9c:	f01b fde2 	bl	801e664 <sqrt>
 8002aa0:	eeb0 7a40 	vmov.f32	s14, s0
 8002aa4:	eef0 7a60 	vmov.f32	s15, s1
 8002aa8:	eeb0 1a47 	vmov.f32	s2, s14
 8002aac:	eef0 1a67 	vmov.f32	s3, s15
 8002ab0:	eeb0 0a48 	vmov.f32	s0, s16
 8002ab4:	eef0 0a68 	vmov.f32	s1, s17
 8002ab8:	f01b fdd2 	bl	801e660 <atan2>
 8002abc:	ec51 0b10 	vmov	r0, r1, d0
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	4b35      	ldr	r3, [pc, #212]	@ (8002b9c <rpfromAccel+0x154>)
 8002ac6:	f7fd fdcf 	bl	8000668 <__aeabi_dmul>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	4610      	mov	r0, r2
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	a32f      	add	r3, pc, #188	@ (adr r3, 8002b90 <rpfromAccel+0x148>)
 8002ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad8:	f7fd fef0 	bl	80008bc <__aeabi_ddiv>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	492f      	ldr	r1, [pc, #188]	@ (8002ba0 <rpfromAccel+0x158>)
 8002ae2:	e9c1 2300 	strd	r2, r3, [r1]
	accel_angle.pitch = -atan2(data.ax, sqrt(data.ay * data.ay + data.az * data.az )) * RAD2DEG;
 8002ae6:	4b2c      	ldr	r3, [pc, #176]	@ (8002b98 <rpfromAccel+0x150>)
 8002ae8:	ed93 8b00 	vldr	d8, [r3]
 8002aec:	4b2a      	ldr	r3, [pc, #168]	@ (8002b98 <rpfromAccel+0x150>)
 8002aee:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002af2:	4b29      	ldr	r3, [pc, #164]	@ (8002b98 <rpfromAccel+0x150>)
 8002af4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002af8:	f7fd fdb6 	bl	8000668 <__aeabi_dmul>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4690      	mov	r8, r2
 8002b02:	4699      	mov	r9, r3
 8002b04:	4b24      	ldr	r3, [pc, #144]	@ (8002b98 <rpfromAccel+0x150>)
 8002b06:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002b0a:	4b23      	ldr	r3, [pc, #140]	@ (8002b98 <rpfromAccel+0x150>)
 8002b0c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002b10:	f7fd fdaa 	bl	8000668 <__aeabi_dmul>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4640      	mov	r0, r8
 8002b1a:	4649      	mov	r1, r9
 8002b1c:	f7fd fbee 	bl	80002fc <__adddf3>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	ec43 2b17 	vmov	d7, r2, r3
 8002b28:	eeb0 0a47 	vmov.f32	s0, s14
 8002b2c:	eef0 0a67 	vmov.f32	s1, s15
 8002b30:	f01b fd98 	bl	801e664 <sqrt>
 8002b34:	eeb0 7a40 	vmov.f32	s14, s0
 8002b38:	eef0 7a60 	vmov.f32	s15, s1
 8002b3c:	eeb0 1a47 	vmov.f32	s2, s14
 8002b40:	eef0 1a67 	vmov.f32	s3, s15
 8002b44:	eeb0 0a48 	vmov.f32	s0, s16
 8002b48:	eef0 0a68 	vmov.f32	s1, s17
 8002b4c:	f01b fd88 	bl	801e660 <atan2>
 8002b50:	ec53 2b10 	vmov	r2, r3, d0
 8002b54:	4614      	mov	r4, r2
 8002b56:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002b9c <rpfromAccel+0x154>)
 8002b60:	4620      	mov	r0, r4
 8002b62:	4629      	mov	r1, r5
 8002b64:	f7fd fd80 	bl	8000668 <__aeabi_dmul>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	4619      	mov	r1, r3
 8002b70:	a307      	add	r3, pc, #28	@ (adr r3, 8002b90 <rpfromAccel+0x148>)
 8002b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b76:	f7fd fea1 	bl	80008bc <__aeabi_ddiv>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4908      	ldr	r1, [pc, #32]	@ (8002ba0 <rpfromAccel+0x158>)
 8002b80:	e9c1 2302 	strd	r2, r3, [r1, #8]

}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	ecbd 8b02 	vpop	{d8}
 8002b8c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b90:	54442d18 	.word	0x54442d18
 8002b94:	400921fb 	.word	0x400921fb
 8002b98:	20007ae8 	.word	0x20007ae8
 8002b9c:	40668000 	.word	0x40668000
 8002ba0:	20007b40 	.word	0x20007b40
 8002ba4:	00000000 	.word	0x00000000

08002ba8 <rpfromGyro>:

void rpfromGyro(){
 8002ba8:	b5b0      	push	{r4, r5, r7, lr}
 8002baa:	af00      	add	r7, sp, #0
	gyro_angle.roll =  gyro_roll + data.gx * 0.01 * RAD2DEG ;
 8002bac:	4b46      	ldr	r3, [pc, #280]	@ (8002cc8 <rpfromGyro+0x120>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fd fd01 	bl	80005b8 <__aeabi_f2d>
 8002bb6:	4604      	mov	r4, r0
 8002bb8:	460d      	mov	r5, r1
 8002bba:	4b44      	ldr	r3, [pc, #272]	@ (8002ccc <rpfromGyro+0x124>)
 8002bbc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002bc0:	a33d      	add	r3, pc, #244	@ (adr r3, 8002cb8 <rpfromGyro+0x110>)
 8002bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc6:	f7fd fd4f 	bl	8000668 <__aeabi_dmul>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	4610      	mov	r0, r2
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	4b3e      	ldr	r3, [pc, #248]	@ (8002cd0 <rpfromGyro+0x128>)
 8002bd8:	f7fd fd46 	bl	8000668 <__aeabi_dmul>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	4610      	mov	r0, r2
 8002be2:	4619      	mov	r1, r3
 8002be4:	a336      	add	r3, pc, #216	@ (adr r3, 8002cc0 <rpfromGyro+0x118>)
 8002be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bea:	f7fd fe67 	bl	80008bc <__aeabi_ddiv>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	4629      	mov	r1, r5
 8002bf6:	f7fd fb81 	bl	80002fc <__adddf3>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4935      	ldr	r1, [pc, #212]	@ (8002cd4 <rpfromGyro+0x12c>)
 8002c00:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_angle.pitch = gyro_pitch + data.gy * 0.01 * RAD2DEG ;
 8002c04:	4b34      	ldr	r3, [pc, #208]	@ (8002cd8 <rpfromGyro+0x130>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fd fcd5 	bl	80005b8 <__aeabi_f2d>
 8002c0e:	4604      	mov	r4, r0
 8002c10:	460d      	mov	r5, r1
 8002c12:	4b2e      	ldr	r3, [pc, #184]	@ (8002ccc <rpfromGyro+0x124>)
 8002c14:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002c18:	a327      	add	r3, pc, #156	@ (adr r3, 8002cb8 <rpfromGyro+0x110>)
 8002c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1e:	f7fd fd23 	bl	8000668 <__aeabi_dmul>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4610      	mov	r0, r2
 8002c28:	4619      	mov	r1, r3
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	4b28      	ldr	r3, [pc, #160]	@ (8002cd0 <rpfromGyro+0x128>)
 8002c30:	f7fd fd1a 	bl	8000668 <__aeabi_dmul>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4610      	mov	r0, r2
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	a320      	add	r3, pc, #128	@ (adr r3, 8002cc0 <rpfromGyro+0x118>)
 8002c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c42:	f7fd fe3b 	bl	80008bc <__aeabi_ddiv>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4620      	mov	r0, r4
 8002c4c:	4629      	mov	r1, r5
 8002c4e:	f7fd fb55 	bl	80002fc <__adddf3>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	491f      	ldr	r1, [pc, #124]	@ (8002cd4 <rpfromGyro+0x12c>)
 8002c58:	e9c1 2302 	strd	r2, r3, [r1, #8]
	gyro_angle.yaw = gyro_yaw + data.gz * 0.01 * RAD2DEG ;
 8002c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8002cdc <rpfromGyro+0x134>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fd fca9 	bl	80005b8 <__aeabi_f2d>
 8002c66:	4604      	mov	r4, r0
 8002c68:	460d      	mov	r5, r1
 8002c6a:	4b18      	ldr	r3, [pc, #96]	@ (8002ccc <rpfromGyro+0x124>)
 8002c6c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002c70:	a311      	add	r3, pc, #68	@ (adr r3, 8002cb8 <rpfromGyro+0x110>)
 8002c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c76:	f7fd fcf7 	bl	8000668 <__aeabi_dmul>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4610      	mov	r0, r2
 8002c80:	4619      	mov	r1, r3
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	4b12      	ldr	r3, [pc, #72]	@ (8002cd0 <rpfromGyro+0x128>)
 8002c88:	f7fd fcee 	bl	8000668 <__aeabi_dmul>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4610      	mov	r0, r2
 8002c92:	4619      	mov	r1, r3
 8002c94:	a30a      	add	r3, pc, #40	@ (adr r3, 8002cc0 <rpfromGyro+0x118>)
 8002c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9a:	f7fd fe0f 	bl	80008bc <__aeabi_ddiv>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4620      	mov	r0, r4
 8002ca4:	4629      	mov	r1, r5
 8002ca6:	f7fd fb29 	bl	80002fc <__adddf3>
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	4909      	ldr	r1, [pc, #36]	@ (8002cd4 <rpfromGyro+0x12c>)
 8002cb0:	e9c1 2304 	strd	r2, r3, [r1, #16]

}
 8002cb4:	bf00      	nop
 8002cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8002cb8:	47ae147b 	.word	0x47ae147b
 8002cbc:	3f847ae1 	.word	0x3f847ae1
 8002cc0:	54442d18 	.word	0x54442d18
 8002cc4:	400921fb 	.word	0x400921fb
 8002cc8:	20007b18 	.word	0x20007b18
 8002ccc:	20007ae8 	.word	0x20007ae8
 8002cd0:	40668000 	.word	0x40668000
 8002cd4:	20007b28 	.word	0x20007b28
 8002cd8:	20007b1c 	.word	0x20007b1c
 8002cdc:	20007b20 	.word	0x20007b20

08002ce0 <mapd>:

double mapd(double input, double in_min, double in_max, double out_min, double out_max) {
 8002ce0:	b5b0      	push	{r4, r5, r7, lr}
 8002ce2:	b08a      	sub	sp, #40	@ 0x28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	ed87 0b08 	vstr	d0, [r7, #32]
 8002cea:	ed87 1b06 	vstr	d1, [r7, #24]
 8002cee:	ed87 2b04 	vstr	d2, [r7, #16]
 8002cf2:	ed87 3b02 	vstr	d3, [r7, #8]
 8002cf6:	ed87 4b00 	vstr	d4, [r7]
    return (input - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002cfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cfe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d02:	f7fd faf9 	bl	80002f8 <__aeabi_dsub>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4614      	mov	r4, r2
 8002d0c:	461d      	mov	r5, r3
 8002d0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d16:	f7fd faef 	bl	80002f8 <__aeabi_dsub>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4620      	mov	r0, r4
 8002d20:	4629      	mov	r1, r5
 8002d22:	f7fd fca1 	bl	8000668 <__aeabi_dmul>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4614      	mov	r4, r2
 8002d2c:	461d      	mov	r5, r3
 8002d2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d32:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d36:	f7fd fadf 	bl	80002f8 <__aeabi_dsub>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4620      	mov	r0, r4
 8002d40:	4629      	mov	r1, r5
 8002d42:	f7fd fdbb 	bl	80008bc <__aeabi_ddiv>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d52:	f7fd fad3 	bl	80002fc <__adddf3>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	ec43 2b17 	vmov	d7, r2, r3
}
 8002d5e:	eeb0 0a47 	vmov.f32	s0, s14
 8002d62:	eef0 0a67 	vmov.f32	s1, s15
 8002d66:	3728      	adds	r7, #40	@ 0x28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d6c:	0000      	movs	r0, r0
	...

08002d70 <StartDefaultTask>:


void StartDefaultTask(void *argument)
{
 8002d70:	b5b0      	push	{r4, r5, r7, lr}
 8002d72:	b0da      	sub	sp, #360	@ 0x168
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
  /* USER CODE BEGIN 5 */

  // micro-ROS configuration

  rmw_uros_set_custom_transport(
 8002d7a:	4baf      	ldr	r3, [pc, #700]	@ (8003038 <StartDefaultTask+0x2c8>)
 8002d7c:	9301      	str	r3, [sp, #4]
 8002d7e:	4baf      	ldr	r3, [pc, #700]	@ (800303c <StartDefaultTask+0x2cc>)
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	4baf      	ldr	r3, [pc, #700]	@ (8003040 <StartDefaultTask+0x2d0>)
 8002d84:	4aaf      	ldr	r2, [pc, #700]	@ (8003044 <StartDefaultTask+0x2d4>)
 8002d86:	49b0      	ldr	r1, [pc, #704]	@ (8003048 <StartDefaultTask+0x2d8>)
 8002d88:	2001      	movs	r0, #1
 8002d8a:	f00c fb29 	bl	800f3e0 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002d8e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d92:	4618      	mov	r0, r3
 8002d94:	f00c fa24 	bl	800f1e0 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8002d98:	4bac      	ldr	r3, [pc, #688]	@ (800304c <StartDefaultTask+0x2dc>)
 8002d9a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  freeRTOS_allocator.deallocate = microros_deallocate;
 8002d9e:	4bac      	ldr	r3, [pc, #688]	@ (8003050 <StartDefaultTask+0x2e0>)
 8002da0:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  freeRTOS_allocator.reallocate = microros_reallocate;
 8002da4:	4bab      	ldr	r3, [pc, #684]	@ (8003054 <StartDefaultTask+0x2e4>)
 8002da6:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8002daa:	4bab      	ldr	r3, [pc, #684]	@ (8003058 <StartDefaultTask+0x2e8>)
 8002dac:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8002db0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002db4:	4618      	mov	r0, r3
 8002db6:	f00c fa2f 	bl	800f218 <rcutils_set_default_allocator>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	f083 0301 	eor.w	r3, r3, #1
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d004      	beq.n	8002dd0 <StartDefaultTask+0x60>
      printf("Error on default allocators (line %d)\n", __LINE__);
 8002dc6:	f44f 71f6 	mov.w	r1, #492	@ 0x1ec
 8002dca:	48a4      	ldr	r0, [pc, #656]	@ (800305c <StartDefaultTask+0x2ec>)
 8002dcc:	f01a fbac 	bl	801d528 <iprintf>
  }

  allocator = rcl_get_default_allocator();
 8002dd0:	4ca3      	ldr	r4, [pc, #652]	@ (8003060 <StartDefaultTask+0x2f0>)
 8002dd2:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f00c fa10 	bl	800f1fc <rcutils_get_default_allocator>
 8002ddc:	4625      	mov	r5, r4
 8002dde:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8002de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002de4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002de6:	6823      	ldr	r3, [r4, #0]
 8002de8:	602b      	str	r3, [r5, #0]

  //create init_options
  init_options = rcl_get_zero_initialized_init_options();
 8002dea:	f00b f8ad 	bl	800df48 <rcl_get_zero_initialized_init_options>
 8002dee:	4603      	mov	r3, r0
 8002df0:	4a9c      	ldr	r2, [pc, #624]	@ (8003064 <StartDefaultTask+0x2f4>)
 8002df2:	6013      	str	r3, [r2, #0]
  RCCHECK(rcl_init_options_init(&init_options, allocator));
 8002df4:	4b9a      	ldr	r3, [pc, #616]	@ (8003060 <StartDefaultTask+0x2f0>)
 8002df6:	466c      	mov	r4, sp
 8002df8:	f103 020c 	add.w	r2, r3, #12
 8002dfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e00:	e884 0003 	stmia.w	r4, {r0, r1}
 8002e04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e06:	4897      	ldr	r0, [pc, #604]	@ (8003064 <StartDefaultTask+0x2f4>)
 8002e08:	f00b f8a0 	bl	800df4c <rcl_init_options_init>
  RCCHECK(rcl_init_options_set_domain_id(&init_options, 88));
 8002e0c:	2158      	movs	r1, #88	@ 0x58
 8002e0e:	4895      	ldr	r0, [pc, #596]	@ (8003064 <StartDefaultTask+0x2f4>)
 8002e10:	f00b f97e 	bl	800e110 <rcl_init_options_set_domain_id>

//  rclc_support_init(&support, 0, NULL, &allocator);
  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8002e14:	4b92      	ldr	r3, [pc, #584]	@ (8003060 <StartDefaultTask+0x2f0>)
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	4b92      	ldr	r3, [pc, #584]	@ (8003064 <StartDefaultTask+0x2f4>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	4892      	ldr	r0, [pc, #584]	@ (8003068 <StartDefaultTask+0x2f8>)
 8002e20:	f00c f898 	bl	800ef54 <rclc_support_init_with_options>


  GPIO_PinState button = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8002e24:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002e28:	4890      	ldr	r0, [pc, #576]	@ (800306c <StartDefaultTask+0x2fc>)
 8002e2a:	f001 fcb9 	bl	80047a0 <HAL_GPIO_ReadPin>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
  uint8_t num_executor = 2  ; // total number of handles =  #timer + service
 8002e34:	2302      	movs	r3, #2
 8002e36:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f

  // create node
  rclc_node_init_default(&node, "cubemx_node", "", &support);
 8002e3a:	4b8b      	ldr	r3, [pc, #556]	@ (8003068 <StartDefaultTask+0x2f8>)
 8002e3c:	4a8c      	ldr	r2, [pc, #560]	@ (8003070 <StartDefaultTask+0x300>)
 8002e3e:	498d      	ldr	r1, [pc, #564]	@ (8003074 <StartDefaultTask+0x304>)
 8002e40:	488d      	ldr	r0, [pc, #564]	@ (8003078 <StartDefaultTask+0x308>)
 8002e42:	f00c f8bb 	bl	800efbc <rclc_node_init_default>



  // create timer
  rclc_timer_init_default(&mpu6050_timer, &support, RCL_MS_TO_NS(10), timer_callback);
 8002e46:	4b8d      	ldr	r3, [pc, #564]	@ (800307c <StartDefaultTask+0x30c>)
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	4a8d      	ldr	r2, [pc, #564]	@ (8003080 <StartDefaultTask+0x310>)
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	4985      	ldr	r1, [pc, #532]	@ (8003068 <StartDefaultTask+0x2f8>)
 8002e52:	488c      	ldr	r0, [pc, #560]	@ (8003084 <StartDefaultTask+0x314>)
 8002e54:	f00c f98a 	bl	800f16c <rclc_timer_init_default>

  // create publisher

  rclc_publisher_init_best_effort(
 8002e58:	f00d fedc 	bl	8010c14 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	4b8a      	ldr	r3, [pc, #552]	@ (8003088 <StartDefaultTask+0x318>)
 8002e60:	4985      	ldr	r1, [pc, #532]	@ (8003078 <StartDefaultTask+0x308>)
 8002e62:	488a      	ldr	r0, [pc, #552]	@ (800308c <StartDefaultTask+0x31c>)
 8002e64:	f00c f91a 	bl	800f09c <rclc_publisher_init_best_effort>
    &mpu6050_publisher, &node,
	ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu), "mpu6050_publisher");

  rclc_publisher_init_default(
 8002e68:	f008 ff6e 	bl	800bd48 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	4b88      	ldr	r3, [pc, #544]	@ (8003090 <StartDefaultTask+0x320>)
 8002e70:	4981      	ldr	r1, [pc, #516]	@ (8003078 <StartDefaultTask+0x308>)
 8002e72:	4888      	ldr	r0, [pc, #544]	@ (8003094 <StartDefaultTask+0x324>)
 8002e74:	f00c f8de 	bl	800f034 <rclc_publisher_init_default>
      &cmd_vel, &node,
	  ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist), "cmd_vel");

  // create service
  rclc_service_init_default(&status_service, &node,
 8002e78:	f00e f9ce 	bl	8011218 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Trigger>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	4b86      	ldr	r3, [pc, #536]	@ (8003098 <StartDefaultTask+0x328>)
 8002e80:	497d      	ldr	r1, [pc, #500]	@ (8003078 <StartDefaultTask+0x308>)
 8002e82:	4886      	ldr	r0, [pc, #536]	@ (800309c <StartDefaultTask+0x32c>)
 8002e84:	f00c f93e 	bl	800f104 <rclc_service_init_default>
  			ROSIDL_GET_SRV_TYPE_SUPPORT(std_srvs, srv, Trigger)
  			, "status");

	if(button == GPIO_PIN_SET){
 8002e88:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d10d      	bne.n	8002eac <StartDefaultTask+0x13c>
		rclc_service_init_default(&mpu6050_service, &node,
 8002e90:	f009 f892 	bl	800bfb8 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>
 8002e94:	4602      	mov	r2, r0
 8002e96:	4b82      	ldr	r3, [pc, #520]	@ (80030a0 <StartDefaultTask+0x330>)
 8002e98:	4977      	ldr	r1, [pc, #476]	@ (8003078 <StartDefaultTask+0x308>)
 8002e9a:	4882      	ldr	r0, [pc, #520]	@ (80030a4 <StartDefaultTask+0x334>)
 8002e9c:	f00c f932 	bl	800f104 <rclc_service_init_default>
			ROSIDL_GET_SRV_TYPE_SUPPORT(imu_interfaces, srv, ImuCalibration)
			, "mpu6050_calibration");
		num_executor += 1;
 8002ea0:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
 8002eaa:	e065      	b.n	8002f78 <StartDefaultTask+0x208>
	}

	else{
		is_calib = true;
 8002eac:	4b7e      	ldr	r3, [pc, #504]	@ (80030a8 <StartDefaultTask+0x338>)
 8002eae:	2201      	movs	r2, #1
 8002eb0:	701a      	strb	r2, [r3, #0]
		accel_offset.x = 0.6312768530273459;
 8002eb2:	497e      	ldr	r1, [pc, #504]	@ (80030ac <StartDefaultTask+0x33c>)
 8002eb4:	a354      	add	r3, pc, #336	@ (adr r3, 8003008 <StartDefaultTask+0x298>)
 8002eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eba:	e9c1 2300 	strd	r2, r3, [r1]
		accel_offset.y = -0.0819649929199216;
 8002ebe:	497b      	ldr	r1, [pc, #492]	@ (80030ac <StartDefaultTask+0x33c>)
 8002ec0:	a353      	add	r3, pc, #332	@ (adr r3, 8003010 <StartDefaultTask+0x2a0>)
 8002ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec6:	e9c1 2302 	strd	r2, r3, [r1, #8]
		accel_offset.z = 0.5116870961298351;
 8002eca:	4978      	ldr	r1, [pc, #480]	@ (80030ac <StartDefaultTask+0x33c>)
 8002ecc:	a352      	add	r3, pc, #328	@ (adr r3, 8003018 <StartDefaultTask+0x2a8>)
 8002ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed2:	e9c1 2304 	strd	r2, r3, [r1, #16]

		gyro_offset.x = -0.023353091609142815;
 8002ed6:	4976      	ldr	r1, [pc, #472]	@ (80030b0 <StartDefaultTask+0x340>)
 8002ed8:	a351      	add	r3, pc, #324	@ (adr r3, 8003020 <StartDefaultTask+0x2b0>)
 8002eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ede:	e9c1 2300 	strd	r2, r3, [r1]
		gyro_offset.y = 0.023326005697926703;
 8002ee2:	4973      	ldr	r1, [pc, #460]	@ (80030b0 <StartDefaultTask+0x340>)
 8002ee4:	a350      	add	r3, pc, #320	@ (adr r3, 8003028 <StartDefaultTask+0x2b8>)
 8002ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eea:	e9c1 2302 	strd	r2, r3, [r1, #8]
		gyro_offset.z = 0.005351206132862714;
 8002eee:	4970      	ldr	r1, [pc, #448]	@ (80030b0 <StartDefaultTask+0x340>)
 8002ef0:	a34f      	add	r3, pc, #316	@ (adr r3, 8003030 <StartDefaultTask+0x2c0>)
 8002ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef6:	e9c1 2304 	strd	r2, r3, [r1, #16]

		double gyro_cov[9] =  {
 8002efa:	4a6e      	ldr	r2, [pc, #440]	@ (80030b4 <StartDefaultTask+0x344>)
 8002efc:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8002f00:	4611      	mov	r1, r2
 8002f02:	2248      	movs	r2, #72	@ 0x48
 8002f04:	4618      	mov	r0, r3
 8002f06:	f01a fd6a 	bl	801d9de <memcpy>
				2.155817054758849e-06, 1.1030785686223727e-07, 1.229854119042769e-08,
				1.1030785686223727e-07, 2.5384651252082968e-06, 1.7032517411039515e-08,
				1.229854119042769e-08, 1.7032517411039515e-08, 1.906569917368417e-06
			};
		double acc_cov[9] = {
 8002f0a:	4a6b      	ldr	r2, [pc, #428]	@ (80030b8 <StartDefaultTask+0x348>)
 8002f0c:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8002f10:	4611      	mov	r1, r2
 8002f12:	2248      	movs	r2, #72	@ 0x48
 8002f14:	4618      	mov	r0, r3
 8002f16:	f01a fd62 	bl	801d9de <memcpy>
		    0.0013081652288234637,  1.0781109688085633e-05,  2.3493748179790447e-05,
		    1.0781109688085633e-05, 0.0011941322210539112,  4.108841533445584e-05,
		    2.3493748179790447e-05, 4.108841533445584e-05,  0.004555163865375252
		};

		for(int i = 0; i < 9; i++){
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002f20:	e026      	b.n	8002f70 <StartDefaultTask+0x200>
				mpu6050_msg.linear_acceleration_covariance[i] = acc_cov[i];
 8002f22:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002f2c:	443b      	add	r3, r7
 8002f2e:	3b68      	subs	r3, #104	@ 0x68
 8002f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f34:	4861      	ldr	r0, [pc, #388]	@ (80030bc <StartDefaultTask+0x34c>)
 8002f36:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8002f3a:	311f      	adds	r1, #31
 8002f3c:	00c9      	lsls	r1, r1, #3
 8002f3e:	4401      	add	r1, r0
 8002f40:	e9c1 2300 	strd	r2, r3, [r1]
				mpu6050_msg.angular_velocity_covariance[i] = gyro_cov[i];
 8002f44:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002f4e:	443b      	add	r3, r7
 8002f50:	3bb0      	subs	r3, #176	@ 0xb0
 8002f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f56:	4859      	ldr	r0, [pc, #356]	@ (80030bc <StartDefaultTask+0x34c>)
 8002f58:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8002f5c:	3113      	adds	r1, #19
 8002f5e:	00c9      	lsls	r1, r1, #3
 8002f60:	4401      	add	r1, r0
 8002f62:	e9c1 2300 	strd	r2, r3, [r1]
		for(int i = 0; i < 9; i++){
 8002f66:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002f70:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	ddd4      	ble.n	8002f22 <StartDefaultTask+0x1b2>
			}
    }

	// Synchronize time with the agent (t check the connectivity of micro_ros_agent)
	  rmw_uros_sync_session(1000);
 8002f78:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f7c:	f00d f8f8 	bl	8010170 <rmw_uros_sync_session>


  // create message
  mpu6050_msg.header.frame_id = micro_ros_string_utilities_init("imu_frame");
 8002f80:	4c4e      	ldr	r4, [pc, #312]	@ (80030bc <StartDefaultTask+0x34c>)
 8002f82:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002f86:	494e      	ldr	r1, [pc, #312]	@ (80030c0 <StartDefaultTask+0x350>)
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f009 fad5 	bl	800c538 <micro_ros_string_utilities_init>
 8002f8e:	f104 0308 	add.w	r3, r4, #8
 8002f92:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8002f96:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f98:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  // create executor
  executor = rclc_executor_get_zero_initialized_executor();
 8002f9c:	4c49      	ldr	r4, [pc, #292]	@ (80030c4 <StartDefaultTask+0x354>)
 8002f9e:	463b      	mov	r3, r7
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f00b fd3d 	bl	800ea20 <rclc_executor_get_zero_initialized_executor>
 8002fa6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002faa:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002fae:	4620      	mov	r0, r4
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	2390      	movs	r3, #144	@ 0x90
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	f01a fd12 	bl	801d9de <memcpy>


  rclc_executor_init(&executor, &support.context, num_executor, &allocator);
 8002fba:	f897 215f 	ldrb.w	r2, [r7, #351]	@ 0x15f
 8002fbe:	4b28      	ldr	r3, [pc, #160]	@ (8003060 <StartDefaultTask+0x2f0>)
 8002fc0:	4929      	ldr	r1, [pc, #164]	@ (8003068 <StartDefaultTask+0x2f8>)
 8002fc2:	4840      	ldr	r0, [pc, #256]	@ (80030c4 <StartDefaultTask+0x354>)
 8002fc4:	f00b fd38 	bl	800ea38 <rclc_executor_init>
  rclc_executor_add_timer(&executor, &mpu6050_timer); // add timer
 8002fc8:	492e      	ldr	r1, [pc, #184]	@ (8003084 <StartDefaultTask+0x314>)
 8002fca:	483e      	ldr	r0, [pc, #248]	@ (80030c4 <StartDefaultTask+0x354>)
 8002fcc:	f00b fda0 	bl	800eb10 <rclc_executor_add_timer>
  if(button == GPIO_PIN_SET) rclc_executor_add_service(&executor, &mpu6050_service, &mpu6050_request,&mpu6050_response, service_callback);
 8002fd0:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d107      	bne.n	8002fe8 <StartDefaultTask+0x278>
 8002fd8:	4b3b      	ldr	r3, [pc, #236]	@ (80030c8 <StartDefaultTask+0x358>)
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	4b3b      	ldr	r3, [pc, #236]	@ (80030cc <StartDefaultTask+0x35c>)
 8002fde:	4a3c      	ldr	r2, [pc, #240]	@ (80030d0 <StartDefaultTask+0x360>)
 8002fe0:	4930      	ldr	r1, [pc, #192]	@ (80030a4 <StartDefaultTask+0x334>)
 8002fe2:	4838      	ldr	r0, [pc, #224]	@ (80030c4 <StartDefaultTask+0x354>)
 8002fe4:	f00b fdbe 	bl	800eb64 <rclc_executor_add_service>
  rclc_executor_add_service(&executor, &status_service, &status_request,&status_response, status_callback);
 8002fe8:	4b3a      	ldr	r3, [pc, #232]	@ (80030d4 <StartDefaultTask+0x364>)
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	4b3a      	ldr	r3, [pc, #232]	@ (80030d8 <StartDefaultTask+0x368>)
 8002fee:	4a3b      	ldr	r2, [pc, #236]	@ (80030dc <StartDefaultTask+0x36c>)
 8002ff0:	492a      	ldr	r1, [pc, #168]	@ (800309c <StartDefaultTask+0x32c>)
 8002ff2:	4834      	ldr	r0, [pc, #208]	@ (80030c4 <StartDefaultTask+0x354>)
 8002ff4:	f00b fdb6 	bl	800eb64 <rclc_executor_add_service>
  rclc_executor_spin(&executor);
 8002ff8:	4832      	ldr	r0, [pc, #200]	@ (80030c4 <StartDefaultTask+0x354>)
 8002ffa:	f00b ff83 	bl	800ef04 <rclc_executor_spin>


  for(;;){
    osDelay(10);
 8002ffe:	200a      	movs	r0, #10
 8003000:	f006 f9d4 	bl	80093ac <osDelay>
 8003004:	e7fb      	b.n	8002ffe <StartDefaultTask+0x28e>
 8003006:	bf00      	nop
 8003008:	83cf2d0d 	.word	0x83cf2d0d
 800300c:	3fe4336b 	.word	0x3fe4336b
 8003010:	64020804 	.word	0x64020804
 8003014:	bfb4fba8 	.word	0xbfb4fba8
 8003018:	9df53611 	.word	0x9df53611
 800301c:	3fe05fbd 	.word	0x3fe05fbd
 8003020:	72e31529 	.word	0x72e31529
 8003024:	bf97e9df 	.word	0xbf97e9df
 8003028:	be79c231 	.word	0xbe79c231
 800302c:	3f97e2c5 	.word	0x3f97e2c5
 8003030:	755b573b 	.word	0x755b573b
 8003034:	3f75eb25 	.word	0x3f75eb25
 8003038:	080015f1 	.word	0x080015f1
 800303c:	0800158d 	.word	0x0800158d
 8003040:	0800156d 	.word	0x0800156d
 8003044:	08001541 	.word	0x08001541
 8003048:	20008408 	.word	0x20008408
 800304c:	08003111 	.word	0x08003111
 8003050:	08003155 	.word	0x08003155
 8003054:	0800318d 	.word	0x0800318d
 8003058:	080031f9 	.word	0x080031f9
 800305c:	0801f8a4 	.word	0x0801f8a4
 8003060:	200076fc 	.word	0x200076fc
 8003064:	20007718 	.word	0x20007718
 8003068:	200076c8 	.word	0x200076c8
 800306c:	48000800 	.word	0x48000800
 8003070:	0801f8cc 	.word	0x0801f8cc
 8003074:	0801f8d0 	.word	0x0801f8d0
 8003078:	20007710 	.word	0x20007710
 800307c:	08002349 	.word	0x08002349
 8003080:	00989680 	.word	0x00989680
 8003084:	2000771c 	.word	0x2000771c
 8003088:	0801f8dc 	.word	0x0801f8dc
 800308c:	200077b8 	.word	0x200077b8
 8003090:	0801f8f0 	.word	0x0801f8f0
 8003094:	20007b58 	.word	0x20007b58
 8003098:	0801f8f8 	.word	0x0801f8f8
 800309c:	200077b4 	.word	0x200077b4
 80030a0:	0801f900 	.word	0x0801f900
 80030a4:	200077b0 	.word	0x200077b0
 80030a8:	200076c4 	.word	0x200076c4
 80030ac:	20007ab8 	.word	0x20007ab8
 80030b0:	20007ad0 	.word	0x20007ad0
 80030b4:	0801f920 	.word	0x0801f920
 80030b8:	0801f968 	.word	0x0801f968
 80030bc:	200077c0 	.word	0x200077c0
 80030c0:	0801f914 	.word	0x0801f914
 80030c4:	20007720 	.word	0x20007720
 80030c8:	080025f1 	.word	0x080025f1
 80030cc:	20007900 	.word	0x20007900
 80030d0:	20007908 	.word	0x20007908
 80030d4:	080026c5 	.word	0x080026c5
 80030d8:	20007a4c 	.word	0x20007a4c
 80030dc:	20007a48 	.word	0x20007a48

080030e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a04      	ldr	r2, [pc, #16]	@ (8003100 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d101      	bne.n	80030f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80030f2:	f000 fd7b 	bl	8003bec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40012c00 	.word	0x40012c00

08003104 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003108:	b672      	cpsid	i
}
 800310a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800310c:	bf00      	nop
 800310e:	e7fd      	b.n	800310c <Error_Handler+0x8>

08003110 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800311a:	4b0c      	ldr	r3, [pc, #48]	@ (800314c <microros_allocate+0x3c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4413      	add	r3, r2
 8003124:	461a      	mov	r2, r3
 8003126:	4b09      	ldr	r3, [pc, #36]	@ (800314c <microros_allocate+0x3c>)
 8003128:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800312a:	4b09      	ldr	r3, [pc, #36]	@ (8003150 <microros_allocate+0x40>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4413      	add	r3, r2
 8003134:	461a      	mov	r2, r3
 8003136:	4b06      	ldr	r3, [pc, #24]	@ (8003150 <microros_allocate+0x40>)
 8003138:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7fd ff6e 	bl	800101c <pvPortMallocMicroROS>
 8003140:	4603      	mov	r3, r0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	200083ac 	.word	0x200083ac
 8003150:	200083b0 	.word	0x200083b0

08003154 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00c      	beq.n	800317e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7fe f87d 	bl	8001264 <getBlockSize>
 800316a:	4603      	mov	r3, r0
 800316c:	4a06      	ldr	r2, [pc, #24]	@ (8003188 <microros_deallocate+0x34>)
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	461a      	mov	r2, r3
 8003174:	4b04      	ldr	r3, [pc, #16]	@ (8003188 <microros_deallocate+0x34>)
 8003176:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7fe f817 	bl	80011ac <vPortFreeMicroROS>
  }
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	200083b0 	.word	0x200083b0

0800318c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003198:	4b15      	ldr	r3, [pc, #84]	@ (80031f0 <microros_reallocate+0x64>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	461a      	mov	r2, r3
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	4413      	add	r3, r2
 80031a2:	461a      	mov	r2, r3
 80031a4:	4b12      	ldr	r3, [pc, #72]	@ (80031f0 <microros_reallocate+0x64>)
 80031a6:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80031a8:	4b12      	ldr	r3, [pc, #72]	@ (80031f4 <microros_reallocate+0x68>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	461a      	mov	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	4413      	add	r3, r2
 80031b2:	461a      	mov	r2, r3
 80031b4:	4b0f      	ldr	r3, [pc, #60]	@ (80031f4 <microros_reallocate+0x68>)
 80031b6:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d104      	bne.n	80031c8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80031be:	68b8      	ldr	r0, [r7, #8]
 80031c0:	f7fd ff2c 	bl	800101c <pvPortMallocMicroROS>
 80031c4:	4603      	mov	r3, r0
 80031c6:	e00e      	b.n	80031e6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f7fe f84b 	bl	8001264 <getBlockSize>
 80031ce:	4603      	mov	r3, r0
 80031d0:	4a08      	ldr	r2, [pc, #32]	@ (80031f4 <microros_reallocate+0x68>)
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	461a      	mov	r2, r3
 80031d8:	4b06      	ldr	r3, [pc, #24]	@ (80031f4 <microros_reallocate+0x68>)
 80031da:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80031dc:	68b9      	ldr	r1, [r7, #8]
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f7fe f85e 	bl	80012a0 <pvPortReallocMicroROS>
 80031e4:	4603      	mov	r3, r0
  }
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	200083ac 	.word	0x200083ac
 80031f4:	200083b0 	.word	0x200083b0

080031f8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	fb02 f303 	mul.w	r3, r2, r3
 800320c:	4a0c      	ldr	r2, [pc, #48]	@ (8003240 <microros_zero_allocate+0x48>)
 800320e:	6812      	ldr	r2, [r2, #0]
 8003210:	4413      	add	r3, r2
 8003212:	461a      	mov	r2, r3
 8003214:	4b0a      	ldr	r3, [pc, #40]	@ (8003240 <microros_zero_allocate+0x48>)
 8003216:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	fb02 f303 	mul.w	r3, r2, r3
 8003220:	4a08      	ldr	r2, [pc, #32]	@ (8003244 <microros_zero_allocate+0x4c>)
 8003222:	6812      	ldr	r2, [r2, #0]
 8003224:	4413      	add	r3, r2
 8003226:	461a      	mov	r2, r3
 8003228:	4b06      	ldr	r3, [pc, #24]	@ (8003244 <microros_zero_allocate+0x4c>)
 800322a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 800322c:	68b9      	ldr	r1, [r7, #8]
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f7fe f863 	bl	80012fa <pvPortCallocMicroROS>
 8003234:	4603      	mov	r3, r0
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	200083ac 	.word	0x200083ac
 8003244:	200083b0 	.word	0x200083b0

08003248 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8003248:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800324c:	b086      	sub	sp, #24
 800324e:	af00      	add	r7, sp, #0
 8003250:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003254:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800325a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800325e:	a320      	add	r3, pc, #128	@ (adr r3, 80032e0 <UTILS_NanosecondsToTimespec+0x98>)
 8003260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003264:	f7fd fd00 	bl	8000c68 <__aeabi_ldivmod>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8003272:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003276:	a31a      	add	r3, pc, #104	@ (adr r3, 80032e0 <UTILS_NanosecondsToTimespec+0x98>)
 8003278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327c:	f7fd fcf4 	bl	8000c68 <__aeabi_ldivmod>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	da20      	bge.n	80032ce <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	4a11      	ldr	r2, [pc, #68]	@ (80032d8 <UTILS_NanosecondsToTimespec+0x90>)
 8003292:	fb82 1203 	smull	r1, r2, r2, r3
 8003296:	1712      	asrs	r2, r2, #28
 8003298:	17db      	asrs	r3, r3, #31
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	3301      	adds	r3, #1
 800329e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a6:	6979      	ldr	r1, [r7, #20]
 80032a8:	17c8      	asrs	r0, r1, #31
 80032aa:	460c      	mov	r4, r1
 80032ac:	4605      	mov	r5, r0
 80032ae:	ebb2 0804 	subs.w	r8, r2, r4
 80032b2:	eb63 0905 	sbc.w	r9, r3, r5
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	4906      	ldr	r1, [pc, #24]	@ (80032dc <UTILS_NanosecondsToTimespec+0x94>)
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	441a      	add	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	609a      	str	r2, [r3, #8]
    }
}
 80032ce:	bf00      	nop
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032d8:	44b82fa1 	.word	0x44b82fa1
 80032dc:	3b9aca00 	.word	0x3b9aca00
 80032e0:	3b9aca00 	.word	0x3b9aca00
 80032e4:	00000000 	.word	0x00000000

080032e8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80032e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032ec:	b08e      	sub	sp, #56	@ 0x38
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80032f2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80032f4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80032f8:	2300      	movs	r3, #0
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800330a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800330e:	4618      	mov	r0, r3
 8003310:	f007 fb18 	bl	800a944 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8003314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003316:	17da      	asrs	r2, r3, #31
 8003318:	61bb      	str	r3, [r7, #24]
 800331a:	61fa      	str	r2, [r7, #28]
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	f04f 0300 	mov.w	r3, #0
 8003324:	69b9      	ldr	r1, [r7, #24]
 8003326:	000b      	movs	r3, r1
 8003328:	2200      	movs	r2, #0
 800332a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800332e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003330:	2200      	movs	r2, #0
 8003332:	461c      	mov	r4, r3
 8003334:	4615      	mov	r5, r2
 8003336:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800333a:	1911      	adds	r1, r2, r4
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	416b      	adcs	r3, r5
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003346:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800334a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800334e:	4602      	mov	r2, r0
 8003350:	460b      	mov	r3, r1
 8003352:	f04f 0400 	mov.w	r4, #0
 8003356:	f04f 0500 	mov.w	r5, #0
 800335a:	015d      	lsls	r5, r3, #5
 800335c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003360:	0154      	lsls	r4, r2, #5
 8003362:	4622      	mov	r2, r4
 8003364:	462b      	mov	r3, r5
 8003366:	ebb2 0800 	subs.w	r8, r2, r0
 800336a:	eb63 0901 	sbc.w	r9, r3, r1
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	f04f 0300 	mov.w	r3, #0
 8003376:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800337a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800337e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8003382:	4690      	mov	r8, r2
 8003384:	4699      	mov	r9, r3
 8003386:	eb18 0a00 	adds.w	sl, r8, r0
 800338a:	eb49 0b01 	adc.w	fp, r9, r1
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800339a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800339e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033a2:	ebb2 040a 	subs.w	r4, r2, sl
 80033a6:	603c      	str	r4, [r7, #0]
 80033a8:	eb63 030b 	sbc.w	r3, r3, fp
 80033ac:	607b      	str	r3, [r7, #4]
 80033ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033b2:	4623      	mov	r3, r4
 80033b4:	181b      	adds	r3, r3, r0
 80033b6:	613b      	str	r3, [r7, #16]
 80033b8:	462b      	mov	r3, r5
 80033ba:	eb41 0303 	adc.w	r3, r1, r3
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	6a3a      	ldr	r2, [r7, #32]
 80033c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033c6:	f7ff ff3f 	bl	8003248 <UTILS_NanosecondsToTimespec>

    return 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	4618      	mov	r0, r3
 80033ce:	3738      	adds	r7, #56	@ 0x38
 80033d0:	46bd      	mov	sp, r7
 80033d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080033d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033de:	4b12      	ldr	r3, [pc, #72]	@ (8003428 <HAL_MspInit+0x50>)
 80033e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e2:	4a11      	ldr	r2, [pc, #68]	@ (8003428 <HAL_MspInit+0x50>)
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80033ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003428 <HAL_MspInit+0x50>)
 80033ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	607b      	str	r3, [r7, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003428 <HAL_MspInit+0x50>)
 80033f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fa:	4a0b      	ldr	r2, [pc, #44]	@ (8003428 <HAL_MspInit+0x50>)
 80033fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003400:	6593      	str	r3, [r2, #88]	@ 0x58
 8003402:	4b09      	ldr	r3, [pc, #36]	@ (8003428 <HAL_MspInit+0x50>)
 8003404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800340a:	603b      	str	r3, [r7, #0]
 800340c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800340e:	2200      	movs	r2, #0
 8003410:	210f      	movs	r1, #15
 8003412:	f06f 0001 	mvn.w	r0, #1
 8003416:	f000 fcd6 	bl	8003dc6 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800341a:	f002 fa1d 	bl	8005858 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800341e:	bf00      	nop
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40021000 	.word	0x40021000

0800342c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b08c      	sub	sp, #48	@ 0x30
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8003438:	2300      	movs	r3, #0
 800343a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800343c:	4b2c      	ldr	r3, [pc, #176]	@ (80034f0 <HAL_InitTick+0xc4>)
 800343e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003440:	4a2b      	ldr	r2, [pc, #172]	@ (80034f0 <HAL_InitTick+0xc4>)
 8003442:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003446:	6613      	str	r3, [r2, #96]	@ 0x60
 8003448:	4b29      	ldr	r3, [pc, #164]	@ (80034f0 <HAL_InitTick+0xc4>)
 800344a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800344c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003454:	f107 020c 	add.w	r2, r7, #12
 8003458:	f107 0310 	add.w	r3, r7, #16
 800345c:	4611      	mov	r1, r2
 800345e:	4618      	mov	r0, r3
 8003460:	f002 fef2 	bl	8006248 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003464:	f002 feda 	bl	800621c <HAL_RCC_GetPCLK2Freq>
 8003468:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800346a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800346c:	4a21      	ldr	r2, [pc, #132]	@ (80034f4 <HAL_InitTick+0xc8>)
 800346e:	fba2 2303 	umull	r2, r3, r2, r3
 8003472:	0c9b      	lsrs	r3, r3, #18
 8003474:	3b01      	subs	r3, #1
 8003476:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003478:	4b1f      	ldr	r3, [pc, #124]	@ (80034f8 <HAL_InitTick+0xcc>)
 800347a:	4a20      	ldr	r2, [pc, #128]	@ (80034fc <HAL_InitTick+0xd0>)
 800347c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800347e:	4b1e      	ldr	r3, [pc, #120]	@ (80034f8 <HAL_InitTick+0xcc>)
 8003480:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003484:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003486:	4a1c      	ldr	r2, [pc, #112]	@ (80034f8 <HAL_InitTick+0xcc>)
 8003488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800348c:	4b1a      	ldr	r3, [pc, #104]	@ (80034f8 <HAL_InitTick+0xcc>)
 800348e:	2200      	movs	r2, #0
 8003490:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003492:	4b19      	ldr	r3, [pc, #100]	@ (80034f8 <HAL_InitTick+0xcc>)
 8003494:	2200      	movs	r2, #0
 8003496:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8003498:	4817      	ldr	r0, [pc, #92]	@ (80034f8 <HAL_InitTick+0xcc>)
 800349a:	f003 f99b 	bl	80067d4 <HAL_TIM_Base_Init>
 800349e:	4603      	mov	r3, r0
 80034a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80034a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d11b      	bne.n	80034e4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80034ac:	4812      	ldr	r0, [pc, #72]	@ (80034f8 <HAL_InitTick+0xcc>)
 80034ae:	f003 f9f3 	bl	8006898 <HAL_TIM_Base_Start_IT>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80034b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d111      	bne.n	80034e4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80034c0:	2019      	movs	r0, #25
 80034c2:	f000 fc9a 	bl	8003dfa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b0f      	cmp	r3, #15
 80034ca:	d808      	bhi.n	80034de <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80034cc:	2200      	movs	r2, #0
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	2019      	movs	r0, #25
 80034d2:	f000 fc78 	bl	8003dc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003500 <HAL_InitTick+0xd4>)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	e002      	b.n	80034e4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80034e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3730      	adds	r7, #48	@ 0x30
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40021000 	.word	0x40021000
 80034f4:	431bde83 	.word	0x431bde83
 80034f8:	200083b4 	.word	0x200083b4
 80034fc:	40012c00 	.word	0x40012c00
 8003500:	20000008 	.word	0x20000008

08003504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003508:	bf00      	nop
 800350a:	e7fd      	b.n	8003508 <NMI_Handler+0x4>

0800350c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003510:	bf00      	nop
 8003512:	e7fd      	b.n	8003510 <HardFault_Handler+0x4>

08003514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003518:	bf00      	nop
 800351a:	e7fd      	b.n	8003518 <MemManage_Handler+0x4>

0800351c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003520:	bf00      	nop
 8003522:	e7fd      	b.n	8003520 <BusFault_Handler+0x4>

08003524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003528:	bf00      	nop
 800352a:	e7fd      	b.n	8003528 <UsageFault_Handler+0x4>

0800352c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003530:	bf00      	nop
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
	...

0800353c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8003540:	4802      	ldr	r0, [pc, #8]	@ (800354c <DMA1_Channel1_IRQHandler+0x10>)
 8003542:	f000 fe50 	bl	80041e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20008530 	.word	0x20008530

08003550 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8003554:	4802      	ldr	r0, [pc, #8]	@ (8003560 <DMA1_Channel2_IRQHandler+0x10>)
 8003556:	f000 fe46 	bl	80041e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800355a:	bf00      	nop
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20008590 	.word	0x20008590

08003564 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003568:	4802      	ldr	r0, [pc, #8]	@ (8003574 <DMA1_Channel3_IRQHandler+0x10>)
 800356a:	f000 fe3c 	bl	80041e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	200085f0 	.word	0x200085f0

08003578 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800357c:	4802      	ldr	r0, [pc, #8]	@ (8003588 <DMA1_Channel4_IRQHandler+0x10>)
 800357e:	f000 fe32 	bl	80041e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003582:	bf00      	nop
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	20008650 	.word	0x20008650

0800358c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003590:	4802      	ldr	r0, [pc, #8]	@ (800359c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003592:	f003 f9f9 	bl	8006988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	200083b4 	.word	0x200083b4

080035a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80035a4:	4802      	ldr	r0, [pc, #8]	@ (80035b0 <USART1_IRQHandler+0x10>)
 80035a6:	f003 fe13 	bl	80071d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	2000849c 	.word	0x2000849c

080035b4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80035b8:	4802      	ldr	r0, [pc, #8]	@ (80035c4 <LPUART1_IRQHandler+0x10>)
 80035ba:	f003 fe09 	bl	80071d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20008408 	.word	0x20008408

080035c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  return 1;
 80035cc:	2301      	movs	r3, #1
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <_kill>:

int _kill(int pid, int sig)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80035e2:	f01a f9c7 	bl	801d974 <__errno>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2216      	movs	r2, #22
 80035ea:	601a      	str	r2, [r3, #0]
  return -1;
 80035ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <_exit>:

void _exit (int status)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003600:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f7ff ffe7 	bl	80035d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800360a:	bf00      	nop
 800360c:	e7fd      	b.n	800360a <_exit+0x12>

0800360e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b086      	sub	sp, #24
 8003612:	af00      	add	r7, sp, #0
 8003614:	60f8      	str	r0, [r7, #12]
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800361a:	2300      	movs	r3, #0
 800361c:	617b      	str	r3, [r7, #20]
 800361e:	e00a      	b.n	8003636 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003620:	f3af 8000 	nop.w
 8003624:	4601      	mov	r1, r0
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	60ba      	str	r2, [r7, #8]
 800362c:	b2ca      	uxtb	r2, r1
 800362e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	3301      	adds	r3, #1
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	429a      	cmp	r2, r3
 800363c:	dbf0      	blt.n	8003620 <_read+0x12>
  }

  return len;
 800363e:	687b      	ldr	r3, [r7, #4]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	e009      	b.n	800366e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	60ba      	str	r2, [r7, #8]
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	3301      	adds	r3, #1
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	429a      	cmp	r2, r3
 8003674:	dbf1      	blt.n	800365a <_write+0x12>
  }
  return len;
 8003676:	687b      	ldr	r3, [r7, #4]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <_close>:

int _close(int file)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003688:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800368c:	4618      	mov	r0, r3
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80036a8:	605a      	str	r2, [r3, #4]
  return 0;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <_isatty>:

int _isatty(int file)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036c0:	2301      	movs	r3, #1
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b085      	sub	sp, #20
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	60f8      	str	r0, [r7, #12]
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036f0:	4a14      	ldr	r2, [pc, #80]	@ (8003744 <_sbrk+0x5c>)
 80036f2:	4b15      	ldr	r3, [pc, #84]	@ (8003748 <_sbrk+0x60>)
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036fc:	4b13      	ldr	r3, [pc, #76]	@ (800374c <_sbrk+0x64>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d102      	bne.n	800370a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003704:	4b11      	ldr	r3, [pc, #68]	@ (800374c <_sbrk+0x64>)
 8003706:	4a12      	ldr	r2, [pc, #72]	@ (8003750 <_sbrk+0x68>)
 8003708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800370a:	4b10      	ldr	r3, [pc, #64]	@ (800374c <_sbrk+0x64>)
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4413      	add	r3, r2
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	429a      	cmp	r2, r3
 8003716:	d207      	bcs.n	8003728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003718:	f01a f92c 	bl	801d974 <__errno>
 800371c:	4603      	mov	r3, r0
 800371e:	220c      	movs	r2, #12
 8003720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003722:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003726:	e009      	b.n	800373c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003728:	4b08      	ldr	r3, [pc, #32]	@ (800374c <_sbrk+0x64>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800372e:	4b07      	ldr	r3, [pc, #28]	@ (800374c <_sbrk+0x64>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4413      	add	r3, r2
 8003736:	4a05      	ldr	r2, [pc, #20]	@ (800374c <_sbrk+0x64>)
 8003738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800373a:	68fb      	ldr	r3, [r7, #12]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20020000 	.word	0x20020000
 8003748:	00000400 	.word	0x00000400
 800374c:	20008404 	.word	0x20008404
 8003750:	2000f770 	.word	0x2000f770

08003754 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003758:	4b06      	ldr	r3, [pc, #24]	@ (8003774 <SystemInit+0x20>)
 800375a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800375e:	4a05      	ldr	r2, [pc, #20]	@ (8003774 <SystemInit+0x20>)
 8003760:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003764:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003768:	bf00      	nop
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	e000ed00 	.word	0xe000ed00

08003778 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800377c:	4b20      	ldr	r3, [pc, #128]	@ (8003800 <MX_LPUART1_UART_Init+0x88>)
 800377e:	4a21      	ldr	r2, [pc, #132]	@ (8003804 <MX_LPUART1_UART_Init+0x8c>)
 8003780:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8003782:	4b1f      	ldr	r3, [pc, #124]	@ (8003800 <MX_LPUART1_UART_Init+0x88>)
 8003784:	4a20      	ldr	r2, [pc, #128]	@ (8003808 <MX_LPUART1_UART_Init+0x90>)
 8003786:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003788:	4b1d      	ldr	r3, [pc, #116]	@ (8003800 <MX_LPUART1_UART_Init+0x88>)
 800378a:	2200      	movs	r2, #0
 800378c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800378e:	4b1c      	ldr	r3, [pc, #112]	@ (8003800 <MX_LPUART1_UART_Init+0x88>)
 8003790:	2200      	movs	r2, #0
 8003792:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003794:	4b1a      	ldr	r3, [pc, #104]	@ (8003800 <MX_LPUART1_UART_Init+0x88>)
 8003796:	2200      	movs	r2, #0
 8003798:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800379a:	4b19      	ldr	r3, [pc, #100]	@ (8003800 <MX_LPUART1_UART_Init+0x88>)
 800379c:	220c      	movs	r2, #12
 800379e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037a0:	4b17      	ldr	r3, [pc, #92]	@ (8003800 <MX_LPUART1_UART_Init+0x88>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037a6:	4b16      	ldr	r3, [pc, #88]	@ (8003800 <MX_LPUART1_UART_Init+0x88>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80037ac:	4b14      	ldr	r3, [pc, #80]	@ (8003800 <MX_LPUART1_UART_Init+0x88>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037b2:	4b13      	ldr	r3, [pc, #76]	@ (8003800 <MX_LPUART1_UART_Init+0x88>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80037b8:	4811      	ldr	r0, [pc, #68]	@ (8003800 <MX_LPUART1_UART_Init+0x88>)
 80037ba:	f003 fb57 	bl	8006e6c <HAL_UART_Init>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80037c4:	f7ff fc9e 	bl	8003104 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80037c8:	2100      	movs	r1, #0
 80037ca:	480d      	ldr	r0, [pc, #52]	@ (8003800 <MX_LPUART1_UART_Init+0x88>)
 80037cc:	f005 f867 	bl	800889e <HAL_UARTEx_SetTxFifoThreshold>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 80037d6:	f7ff fc95 	bl	8003104 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80037da:	2100      	movs	r1, #0
 80037dc:	4808      	ldr	r0, [pc, #32]	@ (8003800 <MX_LPUART1_UART_Init+0x88>)
 80037de:	f005 f89c 	bl	800891a <HAL_UARTEx_SetRxFifoThreshold>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 80037e8:	f7ff fc8c 	bl	8003104 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80037ec:	4804      	ldr	r0, [pc, #16]	@ (8003800 <MX_LPUART1_UART_Init+0x88>)
 80037ee:	f005 f81d 	bl	800882c <HAL_UARTEx_DisableFifoMode>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 80037f8:	f7ff fc84 	bl	8003104 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80037fc:	bf00      	nop
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	20008408 	.word	0x20008408
 8003804:	40008000 	.word	0x40008000
 8003808:	001e8480 	.word	0x001e8480

0800380c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003810:	4b22      	ldr	r3, [pc, #136]	@ (800389c <MX_USART1_UART_Init+0x90>)
 8003812:	4a23      	ldr	r2, [pc, #140]	@ (80038a0 <MX_USART1_UART_Init+0x94>)
 8003814:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003816:	4b21      	ldr	r3, [pc, #132]	@ (800389c <MX_USART1_UART_Init+0x90>)
 8003818:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800381c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800381e:	4b1f      	ldr	r3, [pc, #124]	@ (800389c <MX_USART1_UART_Init+0x90>)
 8003820:	2200      	movs	r2, #0
 8003822:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003824:	4b1d      	ldr	r3, [pc, #116]	@ (800389c <MX_USART1_UART_Init+0x90>)
 8003826:	2200      	movs	r2, #0
 8003828:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800382a:	4b1c      	ldr	r3, [pc, #112]	@ (800389c <MX_USART1_UART_Init+0x90>)
 800382c:	2200      	movs	r2, #0
 800382e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003830:	4b1a      	ldr	r3, [pc, #104]	@ (800389c <MX_USART1_UART_Init+0x90>)
 8003832:	220c      	movs	r2, #12
 8003834:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003836:	4b19      	ldr	r3, [pc, #100]	@ (800389c <MX_USART1_UART_Init+0x90>)
 8003838:	2200      	movs	r2, #0
 800383a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800383c:	4b17      	ldr	r3, [pc, #92]	@ (800389c <MX_USART1_UART_Init+0x90>)
 800383e:	2200      	movs	r2, #0
 8003840:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003842:	4b16      	ldr	r3, [pc, #88]	@ (800389c <MX_USART1_UART_Init+0x90>)
 8003844:	2200      	movs	r2, #0
 8003846:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003848:	4b14      	ldr	r3, [pc, #80]	@ (800389c <MX_USART1_UART_Init+0x90>)
 800384a:	2200      	movs	r2, #0
 800384c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800384e:	4b13      	ldr	r3, [pc, #76]	@ (800389c <MX_USART1_UART_Init+0x90>)
 8003850:	2200      	movs	r2, #0
 8003852:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003854:	4811      	ldr	r0, [pc, #68]	@ (800389c <MX_USART1_UART_Init+0x90>)
 8003856:	f003 fb09 	bl	8006e6c <HAL_UART_Init>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003860:	f7ff fc50 	bl	8003104 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003864:	2100      	movs	r1, #0
 8003866:	480d      	ldr	r0, [pc, #52]	@ (800389c <MX_USART1_UART_Init+0x90>)
 8003868:	f005 f819 	bl	800889e <HAL_UARTEx_SetTxFifoThreshold>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003872:	f7ff fc47 	bl	8003104 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003876:	2100      	movs	r1, #0
 8003878:	4808      	ldr	r0, [pc, #32]	@ (800389c <MX_USART1_UART_Init+0x90>)
 800387a:	f005 f84e 	bl	800891a <HAL_UARTEx_SetRxFifoThreshold>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003884:	f7ff fc3e 	bl	8003104 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003888:	4804      	ldr	r0, [pc, #16]	@ (800389c <MX_USART1_UART_Init+0x90>)
 800388a:	f004 ffcf 	bl	800882c <HAL_UARTEx_DisableFifoMode>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003894:	f7ff fc36 	bl	8003104 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003898:	bf00      	nop
 800389a:	bd80      	pop	{r7, pc}
 800389c:	2000849c 	.word	0x2000849c
 80038a0:	40013800 	.word	0x40013800

080038a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b0a0      	sub	sp, #128	@ 0x80
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	609a      	str	r2, [r3, #8]
 80038b8:	60da      	str	r2, [r3, #12]
 80038ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038bc:	f107 0318 	add.w	r3, r7, #24
 80038c0:	2254      	movs	r2, #84	@ 0x54
 80038c2:	2100      	movs	r1, #0
 80038c4:	4618      	mov	r0, r3
 80038c6:	f019 ffaf 	bl	801d828 <memset>
  if(uartHandle->Instance==LPUART1)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a9a      	ldr	r2, [pc, #616]	@ (8003b38 <HAL_UART_MspInit+0x294>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	f040 8095 	bne.w	8003a00 <HAL_UART_MspInit+0x15c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80038d6:	2320      	movs	r3, #32
 80038d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80038da:	2300      	movs	r3, #0
 80038dc:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038de:	f107 0318 	add.w	r3, r7, #24
 80038e2:	4618      	mov	r0, r3
 80038e4:	f002 fd28 	bl	8006338 <HAL_RCCEx_PeriphCLKConfig>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80038ee:	f7ff fc09 	bl	8003104 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80038f2:	4b92      	ldr	r3, [pc, #584]	@ (8003b3c <HAL_UART_MspInit+0x298>)
 80038f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f6:	4a91      	ldr	r2, [pc, #580]	@ (8003b3c <HAL_UART_MspInit+0x298>)
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80038fe:	4b8f      	ldr	r3, [pc, #572]	@ (8003b3c <HAL_UART_MspInit+0x298>)
 8003900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800390a:	4b8c      	ldr	r3, [pc, #560]	@ (8003b3c <HAL_UART_MspInit+0x298>)
 800390c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800390e:	4a8b      	ldr	r2, [pc, #556]	@ (8003b3c <HAL_UART_MspInit+0x298>)
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003916:	4b89      	ldr	r3, [pc, #548]	@ (8003b3c <HAL_UART_MspInit+0x298>)
 8003918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	613b      	str	r3, [r7, #16]
 8003920:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8003922:	230c      	movs	r3, #12
 8003924:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003926:	2302      	movs	r3, #2
 8003928:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392a:	2300      	movs	r3, #0
 800392c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800392e:	2300      	movs	r3, #0
 8003930:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8003932:	230c      	movs	r3, #12
 8003934:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003936:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800393a:	4619      	mov	r1, r3
 800393c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003940:	f000 fdac 	bl	800449c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8003944:	4b7e      	ldr	r3, [pc, #504]	@ (8003b40 <HAL_UART_MspInit+0x29c>)
 8003946:	4a7f      	ldr	r2, [pc, #508]	@ (8003b44 <HAL_UART_MspInit+0x2a0>)
 8003948:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800394a:	4b7d      	ldr	r3, [pc, #500]	@ (8003b40 <HAL_UART_MspInit+0x29c>)
 800394c:	2222      	movs	r2, #34	@ 0x22
 800394e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003950:	4b7b      	ldr	r3, [pc, #492]	@ (8003b40 <HAL_UART_MspInit+0x29c>)
 8003952:	2200      	movs	r2, #0
 8003954:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003956:	4b7a      	ldr	r3, [pc, #488]	@ (8003b40 <HAL_UART_MspInit+0x29c>)
 8003958:	2200      	movs	r2, #0
 800395a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800395c:	4b78      	ldr	r3, [pc, #480]	@ (8003b40 <HAL_UART_MspInit+0x29c>)
 800395e:	2280      	movs	r2, #128	@ 0x80
 8003960:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003962:	4b77      	ldr	r3, [pc, #476]	@ (8003b40 <HAL_UART_MspInit+0x29c>)
 8003964:	2200      	movs	r2, #0
 8003966:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003968:	4b75      	ldr	r3, [pc, #468]	@ (8003b40 <HAL_UART_MspInit+0x29c>)
 800396a:	2200      	movs	r2, #0
 800396c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 800396e:	4b74      	ldr	r3, [pc, #464]	@ (8003b40 <HAL_UART_MspInit+0x29c>)
 8003970:	2220      	movs	r2, #32
 8003972:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003974:	4b72      	ldr	r3, [pc, #456]	@ (8003b40 <HAL_UART_MspInit+0x29c>)
 8003976:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800397a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800397c:	4870      	ldr	r0, [pc, #448]	@ (8003b40 <HAL_UART_MspInit+0x29c>)
 800397e:	f000 fa4f 	bl	8003e20 <HAL_DMA_Init>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8003988:	f7ff fbbc 	bl	8003104 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a6c      	ldr	r2, [pc, #432]	@ (8003b40 <HAL_UART_MspInit+0x29c>)
 8003990:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003994:	4a6a      	ldr	r2, [pc, #424]	@ (8003b40 <HAL_UART_MspInit+0x29c>)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 800399a:	4b6b      	ldr	r3, [pc, #428]	@ (8003b48 <HAL_UART_MspInit+0x2a4>)
 800399c:	4a6b      	ldr	r2, [pc, #428]	@ (8003b4c <HAL_UART_MspInit+0x2a8>)
 800399e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80039a0:	4b69      	ldr	r3, [pc, #420]	@ (8003b48 <HAL_UART_MspInit+0x2a4>)
 80039a2:	2223      	movs	r2, #35	@ 0x23
 80039a4:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039a6:	4b68      	ldr	r3, [pc, #416]	@ (8003b48 <HAL_UART_MspInit+0x2a4>)
 80039a8:	2210      	movs	r2, #16
 80039aa:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039ac:	4b66      	ldr	r3, [pc, #408]	@ (8003b48 <HAL_UART_MspInit+0x2a4>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039b2:	4b65      	ldr	r3, [pc, #404]	@ (8003b48 <HAL_UART_MspInit+0x2a4>)
 80039b4:	2280      	movs	r2, #128	@ 0x80
 80039b6:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039b8:	4b63      	ldr	r3, [pc, #396]	@ (8003b48 <HAL_UART_MspInit+0x2a4>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039be:	4b62      	ldr	r3, [pc, #392]	@ (8003b48 <HAL_UART_MspInit+0x2a4>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80039c4:	4b60      	ldr	r3, [pc, #384]	@ (8003b48 <HAL_UART_MspInit+0x2a4>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80039ca:	4b5f      	ldr	r3, [pc, #380]	@ (8003b48 <HAL_UART_MspInit+0x2a4>)
 80039cc:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80039d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80039d2:	485d      	ldr	r0, [pc, #372]	@ (8003b48 <HAL_UART_MspInit+0x2a4>)
 80039d4:	f000 fa24 	bl	8003e20 <HAL_DMA_Init>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 80039de:	f7ff fb91 	bl	8003104 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a58      	ldr	r2, [pc, #352]	@ (8003b48 <HAL_UART_MspInit+0x2a4>)
 80039e6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80039e8:	4a57      	ldr	r2, [pc, #348]	@ (8003b48 <HAL_UART_MspInit+0x2a4>)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80039ee:	2200      	movs	r2, #0
 80039f0:	2105      	movs	r1, #5
 80039f2:	205b      	movs	r0, #91	@ 0x5b
 80039f4:	f000 f9e7 	bl	8003dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80039f8:	205b      	movs	r0, #91	@ 0x5b
 80039fa:	f000 f9fe 	bl	8003dfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80039fe:	e096      	b.n	8003b2e <HAL_UART_MspInit+0x28a>
  else if(uartHandle->Instance==USART1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a52      	ldr	r2, [pc, #328]	@ (8003b50 <HAL_UART_MspInit+0x2ac>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	f040 8091 	bne.w	8003b2e <HAL_UART_MspInit+0x28a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a14:	f107 0318 	add.w	r3, r7, #24
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f002 fc8d 	bl	8006338 <HAL_RCCEx_PeriphCLKConfig>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <HAL_UART_MspInit+0x184>
      Error_Handler();
 8003a24:	f7ff fb6e 	bl	8003104 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a28:	4b44      	ldr	r3, [pc, #272]	@ (8003b3c <HAL_UART_MspInit+0x298>)
 8003a2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a2c:	4a43      	ldr	r2, [pc, #268]	@ (8003b3c <HAL_UART_MspInit+0x298>)
 8003a2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a32:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a34:	4b41      	ldr	r3, [pc, #260]	@ (8003b3c <HAL_UART_MspInit+0x298>)
 8003a36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a40:	4b3e      	ldr	r3, [pc, #248]	@ (8003b3c <HAL_UART_MspInit+0x298>)
 8003a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a44:	4a3d      	ldr	r2, [pc, #244]	@ (8003b3c <HAL_UART_MspInit+0x298>)
 8003a46:	f043 0304 	orr.w	r3, r3, #4
 8003a4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a4c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b3c <HAL_UART_MspInit+0x298>)
 8003a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003a58:	2330      	movs	r3, #48	@ 0x30
 8003a5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a64:	2300      	movs	r3, #0
 8003a66:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a68:	2307      	movs	r3, #7
 8003a6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a6c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003a70:	4619      	mov	r1, r3
 8003a72:	4838      	ldr	r0, [pc, #224]	@ (8003b54 <HAL_UART_MspInit+0x2b0>)
 8003a74:	f000 fd12 	bl	800449c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8003a78:	4b37      	ldr	r3, [pc, #220]	@ (8003b58 <HAL_UART_MspInit+0x2b4>)
 8003a7a:	4a38      	ldr	r2, [pc, #224]	@ (8003b5c <HAL_UART_MspInit+0x2b8>)
 8003a7c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003a7e:	4b36      	ldr	r3, [pc, #216]	@ (8003b58 <HAL_UART_MspInit+0x2b4>)
 8003a80:	2218      	movs	r2, #24
 8003a82:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a84:	4b34      	ldr	r3, [pc, #208]	@ (8003b58 <HAL_UART_MspInit+0x2b4>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a8a:	4b33      	ldr	r3, [pc, #204]	@ (8003b58 <HAL_UART_MspInit+0x2b4>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a90:	4b31      	ldr	r3, [pc, #196]	@ (8003b58 <HAL_UART_MspInit+0x2b4>)
 8003a92:	2280      	movs	r2, #128	@ 0x80
 8003a94:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a96:	4b30      	ldr	r3, [pc, #192]	@ (8003b58 <HAL_UART_MspInit+0x2b4>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a9c:	4b2e      	ldr	r3, [pc, #184]	@ (8003b58 <HAL_UART_MspInit+0x2b4>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8003b58 <HAL_UART_MspInit+0x2b4>)
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003aa8:	4b2b      	ldr	r3, [pc, #172]	@ (8003b58 <HAL_UART_MspInit+0x2b4>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003aae:	482a      	ldr	r0, [pc, #168]	@ (8003b58 <HAL_UART_MspInit+0x2b4>)
 8003ab0:	f000 f9b6 	bl	8003e20 <HAL_DMA_Init>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <HAL_UART_MspInit+0x21a>
      Error_Handler();
 8003aba:	f7ff fb23 	bl	8003104 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a25      	ldr	r2, [pc, #148]	@ (8003b58 <HAL_UART_MspInit+0x2b4>)
 8003ac2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003ac6:	4a24      	ldr	r2, [pc, #144]	@ (8003b58 <HAL_UART_MspInit+0x2b4>)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003acc:	4b24      	ldr	r3, [pc, #144]	@ (8003b60 <HAL_UART_MspInit+0x2bc>)
 8003ace:	4a25      	ldr	r2, [pc, #148]	@ (8003b64 <HAL_UART_MspInit+0x2c0>)
 8003ad0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003ad2:	4b23      	ldr	r3, [pc, #140]	@ (8003b60 <HAL_UART_MspInit+0x2bc>)
 8003ad4:	2219      	movs	r2, #25
 8003ad6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ad8:	4b21      	ldr	r3, [pc, #132]	@ (8003b60 <HAL_UART_MspInit+0x2bc>)
 8003ada:	2210      	movs	r2, #16
 8003adc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ade:	4b20      	ldr	r3, [pc, #128]	@ (8003b60 <HAL_UART_MspInit+0x2bc>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8003b60 <HAL_UART_MspInit+0x2bc>)
 8003ae6:	2280      	movs	r2, #128	@ 0x80
 8003ae8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003aea:	4b1d      	ldr	r3, [pc, #116]	@ (8003b60 <HAL_UART_MspInit+0x2bc>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003af0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b60 <HAL_UART_MspInit+0x2bc>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003af6:	4b1a      	ldr	r3, [pc, #104]	@ (8003b60 <HAL_UART_MspInit+0x2bc>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003afc:	4b18      	ldr	r3, [pc, #96]	@ (8003b60 <HAL_UART_MspInit+0x2bc>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003b02:	4817      	ldr	r0, [pc, #92]	@ (8003b60 <HAL_UART_MspInit+0x2bc>)
 8003b04:	f000 f98c 	bl	8003e20 <HAL_DMA_Init>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_UART_MspInit+0x26e>
      Error_Handler();
 8003b0e:	f7ff faf9 	bl	8003104 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a12      	ldr	r2, [pc, #72]	@ (8003b60 <HAL_UART_MspInit+0x2bc>)
 8003b16:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003b18:	4a11      	ldr	r2, [pc, #68]	@ (8003b60 <HAL_UART_MspInit+0x2bc>)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003b1e:	2200      	movs	r2, #0
 8003b20:	2105      	movs	r1, #5
 8003b22:	2025      	movs	r0, #37	@ 0x25
 8003b24:	f000 f94f 	bl	8003dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003b28:	2025      	movs	r0, #37	@ 0x25
 8003b2a:	f000 f966 	bl	8003dfa <HAL_NVIC_EnableIRQ>
}
 8003b2e:	bf00      	nop
 8003b30:	3780      	adds	r7, #128	@ 0x80
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40008000 	.word	0x40008000
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	20008530 	.word	0x20008530
 8003b44:	40020008 	.word	0x40020008
 8003b48:	20008590 	.word	0x20008590
 8003b4c:	4002001c 	.word	0x4002001c
 8003b50:	40013800 	.word	0x40013800
 8003b54:	48000800 	.word	0x48000800
 8003b58:	200085f0 	.word	0x200085f0
 8003b5c:	40020030 	.word	0x40020030
 8003b60:	20008650 	.word	0x20008650
 8003b64:	40020044 	.word	0x40020044

08003b68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b68:	480d      	ldr	r0, [pc, #52]	@ (8003ba0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b6a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b6c:	f7ff fdf2 	bl	8003754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b70:	480c      	ldr	r0, [pc, #48]	@ (8003ba4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b72:	490d      	ldr	r1, [pc, #52]	@ (8003ba8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b74:	4a0d      	ldr	r2, [pc, #52]	@ (8003bac <LoopForever+0xe>)
  movs r3, #0
 8003b76:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003b78:	e002      	b.n	8003b80 <LoopCopyDataInit>

08003b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b7e:	3304      	adds	r3, #4

08003b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b84:	d3f9      	bcc.n	8003b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b86:	4a0a      	ldr	r2, [pc, #40]	@ (8003bb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b88:	4c0a      	ldr	r4, [pc, #40]	@ (8003bb4 <LoopForever+0x16>)
  movs r3, #0
 8003b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b8c:	e001      	b.n	8003b92 <LoopFillZerobss>

08003b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b90:	3204      	adds	r2, #4

08003b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b94:	d3fb      	bcc.n	8003b8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b96:	f019 fef3 	bl	801d980 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b9a:	f7fe fb5b 	bl	8002254 <main>

08003b9e <LoopForever>:

LoopForever:
    b LoopForever
 8003b9e:	e7fe      	b.n	8003b9e <LoopForever>
  ldr   r0, =_estack
 8003ba0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ba8:	200032e0 	.word	0x200032e0
  ldr r2, =_sidata
 8003bac:	08022088 	.word	0x08022088
  ldr r2, =_sbss
 8003bb0:	200032e0 	.word	0x200032e0
  ldr r4, =_ebss
 8003bb4:	2000f770 	.word	0x2000f770

08003bb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003bb8:	e7fe      	b.n	8003bb8 <ADC1_2_IRQHandler>

08003bba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bc4:	2003      	movs	r0, #3
 8003bc6:	f000 f8f3 	bl	8003db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003bca:	200f      	movs	r0, #15
 8003bcc:	f7ff fc2e 	bl	800342c <HAL_InitTick>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	71fb      	strb	r3, [r7, #7]
 8003bda:	e001      	b.n	8003be0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003bdc:	f7ff fbfc 	bl	80033d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003be0:	79fb      	ldrb	r3, [r7, #7]

}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bf0:	4b05      	ldr	r3, [pc, #20]	@ (8003c08 <HAL_IncTick+0x1c>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	4b05      	ldr	r3, [pc, #20]	@ (8003c0c <HAL_IncTick+0x20>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	4a03      	ldr	r2, [pc, #12]	@ (8003c08 <HAL_IncTick+0x1c>)
 8003bfc:	6013      	str	r3, [r2, #0]
}
 8003bfe:	bf00      	nop
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	200086b0 	.word	0x200086b0
 8003c0c:	2000000c 	.word	0x2000000c

08003c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  return uwTick;
 8003c14:	4b03      	ldr	r3, [pc, #12]	@ (8003c24 <HAL_GetTick+0x14>)
 8003c16:	681b      	ldr	r3, [r3, #0]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	200086b0 	.word	0x200086b0

08003c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c38:	4b0c      	ldr	r3, [pc, #48]	@ (8003c6c <__NVIC_SetPriorityGrouping+0x44>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c44:	4013      	ands	r3, r2
 8003c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c5a:	4a04      	ldr	r2, [pc, #16]	@ (8003c6c <__NVIC_SetPriorityGrouping+0x44>)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	60d3      	str	r3, [r2, #12]
}
 8003c60:	bf00      	nop
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	e000ed00 	.word	0xe000ed00

08003c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c74:	4b04      	ldr	r3, [pc, #16]	@ (8003c88 <__NVIC_GetPriorityGrouping+0x18>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	0a1b      	lsrs	r3, r3, #8
 8003c7a:	f003 0307 	and.w	r3, r3, #7
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	e000ed00 	.word	0xe000ed00

08003c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	db0b      	blt.n	8003cb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	f003 021f 	and.w	r2, r3, #31
 8003ca4:	4907      	ldr	r1, [pc, #28]	@ (8003cc4 <__NVIC_EnableIRQ+0x38>)
 8003ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003caa:	095b      	lsrs	r3, r3, #5
 8003cac:	2001      	movs	r0, #1
 8003cae:	fa00 f202 	lsl.w	r2, r0, r2
 8003cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	e000e100 	.word	0xe000e100

08003cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	6039      	str	r1, [r7, #0]
 8003cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	db0a      	blt.n	8003cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	490c      	ldr	r1, [pc, #48]	@ (8003d14 <__NVIC_SetPriority+0x4c>)
 8003ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce6:	0112      	lsls	r2, r2, #4
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	440b      	add	r3, r1
 8003cec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cf0:	e00a      	b.n	8003d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	4908      	ldr	r1, [pc, #32]	@ (8003d18 <__NVIC_SetPriority+0x50>)
 8003cf8:	79fb      	ldrb	r3, [r7, #7]
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	3b04      	subs	r3, #4
 8003d00:	0112      	lsls	r2, r2, #4
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	440b      	add	r3, r1
 8003d06:	761a      	strb	r2, [r3, #24]
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	e000e100 	.word	0xe000e100
 8003d18:	e000ed00 	.word	0xe000ed00

08003d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b089      	sub	sp, #36	@ 0x24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f1c3 0307 	rsb	r3, r3, #7
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	bf28      	it	cs
 8003d3a:	2304      	movcs	r3, #4
 8003d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	3304      	adds	r3, #4
 8003d42:	2b06      	cmp	r3, #6
 8003d44:	d902      	bls.n	8003d4c <NVIC_EncodePriority+0x30>
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	3b03      	subs	r3, #3
 8003d4a:	e000      	b.n	8003d4e <NVIC_EncodePriority+0x32>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	43da      	mvns	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	401a      	ands	r2, r3
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6e:	43d9      	mvns	r1, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d74:	4313      	orrs	r3, r2
         );
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3724      	adds	r7, #36	@ 0x24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
	...

08003d84 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003d88:	f3bf 8f4f 	dsb	sy
}
 8003d8c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003d8e:	4b06      	ldr	r3, [pc, #24]	@ (8003da8 <__NVIC_SystemReset+0x24>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003d96:	4904      	ldr	r1, [pc, #16]	@ (8003da8 <__NVIC_SystemReset+0x24>)
 8003d98:	4b04      	ldr	r3, [pc, #16]	@ (8003dac <__NVIC_SystemReset+0x28>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d9e:	f3bf 8f4f 	dsb	sy
}
 8003da2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003da4:	bf00      	nop
 8003da6:	e7fd      	b.n	8003da4 <__NVIC_SystemReset+0x20>
 8003da8:	e000ed00 	.word	0xe000ed00
 8003dac:	05fa0004 	.word	0x05fa0004

08003db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff ff35 	bl	8003c28 <__NVIC_SetPriorityGrouping>
}
 8003dbe:	bf00      	nop
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b086      	sub	sp, #24
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	4603      	mov	r3, r0
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	607a      	str	r2, [r7, #4]
 8003dd2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003dd4:	f7ff ff4c 	bl	8003c70 <__NVIC_GetPriorityGrouping>
 8003dd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	68b9      	ldr	r1, [r7, #8]
 8003dde:	6978      	ldr	r0, [r7, #20]
 8003de0:	f7ff ff9c 	bl	8003d1c <NVIC_EncodePriority>
 8003de4:	4602      	mov	r2, r0
 8003de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dea:	4611      	mov	r1, r2
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff ff6b 	bl	8003cc8 <__NVIC_SetPriority>
}
 8003df2:	bf00      	nop
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b082      	sub	sp, #8
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	4603      	mov	r3, r0
 8003e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff ff3f 	bl	8003c8c <__NVIC_EnableIRQ>
}
 8003e0e:	bf00      	nop
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003e1a:	f7ff ffb3 	bl	8003d84 <__NVIC_SystemReset>
	...

08003e20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e08d      	b.n	8003f4e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	461a      	mov	r2, r3
 8003e38:	4b47      	ldr	r3, [pc, #284]	@ (8003f58 <HAL_DMA_Init+0x138>)
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d80f      	bhi.n	8003e5e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	461a      	mov	r2, r3
 8003e44:	4b45      	ldr	r3, [pc, #276]	@ (8003f5c <HAL_DMA_Init+0x13c>)
 8003e46:	4413      	add	r3, r2
 8003e48:	4a45      	ldr	r2, [pc, #276]	@ (8003f60 <HAL_DMA_Init+0x140>)
 8003e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4e:	091b      	lsrs	r3, r3, #4
 8003e50:	009a      	lsls	r2, r3, #2
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a42      	ldr	r2, [pc, #264]	@ (8003f64 <HAL_DMA_Init+0x144>)
 8003e5a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e5c:	e00e      	b.n	8003e7c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	461a      	mov	r2, r3
 8003e64:	4b40      	ldr	r3, [pc, #256]	@ (8003f68 <HAL_DMA_Init+0x148>)
 8003e66:	4413      	add	r3, r2
 8003e68:	4a3d      	ldr	r2, [pc, #244]	@ (8003f60 <HAL_DMA_Init+0x140>)
 8003e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6e:	091b      	lsrs	r3, r3, #4
 8003e70:	009a      	lsls	r2, r3, #2
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a3c      	ldr	r2, [pc, #240]	@ (8003f6c <HAL_DMA_Init+0x14c>)
 8003e7a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003e92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ea0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 fa82 	bl	80043d8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003edc:	d102      	bne.n	8003ee4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003ef8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d010      	beq.n	8003f24 <HAL_DMA_Init+0x104>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d80c      	bhi.n	8003f24 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 faa2 	bl	8004454 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f20:	605a      	str	r2, [r3, #4]
 8003f22:	e008      	b.n	8003f36 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	40020407 	.word	0x40020407
 8003f5c:	bffdfff8 	.word	0xbffdfff8
 8003f60:	cccccccd 	.word	0xcccccccd
 8003f64:	40020000 	.word	0x40020000
 8003f68:	bffdfbf8 	.word	0xbffdfbf8
 8003f6c:	40020400 	.word	0x40020400

08003f70 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
 8003f7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d101      	bne.n	8003f90 <HAL_DMA_Start_IT+0x20>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e066      	b.n	800405e <HAL_DMA_Start_IT+0xee>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d155      	bne.n	8004050 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0201 	bic.w	r2, r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	68b9      	ldr	r1, [r7, #8]
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 f9c7 	bl	800435c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d008      	beq.n	8003fe8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f042 020e 	orr.w	r2, r2, #14
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	e00f      	b.n	8004008 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 0204 	bic.w	r2, r2, #4
 8003ff6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 020a 	orr.w	r2, r2, #10
 8004006:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d007      	beq.n	8004026 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004020:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004024:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800402a:	2b00      	cmp	r3, #0
 800402c:	d007      	beq.n	800403e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004038:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800403c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f042 0201 	orr.w	r2, r2, #1
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	e005      	b.n	800405c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004058:	2302      	movs	r3, #2
 800405a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800405c:	7dfb      	ldrb	r3, [r7, #23]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004066:	b480      	push	{r7}
 8004068:	b085      	sub	sp, #20
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d005      	beq.n	800408a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2204      	movs	r2, #4
 8004082:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	73fb      	strb	r3, [r7, #15]
 8004088:	e037      	b.n	80040fa <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 020e 	bic.w	r2, r2, #14
 8004098:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040a8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0201 	bic.w	r2, r2, #1
 80040b8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040be:	f003 021f 	and.w	r2, r3, #31
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c6:	2101      	movs	r1, #1
 80040c8:	fa01 f202 	lsl.w	r2, r1, r2
 80040cc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80040d6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00c      	beq.n	80040fa <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040ee:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80040f8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800410a:	7bfb      	ldrb	r3, [r7, #15]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004120:	2300      	movs	r3, #0
 8004122:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d00d      	beq.n	800414c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2204      	movs	r2, #4
 8004134:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	73fb      	strb	r3, [r7, #15]
 800414a:	e047      	b.n	80041dc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 020e 	bic.w	r2, r2, #14
 800415a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0201 	bic.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004176:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800417a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004180:	f003 021f 	and.w	r2, r3, #31
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004188:	2101      	movs	r1, #1
 800418a:	fa01 f202 	lsl.w	r2, r1, r2
 800418e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004198:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00c      	beq.n	80041bc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041b0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80041ba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	4798      	blx	r3
    }
  }
  return status;
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b084      	sub	sp, #16
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004202:	f003 031f 	and.w	r3, r3, #31
 8004206:	2204      	movs	r2, #4
 8004208:	409a      	lsls	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4013      	ands	r3, r2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d026      	beq.n	8004260 <HAL_DMA_IRQHandler+0x7a>
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b00      	cmp	r3, #0
 800421a:	d021      	beq.n	8004260 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0320 	and.w	r3, r3, #32
 8004226:	2b00      	cmp	r3, #0
 8004228:	d107      	bne.n	800423a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0204 	bic.w	r2, r2, #4
 8004238:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423e:	f003 021f 	and.w	r2, r3, #31
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004246:	2104      	movs	r1, #4
 8004248:	fa01 f202 	lsl.w	r2, r1, r2
 800424c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004252:	2b00      	cmp	r3, #0
 8004254:	d071      	beq.n	800433a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800425e:	e06c      	b.n	800433a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004264:	f003 031f 	and.w	r3, r3, #31
 8004268:	2202      	movs	r2, #2
 800426a:	409a      	lsls	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4013      	ands	r3, r2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d02e      	beq.n	80042d2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d029      	beq.n	80042d2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0320 	and.w	r3, r3, #32
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10b      	bne.n	80042a4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 020a 	bic.w	r2, r2, #10
 800429a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a8:	f003 021f 	and.w	r2, r3, #31
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b0:	2102      	movs	r1, #2
 80042b2:	fa01 f202 	lsl.w	r2, r1, r2
 80042b6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d038      	beq.n	800433a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80042d0:	e033      	b.n	800433a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d6:	f003 031f 	and.w	r3, r3, #31
 80042da:	2208      	movs	r2, #8
 80042dc:	409a      	lsls	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4013      	ands	r3, r2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d02a      	beq.n	800433c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d025      	beq.n	800433c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 020e 	bic.w	r2, r2, #14
 80042fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004304:	f003 021f 	and.w	r2, r3, #31
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430c:	2101      	movs	r1, #1
 800430e:	fa01 f202 	lsl.w	r2, r1, r2
 8004312:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800432e:	2b00      	cmp	r3, #0
 8004330:	d004      	beq.n	800433c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800433a:	bf00      	nop
 800433c:	bf00      	nop
}
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8004350:	4618      	mov	r0, r3
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
 8004368:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004372:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004378:	2b00      	cmp	r3, #0
 800437a:	d004      	beq.n	8004386 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004384:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438a:	f003 021f 	and.w	r2, r3, #31
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004392:	2101      	movs	r1, #1
 8004394:	fa01 f202 	lsl.w	r2, r1, r2
 8004398:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	2b10      	cmp	r3, #16
 80043a8:	d108      	bne.n	80043bc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80043ba:	e007      	b.n	80043cc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	60da      	str	r2, [r3, #12]
}
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043d8:	b480      	push	{r7}
 80043da:	b087      	sub	sp, #28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	461a      	mov	r2, r3
 80043e6:	4b16      	ldr	r3, [pc, #88]	@ (8004440 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d802      	bhi.n	80043f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80043ec:	4b15      	ldr	r3, [pc, #84]	@ (8004444 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	e001      	b.n	80043f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80043f2:	4b15      	ldr	r3, [pc, #84]	@ (8004448 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80043f4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	3b08      	subs	r3, #8
 8004402:	4a12      	ldr	r2, [pc, #72]	@ (800444c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004404:	fba2 2303 	umull	r2, r3, r2, r3
 8004408:	091b      	lsrs	r3, r3, #4
 800440a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004410:	089b      	lsrs	r3, r3, #2
 8004412:	009a      	lsls	r2, r3, #2
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	4413      	add	r3, r2
 8004418:	461a      	mov	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a0b      	ldr	r2, [pc, #44]	@ (8004450 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004422:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f003 031f 	and.w	r3, r3, #31
 800442a:	2201      	movs	r2, #1
 800442c:	409a      	lsls	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004432:	bf00      	nop
 8004434:	371c      	adds	r7, #28
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	40020407 	.word	0x40020407
 8004444:	40020800 	.word	0x40020800
 8004448:	40020820 	.word	0x40020820
 800444c:	cccccccd 	.word	0xcccccccd
 8004450:	40020880 	.word	0x40020880

08004454 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	b2db      	uxtb	r3, r3
 8004462:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	4b0b      	ldr	r3, [pc, #44]	@ (8004494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004468:	4413      	add	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	461a      	mov	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a08      	ldr	r2, [pc, #32]	@ (8004498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004476:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	3b01      	subs	r3, #1
 800447c:	f003 031f 	and.w	r3, r3, #31
 8004480:	2201      	movs	r2, #1
 8004482:	409a      	lsls	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004488:	bf00      	nop
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	1000823f 	.word	0x1000823f
 8004498:	40020940 	.word	0x40020940

0800449c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80044aa:	e15a      	b.n	8004762 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	2101      	movs	r1, #1
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	fa01 f303 	lsl.w	r3, r1, r3
 80044b8:	4013      	ands	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 814c 	beq.w	800475c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f003 0303 	and.w	r3, r3, #3
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d005      	beq.n	80044dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d130      	bne.n	800453e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	2203      	movs	r2, #3
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	43db      	mvns	r3, r3
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4013      	ands	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4313      	orrs	r3, r2
 8004504:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004512:	2201      	movs	r2, #1
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	43db      	mvns	r3, r3
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	4013      	ands	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	091b      	lsrs	r3, r3, #4
 8004528:	f003 0201 	and.w	r2, r3, #1
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4313      	orrs	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	2b03      	cmp	r3, #3
 8004548:	d017      	beq.n	800457a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	2203      	movs	r2, #3
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	43db      	mvns	r3, r3
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4013      	ands	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d123      	bne.n	80045ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	08da      	lsrs	r2, r3, #3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	3208      	adds	r2, #8
 800458e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004592:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	220f      	movs	r2, #15
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	43db      	mvns	r3, r3
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4013      	ands	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	691a      	ldr	r2, [r3, #16]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	08da      	lsrs	r2, r3, #3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3208      	adds	r2, #8
 80045c8:	6939      	ldr	r1, [r7, #16]
 80045ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	2203      	movs	r2, #3
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	43db      	mvns	r3, r3
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4013      	ands	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f003 0203 	and.w	r2, r3, #3
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 80a6 	beq.w	800475c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004610:	4b5b      	ldr	r3, [pc, #364]	@ (8004780 <HAL_GPIO_Init+0x2e4>)
 8004612:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004614:	4a5a      	ldr	r2, [pc, #360]	@ (8004780 <HAL_GPIO_Init+0x2e4>)
 8004616:	f043 0301 	orr.w	r3, r3, #1
 800461a:	6613      	str	r3, [r2, #96]	@ 0x60
 800461c:	4b58      	ldr	r3, [pc, #352]	@ (8004780 <HAL_GPIO_Init+0x2e4>)
 800461e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	60bb      	str	r3, [r7, #8]
 8004626:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004628:	4a56      	ldr	r2, [pc, #344]	@ (8004784 <HAL_GPIO_Init+0x2e8>)
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	089b      	lsrs	r3, r3, #2
 800462e:	3302      	adds	r3, #2
 8004630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004634:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f003 0303 	and.w	r3, r3, #3
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	220f      	movs	r2, #15
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	43db      	mvns	r3, r3
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	4013      	ands	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004652:	d01f      	beq.n	8004694 <HAL_GPIO_Init+0x1f8>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a4c      	ldr	r2, [pc, #304]	@ (8004788 <HAL_GPIO_Init+0x2ec>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d019      	beq.n	8004690 <HAL_GPIO_Init+0x1f4>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a4b      	ldr	r2, [pc, #300]	@ (800478c <HAL_GPIO_Init+0x2f0>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d013      	beq.n	800468c <HAL_GPIO_Init+0x1f0>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a4a      	ldr	r2, [pc, #296]	@ (8004790 <HAL_GPIO_Init+0x2f4>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00d      	beq.n	8004688 <HAL_GPIO_Init+0x1ec>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a49      	ldr	r2, [pc, #292]	@ (8004794 <HAL_GPIO_Init+0x2f8>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d007      	beq.n	8004684 <HAL_GPIO_Init+0x1e8>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a48      	ldr	r2, [pc, #288]	@ (8004798 <HAL_GPIO_Init+0x2fc>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d101      	bne.n	8004680 <HAL_GPIO_Init+0x1e4>
 800467c:	2305      	movs	r3, #5
 800467e:	e00a      	b.n	8004696 <HAL_GPIO_Init+0x1fa>
 8004680:	2306      	movs	r3, #6
 8004682:	e008      	b.n	8004696 <HAL_GPIO_Init+0x1fa>
 8004684:	2304      	movs	r3, #4
 8004686:	e006      	b.n	8004696 <HAL_GPIO_Init+0x1fa>
 8004688:	2303      	movs	r3, #3
 800468a:	e004      	b.n	8004696 <HAL_GPIO_Init+0x1fa>
 800468c:	2302      	movs	r3, #2
 800468e:	e002      	b.n	8004696 <HAL_GPIO_Init+0x1fa>
 8004690:	2301      	movs	r3, #1
 8004692:	e000      	b.n	8004696 <HAL_GPIO_Init+0x1fa>
 8004694:	2300      	movs	r3, #0
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	f002 0203 	and.w	r2, r2, #3
 800469c:	0092      	lsls	r2, r2, #2
 800469e:	4093      	lsls	r3, r2
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046a6:	4937      	ldr	r1, [pc, #220]	@ (8004784 <HAL_GPIO_Init+0x2e8>)
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	089b      	lsrs	r3, r3, #2
 80046ac:	3302      	adds	r3, #2
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046b4:	4b39      	ldr	r3, [pc, #228]	@ (800479c <HAL_GPIO_Init+0x300>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	43db      	mvns	r3, r3
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4013      	ands	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80046d8:	4a30      	ldr	r2, [pc, #192]	@ (800479c <HAL_GPIO_Init+0x300>)
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80046de:	4b2f      	ldr	r3, [pc, #188]	@ (800479c <HAL_GPIO_Init+0x300>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	43db      	mvns	r3, r3
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4013      	ands	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004702:	4a26      	ldr	r2, [pc, #152]	@ (800479c <HAL_GPIO_Init+0x300>)
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004708:	4b24      	ldr	r3, [pc, #144]	@ (800479c <HAL_GPIO_Init+0x300>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	43db      	mvns	r3, r3
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4013      	ands	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4313      	orrs	r3, r2
 800472a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800472c:	4a1b      	ldr	r2, [pc, #108]	@ (800479c <HAL_GPIO_Init+0x300>)
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004732:	4b1a      	ldr	r3, [pc, #104]	@ (800479c <HAL_GPIO_Init+0x300>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	43db      	mvns	r3, r3
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4013      	ands	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4313      	orrs	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004756:	4a11      	ldr	r2, [pc, #68]	@ (800479c <HAL_GPIO_Init+0x300>)
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	3301      	adds	r3, #1
 8004760:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	fa22 f303 	lsr.w	r3, r2, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	f47f ae9d 	bne.w	80044ac <HAL_GPIO_Init+0x10>
  }
}
 8004772:	bf00      	nop
 8004774:	bf00      	nop
 8004776:	371c      	adds	r7, #28
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	40021000 	.word	0x40021000
 8004784:	40010000 	.word	0x40010000
 8004788:	48000400 	.word	0x48000400
 800478c:	48000800 	.word	0x48000800
 8004790:	48000c00 	.word	0x48000c00
 8004794:	48001000 	.word	0x48001000
 8004798:	48001400 	.word	0x48001400
 800479c:	40010400 	.word	0x40010400

080047a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	887b      	ldrh	r3, [r7, #2]
 80047b2:	4013      	ands	r3, r2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047b8:	2301      	movs	r3, #1
 80047ba:	73fb      	strb	r3, [r7, #15]
 80047bc:	e001      	b.n	80047c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047be:	2300      	movs	r3, #0
 80047c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	807b      	strh	r3, [r7, #2]
 80047dc:	4613      	mov	r3, r2
 80047de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047e0:	787b      	ldrb	r3, [r7, #1]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047e6:	887a      	ldrh	r2, [r7, #2]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047ec:	e002      	b.n	80047f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047ee:	887a      	ldrh	r2, [r7, #2]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004812:	887a      	ldrh	r2, [r7, #2]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4013      	ands	r3, r2
 8004818:	041a      	lsls	r2, r3, #16
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	43d9      	mvns	r1, r3
 800481e:	887b      	ldrh	r3, [r7, #2]
 8004820:	400b      	ands	r3, r1
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	619a      	str	r2, [r3, #24]
}
 8004828:	bf00      	nop
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e08d      	b.n	8004962 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d106      	bne.n	8004860 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7fc ffc2 	bl	80017e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2224      	movs	r2, #36	@ 0x24
 8004864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0201 	bic.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004884:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004894:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d107      	bne.n	80048ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689a      	ldr	r2, [r3, #8]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048aa:	609a      	str	r2, [r3, #8]
 80048ac:	e006      	b.n	80048bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80048ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d108      	bne.n	80048d6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048d2:	605a      	str	r2, [r3, #4]
 80048d4:	e007      	b.n	80048e6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6812      	ldr	r2, [r2, #0]
 80048f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80048f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004908:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691a      	ldr	r2, [r3, #16]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	69d9      	ldr	r1, [r3, #28]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a1a      	ldr	r2, [r3, #32]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0201 	orr.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2220      	movs	r2, #32
 800494e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
	...

0800496c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b088      	sub	sp, #32
 8004970:	af02      	add	r7, sp, #8
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	4608      	mov	r0, r1
 8004976:	4611      	mov	r1, r2
 8004978:	461a      	mov	r2, r3
 800497a:	4603      	mov	r3, r0
 800497c:	817b      	strh	r3, [r7, #10]
 800497e:	460b      	mov	r3, r1
 8004980:	813b      	strh	r3, [r7, #8]
 8004982:	4613      	mov	r3, r2
 8004984:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b20      	cmp	r3, #32
 8004990:	f040 80f9 	bne.w	8004b86 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <HAL_I2C_Mem_Write+0x34>
 800499a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800499c:	2b00      	cmp	r3, #0
 800499e:	d105      	bne.n	80049ac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049a6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e0ed      	b.n	8004b88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d101      	bne.n	80049ba <HAL_I2C_Mem_Write+0x4e>
 80049b6:	2302      	movs	r3, #2
 80049b8:	e0e6      	b.n	8004b88 <HAL_I2C_Mem_Write+0x21c>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049c2:	f7ff f925 	bl	8003c10 <HAL_GetTick>
 80049c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	2319      	movs	r3, #25
 80049ce:	2201      	movs	r2, #1
 80049d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 fbaf 	bl	8005138 <I2C_WaitOnFlagUntilTimeout>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e0d1      	b.n	8004b88 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2221      	movs	r2, #33	@ 0x21
 80049e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2240      	movs	r2, #64	@ 0x40
 80049f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a3a      	ldr	r2, [r7, #32]
 80049fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004a04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a0c:	88f8      	ldrh	r0, [r7, #6]
 8004a0e:	893a      	ldrh	r2, [r7, #8]
 8004a10:	8979      	ldrh	r1, [r7, #10]
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	9301      	str	r3, [sp, #4]
 8004a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 fabf 	bl	8004fa0 <I2C_RequestMemoryWrite>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d005      	beq.n	8004a34 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0a9      	b.n	8004b88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	2bff      	cmp	r3, #255	@ 0xff
 8004a3c:	d90e      	bls.n	8004a5c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	22ff      	movs	r2, #255	@ 0xff
 8004a42:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	8979      	ldrh	r1, [r7, #10]
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 fd33 	bl	80054c0 <I2C_TransferConfig>
 8004a5a:	e00f      	b.n	8004a7c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	8979      	ldrh	r1, [r7, #10]
 8004a6e:	2300      	movs	r3, #0
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 fd22 	bl	80054c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f000 fbb2 	bl	80051ea <I2C_WaitOnTXISFlagUntilTimeout>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e07b      	b.n	8004b88 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a94:	781a      	ldrb	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	3b01      	subs	r3, #1
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d034      	beq.n	8004b34 <HAL_I2C_Mem_Write+0x1c8>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d130      	bne.n	8004b34 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad8:	2200      	movs	r2, #0
 8004ada:	2180      	movs	r1, #128	@ 0x80
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 fb2b 	bl	8005138 <I2C_WaitOnFlagUntilTimeout>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e04d      	b.n	8004b88 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	2bff      	cmp	r3, #255	@ 0xff
 8004af4:	d90e      	bls.n	8004b14 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	22ff      	movs	r2, #255	@ 0xff
 8004afa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	8979      	ldrh	r1, [r7, #10]
 8004b04:	2300      	movs	r3, #0
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 fcd7 	bl	80054c0 <I2C_TransferConfig>
 8004b12:	e00f      	b.n	8004b34 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	8979      	ldrh	r1, [r7, #10]
 8004b26:	2300      	movs	r3, #0
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 fcc6 	bl	80054c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d19e      	bne.n	8004a7c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 fb98 	bl	8005278 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e01a      	b.n	8004b88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2220      	movs	r2, #32
 8004b58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6859      	ldr	r1, [r3, #4]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	4b0a      	ldr	r3, [pc, #40]	@ (8004b90 <HAL_I2C_Mem_Write+0x224>)
 8004b66:	400b      	ands	r3, r1
 8004b68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	e000      	b.n	8004b88 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004b86:	2302      	movs	r3, #2
  }
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	fe00e800 	.word	0xfe00e800

08004b94 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af02      	add	r7, sp, #8
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	4608      	mov	r0, r1
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	817b      	strh	r3, [r7, #10]
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	813b      	strh	r3, [r7, #8]
 8004baa:	4613      	mov	r3, r2
 8004bac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	f040 80fd 	bne.w	8004db6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d002      	beq.n	8004bc8 <HAL_I2C_Mem_Read+0x34>
 8004bc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d105      	bne.n	8004bd4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bce:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e0f1      	b.n	8004db8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d101      	bne.n	8004be2 <HAL_I2C_Mem_Read+0x4e>
 8004bde:	2302      	movs	r3, #2
 8004be0:	e0ea      	b.n	8004db8 <HAL_I2C_Mem_Read+0x224>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004bea:	f7ff f811 	bl	8003c10 <HAL_GetTick>
 8004bee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	2319      	movs	r3, #25
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 fa9b 	bl	8005138 <I2C_WaitOnFlagUntilTimeout>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e0d5      	b.n	8004db8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2222      	movs	r2, #34	@ 0x22
 8004c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2240      	movs	r2, #64	@ 0x40
 8004c18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6a3a      	ldr	r2, [r7, #32]
 8004c26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c34:	88f8      	ldrh	r0, [r7, #6]
 8004c36:	893a      	ldrh	r2, [r7, #8]
 8004c38:	8979      	ldrh	r1, [r7, #10]
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	9301      	str	r3, [sp, #4]
 8004c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	4603      	mov	r3, r0
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 f9ff 	bl	8005048 <I2C_RequestMemoryRead>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d005      	beq.n	8004c5c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e0ad      	b.n	8004db8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	2bff      	cmp	r3, #255	@ 0xff
 8004c64:	d90e      	bls.n	8004c84 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	22ff      	movs	r2, #255	@ 0xff
 8004c6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	8979      	ldrh	r1, [r7, #10]
 8004c74:	4b52      	ldr	r3, [pc, #328]	@ (8004dc0 <HAL_I2C_Mem_Read+0x22c>)
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 fc1f 	bl	80054c0 <I2C_TransferConfig>
 8004c82:	e00f      	b.n	8004ca4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	8979      	ldrh	r1, [r7, #10]
 8004c96:	4b4a      	ldr	r3, [pc, #296]	@ (8004dc0 <HAL_I2C_Mem_Read+0x22c>)
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 fc0e 	bl	80054c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004caa:	2200      	movs	r2, #0
 8004cac:	2104      	movs	r1, #4
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 fa42 	bl	8005138 <I2C_WaitOnFlagUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e07c      	b.n	8004db8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d034      	beq.n	8004d64 <HAL_I2C_Mem_Read+0x1d0>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d130      	bne.n	8004d64 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d08:	2200      	movs	r2, #0
 8004d0a:	2180      	movs	r1, #128	@ 0x80
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f000 fa13 	bl	8005138 <I2C_WaitOnFlagUntilTimeout>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e04d      	b.n	8004db8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	2bff      	cmp	r3, #255	@ 0xff
 8004d24:	d90e      	bls.n	8004d44 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	22ff      	movs	r2, #255	@ 0xff
 8004d2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	8979      	ldrh	r1, [r7, #10]
 8004d34:	2300      	movs	r3, #0
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 fbbf 	bl	80054c0 <I2C_TransferConfig>
 8004d42:	e00f      	b.n	8004d64 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	8979      	ldrh	r1, [r7, #10]
 8004d56:	2300      	movs	r3, #0
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 fbae 	bl	80054c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d19a      	bne.n	8004ca4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 fa80 	bl	8005278 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e01a      	b.n	8004db8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2220      	movs	r2, #32
 8004d88:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6859      	ldr	r1, [r3, #4]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc4 <HAL_I2C_Mem_Read+0x230>)
 8004d96:	400b      	ands	r3, r1
 8004d98:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	e000      	b.n	8004db8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004db6:	2302      	movs	r3, #2
  }
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	80002400 	.word	0x80002400
 8004dc4:	fe00e800 	.word	0xfe00e800

08004dc8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b08a      	sub	sp, #40	@ 0x28
 8004dcc:	af02      	add	r7, sp, #8
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	607a      	str	r2, [r7, #4]
 8004dd2:	603b      	str	r3, [r7, #0]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b20      	cmp	r3, #32
 8004de6:	f040 80d6 	bne.w	8004f96 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004df4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004df8:	d101      	bne.n	8004dfe <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	e0cc      	b.n	8004f98 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d101      	bne.n	8004e0c <HAL_I2C_IsDeviceReady+0x44>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	e0c5      	b.n	8004f98 <HAL_I2C_IsDeviceReady+0x1d0>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2224      	movs	r2, #36	@ 0x24
 8004e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d107      	bne.n	8004e3a <HAL_I2C_IsDeviceReady+0x72>
 8004e2a:	897b      	ldrh	r3, [r7, #10]
 8004e2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004e34:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004e38:	e006      	b.n	8004e48 <HAL_I2C_IsDeviceReady+0x80>
 8004e3a:	897b      	ldrh	r3, [r7, #10]
 8004e3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004e44:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	6812      	ldr	r2, [r2, #0]
 8004e4c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004e4e:	f7fe fedf 	bl	8003c10 <HAL_GetTick>
 8004e52:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	f003 0320 	and.w	r3, r3, #32
 8004e5e:	2b20      	cmp	r3, #32
 8004e60:	bf0c      	ite	eq
 8004e62:	2301      	moveq	r3, #1
 8004e64:	2300      	movne	r3, #0
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	f003 0310 	and.w	r3, r3, #16
 8004e74:	2b10      	cmp	r3, #16
 8004e76:	bf0c      	ite	eq
 8004e78:	2301      	moveq	r3, #1
 8004e7a:	2300      	movne	r3, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004e80:	e034      	b.n	8004eec <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e88:	d01a      	beq.n	8004ec0 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e8a:	f7fe fec1 	bl	8003c10 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d302      	bcc.n	8004ea0 <HAL_I2C_IsDeviceReady+0xd8>
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10f      	bne.n	8004ec0 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eac:	f043 0220 	orr.w	r2, r3, #32
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e06b      	b.n	8004f98 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	f003 0320 	and.w	r3, r3, #32
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	bf0c      	ite	eq
 8004ece:	2301      	moveq	r3, #1
 8004ed0:	2300      	movne	r3, #0
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	2b10      	cmp	r3, #16
 8004ee2:	bf0c      	ite	eq
 8004ee4:	2301      	moveq	r3, #1
 8004ee6:	2300      	movne	r3, #0
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004eec:	7ffb      	ldrb	r3, [r7, #31]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d102      	bne.n	8004ef8 <HAL_I2C_IsDeviceReady+0x130>
 8004ef2:	7fbb      	ldrb	r3, [r7, #30]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0c4      	beq.n	8004e82 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	f003 0310 	and.w	r3, r3, #16
 8004f02:	2b10      	cmp	r3, #16
 8004f04:	d01a      	beq.n	8004f3c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2120      	movs	r1, #32
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 f911 	bl	8005138 <I2C_WaitOnFlagUntilTimeout>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e03b      	b.n	8004f98 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2220      	movs	r2, #32
 8004f26:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	e02d      	b.n	8004f98 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	2200      	movs	r2, #0
 8004f44:	2120      	movs	r1, #32
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f000 f8f6 	bl	8005138 <I2C_WaitOnFlagUntilTimeout>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e020      	b.n	8004f98 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2210      	movs	r2, #16
 8004f5c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2220      	movs	r2, #32
 8004f64:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	f63f af56 	bhi.w	8004e22 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f82:	f043 0220 	orr.w	r2, r3, #32
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8004f96:	2302      	movs	r3, #2
  }
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3720      	adds	r7, #32
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af02      	add	r7, sp, #8
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	4608      	mov	r0, r1
 8004faa:	4611      	mov	r1, r2
 8004fac:	461a      	mov	r2, r3
 8004fae:	4603      	mov	r3, r0
 8004fb0:	817b      	strh	r3, [r7, #10]
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	813b      	strh	r3, [r7, #8]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004fba:	88fb      	ldrh	r3, [r7, #6]
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	8979      	ldrh	r1, [r7, #10]
 8004fc0:	4b20      	ldr	r3, [pc, #128]	@ (8005044 <I2C_RequestMemoryWrite+0xa4>)
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 fa79 	bl	80054c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fce:	69fa      	ldr	r2, [r7, #28]
 8004fd0:	69b9      	ldr	r1, [r7, #24]
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 f909 	bl	80051ea <I2C_WaitOnTXISFlagUntilTimeout>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e02c      	b.n	800503c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fe2:	88fb      	ldrh	r3, [r7, #6]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d105      	bne.n	8004ff4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fe8:	893b      	ldrh	r3, [r7, #8]
 8004fea:	b2da      	uxtb	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ff2:	e015      	b.n	8005020 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ff4:	893b      	ldrh	r3, [r7, #8]
 8004ff6:	0a1b      	lsrs	r3, r3, #8
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005002:	69fa      	ldr	r2, [r7, #28]
 8005004:	69b9      	ldr	r1, [r7, #24]
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 f8ef 	bl	80051ea <I2C_WaitOnTXISFlagUntilTimeout>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e012      	b.n	800503c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005016:	893b      	ldrh	r3, [r7, #8]
 8005018:	b2da      	uxtb	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	2200      	movs	r2, #0
 8005028:	2180      	movs	r1, #128	@ 0x80
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 f884 	bl	8005138 <I2C_WaitOnFlagUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	80002000 	.word	0x80002000

08005048 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af02      	add	r7, sp, #8
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	4608      	mov	r0, r1
 8005052:	4611      	mov	r1, r2
 8005054:	461a      	mov	r2, r3
 8005056:	4603      	mov	r3, r0
 8005058:	817b      	strh	r3, [r7, #10]
 800505a:	460b      	mov	r3, r1
 800505c:	813b      	strh	r3, [r7, #8]
 800505e:	4613      	mov	r3, r2
 8005060:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005062:	88fb      	ldrh	r3, [r7, #6]
 8005064:	b2da      	uxtb	r2, r3
 8005066:	8979      	ldrh	r1, [r7, #10]
 8005068:	4b20      	ldr	r3, [pc, #128]	@ (80050ec <I2C_RequestMemoryRead+0xa4>)
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	2300      	movs	r3, #0
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f000 fa26 	bl	80054c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005074:	69fa      	ldr	r2, [r7, #28]
 8005076:	69b9      	ldr	r1, [r7, #24]
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 f8b6 	bl	80051ea <I2C_WaitOnTXISFlagUntilTimeout>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e02c      	b.n	80050e2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005088:	88fb      	ldrh	r3, [r7, #6]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d105      	bne.n	800509a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800508e:	893b      	ldrh	r3, [r7, #8]
 8005090:	b2da      	uxtb	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	629a      	str	r2, [r3, #40]	@ 0x28
 8005098:	e015      	b.n	80050c6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800509a:	893b      	ldrh	r3, [r7, #8]
 800509c:	0a1b      	lsrs	r3, r3, #8
 800509e:	b29b      	uxth	r3, r3
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050a8:	69fa      	ldr	r2, [r7, #28]
 80050aa:	69b9      	ldr	r1, [r7, #24]
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 f89c 	bl	80051ea <I2C_WaitOnTXISFlagUntilTimeout>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e012      	b.n	80050e2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050bc:	893b      	ldrh	r3, [r7, #8]
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	2200      	movs	r2, #0
 80050ce:	2140      	movs	r1, #64	@ 0x40
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 f831 	bl	8005138 <I2C_WaitOnFlagUntilTimeout>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e000      	b.n	80050e2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	80002000 	.word	0x80002000

080050f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b02      	cmp	r3, #2
 8005104:	d103      	bne.n	800510e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2200      	movs	r2, #0
 800510c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b01      	cmp	r3, #1
 800511a:	d007      	beq.n	800512c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699a      	ldr	r2, [r3, #24]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0201 	orr.w	r2, r2, #1
 800512a:	619a      	str	r2, [r3, #24]
  }
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	603b      	str	r3, [r7, #0]
 8005144:	4613      	mov	r3, r2
 8005146:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005148:	e03b      	b.n	80051c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	6839      	ldr	r1, [r7, #0]
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 f8d6 	bl	8005300 <I2C_IsErrorOccurred>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e041      	b.n	80051e2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005164:	d02d      	beq.n	80051c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005166:	f7fe fd53 	bl	8003c10 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d302      	bcc.n	800517c <I2C_WaitOnFlagUntilTimeout+0x44>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d122      	bne.n	80051c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	699a      	ldr	r2, [r3, #24]
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	4013      	ands	r3, r2
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	429a      	cmp	r2, r3
 800518a:	bf0c      	ite	eq
 800518c:	2301      	moveq	r3, #1
 800518e:	2300      	movne	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	461a      	mov	r2, r3
 8005194:	79fb      	ldrb	r3, [r7, #7]
 8005196:	429a      	cmp	r2, r3
 8005198:	d113      	bne.n	80051c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800519e:	f043 0220 	orr.w	r2, r3, #32
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2220      	movs	r2, #32
 80051aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e00f      	b.n	80051e2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	699a      	ldr	r2, [r3, #24]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	4013      	ands	r3, r2
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	bf0c      	ite	eq
 80051d2:	2301      	moveq	r3, #1
 80051d4:	2300      	movne	r3, #0
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	461a      	mov	r2, r3
 80051da:	79fb      	ldrb	r3, [r7, #7]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d0b4      	beq.n	800514a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b084      	sub	sp, #16
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	60f8      	str	r0, [r7, #12]
 80051f2:	60b9      	str	r1, [r7, #8]
 80051f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051f6:	e033      	b.n	8005260 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	68b9      	ldr	r1, [r7, #8]
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f000 f87f 	bl	8005300 <I2C_IsErrorOccurred>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d001      	beq.n	800520c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e031      	b.n	8005270 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005212:	d025      	beq.n	8005260 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005214:	f7fe fcfc 	bl	8003c10 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	429a      	cmp	r2, r3
 8005222:	d302      	bcc.n	800522a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d11a      	bne.n	8005260 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b02      	cmp	r3, #2
 8005236:	d013      	beq.n	8005260 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800523c:	f043 0220 	orr.w	r2, r3, #32
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2220      	movs	r2, #32
 8005248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e007      	b.n	8005270 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b02      	cmp	r3, #2
 800526c:	d1c4      	bne.n	80051f8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005284:	e02f      	b.n	80052e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	68b9      	ldr	r1, [r7, #8]
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f000 f838 	bl	8005300 <I2C_IsErrorOccurred>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e02d      	b.n	80052f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800529a:	f7fe fcb9 	bl	8003c10 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d302      	bcc.n	80052b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d11a      	bne.n	80052e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	f003 0320 	and.w	r3, r3, #32
 80052ba:	2b20      	cmp	r3, #32
 80052bc:	d013      	beq.n	80052e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052c2:	f043 0220 	orr.w	r2, r3, #32
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e007      	b.n	80052f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	f003 0320 	and.w	r3, r3, #32
 80052f0:	2b20      	cmp	r3, #32
 80052f2:	d1c8      	bne.n	8005286 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
	...

08005300 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b08a      	sub	sp, #40	@ 0x28
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800530c:	2300      	movs	r3, #0
 800530e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800531a:	2300      	movs	r3, #0
 800531c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	f003 0310 	and.w	r3, r3, #16
 8005328:	2b00      	cmp	r3, #0
 800532a:	d068      	beq.n	80053fe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2210      	movs	r2, #16
 8005332:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005334:	e049      	b.n	80053ca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800533c:	d045      	beq.n	80053ca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800533e:	f7fe fc67 	bl	8003c10 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	429a      	cmp	r2, r3
 800534c:	d302      	bcc.n	8005354 <I2C_IsErrorOccurred+0x54>
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d13a      	bne.n	80053ca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800535e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005366:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005372:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005376:	d121      	bne.n	80053bc <I2C_IsErrorOccurred+0xbc>
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800537e:	d01d      	beq.n	80053bc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005380:	7cfb      	ldrb	r3, [r7, #19]
 8005382:	2b20      	cmp	r3, #32
 8005384:	d01a      	beq.n	80053bc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005394:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005396:	f7fe fc3b 	bl	8003c10 <HAL_GetTick>
 800539a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800539c:	e00e      	b.n	80053bc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800539e:	f7fe fc37 	bl	8003c10 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b19      	cmp	r3, #25
 80053aa:	d907      	bls.n	80053bc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	f043 0320 	orr.w	r3, r3, #32
 80053b2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80053ba:	e006      	b.n	80053ca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	f003 0320 	and.w	r3, r3, #32
 80053c6:	2b20      	cmp	r3, #32
 80053c8:	d1e9      	bne.n	800539e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	f003 0320 	and.w	r3, r3, #32
 80053d4:	2b20      	cmp	r3, #32
 80053d6:	d003      	beq.n	80053e0 <I2C_IsErrorOccurred+0xe0>
 80053d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0aa      	beq.n	8005336 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80053e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d103      	bne.n	80053f0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2220      	movs	r2, #32
 80053ee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	f043 0304 	orr.w	r3, r3, #4
 80053f6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00b      	beq.n	8005428 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	f043 0301 	orr.w	r3, r3, #1
 8005416:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005420:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00b      	beq.n	800544a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	f043 0308 	orr.w	r3, r3, #8
 8005438:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005442:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00b      	beq.n	800546c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	f043 0302 	orr.w	r3, r3, #2
 800545a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005464:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800546c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005470:	2b00      	cmp	r3, #0
 8005472:	d01c      	beq.n	80054ae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f7ff fe3b 	bl	80050f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6859      	ldr	r1, [r3, #4]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	4b0d      	ldr	r3, [pc, #52]	@ (80054bc <I2C_IsErrorOccurred+0x1bc>)
 8005486:	400b      	ands	r3, r1
 8005488:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	431a      	orrs	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2220      	movs	r2, #32
 800549a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80054ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3728      	adds	r7, #40	@ 0x28
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	fe00e800 	.word	0xfe00e800

080054c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	607b      	str	r3, [r7, #4]
 80054ca:	460b      	mov	r3, r1
 80054cc:	817b      	strh	r3, [r7, #10]
 80054ce:	4613      	mov	r3, r2
 80054d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054d2:	897b      	ldrh	r3, [r7, #10]
 80054d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80054d8:	7a7b      	ldrb	r3, [r7, #9]
 80054da:	041b      	lsls	r3, r3, #16
 80054dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80054ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	0d5b      	lsrs	r3, r3, #21
 80054fa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80054fe:	4b08      	ldr	r3, [pc, #32]	@ (8005520 <I2C_TransferConfig+0x60>)
 8005500:	430b      	orrs	r3, r1
 8005502:	43db      	mvns	r3, r3
 8005504:	ea02 0103 	and.w	r1, r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	430a      	orrs	r2, r1
 8005510:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005512:	bf00      	nop
 8005514:	371c      	adds	r7, #28
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	03ff63ff 	.word	0x03ff63ff

08005524 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b20      	cmp	r3, #32
 8005538:	d138      	bne.n	80055ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005540:	2b01      	cmp	r3, #1
 8005542:	d101      	bne.n	8005548 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005544:	2302      	movs	r3, #2
 8005546:	e032      	b.n	80055ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2224      	movs	r2, #36	@ 0x24
 8005554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0201 	bic.w	r2, r2, #1
 8005566:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005576:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6819      	ldr	r1, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0201 	orr.w	r2, r2, #1
 8005596:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2220      	movs	r2, #32
 800559c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80055a8:	2300      	movs	r3, #0
 80055aa:	e000      	b.n	80055ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80055ac:	2302      	movs	r3, #2
  }
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b085      	sub	sp, #20
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b20      	cmp	r3, #32
 80055ce:	d139      	bne.n	8005644 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d101      	bne.n	80055de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80055da:	2302      	movs	r3, #2
 80055dc:	e033      	b.n	8005646 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2224      	movs	r2, #36	@ 0x24
 80055ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0201 	bic.w	r2, r2, #1
 80055fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800560c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	021b      	lsls	r3, r3, #8
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	4313      	orrs	r3, r2
 8005616:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0201 	orr.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2220      	movs	r2, #32
 8005634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005640:	2300      	movs	r3, #0
 8005642:	e000      	b.n	8005646 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005644:	2302      	movs	r3, #2
  }
}
 8005646:	4618      	mov	r0, r3
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b084      	sub	sp, #16
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e041      	b.n	80056e8 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800566c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f245 5255 	movw	r2, #21845	@ 0x5555
 8005676:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6852      	ldr	r2, [r2, #4]
 8005680:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6892      	ldr	r2, [r2, #8]
 800568a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800568c:	f7fe fac0 	bl	8003c10 <HAL_GetTick>
 8005690:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005692:	e00f      	b.n	80056b4 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005694:	f7fe fabc 	bl	8003c10 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b31      	cmp	r3, #49	@ 0x31
 80056a0:	d908      	bls.n	80056b4 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e019      	b.n	80056e8 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f003 0307 	and.w	r3, r3, #7
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1e8      	bne.n	8005694 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	691a      	ldr	r2, [r3, #16]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d005      	beq.n	80056dc <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	68d2      	ldr	r2, [r2, #12]
 80056d8:	611a      	str	r2, [r3, #16]
 80056da:	e004      	b.n	80056e6 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80056e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8005700:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d141      	bne.n	80057a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800571e:	4b4b      	ldr	r3, [pc, #300]	@ (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005726:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800572a:	d131      	bne.n	8005790 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800572c:	4b47      	ldr	r3, [pc, #284]	@ (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800572e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005732:	4a46      	ldr	r2, [pc, #280]	@ (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005734:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005738:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800573c:	4b43      	ldr	r3, [pc, #268]	@ (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005744:	4a41      	ldr	r2, [pc, #260]	@ (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005746:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800574a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800574c:	4b40      	ldr	r3, [pc, #256]	@ (8005850 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2232      	movs	r2, #50	@ 0x32
 8005752:	fb02 f303 	mul.w	r3, r2, r3
 8005756:	4a3f      	ldr	r2, [pc, #252]	@ (8005854 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005758:	fba2 2303 	umull	r2, r3, r2, r3
 800575c:	0c9b      	lsrs	r3, r3, #18
 800575e:	3301      	adds	r3, #1
 8005760:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005762:	e002      	b.n	800576a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	3b01      	subs	r3, #1
 8005768:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800576a:	4b38      	ldr	r3, [pc, #224]	@ (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005772:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005776:	d102      	bne.n	800577e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1f2      	bne.n	8005764 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800577e:	4b33      	ldr	r3, [pc, #204]	@ (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005786:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800578a:	d158      	bne.n	800583e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e057      	b.n	8005840 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005790:	4b2e      	ldr	r3, [pc, #184]	@ (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005792:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005796:	4a2d      	ldr	r2, [pc, #180]	@ (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005798:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800579c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80057a0:	e04d      	b.n	800583e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057a8:	d141      	bne.n	800582e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80057aa:	4b28      	ldr	r3, [pc, #160]	@ (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80057b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057b6:	d131      	bne.n	800581c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057b8:	4b24      	ldr	r3, [pc, #144]	@ (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057be:	4a23      	ldr	r2, [pc, #140]	@ (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057c8:	4b20      	ldr	r3, [pc, #128]	@ (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80057d0:	4a1e      	ldr	r2, [pc, #120]	@ (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80057d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005850 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2232      	movs	r2, #50	@ 0x32
 80057de:	fb02 f303 	mul.w	r3, r2, r3
 80057e2:	4a1c      	ldr	r2, [pc, #112]	@ (8005854 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80057e4:	fba2 2303 	umull	r2, r3, r2, r3
 80057e8:	0c9b      	lsrs	r3, r3, #18
 80057ea:	3301      	adds	r3, #1
 80057ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057ee:	e002      	b.n	80057f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	3b01      	subs	r3, #1
 80057f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057f6:	4b15      	ldr	r3, [pc, #84]	@ (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005802:	d102      	bne.n	800580a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1f2      	bne.n	80057f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800580a:	4b10      	ldr	r3, [pc, #64]	@ (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005812:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005816:	d112      	bne.n	800583e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e011      	b.n	8005840 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800581c:	4b0b      	ldr	r3, [pc, #44]	@ (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800581e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005822:	4a0a      	ldr	r2, [pc, #40]	@ (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005828:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800582c:	e007      	b.n	800583e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800582e:	4b07      	ldr	r3, [pc, #28]	@ (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005836:	4a05      	ldr	r2, [pc, #20]	@ (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005838:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800583c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	40007000 	.word	0x40007000
 8005850:	20000004 	.word	0x20000004
 8005854:	431bde83 	.word	0x431bde83

08005858 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005858:	b480      	push	{r7}
 800585a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800585c:	4b05      	ldr	r3, [pc, #20]	@ (8005874 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	4a04      	ldr	r2, [pc, #16]	@ (8005874 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005862:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005866:	6093      	str	r3, [r2, #8]
}
 8005868:	bf00      	nop
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	40007000 	.word	0x40007000

08005878 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e2fe      	b.n	8005e88 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d075      	beq.n	8005982 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005896:	4b97      	ldr	r3, [pc, #604]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 030c 	and.w	r3, r3, #12
 800589e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058a0:	4b94      	ldr	r3, [pc, #592]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f003 0303 	and.w	r3, r3, #3
 80058a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	2b0c      	cmp	r3, #12
 80058ae:	d102      	bne.n	80058b6 <HAL_RCC_OscConfig+0x3e>
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	d002      	beq.n	80058bc <HAL_RCC_OscConfig+0x44>
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	2b08      	cmp	r3, #8
 80058ba:	d10b      	bne.n	80058d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058bc:	4b8d      	ldr	r3, [pc, #564]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d05b      	beq.n	8005980 <HAL_RCC_OscConfig+0x108>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d157      	bne.n	8005980 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e2d9      	b.n	8005e88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058dc:	d106      	bne.n	80058ec <HAL_RCC_OscConfig+0x74>
 80058de:	4b85      	ldr	r3, [pc, #532]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a84      	ldr	r2, [pc, #528]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 80058e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	e01d      	b.n	8005928 <HAL_RCC_OscConfig+0xb0>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80058f4:	d10c      	bne.n	8005910 <HAL_RCC_OscConfig+0x98>
 80058f6:	4b7f      	ldr	r3, [pc, #508]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a7e      	ldr	r2, [pc, #504]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 80058fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	4b7c      	ldr	r3, [pc, #496]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a7b      	ldr	r2, [pc, #492]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005908:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800590c:	6013      	str	r3, [r2, #0]
 800590e:	e00b      	b.n	8005928 <HAL_RCC_OscConfig+0xb0>
 8005910:	4b78      	ldr	r3, [pc, #480]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a77      	ldr	r2, [pc, #476]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005916:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800591a:	6013      	str	r3, [r2, #0]
 800591c:	4b75      	ldr	r3, [pc, #468]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a74      	ldr	r2, [pc, #464]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005922:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005926:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d013      	beq.n	8005958 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005930:	f7fe f96e 	bl	8003c10 <HAL_GetTick>
 8005934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005936:	e008      	b.n	800594a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005938:	f7fe f96a 	bl	8003c10 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b64      	cmp	r3, #100	@ 0x64
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e29e      	b.n	8005e88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800594a:	4b6a      	ldr	r3, [pc, #424]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d0f0      	beq.n	8005938 <HAL_RCC_OscConfig+0xc0>
 8005956:	e014      	b.n	8005982 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005958:	f7fe f95a 	bl	8003c10 <HAL_GetTick>
 800595c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800595e:	e008      	b.n	8005972 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005960:	f7fe f956 	bl	8003c10 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b64      	cmp	r3, #100	@ 0x64
 800596c:	d901      	bls.n	8005972 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e28a      	b.n	8005e88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005972:	4b60      	ldr	r3, [pc, #384]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1f0      	bne.n	8005960 <HAL_RCC_OscConfig+0xe8>
 800597e:	e000      	b.n	8005982 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d075      	beq.n	8005a7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800598e:	4b59      	ldr	r3, [pc, #356]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 030c 	and.w	r3, r3, #12
 8005996:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005998:	4b56      	ldr	r3, [pc, #344]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f003 0303 	and.w	r3, r3, #3
 80059a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	2b0c      	cmp	r3, #12
 80059a6:	d102      	bne.n	80059ae <HAL_RCC_OscConfig+0x136>
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d002      	beq.n	80059b4 <HAL_RCC_OscConfig+0x13c>
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	2b04      	cmp	r3, #4
 80059b2:	d11f      	bne.n	80059f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059b4:	4b4f      	ldr	r3, [pc, #316]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d005      	beq.n	80059cc <HAL_RCC_OscConfig+0x154>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e25d      	b.n	8005e88 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059cc:	4b49      	ldr	r3, [pc, #292]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	061b      	lsls	r3, r3, #24
 80059da:	4946      	ldr	r1, [pc, #280]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80059e0:	4b45      	ldr	r3, [pc, #276]	@ (8005af8 <HAL_RCC_OscConfig+0x280>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7fd fd21 	bl	800342c <HAL_InitTick>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d043      	beq.n	8005a78 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e249      	b.n	8005e88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d023      	beq.n	8005a44 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059fc:	4b3d      	ldr	r3, [pc, #244]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a3c      	ldr	r2, [pc, #240]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005a02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a08:	f7fe f902 	bl	8003c10 <HAL_GetTick>
 8005a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a0e:	e008      	b.n	8005a22 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a10:	f7fe f8fe 	bl	8003c10 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e232      	b.n	8005e88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a22:	4b34      	ldr	r3, [pc, #208]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0f0      	beq.n	8005a10 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a2e:	4b31      	ldr	r3, [pc, #196]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	061b      	lsls	r3, r3, #24
 8005a3c:	492d      	ldr	r1, [pc, #180]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	604b      	str	r3, [r1, #4]
 8005a42:	e01a      	b.n	8005a7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a44:	4b2b      	ldr	r3, [pc, #172]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a2a      	ldr	r2, [pc, #168]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005a4a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a50:	f7fe f8de 	bl	8003c10 <HAL_GetTick>
 8005a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a56:	e008      	b.n	8005a6a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a58:	f7fe f8da 	bl	8003c10 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e20e      	b.n	8005e88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a6a:	4b22      	ldr	r3, [pc, #136]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1f0      	bne.n	8005a58 <HAL_RCC_OscConfig+0x1e0>
 8005a76:	e000      	b.n	8005a7a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0308 	and.w	r3, r3, #8
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d041      	beq.n	8005b0a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d01c      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a8e:	4b19      	ldr	r3, [pc, #100]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a94:	4a17      	ldr	r2, [pc, #92]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005a96:	f043 0301 	orr.w	r3, r3, #1
 8005a9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a9e:	f7fe f8b7 	bl	8003c10 <HAL_GetTick>
 8005aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005aa4:	e008      	b.n	8005ab8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aa6:	f7fe f8b3 	bl	8003c10 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e1e7      	b.n	8005e88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d0ef      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x22e>
 8005ac6:	e020      	b.n	8005b0a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ace:	4a09      	ldr	r2, [pc, #36]	@ (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005ad0:	f023 0301 	bic.w	r3, r3, #1
 8005ad4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad8:	f7fe f89a 	bl	8003c10 <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ade:	e00d      	b.n	8005afc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ae0:	f7fe f896 	bl	8003c10 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d906      	bls.n	8005afc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e1ca      	b.n	8005e88 <HAL_RCC_OscConfig+0x610>
 8005af2:	bf00      	nop
 8005af4:	40021000 	.word	0x40021000
 8005af8:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005afc:	4b8c      	ldr	r3, [pc, #560]	@ (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1ea      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0304 	and.w	r3, r3, #4
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 80a6 	beq.w	8005c64 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b1c:	4b84      	ldr	r3, [pc, #528]	@ (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <HAL_RCC_OscConfig+0x2b4>
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e000      	b.n	8005b2e <HAL_RCC_OscConfig+0x2b6>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00d      	beq.n	8005b4e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b32:	4b7f      	ldr	r3, [pc, #508]	@ (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b36:	4a7e      	ldr	r2, [pc, #504]	@ (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b3e:	4b7c      	ldr	r3, [pc, #496]	@ (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b4e:	4b79      	ldr	r3, [pc, #484]	@ (8005d34 <HAL_RCC_OscConfig+0x4bc>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d118      	bne.n	8005b8c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b5a:	4b76      	ldr	r3, [pc, #472]	@ (8005d34 <HAL_RCC_OscConfig+0x4bc>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a75      	ldr	r2, [pc, #468]	@ (8005d34 <HAL_RCC_OscConfig+0x4bc>)
 8005b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b66:	f7fe f853 	bl	8003c10 <HAL_GetTick>
 8005b6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b6c:	e008      	b.n	8005b80 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b6e:	f7fe f84f 	bl	8003c10 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d901      	bls.n	8005b80 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e183      	b.n	8005e88 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b80:	4b6c      	ldr	r3, [pc, #432]	@ (8005d34 <HAL_RCC_OscConfig+0x4bc>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0f0      	beq.n	8005b6e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d108      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x32e>
 8005b94:	4b66      	ldr	r3, [pc, #408]	@ (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b9a:	4a65      	ldr	r2, [pc, #404]	@ (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005b9c:	f043 0301 	orr.w	r3, r3, #1
 8005ba0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ba4:	e024      	b.n	8005bf0 <HAL_RCC_OscConfig+0x378>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	2b05      	cmp	r3, #5
 8005bac:	d110      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x358>
 8005bae:	4b60      	ldr	r3, [pc, #384]	@ (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bb4:	4a5e      	ldr	r2, [pc, #376]	@ (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005bb6:	f043 0304 	orr.w	r3, r3, #4
 8005bba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005bbe:	4b5c      	ldr	r3, [pc, #368]	@ (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bc4:	4a5a      	ldr	r2, [pc, #360]	@ (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005bc6:	f043 0301 	orr.w	r3, r3, #1
 8005bca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005bce:	e00f      	b.n	8005bf0 <HAL_RCC_OscConfig+0x378>
 8005bd0:	4b57      	ldr	r3, [pc, #348]	@ (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bd6:	4a56      	ldr	r2, [pc, #344]	@ (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005bd8:	f023 0301 	bic.w	r3, r3, #1
 8005bdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005be0:	4b53      	ldr	r3, [pc, #332]	@ (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005be6:	4a52      	ldr	r2, [pc, #328]	@ (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005be8:	f023 0304 	bic.w	r3, r3, #4
 8005bec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d016      	beq.n	8005c26 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf8:	f7fe f80a 	bl	8003c10 <HAL_GetTick>
 8005bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bfe:	e00a      	b.n	8005c16 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c00:	f7fe f806 	bl	8003c10 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e138      	b.n	8005e88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c16:	4b46      	ldr	r3, [pc, #280]	@ (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d0ed      	beq.n	8005c00 <HAL_RCC_OscConfig+0x388>
 8005c24:	e015      	b.n	8005c52 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c26:	f7fd fff3 	bl	8003c10 <HAL_GetTick>
 8005c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c2c:	e00a      	b.n	8005c44 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c2e:	f7fd ffef 	bl	8003c10 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e121      	b.n	8005e88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c44:	4b3a      	ldr	r3, [pc, #232]	@ (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1ed      	bne.n	8005c2e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c52:	7ffb      	ldrb	r3, [r7, #31]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d105      	bne.n	8005c64 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c58:	4b35      	ldr	r3, [pc, #212]	@ (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c5c:	4a34      	ldr	r2, [pc, #208]	@ (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005c5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c62:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0320 	and.w	r3, r3, #32
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d03c      	beq.n	8005cea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d01c      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c78:	4b2d      	ldr	r3, [pc, #180]	@ (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005c7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c7e:	4a2c      	ldr	r2, [pc, #176]	@ (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005c80:	f043 0301 	orr.w	r3, r3, #1
 8005c84:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c88:	f7fd ffc2 	bl	8003c10 <HAL_GetTick>
 8005c8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c8e:	e008      	b.n	8005ca2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c90:	f7fd ffbe 	bl	8003c10 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d901      	bls.n	8005ca2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e0f2      	b.n	8005e88 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ca2:	4b23      	ldr	r3, [pc, #140]	@ (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005ca4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d0ef      	beq.n	8005c90 <HAL_RCC_OscConfig+0x418>
 8005cb0:	e01b      	b.n	8005cea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005cb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005cba:	f023 0301 	bic.w	r3, r3, #1
 8005cbe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cc2:	f7fd ffa5 	bl	8003c10 <HAL_GetTick>
 8005cc6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005cc8:	e008      	b.n	8005cdc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cca:	f7fd ffa1 	bl	8003c10 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d901      	bls.n	8005cdc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e0d5      	b.n	8005e88 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005cdc:	4b14      	ldr	r3, [pc, #80]	@ (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005cde:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1ef      	bne.n	8005cca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 80c9 	beq.w	8005e86 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f003 030c 	and.w	r3, r3, #12
 8005cfc:	2b0c      	cmp	r3, #12
 8005cfe:	f000 8083 	beq.w	8005e08 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d15e      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d0a:	4b09      	ldr	r3, [pc, #36]	@ (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a08      	ldr	r2, [pc, #32]	@ (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005d10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d16:	f7fd ff7b 	bl	8003c10 <HAL_GetTick>
 8005d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d1c:	e00c      	b.n	8005d38 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d1e:	f7fd ff77 	bl	8003c10 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d905      	bls.n	8005d38 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e0ab      	b.n	8005e88 <HAL_RCC_OscConfig+0x610>
 8005d30:	40021000 	.word	0x40021000
 8005d34:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d38:	4b55      	ldr	r3, [pc, #340]	@ (8005e90 <HAL_RCC_OscConfig+0x618>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1ec      	bne.n	8005d1e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d44:	4b52      	ldr	r3, [pc, #328]	@ (8005e90 <HAL_RCC_OscConfig+0x618>)
 8005d46:	68da      	ldr	r2, [r3, #12]
 8005d48:	4b52      	ldr	r3, [pc, #328]	@ (8005e94 <HAL_RCC_OscConfig+0x61c>)
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	6a11      	ldr	r1, [r2, #32]
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005d54:	3a01      	subs	r2, #1
 8005d56:	0112      	lsls	r2, r2, #4
 8005d58:	4311      	orrs	r1, r2
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005d5e:	0212      	lsls	r2, r2, #8
 8005d60:	4311      	orrs	r1, r2
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005d66:	0852      	lsrs	r2, r2, #1
 8005d68:	3a01      	subs	r2, #1
 8005d6a:	0552      	lsls	r2, r2, #21
 8005d6c:	4311      	orrs	r1, r2
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005d72:	0852      	lsrs	r2, r2, #1
 8005d74:	3a01      	subs	r2, #1
 8005d76:	0652      	lsls	r2, r2, #25
 8005d78:	4311      	orrs	r1, r2
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005d7e:	06d2      	lsls	r2, r2, #27
 8005d80:	430a      	orrs	r2, r1
 8005d82:	4943      	ldr	r1, [pc, #268]	@ (8005e90 <HAL_RCC_OscConfig+0x618>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d88:	4b41      	ldr	r3, [pc, #260]	@ (8005e90 <HAL_RCC_OscConfig+0x618>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a40      	ldr	r2, [pc, #256]	@ (8005e90 <HAL_RCC_OscConfig+0x618>)
 8005d8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d92:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d94:	4b3e      	ldr	r3, [pc, #248]	@ (8005e90 <HAL_RCC_OscConfig+0x618>)
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	4a3d      	ldr	r2, [pc, #244]	@ (8005e90 <HAL_RCC_OscConfig+0x618>)
 8005d9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da0:	f7fd ff36 	bl	8003c10 <HAL_GetTick>
 8005da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005da6:	e008      	b.n	8005dba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005da8:	f7fd ff32 	bl	8003c10 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d901      	bls.n	8005dba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e066      	b.n	8005e88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dba:	4b35      	ldr	r3, [pc, #212]	@ (8005e90 <HAL_RCC_OscConfig+0x618>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d0f0      	beq.n	8005da8 <HAL_RCC_OscConfig+0x530>
 8005dc6:	e05e      	b.n	8005e86 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dc8:	4b31      	ldr	r3, [pc, #196]	@ (8005e90 <HAL_RCC_OscConfig+0x618>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a30      	ldr	r2, [pc, #192]	@ (8005e90 <HAL_RCC_OscConfig+0x618>)
 8005dce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd4:	f7fd ff1c 	bl	8003c10 <HAL_GetTick>
 8005dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dda:	e008      	b.n	8005dee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ddc:	f7fd ff18 	bl	8003c10 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e04c      	b.n	8005e88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dee:	4b28      	ldr	r3, [pc, #160]	@ (8005e90 <HAL_RCC_OscConfig+0x618>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1f0      	bne.n	8005ddc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005dfa:	4b25      	ldr	r3, [pc, #148]	@ (8005e90 <HAL_RCC_OscConfig+0x618>)
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	4924      	ldr	r1, [pc, #144]	@ (8005e90 <HAL_RCC_OscConfig+0x618>)
 8005e00:	4b25      	ldr	r3, [pc, #148]	@ (8005e98 <HAL_RCC_OscConfig+0x620>)
 8005e02:	4013      	ands	r3, r2
 8005e04:	60cb      	str	r3, [r1, #12]
 8005e06:	e03e      	b.n	8005e86 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	69db      	ldr	r3, [r3, #28]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d101      	bne.n	8005e14 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e039      	b.n	8005e88 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005e14:	4b1e      	ldr	r3, [pc, #120]	@ (8005e90 <HAL_RCC_OscConfig+0x618>)
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f003 0203 	and.w	r2, r3, #3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a1b      	ldr	r3, [r3, #32]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d12c      	bne.n	8005e82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e32:	3b01      	subs	r3, #1
 8005e34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d123      	bne.n	8005e82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e44:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d11b      	bne.n	8005e82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e54:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d113      	bne.n	8005e82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e64:	085b      	lsrs	r3, r3, #1
 8005e66:	3b01      	subs	r3, #1
 8005e68:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d109      	bne.n	8005e82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e78:	085b      	lsrs	r3, r3, #1
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d001      	beq.n	8005e86 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e000      	b.n	8005e88 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3720      	adds	r7, #32
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	40021000 	.word	0x40021000
 8005e94:	019f800c 	.word	0x019f800c
 8005e98:	feeefffc 	.word	0xfeeefffc

08005e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e11e      	b.n	80060f2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005eb4:	4b91      	ldr	r3, [pc, #580]	@ (80060fc <HAL_RCC_ClockConfig+0x260>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 030f 	and.w	r3, r3, #15
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d910      	bls.n	8005ee4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ec2:	4b8e      	ldr	r3, [pc, #568]	@ (80060fc <HAL_RCC_ClockConfig+0x260>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f023 020f 	bic.w	r2, r3, #15
 8005eca:	498c      	ldr	r1, [pc, #560]	@ (80060fc <HAL_RCC_ClockConfig+0x260>)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ed2:	4b8a      	ldr	r3, [pc, #552]	@ (80060fc <HAL_RCC_ClockConfig+0x260>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 030f 	and.w	r3, r3, #15
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d001      	beq.n	8005ee4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e106      	b.n	80060f2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d073      	beq.n	8005fd8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	2b03      	cmp	r3, #3
 8005ef6:	d129      	bne.n	8005f4c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ef8:	4b81      	ldr	r3, [pc, #516]	@ (8006100 <HAL_RCC_ClockConfig+0x264>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e0f4      	b.n	80060f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005f08:	f000 f9d0 	bl	80062ac <RCC_GetSysClockFreqFromPLLSource>
 8005f0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	4a7c      	ldr	r2, [pc, #496]	@ (8006104 <HAL_RCC_ClockConfig+0x268>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d93f      	bls.n	8005f96 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f16:	4b7a      	ldr	r3, [pc, #488]	@ (8006100 <HAL_RCC_ClockConfig+0x264>)
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d009      	beq.n	8005f36 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d033      	beq.n	8005f96 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d12f      	bne.n	8005f96 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f36:	4b72      	ldr	r3, [pc, #456]	@ (8006100 <HAL_RCC_ClockConfig+0x264>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f3e:	4a70      	ldr	r2, [pc, #448]	@ (8006100 <HAL_RCC_ClockConfig+0x264>)
 8005f40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f44:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005f46:	2380      	movs	r3, #128	@ 0x80
 8005f48:	617b      	str	r3, [r7, #20]
 8005f4a:	e024      	b.n	8005f96 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d107      	bne.n	8005f64 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f54:	4b6a      	ldr	r3, [pc, #424]	@ (8006100 <HAL_RCC_ClockConfig+0x264>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d109      	bne.n	8005f74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e0c6      	b.n	80060f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f64:	4b66      	ldr	r3, [pc, #408]	@ (8006100 <HAL_RCC_ClockConfig+0x264>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e0be      	b.n	80060f2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005f74:	f000 f8ce 	bl	8006114 <HAL_RCC_GetSysClockFreq>
 8005f78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	4a61      	ldr	r2, [pc, #388]	@ (8006104 <HAL_RCC_ClockConfig+0x268>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d909      	bls.n	8005f96 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f82:	4b5f      	ldr	r3, [pc, #380]	@ (8006100 <HAL_RCC_ClockConfig+0x264>)
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f8a:	4a5d      	ldr	r2, [pc, #372]	@ (8006100 <HAL_RCC_ClockConfig+0x264>)
 8005f8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f90:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005f92:	2380      	movs	r3, #128	@ 0x80
 8005f94:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f96:	4b5a      	ldr	r3, [pc, #360]	@ (8006100 <HAL_RCC_ClockConfig+0x264>)
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f023 0203 	bic.w	r2, r3, #3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	4957      	ldr	r1, [pc, #348]	@ (8006100 <HAL_RCC_ClockConfig+0x264>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fa8:	f7fd fe32 	bl	8003c10 <HAL_GetTick>
 8005fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fae:	e00a      	b.n	8005fc6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fb0:	f7fd fe2e 	bl	8003c10 <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e095      	b.n	80060f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fc6:	4b4e      	ldr	r3, [pc, #312]	@ (8006100 <HAL_RCC_ClockConfig+0x264>)
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 020c 	and.w	r2, r3, #12
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d1eb      	bne.n	8005fb0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0302 	and.w	r3, r3, #2
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d023      	beq.n	800602c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0304 	and.w	r3, r3, #4
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d005      	beq.n	8005ffc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ff0:	4b43      	ldr	r3, [pc, #268]	@ (8006100 <HAL_RCC_ClockConfig+0x264>)
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	4a42      	ldr	r2, [pc, #264]	@ (8006100 <HAL_RCC_ClockConfig+0x264>)
 8005ff6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005ffa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0308 	and.w	r3, r3, #8
 8006004:	2b00      	cmp	r3, #0
 8006006:	d007      	beq.n	8006018 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006008:	4b3d      	ldr	r3, [pc, #244]	@ (8006100 <HAL_RCC_ClockConfig+0x264>)
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006010:	4a3b      	ldr	r2, [pc, #236]	@ (8006100 <HAL_RCC_ClockConfig+0x264>)
 8006012:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006016:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006018:	4b39      	ldr	r3, [pc, #228]	@ (8006100 <HAL_RCC_ClockConfig+0x264>)
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	4936      	ldr	r1, [pc, #216]	@ (8006100 <HAL_RCC_ClockConfig+0x264>)
 8006026:	4313      	orrs	r3, r2
 8006028:	608b      	str	r3, [r1, #8]
 800602a:	e008      	b.n	800603e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	2b80      	cmp	r3, #128	@ 0x80
 8006030:	d105      	bne.n	800603e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006032:	4b33      	ldr	r3, [pc, #204]	@ (8006100 <HAL_RCC_ClockConfig+0x264>)
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	4a32      	ldr	r2, [pc, #200]	@ (8006100 <HAL_RCC_ClockConfig+0x264>)
 8006038:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800603c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800603e:	4b2f      	ldr	r3, [pc, #188]	@ (80060fc <HAL_RCC_ClockConfig+0x260>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 030f 	and.w	r3, r3, #15
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	429a      	cmp	r2, r3
 800604a:	d21d      	bcs.n	8006088 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800604c:	4b2b      	ldr	r3, [pc, #172]	@ (80060fc <HAL_RCC_ClockConfig+0x260>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f023 020f 	bic.w	r2, r3, #15
 8006054:	4929      	ldr	r1, [pc, #164]	@ (80060fc <HAL_RCC_ClockConfig+0x260>)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	4313      	orrs	r3, r2
 800605a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800605c:	f7fd fdd8 	bl	8003c10 <HAL_GetTick>
 8006060:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006062:	e00a      	b.n	800607a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006064:	f7fd fdd4 	bl	8003c10 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006072:	4293      	cmp	r3, r2
 8006074:	d901      	bls.n	800607a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e03b      	b.n	80060f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800607a:	4b20      	ldr	r3, [pc, #128]	@ (80060fc <HAL_RCC_ClockConfig+0x260>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 030f 	and.w	r3, r3, #15
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	429a      	cmp	r2, r3
 8006086:	d1ed      	bne.n	8006064 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0304 	and.w	r3, r3, #4
 8006090:	2b00      	cmp	r3, #0
 8006092:	d008      	beq.n	80060a6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006094:	4b1a      	ldr	r3, [pc, #104]	@ (8006100 <HAL_RCC_ClockConfig+0x264>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	4917      	ldr	r1, [pc, #92]	@ (8006100 <HAL_RCC_ClockConfig+0x264>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0308 	and.w	r3, r3, #8
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d009      	beq.n	80060c6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060b2:	4b13      	ldr	r3, [pc, #76]	@ (8006100 <HAL_RCC_ClockConfig+0x264>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	00db      	lsls	r3, r3, #3
 80060c0:	490f      	ldr	r1, [pc, #60]	@ (8006100 <HAL_RCC_ClockConfig+0x264>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80060c6:	f000 f825 	bl	8006114 <HAL_RCC_GetSysClockFreq>
 80060ca:	4602      	mov	r2, r0
 80060cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006100 <HAL_RCC_ClockConfig+0x264>)
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	091b      	lsrs	r3, r3, #4
 80060d2:	f003 030f 	and.w	r3, r3, #15
 80060d6:	490c      	ldr	r1, [pc, #48]	@ (8006108 <HAL_RCC_ClockConfig+0x26c>)
 80060d8:	5ccb      	ldrb	r3, [r1, r3]
 80060da:	f003 031f 	and.w	r3, r3, #31
 80060de:	fa22 f303 	lsr.w	r3, r2, r3
 80060e2:	4a0a      	ldr	r2, [pc, #40]	@ (800610c <HAL_RCC_ClockConfig+0x270>)
 80060e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80060e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006110 <HAL_RCC_ClockConfig+0x274>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fd f99e 	bl	800342c <HAL_InitTick>
 80060f0:	4603      	mov	r3, r0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3718      	adds	r7, #24
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	40022000 	.word	0x40022000
 8006100:	40021000 	.word	0x40021000
 8006104:	04c4b400 	.word	0x04c4b400
 8006108:	0801fa0c 	.word	0x0801fa0c
 800610c:	20000004 	.word	0x20000004
 8006110:	20000008 	.word	0x20000008

08006114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800611a:	4b2c      	ldr	r3, [pc, #176]	@ (80061cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f003 030c 	and.w	r3, r3, #12
 8006122:	2b04      	cmp	r3, #4
 8006124:	d102      	bne.n	800612c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006126:	4b2a      	ldr	r3, [pc, #168]	@ (80061d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006128:	613b      	str	r3, [r7, #16]
 800612a:	e047      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800612c:	4b27      	ldr	r3, [pc, #156]	@ (80061cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f003 030c 	and.w	r3, r3, #12
 8006134:	2b08      	cmp	r3, #8
 8006136:	d102      	bne.n	800613e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006138:	4b26      	ldr	r3, [pc, #152]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800613a:	613b      	str	r3, [r7, #16]
 800613c:	e03e      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800613e:	4b23      	ldr	r3, [pc, #140]	@ (80061cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f003 030c 	and.w	r3, r3, #12
 8006146:	2b0c      	cmp	r3, #12
 8006148:	d136      	bne.n	80061b8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800614a:	4b20      	ldr	r3, [pc, #128]	@ (80061cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	f003 0303 	and.w	r3, r3, #3
 8006152:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006154:	4b1d      	ldr	r3, [pc, #116]	@ (80061cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	091b      	lsrs	r3, r3, #4
 800615a:	f003 030f 	and.w	r3, r3, #15
 800615e:	3301      	adds	r3, #1
 8006160:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2b03      	cmp	r3, #3
 8006166:	d10c      	bne.n	8006182 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006168:	4a1a      	ldr	r2, [pc, #104]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006170:	4a16      	ldr	r2, [pc, #88]	@ (80061cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006172:	68d2      	ldr	r2, [r2, #12]
 8006174:	0a12      	lsrs	r2, r2, #8
 8006176:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800617a:	fb02 f303 	mul.w	r3, r2, r3
 800617e:	617b      	str	r3, [r7, #20]
      break;
 8006180:	e00c      	b.n	800619c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006182:	4a13      	ldr	r2, [pc, #76]	@ (80061d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	fbb2 f3f3 	udiv	r3, r2, r3
 800618a:	4a10      	ldr	r2, [pc, #64]	@ (80061cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800618c:	68d2      	ldr	r2, [r2, #12]
 800618e:	0a12      	lsrs	r2, r2, #8
 8006190:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006194:	fb02 f303 	mul.w	r3, r2, r3
 8006198:	617b      	str	r3, [r7, #20]
      break;
 800619a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800619c:	4b0b      	ldr	r3, [pc, #44]	@ (80061cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	0e5b      	lsrs	r3, r3, #25
 80061a2:	f003 0303 	and.w	r3, r3, #3
 80061a6:	3301      	adds	r3, #1
 80061a8:	005b      	lsls	r3, r3, #1
 80061aa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b4:	613b      	str	r3, [r7, #16]
 80061b6:	e001      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80061b8:	2300      	movs	r3, #0
 80061ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80061bc:	693b      	ldr	r3, [r7, #16]
}
 80061be:	4618      	mov	r0, r3
 80061c0:	371c      	adds	r7, #28
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	40021000 	.word	0x40021000
 80061d0:	00f42400 	.word	0x00f42400
 80061d4:	016e3600 	.word	0x016e3600

080061d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061d8:	b480      	push	{r7}
 80061da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061dc:	4b03      	ldr	r3, [pc, #12]	@ (80061ec <HAL_RCC_GetHCLKFreq+0x14>)
 80061de:	681b      	ldr	r3, [r3, #0]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	20000004 	.word	0x20000004

080061f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80061f4:	f7ff fff0 	bl	80061d8 <HAL_RCC_GetHCLKFreq>
 80061f8:	4602      	mov	r2, r0
 80061fa:	4b06      	ldr	r3, [pc, #24]	@ (8006214 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	0a1b      	lsrs	r3, r3, #8
 8006200:	f003 0307 	and.w	r3, r3, #7
 8006204:	4904      	ldr	r1, [pc, #16]	@ (8006218 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006206:	5ccb      	ldrb	r3, [r1, r3]
 8006208:	f003 031f 	and.w	r3, r3, #31
 800620c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006210:	4618      	mov	r0, r3
 8006212:	bd80      	pop	{r7, pc}
 8006214:	40021000 	.word	0x40021000
 8006218:	0801fa1c 	.word	0x0801fa1c

0800621c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006220:	f7ff ffda 	bl	80061d8 <HAL_RCC_GetHCLKFreq>
 8006224:	4602      	mov	r2, r0
 8006226:	4b06      	ldr	r3, [pc, #24]	@ (8006240 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	0adb      	lsrs	r3, r3, #11
 800622c:	f003 0307 	and.w	r3, r3, #7
 8006230:	4904      	ldr	r1, [pc, #16]	@ (8006244 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006232:	5ccb      	ldrb	r3, [r1, r3]
 8006234:	f003 031f 	and.w	r3, r3, #31
 8006238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800623c:	4618      	mov	r0, r3
 800623e:	bd80      	pop	{r7, pc}
 8006240:	40021000 	.word	0x40021000
 8006244:	0801fa1c 	.word	0x0801fa1c

08006248 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	220f      	movs	r2, #15
 8006256:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006258:	4b12      	ldr	r3, [pc, #72]	@ (80062a4 <HAL_RCC_GetClockConfig+0x5c>)
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f003 0203 	and.w	r2, r3, #3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006264:	4b0f      	ldr	r3, [pc, #60]	@ (80062a4 <HAL_RCC_GetClockConfig+0x5c>)
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006270:	4b0c      	ldr	r3, [pc, #48]	@ (80062a4 <HAL_RCC_GetClockConfig+0x5c>)
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800627c:	4b09      	ldr	r3, [pc, #36]	@ (80062a4 <HAL_RCC_GetClockConfig+0x5c>)
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	08db      	lsrs	r3, r3, #3
 8006282:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800628a:	4b07      	ldr	r3, [pc, #28]	@ (80062a8 <HAL_RCC_GetClockConfig+0x60>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 020f 	and.w	r2, r3, #15
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	601a      	str	r2, [r3, #0]
}
 8006296:	bf00      	nop
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	40021000 	.word	0x40021000
 80062a8:	40022000 	.word	0x40022000

080062ac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80062b2:	4b1e      	ldr	r3, [pc, #120]	@ (800632c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	f003 0303 	and.w	r3, r3, #3
 80062ba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062bc:	4b1b      	ldr	r3, [pc, #108]	@ (800632c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	091b      	lsrs	r3, r3, #4
 80062c2:	f003 030f 	and.w	r3, r3, #15
 80062c6:	3301      	adds	r3, #1
 80062c8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	2b03      	cmp	r3, #3
 80062ce:	d10c      	bne.n	80062ea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062d0:	4a17      	ldr	r2, [pc, #92]	@ (8006330 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d8:	4a14      	ldr	r2, [pc, #80]	@ (800632c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062da:	68d2      	ldr	r2, [r2, #12]
 80062dc:	0a12      	lsrs	r2, r2, #8
 80062de:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80062e2:	fb02 f303 	mul.w	r3, r2, r3
 80062e6:	617b      	str	r3, [r7, #20]
    break;
 80062e8:	e00c      	b.n	8006304 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062ea:	4a12      	ldr	r2, [pc, #72]	@ (8006334 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f2:	4a0e      	ldr	r2, [pc, #56]	@ (800632c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062f4:	68d2      	ldr	r2, [r2, #12]
 80062f6:	0a12      	lsrs	r2, r2, #8
 80062f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80062fc:	fb02 f303 	mul.w	r3, r2, r3
 8006300:	617b      	str	r3, [r7, #20]
    break;
 8006302:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006304:	4b09      	ldr	r3, [pc, #36]	@ (800632c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	0e5b      	lsrs	r3, r3, #25
 800630a:	f003 0303 	and.w	r3, r3, #3
 800630e:	3301      	adds	r3, #1
 8006310:	005b      	lsls	r3, r3, #1
 8006312:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	fbb2 f3f3 	udiv	r3, r2, r3
 800631c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800631e:	687b      	ldr	r3, [r7, #4]
}
 8006320:	4618      	mov	r0, r3
 8006322:	371c      	adds	r7, #28
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	40021000 	.word	0x40021000
 8006330:	016e3600 	.word	0x016e3600
 8006334:	00f42400 	.word	0x00f42400

08006338 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006340:	2300      	movs	r3, #0
 8006342:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006344:	2300      	movs	r3, #0
 8006346:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 8098 	beq.w	8006486 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006356:	2300      	movs	r3, #0
 8006358:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800635a:	4b43      	ldr	r3, [pc, #268]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800635c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800635e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10d      	bne.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006366:	4b40      	ldr	r3, [pc, #256]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800636a:	4a3f      	ldr	r2, [pc, #252]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800636c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006370:	6593      	str	r3, [r2, #88]	@ 0x58
 8006372:	4b3d      	ldr	r3, [pc, #244]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800637a:	60bb      	str	r3, [r7, #8]
 800637c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800637e:	2301      	movs	r3, #1
 8006380:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006382:	4b3a      	ldr	r3, [pc, #232]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a39      	ldr	r2, [pc, #228]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006388:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800638c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800638e:	f7fd fc3f 	bl	8003c10 <HAL_GetTick>
 8006392:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006394:	e009      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006396:	f7fd fc3b 	bl	8003c10 <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d902      	bls.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	74fb      	strb	r3, [r7, #19]
        break;
 80063a8:	e005      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063aa:	4b30      	ldr	r3, [pc, #192]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d0ef      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80063b6:	7cfb      	ldrb	r3, [r7, #19]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d159      	bne.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80063bc:	4b2a      	ldr	r3, [pc, #168]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063c6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d01e      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d019      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80063d8:	4b23      	ldr	r3, [pc, #140]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063e4:	4b20      	ldr	r3, [pc, #128]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ea:	4a1f      	ldr	r2, [pc, #124]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063f4:	4b1c      	ldr	r3, [pc, #112]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063fa:	4a1b      	ldr	r2, [pc, #108]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006400:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006404:	4a18      	ldr	r2, [pc, #96]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b00      	cmp	r3, #0
 8006414:	d016      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006416:	f7fd fbfb 	bl	8003c10 <HAL_GetTick>
 800641a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800641c:	e00b      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800641e:	f7fd fbf7 	bl	8003c10 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	f241 3288 	movw	r2, #5000	@ 0x1388
 800642c:	4293      	cmp	r3, r2
 800642e:	d902      	bls.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	74fb      	strb	r3, [r7, #19]
            break;
 8006434:	e006      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006436:	4b0c      	ldr	r3, [pc, #48]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800643c:	f003 0302 	and.w	r3, r3, #2
 8006440:	2b00      	cmp	r3, #0
 8006442:	d0ec      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006444:	7cfb      	ldrb	r3, [r7, #19]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10b      	bne.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800644a:	4b07      	ldr	r3, [pc, #28]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800644c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006450:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006458:	4903      	ldr	r1, [pc, #12]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800645a:	4313      	orrs	r3, r2
 800645c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006460:	e008      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006462:	7cfb      	ldrb	r3, [r7, #19]
 8006464:	74bb      	strb	r3, [r7, #18]
 8006466:	e005      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006468:	40021000 	.word	0x40021000
 800646c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006470:	7cfb      	ldrb	r3, [r7, #19]
 8006472:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006474:	7c7b      	ldrb	r3, [r7, #17]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d105      	bne.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800647a:	4ba7      	ldr	r3, [pc, #668]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800647c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800647e:	4aa6      	ldr	r2, [pc, #664]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006480:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006484:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00a      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006492:	4ba1      	ldr	r3, [pc, #644]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006498:	f023 0203 	bic.w	r2, r3, #3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	499d      	ldr	r1, [pc, #628]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00a      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064b4:	4b98      	ldr	r3, [pc, #608]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ba:	f023 020c 	bic.w	r2, r3, #12
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	4995      	ldr	r1, [pc, #596]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0304 	and.w	r3, r3, #4
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00a      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80064d6:	4b90      	ldr	r3, [pc, #576]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064dc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	498c      	ldr	r1, [pc, #560]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0308 	and.w	r3, r3, #8
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00a      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80064f8:	4b87      	ldr	r3, [pc, #540]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	4984      	ldr	r1, [pc, #528]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006508:	4313      	orrs	r3, r2
 800650a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0310 	and.w	r3, r3, #16
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00a      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800651a:	4b7f      	ldr	r3, [pc, #508]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800651c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006520:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	497b      	ldr	r1, [pc, #492]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800652a:	4313      	orrs	r3, r2
 800652c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0320 	and.w	r3, r3, #32
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00a      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800653c:	4b76      	ldr	r3, [pc, #472]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800653e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006542:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	4973      	ldr	r1, [pc, #460]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800654c:	4313      	orrs	r3, r2
 800654e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800655e:	4b6e      	ldr	r3, [pc, #440]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006564:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	69db      	ldr	r3, [r3, #28]
 800656c:	496a      	ldr	r1, [pc, #424]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800656e:	4313      	orrs	r3, r2
 8006570:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00a      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006580:	4b65      	ldr	r3, [pc, #404]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006586:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	4962      	ldr	r1, [pc, #392]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006590:	4313      	orrs	r3, r2
 8006592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00a      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065a2:	4b5d      	ldr	r3, [pc, #372]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b0:	4959      	ldr	r1, [pc, #356]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00a      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80065c4:	4b54      	ldr	r3, [pc, #336]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065ca:	f023 0203 	bic.w	r2, r3, #3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d2:	4951      	ldr	r1, [pc, #324]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065e6:	4b4c      	ldr	r3, [pc, #304]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f4:	4948      	ldr	r1, [pc, #288]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006604:	2b00      	cmp	r3, #0
 8006606:	d015      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006608:	4b43      	ldr	r3, [pc, #268]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800660a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800660e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006616:	4940      	ldr	r1, [pc, #256]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006618:	4313      	orrs	r3, r2
 800661a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006622:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006626:	d105      	bne.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006628:	4b3b      	ldr	r3, [pc, #236]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	4a3a      	ldr	r2, [pc, #232]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800662e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006632:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800663c:	2b00      	cmp	r3, #0
 800663e:	d015      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006640:	4b35      	ldr	r3, [pc, #212]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006646:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800664e:	4932      	ldr	r1, [pc, #200]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006650:	4313      	orrs	r3, r2
 8006652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800665a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800665e:	d105      	bne.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006660:	4b2d      	ldr	r3, [pc, #180]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	4a2c      	ldr	r2, [pc, #176]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006666:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800666a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d015      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006678:	4b27      	ldr	r3, [pc, #156]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800667a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800667e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006686:	4924      	ldr	r1, [pc, #144]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006688:	4313      	orrs	r3, r2
 800668a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006692:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006696:	d105      	bne.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006698:	4b1f      	ldr	r3, [pc, #124]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	4a1e      	ldr	r2, [pc, #120]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800669e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066a2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d015      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066b0:	4b19      	ldr	r3, [pc, #100]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066be:	4916      	ldr	r1, [pc, #88]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066ce:	d105      	bne.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066d0:	4b11      	ldr	r3, [pc, #68]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	4a10      	ldr	r2, [pc, #64]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066da:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d019      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f6:	4908      	ldr	r1, [pc, #32]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066f8:	4313      	orrs	r3, r2
 80066fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006702:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006706:	d109      	bne.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006708:	4b03      	ldr	r3, [pc, #12]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	4a02      	ldr	r2, [pc, #8]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800670e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006712:	60d3      	str	r3, [r2, #12]
 8006714:	e002      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006716:	bf00      	nop
 8006718:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d015      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006728:	4b29      	ldr	r3, [pc, #164]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800672a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800672e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006736:	4926      	ldr	r1, [pc, #152]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006738:	4313      	orrs	r3, r2
 800673a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006742:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006746:	d105      	bne.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006748:	4b21      	ldr	r3, [pc, #132]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	4a20      	ldr	r2, [pc, #128]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800674e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006752:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d015      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006760:	4b1b      	ldr	r3, [pc, #108]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006766:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800676e:	4918      	ldr	r1, [pc, #96]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006770:	4313      	orrs	r3, r2
 8006772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800677a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800677e:	d105      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006780:	4b13      	ldr	r3, [pc, #76]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	4a12      	ldr	r2, [pc, #72]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006786:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800678a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d015      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006798:	4b0d      	ldr	r3, [pc, #52]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800679a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800679e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067a6:	490a      	ldr	r1, [pc, #40]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067b6:	d105      	bne.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067b8:	4b05      	ldr	r3, [pc, #20]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	4a04      	ldr	r2, [pc, #16]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067c2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80067c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	40021000 	.word	0x40021000

080067d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e049      	b.n	800687a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d106      	bne.n	8006800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f841 	bl	8006882 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2202      	movs	r2, #2
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	3304      	adds	r3, #4
 8006810:	4619      	mov	r1, r3
 8006812:	4610      	mov	r0, r2
 8006814:	f000 fa30 	bl	8006c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800688a:	bf00      	nop
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
	...

08006898 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d001      	beq.n	80068b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e054      	b.n	800695a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2202      	movs	r2, #2
 80068b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68da      	ldr	r2, [r3, #12]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f042 0201 	orr.w	r2, r2, #1
 80068c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a26      	ldr	r2, [pc, #152]	@ (8006968 <HAL_TIM_Base_Start_IT+0xd0>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d022      	beq.n	8006918 <HAL_TIM_Base_Start_IT+0x80>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068da:	d01d      	beq.n	8006918 <HAL_TIM_Base_Start_IT+0x80>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a22      	ldr	r2, [pc, #136]	@ (800696c <HAL_TIM_Base_Start_IT+0xd4>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d018      	beq.n	8006918 <HAL_TIM_Base_Start_IT+0x80>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a21      	ldr	r2, [pc, #132]	@ (8006970 <HAL_TIM_Base_Start_IT+0xd8>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d013      	beq.n	8006918 <HAL_TIM_Base_Start_IT+0x80>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a1f      	ldr	r2, [pc, #124]	@ (8006974 <HAL_TIM_Base_Start_IT+0xdc>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d00e      	beq.n	8006918 <HAL_TIM_Base_Start_IT+0x80>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a1e      	ldr	r2, [pc, #120]	@ (8006978 <HAL_TIM_Base_Start_IT+0xe0>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d009      	beq.n	8006918 <HAL_TIM_Base_Start_IT+0x80>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a1c      	ldr	r2, [pc, #112]	@ (800697c <HAL_TIM_Base_Start_IT+0xe4>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d004      	beq.n	8006918 <HAL_TIM_Base_Start_IT+0x80>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a1b      	ldr	r2, [pc, #108]	@ (8006980 <HAL_TIM_Base_Start_IT+0xe8>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d115      	bne.n	8006944 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689a      	ldr	r2, [r3, #8]
 800691e:	4b19      	ldr	r3, [pc, #100]	@ (8006984 <HAL_TIM_Base_Start_IT+0xec>)
 8006920:	4013      	ands	r3, r2
 8006922:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2b06      	cmp	r3, #6
 8006928:	d015      	beq.n	8006956 <HAL_TIM_Base_Start_IT+0xbe>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006930:	d011      	beq.n	8006956 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f042 0201 	orr.w	r2, r2, #1
 8006940:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006942:	e008      	b.n	8006956 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0201 	orr.w	r2, r2, #1
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	e000      	b.n	8006958 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006956:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	40012c00 	.word	0x40012c00
 800696c:	40000400 	.word	0x40000400
 8006970:	40000800 	.word	0x40000800
 8006974:	40000c00 	.word	0x40000c00
 8006978:	40013400 	.word	0x40013400
 800697c:	40014000 	.word	0x40014000
 8006980:	40015000 	.word	0x40015000
 8006984:	00010007 	.word	0x00010007

08006988 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d020      	beq.n	80069ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f003 0302 	and.w	r3, r3, #2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d01b      	beq.n	80069ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f06f 0202 	mvn.w	r2, #2
 80069bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	f003 0303 	and.w	r3, r3, #3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f931 	bl	8006c3a <HAL_TIM_IC_CaptureCallback>
 80069d8:	e005      	b.n	80069e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f923 	bl	8006c26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 f934 	bl	8006c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f003 0304 	and.w	r3, r3, #4
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d020      	beq.n	8006a38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01b      	beq.n	8006a38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f06f 0204 	mvn.w	r2, #4
 8006a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f90b 	bl	8006c3a <HAL_TIM_IC_CaptureCallback>
 8006a24:	e005      	b.n	8006a32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f8fd 	bl	8006c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 f90e 	bl	8006c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f003 0308 	and.w	r3, r3, #8
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d020      	beq.n	8006a84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f003 0308 	and.w	r3, r3, #8
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d01b      	beq.n	8006a84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f06f 0208 	mvn.w	r2, #8
 8006a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2204      	movs	r2, #4
 8006a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	f003 0303 	and.w	r3, r3, #3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d003      	beq.n	8006a72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f8e5 	bl	8006c3a <HAL_TIM_IC_CaptureCallback>
 8006a70:	e005      	b.n	8006a7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f8d7 	bl	8006c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f8e8 	bl	8006c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f003 0310 	and.w	r3, r3, #16
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d020      	beq.n	8006ad0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f003 0310 	and.w	r3, r3, #16
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d01b      	beq.n	8006ad0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f06f 0210 	mvn.w	r2, #16
 8006aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2208      	movs	r2, #8
 8006aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f8bf 	bl	8006c3a <HAL_TIM_IC_CaptureCallback>
 8006abc:	e005      	b.n	8006aca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f8b1 	bl	8006c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f8c2 	bl	8006c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00c      	beq.n	8006af4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d007      	beq.n	8006af4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f06f 0201 	mvn.w	r2, #1
 8006aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7fc faf6 	bl	80030e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d104      	bne.n	8006b08 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00c      	beq.n	8006b22 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d007      	beq.n	8006b22 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f969 	bl	8006df4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00c      	beq.n	8006b46 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d007      	beq.n	8006b46 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f961 	bl	8006e08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00c      	beq.n	8006b6a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d007      	beq.n	8006b6a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f87c 	bl	8006c62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	f003 0320 	and.w	r3, r3, #32
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00c      	beq.n	8006b8e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d007      	beq.n	8006b8e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f06f 0220 	mvn.w	r2, #32
 8006b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f929 	bl	8006de0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00c      	beq.n	8006bb2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d007      	beq.n	8006bb2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f935 	bl	8006e1c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00c      	beq.n	8006bd6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d007      	beq.n	8006bd6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 f92d 	bl	8006e30 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00c      	beq.n	8006bfa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d007      	beq.n	8006bfa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f925 	bl	8006e44 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00c      	beq.n	8006c1e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d007      	beq.n	8006c1e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f91d 	bl	8006e58 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c1e:	bf00      	nop
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b083      	sub	sp, #12
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c2e:	bf00      	nop
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c42:	bf00      	nop
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c56:	bf00      	nop
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b083      	sub	sp, #12
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c6a:	bf00      	nop
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
	...

08006c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a4c      	ldr	r2, [pc, #304]	@ (8006dbc <TIM_Base_SetConfig+0x144>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d017      	beq.n	8006cc0 <TIM_Base_SetConfig+0x48>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c96:	d013      	beq.n	8006cc0 <TIM_Base_SetConfig+0x48>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a49      	ldr	r2, [pc, #292]	@ (8006dc0 <TIM_Base_SetConfig+0x148>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d00f      	beq.n	8006cc0 <TIM_Base_SetConfig+0x48>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a48      	ldr	r2, [pc, #288]	@ (8006dc4 <TIM_Base_SetConfig+0x14c>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d00b      	beq.n	8006cc0 <TIM_Base_SetConfig+0x48>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a47      	ldr	r2, [pc, #284]	@ (8006dc8 <TIM_Base_SetConfig+0x150>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d007      	beq.n	8006cc0 <TIM_Base_SetConfig+0x48>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a46      	ldr	r2, [pc, #280]	@ (8006dcc <TIM_Base_SetConfig+0x154>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d003      	beq.n	8006cc0 <TIM_Base_SetConfig+0x48>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a45      	ldr	r2, [pc, #276]	@ (8006dd0 <TIM_Base_SetConfig+0x158>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d108      	bne.n	8006cd2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a39      	ldr	r2, [pc, #228]	@ (8006dbc <TIM_Base_SetConfig+0x144>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d023      	beq.n	8006d22 <TIM_Base_SetConfig+0xaa>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ce0:	d01f      	beq.n	8006d22 <TIM_Base_SetConfig+0xaa>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a36      	ldr	r2, [pc, #216]	@ (8006dc0 <TIM_Base_SetConfig+0x148>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d01b      	beq.n	8006d22 <TIM_Base_SetConfig+0xaa>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a35      	ldr	r2, [pc, #212]	@ (8006dc4 <TIM_Base_SetConfig+0x14c>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d017      	beq.n	8006d22 <TIM_Base_SetConfig+0xaa>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a34      	ldr	r2, [pc, #208]	@ (8006dc8 <TIM_Base_SetConfig+0x150>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d013      	beq.n	8006d22 <TIM_Base_SetConfig+0xaa>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a33      	ldr	r2, [pc, #204]	@ (8006dcc <TIM_Base_SetConfig+0x154>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d00f      	beq.n	8006d22 <TIM_Base_SetConfig+0xaa>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a33      	ldr	r2, [pc, #204]	@ (8006dd4 <TIM_Base_SetConfig+0x15c>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d00b      	beq.n	8006d22 <TIM_Base_SetConfig+0xaa>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a32      	ldr	r2, [pc, #200]	@ (8006dd8 <TIM_Base_SetConfig+0x160>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d007      	beq.n	8006d22 <TIM_Base_SetConfig+0xaa>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a31      	ldr	r2, [pc, #196]	@ (8006ddc <TIM_Base_SetConfig+0x164>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d003      	beq.n	8006d22 <TIM_Base_SetConfig+0xaa>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a2c      	ldr	r2, [pc, #176]	@ (8006dd0 <TIM_Base_SetConfig+0x158>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d108      	bne.n	8006d34 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	689a      	ldr	r2, [r3, #8]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a18      	ldr	r2, [pc, #96]	@ (8006dbc <TIM_Base_SetConfig+0x144>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d013      	beq.n	8006d88 <TIM_Base_SetConfig+0x110>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a1a      	ldr	r2, [pc, #104]	@ (8006dcc <TIM_Base_SetConfig+0x154>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d00f      	beq.n	8006d88 <TIM_Base_SetConfig+0x110>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a1a      	ldr	r2, [pc, #104]	@ (8006dd4 <TIM_Base_SetConfig+0x15c>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d00b      	beq.n	8006d88 <TIM_Base_SetConfig+0x110>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a19      	ldr	r2, [pc, #100]	@ (8006dd8 <TIM_Base_SetConfig+0x160>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d007      	beq.n	8006d88 <TIM_Base_SetConfig+0x110>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a18      	ldr	r2, [pc, #96]	@ (8006ddc <TIM_Base_SetConfig+0x164>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d003      	beq.n	8006d88 <TIM_Base_SetConfig+0x110>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a13      	ldr	r2, [pc, #76]	@ (8006dd0 <TIM_Base_SetConfig+0x158>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d103      	bne.n	8006d90 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	691a      	ldr	r2, [r3, #16]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d105      	bne.n	8006dae <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	f023 0201 	bic.w	r2, r3, #1
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	611a      	str	r2, [r3, #16]
  }
}
 8006dae:	bf00      	nop
 8006db0:	3714      	adds	r7, #20
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	40012c00 	.word	0x40012c00
 8006dc0:	40000400 	.word	0x40000400
 8006dc4:	40000800 	.word	0x40000800
 8006dc8:	40000c00 	.word	0x40000c00
 8006dcc:	40013400 	.word	0x40013400
 8006dd0:	40015000 	.word	0x40015000
 8006dd4:	40014000 	.word	0x40014000
 8006dd8:	40014400 	.word	0x40014400
 8006ddc:	40014800 	.word	0x40014800

08006de0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e042      	b.n	8006f04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d106      	bne.n	8006e96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7fc fd07 	bl	80038a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2224      	movs	r2, #36	@ 0x24
 8006e9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f022 0201 	bic.w	r2, r2, #1
 8006eac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d002      	beq.n	8006ebc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f001 f806 	bl	8007ec8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 fd07 	bl	80078d0 <UART_SetConfig>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d101      	bne.n	8006ecc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e01b      	b.n	8006f04 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	685a      	ldr	r2, [r3, #4]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006eda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	689a      	ldr	r2, [r3, #8]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006eea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f042 0201 	orr.w	r2, r2, #1
 8006efa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f001 f885 	bl	800800c <UART_CheckIdleState>
 8006f02:	4603      	mov	r3, r0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b08a      	sub	sp, #40	@ 0x28
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	4613      	mov	r3, r2
 8006f18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f20:	2b20      	cmp	r3, #32
 8006f22:	d167      	bne.n	8006ff4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d002      	beq.n	8006f30 <HAL_UART_Transmit_DMA+0x24>
 8006f2a:	88fb      	ldrh	r3, [r7, #6]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d101      	bne.n	8006f34 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e060      	b.n	8006ff6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	68ba      	ldr	r2, [r7, #8]
 8006f38:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	88fa      	ldrh	r2, [r7, #6]
 8006f3e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	88fa      	ldrh	r2, [r7, #6]
 8006f46:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2221      	movs	r2, #33	@ 0x21
 8006f56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d028      	beq.n	8006fb4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f66:	4a26      	ldr	r2, [pc, #152]	@ (8007000 <HAL_UART_Transmit_DMA+0xf4>)
 8006f68:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f6e:	4a25      	ldr	r2, [pc, #148]	@ (8007004 <HAL_UART_Transmit_DMA+0xf8>)
 8006f70:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f76:	4a24      	ldr	r2, [pc, #144]	@ (8007008 <HAL_UART_Transmit_DMA+0xfc>)
 8006f78:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f7e:	2200      	movs	r2, #0
 8006f80:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	3328      	adds	r3, #40	@ 0x28
 8006f92:	461a      	mov	r2, r3
 8006f94:	88fb      	ldrh	r3, [r7, #6]
 8006f96:	f7fc ffeb 	bl	8003f70 <HAL_DMA_Start_IT>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d009      	beq.n	8006fb4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2210      	movs	r2, #16
 8006fa4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2220      	movs	r2, #32
 8006fac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e020      	b.n	8006ff6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2240      	movs	r2, #64	@ 0x40
 8006fba:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3308      	adds	r3, #8
 8006fc2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	e853 3f00 	ldrex	r3, [r3]
 8006fca:	613b      	str	r3, [r7, #16]
   return(result);
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	3308      	adds	r3, #8
 8006fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fdc:	623a      	str	r2, [r7, #32]
 8006fde:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe0:	69f9      	ldr	r1, [r7, #28]
 8006fe2:	6a3a      	ldr	r2, [r7, #32]
 8006fe4:	e841 2300 	strex	r3, r2, [r1]
 8006fe8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1e5      	bne.n	8006fbc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	e000      	b.n	8006ff6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006ff4:	2302      	movs	r3, #2
  }
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3728      	adds	r7, #40	@ 0x28
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	080084d7 	.word	0x080084d7
 8007004:	08008571 	.word	0x08008571
 8007008:	080086f7 	.word	0x080086f7

0800700c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b08a      	sub	sp, #40	@ 0x28
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	4613      	mov	r3, r2
 8007018:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007020:	2b20      	cmp	r3, #32
 8007022:	d137      	bne.n	8007094 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d002      	beq.n	8007030 <HAL_UART_Receive_DMA+0x24>
 800702a:	88fb      	ldrh	r3, [r7, #6]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d101      	bne.n	8007034 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e030      	b.n	8007096 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a18      	ldr	r2, [pc, #96]	@ (80070a0 <HAL_UART_Receive_DMA+0x94>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d01f      	beq.n	8007084 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d018      	beq.n	8007084 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	e853 3f00 	ldrex	r3, [r3]
 800705e:	613b      	str	r3, [r7, #16]
   return(result);
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007066:	627b      	str	r3, [r7, #36]	@ 0x24
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	461a      	mov	r2, r3
 800706e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007070:	623b      	str	r3, [r7, #32]
 8007072:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007074:	69f9      	ldr	r1, [r7, #28]
 8007076:	6a3a      	ldr	r2, [r7, #32]
 8007078:	e841 2300 	strex	r3, r2, [r1]
 800707c:	61bb      	str	r3, [r7, #24]
   return(result);
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1e6      	bne.n	8007052 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007084:	88fb      	ldrh	r3, [r7, #6]
 8007086:	461a      	mov	r2, r3
 8007088:	68b9      	ldr	r1, [r7, #8]
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f001 f8d6 	bl	800823c <UART_Start_Receive_DMA>
 8007090:	4603      	mov	r3, r0
 8007092:	e000      	b.n	8007096 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007094:	2302      	movs	r3, #2
  }
}
 8007096:	4618      	mov	r0, r3
 8007098:	3728      	adds	r7, #40	@ 0x28
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	40008000 	.word	0x40008000

080070a4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b090      	sub	sp, #64	@ 0x40
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070ba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070c6:	2b80      	cmp	r3, #128	@ 0x80
 80070c8:	d139      	bne.n	800713e <HAL_UART_DMAStop+0x9a>
 80070ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070cc:	2b21      	cmp	r3, #33	@ 0x21
 80070ce:	d136      	bne.n	800713e <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3308      	adds	r3, #8
 80070d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	e853 3f00 	ldrex	r3, [r3]
 80070de:	61fb      	str	r3, [r7, #28]
   return(result);
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	3308      	adds	r3, #8
 80070ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070f8:	e841 2300 	strex	r3, r2, [r1]
 80070fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1e5      	bne.n	80070d0 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007108:	2b00      	cmp	r3, #0
 800710a:	d015      	beq.n	8007138 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007110:	4618      	mov	r0, r3
 8007112:	f7fc ffa8 	bl	8004066 <HAL_DMA_Abort>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00d      	beq.n	8007138 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007120:	4618      	mov	r0, r3
 8007122:	f7fd f90f 	bl	8004344 <HAL_DMA_GetError>
 8007126:	4603      	mov	r3, r0
 8007128:	2b20      	cmp	r3, #32
 800712a:	d105      	bne.n	8007138 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2210      	movs	r2, #16
 8007130:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e047      	b.n	80071c8 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f001 f925 	bl	8008388 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007148:	2b40      	cmp	r3, #64	@ 0x40
 800714a:	d13c      	bne.n	80071c6 <HAL_UART_DMAStop+0x122>
 800714c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714e:	2b22      	cmp	r3, #34	@ 0x22
 8007150:	d139      	bne.n	80071c6 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	3308      	adds	r3, #8
 8007158:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	e853 3f00 	ldrex	r3, [r3]
 8007160:	60bb      	str	r3, [r7, #8]
   return(result);
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007168:	633b      	str	r3, [r7, #48]	@ 0x30
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	3308      	adds	r3, #8
 8007170:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007172:	61ba      	str	r2, [r7, #24]
 8007174:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007176:	6979      	ldr	r1, [r7, #20]
 8007178:	69ba      	ldr	r2, [r7, #24]
 800717a:	e841 2300 	strex	r3, r2, [r1]
 800717e:	613b      	str	r3, [r7, #16]
   return(result);
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1e5      	bne.n	8007152 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800718c:	2b00      	cmp	r3, #0
 800718e:	d017      	beq.n	80071c0 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007196:	4618      	mov	r0, r3
 8007198:	f7fc ff65 	bl	8004066 <HAL_DMA_Abort>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00e      	beq.n	80071c0 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7fd f8cb 	bl	8004344 <HAL_DMA_GetError>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b20      	cmp	r3, #32
 80071b2:	d105      	bne.n	80071c0 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2210      	movs	r2, #16
 80071b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80071bc:	2303      	movs	r3, #3
 80071be:	e003      	b.n	80071c8 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f001 f922 	bl	800840a <UART_EndRxTransfer>
  }

  return HAL_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3740      	adds	r7, #64	@ 0x40
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b0ba      	sub	sp, #232	@ 0xe8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80071f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80071fa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80071fe:	4013      	ands	r3, r2
 8007200:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007204:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007208:	2b00      	cmp	r3, #0
 800720a:	d11b      	bne.n	8007244 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800720c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007210:	f003 0320 	and.w	r3, r3, #32
 8007214:	2b00      	cmp	r3, #0
 8007216:	d015      	beq.n	8007244 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800721c:	f003 0320 	and.w	r3, r3, #32
 8007220:	2b00      	cmp	r3, #0
 8007222:	d105      	bne.n	8007230 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007228:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d009      	beq.n	8007244 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007234:	2b00      	cmp	r3, #0
 8007236:	f000 8300 	beq.w	800783a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	4798      	blx	r3
      }
      return;
 8007242:	e2fa      	b.n	800783a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007244:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 8123 	beq.w	8007494 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800724e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007252:	4b8d      	ldr	r3, [pc, #564]	@ (8007488 <HAL_UART_IRQHandler+0x2b8>)
 8007254:	4013      	ands	r3, r2
 8007256:	2b00      	cmp	r3, #0
 8007258:	d106      	bne.n	8007268 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800725a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800725e:	4b8b      	ldr	r3, [pc, #556]	@ (800748c <HAL_UART_IRQHandler+0x2bc>)
 8007260:	4013      	ands	r3, r2
 8007262:	2b00      	cmp	r3, #0
 8007264:	f000 8116 	beq.w	8007494 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	2b00      	cmp	r3, #0
 8007272:	d011      	beq.n	8007298 <HAL_UART_IRQHandler+0xc8>
 8007274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00b      	beq.n	8007298 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2201      	movs	r2, #1
 8007286:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800728e:	f043 0201 	orr.w	r2, r3, #1
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800729c:	f003 0302 	and.w	r3, r3, #2
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d011      	beq.n	80072c8 <HAL_UART_IRQHandler+0xf8>
 80072a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00b      	beq.n	80072c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2202      	movs	r2, #2
 80072b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072be:	f043 0204 	orr.w	r2, r3, #4
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072cc:	f003 0304 	and.w	r3, r3, #4
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d011      	beq.n	80072f8 <HAL_UART_IRQHandler+0x128>
 80072d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072d8:	f003 0301 	and.w	r3, r3, #1
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00b      	beq.n	80072f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2204      	movs	r2, #4
 80072e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ee:	f043 0202 	orr.w	r2, r3, #2
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80072f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072fc:	f003 0308 	and.w	r3, r3, #8
 8007300:	2b00      	cmp	r3, #0
 8007302:	d017      	beq.n	8007334 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007308:	f003 0320 	and.w	r3, r3, #32
 800730c:	2b00      	cmp	r3, #0
 800730e:	d105      	bne.n	800731c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007310:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007314:	4b5c      	ldr	r3, [pc, #368]	@ (8007488 <HAL_UART_IRQHandler+0x2b8>)
 8007316:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00b      	beq.n	8007334 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2208      	movs	r2, #8
 8007322:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800732a:	f043 0208 	orr.w	r2, r3, #8
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007338:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800733c:	2b00      	cmp	r3, #0
 800733e:	d012      	beq.n	8007366 <HAL_UART_IRQHandler+0x196>
 8007340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007344:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00c      	beq.n	8007366 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007354:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800735c:	f043 0220 	orr.w	r2, r3, #32
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 8266 	beq.w	800783e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007376:	f003 0320 	and.w	r3, r3, #32
 800737a:	2b00      	cmp	r3, #0
 800737c:	d013      	beq.n	80073a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800737e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007382:	f003 0320 	and.w	r3, r3, #32
 8007386:	2b00      	cmp	r3, #0
 8007388:	d105      	bne.n	8007396 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800738a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800738e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d007      	beq.n	80073a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800739a:	2b00      	cmp	r3, #0
 800739c:	d003      	beq.n	80073a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ba:	2b40      	cmp	r3, #64	@ 0x40
 80073bc:	d005      	beq.n	80073ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80073be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d054      	beq.n	8007474 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f001 f81d 	bl	800840a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073da:	2b40      	cmp	r3, #64	@ 0x40
 80073dc:	d146      	bne.n	800746c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	3308      	adds	r3, #8
 80073e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80073ec:	e853 3f00 	ldrex	r3, [r3]
 80073f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80073f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	3308      	adds	r3, #8
 8007406:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800740a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800740e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007412:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007416:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800741a:	e841 2300 	strex	r3, r2, [r1]
 800741e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007422:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1d9      	bne.n	80073de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007430:	2b00      	cmp	r3, #0
 8007432:	d017      	beq.n	8007464 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800743a:	4a15      	ldr	r2, [pc, #84]	@ (8007490 <HAL_UART_IRQHandler+0x2c0>)
 800743c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007444:	4618      	mov	r0, r3
 8007446:	f7fc fe67 	bl	8004118 <HAL_DMA_Abort_IT>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d019      	beq.n	8007484 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800745e:	4610      	mov	r0, r2
 8007460:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007462:	e00f      	b.n	8007484 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fa1d 	bl	80078a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800746a:	e00b      	b.n	8007484 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fa19 	bl	80078a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007472:	e007      	b.n	8007484 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fa15 	bl	80078a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007482:	e1dc      	b.n	800783e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007484:	bf00      	nop
    return;
 8007486:	e1da      	b.n	800783e <HAL_UART_IRQHandler+0x66e>
 8007488:	10000001 	.word	0x10000001
 800748c:	04000120 	.word	0x04000120
 8007490:	08008777 	.word	0x08008777

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007498:	2b01      	cmp	r3, #1
 800749a:	f040 8170 	bne.w	800777e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800749e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074a2:	f003 0310 	and.w	r3, r3, #16
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f000 8169 	beq.w	800777e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80074ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074b0:	f003 0310 	and.w	r3, r3, #16
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f000 8162 	beq.w	800777e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2210      	movs	r2, #16
 80074c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074cc:	2b40      	cmp	r3, #64	@ 0x40
 80074ce:	f040 80d8 	bne.w	8007682 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80074e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 80af 	beq.w	8007648 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80074f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80074f4:	429a      	cmp	r2, r3
 80074f6:	f080 80a7 	bcs.w	8007648 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007500:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 0320 	and.w	r3, r3, #32
 8007512:	2b00      	cmp	r3, #0
 8007514:	f040 8087 	bne.w	8007626 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007520:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007524:	e853 3f00 	ldrex	r3, [r3]
 8007528:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800752c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007530:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007534:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	461a      	mov	r2, r3
 800753e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007542:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007546:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800754e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007552:	e841 2300 	strex	r3, r2, [r1]
 8007556:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800755a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1da      	bne.n	8007518 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	3308      	adds	r3, #8
 8007568:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800756c:	e853 3f00 	ldrex	r3, [r3]
 8007570:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007572:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007574:	f023 0301 	bic.w	r3, r3, #1
 8007578:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	3308      	adds	r3, #8
 8007582:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007586:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800758a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800758e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007592:	e841 2300 	strex	r3, r2, [r1]
 8007596:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007598:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1e1      	bne.n	8007562 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3308      	adds	r3, #8
 80075a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80075a8:	e853 3f00 	ldrex	r3, [r3]
 80075ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80075ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80075b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	3308      	adds	r3, #8
 80075be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80075c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80075c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80075c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80075ca:	e841 2300 	strex	r3, r2, [r1]
 80075ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80075d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1e3      	bne.n	800759e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2220      	movs	r2, #32
 80075da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075ec:	e853 3f00 	ldrex	r3, [r3]
 80075f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80075f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075f4:	f023 0310 	bic.w	r3, r3, #16
 80075f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	461a      	mov	r2, r3
 8007602:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007606:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007608:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800760c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800760e:	e841 2300 	strex	r3, r2, [r1]
 8007612:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007614:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e4      	bne.n	80075e4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007620:	4618      	mov	r0, r3
 8007622:	f7fc fd20 	bl	8004066 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2202      	movs	r2, #2
 800762a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007638:	b29b      	uxth	r3, r3
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	b29b      	uxth	r3, r3
 800763e:	4619      	mov	r1, r3
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 f939 	bl	80078b8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007646:	e0fc      	b.n	8007842 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800764e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007652:	429a      	cmp	r2, r3
 8007654:	f040 80f5 	bne.w	8007842 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0320 	and.w	r3, r3, #32
 8007666:	2b20      	cmp	r3, #32
 8007668:	f040 80eb 	bne.w	8007842 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2202      	movs	r2, #2
 8007670:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007678:	4619      	mov	r1, r3
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f91c 	bl	80078b8 <HAL_UARTEx_RxEventCallback>
      return;
 8007680:	e0df      	b.n	8007842 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800768e:	b29b      	uxth	r3, r3
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800769c:	b29b      	uxth	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f000 80d1 	beq.w	8007846 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80076a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 80cc 	beq.w	8007846 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b6:	e853 3f00 	ldrex	r3, [r3]
 80076ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80076bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	461a      	mov	r2, r3
 80076cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80076d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80076d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80076d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076d8:	e841 2300 	strex	r3, r2, [r1]
 80076dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d1e4      	bne.n	80076ae <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	3308      	adds	r3, #8
 80076ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ee:	e853 3f00 	ldrex	r3, [r3]
 80076f2:	623b      	str	r3, [r7, #32]
   return(result);
 80076f4:	6a3b      	ldr	r3, [r7, #32]
 80076f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076fa:	f023 0301 	bic.w	r3, r3, #1
 80076fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	3308      	adds	r3, #8
 8007708:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800770c:	633a      	str	r2, [r7, #48]	@ 0x30
 800770e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007710:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007712:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007714:	e841 2300 	strex	r3, r2, [r1]
 8007718:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800771a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1e1      	bne.n	80076e4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2220      	movs	r2, #32
 8007724:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	e853 3f00 	ldrex	r3, [r3]
 8007740:	60fb      	str	r3, [r7, #12]
   return(result);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f023 0310 	bic.w	r3, r3, #16
 8007748:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	461a      	mov	r2, r3
 8007752:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007756:	61fb      	str	r3, [r7, #28]
 8007758:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775a:	69b9      	ldr	r1, [r7, #24]
 800775c:	69fa      	ldr	r2, [r7, #28]
 800775e:	e841 2300 	strex	r3, r2, [r1]
 8007762:	617b      	str	r3, [r7, #20]
   return(result);
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1e4      	bne.n	8007734 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2202      	movs	r2, #2
 800776e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007770:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007774:	4619      	mov	r1, r3
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f89e 	bl	80078b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800777c:	e063      	b.n	8007846 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800777e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007782:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00e      	beq.n	80077a8 <HAL_UART_IRQHandler+0x5d8>
 800778a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800778e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007792:	2b00      	cmp	r3, #0
 8007794:	d008      	beq.n	80077a8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800779e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f001 f825 	bl	80087f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80077a6:	e051      	b.n	800784c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80077a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d014      	beq.n	80077de <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80077b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d105      	bne.n	80077cc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80077c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d008      	beq.n	80077de <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d03a      	beq.n	800784a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	4798      	blx	r3
    }
    return;
 80077dc:	e035      	b.n	800784a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80077de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d009      	beq.n	80077fe <HAL_UART_IRQHandler+0x62e>
 80077ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d003      	beq.n	80077fe <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 ffcf 	bl	800879a <UART_EndTransmit_IT>
    return;
 80077fc:	e026      	b.n	800784c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80077fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007802:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007806:	2b00      	cmp	r3, #0
 8007808:	d009      	beq.n	800781e <HAL_UART_IRQHandler+0x64e>
 800780a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800780e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007812:	2b00      	cmp	r3, #0
 8007814:	d003      	beq.n	800781e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fffe 	bl	8008818 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800781c:	e016      	b.n	800784c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800781e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007822:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007826:	2b00      	cmp	r3, #0
 8007828:	d010      	beq.n	800784c <HAL_UART_IRQHandler+0x67c>
 800782a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800782e:	2b00      	cmp	r3, #0
 8007830:	da0c      	bge.n	800784c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 ffe6 	bl	8008804 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007838:	e008      	b.n	800784c <HAL_UART_IRQHandler+0x67c>
      return;
 800783a:	bf00      	nop
 800783c:	e006      	b.n	800784c <HAL_UART_IRQHandler+0x67c>
    return;
 800783e:	bf00      	nop
 8007840:	e004      	b.n	800784c <HAL_UART_IRQHandler+0x67c>
      return;
 8007842:	bf00      	nop
 8007844:	e002      	b.n	800784c <HAL_UART_IRQHandler+0x67c>
      return;
 8007846:	bf00      	nop
 8007848:	e000      	b.n	800784c <HAL_UART_IRQHandler+0x67c>
    return;
 800784a:	bf00      	nop
  }
}
 800784c:	37e8      	adds	r7, #232	@ 0xe8
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop

08007854 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	460b      	mov	r3, r1
 80078c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078d4:	b08c      	sub	sp, #48	@ 0x30
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	689a      	ldr	r2, [r3, #8]
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	431a      	orrs	r2, r3
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	695b      	ldr	r3, [r3, #20]
 80078ee:	431a      	orrs	r2, r3
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	69db      	ldr	r3, [r3, #28]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	4baa      	ldr	r3, [pc, #680]	@ (8007ba8 <UART_SetConfig+0x2d8>)
 8007900:	4013      	ands	r3, r2
 8007902:	697a      	ldr	r2, [r7, #20]
 8007904:	6812      	ldr	r2, [r2, #0]
 8007906:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007908:	430b      	orrs	r3, r1
 800790a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	68da      	ldr	r2, [r3, #12]
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	430a      	orrs	r2, r1
 8007920:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a9f      	ldr	r2, [pc, #636]	@ (8007bac <UART_SetConfig+0x2dc>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d004      	beq.n	800793c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007938:	4313      	orrs	r3, r2
 800793a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007946:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800794a:	697a      	ldr	r2, [r7, #20]
 800794c:	6812      	ldr	r2, [r2, #0]
 800794e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007950:	430b      	orrs	r3, r1
 8007952:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800795a:	f023 010f 	bic.w	r1, r3, #15
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	430a      	orrs	r2, r1
 8007968:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a90      	ldr	r2, [pc, #576]	@ (8007bb0 <UART_SetConfig+0x2e0>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d125      	bne.n	80079c0 <UART_SetConfig+0xf0>
 8007974:	4b8f      	ldr	r3, [pc, #572]	@ (8007bb4 <UART_SetConfig+0x2e4>)
 8007976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800797a:	f003 0303 	and.w	r3, r3, #3
 800797e:	2b03      	cmp	r3, #3
 8007980:	d81a      	bhi.n	80079b8 <UART_SetConfig+0xe8>
 8007982:	a201      	add	r2, pc, #4	@ (adr r2, 8007988 <UART_SetConfig+0xb8>)
 8007984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007988:	08007999 	.word	0x08007999
 800798c:	080079a9 	.word	0x080079a9
 8007990:	080079a1 	.word	0x080079a1
 8007994:	080079b1 	.word	0x080079b1
 8007998:	2301      	movs	r3, #1
 800799a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800799e:	e116      	b.n	8007bce <UART_SetConfig+0x2fe>
 80079a0:	2302      	movs	r3, #2
 80079a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079a6:	e112      	b.n	8007bce <UART_SetConfig+0x2fe>
 80079a8:	2304      	movs	r3, #4
 80079aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079ae:	e10e      	b.n	8007bce <UART_SetConfig+0x2fe>
 80079b0:	2308      	movs	r3, #8
 80079b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079b6:	e10a      	b.n	8007bce <UART_SetConfig+0x2fe>
 80079b8:	2310      	movs	r3, #16
 80079ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079be:	e106      	b.n	8007bce <UART_SetConfig+0x2fe>
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a7c      	ldr	r2, [pc, #496]	@ (8007bb8 <UART_SetConfig+0x2e8>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d138      	bne.n	8007a3c <UART_SetConfig+0x16c>
 80079ca:	4b7a      	ldr	r3, [pc, #488]	@ (8007bb4 <UART_SetConfig+0x2e4>)
 80079cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079d0:	f003 030c 	and.w	r3, r3, #12
 80079d4:	2b0c      	cmp	r3, #12
 80079d6:	d82d      	bhi.n	8007a34 <UART_SetConfig+0x164>
 80079d8:	a201      	add	r2, pc, #4	@ (adr r2, 80079e0 <UART_SetConfig+0x110>)
 80079da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079de:	bf00      	nop
 80079e0:	08007a15 	.word	0x08007a15
 80079e4:	08007a35 	.word	0x08007a35
 80079e8:	08007a35 	.word	0x08007a35
 80079ec:	08007a35 	.word	0x08007a35
 80079f0:	08007a25 	.word	0x08007a25
 80079f4:	08007a35 	.word	0x08007a35
 80079f8:	08007a35 	.word	0x08007a35
 80079fc:	08007a35 	.word	0x08007a35
 8007a00:	08007a1d 	.word	0x08007a1d
 8007a04:	08007a35 	.word	0x08007a35
 8007a08:	08007a35 	.word	0x08007a35
 8007a0c:	08007a35 	.word	0x08007a35
 8007a10:	08007a2d 	.word	0x08007a2d
 8007a14:	2300      	movs	r3, #0
 8007a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a1a:	e0d8      	b.n	8007bce <UART_SetConfig+0x2fe>
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a22:	e0d4      	b.n	8007bce <UART_SetConfig+0x2fe>
 8007a24:	2304      	movs	r3, #4
 8007a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a2a:	e0d0      	b.n	8007bce <UART_SetConfig+0x2fe>
 8007a2c:	2308      	movs	r3, #8
 8007a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a32:	e0cc      	b.n	8007bce <UART_SetConfig+0x2fe>
 8007a34:	2310      	movs	r3, #16
 8007a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a3a:	e0c8      	b.n	8007bce <UART_SetConfig+0x2fe>
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a5e      	ldr	r2, [pc, #376]	@ (8007bbc <UART_SetConfig+0x2ec>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d125      	bne.n	8007a92 <UART_SetConfig+0x1c2>
 8007a46:	4b5b      	ldr	r3, [pc, #364]	@ (8007bb4 <UART_SetConfig+0x2e4>)
 8007a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a4c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007a50:	2b30      	cmp	r3, #48	@ 0x30
 8007a52:	d016      	beq.n	8007a82 <UART_SetConfig+0x1b2>
 8007a54:	2b30      	cmp	r3, #48	@ 0x30
 8007a56:	d818      	bhi.n	8007a8a <UART_SetConfig+0x1ba>
 8007a58:	2b20      	cmp	r3, #32
 8007a5a:	d00a      	beq.n	8007a72 <UART_SetConfig+0x1a2>
 8007a5c:	2b20      	cmp	r3, #32
 8007a5e:	d814      	bhi.n	8007a8a <UART_SetConfig+0x1ba>
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <UART_SetConfig+0x19a>
 8007a64:	2b10      	cmp	r3, #16
 8007a66:	d008      	beq.n	8007a7a <UART_SetConfig+0x1aa>
 8007a68:	e00f      	b.n	8007a8a <UART_SetConfig+0x1ba>
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a70:	e0ad      	b.n	8007bce <UART_SetConfig+0x2fe>
 8007a72:	2302      	movs	r3, #2
 8007a74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a78:	e0a9      	b.n	8007bce <UART_SetConfig+0x2fe>
 8007a7a:	2304      	movs	r3, #4
 8007a7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a80:	e0a5      	b.n	8007bce <UART_SetConfig+0x2fe>
 8007a82:	2308      	movs	r3, #8
 8007a84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a88:	e0a1      	b.n	8007bce <UART_SetConfig+0x2fe>
 8007a8a:	2310      	movs	r3, #16
 8007a8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a90:	e09d      	b.n	8007bce <UART_SetConfig+0x2fe>
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a4a      	ldr	r2, [pc, #296]	@ (8007bc0 <UART_SetConfig+0x2f0>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d125      	bne.n	8007ae8 <UART_SetConfig+0x218>
 8007a9c:	4b45      	ldr	r3, [pc, #276]	@ (8007bb4 <UART_SetConfig+0x2e4>)
 8007a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aa2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007aa6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007aa8:	d016      	beq.n	8007ad8 <UART_SetConfig+0x208>
 8007aaa:	2bc0      	cmp	r3, #192	@ 0xc0
 8007aac:	d818      	bhi.n	8007ae0 <UART_SetConfig+0x210>
 8007aae:	2b80      	cmp	r3, #128	@ 0x80
 8007ab0:	d00a      	beq.n	8007ac8 <UART_SetConfig+0x1f8>
 8007ab2:	2b80      	cmp	r3, #128	@ 0x80
 8007ab4:	d814      	bhi.n	8007ae0 <UART_SetConfig+0x210>
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d002      	beq.n	8007ac0 <UART_SetConfig+0x1f0>
 8007aba:	2b40      	cmp	r3, #64	@ 0x40
 8007abc:	d008      	beq.n	8007ad0 <UART_SetConfig+0x200>
 8007abe:	e00f      	b.n	8007ae0 <UART_SetConfig+0x210>
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ac6:	e082      	b.n	8007bce <UART_SetConfig+0x2fe>
 8007ac8:	2302      	movs	r3, #2
 8007aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ace:	e07e      	b.n	8007bce <UART_SetConfig+0x2fe>
 8007ad0:	2304      	movs	r3, #4
 8007ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ad6:	e07a      	b.n	8007bce <UART_SetConfig+0x2fe>
 8007ad8:	2308      	movs	r3, #8
 8007ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ade:	e076      	b.n	8007bce <UART_SetConfig+0x2fe>
 8007ae0:	2310      	movs	r3, #16
 8007ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ae6:	e072      	b.n	8007bce <UART_SetConfig+0x2fe>
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a35      	ldr	r2, [pc, #212]	@ (8007bc4 <UART_SetConfig+0x2f4>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d12a      	bne.n	8007b48 <UART_SetConfig+0x278>
 8007af2:	4b30      	ldr	r3, [pc, #192]	@ (8007bb4 <UART_SetConfig+0x2e4>)
 8007af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007af8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007afc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b00:	d01a      	beq.n	8007b38 <UART_SetConfig+0x268>
 8007b02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b06:	d81b      	bhi.n	8007b40 <UART_SetConfig+0x270>
 8007b08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b0c:	d00c      	beq.n	8007b28 <UART_SetConfig+0x258>
 8007b0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b12:	d815      	bhi.n	8007b40 <UART_SetConfig+0x270>
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d003      	beq.n	8007b20 <UART_SetConfig+0x250>
 8007b18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b1c:	d008      	beq.n	8007b30 <UART_SetConfig+0x260>
 8007b1e:	e00f      	b.n	8007b40 <UART_SetConfig+0x270>
 8007b20:	2300      	movs	r3, #0
 8007b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b26:	e052      	b.n	8007bce <UART_SetConfig+0x2fe>
 8007b28:	2302      	movs	r3, #2
 8007b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b2e:	e04e      	b.n	8007bce <UART_SetConfig+0x2fe>
 8007b30:	2304      	movs	r3, #4
 8007b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b36:	e04a      	b.n	8007bce <UART_SetConfig+0x2fe>
 8007b38:	2308      	movs	r3, #8
 8007b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b3e:	e046      	b.n	8007bce <UART_SetConfig+0x2fe>
 8007b40:	2310      	movs	r3, #16
 8007b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b46:	e042      	b.n	8007bce <UART_SetConfig+0x2fe>
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a17      	ldr	r2, [pc, #92]	@ (8007bac <UART_SetConfig+0x2dc>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d13a      	bne.n	8007bc8 <UART_SetConfig+0x2f8>
 8007b52:	4b18      	ldr	r3, [pc, #96]	@ (8007bb4 <UART_SetConfig+0x2e4>)
 8007b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b58:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007b5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b60:	d01a      	beq.n	8007b98 <UART_SetConfig+0x2c8>
 8007b62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b66:	d81b      	bhi.n	8007ba0 <UART_SetConfig+0x2d0>
 8007b68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b6c:	d00c      	beq.n	8007b88 <UART_SetConfig+0x2b8>
 8007b6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b72:	d815      	bhi.n	8007ba0 <UART_SetConfig+0x2d0>
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d003      	beq.n	8007b80 <UART_SetConfig+0x2b0>
 8007b78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b7c:	d008      	beq.n	8007b90 <UART_SetConfig+0x2c0>
 8007b7e:	e00f      	b.n	8007ba0 <UART_SetConfig+0x2d0>
 8007b80:	2300      	movs	r3, #0
 8007b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b86:	e022      	b.n	8007bce <UART_SetConfig+0x2fe>
 8007b88:	2302      	movs	r3, #2
 8007b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b8e:	e01e      	b.n	8007bce <UART_SetConfig+0x2fe>
 8007b90:	2304      	movs	r3, #4
 8007b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b96:	e01a      	b.n	8007bce <UART_SetConfig+0x2fe>
 8007b98:	2308      	movs	r3, #8
 8007b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b9e:	e016      	b.n	8007bce <UART_SetConfig+0x2fe>
 8007ba0:	2310      	movs	r3, #16
 8007ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ba6:	e012      	b.n	8007bce <UART_SetConfig+0x2fe>
 8007ba8:	cfff69f3 	.word	0xcfff69f3
 8007bac:	40008000 	.word	0x40008000
 8007bb0:	40013800 	.word	0x40013800
 8007bb4:	40021000 	.word	0x40021000
 8007bb8:	40004400 	.word	0x40004400
 8007bbc:	40004800 	.word	0x40004800
 8007bc0:	40004c00 	.word	0x40004c00
 8007bc4:	40005000 	.word	0x40005000
 8007bc8:	2310      	movs	r3, #16
 8007bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4aae      	ldr	r2, [pc, #696]	@ (8007e8c <UART_SetConfig+0x5bc>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	f040 8097 	bne.w	8007d08 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007bda:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007bde:	2b08      	cmp	r3, #8
 8007be0:	d823      	bhi.n	8007c2a <UART_SetConfig+0x35a>
 8007be2:	a201      	add	r2, pc, #4	@ (adr r2, 8007be8 <UART_SetConfig+0x318>)
 8007be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be8:	08007c0d 	.word	0x08007c0d
 8007bec:	08007c2b 	.word	0x08007c2b
 8007bf0:	08007c15 	.word	0x08007c15
 8007bf4:	08007c2b 	.word	0x08007c2b
 8007bf8:	08007c1b 	.word	0x08007c1b
 8007bfc:	08007c2b 	.word	0x08007c2b
 8007c00:	08007c2b 	.word	0x08007c2b
 8007c04:	08007c2b 	.word	0x08007c2b
 8007c08:	08007c23 	.word	0x08007c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c0c:	f7fe faf0 	bl	80061f0 <HAL_RCC_GetPCLK1Freq>
 8007c10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c12:	e010      	b.n	8007c36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c14:	4b9e      	ldr	r3, [pc, #632]	@ (8007e90 <UART_SetConfig+0x5c0>)
 8007c16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c18:	e00d      	b.n	8007c36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c1a:	f7fe fa7b 	bl	8006114 <HAL_RCC_GetSysClockFreq>
 8007c1e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c20:	e009      	b.n	8007c36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c28:	e005      	b.n	8007c36 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007c34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f000 8130 	beq.w	8007e9e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c42:	4a94      	ldr	r2, [pc, #592]	@ (8007e94 <UART_SetConfig+0x5c4>)
 8007c44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c48:	461a      	mov	r2, r3
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c50:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	685a      	ldr	r2, [r3, #4]
 8007c56:	4613      	mov	r3, r2
 8007c58:	005b      	lsls	r3, r3, #1
 8007c5a:	4413      	add	r3, r2
 8007c5c:	69ba      	ldr	r2, [r7, #24]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d305      	bcc.n	8007c6e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c68:	69ba      	ldr	r2, [r7, #24]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d903      	bls.n	8007c76 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007c74:	e113      	b.n	8007e9e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c78:	2200      	movs	r2, #0
 8007c7a:	60bb      	str	r3, [r7, #8]
 8007c7c:	60fa      	str	r2, [r7, #12]
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c82:	4a84      	ldr	r2, [pc, #528]	@ (8007e94 <UART_SetConfig+0x5c4>)
 8007c84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	603b      	str	r3, [r7, #0]
 8007c8e:	607a      	str	r2, [r7, #4]
 8007c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c98:	f7f9 f836 	bl	8000d08 <__aeabi_uldivmod>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	f04f 0200 	mov.w	r2, #0
 8007ca8:	f04f 0300 	mov.w	r3, #0
 8007cac:	020b      	lsls	r3, r1, #8
 8007cae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007cb2:	0202      	lsls	r2, r0, #8
 8007cb4:	6979      	ldr	r1, [r7, #20]
 8007cb6:	6849      	ldr	r1, [r1, #4]
 8007cb8:	0849      	lsrs	r1, r1, #1
 8007cba:	2000      	movs	r0, #0
 8007cbc:	460c      	mov	r4, r1
 8007cbe:	4605      	mov	r5, r0
 8007cc0:	eb12 0804 	adds.w	r8, r2, r4
 8007cc4:	eb43 0905 	adc.w	r9, r3, r5
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	469a      	mov	sl, r3
 8007cd0:	4693      	mov	fp, r2
 8007cd2:	4652      	mov	r2, sl
 8007cd4:	465b      	mov	r3, fp
 8007cd6:	4640      	mov	r0, r8
 8007cd8:	4649      	mov	r1, r9
 8007cda:	f7f9 f815 	bl	8000d08 <__aeabi_uldivmod>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ce6:	6a3b      	ldr	r3, [r7, #32]
 8007ce8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007cec:	d308      	bcc.n	8007d00 <UART_SetConfig+0x430>
 8007cee:	6a3b      	ldr	r3, [r7, #32]
 8007cf0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cf4:	d204      	bcs.n	8007d00 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	6a3a      	ldr	r2, [r7, #32]
 8007cfc:	60da      	str	r2, [r3, #12]
 8007cfe:	e0ce      	b.n	8007e9e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007d06:	e0ca      	b.n	8007e9e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	69db      	ldr	r3, [r3, #28]
 8007d0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d10:	d166      	bne.n	8007de0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007d12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007d16:	2b08      	cmp	r3, #8
 8007d18:	d827      	bhi.n	8007d6a <UART_SetConfig+0x49a>
 8007d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d20 <UART_SetConfig+0x450>)
 8007d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d20:	08007d45 	.word	0x08007d45
 8007d24:	08007d4d 	.word	0x08007d4d
 8007d28:	08007d55 	.word	0x08007d55
 8007d2c:	08007d6b 	.word	0x08007d6b
 8007d30:	08007d5b 	.word	0x08007d5b
 8007d34:	08007d6b 	.word	0x08007d6b
 8007d38:	08007d6b 	.word	0x08007d6b
 8007d3c:	08007d6b 	.word	0x08007d6b
 8007d40:	08007d63 	.word	0x08007d63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d44:	f7fe fa54 	bl	80061f0 <HAL_RCC_GetPCLK1Freq>
 8007d48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d4a:	e014      	b.n	8007d76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d4c:	f7fe fa66 	bl	800621c <HAL_RCC_GetPCLK2Freq>
 8007d50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d52:	e010      	b.n	8007d76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d54:	4b4e      	ldr	r3, [pc, #312]	@ (8007e90 <UART_SetConfig+0x5c0>)
 8007d56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d58:	e00d      	b.n	8007d76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d5a:	f7fe f9db 	bl	8006114 <HAL_RCC_GetSysClockFreq>
 8007d5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d60:	e009      	b.n	8007d76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d68:	e005      	b.n	8007d76 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007d74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f000 8090 	beq.w	8007e9e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d82:	4a44      	ldr	r2, [pc, #272]	@ (8007e94 <UART_SetConfig+0x5c4>)
 8007d84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d88:	461a      	mov	r2, r3
 8007d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d90:	005a      	lsls	r2, r3, #1
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	085b      	lsrs	r3, r3, #1
 8007d98:	441a      	add	r2, r3
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007da4:	6a3b      	ldr	r3, [r7, #32]
 8007da6:	2b0f      	cmp	r3, #15
 8007da8:	d916      	bls.n	8007dd8 <UART_SetConfig+0x508>
 8007daa:	6a3b      	ldr	r3, [r7, #32]
 8007dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007db0:	d212      	bcs.n	8007dd8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007db2:	6a3b      	ldr	r3, [r7, #32]
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	f023 030f 	bic.w	r3, r3, #15
 8007dba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007dbc:	6a3b      	ldr	r3, [r7, #32]
 8007dbe:	085b      	lsrs	r3, r3, #1
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	f003 0307 	and.w	r3, r3, #7
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	8bfb      	ldrh	r3, [r7, #30]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	8bfa      	ldrh	r2, [r7, #30]
 8007dd4:	60da      	str	r2, [r3, #12]
 8007dd6:	e062      	b.n	8007e9e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007dde:	e05e      	b.n	8007e9e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007de0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007de4:	2b08      	cmp	r3, #8
 8007de6:	d828      	bhi.n	8007e3a <UART_SetConfig+0x56a>
 8007de8:	a201      	add	r2, pc, #4	@ (adr r2, 8007df0 <UART_SetConfig+0x520>)
 8007dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dee:	bf00      	nop
 8007df0:	08007e15 	.word	0x08007e15
 8007df4:	08007e1d 	.word	0x08007e1d
 8007df8:	08007e25 	.word	0x08007e25
 8007dfc:	08007e3b 	.word	0x08007e3b
 8007e00:	08007e2b 	.word	0x08007e2b
 8007e04:	08007e3b 	.word	0x08007e3b
 8007e08:	08007e3b 	.word	0x08007e3b
 8007e0c:	08007e3b 	.word	0x08007e3b
 8007e10:	08007e33 	.word	0x08007e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e14:	f7fe f9ec 	bl	80061f0 <HAL_RCC_GetPCLK1Freq>
 8007e18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e1a:	e014      	b.n	8007e46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e1c:	f7fe f9fe 	bl	800621c <HAL_RCC_GetPCLK2Freq>
 8007e20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e22:	e010      	b.n	8007e46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e24:	4b1a      	ldr	r3, [pc, #104]	@ (8007e90 <UART_SetConfig+0x5c0>)
 8007e26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e28:	e00d      	b.n	8007e46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e2a:	f7fe f973 	bl	8006114 <HAL_RCC_GetSysClockFreq>
 8007e2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e30:	e009      	b.n	8007e46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e38:	e005      	b.n	8007e46 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007e44:	bf00      	nop
    }

    if (pclk != 0U)
 8007e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d028      	beq.n	8007e9e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e50:	4a10      	ldr	r2, [pc, #64]	@ (8007e94 <UART_SetConfig+0x5c4>)
 8007e52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e56:	461a      	mov	r2, r3
 8007e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	085b      	lsrs	r3, r3, #1
 8007e64:	441a      	add	r2, r3
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e70:	6a3b      	ldr	r3, [r7, #32]
 8007e72:	2b0f      	cmp	r3, #15
 8007e74:	d910      	bls.n	8007e98 <UART_SetConfig+0x5c8>
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e7c:	d20c      	bcs.n	8007e98 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e7e:	6a3b      	ldr	r3, [r7, #32]
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	60da      	str	r2, [r3, #12]
 8007e88:	e009      	b.n	8007e9e <UART_SetConfig+0x5ce>
 8007e8a:	bf00      	nop
 8007e8c:	40008000 	.word	0x40008000
 8007e90:	00f42400 	.word	0x00f42400
 8007e94:	0801fa24 	.word	0x0801fa24
      }
      else
      {
        ret = HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007eba:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3730      	adds	r7, #48	@ 0x30
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007ec8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed4:	f003 0308 	and.w	r3, r3, #8
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00a      	beq.n	8007ef2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ef6:	f003 0301 	and.w	r3, r3, #1
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00a      	beq.n	8007f14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	430a      	orrs	r2, r1
 8007f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f18:	f003 0302 	and.w	r3, r3, #2
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00a      	beq.n	8007f36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	430a      	orrs	r2, r1
 8007f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f3a:	f003 0304 	and.w	r3, r3, #4
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00a      	beq.n	8007f58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	430a      	orrs	r2, r1
 8007f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f5c:	f003 0310 	and.w	r3, r3, #16
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00a      	beq.n	8007f7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	430a      	orrs	r2, r1
 8007f78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f7e:	f003 0320 	and.w	r3, r3, #32
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00a      	beq.n	8007f9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	430a      	orrs	r2, r1
 8007f9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d01a      	beq.n	8007fde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fc6:	d10a      	bne.n	8007fde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00a      	beq.n	8008000 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	430a      	orrs	r2, r1
 8007ffe:	605a      	str	r2, [r3, #4]
  }
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b098      	sub	sp, #96	@ 0x60
 8008010:	af02      	add	r7, sp, #8
 8008012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800801c:	f7fb fdf8 	bl	8003c10 <HAL_GetTick>
 8008020:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0308 	and.w	r3, r3, #8
 800802c:	2b08      	cmp	r3, #8
 800802e:	d12f      	bne.n	8008090 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008030:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008034:	9300      	str	r3, [sp, #0]
 8008036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008038:	2200      	movs	r2, #0
 800803a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f88e 	bl	8008160 <UART_WaitOnFlagUntilTimeout>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d022      	beq.n	8008090 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008052:	e853 3f00 	ldrex	r3, [r3]
 8008056:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800805a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800805e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	461a      	mov	r2, r3
 8008066:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008068:	647b      	str	r3, [r7, #68]	@ 0x44
 800806a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800806e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008070:	e841 2300 	strex	r3, r2, [r1]
 8008074:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1e6      	bne.n	800804a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2220      	movs	r2, #32
 8008080:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800808c:	2303      	movs	r3, #3
 800808e:	e063      	b.n	8008158 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 0304 	and.w	r3, r3, #4
 800809a:	2b04      	cmp	r3, #4
 800809c:	d149      	bne.n	8008132 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800809e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080a2:	9300      	str	r3, [sp, #0]
 80080a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080a6:	2200      	movs	r2, #0
 80080a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f857 	bl	8008160 <UART_WaitOnFlagUntilTimeout>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d03c      	beq.n	8008132 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c0:	e853 3f00 	ldrex	r3, [r3]
 80080c4:	623b      	str	r3, [r7, #32]
   return(result);
 80080c6:	6a3b      	ldr	r3, [r7, #32]
 80080c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	461a      	mov	r2, r3
 80080d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80080d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080de:	e841 2300 	strex	r3, r2, [r1]
 80080e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1e6      	bne.n	80080b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	3308      	adds	r3, #8
 80080f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	e853 3f00 	ldrex	r3, [r3]
 80080f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f023 0301 	bic.w	r3, r3, #1
 8008100:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	3308      	adds	r3, #8
 8008108:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800810a:	61fa      	str	r2, [r7, #28]
 800810c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810e:	69b9      	ldr	r1, [r7, #24]
 8008110:	69fa      	ldr	r2, [r7, #28]
 8008112:	e841 2300 	strex	r3, r2, [r1]
 8008116:	617b      	str	r3, [r7, #20]
   return(result);
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1e5      	bne.n	80080ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2220      	movs	r2, #32
 8008122:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e012      	b.n	8008158 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2220      	movs	r2, #32
 8008136:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2220      	movs	r2, #32
 800813e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3758      	adds	r7, #88	@ 0x58
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	603b      	str	r3, [r7, #0]
 800816c:	4613      	mov	r3, r2
 800816e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008170:	e04f      	b.n	8008212 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008178:	d04b      	beq.n	8008212 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800817a:	f7fb fd49 	bl	8003c10 <HAL_GetTick>
 800817e:	4602      	mov	r2, r0
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	69ba      	ldr	r2, [r7, #24]
 8008186:	429a      	cmp	r2, r3
 8008188:	d302      	bcc.n	8008190 <UART_WaitOnFlagUntilTimeout+0x30>
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d101      	bne.n	8008194 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008190:	2303      	movs	r3, #3
 8008192:	e04e      	b.n	8008232 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 0304 	and.w	r3, r3, #4
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d037      	beq.n	8008212 <UART_WaitOnFlagUntilTimeout+0xb2>
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	2b80      	cmp	r3, #128	@ 0x80
 80081a6:	d034      	beq.n	8008212 <UART_WaitOnFlagUntilTimeout+0xb2>
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2b40      	cmp	r3, #64	@ 0x40
 80081ac:	d031      	beq.n	8008212 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	69db      	ldr	r3, [r3, #28]
 80081b4:	f003 0308 	and.w	r3, r3, #8
 80081b8:	2b08      	cmp	r3, #8
 80081ba:	d110      	bne.n	80081de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2208      	movs	r2, #8
 80081c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f000 f920 	bl	800840a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2208      	movs	r2, #8
 80081ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e029      	b.n	8008232 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	69db      	ldr	r3, [r3, #28]
 80081e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081ec:	d111      	bne.n	8008212 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80081f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f000 f906 	bl	800840a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2220      	movs	r2, #32
 8008202:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e00f      	b.n	8008232 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	69da      	ldr	r2, [r3, #28]
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	4013      	ands	r3, r2
 800821c:	68ba      	ldr	r2, [r7, #8]
 800821e:	429a      	cmp	r2, r3
 8008220:	bf0c      	ite	eq
 8008222:	2301      	moveq	r3, #1
 8008224:	2300      	movne	r3, #0
 8008226:	b2db      	uxtb	r3, r3
 8008228:	461a      	mov	r2, r3
 800822a:	79fb      	ldrb	r3, [r7, #7]
 800822c:	429a      	cmp	r2, r3
 800822e:	d0a0      	beq.n	8008172 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
	...

0800823c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b096      	sub	sp, #88	@ 0x58
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	4613      	mov	r3, r2
 8008248:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	88fa      	ldrh	r2, [r7, #6]
 8008254:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2200      	movs	r2, #0
 800825c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2222      	movs	r2, #34	@ 0x22
 8008264:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800826e:	2b00      	cmp	r3, #0
 8008270:	d02d      	beq.n	80082ce <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008278:	4a40      	ldr	r2, [pc, #256]	@ (800837c <UART_Start_Receive_DMA+0x140>)
 800827a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008282:	4a3f      	ldr	r2, [pc, #252]	@ (8008380 <UART_Start_Receive_DMA+0x144>)
 8008284:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800828c:	4a3d      	ldr	r2, [pc, #244]	@ (8008384 <UART_Start_Receive_DMA+0x148>)
 800828e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008296:	2200      	movs	r2, #0
 8008298:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3324      	adds	r3, #36	@ 0x24
 80082a6:	4619      	mov	r1, r3
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082ac:	461a      	mov	r2, r3
 80082ae:	88fb      	ldrh	r3, [r7, #6]
 80082b0:	f7fb fe5e 	bl	8003f70 <HAL_DMA_Start_IT>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d009      	beq.n	80082ce <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2210      	movs	r2, #16
 80082be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2220      	movs	r2, #32
 80082c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e051      	b.n	8008372 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d018      	beq.n	8008308 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082de:	e853 3f00 	ldrex	r3, [r3]
 80082e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80082e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	461a      	mov	r2, r3
 80082f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082f6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80082fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082fc:	e841 2300 	strex	r3, r2, [r1]
 8008300:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008302:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1e6      	bne.n	80082d6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	3308      	adds	r3, #8
 800830e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008312:	e853 3f00 	ldrex	r3, [r3]
 8008316:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800831a:	f043 0301 	orr.w	r3, r3, #1
 800831e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	3308      	adds	r3, #8
 8008326:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008328:	637a      	str	r2, [r7, #52]	@ 0x34
 800832a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800832e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008330:	e841 2300 	strex	r3, r2, [r1]
 8008334:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1e5      	bne.n	8008308 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3308      	adds	r3, #8
 8008342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	e853 3f00 	ldrex	r3, [r3]
 800834a:	613b      	str	r3, [r7, #16]
   return(result);
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008352:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	3308      	adds	r3, #8
 800835a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800835c:	623a      	str	r2, [r7, #32]
 800835e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008360:	69f9      	ldr	r1, [r7, #28]
 8008362:	6a3a      	ldr	r2, [r7, #32]
 8008364:	e841 2300 	strex	r3, r2, [r1]
 8008368:	61bb      	str	r3, [r7, #24]
   return(result);
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1e5      	bne.n	800833c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3758      	adds	r7, #88	@ 0x58
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	0800858d 	.word	0x0800858d
 8008380:	080086b9 	.word	0x080086b9
 8008384:	080086f7 	.word	0x080086f7

08008388 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008388:	b480      	push	{r7}
 800838a:	b08f      	sub	sp, #60	@ 0x3c
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008396:	6a3b      	ldr	r3, [r7, #32]
 8008398:	e853 3f00 	ldrex	r3, [r3]
 800839c:	61fb      	str	r3, [r7, #28]
   return(result);
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80083a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	461a      	mov	r2, r3
 80083ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083b0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083b6:	e841 2300 	strex	r3, r2, [r1]
 80083ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1e6      	bne.n	8008390 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	3308      	adds	r3, #8
 80083c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	e853 3f00 	ldrex	r3, [r3]
 80083d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80083d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	3308      	adds	r3, #8
 80083e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083e2:	61ba      	str	r2, [r7, #24]
 80083e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e6:	6979      	ldr	r1, [r7, #20]
 80083e8:	69ba      	ldr	r2, [r7, #24]
 80083ea:	e841 2300 	strex	r3, r2, [r1]
 80083ee:	613b      	str	r3, [r7, #16]
   return(result);
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1e5      	bne.n	80083c2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2220      	movs	r2, #32
 80083fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80083fe:	bf00      	nop
 8008400:	373c      	adds	r7, #60	@ 0x3c
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800840a:	b480      	push	{r7}
 800840c:	b095      	sub	sp, #84	@ 0x54
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800841a:	e853 3f00 	ldrex	r3, [r3]
 800841e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008422:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008426:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	461a      	mov	r2, r3
 800842e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008430:	643b      	str	r3, [r7, #64]	@ 0x40
 8008432:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008434:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008436:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008438:	e841 2300 	strex	r3, r2, [r1]
 800843c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800843e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1e6      	bne.n	8008412 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	3308      	adds	r3, #8
 800844a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	e853 3f00 	ldrex	r3, [r3]
 8008452:	61fb      	str	r3, [r7, #28]
   return(result);
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800845a:	f023 0301 	bic.w	r3, r3, #1
 800845e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	3308      	adds	r3, #8
 8008466:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008468:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800846a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800846e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008470:	e841 2300 	strex	r3, r2, [r1]
 8008474:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1e3      	bne.n	8008444 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008480:	2b01      	cmp	r3, #1
 8008482:	d118      	bne.n	80084b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	e853 3f00 	ldrex	r3, [r3]
 8008490:	60bb      	str	r3, [r7, #8]
   return(result);
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	f023 0310 	bic.w	r3, r3, #16
 8008498:	647b      	str	r3, [r7, #68]	@ 0x44
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	461a      	mov	r2, r3
 80084a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084a2:	61bb      	str	r3, [r7, #24]
 80084a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a6:	6979      	ldr	r1, [r7, #20]
 80084a8:	69ba      	ldr	r2, [r7, #24]
 80084aa:	e841 2300 	strex	r3, r2, [r1]
 80084ae:	613b      	str	r3, [r7, #16]
   return(result);
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1e6      	bne.n	8008484 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2220      	movs	r2, #32
 80084ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80084ca:	bf00      	nop
 80084cc:	3754      	adds	r7, #84	@ 0x54
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b090      	sub	sp, #64	@ 0x40
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 0320 	and.w	r3, r3, #32
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d137      	bne.n	8008562 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80084f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084f4:	2200      	movs	r2, #0
 80084f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	3308      	adds	r3, #8
 8008500:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008504:	e853 3f00 	ldrex	r3, [r3]
 8008508:	623b      	str	r3, [r7, #32]
   return(result);
 800850a:	6a3b      	ldr	r3, [r7, #32]
 800850c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008510:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	3308      	adds	r3, #8
 8008518:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800851a:	633a      	str	r2, [r7, #48]	@ 0x30
 800851c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008520:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008522:	e841 2300 	strex	r3, r2, [r1]
 8008526:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1e5      	bne.n	80084fa <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800852e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	e853 3f00 	ldrex	r3, [r3]
 800853a:	60fb      	str	r3, [r7, #12]
   return(result);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008542:	637b      	str	r3, [r7, #52]	@ 0x34
 8008544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	461a      	mov	r2, r3
 800854a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800854c:	61fb      	str	r3, [r7, #28]
 800854e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008550:	69b9      	ldr	r1, [r7, #24]
 8008552:	69fa      	ldr	r2, [r7, #28]
 8008554:	e841 2300 	strex	r3, r2, [r1]
 8008558:	617b      	str	r3, [r7, #20]
   return(result);
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d1e6      	bne.n	800852e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008560:	e002      	b.n	8008568 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008562:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008564:	f7ff f976 	bl	8007854 <HAL_UART_TxCpltCallback>
}
 8008568:	bf00      	nop
 800856a:	3740      	adds	r7, #64	@ 0x40
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800857c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f7ff f972 	bl	8007868 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008584:	bf00      	nop
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b09c      	sub	sp, #112	@ 0x70
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008598:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 0320 	and.w	r3, r3, #32
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d171      	bne.n	800868c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80085a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085aa:	2200      	movs	r2, #0
 80085ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085b8:	e853 3f00 	ldrex	r3, [r3]
 80085bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80085be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80085c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	461a      	mov	r2, r3
 80085cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80085ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80085d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80085d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80085d6:	e841 2300 	strex	r3, r2, [r1]
 80085da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80085dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1e6      	bne.n	80085b0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3308      	adds	r3, #8
 80085e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ec:	e853 3f00 	ldrex	r3, [r3]
 80085f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80085f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085f4:	f023 0301 	bic.w	r3, r3, #1
 80085f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80085fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	3308      	adds	r3, #8
 8008600:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008602:	647a      	str	r2, [r7, #68]	@ 0x44
 8008604:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008606:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008608:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800860a:	e841 2300 	strex	r3, r2, [r1]
 800860e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1e5      	bne.n	80085e2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008616:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	3308      	adds	r3, #8
 800861c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008620:	e853 3f00 	ldrex	r3, [r3]
 8008624:	623b      	str	r3, [r7, #32]
   return(result);
 8008626:	6a3b      	ldr	r3, [r7, #32]
 8008628:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800862c:	663b      	str	r3, [r7, #96]	@ 0x60
 800862e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	3308      	adds	r3, #8
 8008634:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008636:	633a      	str	r2, [r7, #48]	@ 0x30
 8008638:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800863c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800863e:	e841 2300 	strex	r3, r2, [r1]
 8008642:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1e5      	bne.n	8008616 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800864a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800864c:	2220      	movs	r2, #32
 800864e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008652:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008654:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008656:	2b01      	cmp	r3, #1
 8008658:	d118      	bne.n	800868c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800865a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	e853 3f00 	ldrex	r3, [r3]
 8008666:	60fb      	str	r3, [r7, #12]
   return(result);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f023 0310 	bic.w	r3, r3, #16
 800866e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008670:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	461a      	mov	r2, r3
 8008676:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008678:	61fb      	str	r3, [r7, #28]
 800867a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867c:	69b9      	ldr	r1, [r7, #24]
 800867e:	69fa      	ldr	r2, [r7, #28]
 8008680:	e841 2300 	strex	r3, r2, [r1]
 8008684:	617b      	str	r3, [r7, #20]
   return(result);
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1e6      	bne.n	800865a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800868c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800868e:	2200      	movs	r2, #0
 8008690:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008692:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008694:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008696:	2b01      	cmp	r3, #1
 8008698:	d107      	bne.n	80086aa <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800869a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800869c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80086a0:	4619      	mov	r1, r3
 80086a2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80086a4:	f7ff f908 	bl	80078b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086a8:	e002      	b.n	80086b0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80086aa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80086ac:	f7ff f8e6 	bl	800787c <HAL_UART_RxCpltCallback>
}
 80086b0:	bf00      	nop
 80086b2:	3770      	adds	r7, #112	@ 0x70
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086c4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2201      	movs	r2, #1
 80086ca:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d109      	bne.n	80086e8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80086da:	085b      	lsrs	r3, r3, #1
 80086dc:	b29b      	uxth	r3, r3
 80086de:	4619      	mov	r1, r3
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f7ff f8e9 	bl	80078b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086e6:	e002      	b.n	80086ee <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f7ff f8d1 	bl	8007890 <HAL_UART_RxHalfCpltCallback>
}
 80086ee:	bf00      	nop
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b086      	sub	sp, #24
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008702:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800870a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008712:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800871e:	2b80      	cmp	r3, #128	@ 0x80
 8008720:	d109      	bne.n	8008736 <UART_DMAError+0x40>
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	2b21      	cmp	r3, #33	@ 0x21
 8008726:	d106      	bne.n	8008736 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	2200      	movs	r2, #0
 800872c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008730:	6978      	ldr	r0, [r7, #20]
 8008732:	f7ff fe29 	bl	8008388 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008740:	2b40      	cmp	r3, #64	@ 0x40
 8008742:	d109      	bne.n	8008758 <UART_DMAError+0x62>
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2b22      	cmp	r3, #34	@ 0x22
 8008748:	d106      	bne.n	8008758 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	2200      	movs	r2, #0
 800874e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008752:	6978      	ldr	r0, [r7, #20]
 8008754:	f7ff fe59 	bl	800840a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800875e:	f043 0210 	orr.w	r2, r3, #16
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008768:	6978      	ldr	r0, [r7, #20]
 800876a:	f7ff f89b 	bl	80078a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800876e:	bf00      	nop
 8008770:	3718      	adds	r7, #24
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008782:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2200      	movs	r2, #0
 8008788:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f7ff f889 	bl	80078a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008792:	bf00      	nop
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b088      	sub	sp, #32
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	e853 3f00 	ldrex	r3, [r3]
 80087ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087b6:	61fb      	str	r3, [r7, #28]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	461a      	mov	r2, r3
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	61bb      	str	r3, [r7, #24]
 80087c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c4:	6979      	ldr	r1, [r7, #20]
 80087c6:	69ba      	ldr	r2, [r7, #24]
 80087c8:	e841 2300 	strex	r3, r2, [r1]
 80087cc:	613b      	str	r3, [r7, #16]
   return(result);
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1e6      	bne.n	80087a2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2220      	movs	r2, #32
 80087d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f7ff f836 	bl	8007854 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087e8:	bf00      	nop
 80087ea:	3720      	adds	r7, #32
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80087f8:	bf00      	nop
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800880c:	bf00      	nop
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800883a:	2b01      	cmp	r3, #1
 800883c:	d101      	bne.n	8008842 <HAL_UARTEx_DisableFifoMode+0x16>
 800883e:	2302      	movs	r3, #2
 8008840:	e027      	b.n	8008892 <HAL_UARTEx_DisableFifoMode+0x66>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2201      	movs	r2, #1
 8008846:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2224      	movs	r2, #36	@ 0x24
 800884e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f022 0201 	bic.w	r2, r2, #1
 8008868:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008870:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2220      	movs	r2, #32
 8008884:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3714      	adds	r7, #20
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr

0800889e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b084      	sub	sp, #16
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d101      	bne.n	80088b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80088b2:	2302      	movs	r3, #2
 80088b4:	e02d      	b.n	8008912 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2201      	movs	r2, #1
 80088ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2224      	movs	r2, #36	@ 0x24
 80088c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f022 0201 	bic.w	r2, r2, #1
 80088dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	683a      	ldr	r2, [r7, #0]
 80088ee:	430a      	orrs	r2, r1
 80088f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 f850 	bl	8008998 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2220      	movs	r2, #32
 8008904:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b084      	sub	sp, #16
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
 8008922:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800892a:	2b01      	cmp	r3, #1
 800892c:	d101      	bne.n	8008932 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800892e:	2302      	movs	r3, #2
 8008930:	e02d      	b.n	800898e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2224      	movs	r2, #36	@ 0x24
 800893e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f022 0201 	bic.w	r2, r2, #1
 8008958:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	683a      	ldr	r2, [r7, #0]
 800896a:	430a      	orrs	r2, r1
 800896c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f812 	bl	8008998 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2220      	movs	r2, #32
 8008980:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
	...

08008998 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008998:	b480      	push	{r7}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d108      	bne.n	80089ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80089b8:	e031      	b.n	8008a1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80089ba:	2308      	movs	r3, #8
 80089bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80089be:	2308      	movs	r3, #8
 80089c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	0e5b      	lsrs	r3, r3, #25
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	f003 0307 	and.w	r3, r3, #7
 80089d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	0f5b      	lsrs	r3, r3, #29
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	f003 0307 	and.w	r3, r3, #7
 80089e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089e2:	7bbb      	ldrb	r3, [r7, #14]
 80089e4:	7b3a      	ldrb	r2, [r7, #12]
 80089e6:	4911      	ldr	r1, [pc, #68]	@ (8008a2c <UARTEx_SetNbDataToProcess+0x94>)
 80089e8:	5c8a      	ldrb	r2, [r1, r2]
 80089ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80089ee:	7b3a      	ldrb	r2, [r7, #12]
 80089f0:	490f      	ldr	r1, [pc, #60]	@ (8008a30 <UARTEx_SetNbDataToProcess+0x98>)
 80089f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
 8008a02:	7b7a      	ldrb	r2, [r7, #13]
 8008a04:	4909      	ldr	r1, [pc, #36]	@ (8008a2c <UARTEx_SetNbDataToProcess+0x94>)
 8008a06:	5c8a      	ldrb	r2, [r1, r2]
 8008a08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a0c:	7b7a      	ldrb	r2, [r7, #13]
 8008a0e:	4908      	ldr	r1, [pc, #32]	@ (8008a30 <UARTEx_SetNbDataToProcess+0x98>)
 8008a10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a12:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008a1e:	bf00      	nop
 8008a20:	3714      	adds	r7, #20
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	0801fa3c 	.word	0x0801fa3c
 8008a30:	0801fa44 	.word	0x0801fa44

08008a34 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b088      	sub	sp, #32
 8008a38:	af04      	add	r7, sp, #16
 8008a3a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8008a3c:	2364      	movs	r3, #100	@ 0x64
 8008a3e:	9302      	str	r3, [sp, #8]
 8008a40:	2301      	movs	r3, #1
 8008a42:	9301      	str	r3, [sp, #4]
 8008a44:	f107 030f 	add.w	r3, r7, #15
 8008a48:	9300      	str	r3, [sp, #0]
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	2275      	movs	r2, #117	@ 0x75
 8008a4e:	21d0      	movs	r1, #208	@ 0xd0
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f7fc f89f 	bl	8004b94 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8008a56:	7bfb      	ldrb	r3, [r7, #15]
 8008a58:	2b68      	cmp	r3, #104	@ 0x68
 8008a5a:	d13d      	bne.n	8008ad8 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8008a60:	2364      	movs	r3, #100	@ 0x64
 8008a62:	9302      	str	r3, [sp, #8]
 8008a64:	2301      	movs	r3, #1
 8008a66:	9301      	str	r3, [sp, #4]
 8008a68:	f107 030e 	add.w	r3, r7, #14
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	2301      	movs	r3, #1
 8008a70:	226b      	movs	r2, #107	@ 0x6b
 8008a72:	21d0      	movs	r1, #208	@ 0xd0
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f7fb ff79 	bl	800496c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8008a7a:	2307      	movs	r3, #7
 8008a7c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8008a7e:	2364      	movs	r3, #100	@ 0x64
 8008a80:	9302      	str	r3, [sp, #8]
 8008a82:	2301      	movs	r3, #1
 8008a84:	9301      	str	r3, [sp, #4]
 8008a86:	f107 030e 	add.w	r3, r7, #14
 8008a8a:	9300      	str	r3, [sp, #0]
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	2219      	movs	r2, #25
 8008a90:	21d0      	movs	r1, #208	@ 0xd0
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f7fb ff6a 	bl	800496c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8008a9c:	2364      	movs	r3, #100	@ 0x64
 8008a9e:	9302      	str	r3, [sp, #8]
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	9301      	str	r3, [sp, #4]
 8008aa4:	f107 030e 	add.w	r3, r7, #14
 8008aa8:	9300      	str	r3, [sp, #0]
 8008aaa:	2301      	movs	r3, #1
 8008aac:	221c      	movs	r2, #28
 8008aae:	21d0      	movs	r1, #208	@ 0xd0
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f7fb ff5b 	bl	800496c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8008aba:	2364      	movs	r3, #100	@ 0x64
 8008abc:	9302      	str	r3, [sp, #8]
 8008abe:	2301      	movs	r3, #1
 8008ac0:	9301      	str	r3, [sp, #4]
 8008ac2:	f107 030e 	add.w	r3, r7, #14
 8008ac6:	9300      	str	r3, [sp, #0]
 8008ac8:	2301      	movs	r3, #1
 8008aca:	221b      	movs	r2, #27
 8008acc:	21d0      	movs	r1, #208	@ 0xd0
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f7fb ff4c 	bl	800496c <HAL_I2C_Mem_Write>
        return 0;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	e000      	b.n	8008ada <MPU6050_Init+0xa6>
    }
    return 1;
 8008ad8:	2301      	movs	r3, #1
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	0000      	movs	r0, r0
 8008ae4:	0000      	movs	r0, r0
	...

08008ae8 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8008ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008aec:	b094      	sub	sp, #80	@ 0x50
 8008aee:	af04      	add	r7, sp, #16
 8008af0:	6078      	str	r0, [r7, #4]
 8008af2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8008af4:	2364      	movs	r3, #100	@ 0x64
 8008af6:	9302      	str	r3, [sp, #8]
 8008af8:	230e      	movs	r3, #14
 8008afa:	9301      	str	r3, [sp, #4]
 8008afc:	f107 0308 	add.w	r3, r7, #8
 8008b00:	9300      	str	r3, [sp, #0]
 8008b02:	2301      	movs	r3, #1
 8008b04:	223b      	movs	r2, #59	@ 0x3b
 8008b06:	21d0      	movs	r1, #208	@ 0xd0
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f7fc f843 	bl	8004b94 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8008b0e:	7a3b      	ldrb	r3, [r7, #8]
 8008b10:	021b      	lsls	r3, r3, #8
 8008b12:	b21a      	sxth	r2, r3
 8008b14:	7a7b      	ldrb	r3, [r7, #9]
 8008b16:	b21b      	sxth	r3, r3
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	b21a      	sxth	r2, r3
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8008b20:	7abb      	ldrb	r3, [r7, #10]
 8008b22:	021b      	lsls	r3, r3, #8
 8008b24:	b21a      	sxth	r2, r3
 8008b26:	7afb      	ldrb	r3, [r7, #11]
 8008b28:	b21b      	sxth	r3, r3
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	b21a      	sxth	r2, r3
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8008b32:	7b3b      	ldrb	r3, [r7, #12]
 8008b34:	021b      	lsls	r3, r3, #8
 8008b36:	b21a      	sxth	r2, r3
 8008b38:	7b7b      	ldrb	r3, [r7, #13]
 8008b3a:	b21b      	sxth	r3, r3
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	b21a      	sxth	r2, r3
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8008b44:	7bbb      	ldrb	r3, [r7, #14]
 8008b46:	021b      	lsls	r3, r3, #8
 8008b48:	b21a      	sxth	r2, r3
 8008b4a:	7bfb      	ldrb	r3, [r7, #15]
 8008b4c:	b21b      	sxth	r3, r3
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8008b52:	7c3b      	ldrb	r3, [r7, #16]
 8008b54:	021b      	lsls	r3, r3, #8
 8008b56:	b21a      	sxth	r2, r3
 8008b58:	7c7b      	ldrb	r3, [r7, #17]
 8008b5a:	b21b      	sxth	r3, r3
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	b21a      	sxth	r2, r3
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8008b64:	7cbb      	ldrb	r3, [r7, #18]
 8008b66:	021b      	lsls	r3, r3, #8
 8008b68:	b21a      	sxth	r2, r3
 8008b6a:	7cfb      	ldrb	r3, [r7, #19]
 8008b6c:	b21b      	sxth	r3, r3
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	b21a      	sxth	r2, r3
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8008b76:	7d3b      	ldrb	r3, [r7, #20]
 8008b78:	021b      	lsls	r3, r3, #8
 8008b7a:	b21a      	sxth	r2, r3
 8008b7c:	7d7b      	ldrb	r3, [r7, #21]
 8008b7e:	b21b      	sxth	r3, r3
 8008b80:	4313      	orrs	r3, r2
 8008b82:	b21a      	sxth	r2, r3
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7f7 fd00 	bl	8000594 <__aeabi_i2d>
 8008b94:	f04f 0200 	mov.w	r2, #0
 8008b98:	4bbd      	ldr	r3, [pc, #756]	@ (8008e90 <MPU6050_Read_All+0x3a8>)
 8008b9a:	f7f7 fe8f 	bl	80008bc <__aeabi_ddiv>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	6839      	ldr	r1, [r7, #0]
 8008ba4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7f7 fcf0 	bl	8000594 <__aeabi_i2d>
 8008bb4:	f04f 0200 	mov.w	r2, #0
 8008bb8:	4bb5      	ldr	r3, [pc, #724]	@ (8008e90 <MPU6050_Read_All+0x3a8>)
 8008bba:	f7f7 fe7f 	bl	80008bc <__aeabi_ddiv>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	6839      	ldr	r1, [r7, #0]
 8008bc4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7f7 fce0 	bl	8000594 <__aeabi_i2d>
 8008bd4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8008e78 <MPU6050_Read_All+0x390>)
 8008bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bda:	f7f7 fe6f 	bl	80008bc <__aeabi_ddiv>
 8008bde:	4602      	mov	r2, r0
 8008be0:	460b      	mov	r3, r1
 8008be2:	6839      	ldr	r1, [r7, #0]
 8008be4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8008be8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8008bec:	ee07 3a90 	vmov	s15, r3
 8008bf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008bf4:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8008e94 <MPU6050_Read_All+0x3ac>
 8008bf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008bfc:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8008e98 <MPU6050_Read_All+0x3b0>
 8008c00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7f7 fcbf 	bl	8000594 <__aeabi_i2d>
 8008c16:	a39a      	add	r3, pc, #616	@ (adr r3, 8008e80 <MPU6050_Read_All+0x398>)
 8008c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1c:	f7f7 fe4e 	bl	80008bc <__aeabi_ddiv>
 8008c20:	4602      	mov	r2, r0
 8008c22:	460b      	mov	r3, r1
 8008c24:	6839      	ldr	r1, [r7, #0]
 8008c26:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7f7 fcaf 	bl	8000594 <__aeabi_i2d>
 8008c36:	a392      	add	r3, pc, #584	@ (adr r3, 8008e80 <MPU6050_Read_All+0x398>)
 8008c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3c:	f7f7 fe3e 	bl	80008bc <__aeabi_ddiv>
 8008c40:	4602      	mov	r2, r0
 8008c42:	460b      	mov	r3, r1
 8008c44:	6839      	ldr	r1, [r7, #0]
 8008c46:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7f7 fc9f 	bl	8000594 <__aeabi_i2d>
 8008c56:	a38a      	add	r3, pc, #552	@ (adr r3, 8008e80 <MPU6050_Read_All+0x398>)
 8008c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5c:	f7f7 fe2e 	bl	80008bc <__aeabi_ddiv>
 8008c60:	4602      	mov	r2, r0
 8008c62:	460b      	mov	r3, r1
 8008c64:	6839      	ldr	r1, [r7, #0]
 8008c66:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8008c6a:	f7fa ffd1 	bl	8003c10 <HAL_GetTick>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	4b8a      	ldr	r3, [pc, #552]	@ (8008e9c <MPU6050_Read_All+0x3b4>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	1ad3      	subs	r3, r2, r3
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7f7 fc7c 	bl	8000574 <__aeabi_ui2d>
 8008c7c:	f04f 0200 	mov.w	r2, #0
 8008c80:	4b87      	ldr	r3, [pc, #540]	@ (8008ea0 <MPU6050_Read_All+0x3b8>)
 8008c82:	f7f7 fe1b 	bl	80008bc <__aeabi_ddiv>
 8008c86:	4602      	mov	r2, r0
 8008c88:	460b      	mov	r3, r1
 8008c8a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 8008c8e:	f7fa ffbf 	bl	8003c10 <HAL_GetTick>
 8008c92:	4603      	mov	r3, r0
 8008c94:	4a81      	ldr	r2, [pc, #516]	@ (8008e9c <MPU6050_Read_All+0x3b4>)
 8008c96:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ca6:	fb03 f202 	mul.w	r2, r3, r2
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008cb8:	fb01 f303 	mul.w	r3, r1, r3
 8008cbc:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7f7 fc68 	bl	8000594 <__aeabi_i2d>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	ec43 2b10 	vmov	d0, r2, r3
 8008ccc:	f015 fcca 	bl	801e664 <sqrt>
 8008cd0:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8008cd4:	f04f 0200 	mov.w	r2, #0
 8008cd8:	f04f 0300 	mov.w	r3, #0
 8008cdc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008ce0:	f7f7 ff2a 	bl	8000b38 <__aeabi_dcmpeq>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d11f      	bne.n	8008d2a <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7f7 fc4f 	bl	8000594 <__aeabi_i2d>
 8008cf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008cfa:	f7f7 fddf 	bl	80008bc <__aeabi_ddiv>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	460b      	mov	r3, r1
 8008d02:	ec43 2b17 	vmov	d7, r2, r3
 8008d06:	eeb0 0a47 	vmov.f32	s0, s14
 8008d0a:	eef0 0a67 	vmov.f32	s1, s15
 8008d0e:	f015 fcd7 	bl	801e6c0 <atan>
 8008d12:	ec51 0b10 	vmov	r0, r1, d0
 8008d16:	a35c      	add	r3, pc, #368	@ (adr r3, 8008e88 <MPU6050_Read_All+0x3a0>)
 8008d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1c:	f7f7 fca4 	bl	8000668 <__aeabi_dmul>
 8008d20:	4602      	mov	r2, r0
 8008d22:	460b      	mov	r3, r1
 8008d24:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8008d28:	e005      	b.n	8008d36 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8008d2a:	f04f 0200 	mov.w	r2, #0
 8008d2e:	f04f 0300 	mov.w	r3, #0
 8008d32:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d3c:	425b      	negs	r3, r3
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7f7 fc28 	bl	8000594 <__aeabi_i2d>
 8008d44:	4682      	mov	sl, r0
 8008d46:	468b      	mov	fp, r1
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7f7 fc20 	bl	8000594 <__aeabi_i2d>
 8008d54:	4602      	mov	r2, r0
 8008d56:	460b      	mov	r3, r1
 8008d58:	ec43 2b11 	vmov	d1, r2, r3
 8008d5c:	ec4b ab10 	vmov	d0, sl, fp
 8008d60:	f015 fc7e 	bl	801e660 <atan2>
 8008d64:	ec51 0b10 	vmov	r0, r1, d0
 8008d68:	a347      	add	r3, pc, #284	@ (adr r3, 8008e88 <MPU6050_Read_All+0x3a0>)
 8008d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6e:	f7f7 fc7b 	bl	8000668 <__aeabi_dmul>
 8008d72:	4602      	mov	r2, r0
 8008d74:	460b      	mov	r3, r1
 8008d76:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8008d7a:	f04f 0200 	mov.w	r2, #0
 8008d7e:	4b49      	ldr	r3, [pc, #292]	@ (8008ea4 <MPU6050_Read_All+0x3bc>)
 8008d80:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008d84:	f7f7 fee2 	bl	8000b4c <__aeabi_dcmplt>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00a      	beq.n	8008da4 <MPU6050_Read_All+0x2bc>
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8008d94:	f04f 0200 	mov.w	r2, #0
 8008d98:	4b43      	ldr	r3, [pc, #268]	@ (8008ea8 <MPU6050_Read_All+0x3c0>)
 8008d9a:	f7f7 fef5 	bl	8000b88 <__aeabi_dcmpgt>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d114      	bne.n	8008dce <MPU6050_Read_All+0x2e6>
 8008da4:	f04f 0200 	mov.w	r2, #0
 8008da8:	4b3f      	ldr	r3, [pc, #252]	@ (8008ea8 <MPU6050_Read_All+0x3c0>)
 8008daa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008dae:	f7f7 feeb 	bl	8000b88 <__aeabi_dcmpgt>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d015      	beq.n	8008de4 <MPU6050_Read_All+0x2fc>
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8008dbe:	f04f 0200 	mov.w	r2, #0
 8008dc2:	4b38      	ldr	r3, [pc, #224]	@ (8008ea4 <MPU6050_Read_All+0x3bc>)
 8008dc4:	f7f7 fec2 	bl	8000b4c <__aeabi_dcmplt>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d00a      	beq.n	8008de4 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8008dce:	4937      	ldr	r1, [pc, #220]	@ (8008eac <MPU6050_Read_All+0x3c4>)
 8008dd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008dd4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008dde:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8008de2:	e014      	b.n	8008e0e <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8008dea:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8008dee:	eeb0 1a47 	vmov.f32	s2, s14
 8008df2:	eef0 1a67 	vmov.f32	s3, s15
 8008df6:	ed97 0b06 	vldr	d0, [r7, #24]
 8008dfa:	482c      	ldr	r0, [pc, #176]	@ (8008eac <MPU6050_Read_All+0x3c4>)
 8008dfc:	f000 f85a 	bl	8008eb4 <Kalman_getAngle>
 8008e00:	eeb0 7a40 	vmov.f32	s14, s0
 8008e04:	eef0 7a60 	vmov.f32	s15, s1
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8008e14:	4690      	mov	r8, r2
 8008e16:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8008e1a:	f04f 0200 	mov.w	r2, #0
 8008e1e:	4b22      	ldr	r3, [pc, #136]	@ (8008ea8 <MPU6050_Read_All+0x3c0>)
 8008e20:	4640      	mov	r0, r8
 8008e22:	4649      	mov	r1, r9
 8008e24:	f7f7 feb0 	bl	8000b88 <__aeabi_dcmpgt>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d008      	beq.n	8008e40 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8008e34:	4614      	mov	r4, r2
 8008e36:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8008e46:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8008e4a:	eeb0 1a47 	vmov.f32	s2, s14
 8008e4e:	eef0 1a67 	vmov.f32	s3, s15
 8008e52:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8008e56:	4816      	ldr	r0, [pc, #88]	@ (8008eb0 <MPU6050_Read_All+0x3c8>)
 8008e58:	f000 f82c 	bl	8008eb4 <Kalman_getAngle>
 8008e5c:	eeb0 7a40 	vmov.f32	s14, s0
 8008e60:	eef0 7a60 	vmov.f32	s15, s1
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 8008e6a:	bf00      	nop
 8008e6c:	3740      	adds	r7, #64	@ 0x40
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e74:	f3af 8000 	nop.w
 8008e78:	00000000 	.word	0x00000000
 8008e7c:	40cc2900 	.word	0x40cc2900
 8008e80:	00000000 	.word	0x00000000
 8008e84:	40606000 	.word	0x40606000
 8008e88:	1a63c1f8 	.word	0x1a63c1f8
 8008e8c:	404ca5dc 	.word	0x404ca5dc
 8008e90:	40d00000 	.word	0x40d00000
 8008e94:	43aa0000 	.word	0x43aa0000
 8008e98:	42121eb8 	.word	0x42121eb8
 8008e9c:	200086b4 	.word	0x200086b4
 8008ea0:	408f4000 	.word	0x408f4000
 8008ea4:	c0568000 	.word	0xc0568000
 8008ea8:	40568000 	.word	0x40568000
 8008eac:	20000058 	.word	0x20000058
 8008eb0:	20000010 	.word	0x20000010

08008eb4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8008eb4:	b5b0      	push	{r4, r5, r7, lr}
 8008eb6:	b096      	sub	sp, #88	@ 0x58
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	61f8      	str	r0, [r7, #28]
 8008ebc:	ed87 0b04 	vstr	d0, [r7, #16]
 8008ec0:	ed87 1b02 	vstr	d1, [r7, #8]
 8008ec4:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ece:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008ed2:	f7f7 fa11 	bl	80002f8 <__aeabi_dsub>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	460b      	mov	r3, r1
 8008eda:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8008ee4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008ee8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008eec:	f7f7 fbbc 	bl	8000668 <__aeabi_dmul>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	4629      	mov	r1, r5
 8008ef8:	f7f7 fa00 	bl	80002fc <__adddf3>
 8008efc:	4602      	mov	r2, r0
 8008efe:	460b      	mov	r3, r1
 8008f00:	69f9      	ldr	r1, [r7, #28]
 8008f02:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8008f12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f16:	f7f7 fba7 	bl	8000668 <__aeabi_dmul>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	4610      	mov	r0, r2
 8008f20:	4619      	mov	r1, r3
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8008f28:	f7f7 f9e6 	bl	80002f8 <__aeabi_dsub>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	460b      	mov	r3, r1
 8008f30:	4610      	mov	r0, r2
 8008f32:	4619      	mov	r1, r3
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008f3a:	f7f7 f9dd 	bl	80002f8 <__aeabi_dsub>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	460b      	mov	r3, r1
 8008f42:	4610      	mov	r0, r2
 8008f44:	4619      	mov	r1, r3
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4c:	f7f7 f9d6 	bl	80002fc <__adddf3>
 8008f50:	4602      	mov	r2, r0
 8008f52:	460b      	mov	r3, r1
 8008f54:	4610      	mov	r0, r2
 8008f56:	4619      	mov	r1, r3
 8008f58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f5c:	f7f7 fb84 	bl	8000668 <__aeabi_dmul>
 8008f60:	4602      	mov	r2, r0
 8008f62:	460b      	mov	r3, r1
 8008f64:	4620      	mov	r0, r4
 8008f66:	4629      	mov	r1, r5
 8008f68:	f7f7 f9c8 	bl	80002fc <__adddf3>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	460b      	mov	r3, r1
 8008f70:	69f9      	ldr	r1, [r7, #28]
 8008f72:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8008f82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f86:	f7f7 fb6f 	bl	8000668 <__aeabi_dmul>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	4620      	mov	r0, r4
 8008f90:	4629      	mov	r1, r5
 8008f92:	f7f7 f9b1 	bl	80002f8 <__aeabi_dsub>
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	69f9      	ldr	r1, [r7, #28]
 8008f9c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8008fac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fb0:	f7f7 fb5a 	bl	8000668 <__aeabi_dmul>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	4620      	mov	r0, r4
 8008fba:	4629      	mov	r1, r5
 8008fbc:	f7f7 f99c 	bl	80002f8 <__aeabi_dsub>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	69f9      	ldr	r1, [r7, #28]
 8008fc6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8008fca:	69fb      	ldr	r3, [r7, #28]
 8008fcc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fda:	f7f7 fb45 	bl	8000668 <__aeabi_dmul>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	4629      	mov	r1, r5
 8008fe6:	f7f7 f989 	bl	80002fc <__adddf3>
 8008fea:	4602      	mov	r2, r0
 8008fec:	460b      	mov	r3, r1
 8008fee:	69f9      	ldr	r1, [r7, #28]
 8008ff0:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009000:	f7f7 f97c 	bl	80002fc <__adddf3>
 8009004:	4602      	mov	r2, r0
 8009006:	460b      	mov	r3, r1
 8009008:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8009012:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009016:	f7f7 fc51 	bl	80008bc <__aeabi_ddiv>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8009028:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800902c:	f7f7 fc46 	bl	80008bc <__aeabi_ddiv>
 8009030:	4602      	mov	r2, r0
 8009032:	460b      	mov	r3, r1
 8009034:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800903e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009042:	f7f7 f959 	bl	80002f8 <__aeabi_dsub>
 8009046:	4602      	mov	r2, r0
 8009048:	460b      	mov	r3, r1
 800904a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8009054:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009058:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800905c:	f7f7 fb04 	bl	8000668 <__aeabi_dmul>
 8009060:	4602      	mov	r2, r0
 8009062:	460b      	mov	r3, r1
 8009064:	4620      	mov	r0, r4
 8009066:	4629      	mov	r1, r5
 8009068:	f7f7 f948 	bl	80002fc <__adddf3>
 800906c:	4602      	mov	r2, r0
 800906e:	460b      	mov	r3, r1
 8009070:	69f9      	ldr	r1, [r7, #28]
 8009072:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8009076:	69fb      	ldr	r3, [r7, #28]
 8009078:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800907c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009080:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009084:	f7f7 faf0 	bl	8000668 <__aeabi_dmul>
 8009088:	4602      	mov	r2, r0
 800908a:	460b      	mov	r3, r1
 800908c:	4620      	mov	r0, r4
 800908e:	4629      	mov	r1, r5
 8009090:	f7f7 f934 	bl	80002fc <__adddf3>
 8009094:	4602      	mov	r2, r0
 8009096:	460b      	mov	r3, r1
 8009098:	69f9      	ldr	r1, [r7, #28]
 800909a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80090a4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80090ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80090b8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80090bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80090c0:	f7f7 fad2 	bl	8000668 <__aeabi_dmul>
 80090c4:	4602      	mov	r2, r0
 80090c6:	460b      	mov	r3, r1
 80090c8:	4620      	mov	r0, r4
 80090ca:	4629      	mov	r1, r5
 80090cc:	f7f7 f914 	bl	80002f8 <__aeabi_dsub>
 80090d0:	4602      	mov	r2, r0
 80090d2:	460b      	mov	r3, r1
 80090d4:	69f9      	ldr	r1, [r7, #28]
 80090d6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80090e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80090e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80090e8:	f7f7 fabe 	bl	8000668 <__aeabi_dmul>
 80090ec:	4602      	mov	r2, r0
 80090ee:	460b      	mov	r3, r1
 80090f0:	4620      	mov	r0, r4
 80090f2:	4629      	mov	r1, r5
 80090f4:	f7f7 f900 	bl	80002f8 <__aeabi_dsub>
 80090f8:	4602      	mov	r2, r0
 80090fa:	460b      	mov	r3, r1
 80090fc:	69f9      	ldr	r1, [r7, #28]
 80090fe:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8009108:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800910c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009110:	f7f7 faaa 	bl	8000668 <__aeabi_dmul>
 8009114:	4602      	mov	r2, r0
 8009116:	460b      	mov	r3, r1
 8009118:	4620      	mov	r0, r4
 800911a:	4629      	mov	r1, r5
 800911c:	f7f7 f8ec 	bl	80002f8 <__aeabi_dsub>
 8009120:	4602      	mov	r2, r0
 8009122:	460b      	mov	r3, r1
 8009124:	69f9      	ldr	r1, [r7, #28]
 8009126:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8009130:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009134:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8009138:	f7f7 fa96 	bl	8000668 <__aeabi_dmul>
 800913c:	4602      	mov	r2, r0
 800913e:	460b      	mov	r3, r1
 8009140:	4620      	mov	r0, r4
 8009142:	4629      	mov	r1, r5
 8009144:	f7f7 f8d8 	bl	80002f8 <__aeabi_dsub>
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	69f9      	ldr	r1, [r7, #28]
 800914e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8009152:	69fb      	ldr	r3, [r7, #28]
 8009154:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8009158:	ec43 2b17 	vmov	d7, r2, r3
};
 800915c:	eeb0 0a47 	vmov.f32	s0, s14
 8009160:	eef0 0a67 	vmov.f32	s1, s15
 8009164:	3758      	adds	r7, #88	@ 0x58
 8009166:	46bd      	mov	sp, r7
 8009168:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800916c <__NVIC_SetPriority>:
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	4603      	mov	r3, r0
 8009174:	6039      	str	r1, [r7, #0]
 8009176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800917c:	2b00      	cmp	r3, #0
 800917e:	db0a      	blt.n	8009196 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	b2da      	uxtb	r2, r3
 8009184:	490c      	ldr	r1, [pc, #48]	@ (80091b8 <__NVIC_SetPriority+0x4c>)
 8009186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800918a:	0112      	lsls	r2, r2, #4
 800918c:	b2d2      	uxtb	r2, r2
 800918e:	440b      	add	r3, r1
 8009190:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009194:	e00a      	b.n	80091ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	b2da      	uxtb	r2, r3
 800919a:	4908      	ldr	r1, [pc, #32]	@ (80091bc <__NVIC_SetPriority+0x50>)
 800919c:	79fb      	ldrb	r3, [r7, #7]
 800919e:	f003 030f 	and.w	r3, r3, #15
 80091a2:	3b04      	subs	r3, #4
 80091a4:	0112      	lsls	r2, r2, #4
 80091a6:	b2d2      	uxtb	r2, r2
 80091a8:	440b      	add	r3, r1
 80091aa:	761a      	strb	r2, [r3, #24]
}
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr
 80091b8:	e000e100 	.word	0xe000e100
 80091bc:	e000ed00 	.word	0xe000ed00

080091c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80091c0:	b580      	push	{r7, lr}
 80091c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80091c4:	4b05      	ldr	r3, [pc, #20]	@ (80091dc <SysTick_Handler+0x1c>)
 80091c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80091c8:	f001 fd40 	bl	800ac4c <xTaskGetSchedulerState>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d001      	beq.n	80091d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80091d2:	f002 fb39 	bl	800b848 <xPortSysTickHandler>
  }
}
 80091d6:	bf00      	nop
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	e000e010 	.word	0xe000e010

080091e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80091e0:	b580      	push	{r7, lr}
 80091e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80091e4:	2100      	movs	r1, #0
 80091e6:	f06f 0004 	mvn.w	r0, #4
 80091ea:	f7ff ffbf 	bl	800916c <__NVIC_SetPriority>
#endif
}
 80091ee:	bf00      	nop
 80091f0:	bd80      	pop	{r7, pc}
	...

080091f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091fa:	f3ef 8305 	mrs	r3, IPSR
 80091fe:	603b      	str	r3, [r7, #0]
  return(result);
 8009200:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009202:	2b00      	cmp	r3, #0
 8009204:	d003      	beq.n	800920e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009206:	f06f 0305 	mvn.w	r3, #5
 800920a:	607b      	str	r3, [r7, #4]
 800920c:	e00c      	b.n	8009228 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800920e:	4b0a      	ldr	r3, [pc, #40]	@ (8009238 <osKernelInitialize+0x44>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d105      	bne.n	8009222 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009216:	4b08      	ldr	r3, [pc, #32]	@ (8009238 <osKernelInitialize+0x44>)
 8009218:	2201      	movs	r2, #1
 800921a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800921c:	2300      	movs	r3, #0
 800921e:	607b      	str	r3, [r7, #4]
 8009220:	e002      	b.n	8009228 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009222:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009226:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009228:	687b      	ldr	r3, [r7, #4]
}
 800922a:	4618      	mov	r0, r3
 800922c:	370c      	adds	r7, #12
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	200086b8 	.word	0x200086b8

0800923c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009242:	f3ef 8305 	mrs	r3, IPSR
 8009246:	603b      	str	r3, [r7, #0]
  return(result);
 8009248:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800924a:	2b00      	cmp	r3, #0
 800924c:	d003      	beq.n	8009256 <osKernelStart+0x1a>
    stat = osErrorISR;
 800924e:	f06f 0305 	mvn.w	r3, #5
 8009252:	607b      	str	r3, [r7, #4]
 8009254:	e010      	b.n	8009278 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009256:	4b0b      	ldr	r3, [pc, #44]	@ (8009284 <osKernelStart+0x48>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2b01      	cmp	r3, #1
 800925c:	d109      	bne.n	8009272 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800925e:	f7ff ffbf 	bl	80091e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009262:	4b08      	ldr	r3, [pc, #32]	@ (8009284 <osKernelStart+0x48>)
 8009264:	2202      	movs	r2, #2
 8009266:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009268:	f001 f87a 	bl	800a360 <vTaskStartScheduler>
      stat = osOK;
 800926c:	2300      	movs	r3, #0
 800926e:	607b      	str	r3, [r7, #4]
 8009270:	e002      	b.n	8009278 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009272:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009276:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009278:	687b      	ldr	r3, [r7, #4]
}
 800927a:	4618      	mov	r0, r3
 800927c:	3708      	adds	r7, #8
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	200086b8 	.word	0x200086b8

08009288 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009288:	b580      	push	{r7, lr}
 800928a:	b08e      	sub	sp, #56	@ 0x38
 800928c:	af04      	add	r7, sp, #16
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009294:	2300      	movs	r3, #0
 8009296:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009298:	f3ef 8305 	mrs	r3, IPSR
 800929c:	617b      	str	r3, [r7, #20]
  return(result);
 800929e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d17e      	bne.n	80093a2 <osThreadNew+0x11a>
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d07b      	beq.n	80093a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80092aa:	2380      	movs	r3, #128	@ 0x80
 80092ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80092ae:	2318      	movs	r3, #24
 80092b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80092b2:	2300      	movs	r3, #0
 80092b4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80092b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80092ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d045      	beq.n	800934e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d002      	beq.n	80092d0 <osThreadNew+0x48>
        name = attr->name;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	699b      	ldr	r3, [r3, #24]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d002      	beq.n	80092de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	699b      	ldr	r3, [r3, #24]
 80092dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d008      	beq.n	80092f6 <osThreadNew+0x6e>
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	2b38      	cmp	r3, #56	@ 0x38
 80092e8:	d805      	bhi.n	80092f6 <osThreadNew+0x6e>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	f003 0301 	and.w	r3, r3, #1
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d001      	beq.n	80092fa <osThreadNew+0x72>
        return (NULL);
 80092f6:	2300      	movs	r3, #0
 80092f8:	e054      	b.n	80093a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	695b      	ldr	r3, [r3, #20]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d003      	beq.n	800930a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	695b      	ldr	r3, [r3, #20]
 8009306:	089b      	lsrs	r3, r3, #2
 8009308:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00e      	beq.n	8009330 <osThreadNew+0xa8>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	2b5b      	cmp	r3, #91	@ 0x5b
 8009318:	d90a      	bls.n	8009330 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800931e:	2b00      	cmp	r3, #0
 8009320:	d006      	beq.n	8009330 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	695b      	ldr	r3, [r3, #20]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d002      	beq.n	8009330 <osThreadNew+0xa8>
        mem = 1;
 800932a:	2301      	movs	r3, #1
 800932c:	61bb      	str	r3, [r7, #24]
 800932e:	e010      	b.n	8009352 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d10c      	bne.n	8009352 <osThreadNew+0xca>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d108      	bne.n	8009352 <osThreadNew+0xca>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d104      	bne.n	8009352 <osThreadNew+0xca>
          mem = 0;
 8009348:	2300      	movs	r3, #0
 800934a:	61bb      	str	r3, [r7, #24]
 800934c:	e001      	b.n	8009352 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800934e:	2300      	movs	r3, #0
 8009350:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	2b01      	cmp	r3, #1
 8009356:	d110      	bne.n	800937a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009360:	9202      	str	r2, [sp, #8]
 8009362:	9301      	str	r3, [sp, #4]
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	6a3a      	ldr	r2, [r7, #32]
 800936c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f000 fe1a 	bl	8009fa8 <xTaskCreateStatic>
 8009374:	4603      	mov	r3, r0
 8009376:	613b      	str	r3, [r7, #16]
 8009378:	e013      	b.n	80093a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d110      	bne.n	80093a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009380:	6a3b      	ldr	r3, [r7, #32]
 8009382:	b29a      	uxth	r2, r3
 8009384:	f107 0310 	add.w	r3, r7, #16
 8009388:	9301      	str	r3, [sp, #4]
 800938a:	69fb      	ldr	r3, [r7, #28]
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f000 fe68 	bl	800a068 <xTaskCreate>
 8009398:	4603      	mov	r3, r0
 800939a:	2b01      	cmp	r3, #1
 800939c:	d001      	beq.n	80093a2 <osThreadNew+0x11a>
            hTask = NULL;
 800939e:	2300      	movs	r3, #0
 80093a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80093a2:	693b      	ldr	r3, [r7, #16]
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3728      	adds	r7, #40	@ 0x28
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093b4:	f3ef 8305 	mrs	r3, IPSR
 80093b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80093ba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d003      	beq.n	80093c8 <osDelay+0x1c>
    stat = osErrorISR;
 80093c0:	f06f 0305 	mvn.w	r3, #5
 80093c4:	60fb      	str	r3, [r7, #12]
 80093c6:	e007      	b.n	80093d8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80093c8:	2300      	movs	r3, #0
 80093ca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d002      	beq.n	80093d8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 ff8e 	bl	800a2f4 <vTaskDelay>
    }
  }

  return (stat);
 80093d8:	68fb      	ldr	r3, [r7, #12]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
	...

080093e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80093e4:	b480      	push	{r7}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	4a07      	ldr	r2, [pc, #28]	@ (8009410 <vApplicationGetIdleTaskMemory+0x2c>)
 80093f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	4a06      	ldr	r2, [pc, #24]	@ (8009414 <vApplicationGetIdleTaskMemory+0x30>)
 80093fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2280      	movs	r2, #128	@ 0x80
 8009400:	601a      	str	r2, [r3, #0]
}
 8009402:	bf00      	nop
 8009404:	3714      	adds	r7, #20
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	200086bc 	.word	0x200086bc
 8009414:	20008718 	.word	0x20008718

08009418 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009418:	b480      	push	{r7}
 800941a:	b085      	sub	sp, #20
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	4a07      	ldr	r2, [pc, #28]	@ (8009444 <vApplicationGetTimerTaskMemory+0x2c>)
 8009428:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	4a06      	ldr	r2, [pc, #24]	@ (8009448 <vApplicationGetTimerTaskMemory+0x30>)
 800942e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009436:	601a      	str	r2, [r3, #0]
}
 8009438:	bf00      	nop
 800943a:	3714      	adds	r7, #20
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr
 8009444:	20008918 	.word	0x20008918
 8009448:	20008974 	.word	0x20008974

0800944c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f103 0208 	add.w	r2, r3, #8
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009464:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f103 0208 	add.w	r2, r3, #8
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f103 0208 	add.w	r2, r3, #8
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009480:	bf00      	nop
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800949a:	bf00      	nop
 800949c:	370c      	adds	r7, #12
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr

080094a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094a6:	b480      	push	{r7}
 80094a8:	b085      	sub	sp, #20
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
 80094ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	68fa      	ldr	r2, [r7, #12]
 80094ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	689a      	ldr	r2, [r3, #8]
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	683a      	ldr	r2, [r7, #0]
 80094ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	683a      	ldr	r2, [r7, #0]
 80094d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	1c5a      	adds	r2, r3, #1
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	601a      	str	r2, [r3, #0]
}
 80094e2:	bf00      	nop
 80094e4:	3714      	adds	r7, #20
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr

080094ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094ee:	b480      	push	{r7}
 80094f0:	b085      	sub	sp, #20
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
 80094f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009504:	d103      	bne.n	800950e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	60fb      	str	r3, [r7, #12]
 800950c:	e00c      	b.n	8009528 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	3308      	adds	r3, #8
 8009512:	60fb      	str	r3, [r7, #12]
 8009514:	e002      	b.n	800951c <vListInsert+0x2e>
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	60fb      	str	r3, [r7, #12]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	429a      	cmp	r2, r3
 8009526:	d2f6      	bcs.n	8009516 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	685a      	ldr	r2, [r3, #4]
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	683a      	ldr	r2, [r7, #0]
 8009536:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	683a      	ldr	r2, [r7, #0]
 8009542:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	1c5a      	adds	r2, r3, #1
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	601a      	str	r2, [r3, #0]
}
 8009554:	bf00      	nop
 8009556:	3714      	adds	r7, #20
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009560:	b480      	push	{r7}
 8009562:	b085      	sub	sp, #20
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	6892      	ldr	r2, [r2, #8]
 8009576:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	6852      	ldr	r2, [r2, #4]
 8009580:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	429a      	cmp	r2, r3
 800958a:	d103      	bne.n	8009594 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	689a      	ldr	r2, [r3, #8]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	1e5a      	subs	r2, r3, #1
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3714      	adds	r7, #20
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d10b      	bne.n	80095e0 <xQueueGenericReset+0x2c>
	__asm volatile
 80095c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095cc:	f383 8811 	msr	BASEPRI, r3
 80095d0:	f3bf 8f6f 	isb	sy
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	60bb      	str	r3, [r7, #8]
}
 80095da:	bf00      	nop
 80095dc:	bf00      	nop
 80095de:	e7fd      	b.n	80095dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80095e0:	f002 f8a2 	bl	800b728 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095ec:	68f9      	ldr	r1, [r7, #12]
 80095ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80095f0:	fb01 f303 	mul.w	r3, r1, r3
 80095f4:	441a      	add	r2, r3
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2200      	movs	r2, #0
 80095fe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009610:	3b01      	subs	r3, #1
 8009612:	68f9      	ldr	r1, [r7, #12]
 8009614:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009616:	fb01 f303 	mul.w	r3, r1, r3
 800961a:	441a      	add	r2, r3
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	22ff      	movs	r2, #255	@ 0xff
 8009624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	22ff      	movs	r2, #255	@ 0xff
 800962c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d114      	bne.n	8009660 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d01a      	beq.n	8009674 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	3310      	adds	r3, #16
 8009642:	4618      	mov	r0, r3
 8009644:	f001 f91a 	bl	800a87c <xTaskRemoveFromEventList>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d012      	beq.n	8009674 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800964e:	4b0d      	ldr	r3, [pc, #52]	@ (8009684 <xQueueGenericReset+0xd0>)
 8009650:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009654:	601a      	str	r2, [r3, #0]
 8009656:	f3bf 8f4f 	dsb	sy
 800965a:	f3bf 8f6f 	isb	sy
 800965e:	e009      	b.n	8009674 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	3310      	adds	r3, #16
 8009664:	4618      	mov	r0, r3
 8009666:	f7ff fef1 	bl	800944c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	3324      	adds	r3, #36	@ 0x24
 800966e:	4618      	mov	r0, r3
 8009670:	f7ff feec 	bl	800944c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009674:	f002 f88a 	bl	800b78c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009678:	2301      	movs	r3, #1
}
 800967a:	4618      	mov	r0, r3
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	e000ed04 	.word	0xe000ed04

08009688 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009688:	b580      	push	{r7, lr}
 800968a:	b08e      	sub	sp, #56	@ 0x38
 800968c:	af02      	add	r7, sp, #8
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]
 8009694:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d10b      	bne.n	80096b4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800969c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a0:	f383 8811 	msr	BASEPRI, r3
 80096a4:	f3bf 8f6f 	isb	sy
 80096a8:	f3bf 8f4f 	dsb	sy
 80096ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80096ae:	bf00      	nop
 80096b0:	bf00      	nop
 80096b2:	e7fd      	b.n	80096b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d10b      	bne.n	80096d2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80096ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096be:	f383 8811 	msr	BASEPRI, r3
 80096c2:	f3bf 8f6f 	isb	sy
 80096c6:	f3bf 8f4f 	dsb	sy
 80096ca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80096cc:	bf00      	nop
 80096ce:	bf00      	nop
 80096d0:	e7fd      	b.n	80096ce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d002      	beq.n	80096de <xQueueGenericCreateStatic+0x56>
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d001      	beq.n	80096e2 <xQueueGenericCreateStatic+0x5a>
 80096de:	2301      	movs	r3, #1
 80096e0:	e000      	b.n	80096e4 <xQueueGenericCreateStatic+0x5c>
 80096e2:	2300      	movs	r3, #0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d10b      	bne.n	8009700 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80096e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ec:	f383 8811 	msr	BASEPRI, r3
 80096f0:	f3bf 8f6f 	isb	sy
 80096f4:	f3bf 8f4f 	dsb	sy
 80096f8:	623b      	str	r3, [r7, #32]
}
 80096fa:	bf00      	nop
 80096fc:	bf00      	nop
 80096fe:	e7fd      	b.n	80096fc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d102      	bne.n	800970c <xQueueGenericCreateStatic+0x84>
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d101      	bne.n	8009710 <xQueueGenericCreateStatic+0x88>
 800970c:	2301      	movs	r3, #1
 800970e:	e000      	b.n	8009712 <xQueueGenericCreateStatic+0x8a>
 8009710:	2300      	movs	r3, #0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d10b      	bne.n	800972e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800971a:	f383 8811 	msr	BASEPRI, r3
 800971e:	f3bf 8f6f 	isb	sy
 8009722:	f3bf 8f4f 	dsb	sy
 8009726:	61fb      	str	r3, [r7, #28]
}
 8009728:	bf00      	nop
 800972a:	bf00      	nop
 800972c:	e7fd      	b.n	800972a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800972e:	2350      	movs	r3, #80	@ 0x50
 8009730:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	2b50      	cmp	r3, #80	@ 0x50
 8009736:	d00b      	beq.n	8009750 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	61bb      	str	r3, [r7, #24]
}
 800974a:	bf00      	nop
 800974c:	bf00      	nop
 800974e:	e7fd      	b.n	800974c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009750:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00d      	beq.n	8009778 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800975c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800975e:	2201      	movs	r2, #1
 8009760:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009764:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800976a:	9300      	str	r3, [sp, #0]
 800976c:	4613      	mov	r3, r2
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	68b9      	ldr	r1, [r7, #8]
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f000 f805 	bl	8009782 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800977a:	4618      	mov	r0, r3
 800977c:	3730      	adds	r7, #48	@ 0x30
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b084      	sub	sp, #16
 8009786:	af00      	add	r7, sp, #0
 8009788:	60f8      	str	r0, [r7, #12]
 800978a:	60b9      	str	r1, [r7, #8]
 800978c:	607a      	str	r2, [r7, #4]
 800978e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d103      	bne.n	800979e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	69ba      	ldr	r2, [r7, #24]
 800979a:	601a      	str	r2, [r3, #0]
 800979c:	e002      	b.n	80097a4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	68fa      	ldr	r2, [r7, #12]
 80097a8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	68ba      	ldr	r2, [r7, #8]
 80097ae:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80097b0:	2101      	movs	r1, #1
 80097b2:	69b8      	ldr	r0, [r7, #24]
 80097b4:	f7ff fefe 	bl	80095b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	78fa      	ldrb	r2, [r7, #3]
 80097bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80097c0:	bf00      	nop
 80097c2:	3710      	adds	r7, #16
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b08e      	sub	sp, #56	@ 0x38
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
 80097d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80097d6:	2300      	movs	r3, #0
 80097d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80097de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10b      	bne.n	80097fc <xQueueGenericSend+0x34>
	__asm volatile
 80097e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e8:	f383 8811 	msr	BASEPRI, r3
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80097f6:	bf00      	nop
 80097f8:	bf00      	nop
 80097fa:	e7fd      	b.n	80097f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d103      	bne.n	800980a <xQueueGenericSend+0x42>
 8009802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009806:	2b00      	cmp	r3, #0
 8009808:	d101      	bne.n	800980e <xQueueGenericSend+0x46>
 800980a:	2301      	movs	r3, #1
 800980c:	e000      	b.n	8009810 <xQueueGenericSend+0x48>
 800980e:	2300      	movs	r3, #0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d10b      	bne.n	800982c <xQueueGenericSend+0x64>
	__asm volatile
 8009814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009818:	f383 8811 	msr	BASEPRI, r3
 800981c:	f3bf 8f6f 	isb	sy
 8009820:	f3bf 8f4f 	dsb	sy
 8009824:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009826:	bf00      	nop
 8009828:	bf00      	nop
 800982a:	e7fd      	b.n	8009828 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	2b02      	cmp	r3, #2
 8009830:	d103      	bne.n	800983a <xQueueGenericSend+0x72>
 8009832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009836:	2b01      	cmp	r3, #1
 8009838:	d101      	bne.n	800983e <xQueueGenericSend+0x76>
 800983a:	2301      	movs	r3, #1
 800983c:	e000      	b.n	8009840 <xQueueGenericSend+0x78>
 800983e:	2300      	movs	r3, #0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d10b      	bne.n	800985c <xQueueGenericSend+0x94>
	__asm volatile
 8009844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009848:	f383 8811 	msr	BASEPRI, r3
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	623b      	str	r3, [r7, #32]
}
 8009856:	bf00      	nop
 8009858:	bf00      	nop
 800985a:	e7fd      	b.n	8009858 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800985c:	f001 f9f6 	bl	800ac4c <xTaskGetSchedulerState>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d102      	bne.n	800986c <xQueueGenericSend+0xa4>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d101      	bne.n	8009870 <xQueueGenericSend+0xa8>
 800986c:	2301      	movs	r3, #1
 800986e:	e000      	b.n	8009872 <xQueueGenericSend+0xaa>
 8009870:	2300      	movs	r3, #0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d10b      	bne.n	800988e <xQueueGenericSend+0xc6>
	__asm volatile
 8009876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800987a:	f383 8811 	msr	BASEPRI, r3
 800987e:	f3bf 8f6f 	isb	sy
 8009882:	f3bf 8f4f 	dsb	sy
 8009886:	61fb      	str	r3, [r7, #28]
}
 8009888:	bf00      	nop
 800988a:	bf00      	nop
 800988c:	e7fd      	b.n	800988a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800988e:	f001 ff4b 	bl	800b728 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009894:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800989a:	429a      	cmp	r2, r3
 800989c:	d302      	bcc.n	80098a4 <xQueueGenericSend+0xdc>
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	2b02      	cmp	r3, #2
 80098a2:	d129      	bne.n	80098f8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80098a4:	683a      	ldr	r2, [r7, #0]
 80098a6:	68b9      	ldr	r1, [r7, #8]
 80098a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80098aa:	f000 fa0f 	bl	8009ccc <prvCopyDataToQueue>
 80098ae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d010      	beq.n	80098da <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ba:	3324      	adds	r3, #36	@ 0x24
 80098bc:	4618      	mov	r0, r3
 80098be:	f000 ffdd 	bl	800a87c <xTaskRemoveFromEventList>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d013      	beq.n	80098f0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80098c8:	4b3f      	ldr	r3, [pc, #252]	@ (80099c8 <xQueueGenericSend+0x200>)
 80098ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098ce:	601a      	str	r2, [r3, #0]
 80098d0:	f3bf 8f4f 	dsb	sy
 80098d4:	f3bf 8f6f 	isb	sy
 80098d8:	e00a      	b.n	80098f0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80098da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d007      	beq.n	80098f0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80098e0:	4b39      	ldr	r3, [pc, #228]	@ (80099c8 <xQueueGenericSend+0x200>)
 80098e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098e6:	601a      	str	r2, [r3, #0]
 80098e8:	f3bf 8f4f 	dsb	sy
 80098ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80098f0:	f001 ff4c 	bl	800b78c <vPortExitCritical>
				return pdPASS;
 80098f4:	2301      	movs	r3, #1
 80098f6:	e063      	b.n	80099c0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d103      	bne.n	8009906 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80098fe:	f001 ff45 	bl	800b78c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009902:	2300      	movs	r3, #0
 8009904:	e05c      	b.n	80099c0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009908:	2b00      	cmp	r3, #0
 800990a:	d106      	bne.n	800991a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800990c:	f107 0314 	add.w	r3, r7, #20
 8009910:	4618      	mov	r0, r3
 8009912:	f001 f83f 	bl	800a994 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009916:	2301      	movs	r3, #1
 8009918:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800991a:	f001 ff37 	bl	800b78c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800991e:	f000 fd87 	bl	800a430 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009922:	f001 ff01 	bl	800b728 <vPortEnterCritical>
 8009926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009928:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800992c:	b25b      	sxtb	r3, r3
 800992e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009932:	d103      	bne.n	800993c <xQueueGenericSend+0x174>
 8009934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009936:	2200      	movs	r2, #0
 8009938:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800993c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009942:	b25b      	sxtb	r3, r3
 8009944:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009948:	d103      	bne.n	8009952 <xQueueGenericSend+0x18a>
 800994a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800994c:	2200      	movs	r2, #0
 800994e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009952:	f001 ff1b 	bl	800b78c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009956:	1d3a      	adds	r2, r7, #4
 8009958:	f107 0314 	add.w	r3, r7, #20
 800995c:	4611      	mov	r1, r2
 800995e:	4618      	mov	r0, r3
 8009960:	f001 f82e 	bl	800a9c0 <xTaskCheckForTimeOut>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d124      	bne.n	80099b4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800996a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800996c:	f000 faa6 	bl	8009ebc <prvIsQueueFull>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d018      	beq.n	80099a8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009978:	3310      	adds	r3, #16
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	4611      	mov	r1, r2
 800997e:	4618      	mov	r0, r3
 8009980:	f000 ff2a 	bl	800a7d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009984:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009986:	f000 fa31 	bl	8009dec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800998a:	f000 fd5f 	bl	800a44c <xTaskResumeAll>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	f47f af7c 	bne.w	800988e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009996:	4b0c      	ldr	r3, [pc, #48]	@ (80099c8 <xQueueGenericSend+0x200>)
 8009998:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800999c:	601a      	str	r2, [r3, #0]
 800999e:	f3bf 8f4f 	dsb	sy
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	e772      	b.n	800988e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80099a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80099aa:	f000 fa1f 	bl	8009dec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80099ae:	f000 fd4d 	bl	800a44c <xTaskResumeAll>
 80099b2:	e76c      	b.n	800988e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80099b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80099b6:	f000 fa19 	bl	8009dec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099ba:	f000 fd47 	bl	800a44c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80099be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3738      	adds	r7, #56	@ 0x38
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	e000ed04 	.word	0xe000ed04

080099cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b090      	sub	sp, #64	@ 0x40
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	607a      	str	r2, [r7, #4]
 80099d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80099de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d10b      	bne.n	80099fc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80099e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e8:	f383 8811 	msr	BASEPRI, r3
 80099ec:	f3bf 8f6f 	isb	sy
 80099f0:	f3bf 8f4f 	dsb	sy
 80099f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80099f6:	bf00      	nop
 80099f8:	bf00      	nop
 80099fa:	e7fd      	b.n	80099f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d103      	bne.n	8009a0a <xQueueGenericSendFromISR+0x3e>
 8009a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d101      	bne.n	8009a0e <xQueueGenericSendFromISR+0x42>
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e000      	b.n	8009a10 <xQueueGenericSendFromISR+0x44>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d10b      	bne.n	8009a2c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a18:	f383 8811 	msr	BASEPRI, r3
 8009a1c:	f3bf 8f6f 	isb	sy
 8009a20:	f3bf 8f4f 	dsb	sy
 8009a24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009a26:	bf00      	nop
 8009a28:	bf00      	nop
 8009a2a:	e7fd      	b.n	8009a28 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	d103      	bne.n	8009a3a <xQueueGenericSendFromISR+0x6e>
 8009a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d101      	bne.n	8009a3e <xQueueGenericSendFromISR+0x72>
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e000      	b.n	8009a40 <xQueueGenericSendFromISR+0x74>
 8009a3e:	2300      	movs	r3, #0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d10b      	bne.n	8009a5c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a48:	f383 8811 	msr	BASEPRI, r3
 8009a4c:	f3bf 8f6f 	isb	sy
 8009a50:	f3bf 8f4f 	dsb	sy
 8009a54:	623b      	str	r3, [r7, #32]
}
 8009a56:	bf00      	nop
 8009a58:	bf00      	nop
 8009a5a:	e7fd      	b.n	8009a58 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a5c:	f001 ff44 	bl	800b8e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009a60:	f3ef 8211 	mrs	r2, BASEPRI
 8009a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a68:	f383 8811 	msr	BASEPRI, r3
 8009a6c:	f3bf 8f6f 	isb	sy
 8009a70:	f3bf 8f4f 	dsb	sy
 8009a74:	61fa      	str	r2, [r7, #28]
 8009a76:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009a78:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a7a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d302      	bcc.n	8009a8e <xQueueGenericSendFromISR+0xc2>
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	2b02      	cmp	r3, #2
 8009a8c:	d12f      	bne.n	8009aee <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a9e:	683a      	ldr	r2, [r7, #0]
 8009aa0:	68b9      	ldr	r1, [r7, #8]
 8009aa2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009aa4:	f000 f912 	bl	8009ccc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009aa8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009aac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ab0:	d112      	bne.n	8009ad8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d016      	beq.n	8009ae8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009abc:	3324      	adds	r3, #36	@ 0x24
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f000 fedc 	bl	800a87c <xTaskRemoveFromEventList>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00e      	beq.n	8009ae8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d00b      	beq.n	8009ae8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	601a      	str	r2, [r3, #0]
 8009ad6:	e007      	b.n	8009ae8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009ad8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009adc:	3301      	adds	r3, #1
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	b25a      	sxtb	r2, r3
 8009ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009aec:	e001      	b.n	8009af2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009aee:	2300      	movs	r3, #0
 8009af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009af4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009afc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3740      	adds	r7, #64	@ 0x40
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b08c      	sub	sp, #48	@ 0x30
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009b14:	2300      	movs	r3, #0
 8009b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d10b      	bne.n	8009b3a <xQueueReceive+0x32>
	__asm volatile
 8009b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b26:	f383 8811 	msr	BASEPRI, r3
 8009b2a:	f3bf 8f6f 	isb	sy
 8009b2e:	f3bf 8f4f 	dsb	sy
 8009b32:	623b      	str	r3, [r7, #32]
}
 8009b34:	bf00      	nop
 8009b36:	bf00      	nop
 8009b38:	e7fd      	b.n	8009b36 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d103      	bne.n	8009b48 <xQueueReceive+0x40>
 8009b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d101      	bne.n	8009b4c <xQueueReceive+0x44>
 8009b48:	2301      	movs	r3, #1
 8009b4a:	e000      	b.n	8009b4e <xQueueReceive+0x46>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d10b      	bne.n	8009b6a <xQueueReceive+0x62>
	__asm volatile
 8009b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b56:	f383 8811 	msr	BASEPRI, r3
 8009b5a:	f3bf 8f6f 	isb	sy
 8009b5e:	f3bf 8f4f 	dsb	sy
 8009b62:	61fb      	str	r3, [r7, #28]
}
 8009b64:	bf00      	nop
 8009b66:	bf00      	nop
 8009b68:	e7fd      	b.n	8009b66 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b6a:	f001 f86f 	bl	800ac4c <xTaskGetSchedulerState>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d102      	bne.n	8009b7a <xQueueReceive+0x72>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d101      	bne.n	8009b7e <xQueueReceive+0x76>
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e000      	b.n	8009b80 <xQueueReceive+0x78>
 8009b7e:	2300      	movs	r3, #0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d10b      	bne.n	8009b9c <xQueueReceive+0x94>
	__asm volatile
 8009b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b88:	f383 8811 	msr	BASEPRI, r3
 8009b8c:	f3bf 8f6f 	isb	sy
 8009b90:	f3bf 8f4f 	dsb	sy
 8009b94:	61bb      	str	r3, [r7, #24]
}
 8009b96:	bf00      	nop
 8009b98:	bf00      	nop
 8009b9a:	e7fd      	b.n	8009b98 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b9c:	f001 fdc4 	bl	800b728 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ba4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d01f      	beq.n	8009bec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009bac:	68b9      	ldr	r1, [r7, #8]
 8009bae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bb0:	f000 f8f6 	bl	8009da0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb6:	1e5a      	subs	r2, r3, #1
 8009bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bbe:	691b      	ldr	r3, [r3, #16]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d00f      	beq.n	8009be4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc6:	3310      	adds	r3, #16
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f000 fe57 	bl	800a87c <xTaskRemoveFromEventList>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d007      	beq.n	8009be4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009bd4:	4b3c      	ldr	r3, [pc, #240]	@ (8009cc8 <xQueueReceive+0x1c0>)
 8009bd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bda:	601a      	str	r2, [r3, #0]
 8009bdc:	f3bf 8f4f 	dsb	sy
 8009be0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009be4:	f001 fdd2 	bl	800b78c <vPortExitCritical>
				return pdPASS;
 8009be8:	2301      	movs	r3, #1
 8009bea:	e069      	b.n	8009cc0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d103      	bne.n	8009bfa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009bf2:	f001 fdcb 	bl	800b78c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	e062      	b.n	8009cc0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d106      	bne.n	8009c0e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c00:	f107 0310 	add.w	r3, r7, #16
 8009c04:	4618      	mov	r0, r3
 8009c06:	f000 fec5 	bl	800a994 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c0e:	f001 fdbd 	bl	800b78c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c12:	f000 fc0d 	bl	800a430 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c16:	f001 fd87 	bl	800b728 <vPortEnterCritical>
 8009c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009c20:	b25b      	sxtb	r3, r3
 8009c22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c26:	d103      	bne.n	8009c30 <xQueueReceive+0x128>
 8009c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c36:	b25b      	sxtb	r3, r3
 8009c38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c3c:	d103      	bne.n	8009c46 <xQueueReceive+0x13e>
 8009c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c40:	2200      	movs	r2, #0
 8009c42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c46:	f001 fda1 	bl	800b78c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c4a:	1d3a      	adds	r2, r7, #4
 8009c4c:	f107 0310 	add.w	r3, r7, #16
 8009c50:	4611      	mov	r1, r2
 8009c52:	4618      	mov	r0, r3
 8009c54:	f000 feb4 	bl	800a9c0 <xTaskCheckForTimeOut>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d123      	bne.n	8009ca6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c60:	f000 f916 	bl	8009e90 <prvIsQueueEmpty>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d017      	beq.n	8009c9a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c6c:	3324      	adds	r3, #36	@ 0x24
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	4611      	mov	r1, r2
 8009c72:	4618      	mov	r0, r3
 8009c74:	f000 fdb0 	bl	800a7d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c7a:	f000 f8b7 	bl	8009dec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c7e:	f000 fbe5 	bl	800a44c <xTaskResumeAll>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d189      	bne.n	8009b9c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009c88:	4b0f      	ldr	r3, [pc, #60]	@ (8009cc8 <xQueueReceive+0x1c0>)
 8009c8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c8e:	601a      	str	r2, [r3, #0]
 8009c90:	f3bf 8f4f 	dsb	sy
 8009c94:	f3bf 8f6f 	isb	sy
 8009c98:	e780      	b.n	8009b9c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009c9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c9c:	f000 f8a6 	bl	8009dec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ca0:	f000 fbd4 	bl	800a44c <xTaskResumeAll>
 8009ca4:	e77a      	b.n	8009b9c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009ca6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ca8:	f000 f8a0 	bl	8009dec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009cac:	f000 fbce 	bl	800a44c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009cb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009cb2:	f000 f8ed 	bl	8009e90 <prvIsQueueEmpty>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	f43f af6f 	beq.w	8009b9c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009cbe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3730      	adds	r7, #48	@ 0x30
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	e000ed04 	.word	0xe000ed04

08009ccc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b086      	sub	sp, #24
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ce0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d10d      	bne.n	8009d06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d14d      	bne.n	8009d8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f000 ffc6 	bl	800ac88 <xTaskPriorityDisinherit>
 8009cfc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2200      	movs	r2, #0
 8009d02:	609a      	str	r2, [r3, #8]
 8009d04:	e043      	b.n	8009d8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d119      	bne.n	8009d40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	6858      	ldr	r0, [r3, #4]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d14:	461a      	mov	r2, r3
 8009d16:	68b9      	ldr	r1, [r7, #8]
 8009d18:	f013 fe61 	bl	801d9de <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	685a      	ldr	r2, [r3, #4]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d24:	441a      	add	r2, r3
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	685a      	ldr	r2, [r3, #4]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d32b      	bcc.n	8009d8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	605a      	str	r2, [r3, #4]
 8009d3e:	e026      	b.n	8009d8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	68d8      	ldr	r0, [r3, #12]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d48:	461a      	mov	r2, r3
 8009d4a:	68b9      	ldr	r1, [r7, #8]
 8009d4c:	f013 fe47 	bl	801d9de <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	68da      	ldr	r2, [r3, #12]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d58:	425b      	negs	r3, r3
 8009d5a:	441a      	add	r2, r3
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	68da      	ldr	r2, [r3, #12]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d207      	bcs.n	8009d7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	689a      	ldr	r2, [r3, #8]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d74:	425b      	negs	r3, r3
 8009d76:	441a      	add	r2, r3
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	d105      	bne.n	8009d8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d002      	beq.n	8009d8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	3b01      	subs	r3, #1
 8009d8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	1c5a      	adds	r2, r3, #1
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009d96:	697b      	ldr	r3, [r7, #20]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3718      	adds	r7, #24
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d018      	beq.n	8009de4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	68da      	ldr	r2, [r3, #12]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dba:	441a      	add	r2, r3
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	68da      	ldr	r2, [r3, #12]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d303      	bcc.n	8009dd4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	68d9      	ldr	r1, [r3, #12]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ddc:	461a      	mov	r2, r3
 8009dde:	6838      	ldr	r0, [r7, #0]
 8009de0:	f013 fdfd 	bl	801d9de <memcpy>
	}
}
 8009de4:	bf00      	nop
 8009de6:	3708      	adds	r7, #8
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009df4:	f001 fc98 	bl	800b728 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009dfe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e00:	e011      	b.n	8009e26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d012      	beq.n	8009e30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	3324      	adds	r3, #36	@ 0x24
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f000 fd34 	bl	800a87c <xTaskRemoveFromEventList>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d001      	beq.n	8009e1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009e1a:	f000 fe35 	bl	800aa88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009e1e:	7bfb      	ldrb	r3, [r7, #15]
 8009e20:	3b01      	subs	r3, #1
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	dce9      	bgt.n	8009e02 <prvUnlockQueue+0x16>
 8009e2e:	e000      	b.n	8009e32 <prvUnlockQueue+0x46>
					break;
 8009e30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	22ff      	movs	r2, #255	@ 0xff
 8009e36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009e3a:	f001 fca7 	bl	800b78c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009e3e:	f001 fc73 	bl	800b728 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e4a:	e011      	b.n	8009e70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	691b      	ldr	r3, [r3, #16]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d012      	beq.n	8009e7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	3310      	adds	r3, #16
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f000 fd0f 	bl	800a87c <xTaskRemoveFromEventList>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d001      	beq.n	8009e68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e64:	f000 fe10 	bl	800aa88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e68:	7bbb      	ldrb	r3, [r7, #14]
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	dce9      	bgt.n	8009e4c <prvUnlockQueue+0x60>
 8009e78:	e000      	b.n	8009e7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	22ff      	movs	r2, #255	@ 0xff
 8009e80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009e84:	f001 fc82 	bl	800b78c <vPortExitCritical>
}
 8009e88:	bf00      	nop
 8009e8a:	3710      	adds	r7, #16
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e98:	f001 fc46 	bl	800b728 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d102      	bne.n	8009eaa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	60fb      	str	r3, [r7, #12]
 8009ea8:	e001      	b.n	8009eae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009eae:	f001 fc6d 	bl	800b78c <vPortExitCritical>

	return xReturn;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ec4:	f001 fc30 	bl	800b728 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d102      	bne.n	8009eda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	60fb      	str	r3, [r7, #12]
 8009ed8:	e001      	b.n	8009ede <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009eda:	2300      	movs	r3, #0
 8009edc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ede:	f001 fc55 	bl	800b78c <vPortExitCritical>

	return xReturn;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3710      	adds	r7, #16
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	60fb      	str	r3, [r7, #12]
 8009efa:	e014      	b.n	8009f26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009efc:	4a0f      	ldr	r2, [pc, #60]	@ (8009f3c <vQueueAddToRegistry+0x50>)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d10b      	bne.n	8009f20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009f08:	490c      	ldr	r1, [pc, #48]	@ (8009f3c <vQueueAddToRegistry+0x50>)
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	683a      	ldr	r2, [r7, #0]
 8009f0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009f12:	4a0a      	ldr	r2, [pc, #40]	@ (8009f3c <vQueueAddToRegistry+0x50>)
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	00db      	lsls	r3, r3, #3
 8009f18:	4413      	add	r3, r2
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009f1e:	e006      	b.n	8009f2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	3301      	adds	r3, #1
 8009f24:	60fb      	str	r3, [r7, #12]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2b07      	cmp	r3, #7
 8009f2a:	d9e7      	bls.n	8009efc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009f2c:	bf00      	nop
 8009f2e:	bf00      	nop
 8009f30:	3714      	adds	r7, #20
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr
 8009f3a:	bf00      	nop
 8009f3c:	20008d74 	.word	0x20008d74

08009f40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b086      	sub	sp, #24
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009f50:	f001 fbea 	bl	800b728 <vPortEnterCritical>
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f5a:	b25b      	sxtb	r3, r3
 8009f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f60:	d103      	bne.n	8009f6a <vQueueWaitForMessageRestricted+0x2a>
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	2200      	movs	r2, #0
 8009f66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f70:	b25b      	sxtb	r3, r3
 8009f72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f76:	d103      	bne.n	8009f80 <vQueueWaitForMessageRestricted+0x40>
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f80:	f001 fc04 	bl	800b78c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d106      	bne.n	8009f9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	3324      	adds	r3, #36	@ 0x24
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	68b9      	ldr	r1, [r7, #8]
 8009f94:	4618      	mov	r0, r3
 8009f96:	f000 fc45 	bl	800a824 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009f9a:	6978      	ldr	r0, [r7, #20]
 8009f9c:	f7ff ff26 	bl	8009dec <prvUnlockQueue>
	}
 8009fa0:	bf00      	nop
 8009fa2:	3718      	adds	r7, #24
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b08e      	sub	sp, #56	@ 0x38
 8009fac:	af04      	add	r7, sp, #16
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	607a      	str	r2, [r7, #4]
 8009fb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d10b      	bne.n	8009fd4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc0:	f383 8811 	msr	BASEPRI, r3
 8009fc4:	f3bf 8f6f 	isb	sy
 8009fc8:	f3bf 8f4f 	dsb	sy
 8009fcc:	623b      	str	r3, [r7, #32]
}
 8009fce:	bf00      	nop
 8009fd0:	bf00      	nop
 8009fd2:	e7fd      	b.n	8009fd0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d10b      	bne.n	8009ff2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8009fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fde:	f383 8811 	msr	BASEPRI, r3
 8009fe2:	f3bf 8f6f 	isb	sy
 8009fe6:	f3bf 8f4f 	dsb	sy
 8009fea:	61fb      	str	r3, [r7, #28]
}
 8009fec:	bf00      	nop
 8009fee:	bf00      	nop
 8009ff0:	e7fd      	b.n	8009fee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009ff2:	235c      	movs	r3, #92	@ 0x5c
 8009ff4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	2b5c      	cmp	r3, #92	@ 0x5c
 8009ffa:	d00b      	beq.n	800a014 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a000:	f383 8811 	msr	BASEPRI, r3
 800a004:	f3bf 8f6f 	isb	sy
 800a008:	f3bf 8f4f 	dsb	sy
 800a00c:	61bb      	str	r3, [r7, #24]
}
 800a00e:	bf00      	nop
 800a010:	bf00      	nop
 800a012:	e7fd      	b.n	800a010 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a014:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d01e      	beq.n	800a05a <xTaskCreateStatic+0xb2>
 800a01c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d01b      	beq.n	800a05a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a024:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a028:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a02a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a02e:	2202      	movs	r2, #2
 800a030:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a034:	2300      	movs	r3, #0
 800a036:	9303      	str	r3, [sp, #12]
 800a038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a03a:	9302      	str	r3, [sp, #8]
 800a03c:	f107 0314 	add.w	r3, r7, #20
 800a040:	9301      	str	r3, [sp, #4]
 800a042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a044:	9300      	str	r3, [sp, #0]
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	68b9      	ldr	r1, [r7, #8]
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f000 f850 	bl	800a0f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a052:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a054:	f000 f8de 	bl	800a214 <prvAddNewTaskToReadyList>
 800a058:	e001      	b.n	800a05e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a05a:	2300      	movs	r3, #0
 800a05c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a05e:	697b      	ldr	r3, [r7, #20]
	}
 800a060:	4618      	mov	r0, r3
 800a062:	3728      	adds	r7, #40	@ 0x28
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b08c      	sub	sp, #48	@ 0x30
 800a06c:	af04      	add	r7, sp, #16
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	603b      	str	r3, [r7, #0]
 800a074:	4613      	mov	r3, r2
 800a076:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a078:	88fb      	ldrh	r3, [r7, #6]
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	4618      	mov	r0, r3
 800a07e:	f001 fc75 	bl	800b96c <pvPortMalloc>
 800a082:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d00e      	beq.n	800a0a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a08a:	205c      	movs	r0, #92	@ 0x5c
 800a08c:	f001 fc6e 	bl	800b96c <pvPortMalloc>
 800a090:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d003      	beq.n	800a0a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a098:	69fb      	ldr	r3, [r7, #28]
 800a09a:	697a      	ldr	r2, [r7, #20]
 800a09c:	631a      	str	r2, [r3, #48]	@ 0x30
 800a09e:	e005      	b.n	800a0ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a0a0:	6978      	ldr	r0, [r7, #20]
 800a0a2:	f001 fd31 	bl	800bb08 <vPortFree>
 800a0a6:	e001      	b.n	800a0ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d017      	beq.n	800a0e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a0ba:	88fa      	ldrh	r2, [r7, #6]
 800a0bc:	2300      	movs	r3, #0
 800a0be:	9303      	str	r3, [sp, #12]
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	9302      	str	r3, [sp, #8]
 800a0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0c6:	9301      	str	r3, [sp, #4]
 800a0c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ca:	9300      	str	r3, [sp, #0]
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	68b9      	ldr	r1, [r7, #8]
 800a0d0:	68f8      	ldr	r0, [r7, #12]
 800a0d2:	f000 f80e 	bl	800a0f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a0d6:	69f8      	ldr	r0, [r7, #28]
 800a0d8:	f000 f89c 	bl	800a214 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	61bb      	str	r3, [r7, #24]
 800a0e0:	e002      	b.n	800a0e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a0e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a0e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a0e8:	69bb      	ldr	r3, [r7, #24]
	}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3720      	adds	r7, #32
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a0f2:	b580      	push	{r7, lr}
 800a0f4:	b088      	sub	sp, #32
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	60f8      	str	r0, [r7, #12]
 800a0fa:	60b9      	str	r1, [r7, #8]
 800a0fc:	607a      	str	r2, [r7, #4]
 800a0fe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a102:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	461a      	mov	r2, r3
 800a10a:	21a5      	movs	r1, #165	@ 0xa5
 800a10c:	f013 fb8c 	bl	801d828 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a112:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a11a:	3b01      	subs	r3, #1
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	4413      	add	r3, r2
 800a120:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	f023 0307 	bic.w	r3, r3, #7
 800a128:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	f003 0307 	and.w	r3, r3, #7
 800a130:	2b00      	cmp	r3, #0
 800a132:	d00b      	beq.n	800a14c <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a138:	f383 8811 	msr	BASEPRI, r3
 800a13c:	f3bf 8f6f 	isb	sy
 800a140:	f3bf 8f4f 	dsb	sy
 800a144:	617b      	str	r3, [r7, #20]
}
 800a146:	bf00      	nop
 800a148:	bf00      	nop
 800a14a:	e7fd      	b.n	800a148 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d01f      	beq.n	800a192 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a152:	2300      	movs	r3, #0
 800a154:	61fb      	str	r3, [r7, #28]
 800a156:	e012      	b.n	800a17e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a158:	68ba      	ldr	r2, [r7, #8]
 800a15a:	69fb      	ldr	r3, [r7, #28]
 800a15c:	4413      	add	r3, r2
 800a15e:	7819      	ldrb	r1, [r3, #0]
 800a160:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a162:	69fb      	ldr	r3, [r7, #28]
 800a164:	4413      	add	r3, r2
 800a166:	3334      	adds	r3, #52	@ 0x34
 800a168:	460a      	mov	r2, r1
 800a16a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a16c:	68ba      	ldr	r2, [r7, #8]
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	4413      	add	r3, r2
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d006      	beq.n	800a186 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a178:	69fb      	ldr	r3, [r7, #28]
 800a17a:	3301      	adds	r3, #1
 800a17c:	61fb      	str	r3, [r7, #28]
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	2b0f      	cmp	r3, #15
 800a182:	d9e9      	bls.n	800a158 <prvInitialiseNewTask+0x66>
 800a184:	e000      	b.n	800a188 <prvInitialiseNewTask+0x96>
			{
				break;
 800a186:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a18a:	2200      	movs	r2, #0
 800a18c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a190:	e003      	b.n	800a19a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a194:	2200      	movs	r2, #0
 800a196:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a19a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a19c:	2b37      	cmp	r3, #55	@ 0x37
 800a19e:	d901      	bls.n	800a1a4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a1a0:	2337      	movs	r3, #55	@ 0x37
 800a1a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1a8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1ae:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b8:	3304      	adds	r3, #4
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7ff f966 	bl	800948c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c2:	3318      	adds	r3, #24
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7ff f961 	bl	800948c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a1ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1de:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a1ee:	683a      	ldr	r2, [r7, #0]
 800a1f0:	68f9      	ldr	r1, [r7, #12]
 800a1f2:	69b8      	ldr	r0, [r7, #24]
 800a1f4:	f001 f966 	bl	800b4c4 <pxPortInitialiseStack>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a1fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a200:	2b00      	cmp	r3, #0
 800a202:	d002      	beq.n	800a20a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a208:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a20a:	bf00      	nop
 800a20c:	3720      	adds	r7, #32
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
	...

0800a214 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a21c:	f001 fa84 	bl	800b728 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a220:	4b2d      	ldr	r3, [pc, #180]	@ (800a2d8 <prvAddNewTaskToReadyList+0xc4>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	3301      	adds	r3, #1
 800a226:	4a2c      	ldr	r2, [pc, #176]	@ (800a2d8 <prvAddNewTaskToReadyList+0xc4>)
 800a228:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a22a:	4b2c      	ldr	r3, [pc, #176]	@ (800a2dc <prvAddNewTaskToReadyList+0xc8>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d109      	bne.n	800a246 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a232:	4a2a      	ldr	r2, [pc, #168]	@ (800a2dc <prvAddNewTaskToReadyList+0xc8>)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a238:	4b27      	ldr	r3, [pc, #156]	@ (800a2d8 <prvAddNewTaskToReadyList+0xc4>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d110      	bne.n	800a262 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a240:	f000 fc46 	bl	800aad0 <prvInitialiseTaskLists>
 800a244:	e00d      	b.n	800a262 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a246:	4b26      	ldr	r3, [pc, #152]	@ (800a2e0 <prvAddNewTaskToReadyList+0xcc>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d109      	bne.n	800a262 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a24e:	4b23      	ldr	r3, [pc, #140]	@ (800a2dc <prvAddNewTaskToReadyList+0xc8>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a258:	429a      	cmp	r2, r3
 800a25a:	d802      	bhi.n	800a262 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a25c:	4a1f      	ldr	r2, [pc, #124]	@ (800a2dc <prvAddNewTaskToReadyList+0xc8>)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a262:	4b20      	ldr	r3, [pc, #128]	@ (800a2e4 <prvAddNewTaskToReadyList+0xd0>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	3301      	adds	r3, #1
 800a268:	4a1e      	ldr	r2, [pc, #120]	@ (800a2e4 <prvAddNewTaskToReadyList+0xd0>)
 800a26a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a26c:	4b1d      	ldr	r3, [pc, #116]	@ (800a2e4 <prvAddNewTaskToReadyList+0xd0>)
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a278:	4b1b      	ldr	r3, [pc, #108]	@ (800a2e8 <prvAddNewTaskToReadyList+0xd4>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d903      	bls.n	800a288 <prvAddNewTaskToReadyList+0x74>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a284:	4a18      	ldr	r2, [pc, #96]	@ (800a2e8 <prvAddNewTaskToReadyList+0xd4>)
 800a286:	6013      	str	r3, [r2, #0]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a28c:	4613      	mov	r3, r2
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	4413      	add	r3, r2
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	4a15      	ldr	r2, [pc, #84]	@ (800a2ec <prvAddNewTaskToReadyList+0xd8>)
 800a296:	441a      	add	r2, r3
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	3304      	adds	r3, #4
 800a29c:	4619      	mov	r1, r3
 800a29e:	4610      	mov	r0, r2
 800a2a0:	f7ff f901 	bl	80094a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a2a4:	f001 fa72 	bl	800b78c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a2a8:	4b0d      	ldr	r3, [pc, #52]	@ (800a2e0 <prvAddNewTaskToReadyList+0xcc>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d00e      	beq.n	800a2ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a2b0:	4b0a      	ldr	r3, [pc, #40]	@ (800a2dc <prvAddNewTaskToReadyList+0xc8>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d207      	bcs.n	800a2ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a2be:	4b0c      	ldr	r3, [pc, #48]	@ (800a2f0 <prvAddNewTaskToReadyList+0xdc>)
 800a2c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2c4:	601a      	str	r2, [r3, #0]
 800a2c6:	f3bf 8f4f 	dsb	sy
 800a2ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2ce:	bf00      	nop
 800a2d0:	3708      	adds	r7, #8
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	20009288 	.word	0x20009288
 800a2dc:	20008db4 	.word	0x20008db4
 800a2e0:	20009294 	.word	0x20009294
 800a2e4:	200092a4 	.word	0x200092a4
 800a2e8:	20009290 	.word	0x20009290
 800a2ec:	20008db8 	.word	0x20008db8
 800a2f0:	e000ed04 	.word	0xe000ed04

0800a2f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d018      	beq.n	800a338 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a306:	4b14      	ldr	r3, [pc, #80]	@ (800a358 <vTaskDelay+0x64>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00b      	beq.n	800a326 <vTaskDelay+0x32>
	__asm volatile
 800a30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a312:	f383 8811 	msr	BASEPRI, r3
 800a316:	f3bf 8f6f 	isb	sy
 800a31a:	f3bf 8f4f 	dsb	sy
 800a31e:	60bb      	str	r3, [r7, #8]
}
 800a320:	bf00      	nop
 800a322:	bf00      	nop
 800a324:	e7fd      	b.n	800a322 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a326:	f000 f883 	bl	800a430 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a32a:	2100      	movs	r1, #0
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 fd1b 	bl	800ad68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a332:	f000 f88b 	bl	800a44c <xTaskResumeAll>
 800a336:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d107      	bne.n	800a34e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a33e:	4b07      	ldr	r3, [pc, #28]	@ (800a35c <vTaskDelay+0x68>)
 800a340:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a344:	601a      	str	r2, [r3, #0]
 800a346:	f3bf 8f4f 	dsb	sy
 800a34a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a34e:	bf00      	nop
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	200092b0 	.word	0x200092b0
 800a35c:	e000ed04 	.word	0xe000ed04

0800a360 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b08a      	sub	sp, #40	@ 0x28
 800a364:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a366:	2300      	movs	r3, #0
 800a368:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a36a:	2300      	movs	r3, #0
 800a36c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a36e:	463a      	mov	r2, r7
 800a370:	1d39      	adds	r1, r7, #4
 800a372:	f107 0308 	add.w	r3, r7, #8
 800a376:	4618      	mov	r0, r3
 800a378:	f7ff f834 	bl	80093e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a37c:	6839      	ldr	r1, [r7, #0]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	68ba      	ldr	r2, [r7, #8]
 800a382:	9202      	str	r2, [sp, #8]
 800a384:	9301      	str	r3, [sp, #4]
 800a386:	2300      	movs	r3, #0
 800a388:	9300      	str	r3, [sp, #0]
 800a38a:	2300      	movs	r3, #0
 800a38c:	460a      	mov	r2, r1
 800a38e:	4922      	ldr	r1, [pc, #136]	@ (800a418 <vTaskStartScheduler+0xb8>)
 800a390:	4822      	ldr	r0, [pc, #136]	@ (800a41c <vTaskStartScheduler+0xbc>)
 800a392:	f7ff fe09 	bl	8009fa8 <xTaskCreateStatic>
 800a396:	4603      	mov	r3, r0
 800a398:	4a21      	ldr	r2, [pc, #132]	@ (800a420 <vTaskStartScheduler+0xc0>)
 800a39a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a39c:	4b20      	ldr	r3, [pc, #128]	@ (800a420 <vTaskStartScheduler+0xc0>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d002      	beq.n	800a3aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	617b      	str	r3, [r7, #20]
 800a3a8:	e001      	b.n	800a3ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d102      	bne.n	800a3ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a3b4:	f000 fd2c 	bl	800ae10 <xTimerCreateTimerTask>
 800a3b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d116      	bne.n	800a3ee <vTaskStartScheduler+0x8e>
	__asm volatile
 800a3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c4:	f383 8811 	msr	BASEPRI, r3
 800a3c8:	f3bf 8f6f 	isb	sy
 800a3cc:	f3bf 8f4f 	dsb	sy
 800a3d0:	613b      	str	r3, [r7, #16]
}
 800a3d2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a3d4:	4b13      	ldr	r3, [pc, #76]	@ (800a424 <vTaskStartScheduler+0xc4>)
 800a3d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a3da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a3dc:	4b12      	ldr	r3, [pc, #72]	@ (800a428 <vTaskStartScheduler+0xc8>)
 800a3de:	2201      	movs	r2, #1
 800a3e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a3e2:	4b12      	ldr	r3, [pc, #72]	@ (800a42c <vTaskStartScheduler+0xcc>)
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a3e8:	f001 f8fa 	bl	800b5e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a3ec:	e00f      	b.n	800a40e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a3f4:	d10b      	bne.n	800a40e <vTaskStartScheduler+0xae>
	__asm volatile
 800a3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3fa:	f383 8811 	msr	BASEPRI, r3
 800a3fe:	f3bf 8f6f 	isb	sy
 800a402:	f3bf 8f4f 	dsb	sy
 800a406:	60fb      	str	r3, [r7, #12]
}
 800a408:	bf00      	nop
 800a40a:	bf00      	nop
 800a40c:	e7fd      	b.n	800a40a <vTaskStartScheduler+0xaa>
}
 800a40e:	bf00      	nop
 800a410:	3718      	adds	r7, #24
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	0801f9b0 	.word	0x0801f9b0
 800a41c:	0800aaa1 	.word	0x0800aaa1
 800a420:	200092ac 	.word	0x200092ac
 800a424:	200092a8 	.word	0x200092a8
 800a428:	20009294 	.word	0x20009294
 800a42c:	2000928c 	.word	0x2000928c

0800a430 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a430:	b480      	push	{r7}
 800a432:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a434:	4b04      	ldr	r3, [pc, #16]	@ (800a448 <vTaskSuspendAll+0x18>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	3301      	adds	r3, #1
 800a43a:	4a03      	ldr	r2, [pc, #12]	@ (800a448 <vTaskSuspendAll+0x18>)
 800a43c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a43e:	bf00      	nop
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr
 800a448:	200092b0 	.word	0x200092b0

0800a44c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a452:	2300      	movs	r3, #0
 800a454:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a456:	2300      	movs	r3, #0
 800a458:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a45a:	4b42      	ldr	r3, [pc, #264]	@ (800a564 <xTaskResumeAll+0x118>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d10b      	bne.n	800a47a <xTaskResumeAll+0x2e>
	__asm volatile
 800a462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a466:	f383 8811 	msr	BASEPRI, r3
 800a46a:	f3bf 8f6f 	isb	sy
 800a46e:	f3bf 8f4f 	dsb	sy
 800a472:	603b      	str	r3, [r7, #0]
}
 800a474:	bf00      	nop
 800a476:	bf00      	nop
 800a478:	e7fd      	b.n	800a476 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a47a:	f001 f955 	bl	800b728 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a47e:	4b39      	ldr	r3, [pc, #228]	@ (800a564 <xTaskResumeAll+0x118>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	3b01      	subs	r3, #1
 800a484:	4a37      	ldr	r2, [pc, #220]	@ (800a564 <xTaskResumeAll+0x118>)
 800a486:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a488:	4b36      	ldr	r3, [pc, #216]	@ (800a564 <xTaskResumeAll+0x118>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d162      	bne.n	800a556 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a490:	4b35      	ldr	r3, [pc, #212]	@ (800a568 <xTaskResumeAll+0x11c>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d05e      	beq.n	800a556 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a498:	e02f      	b.n	800a4fa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a49a:	4b34      	ldr	r3, [pc, #208]	@ (800a56c <xTaskResumeAll+0x120>)
 800a49c:	68db      	ldr	r3, [r3, #12]
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	3318      	adds	r3, #24
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7ff f85a 	bl	8009560 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	3304      	adds	r3, #4
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f7ff f855 	bl	8009560 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4ba:	4b2d      	ldr	r3, [pc, #180]	@ (800a570 <xTaskResumeAll+0x124>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d903      	bls.n	800a4ca <xTaskResumeAll+0x7e>
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4c6:	4a2a      	ldr	r2, [pc, #168]	@ (800a570 <xTaskResumeAll+0x124>)
 800a4c8:	6013      	str	r3, [r2, #0]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4ce:	4613      	mov	r3, r2
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	4413      	add	r3, r2
 800a4d4:	009b      	lsls	r3, r3, #2
 800a4d6:	4a27      	ldr	r2, [pc, #156]	@ (800a574 <xTaskResumeAll+0x128>)
 800a4d8:	441a      	add	r2, r3
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	3304      	adds	r3, #4
 800a4de:	4619      	mov	r1, r3
 800a4e0:	4610      	mov	r0, r2
 800a4e2:	f7fe ffe0 	bl	80094a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4ea:	4b23      	ldr	r3, [pc, #140]	@ (800a578 <xTaskResumeAll+0x12c>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d302      	bcc.n	800a4fa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a4f4:	4b21      	ldr	r3, [pc, #132]	@ (800a57c <xTaskResumeAll+0x130>)
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a4fa:	4b1c      	ldr	r3, [pc, #112]	@ (800a56c <xTaskResumeAll+0x120>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d1cb      	bne.n	800a49a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d001      	beq.n	800a50c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a508:	f000 fb80 	bl	800ac0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a50c:	4b1c      	ldr	r3, [pc, #112]	@ (800a580 <xTaskResumeAll+0x134>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d010      	beq.n	800a53a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a518:	f000 f846 	bl	800a5a8 <xTaskIncrementTick>
 800a51c:	4603      	mov	r3, r0
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d002      	beq.n	800a528 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a522:	4b16      	ldr	r3, [pc, #88]	@ (800a57c <xTaskResumeAll+0x130>)
 800a524:	2201      	movs	r2, #1
 800a526:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	3b01      	subs	r3, #1
 800a52c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d1f1      	bne.n	800a518 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a534:	4b12      	ldr	r3, [pc, #72]	@ (800a580 <xTaskResumeAll+0x134>)
 800a536:	2200      	movs	r2, #0
 800a538:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a53a:	4b10      	ldr	r3, [pc, #64]	@ (800a57c <xTaskResumeAll+0x130>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d009      	beq.n	800a556 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a542:	2301      	movs	r3, #1
 800a544:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a546:	4b0f      	ldr	r3, [pc, #60]	@ (800a584 <xTaskResumeAll+0x138>)
 800a548:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a54c:	601a      	str	r2, [r3, #0]
 800a54e:	f3bf 8f4f 	dsb	sy
 800a552:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a556:	f001 f919 	bl	800b78c <vPortExitCritical>

	return xAlreadyYielded;
 800a55a:	68bb      	ldr	r3, [r7, #8]
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3710      	adds	r7, #16
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}
 800a564:	200092b0 	.word	0x200092b0
 800a568:	20009288 	.word	0x20009288
 800a56c:	20009248 	.word	0x20009248
 800a570:	20009290 	.word	0x20009290
 800a574:	20008db8 	.word	0x20008db8
 800a578:	20008db4 	.word	0x20008db4
 800a57c:	2000929c 	.word	0x2000929c
 800a580:	20009298 	.word	0x20009298
 800a584:	e000ed04 	.word	0xe000ed04

0800a588 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a588:	b480      	push	{r7}
 800a58a:	b083      	sub	sp, #12
 800a58c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a58e:	4b05      	ldr	r3, [pc, #20]	@ (800a5a4 <xTaskGetTickCount+0x1c>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a594:	687b      	ldr	r3, [r7, #4]
}
 800a596:	4618      	mov	r0, r3
 800a598:	370c      	adds	r7, #12
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	2000928c 	.word	0x2000928c

0800a5a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b086      	sub	sp, #24
 800a5ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5b2:	4b4f      	ldr	r3, [pc, #316]	@ (800a6f0 <xTaskIncrementTick+0x148>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	f040 8090 	bne.w	800a6dc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a5bc:	4b4d      	ldr	r3, [pc, #308]	@ (800a6f4 <xTaskIncrementTick+0x14c>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a5c4:	4a4b      	ldr	r2, [pc, #300]	@ (800a6f4 <xTaskIncrementTick+0x14c>)
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d121      	bne.n	800a614 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a5d0:	4b49      	ldr	r3, [pc, #292]	@ (800a6f8 <xTaskIncrementTick+0x150>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d00b      	beq.n	800a5f2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a5da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5de:	f383 8811 	msr	BASEPRI, r3
 800a5e2:	f3bf 8f6f 	isb	sy
 800a5e6:	f3bf 8f4f 	dsb	sy
 800a5ea:	603b      	str	r3, [r7, #0]
}
 800a5ec:	bf00      	nop
 800a5ee:	bf00      	nop
 800a5f0:	e7fd      	b.n	800a5ee <xTaskIncrementTick+0x46>
 800a5f2:	4b41      	ldr	r3, [pc, #260]	@ (800a6f8 <xTaskIncrementTick+0x150>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	60fb      	str	r3, [r7, #12]
 800a5f8:	4b40      	ldr	r3, [pc, #256]	@ (800a6fc <xTaskIncrementTick+0x154>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a3e      	ldr	r2, [pc, #248]	@ (800a6f8 <xTaskIncrementTick+0x150>)
 800a5fe:	6013      	str	r3, [r2, #0]
 800a600:	4a3e      	ldr	r2, [pc, #248]	@ (800a6fc <xTaskIncrementTick+0x154>)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	6013      	str	r3, [r2, #0]
 800a606:	4b3e      	ldr	r3, [pc, #248]	@ (800a700 <xTaskIncrementTick+0x158>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	3301      	adds	r3, #1
 800a60c:	4a3c      	ldr	r2, [pc, #240]	@ (800a700 <xTaskIncrementTick+0x158>)
 800a60e:	6013      	str	r3, [r2, #0]
 800a610:	f000 fafc 	bl	800ac0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a614:	4b3b      	ldr	r3, [pc, #236]	@ (800a704 <xTaskIncrementTick+0x15c>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	693a      	ldr	r2, [r7, #16]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d349      	bcc.n	800a6b2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a61e:	4b36      	ldr	r3, [pc, #216]	@ (800a6f8 <xTaskIncrementTick+0x150>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d104      	bne.n	800a632 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a628:	4b36      	ldr	r3, [pc, #216]	@ (800a704 <xTaskIncrementTick+0x15c>)
 800a62a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a62e:	601a      	str	r2, [r3, #0]
					break;
 800a630:	e03f      	b.n	800a6b2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a632:	4b31      	ldr	r3, [pc, #196]	@ (800a6f8 <xTaskIncrementTick+0x150>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	68db      	ldr	r3, [r3, #12]
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a642:	693a      	ldr	r2, [r7, #16]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	429a      	cmp	r2, r3
 800a648:	d203      	bcs.n	800a652 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a64a:	4a2e      	ldr	r2, [pc, #184]	@ (800a704 <xTaskIncrementTick+0x15c>)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a650:	e02f      	b.n	800a6b2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	3304      	adds	r3, #4
 800a656:	4618      	mov	r0, r3
 800a658:	f7fe ff82 	bl	8009560 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a660:	2b00      	cmp	r3, #0
 800a662:	d004      	beq.n	800a66e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	3318      	adds	r3, #24
 800a668:	4618      	mov	r0, r3
 800a66a:	f7fe ff79 	bl	8009560 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a672:	4b25      	ldr	r3, [pc, #148]	@ (800a708 <xTaskIncrementTick+0x160>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	429a      	cmp	r2, r3
 800a678:	d903      	bls.n	800a682 <xTaskIncrementTick+0xda>
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a67e:	4a22      	ldr	r2, [pc, #136]	@ (800a708 <xTaskIncrementTick+0x160>)
 800a680:	6013      	str	r3, [r2, #0]
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a686:	4613      	mov	r3, r2
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	4413      	add	r3, r2
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	4a1f      	ldr	r2, [pc, #124]	@ (800a70c <xTaskIncrementTick+0x164>)
 800a690:	441a      	add	r2, r3
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	3304      	adds	r3, #4
 800a696:	4619      	mov	r1, r3
 800a698:	4610      	mov	r0, r2
 800a69a:	f7fe ff04 	bl	80094a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6a2:	4b1b      	ldr	r3, [pc, #108]	@ (800a710 <xTaskIncrementTick+0x168>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d3b8      	bcc.n	800a61e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6b0:	e7b5      	b.n	800a61e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a6b2:	4b17      	ldr	r3, [pc, #92]	@ (800a710 <xTaskIncrementTick+0x168>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6b8:	4914      	ldr	r1, [pc, #80]	@ (800a70c <xTaskIncrementTick+0x164>)
 800a6ba:	4613      	mov	r3, r2
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	4413      	add	r3, r2
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	440b      	add	r3, r1
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d901      	bls.n	800a6ce <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a6ce:	4b11      	ldr	r3, [pc, #68]	@ (800a714 <xTaskIncrementTick+0x16c>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d007      	beq.n	800a6e6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	617b      	str	r3, [r7, #20]
 800a6da:	e004      	b.n	800a6e6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a6dc:	4b0e      	ldr	r3, [pc, #56]	@ (800a718 <xTaskIncrementTick+0x170>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	3301      	adds	r3, #1
 800a6e2:	4a0d      	ldr	r2, [pc, #52]	@ (800a718 <xTaskIncrementTick+0x170>)
 800a6e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a6e6:	697b      	ldr	r3, [r7, #20]
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3718      	adds	r7, #24
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}
 800a6f0:	200092b0 	.word	0x200092b0
 800a6f4:	2000928c 	.word	0x2000928c
 800a6f8:	20009240 	.word	0x20009240
 800a6fc:	20009244 	.word	0x20009244
 800a700:	200092a0 	.word	0x200092a0
 800a704:	200092a8 	.word	0x200092a8
 800a708:	20009290 	.word	0x20009290
 800a70c:	20008db8 	.word	0x20008db8
 800a710:	20008db4 	.word	0x20008db4
 800a714:	2000929c 	.word	0x2000929c
 800a718:	20009298 	.word	0x20009298

0800a71c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a71c:	b480      	push	{r7}
 800a71e:	b085      	sub	sp, #20
 800a720:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a722:	4b28      	ldr	r3, [pc, #160]	@ (800a7c4 <vTaskSwitchContext+0xa8>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d003      	beq.n	800a732 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a72a:	4b27      	ldr	r3, [pc, #156]	@ (800a7c8 <vTaskSwitchContext+0xac>)
 800a72c:	2201      	movs	r2, #1
 800a72e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a730:	e042      	b.n	800a7b8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800a732:	4b25      	ldr	r3, [pc, #148]	@ (800a7c8 <vTaskSwitchContext+0xac>)
 800a734:	2200      	movs	r2, #0
 800a736:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a738:	4b24      	ldr	r3, [pc, #144]	@ (800a7cc <vTaskSwitchContext+0xb0>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	60fb      	str	r3, [r7, #12]
 800a73e:	e011      	b.n	800a764 <vTaskSwitchContext+0x48>
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d10b      	bne.n	800a75e <vTaskSwitchContext+0x42>
	__asm volatile
 800a746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a74a:	f383 8811 	msr	BASEPRI, r3
 800a74e:	f3bf 8f6f 	isb	sy
 800a752:	f3bf 8f4f 	dsb	sy
 800a756:	607b      	str	r3, [r7, #4]
}
 800a758:	bf00      	nop
 800a75a:	bf00      	nop
 800a75c:	e7fd      	b.n	800a75a <vTaskSwitchContext+0x3e>
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	3b01      	subs	r3, #1
 800a762:	60fb      	str	r3, [r7, #12]
 800a764:	491a      	ldr	r1, [pc, #104]	@ (800a7d0 <vTaskSwitchContext+0xb4>)
 800a766:	68fa      	ldr	r2, [r7, #12]
 800a768:	4613      	mov	r3, r2
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	4413      	add	r3, r2
 800a76e:	009b      	lsls	r3, r3, #2
 800a770:	440b      	add	r3, r1
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d0e3      	beq.n	800a740 <vTaskSwitchContext+0x24>
 800a778:	68fa      	ldr	r2, [r7, #12]
 800a77a:	4613      	mov	r3, r2
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	4413      	add	r3, r2
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	4a13      	ldr	r2, [pc, #76]	@ (800a7d0 <vTaskSwitchContext+0xb4>)
 800a784:	4413      	add	r3, r2
 800a786:	60bb      	str	r3, [r7, #8]
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	685a      	ldr	r2, [r3, #4]
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	605a      	str	r2, [r3, #4]
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	685a      	ldr	r2, [r3, #4]
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	3308      	adds	r3, #8
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d104      	bne.n	800a7a8 <vTaskSwitchContext+0x8c>
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	685a      	ldr	r2, [r3, #4]
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	605a      	str	r2, [r3, #4]
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	4a09      	ldr	r2, [pc, #36]	@ (800a7d4 <vTaskSwitchContext+0xb8>)
 800a7b0:	6013      	str	r3, [r2, #0]
 800a7b2:	4a06      	ldr	r2, [pc, #24]	@ (800a7cc <vTaskSwitchContext+0xb0>)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	6013      	str	r3, [r2, #0]
}
 800a7b8:	bf00      	nop
 800a7ba:	3714      	adds	r7, #20
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr
 800a7c4:	200092b0 	.word	0x200092b0
 800a7c8:	2000929c 	.word	0x2000929c
 800a7cc:	20009290 	.word	0x20009290
 800a7d0:	20008db8 	.word	0x20008db8
 800a7d4:	20008db4 	.word	0x20008db4

0800a7d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d10b      	bne.n	800a800 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a7e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ec:	f383 8811 	msr	BASEPRI, r3
 800a7f0:	f3bf 8f6f 	isb	sy
 800a7f4:	f3bf 8f4f 	dsb	sy
 800a7f8:	60fb      	str	r3, [r7, #12]
}
 800a7fa:	bf00      	nop
 800a7fc:	bf00      	nop
 800a7fe:	e7fd      	b.n	800a7fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a800:	4b07      	ldr	r3, [pc, #28]	@ (800a820 <vTaskPlaceOnEventList+0x48>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	3318      	adds	r3, #24
 800a806:	4619      	mov	r1, r3
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f7fe fe70 	bl	80094ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a80e:	2101      	movs	r1, #1
 800a810:	6838      	ldr	r0, [r7, #0]
 800a812:	f000 faa9 	bl	800ad68 <prvAddCurrentTaskToDelayedList>
}
 800a816:	bf00      	nop
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	20008db4 	.word	0x20008db4

0800a824 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a824:	b580      	push	{r7, lr}
 800a826:	b086      	sub	sp, #24
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d10b      	bne.n	800a84e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a83a:	f383 8811 	msr	BASEPRI, r3
 800a83e:	f3bf 8f6f 	isb	sy
 800a842:	f3bf 8f4f 	dsb	sy
 800a846:	617b      	str	r3, [r7, #20]
}
 800a848:	bf00      	nop
 800a84a:	bf00      	nop
 800a84c:	e7fd      	b.n	800a84a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a84e:	4b0a      	ldr	r3, [pc, #40]	@ (800a878 <vTaskPlaceOnEventListRestricted+0x54>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	3318      	adds	r3, #24
 800a854:	4619      	mov	r1, r3
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f7fe fe25 	bl	80094a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d002      	beq.n	800a868 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a862:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a866:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a868:	6879      	ldr	r1, [r7, #4]
 800a86a:	68b8      	ldr	r0, [r7, #8]
 800a86c:	f000 fa7c 	bl	800ad68 <prvAddCurrentTaskToDelayedList>
	}
 800a870:	bf00      	nop
 800a872:	3718      	adds	r7, #24
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}
 800a878:	20008db4 	.word	0x20008db4

0800a87c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b086      	sub	sp, #24
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	68db      	ldr	r3, [r3, #12]
 800a88a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d10b      	bne.n	800a8aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a896:	f383 8811 	msr	BASEPRI, r3
 800a89a:	f3bf 8f6f 	isb	sy
 800a89e:	f3bf 8f4f 	dsb	sy
 800a8a2:	60fb      	str	r3, [r7, #12]
}
 800a8a4:	bf00      	nop
 800a8a6:	bf00      	nop
 800a8a8:	e7fd      	b.n	800a8a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	3318      	adds	r3, #24
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7fe fe56 	bl	8009560 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8b4:	4b1d      	ldr	r3, [pc, #116]	@ (800a92c <xTaskRemoveFromEventList+0xb0>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d11d      	bne.n	800a8f8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	3304      	adds	r3, #4
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7fe fe4d 	bl	8009560 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8ca:	4b19      	ldr	r3, [pc, #100]	@ (800a930 <xTaskRemoveFromEventList+0xb4>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d903      	bls.n	800a8da <xTaskRemoveFromEventList+0x5e>
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8d6:	4a16      	ldr	r2, [pc, #88]	@ (800a930 <xTaskRemoveFromEventList+0xb4>)
 800a8d8:	6013      	str	r3, [r2, #0]
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8de:	4613      	mov	r3, r2
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	4413      	add	r3, r2
 800a8e4:	009b      	lsls	r3, r3, #2
 800a8e6:	4a13      	ldr	r2, [pc, #76]	@ (800a934 <xTaskRemoveFromEventList+0xb8>)
 800a8e8:	441a      	add	r2, r3
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	3304      	adds	r3, #4
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	4610      	mov	r0, r2
 800a8f2:	f7fe fdd8 	bl	80094a6 <vListInsertEnd>
 800a8f6:	e005      	b.n	800a904 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	3318      	adds	r3, #24
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	480e      	ldr	r0, [pc, #56]	@ (800a938 <xTaskRemoveFromEventList+0xbc>)
 800a900:	f7fe fdd1 	bl	80094a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a908:	4b0c      	ldr	r3, [pc, #48]	@ (800a93c <xTaskRemoveFromEventList+0xc0>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a90e:	429a      	cmp	r2, r3
 800a910:	d905      	bls.n	800a91e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a912:	2301      	movs	r3, #1
 800a914:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a916:	4b0a      	ldr	r3, [pc, #40]	@ (800a940 <xTaskRemoveFromEventList+0xc4>)
 800a918:	2201      	movs	r2, #1
 800a91a:	601a      	str	r2, [r3, #0]
 800a91c:	e001      	b.n	800a922 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a91e:	2300      	movs	r3, #0
 800a920:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a922:	697b      	ldr	r3, [r7, #20]
}
 800a924:	4618      	mov	r0, r3
 800a926:	3718      	adds	r7, #24
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	200092b0 	.word	0x200092b0
 800a930:	20009290 	.word	0x20009290
 800a934:	20008db8 	.word	0x20008db8
 800a938:	20009248 	.word	0x20009248
 800a93c:	20008db4 	.word	0x20008db4
 800a940:	2000929c 	.word	0x2000929c

0800a944 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d10b      	bne.n	800a96a <vTaskSetTimeOutState+0x26>
	__asm volatile
 800a952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a956:	f383 8811 	msr	BASEPRI, r3
 800a95a:	f3bf 8f6f 	isb	sy
 800a95e:	f3bf 8f4f 	dsb	sy
 800a962:	60fb      	str	r3, [r7, #12]
}
 800a964:	bf00      	nop
 800a966:	bf00      	nop
 800a968:	e7fd      	b.n	800a966 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800a96a:	f000 fedd 	bl	800b728 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a96e:	4b07      	ldr	r3, [pc, #28]	@ (800a98c <vTaskSetTimeOutState+0x48>)
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800a976:	4b06      	ldr	r3, [pc, #24]	@ (800a990 <vTaskSetTimeOutState+0x4c>)
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800a97e:	f000 ff05 	bl	800b78c <vPortExitCritical>
}
 800a982:	bf00      	nop
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	200092a0 	.word	0x200092a0
 800a990:	2000928c 	.word	0x2000928c

0800a994 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a99c:	4b06      	ldr	r3, [pc, #24]	@ (800a9b8 <vTaskInternalSetTimeOutState+0x24>)
 800a99e:	681a      	ldr	r2, [r3, #0]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a9a4:	4b05      	ldr	r3, [pc, #20]	@ (800a9bc <vTaskInternalSetTimeOutState+0x28>)
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	605a      	str	r2, [r3, #4]
}
 800a9ac:	bf00      	nop
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr
 800a9b8:	200092a0 	.word	0x200092a0
 800a9bc:	2000928c 	.word	0x2000928c

0800a9c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b088      	sub	sp, #32
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d10b      	bne.n	800a9e8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a9d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9d4:	f383 8811 	msr	BASEPRI, r3
 800a9d8:	f3bf 8f6f 	isb	sy
 800a9dc:	f3bf 8f4f 	dsb	sy
 800a9e0:	613b      	str	r3, [r7, #16]
}
 800a9e2:	bf00      	nop
 800a9e4:	bf00      	nop
 800a9e6:	e7fd      	b.n	800a9e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d10b      	bne.n	800aa06 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a9ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9f2:	f383 8811 	msr	BASEPRI, r3
 800a9f6:	f3bf 8f6f 	isb	sy
 800a9fa:	f3bf 8f4f 	dsb	sy
 800a9fe:	60fb      	str	r3, [r7, #12]
}
 800aa00:	bf00      	nop
 800aa02:	bf00      	nop
 800aa04:	e7fd      	b.n	800aa02 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800aa06:	f000 fe8f 	bl	800b728 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aa0a:	4b1d      	ldr	r3, [pc, #116]	@ (800aa80 <xTaskCheckForTimeOut+0xc0>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	69ba      	ldr	r2, [r7, #24]
 800aa16:	1ad3      	subs	r3, r2, r3
 800aa18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa22:	d102      	bne.n	800aa2a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aa24:	2300      	movs	r3, #0
 800aa26:	61fb      	str	r3, [r7, #28]
 800aa28:	e023      	b.n	800aa72 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	4b15      	ldr	r3, [pc, #84]	@ (800aa84 <xTaskCheckForTimeOut+0xc4>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d007      	beq.n	800aa46 <xTaskCheckForTimeOut+0x86>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	69ba      	ldr	r2, [r7, #24]
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d302      	bcc.n	800aa46 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aa40:	2301      	movs	r3, #1
 800aa42:	61fb      	str	r3, [r7, #28]
 800aa44:	e015      	b.n	800aa72 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	697a      	ldr	r2, [r7, #20]
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d20b      	bcs.n	800aa68 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	681a      	ldr	r2, [r3, #0]
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	1ad2      	subs	r2, r2, r3
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f7ff ff99 	bl	800a994 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aa62:	2300      	movs	r3, #0
 800aa64:	61fb      	str	r3, [r7, #28]
 800aa66:	e004      	b.n	800aa72 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aa72:	f000 fe8b 	bl	800b78c <vPortExitCritical>

	return xReturn;
 800aa76:	69fb      	ldr	r3, [r7, #28]
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3720      	adds	r7, #32
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	2000928c 	.word	0x2000928c
 800aa84:	200092a0 	.word	0x200092a0

0800aa88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aa88:	b480      	push	{r7}
 800aa8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aa8c:	4b03      	ldr	r3, [pc, #12]	@ (800aa9c <vTaskMissedYield+0x14>)
 800aa8e:	2201      	movs	r2, #1
 800aa90:	601a      	str	r2, [r3, #0]
}
 800aa92:	bf00      	nop
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr
 800aa9c:	2000929c 	.word	0x2000929c

0800aaa0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b082      	sub	sp, #8
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aaa8:	f000 f852 	bl	800ab50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aaac:	4b06      	ldr	r3, [pc, #24]	@ (800aac8 <prvIdleTask+0x28>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d9f9      	bls.n	800aaa8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aab4:	4b05      	ldr	r3, [pc, #20]	@ (800aacc <prvIdleTask+0x2c>)
 800aab6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aaba:	601a      	str	r2, [r3, #0]
 800aabc:	f3bf 8f4f 	dsb	sy
 800aac0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aac4:	e7f0      	b.n	800aaa8 <prvIdleTask+0x8>
 800aac6:	bf00      	nop
 800aac8:	20008db8 	.word	0x20008db8
 800aacc:	e000ed04 	.word	0xe000ed04

0800aad0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b082      	sub	sp, #8
 800aad4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aad6:	2300      	movs	r3, #0
 800aad8:	607b      	str	r3, [r7, #4]
 800aada:	e00c      	b.n	800aaf6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	4613      	mov	r3, r2
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	4413      	add	r3, r2
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	4a12      	ldr	r2, [pc, #72]	@ (800ab30 <prvInitialiseTaskLists+0x60>)
 800aae8:	4413      	add	r3, r2
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fe fcae 	bl	800944c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	607b      	str	r3, [r7, #4]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2b37      	cmp	r3, #55	@ 0x37
 800aafa:	d9ef      	bls.n	800aadc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aafc:	480d      	ldr	r0, [pc, #52]	@ (800ab34 <prvInitialiseTaskLists+0x64>)
 800aafe:	f7fe fca5 	bl	800944c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ab02:	480d      	ldr	r0, [pc, #52]	@ (800ab38 <prvInitialiseTaskLists+0x68>)
 800ab04:	f7fe fca2 	bl	800944c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ab08:	480c      	ldr	r0, [pc, #48]	@ (800ab3c <prvInitialiseTaskLists+0x6c>)
 800ab0a:	f7fe fc9f 	bl	800944c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ab0e:	480c      	ldr	r0, [pc, #48]	@ (800ab40 <prvInitialiseTaskLists+0x70>)
 800ab10:	f7fe fc9c 	bl	800944c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ab14:	480b      	ldr	r0, [pc, #44]	@ (800ab44 <prvInitialiseTaskLists+0x74>)
 800ab16:	f7fe fc99 	bl	800944c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ab1a:	4b0b      	ldr	r3, [pc, #44]	@ (800ab48 <prvInitialiseTaskLists+0x78>)
 800ab1c:	4a05      	ldr	r2, [pc, #20]	@ (800ab34 <prvInitialiseTaskLists+0x64>)
 800ab1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ab20:	4b0a      	ldr	r3, [pc, #40]	@ (800ab4c <prvInitialiseTaskLists+0x7c>)
 800ab22:	4a05      	ldr	r2, [pc, #20]	@ (800ab38 <prvInitialiseTaskLists+0x68>)
 800ab24:	601a      	str	r2, [r3, #0]
}
 800ab26:	bf00      	nop
 800ab28:	3708      	adds	r7, #8
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	bf00      	nop
 800ab30:	20008db8 	.word	0x20008db8
 800ab34:	20009218 	.word	0x20009218
 800ab38:	2000922c 	.word	0x2000922c
 800ab3c:	20009248 	.word	0x20009248
 800ab40:	2000925c 	.word	0x2000925c
 800ab44:	20009274 	.word	0x20009274
 800ab48:	20009240 	.word	0x20009240
 800ab4c:	20009244 	.word	0x20009244

0800ab50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab56:	e019      	b.n	800ab8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ab58:	f000 fde6 	bl	800b728 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab5c:	4b10      	ldr	r3, [pc, #64]	@ (800aba0 <prvCheckTasksWaitingTermination+0x50>)
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	3304      	adds	r3, #4
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7fe fcf9 	bl	8009560 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ab6e:	4b0d      	ldr	r3, [pc, #52]	@ (800aba4 <prvCheckTasksWaitingTermination+0x54>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	3b01      	subs	r3, #1
 800ab74:	4a0b      	ldr	r2, [pc, #44]	@ (800aba4 <prvCheckTasksWaitingTermination+0x54>)
 800ab76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ab78:	4b0b      	ldr	r3, [pc, #44]	@ (800aba8 <prvCheckTasksWaitingTermination+0x58>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	3b01      	subs	r3, #1
 800ab7e:	4a0a      	ldr	r2, [pc, #40]	@ (800aba8 <prvCheckTasksWaitingTermination+0x58>)
 800ab80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ab82:	f000 fe03 	bl	800b78c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 f810 	bl	800abac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab8c:	4b06      	ldr	r3, [pc, #24]	@ (800aba8 <prvCheckTasksWaitingTermination+0x58>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d1e1      	bne.n	800ab58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ab94:	bf00      	nop
 800ab96:	bf00      	nop
 800ab98:	3708      	adds	r7, #8
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	2000925c 	.word	0x2000925c
 800aba4:	20009288 	.word	0x20009288
 800aba8:	20009270 	.word	0x20009270

0800abac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d108      	bne.n	800abd0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abc2:	4618      	mov	r0, r3
 800abc4:	f000 ffa0 	bl	800bb08 <vPortFree>
				vPortFree( pxTCB );
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 ff9d 	bl	800bb08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800abce:	e019      	b.n	800ac04 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	d103      	bne.n	800abe2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 ff94 	bl	800bb08 <vPortFree>
	}
 800abe0:	e010      	b.n	800ac04 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800abe8:	2b02      	cmp	r3, #2
 800abea:	d00b      	beq.n	800ac04 <prvDeleteTCB+0x58>
	__asm volatile
 800abec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abf0:	f383 8811 	msr	BASEPRI, r3
 800abf4:	f3bf 8f6f 	isb	sy
 800abf8:	f3bf 8f4f 	dsb	sy
 800abfc:	60fb      	str	r3, [r7, #12]
}
 800abfe:	bf00      	nop
 800ac00:	bf00      	nop
 800ac02:	e7fd      	b.n	800ac00 <prvDeleteTCB+0x54>
	}
 800ac04:	bf00      	nop
 800ac06:	3710      	adds	r7, #16
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac12:	4b0c      	ldr	r3, [pc, #48]	@ (800ac44 <prvResetNextTaskUnblockTime+0x38>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d104      	bne.n	800ac26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ac1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ac48 <prvResetNextTaskUnblockTime+0x3c>)
 800ac1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ac22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ac24:	e008      	b.n	800ac38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac26:	4b07      	ldr	r3, [pc, #28]	@ (800ac44 <prvResetNextTaskUnblockTime+0x38>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	4a04      	ldr	r2, [pc, #16]	@ (800ac48 <prvResetNextTaskUnblockTime+0x3c>)
 800ac36:	6013      	str	r3, [r2, #0]
}
 800ac38:	bf00      	nop
 800ac3a:	370c      	adds	r7, #12
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr
 800ac44:	20009240 	.word	0x20009240
 800ac48:	200092a8 	.word	0x200092a8

0800ac4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ac52:	4b0b      	ldr	r3, [pc, #44]	@ (800ac80 <xTaskGetSchedulerState+0x34>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d102      	bne.n	800ac60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	607b      	str	r3, [r7, #4]
 800ac5e:	e008      	b.n	800ac72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac60:	4b08      	ldr	r3, [pc, #32]	@ (800ac84 <xTaskGetSchedulerState+0x38>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d102      	bne.n	800ac6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ac68:	2302      	movs	r3, #2
 800ac6a:	607b      	str	r3, [r7, #4]
 800ac6c:	e001      	b.n	800ac72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ac72:	687b      	ldr	r3, [r7, #4]
	}
 800ac74:	4618      	mov	r0, r3
 800ac76:	370c      	adds	r7, #12
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr
 800ac80:	20009294 	.word	0x20009294
 800ac84:	200092b0 	.word	0x200092b0

0800ac88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b086      	sub	sp, #24
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ac94:	2300      	movs	r3, #0
 800ac96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d058      	beq.n	800ad50 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ac9e:	4b2f      	ldr	r3, [pc, #188]	@ (800ad5c <xTaskPriorityDisinherit+0xd4>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	693a      	ldr	r2, [r7, #16]
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d00b      	beq.n	800acc0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800aca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acac:	f383 8811 	msr	BASEPRI, r3
 800acb0:	f3bf 8f6f 	isb	sy
 800acb4:	f3bf 8f4f 	dsb	sy
 800acb8:	60fb      	str	r3, [r7, #12]
}
 800acba:	bf00      	nop
 800acbc:	bf00      	nop
 800acbe:	e7fd      	b.n	800acbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d10b      	bne.n	800ace0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800acc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800accc:	f383 8811 	msr	BASEPRI, r3
 800acd0:	f3bf 8f6f 	isb	sy
 800acd4:	f3bf 8f4f 	dsb	sy
 800acd8:	60bb      	str	r3, [r7, #8]
}
 800acda:	bf00      	nop
 800acdc:	bf00      	nop
 800acde:	e7fd      	b.n	800acdc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ace4:	1e5a      	subs	r2, r3, #1
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d02c      	beq.n	800ad50 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d128      	bne.n	800ad50 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	3304      	adds	r3, #4
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7fe fc2c 	bl	8009560 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad14:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad20:	4b0f      	ldr	r3, [pc, #60]	@ (800ad60 <xTaskPriorityDisinherit+0xd8>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d903      	bls.n	800ad30 <xTaskPriorityDisinherit+0xa8>
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad2c:	4a0c      	ldr	r2, [pc, #48]	@ (800ad60 <xTaskPriorityDisinherit+0xd8>)
 800ad2e:	6013      	str	r3, [r2, #0]
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad34:	4613      	mov	r3, r2
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	4413      	add	r3, r2
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	4a09      	ldr	r2, [pc, #36]	@ (800ad64 <xTaskPriorityDisinherit+0xdc>)
 800ad3e:	441a      	add	r2, r3
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	3304      	adds	r3, #4
 800ad44:	4619      	mov	r1, r3
 800ad46:	4610      	mov	r0, r2
 800ad48:	f7fe fbad 	bl	80094a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ad50:	697b      	ldr	r3, [r7, #20]
	}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3718      	adds	r7, #24
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	20008db4 	.word	0x20008db4
 800ad60:	20009290 	.word	0x20009290
 800ad64:	20008db8 	.word	0x20008db8

0800ad68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ad72:	4b21      	ldr	r3, [pc, #132]	@ (800adf8 <prvAddCurrentTaskToDelayedList+0x90>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad78:	4b20      	ldr	r3, [pc, #128]	@ (800adfc <prvAddCurrentTaskToDelayedList+0x94>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	3304      	adds	r3, #4
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7fe fbee 	bl	8009560 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad8a:	d10a      	bne.n	800ada2 <prvAddCurrentTaskToDelayedList+0x3a>
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d007      	beq.n	800ada2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad92:	4b1a      	ldr	r3, [pc, #104]	@ (800adfc <prvAddCurrentTaskToDelayedList+0x94>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	3304      	adds	r3, #4
 800ad98:	4619      	mov	r1, r3
 800ad9a:	4819      	ldr	r0, [pc, #100]	@ (800ae00 <prvAddCurrentTaskToDelayedList+0x98>)
 800ad9c:	f7fe fb83 	bl	80094a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ada0:	e026      	b.n	800adf0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ada2:	68fa      	ldr	r2, [r7, #12]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	4413      	add	r3, r2
 800ada8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800adaa:	4b14      	ldr	r3, [pc, #80]	@ (800adfc <prvAddCurrentTaskToDelayedList+0x94>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	68ba      	ldr	r2, [r7, #8]
 800adb0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800adb2:	68ba      	ldr	r2, [r7, #8]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d209      	bcs.n	800adce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adba:	4b12      	ldr	r3, [pc, #72]	@ (800ae04 <prvAddCurrentTaskToDelayedList+0x9c>)
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	4b0f      	ldr	r3, [pc, #60]	@ (800adfc <prvAddCurrentTaskToDelayedList+0x94>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	3304      	adds	r3, #4
 800adc4:	4619      	mov	r1, r3
 800adc6:	4610      	mov	r0, r2
 800adc8:	f7fe fb91 	bl	80094ee <vListInsert>
}
 800adcc:	e010      	b.n	800adf0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adce:	4b0e      	ldr	r3, [pc, #56]	@ (800ae08 <prvAddCurrentTaskToDelayedList+0xa0>)
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	4b0a      	ldr	r3, [pc, #40]	@ (800adfc <prvAddCurrentTaskToDelayedList+0x94>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	3304      	adds	r3, #4
 800add8:	4619      	mov	r1, r3
 800adda:	4610      	mov	r0, r2
 800addc:	f7fe fb87 	bl	80094ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ade0:	4b0a      	ldr	r3, [pc, #40]	@ (800ae0c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68ba      	ldr	r2, [r7, #8]
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d202      	bcs.n	800adf0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800adea:	4a08      	ldr	r2, [pc, #32]	@ (800ae0c <prvAddCurrentTaskToDelayedList+0xa4>)
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	6013      	str	r3, [r2, #0]
}
 800adf0:	bf00      	nop
 800adf2:	3710      	adds	r7, #16
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}
 800adf8:	2000928c 	.word	0x2000928c
 800adfc:	20008db4 	.word	0x20008db4
 800ae00:	20009274 	.word	0x20009274
 800ae04:	20009244 	.word	0x20009244
 800ae08:	20009240 	.word	0x20009240
 800ae0c:	200092a8 	.word	0x200092a8

0800ae10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b08a      	sub	sp, #40	@ 0x28
 800ae14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ae16:	2300      	movs	r3, #0
 800ae18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ae1a:	f000 fb13 	bl	800b444 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ae1e:	4b1d      	ldr	r3, [pc, #116]	@ (800ae94 <xTimerCreateTimerTask+0x84>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d021      	beq.n	800ae6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ae26:	2300      	movs	r3, #0
 800ae28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ae2e:	1d3a      	adds	r2, r7, #4
 800ae30:	f107 0108 	add.w	r1, r7, #8
 800ae34:	f107 030c 	add.w	r3, r7, #12
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f7fe faed 	bl	8009418 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ae3e:	6879      	ldr	r1, [r7, #4]
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	68fa      	ldr	r2, [r7, #12]
 800ae44:	9202      	str	r2, [sp, #8]
 800ae46:	9301      	str	r3, [sp, #4]
 800ae48:	2302      	movs	r3, #2
 800ae4a:	9300      	str	r3, [sp, #0]
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	460a      	mov	r2, r1
 800ae50:	4911      	ldr	r1, [pc, #68]	@ (800ae98 <xTimerCreateTimerTask+0x88>)
 800ae52:	4812      	ldr	r0, [pc, #72]	@ (800ae9c <xTimerCreateTimerTask+0x8c>)
 800ae54:	f7ff f8a8 	bl	8009fa8 <xTaskCreateStatic>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	4a11      	ldr	r2, [pc, #68]	@ (800aea0 <xTimerCreateTimerTask+0x90>)
 800ae5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ae5e:	4b10      	ldr	r3, [pc, #64]	@ (800aea0 <xTimerCreateTimerTask+0x90>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d001      	beq.n	800ae6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ae66:	2301      	movs	r3, #1
 800ae68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d10b      	bne.n	800ae88 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ae70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae74:	f383 8811 	msr	BASEPRI, r3
 800ae78:	f3bf 8f6f 	isb	sy
 800ae7c:	f3bf 8f4f 	dsb	sy
 800ae80:	613b      	str	r3, [r7, #16]
}
 800ae82:	bf00      	nop
 800ae84:	bf00      	nop
 800ae86:	e7fd      	b.n	800ae84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ae88:	697b      	ldr	r3, [r7, #20]
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3718      	adds	r7, #24
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	200092e4 	.word	0x200092e4
 800ae98:	0801f9b8 	.word	0x0801f9b8
 800ae9c:	0800afdd 	.word	0x0800afdd
 800aea0:	200092e8 	.word	0x200092e8

0800aea4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b08a      	sub	sp, #40	@ 0x28
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	60b9      	str	r1, [r7, #8]
 800aeae:	607a      	str	r2, [r7, #4]
 800aeb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d10b      	bne.n	800aed4 <xTimerGenericCommand+0x30>
	__asm volatile
 800aebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aec0:	f383 8811 	msr	BASEPRI, r3
 800aec4:	f3bf 8f6f 	isb	sy
 800aec8:	f3bf 8f4f 	dsb	sy
 800aecc:	623b      	str	r3, [r7, #32]
}
 800aece:	bf00      	nop
 800aed0:	bf00      	nop
 800aed2:	e7fd      	b.n	800aed0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aed4:	4b19      	ldr	r3, [pc, #100]	@ (800af3c <xTimerGenericCommand+0x98>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d02a      	beq.n	800af32 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	2b05      	cmp	r3, #5
 800aeec:	dc18      	bgt.n	800af20 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aeee:	f7ff fead 	bl	800ac4c <xTaskGetSchedulerState>
 800aef2:	4603      	mov	r3, r0
 800aef4:	2b02      	cmp	r3, #2
 800aef6:	d109      	bne.n	800af0c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aef8:	4b10      	ldr	r3, [pc, #64]	@ (800af3c <xTimerGenericCommand+0x98>)
 800aefa:	6818      	ldr	r0, [r3, #0]
 800aefc:	f107 0110 	add.w	r1, r7, #16
 800af00:	2300      	movs	r3, #0
 800af02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af04:	f7fe fc60 	bl	80097c8 <xQueueGenericSend>
 800af08:	6278      	str	r0, [r7, #36]	@ 0x24
 800af0a:	e012      	b.n	800af32 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800af0c:	4b0b      	ldr	r3, [pc, #44]	@ (800af3c <xTimerGenericCommand+0x98>)
 800af0e:	6818      	ldr	r0, [r3, #0]
 800af10:	f107 0110 	add.w	r1, r7, #16
 800af14:	2300      	movs	r3, #0
 800af16:	2200      	movs	r2, #0
 800af18:	f7fe fc56 	bl	80097c8 <xQueueGenericSend>
 800af1c:	6278      	str	r0, [r7, #36]	@ 0x24
 800af1e:	e008      	b.n	800af32 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800af20:	4b06      	ldr	r3, [pc, #24]	@ (800af3c <xTimerGenericCommand+0x98>)
 800af22:	6818      	ldr	r0, [r3, #0]
 800af24:	f107 0110 	add.w	r1, r7, #16
 800af28:	2300      	movs	r3, #0
 800af2a:	683a      	ldr	r2, [r7, #0]
 800af2c:	f7fe fd4e 	bl	80099cc <xQueueGenericSendFromISR>
 800af30:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800af32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800af34:	4618      	mov	r0, r3
 800af36:	3728      	adds	r7, #40	@ 0x28
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	200092e4 	.word	0x200092e4

0800af40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b088      	sub	sp, #32
 800af44:	af02      	add	r7, sp, #8
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af4a:	4b23      	ldr	r3, [pc, #140]	@ (800afd8 <prvProcessExpiredTimer+0x98>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	68db      	ldr	r3, [r3, #12]
 800af50:	68db      	ldr	r3, [r3, #12]
 800af52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	3304      	adds	r3, #4
 800af58:	4618      	mov	r0, r3
 800af5a:	f7fe fb01 	bl	8009560 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af64:	f003 0304 	and.w	r3, r3, #4
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d023      	beq.n	800afb4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	699a      	ldr	r2, [r3, #24]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	18d1      	adds	r1, r2, r3
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	683a      	ldr	r2, [r7, #0]
 800af78:	6978      	ldr	r0, [r7, #20]
 800af7a:	f000 f8d5 	bl	800b128 <prvInsertTimerInActiveList>
 800af7e:	4603      	mov	r3, r0
 800af80:	2b00      	cmp	r3, #0
 800af82:	d020      	beq.n	800afc6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af84:	2300      	movs	r3, #0
 800af86:	9300      	str	r3, [sp, #0]
 800af88:	2300      	movs	r3, #0
 800af8a:	687a      	ldr	r2, [r7, #4]
 800af8c:	2100      	movs	r1, #0
 800af8e:	6978      	ldr	r0, [r7, #20]
 800af90:	f7ff ff88 	bl	800aea4 <xTimerGenericCommand>
 800af94:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d114      	bne.n	800afc6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800af9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa0:	f383 8811 	msr	BASEPRI, r3
 800afa4:	f3bf 8f6f 	isb	sy
 800afa8:	f3bf 8f4f 	dsb	sy
 800afac:	60fb      	str	r3, [r7, #12]
}
 800afae:	bf00      	nop
 800afb0:	bf00      	nop
 800afb2:	e7fd      	b.n	800afb0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800afba:	f023 0301 	bic.w	r3, r3, #1
 800afbe:	b2da      	uxtb	r2, r3
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	6a1b      	ldr	r3, [r3, #32]
 800afca:	6978      	ldr	r0, [r7, #20]
 800afcc:	4798      	blx	r3
}
 800afce:	bf00      	nop
 800afd0:	3718      	adds	r7, #24
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
 800afd6:	bf00      	nop
 800afd8:	200092dc 	.word	0x200092dc

0800afdc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800afe4:	f107 0308 	add.w	r3, r7, #8
 800afe8:	4618      	mov	r0, r3
 800afea:	f000 f859 	bl	800b0a0 <prvGetNextExpireTime>
 800afee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	4619      	mov	r1, r3
 800aff4:	68f8      	ldr	r0, [r7, #12]
 800aff6:	f000 f805 	bl	800b004 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800affa:	f000 f8d7 	bl	800b1ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800affe:	bf00      	nop
 800b000:	e7f0      	b.n	800afe4 <prvTimerTask+0x8>
	...

0800b004 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b00e:	f7ff fa0f 	bl	800a430 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b012:	f107 0308 	add.w	r3, r7, #8
 800b016:	4618      	mov	r0, r3
 800b018:	f000 f866 	bl	800b0e8 <prvSampleTimeNow>
 800b01c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d130      	bne.n	800b086 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d10a      	bne.n	800b040 <prvProcessTimerOrBlockTask+0x3c>
 800b02a:	687a      	ldr	r2, [r7, #4]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	429a      	cmp	r2, r3
 800b030:	d806      	bhi.n	800b040 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b032:	f7ff fa0b 	bl	800a44c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b036:	68f9      	ldr	r1, [r7, #12]
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f7ff ff81 	bl	800af40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b03e:	e024      	b.n	800b08a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d008      	beq.n	800b058 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b046:	4b13      	ldr	r3, [pc, #76]	@ (800b094 <prvProcessTimerOrBlockTask+0x90>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d101      	bne.n	800b054 <prvProcessTimerOrBlockTask+0x50>
 800b050:	2301      	movs	r3, #1
 800b052:	e000      	b.n	800b056 <prvProcessTimerOrBlockTask+0x52>
 800b054:	2300      	movs	r3, #0
 800b056:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b058:	4b0f      	ldr	r3, [pc, #60]	@ (800b098 <prvProcessTimerOrBlockTask+0x94>)
 800b05a:	6818      	ldr	r0, [r3, #0]
 800b05c:	687a      	ldr	r2, [r7, #4]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	1ad3      	subs	r3, r2, r3
 800b062:	683a      	ldr	r2, [r7, #0]
 800b064:	4619      	mov	r1, r3
 800b066:	f7fe ff6b 	bl	8009f40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b06a:	f7ff f9ef 	bl	800a44c <xTaskResumeAll>
 800b06e:	4603      	mov	r3, r0
 800b070:	2b00      	cmp	r3, #0
 800b072:	d10a      	bne.n	800b08a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b074:	4b09      	ldr	r3, [pc, #36]	@ (800b09c <prvProcessTimerOrBlockTask+0x98>)
 800b076:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b07a:	601a      	str	r2, [r3, #0]
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	f3bf 8f6f 	isb	sy
}
 800b084:	e001      	b.n	800b08a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b086:	f7ff f9e1 	bl	800a44c <xTaskResumeAll>
}
 800b08a:	bf00      	nop
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	200092e0 	.word	0x200092e0
 800b098:	200092e4 	.word	0x200092e4
 800b09c:	e000ed04 	.word	0xe000ed04

0800b0a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b085      	sub	sp, #20
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b0a8:	4b0e      	ldr	r3, [pc, #56]	@ (800b0e4 <prvGetNextExpireTime+0x44>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d101      	bne.n	800b0b6 <prvGetNextExpireTime+0x16>
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	e000      	b.n	800b0b8 <prvGetNextExpireTime+0x18>
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d105      	bne.n	800b0d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b0c4:	4b07      	ldr	r3, [pc, #28]	@ (800b0e4 <prvGetNextExpireTime+0x44>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	68db      	ldr	r3, [r3, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	60fb      	str	r3, [r7, #12]
 800b0ce:	e001      	b.n	800b0d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3714      	adds	r7, #20
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr
 800b0e2:	bf00      	nop
 800b0e4:	200092dc 	.word	0x200092dc

0800b0e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b0f0:	f7ff fa4a 	bl	800a588 <xTaskGetTickCount>
 800b0f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b0f6:	4b0b      	ldr	r3, [pc, #44]	@ (800b124 <prvSampleTimeNow+0x3c>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	68fa      	ldr	r2, [r7, #12]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d205      	bcs.n	800b10c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b100:	f000 f93a 	bl	800b378 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2201      	movs	r2, #1
 800b108:	601a      	str	r2, [r3, #0]
 800b10a:	e002      	b.n	800b112 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2200      	movs	r2, #0
 800b110:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b112:	4a04      	ldr	r2, [pc, #16]	@ (800b124 <prvSampleTimeNow+0x3c>)
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b118:	68fb      	ldr	r3, [r7, #12]
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	200092ec 	.word	0x200092ec

0800b128 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b086      	sub	sp, #24
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	607a      	str	r2, [r7, #4]
 800b134:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b136:	2300      	movs	r3, #0
 800b138:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	68ba      	ldr	r2, [r7, #8]
 800b13e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b146:	68ba      	ldr	r2, [r7, #8]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d812      	bhi.n	800b174 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	1ad2      	subs	r2, r2, r3
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	699b      	ldr	r3, [r3, #24]
 800b158:	429a      	cmp	r2, r3
 800b15a:	d302      	bcc.n	800b162 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b15c:	2301      	movs	r3, #1
 800b15e:	617b      	str	r3, [r7, #20]
 800b160:	e01b      	b.n	800b19a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b162:	4b10      	ldr	r3, [pc, #64]	@ (800b1a4 <prvInsertTimerInActiveList+0x7c>)
 800b164:	681a      	ldr	r2, [r3, #0]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	3304      	adds	r3, #4
 800b16a:	4619      	mov	r1, r3
 800b16c:	4610      	mov	r0, r2
 800b16e:	f7fe f9be 	bl	80094ee <vListInsert>
 800b172:	e012      	b.n	800b19a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d206      	bcs.n	800b18a <prvInsertTimerInActiveList+0x62>
 800b17c:	68ba      	ldr	r2, [r7, #8]
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	429a      	cmp	r2, r3
 800b182:	d302      	bcc.n	800b18a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b184:	2301      	movs	r3, #1
 800b186:	617b      	str	r3, [r7, #20]
 800b188:	e007      	b.n	800b19a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b18a:	4b07      	ldr	r3, [pc, #28]	@ (800b1a8 <prvInsertTimerInActiveList+0x80>)
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	3304      	adds	r3, #4
 800b192:	4619      	mov	r1, r3
 800b194:	4610      	mov	r0, r2
 800b196:	f7fe f9aa 	bl	80094ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b19a:	697b      	ldr	r3, [r7, #20]
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3718      	adds	r7, #24
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	200092e0 	.word	0x200092e0
 800b1a8:	200092dc 	.word	0x200092dc

0800b1ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b08e      	sub	sp, #56	@ 0x38
 800b1b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b1b2:	e0ce      	b.n	800b352 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	da19      	bge.n	800b1ee <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b1ba:	1d3b      	adds	r3, r7, #4
 800b1bc:	3304      	adds	r3, #4
 800b1be:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d10b      	bne.n	800b1de <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ca:	f383 8811 	msr	BASEPRI, r3
 800b1ce:	f3bf 8f6f 	isb	sy
 800b1d2:	f3bf 8f4f 	dsb	sy
 800b1d6:	61fb      	str	r3, [r7, #28]
}
 800b1d8:	bf00      	nop
 800b1da:	bf00      	nop
 800b1dc:	e7fd      	b.n	800b1da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b1de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b1e4:	6850      	ldr	r0, [r2, #4]
 800b1e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b1e8:	6892      	ldr	r2, [r2, #8]
 800b1ea:	4611      	mov	r1, r2
 800b1ec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	f2c0 80ae 	blt.w	800b352 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b1fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1fc:	695b      	ldr	r3, [r3, #20]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d004      	beq.n	800b20c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b204:	3304      	adds	r3, #4
 800b206:	4618      	mov	r0, r3
 800b208:	f7fe f9aa 	bl	8009560 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b20c:	463b      	mov	r3, r7
 800b20e:	4618      	mov	r0, r3
 800b210:	f7ff ff6a 	bl	800b0e8 <prvSampleTimeNow>
 800b214:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2b09      	cmp	r3, #9
 800b21a:	f200 8097 	bhi.w	800b34c <prvProcessReceivedCommands+0x1a0>
 800b21e:	a201      	add	r2, pc, #4	@ (adr r2, 800b224 <prvProcessReceivedCommands+0x78>)
 800b220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b224:	0800b24d 	.word	0x0800b24d
 800b228:	0800b24d 	.word	0x0800b24d
 800b22c:	0800b24d 	.word	0x0800b24d
 800b230:	0800b2c3 	.word	0x0800b2c3
 800b234:	0800b2d7 	.word	0x0800b2d7
 800b238:	0800b323 	.word	0x0800b323
 800b23c:	0800b24d 	.word	0x0800b24d
 800b240:	0800b24d 	.word	0x0800b24d
 800b244:	0800b2c3 	.word	0x0800b2c3
 800b248:	0800b2d7 	.word	0x0800b2d7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b24e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b252:	f043 0301 	orr.w	r3, r3, #1
 800b256:	b2da      	uxtb	r2, r3
 800b258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b25a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b25e:	68ba      	ldr	r2, [r7, #8]
 800b260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b262:	699b      	ldr	r3, [r3, #24]
 800b264:	18d1      	adds	r1, r2, r3
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b26a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b26c:	f7ff ff5c 	bl	800b128 <prvInsertTimerInActiveList>
 800b270:	4603      	mov	r3, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	d06c      	beq.n	800b350 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b278:	6a1b      	ldr	r3, [r3, #32]
 800b27a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b27c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b280:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b284:	f003 0304 	and.w	r3, r3, #4
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d061      	beq.n	800b350 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b28c:	68ba      	ldr	r2, [r7, #8]
 800b28e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b290:	699b      	ldr	r3, [r3, #24]
 800b292:	441a      	add	r2, r3
 800b294:	2300      	movs	r3, #0
 800b296:	9300      	str	r3, [sp, #0]
 800b298:	2300      	movs	r3, #0
 800b29a:	2100      	movs	r1, #0
 800b29c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b29e:	f7ff fe01 	bl	800aea4 <xTimerGenericCommand>
 800b2a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b2a4:	6a3b      	ldr	r3, [r7, #32]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d152      	bne.n	800b350 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b2aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2ae:	f383 8811 	msr	BASEPRI, r3
 800b2b2:	f3bf 8f6f 	isb	sy
 800b2b6:	f3bf 8f4f 	dsb	sy
 800b2ba:	61bb      	str	r3, [r7, #24]
}
 800b2bc:	bf00      	nop
 800b2be:	bf00      	nop
 800b2c0:	e7fd      	b.n	800b2be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2c8:	f023 0301 	bic.w	r3, r3, #1
 800b2cc:	b2da      	uxtb	r2, r3
 800b2ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b2d4:	e03d      	b.n	800b352 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2dc:	f043 0301 	orr.w	r3, r3, #1
 800b2e0:	b2da      	uxtb	r2, r3
 800b2e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b2e8:	68ba      	ldr	r2, [r7, #8]
 800b2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b2ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2f0:	699b      	ldr	r3, [r3, #24]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d10b      	bne.n	800b30e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2fa:	f383 8811 	msr	BASEPRI, r3
 800b2fe:	f3bf 8f6f 	isb	sy
 800b302:	f3bf 8f4f 	dsb	sy
 800b306:	617b      	str	r3, [r7, #20]
}
 800b308:	bf00      	nop
 800b30a:	bf00      	nop
 800b30c:	e7fd      	b.n	800b30a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b30e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b310:	699a      	ldr	r2, [r3, #24]
 800b312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b314:	18d1      	adds	r1, r2, r3
 800b316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b31a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b31c:	f7ff ff04 	bl	800b128 <prvInsertTimerInActiveList>
					break;
 800b320:	e017      	b.n	800b352 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b324:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b328:	f003 0302 	and.w	r3, r3, #2
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d103      	bne.n	800b338 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b330:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b332:	f000 fbe9 	bl	800bb08 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b336:	e00c      	b.n	800b352 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b33a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b33e:	f023 0301 	bic.w	r3, r3, #1
 800b342:	b2da      	uxtb	r2, r3
 800b344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b346:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b34a:	e002      	b.n	800b352 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b34c:	bf00      	nop
 800b34e:	e000      	b.n	800b352 <prvProcessReceivedCommands+0x1a6>
					break;
 800b350:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b352:	4b08      	ldr	r3, [pc, #32]	@ (800b374 <prvProcessReceivedCommands+0x1c8>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	1d39      	adds	r1, r7, #4
 800b358:	2200      	movs	r2, #0
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7fe fbd4 	bl	8009b08 <xQueueReceive>
 800b360:	4603      	mov	r3, r0
 800b362:	2b00      	cmp	r3, #0
 800b364:	f47f af26 	bne.w	800b1b4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b368:	bf00      	nop
 800b36a:	bf00      	nop
 800b36c:	3730      	adds	r7, #48	@ 0x30
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	200092e4 	.word	0x200092e4

0800b378 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b088      	sub	sp, #32
 800b37c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b37e:	e049      	b.n	800b414 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b380:	4b2e      	ldr	r3, [pc, #184]	@ (800b43c <prvSwitchTimerLists+0xc4>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	68db      	ldr	r3, [r3, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b38a:	4b2c      	ldr	r3, [pc, #176]	@ (800b43c <prvSwitchTimerLists+0xc4>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	68db      	ldr	r3, [r3, #12]
 800b392:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	3304      	adds	r3, #4
 800b398:	4618      	mov	r0, r3
 800b39a:	f7fe f8e1 	bl	8009560 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	6a1b      	ldr	r3, [r3, #32]
 800b3a2:	68f8      	ldr	r0, [r7, #12]
 800b3a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3ac:	f003 0304 	and.w	r3, r3, #4
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d02f      	beq.n	800b414 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	699b      	ldr	r3, [r3, #24]
 800b3b8:	693a      	ldr	r2, [r7, #16]
 800b3ba:	4413      	add	r3, r2
 800b3bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b3be:	68ba      	ldr	r2, [r7, #8]
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d90e      	bls.n	800b3e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	68ba      	ldr	r2, [r7, #8]
 800b3ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	68fa      	ldr	r2, [r7, #12]
 800b3d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b3d2:	4b1a      	ldr	r3, [pc, #104]	@ (800b43c <prvSwitchTimerLists+0xc4>)
 800b3d4:	681a      	ldr	r2, [r3, #0]
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	3304      	adds	r3, #4
 800b3da:	4619      	mov	r1, r3
 800b3dc:	4610      	mov	r0, r2
 800b3de:	f7fe f886 	bl	80094ee <vListInsert>
 800b3e2:	e017      	b.n	800b414 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	9300      	str	r3, [sp, #0]
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	693a      	ldr	r2, [r7, #16]
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	68f8      	ldr	r0, [r7, #12]
 800b3f0:	f7ff fd58 	bl	800aea4 <xTimerGenericCommand>
 800b3f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d10b      	bne.n	800b414 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b400:	f383 8811 	msr	BASEPRI, r3
 800b404:	f3bf 8f6f 	isb	sy
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	603b      	str	r3, [r7, #0]
}
 800b40e:	bf00      	nop
 800b410:	bf00      	nop
 800b412:	e7fd      	b.n	800b410 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b414:	4b09      	ldr	r3, [pc, #36]	@ (800b43c <prvSwitchTimerLists+0xc4>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d1b0      	bne.n	800b380 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b41e:	4b07      	ldr	r3, [pc, #28]	@ (800b43c <prvSwitchTimerLists+0xc4>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b424:	4b06      	ldr	r3, [pc, #24]	@ (800b440 <prvSwitchTimerLists+0xc8>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a04      	ldr	r2, [pc, #16]	@ (800b43c <prvSwitchTimerLists+0xc4>)
 800b42a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b42c:	4a04      	ldr	r2, [pc, #16]	@ (800b440 <prvSwitchTimerLists+0xc8>)
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	6013      	str	r3, [r2, #0]
}
 800b432:	bf00      	nop
 800b434:	3718      	adds	r7, #24
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	200092dc 	.word	0x200092dc
 800b440:	200092e0 	.word	0x200092e0

0800b444 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b082      	sub	sp, #8
 800b448:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b44a:	f000 f96d 	bl	800b728 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b44e:	4b15      	ldr	r3, [pc, #84]	@ (800b4a4 <prvCheckForValidListAndQueue+0x60>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d120      	bne.n	800b498 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b456:	4814      	ldr	r0, [pc, #80]	@ (800b4a8 <prvCheckForValidListAndQueue+0x64>)
 800b458:	f7fd fff8 	bl	800944c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b45c:	4813      	ldr	r0, [pc, #76]	@ (800b4ac <prvCheckForValidListAndQueue+0x68>)
 800b45e:	f7fd fff5 	bl	800944c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b462:	4b13      	ldr	r3, [pc, #76]	@ (800b4b0 <prvCheckForValidListAndQueue+0x6c>)
 800b464:	4a10      	ldr	r2, [pc, #64]	@ (800b4a8 <prvCheckForValidListAndQueue+0x64>)
 800b466:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b468:	4b12      	ldr	r3, [pc, #72]	@ (800b4b4 <prvCheckForValidListAndQueue+0x70>)
 800b46a:	4a10      	ldr	r2, [pc, #64]	@ (800b4ac <prvCheckForValidListAndQueue+0x68>)
 800b46c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b46e:	2300      	movs	r3, #0
 800b470:	9300      	str	r3, [sp, #0]
 800b472:	4b11      	ldr	r3, [pc, #68]	@ (800b4b8 <prvCheckForValidListAndQueue+0x74>)
 800b474:	4a11      	ldr	r2, [pc, #68]	@ (800b4bc <prvCheckForValidListAndQueue+0x78>)
 800b476:	2110      	movs	r1, #16
 800b478:	200a      	movs	r0, #10
 800b47a:	f7fe f905 	bl	8009688 <xQueueGenericCreateStatic>
 800b47e:	4603      	mov	r3, r0
 800b480:	4a08      	ldr	r2, [pc, #32]	@ (800b4a4 <prvCheckForValidListAndQueue+0x60>)
 800b482:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b484:	4b07      	ldr	r3, [pc, #28]	@ (800b4a4 <prvCheckForValidListAndQueue+0x60>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d005      	beq.n	800b498 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b48c:	4b05      	ldr	r3, [pc, #20]	@ (800b4a4 <prvCheckForValidListAndQueue+0x60>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	490b      	ldr	r1, [pc, #44]	@ (800b4c0 <prvCheckForValidListAndQueue+0x7c>)
 800b492:	4618      	mov	r0, r3
 800b494:	f7fe fd2a 	bl	8009eec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b498:	f000 f978 	bl	800b78c <vPortExitCritical>
}
 800b49c:	bf00      	nop
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	bf00      	nop
 800b4a4:	200092e4 	.word	0x200092e4
 800b4a8:	200092b4 	.word	0x200092b4
 800b4ac:	200092c8 	.word	0x200092c8
 800b4b0:	200092dc 	.word	0x200092dc
 800b4b4:	200092e0 	.word	0x200092e0
 800b4b8:	20009390 	.word	0x20009390
 800b4bc:	200092f0 	.word	0x200092f0
 800b4c0:	0801f9c0 	.word	0x0801f9c0

0800b4c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b085      	sub	sp, #20
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	3b04      	subs	r3, #4
 800b4d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b4dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	3b04      	subs	r3, #4
 800b4e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	f023 0201 	bic.w	r2, r3, #1
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	3b04      	subs	r3, #4
 800b4f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b4f4:	4a0c      	ldr	r2, [pc, #48]	@ (800b528 <pxPortInitialiseStack+0x64>)
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	3b14      	subs	r3, #20
 800b4fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	3b04      	subs	r3, #4
 800b50a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f06f 0202 	mvn.w	r2, #2
 800b512:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	3b20      	subs	r3, #32
 800b518:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b51a:	68fb      	ldr	r3, [r7, #12]
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3714      	adds	r7, #20
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr
 800b528:	0800b52d 	.word	0x0800b52d

0800b52c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b52c:	b480      	push	{r7}
 800b52e:	b085      	sub	sp, #20
 800b530:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b532:	2300      	movs	r3, #0
 800b534:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b536:	4b13      	ldr	r3, [pc, #76]	@ (800b584 <prvTaskExitError+0x58>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b53e:	d00b      	beq.n	800b558 <prvTaskExitError+0x2c>
	__asm volatile
 800b540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b544:	f383 8811 	msr	BASEPRI, r3
 800b548:	f3bf 8f6f 	isb	sy
 800b54c:	f3bf 8f4f 	dsb	sy
 800b550:	60fb      	str	r3, [r7, #12]
}
 800b552:	bf00      	nop
 800b554:	bf00      	nop
 800b556:	e7fd      	b.n	800b554 <prvTaskExitError+0x28>
	__asm volatile
 800b558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b55c:	f383 8811 	msr	BASEPRI, r3
 800b560:	f3bf 8f6f 	isb	sy
 800b564:	f3bf 8f4f 	dsb	sy
 800b568:	60bb      	str	r3, [r7, #8]
}
 800b56a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b56c:	bf00      	nop
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d0fc      	beq.n	800b56e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b574:	bf00      	nop
 800b576:	bf00      	nop
 800b578:	3714      	adds	r7, #20
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr
 800b582:	bf00      	nop
 800b584:	200000a0 	.word	0x200000a0
	...

0800b590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b590:	4b07      	ldr	r3, [pc, #28]	@ (800b5b0 <pxCurrentTCBConst2>)
 800b592:	6819      	ldr	r1, [r3, #0]
 800b594:	6808      	ldr	r0, [r1, #0]
 800b596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b59a:	f380 8809 	msr	PSP, r0
 800b59e:	f3bf 8f6f 	isb	sy
 800b5a2:	f04f 0000 	mov.w	r0, #0
 800b5a6:	f380 8811 	msr	BASEPRI, r0
 800b5aa:	4770      	bx	lr
 800b5ac:	f3af 8000 	nop.w

0800b5b0 <pxCurrentTCBConst2>:
 800b5b0:	20008db4 	.word	0x20008db4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b5b4:	bf00      	nop
 800b5b6:	bf00      	nop

0800b5b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b5b8:	4808      	ldr	r0, [pc, #32]	@ (800b5dc <prvPortStartFirstTask+0x24>)
 800b5ba:	6800      	ldr	r0, [r0, #0]
 800b5bc:	6800      	ldr	r0, [r0, #0]
 800b5be:	f380 8808 	msr	MSP, r0
 800b5c2:	f04f 0000 	mov.w	r0, #0
 800b5c6:	f380 8814 	msr	CONTROL, r0
 800b5ca:	b662      	cpsie	i
 800b5cc:	b661      	cpsie	f
 800b5ce:	f3bf 8f4f 	dsb	sy
 800b5d2:	f3bf 8f6f 	isb	sy
 800b5d6:	df00      	svc	0
 800b5d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b5da:	bf00      	nop
 800b5dc:	e000ed08 	.word	0xe000ed08

0800b5e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b086      	sub	sp, #24
 800b5e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b5e6:	4b47      	ldr	r3, [pc, #284]	@ (800b704 <xPortStartScheduler+0x124>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4a47      	ldr	r2, [pc, #284]	@ (800b708 <xPortStartScheduler+0x128>)
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d10b      	bne.n	800b608 <xPortStartScheduler+0x28>
	__asm volatile
 800b5f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5f4:	f383 8811 	msr	BASEPRI, r3
 800b5f8:	f3bf 8f6f 	isb	sy
 800b5fc:	f3bf 8f4f 	dsb	sy
 800b600:	613b      	str	r3, [r7, #16]
}
 800b602:	bf00      	nop
 800b604:	bf00      	nop
 800b606:	e7fd      	b.n	800b604 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b608:	4b3e      	ldr	r3, [pc, #248]	@ (800b704 <xPortStartScheduler+0x124>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4a3f      	ldr	r2, [pc, #252]	@ (800b70c <xPortStartScheduler+0x12c>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d10b      	bne.n	800b62a <xPortStartScheduler+0x4a>
	__asm volatile
 800b612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b616:	f383 8811 	msr	BASEPRI, r3
 800b61a:	f3bf 8f6f 	isb	sy
 800b61e:	f3bf 8f4f 	dsb	sy
 800b622:	60fb      	str	r3, [r7, #12]
}
 800b624:	bf00      	nop
 800b626:	bf00      	nop
 800b628:	e7fd      	b.n	800b626 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b62a:	4b39      	ldr	r3, [pc, #228]	@ (800b710 <xPortStartScheduler+0x130>)
 800b62c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	781b      	ldrb	r3, [r3, #0]
 800b632:	b2db      	uxtb	r3, r3
 800b634:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	22ff      	movs	r2, #255	@ 0xff
 800b63a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	b2db      	uxtb	r3, r3
 800b642:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b644:	78fb      	ldrb	r3, [r7, #3]
 800b646:	b2db      	uxtb	r3, r3
 800b648:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b64c:	b2da      	uxtb	r2, r3
 800b64e:	4b31      	ldr	r3, [pc, #196]	@ (800b714 <xPortStartScheduler+0x134>)
 800b650:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b652:	4b31      	ldr	r3, [pc, #196]	@ (800b718 <xPortStartScheduler+0x138>)
 800b654:	2207      	movs	r2, #7
 800b656:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b658:	e009      	b.n	800b66e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b65a:	4b2f      	ldr	r3, [pc, #188]	@ (800b718 <xPortStartScheduler+0x138>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	3b01      	subs	r3, #1
 800b660:	4a2d      	ldr	r2, [pc, #180]	@ (800b718 <xPortStartScheduler+0x138>)
 800b662:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b664:	78fb      	ldrb	r3, [r7, #3]
 800b666:	b2db      	uxtb	r3, r3
 800b668:	005b      	lsls	r3, r3, #1
 800b66a:	b2db      	uxtb	r3, r3
 800b66c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b66e:	78fb      	ldrb	r3, [r7, #3]
 800b670:	b2db      	uxtb	r3, r3
 800b672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b676:	2b80      	cmp	r3, #128	@ 0x80
 800b678:	d0ef      	beq.n	800b65a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b67a:	4b27      	ldr	r3, [pc, #156]	@ (800b718 <xPortStartScheduler+0x138>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f1c3 0307 	rsb	r3, r3, #7
 800b682:	2b04      	cmp	r3, #4
 800b684:	d00b      	beq.n	800b69e <xPortStartScheduler+0xbe>
	__asm volatile
 800b686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b68a:	f383 8811 	msr	BASEPRI, r3
 800b68e:	f3bf 8f6f 	isb	sy
 800b692:	f3bf 8f4f 	dsb	sy
 800b696:	60bb      	str	r3, [r7, #8]
}
 800b698:	bf00      	nop
 800b69a:	bf00      	nop
 800b69c:	e7fd      	b.n	800b69a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b69e:	4b1e      	ldr	r3, [pc, #120]	@ (800b718 <xPortStartScheduler+0x138>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	021b      	lsls	r3, r3, #8
 800b6a4:	4a1c      	ldr	r2, [pc, #112]	@ (800b718 <xPortStartScheduler+0x138>)
 800b6a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b6a8:	4b1b      	ldr	r3, [pc, #108]	@ (800b718 <xPortStartScheduler+0x138>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b6b0:	4a19      	ldr	r2, [pc, #100]	@ (800b718 <xPortStartScheduler+0x138>)
 800b6b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	b2da      	uxtb	r2, r3
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b6bc:	4b17      	ldr	r3, [pc, #92]	@ (800b71c <xPortStartScheduler+0x13c>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4a16      	ldr	r2, [pc, #88]	@ (800b71c <xPortStartScheduler+0x13c>)
 800b6c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b6c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b6c8:	4b14      	ldr	r3, [pc, #80]	@ (800b71c <xPortStartScheduler+0x13c>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4a13      	ldr	r2, [pc, #76]	@ (800b71c <xPortStartScheduler+0x13c>)
 800b6ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b6d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b6d4:	f000 f8da 	bl	800b88c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b6d8:	4b11      	ldr	r3, [pc, #68]	@ (800b720 <xPortStartScheduler+0x140>)
 800b6da:	2200      	movs	r2, #0
 800b6dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b6de:	f000 f8f9 	bl	800b8d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b6e2:	4b10      	ldr	r3, [pc, #64]	@ (800b724 <xPortStartScheduler+0x144>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4a0f      	ldr	r2, [pc, #60]	@ (800b724 <xPortStartScheduler+0x144>)
 800b6e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b6ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b6ee:	f7ff ff63 	bl	800b5b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b6f2:	f7ff f813 	bl	800a71c <vTaskSwitchContext>
	prvTaskExitError();
 800b6f6:	f7ff ff19 	bl	800b52c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b6fa:	2300      	movs	r3, #0
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3718      	adds	r7, #24
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}
 800b704:	e000ed00 	.word	0xe000ed00
 800b708:	410fc271 	.word	0x410fc271
 800b70c:	410fc270 	.word	0x410fc270
 800b710:	e000e400 	.word	0xe000e400
 800b714:	200093e0 	.word	0x200093e0
 800b718:	200093e4 	.word	0x200093e4
 800b71c:	e000ed20 	.word	0xe000ed20
 800b720:	200000a0 	.word	0x200000a0
 800b724:	e000ef34 	.word	0xe000ef34

0800b728 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
	__asm volatile
 800b72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b732:	f383 8811 	msr	BASEPRI, r3
 800b736:	f3bf 8f6f 	isb	sy
 800b73a:	f3bf 8f4f 	dsb	sy
 800b73e:	607b      	str	r3, [r7, #4]
}
 800b740:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b742:	4b10      	ldr	r3, [pc, #64]	@ (800b784 <vPortEnterCritical+0x5c>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	3301      	adds	r3, #1
 800b748:	4a0e      	ldr	r2, [pc, #56]	@ (800b784 <vPortEnterCritical+0x5c>)
 800b74a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b74c:	4b0d      	ldr	r3, [pc, #52]	@ (800b784 <vPortEnterCritical+0x5c>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2b01      	cmp	r3, #1
 800b752:	d110      	bne.n	800b776 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b754:	4b0c      	ldr	r3, [pc, #48]	@ (800b788 <vPortEnterCritical+0x60>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	b2db      	uxtb	r3, r3
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d00b      	beq.n	800b776 <vPortEnterCritical+0x4e>
	__asm volatile
 800b75e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b762:	f383 8811 	msr	BASEPRI, r3
 800b766:	f3bf 8f6f 	isb	sy
 800b76a:	f3bf 8f4f 	dsb	sy
 800b76e:	603b      	str	r3, [r7, #0]
}
 800b770:	bf00      	nop
 800b772:	bf00      	nop
 800b774:	e7fd      	b.n	800b772 <vPortEnterCritical+0x4a>
	}
}
 800b776:	bf00      	nop
 800b778:	370c      	adds	r7, #12
 800b77a:	46bd      	mov	sp, r7
 800b77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b780:	4770      	bx	lr
 800b782:	bf00      	nop
 800b784:	200000a0 	.word	0x200000a0
 800b788:	e000ed04 	.word	0xe000ed04

0800b78c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b792:	4b12      	ldr	r3, [pc, #72]	@ (800b7dc <vPortExitCritical+0x50>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d10b      	bne.n	800b7b2 <vPortExitCritical+0x26>
	__asm volatile
 800b79a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b79e:	f383 8811 	msr	BASEPRI, r3
 800b7a2:	f3bf 8f6f 	isb	sy
 800b7a6:	f3bf 8f4f 	dsb	sy
 800b7aa:	607b      	str	r3, [r7, #4]
}
 800b7ac:	bf00      	nop
 800b7ae:	bf00      	nop
 800b7b0:	e7fd      	b.n	800b7ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b7b2:	4b0a      	ldr	r3, [pc, #40]	@ (800b7dc <vPortExitCritical+0x50>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	3b01      	subs	r3, #1
 800b7b8:	4a08      	ldr	r2, [pc, #32]	@ (800b7dc <vPortExitCritical+0x50>)
 800b7ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b7bc:	4b07      	ldr	r3, [pc, #28]	@ (800b7dc <vPortExitCritical+0x50>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d105      	bne.n	800b7d0 <vPortExitCritical+0x44>
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	f383 8811 	msr	BASEPRI, r3
}
 800b7ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b7d0:	bf00      	nop
 800b7d2:	370c      	adds	r7, #12
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr
 800b7dc:	200000a0 	.word	0x200000a0

0800b7e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b7e0:	f3ef 8009 	mrs	r0, PSP
 800b7e4:	f3bf 8f6f 	isb	sy
 800b7e8:	4b15      	ldr	r3, [pc, #84]	@ (800b840 <pxCurrentTCBConst>)
 800b7ea:	681a      	ldr	r2, [r3, #0]
 800b7ec:	f01e 0f10 	tst.w	lr, #16
 800b7f0:	bf08      	it	eq
 800b7f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b7f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7fa:	6010      	str	r0, [r2, #0]
 800b7fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b800:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b804:	f380 8811 	msr	BASEPRI, r0
 800b808:	f3bf 8f4f 	dsb	sy
 800b80c:	f3bf 8f6f 	isb	sy
 800b810:	f7fe ff84 	bl	800a71c <vTaskSwitchContext>
 800b814:	f04f 0000 	mov.w	r0, #0
 800b818:	f380 8811 	msr	BASEPRI, r0
 800b81c:	bc09      	pop	{r0, r3}
 800b81e:	6819      	ldr	r1, [r3, #0]
 800b820:	6808      	ldr	r0, [r1, #0]
 800b822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b826:	f01e 0f10 	tst.w	lr, #16
 800b82a:	bf08      	it	eq
 800b82c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b830:	f380 8809 	msr	PSP, r0
 800b834:	f3bf 8f6f 	isb	sy
 800b838:	4770      	bx	lr
 800b83a:	bf00      	nop
 800b83c:	f3af 8000 	nop.w

0800b840 <pxCurrentTCBConst>:
 800b840:	20008db4 	.word	0x20008db4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b844:	bf00      	nop
 800b846:	bf00      	nop

0800b848 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b082      	sub	sp, #8
 800b84c:	af00      	add	r7, sp, #0
	__asm volatile
 800b84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b852:	f383 8811 	msr	BASEPRI, r3
 800b856:	f3bf 8f6f 	isb	sy
 800b85a:	f3bf 8f4f 	dsb	sy
 800b85e:	607b      	str	r3, [r7, #4]
}
 800b860:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b862:	f7fe fea1 	bl	800a5a8 <xTaskIncrementTick>
 800b866:	4603      	mov	r3, r0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d003      	beq.n	800b874 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b86c:	4b06      	ldr	r3, [pc, #24]	@ (800b888 <xPortSysTickHandler+0x40>)
 800b86e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b872:	601a      	str	r2, [r3, #0]
 800b874:	2300      	movs	r3, #0
 800b876:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	f383 8811 	msr	BASEPRI, r3
}
 800b87e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b880:	bf00      	nop
 800b882:	3708      	adds	r7, #8
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}
 800b888:	e000ed04 	.word	0xe000ed04

0800b88c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b88c:	b480      	push	{r7}
 800b88e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b890:	4b0b      	ldr	r3, [pc, #44]	@ (800b8c0 <vPortSetupTimerInterrupt+0x34>)
 800b892:	2200      	movs	r2, #0
 800b894:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b896:	4b0b      	ldr	r3, [pc, #44]	@ (800b8c4 <vPortSetupTimerInterrupt+0x38>)
 800b898:	2200      	movs	r2, #0
 800b89a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b89c:	4b0a      	ldr	r3, [pc, #40]	@ (800b8c8 <vPortSetupTimerInterrupt+0x3c>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a0a      	ldr	r2, [pc, #40]	@ (800b8cc <vPortSetupTimerInterrupt+0x40>)
 800b8a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b8a6:	099b      	lsrs	r3, r3, #6
 800b8a8:	4a09      	ldr	r2, [pc, #36]	@ (800b8d0 <vPortSetupTimerInterrupt+0x44>)
 800b8aa:	3b01      	subs	r3, #1
 800b8ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b8ae:	4b04      	ldr	r3, [pc, #16]	@ (800b8c0 <vPortSetupTimerInterrupt+0x34>)
 800b8b0:	2207      	movs	r2, #7
 800b8b2:	601a      	str	r2, [r3, #0]
}
 800b8b4:	bf00      	nop
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr
 800b8be:	bf00      	nop
 800b8c0:	e000e010 	.word	0xe000e010
 800b8c4:	e000e018 	.word	0xe000e018
 800b8c8:	20000004 	.word	0x20000004
 800b8cc:	10624dd3 	.word	0x10624dd3
 800b8d0:	e000e014 	.word	0xe000e014

0800b8d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b8d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b8e4 <vPortEnableVFP+0x10>
 800b8d8:	6801      	ldr	r1, [r0, #0]
 800b8da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b8de:	6001      	str	r1, [r0, #0]
 800b8e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b8e2:	bf00      	nop
 800b8e4:	e000ed88 	.word	0xe000ed88

0800b8e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b085      	sub	sp, #20
 800b8ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b8ee:	f3ef 8305 	mrs	r3, IPSR
 800b8f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2b0f      	cmp	r3, #15
 800b8f8:	d915      	bls.n	800b926 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b8fa:	4a18      	ldr	r2, [pc, #96]	@ (800b95c <vPortValidateInterruptPriority+0x74>)
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	4413      	add	r3, r2
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b904:	4b16      	ldr	r3, [pc, #88]	@ (800b960 <vPortValidateInterruptPriority+0x78>)
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	7afa      	ldrb	r2, [r7, #11]
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d20b      	bcs.n	800b926 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b912:	f383 8811 	msr	BASEPRI, r3
 800b916:	f3bf 8f6f 	isb	sy
 800b91a:	f3bf 8f4f 	dsb	sy
 800b91e:	607b      	str	r3, [r7, #4]
}
 800b920:	bf00      	nop
 800b922:	bf00      	nop
 800b924:	e7fd      	b.n	800b922 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b926:	4b0f      	ldr	r3, [pc, #60]	@ (800b964 <vPortValidateInterruptPriority+0x7c>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b92e:	4b0e      	ldr	r3, [pc, #56]	@ (800b968 <vPortValidateInterruptPriority+0x80>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	429a      	cmp	r2, r3
 800b934:	d90b      	bls.n	800b94e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b93a:	f383 8811 	msr	BASEPRI, r3
 800b93e:	f3bf 8f6f 	isb	sy
 800b942:	f3bf 8f4f 	dsb	sy
 800b946:	603b      	str	r3, [r7, #0]
}
 800b948:	bf00      	nop
 800b94a:	bf00      	nop
 800b94c:	e7fd      	b.n	800b94a <vPortValidateInterruptPriority+0x62>
	}
 800b94e:	bf00      	nop
 800b950:	3714      	adds	r7, #20
 800b952:	46bd      	mov	sp, r7
 800b954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b958:	4770      	bx	lr
 800b95a:	bf00      	nop
 800b95c:	e000e3f0 	.word	0xe000e3f0
 800b960:	200093e0 	.word	0x200093e0
 800b964:	e000ed0c 	.word	0xe000ed0c
 800b968:	200093e4 	.word	0x200093e4

0800b96c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b08a      	sub	sp, #40	@ 0x28
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b974:	2300      	movs	r3, #0
 800b976:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b978:	f7fe fd5a 	bl	800a430 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b97c:	4b5c      	ldr	r3, [pc, #368]	@ (800baf0 <pvPortMalloc+0x184>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d101      	bne.n	800b988 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b984:	f000 f924 	bl	800bbd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b988:	4b5a      	ldr	r3, [pc, #360]	@ (800baf4 <pvPortMalloc+0x188>)
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	4013      	ands	r3, r2
 800b990:	2b00      	cmp	r3, #0
 800b992:	f040 8095 	bne.w	800bac0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d01e      	beq.n	800b9da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b99c:	2208      	movs	r2, #8
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	4413      	add	r3, r2
 800b9a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f003 0307 	and.w	r3, r3, #7
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d015      	beq.n	800b9da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f023 0307 	bic.w	r3, r3, #7
 800b9b4:	3308      	adds	r3, #8
 800b9b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f003 0307 	and.w	r3, r3, #7
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d00b      	beq.n	800b9da <pvPortMalloc+0x6e>
	__asm volatile
 800b9c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9c6:	f383 8811 	msr	BASEPRI, r3
 800b9ca:	f3bf 8f6f 	isb	sy
 800b9ce:	f3bf 8f4f 	dsb	sy
 800b9d2:	617b      	str	r3, [r7, #20]
}
 800b9d4:	bf00      	nop
 800b9d6:	bf00      	nop
 800b9d8:	e7fd      	b.n	800b9d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d06f      	beq.n	800bac0 <pvPortMalloc+0x154>
 800b9e0:	4b45      	ldr	r3, [pc, #276]	@ (800baf8 <pvPortMalloc+0x18c>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d86a      	bhi.n	800bac0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b9ea:	4b44      	ldr	r3, [pc, #272]	@ (800bafc <pvPortMalloc+0x190>)
 800b9ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b9ee:	4b43      	ldr	r3, [pc, #268]	@ (800bafc <pvPortMalloc+0x190>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9f4:	e004      	b.n	800ba00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b9fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	687a      	ldr	r2, [r7, #4]
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d903      	bls.n	800ba12 <pvPortMalloc+0xa6>
 800ba0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d1f1      	bne.n	800b9f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ba12:	4b37      	ldr	r3, [pc, #220]	@ (800baf0 <pvPortMalloc+0x184>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d051      	beq.n	800bac0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ba1c:	6a3b      	ldr	r3, [r7, #32]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	2208      	movs	r2, #8
 800ba22:	4413      	add	r3, r2
 800ba24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ba26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	6a3b      	ldr	r3, [r7, #32]
 800ba2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ba2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba30:	685a      	ldr	r2, [r3, #4]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	1ad2      	subs	r2, r2, r3
 800ba36:	2308      	movs	r3, #8
 800ba38:	005b      	lsls	r3, r3, #1
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d920      	bls.n	800ba80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ba3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	4413      	add	r3, r2
 800ba44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba46:	69bb      	ldr	r3, [r7, #24]
 800ba48:	f003 0307 	and.w	r3, r3, #7
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d00b      	beq.n	800ba68 <pvPortMalloc+0xfc>
	__asm volatile
 800ba50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba54:	f383 8811 	msr	BASEPRI, r3
 800ba58:	f3bf 8f6f 	isb	sy
 800ba5c:	f3bf 8f4f 	dsb	sy
 800ba60:	613b      	str	r3, [r7, #16]
}
 800ba62:	bf00      	nop
 800ba64:	bf00      	nop
 800ba66:	e7fd      	b.n	800ba64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba6a:	685a      	ldr	r2, [r3, #4]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	1ad2      	subs	r2, r2, r3
 800ba70:	69bb      	ldr	r3, [r7, #24]
 800ba72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ba74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba76:	687a      	ldr	r2, [r7, #4]
 800ba78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ba7a:	69b8      	ldr	r0, [r7, #24]
 800ba7c:	f000 f90a 	bl	800bc94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ba80:	4b1d      	ldr	r3, [pc, #116]	@ (800baf8 <pvPortMalloc+0x18c>)
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	1ad3      	subs	r3, r2, r3
 800ba8a:	4a1b      	ldr	r2, [pc, #108]	@ (800baf8 <pvPortMalloc+0x18c>)
 800ba8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ba8e:	4b1a      	ldr	r3, [pc, #104]	@ (800baf8 <pvPortMalloc+0x18c>)
 800ba90:	681a      	ldr	r2, [r3, #0]
 800ba92:	4b1b      	ldr	r3, [pc, #108]	@ (800bb00 <pvPortMalloc+0x194>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d203      	bcs.n	800baa2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ba9a:	4b17      	ldr	r3, [pc, #92]	@ (800baf8 <pvPortMalloc+0x18c>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	4a18      	ldr	r2, [pc, #96]	@ (800bb00 <pvPortMalloc+0x194>)
 800baa0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800baa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baa4:	685a      	ldr	r2, [r3, #4]
 800baa6:	4b13      	ldr	r3, [pc, #76]	@ (800baf4 <pvPortMalloc+0x188>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	431a      	orrs	r2, r3
 800baac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bab2:	2200      	movs	r2, #0
 800bab4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bab6:	4b13      	ldr	r3, [pc, #76]	@ (800bb04 <pvPortMalloc+0x198>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	3301      	adds	r3, #1
 800babc:	4a11      	ldr	r2, [pc, #68]	@ (800bb04 <pvPortMalloc+0x198>)
 800babe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bac0:	f7fe fcc4 	bl	800a44c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bac4:	69fb      	ldr	r3, [r7, #28]
 800bac6:	f003 0307 	and.w	r3, r3, #7
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d00b      	beq.n	800bae6 <pvPortMalloc+0x17a>
	__asm volatile
 800bace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bad2:	f383 8811 	msr	BASEPRI, r3
 800bad6:	f3bf 8f6f 	isb	sy
 800bada:	f3bf 8f4f 	dsb	sy
 800bade:	60fb      	str	r3, [r7, #12]
}
 800bae0:	bf00      	nop
 800bae2:	bf00      	nop
 800bae4:	e7fd      	b.n	800bae2 <pvPortMalloc+0x176>
	return pvReturn;
 800bae6:	69fb      	ldr	r3, [r7, #28]
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3728      	adds	r7, #40	@ 0x28
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}
 800baf0:	20009ff0 	.word	0x20009ff0
 800baf4:	2000a004 	.word	0x2000a004
 800baf8:	20009ff4 	.word	0x20009ff4
 800bafc:	20009fe8 	.word	0x20009fe8
 800bb00:	20009ff8 	.word	0x20009ff8
 800bb04:	20009ffc 	.word	0x20009ffc

0800bb08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b086      	sub	sp, #24
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d04f      	beq.n	800bbba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bb1a:	2308      	movs	r3, #8
 800bb1c:	425b      	negs	r3, r3
 800bb1e:	697a      	ldr	r2, [r7, #20]
 800bb20:	4413      	add	r3, r2
 800bb22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	685a      	ldr	r2, [r3, #4]
 800bb2c:	4b25      	ldr	r3, [pc, #148]	@ (800bbc4 <vPortFree+0xbc>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4013      	ands	r3, r2
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d10b      	bne.n	800bb4e <vPortFree+0x46>
	__asm volatile
 800bb36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb3a:	f383 8811 	msr	BASEPRI, r3
 800bb3e:	f3bf 8f6f 	isb	sy
 800bb42:	f3bf 8f4f 	dsb	sy
 800bb46:	60fb      	str	r3, [r7, #12]
}
 800bb48:	bf00      	nop
 800bb4a:	bf00      	nop
 800bb4c:	e7fd      	b.n	800bb4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d00b      	beq.n	800bb6e <vPortFree+0x66>
	__asm volatile
 800bb56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb5a:	f383 8811 	msr	BASEPRI, r3
 800bb5e:	f3bf 8f6f 	isb	sy
 800bb62:	f3bf 8f4f 	dsb	sy
 800bb66:	60bb      	str	r3, [r7, #8]
}
 800bb68:	bf00      	nop
 800bb6a:	bf00      	nop
 800bb6c:	e7fd      	b.n	800bb6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	685a      	ldr	r2, [r3, #4]
 800bb72:	4b14      	ldr	r3, [pc, #80]	@ (800bbc4 <vPortFree+0xbc>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	4013      	ands	r3, r2
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d01e      	beq.n	800bbba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d11a      	bne.n	800bbba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	685a      	ldr	r2, [r3, #4]
 800bb88:	4b0e      	ldr	r3, [pc, #56]	@ (800bbc4 <vPortFree+0xbc>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	43db      	mvns	r3, r3
 800bb8e:	401a      	ands	r2, r3
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bb94:	f7fe fc4c 	bl	800a430 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	685a      	ldr	r2, [r3, #4]
 800bb9c:	4b0a      	ldr	r3, [pc, #40]	@ (800bbc8 <vPortFree+0xc0>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4413      	add	r3, r2
 800bba2:	4a09      	ldr	r2, [pc, #36]	@ (800bbc8 <vPortFree+0xc0>)
 800bba4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bba6:	6938      	ldr	r0, [r7, #16]
 800bba8:	f000 f874 	bl	800bc94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bbac:	4b07      	ldr	r3, [pc, #28]	@ (800bbcc <vPortFree+0xc4>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	4a06      	ldr	r2, [pc, #24]	@ (800bbcc <vPortFree+0xc4>)
 800bbb4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bbb6:	f7fe fc49 	bl	800a44c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bbba:	bf00      	nop
 800bbbc:	3718      	adds	r7, #24
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	2000a004 	.word	0x2000a004
 800bbc8:	20009ff4 	.word	0x20009ff4
 800bbcc:	2000a000 	.word	0x2000a000

0800bbd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b085      	sub	sp, #20
 800bbd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bbd6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800bbda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bbdc:	4b27      	ldr	r3, [pc, #156]	@ (800bc7c <prvHeapInit+0xac>)
 800bbde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f003 0307 	and.w	r3, r3, #7
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d00c      	beq.n	800bc04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	3307      	adds	r3, #7
 800bbee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f023 0307 	bic.w	r3, r3, #7
 800bbf6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bbf8:	68ba      	ldr	r2, [r7, #8]
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	1ad3      	subs	r3, r2, r3
 800bbfe:	4a1f      	ldr	r2, [pc, #124]	@ (800bc7c <prvHeapInit+0xac>)
 800bc00:	4413      	add	r3, r2
 800bc02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bc08:	4a1d      	ldr	r2, [pc, #116]	@ (800bc80 <prvHeapInit+0xb0>)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bc0e:	4b1c      	ldr	r3, [pc, #112]	@ (800bc80 <prvHeapInit+0xb0>)
 800bc10:	2200      	movs	r2, #0
 800bc12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	68ba      	ldr	r2, [r7, #8]
 800bc18:	4413      	add	r3, r2
 800bc1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bc1c:	2208      	movs	r2, #8
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	1a9b      	subs	r3, r3, r2
 800bc22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f023 0307 	bic.w	r3, r3, #7
 800bc2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	4a15      	ldr	r2, [pc, #84]	@ (800bc84 <prvHeapInit+0xb4>)
 800bc30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bc32:	4b14      	ldr	r3, [pc, #80]	@ (800bc84 <prvHeapInit+0xb4>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	2200      	movs	r2, #0
 800bc38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bc3a:	4b12      	ldr	r3, [pc, #72]	@ (800bc84 <prvHeapInit+0xb4>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	68fa      	ldr	r2, [r7, #12]
 800bc4a:	1ad2      	subs	r2, r2, r3
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bc50:	4b0c      	ldr	r3, [pc, #48]	@ (800bc84 <prvHeapInit+0xb4>)
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	4a0a      	ldr	r2, [pc, #40]	@ (800bc88 <prvHeapInit+0xb8>)
 800bc5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	4a09      	ldr	r2, [pc, #36]	@ (800bc8c <prvHeapInit+0xbc>)
 800bc66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bc68:	4b09      	ldr	r3, [pc, #36]	@ (800bc90 <prvHeapInit+0xc0>)
 800bc6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bc6e:	601a      	str	r2, [r3, #0]
}
 800bc70:	bf00      	nop
 800bc72:	3714      	adds	r7, #20
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr
 800bc7c:	200093e8 	.word	0x200093e8
 800bc80:	20009fe8 	.word	0x20009fe8
 800bc84:	20009ff0 	.word	0x20009ff0
 800bc88:	20009ff8 	.word	0x20009ff8
 800bc8c:	20009ff4 	.word	0x20009ff4
 800bc90:	2000a004 	.word	0x2000a004

0800bc94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bc94:	b480      	push	{r7}
 800bc96:	b085      	sub	sp, #20
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bc9c:	4b28      	ldr	r3, [pc, #160]	@ (800bd40 <prvInsertBlockIntoFreeList+0xac>)
 800bc9e:	60fb      	str	r3, [r7, #12]
 800bca0:	e002      	b.n	800bca8 <prvInsertBlockIntoFreeList+0x14>
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	60fb      	str	r3, [r7, #12]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	687a      	ldr	r2, [r7, #4]
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d8f7      	bhi.n	800bca2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	68ba      	ldr	r2, [r7, #8]
 800bcbc:	4413      	add	r3, r2
 800bcbe:	687a      	ldr	r2, [r7, #4]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d108      	bne.n	800bcd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	685a      	ldr	r2, [r3, #4]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	441a      	add	r2, r3
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	68ba      	ldr	r2, [r7, #8]
 800bce0:	441a      	add	r2, r3
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d118      	bne.n	800bd1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681a      	ldr	r2, [r3, #0]
 800bcee:	4b15      	ldr	r3, [pc, #84]	@ (800bd44 <prvInsertBlockIntoFreeList+0xb0>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d00d      	beq.n	800bd12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	685a      	ldr	r2, [r3, #4]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	441a      	add	r2, r3
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	681a      	ldr	r2, [r3, #0]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	601a      	str	r2, [r3, #0]
 800bd10:	e008      	b.n	800bd24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bd12:	4b0c      	ldr	r3, [pc, #48]	@ (800bd44 <prvInsertBlockIntoFreeList+0xb0>)
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	601a      	str	r2, [r3, #0]
 800bd1a:	e003      	b.n	800bd24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681a      	ldr	r2, [r3, #0]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bd24:	68fa      	ldr	r2, [r7, #12]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d002      	beq.n	800bd32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	687a      	ldr	r2, [r7, #4]
 800bd30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd32:	bf00      	nop
 800bd34:	3714      	adds	r7, #20
 800bd36:	46bd      	mov	sp, r7
 800bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3c:	4770      	bx	lr
 800bd3e:	bf00      	nop
 800bd40:	20009fe8 	.word	0x20009fe8
 800bd44:	20009ff0 	.word	0x20009ff0

0800bd48 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800bd48:	4b04      	ldr	r3, [pc, #16]	@ (800bd5c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800bd4a:	681a      	ldr	r2, [r3, #0]
 800bd4c:	b10a      	cbz	r2, 800bd52 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800bd4e:	4803      	ldr	r0, [pc, #12]	@ (800bd5c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800bd50:	4770      	bx	lr
 800bd52:	4a03      	ldr	r2, [pc, #12]	@ (800bd60 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800bd54:	4801      	ldr	r0, [pc, #4]	@ (800bd5c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800bd56:	6812      	ldr	r2, [r2, #0]
 800bd58:	601a      	str	r2, [r3, #0]
 800bd5a:	4770      	bx	lr
 800bd5c:	200000a4 	.word	0x200000a4
 800bd60:	200005bc 	.word	0x200005bc

0800bd64 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800bd64:	4a02      	ldr	r2, [pc, #8]	@ (800bd70 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800bd66:	4b03      	ldr	r3, [pc, #12]	@ (800bd74 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800bd68:	6812      	ldr	r2, [r2, #0]
 800bd6a:	601a      	str	r2, [r3, #0]
 800bd6c:	4770      	bx	lr
 800bd6e:	bf00      	nop
 800bd70:	200005bc 	.word	0x200005bc
 800bd74:	200000a4 	.word	0x200000a4

0800bd78 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800bd78:	f005 bde2 	b.w	8011940 <geometry_msgs__msg__Twist__init>

0800bd7c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800bd7c:	f005 be00 	b.w	8011980 <geometry_msgs__msg__Twist__fini>

0800bd80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800bd80:	b510      	push	{r4, lr}
 800bd82:	f000 f819 	bl	800bdb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800bd86:	4c07      	ldr	r4, [pc, #28]	@ (800bda4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800bd88:	60e0      	str	r0, [r4, #12]
 800bd8a:	f000 f815 	bl	800bdb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800bd8e:	4b06      	ldr	r3, [pc, #24]	@ (800bda8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800bd90:	64a0      	str	r0, [r4, #72]	@ 0x48
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	b10a      	cbz	r2, 800bd9a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800bd96:	4804      	ldr	r0, [pc, #16]	@ (800bda8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800bd98:	bd10      	pop	{r4, pc}
 800bd9a:	4a04      	ldr	r2, [pc, #16]	@ (800bdac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800bd9c:	4802      	ldr	r0, [pc, #8]	@ (800bda8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800bd9e:	6812      	ldr	r2, [r2, #0]
 800bda0:	601a      	str	r2, [r3, #0]
 800bda2:	bd10      	pop	{r4, pc}
 800bda4:	200000dc 	.word	0x200000dc
 800bda8:	200000c4 	.word	0x200000c4
 800bdac:	200005c0 	.word	0x200005c0

0800bdb0 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800bdb0:	f005 be22 	b.w	80119f8 <geometry_msgs__msg__Vector3__init>

0800bdb4 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800bdb4:	f005 be24 	b.w	8011a00 <geometry_msgs__msg__Vector3__fini>

0800bdb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800bdb8:	4b04      	ldr	r3, [pc, #16]	@ (800bdcc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800bdba:	681a      	ldr	r2, [r3, #0]
 800bdbc:	b10a      	cbz	r2, 800bdc2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800bdbe:	4803      	ldr	r0, [pc, #12]	@ (800bdcc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800bdc0:	4770      	bx	lr
 800bdc2:	4a03      	ldr	r2, [pc, #12]	@ (800bdd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800bdc4:	4801      	ldr	r0, [pc, #4]	@ (800bdcc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800bdc6:	6812      	ldr	r2, [r2, #0]
 800bdc8:	601a      	str	r2, [r3, #0]
 800bdca:	4770      	bx	lr
 800bdcc:	20000154 	.word	0x20000154
 800bdd0:	200005c0 	.word	0x200005c0

0800bdd4 <get_serialized_size_geometry_msgs__msg__Twist>:
 800bdd4:	b570      	push	{r4, r5, r6, lr}
 800bdd6:	4604      	mov	r4, r0
 800bdd8:	b148      	cbz	r0, 800bdee <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800bdda:	460d      	mov	r5, r1
 800bddc:	f000 f85c 	bl	800be98 <get_serialized_size_geometry_msgs__msg__Vector3>
 800bde0:	4606      	mov	r6, r0
 800bde2:	1829      	adds	r1, r5, r0
 800bde4:	f104 0018 	add.w	r0, r4, #24
 800bde8:	f000 f856 	bl	800be98 <get_serialized_size_geometry_msgs__msg__Vector3>
 800bdec:	4430      	add	r0, r6
 800bdee:	bd70      	pop	{r4, r5, r6, pc}

0800bdf0 <_Twist__cdr_deserialize>:
 800bdf0:	b570      	push	{r4, r5, r6, lr}
 800bdf2:	460c      	mov	r4, r1
 800bdf4:	b189      	cbz	r1, 800be1a <_Twist__cdr_deserialize+0x2a>
 800bdf6:	4605      	mov	r5, r0
 800bdf8:	f000 f8da 	bl	800bfb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800bdfc:	6843      	ldr	r3, [r0, #4]
 800bdfe:	4621      	mov	r1, r4
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	4628      	mov	r0, r5
 800be04:	4798      	blx	r3
 800be06:	f000 f8d3 	bl	800bfb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800be0a:	6843      	ldr	r3, [r0, #4]
 800be0c:	f104 0118 	add.w	r1, r4, #24
 800be10:	4628      	mov	r0, r5
 800be12:	68db      	ldr	r3, [r3, #12]
 800be14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be18:	4718      	bx	r3
 800be1a:	4608      	mov	r0, r1
 800be1c:	bd70      	pop	{r4, r5, r6, pc}
 800be1e:	bf00      	nop

0800be20 <_Twist__cdr_serialize>:
 800be20:	b198      	cbz	r0, 800be4a <_Twist__cdr_serialize+0x2a>
 800be22:	b570      	push	{r4, r5, r6, lr}
 800be24:	460d      	mov	r5, r1
 800be26:	4604      	mov	r4, r0
 800be28:	f000 f8c2 	bl	800bfb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800be2c:	6843      	ldr	r3, [r0, #4]
 800be2e:	4629      	mov	r1, r5
 800be30:	689b      	ldr	r3, [r3, #8]
 800be32:	4620      	mov	r0, r4
 800be34:	4798      	blx	r3
 800be36:	f000 f8bb 	bl	800bfb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800be3a:	6843      	ldr	r3, [r0, #4]
 800be3c:	4629      	mov	r1, r5
 800be3e:	f104 0018 	add.w	r0, r4, #24
 800be42:	689b      	ldr	r3, [r3, #8]
 800be44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be48:	4718      	bx	r3
 800be4a:	4770      	bx	lr

0800be4c <_Twist__get_serialized_size>:
 800be4c:	b538      	push	{r3, r4, r5, lr}
 800be4e:	4604      	mov	r4, r0
 800be50:	b148      	cbz	r0, 800be66 <_Twist__get_serialized_size+0x1a>
 800be52:	2100      	movs	r1, #0
 800be54:	f000 f820 	bl	800be98 <get_serialized_size_geometry_msgs__msg__Vector3>
 800be58:	4605      	mov	r5, r0
 800be5a:	4601      	mov	r1, r0
 800be5c:	f104 0018 	add.w	r0, r4, #24
 800be60:	f000 f81a 	bl	800be98 <get_serialized_size_geometry_msgs__msg__Vector3>
 800be64:	4428      	add	r0, r5
 800be66:	bd38      	pop	{r3, r4, r5, pc}

0800be68 <_Twist__max_serialized_size>:
 800be68:	b510      	push	{r4, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	2301      	movs	r3, #1
 800be6e:	2100      	movs	r1, #0
 800be70:	f10d 0007 	add.w	r0, sp, #7
 800be74:	f88d 3007 	strb.w	r3, [sp, #7]
 800be78:	f000 f880 	bl	800bf7c <max_serialized_size_geometry_msgs__msg__Vector3>
 800be7c:	4604      	mov	r4, r0
 800be7e:	4601      	mov	r1, r0
 800be80:	f10d 0007 	add.w	r0, sp, #7
 800be84:	f000 f87a 	bl	800bf7c <max_serialized_size_geometry_msgs__msg__Vector3>
 800be88:	4420      	add	r0, r4
 800be8a:	b002      	add	sp, #8
 800be8c:	bd10      	pop	{r4, pc}
 800be8e:	bf00      	nop

0800be90 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800be90:	4800      	ldr	r0, [pc, #0]	@ (800be94 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800be92:	4770      	bx	lr
 800be94:	20000220 	.word	0x20000220

0800be98 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800be98:	b1b8      	cbz	r0, 800beca <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800be9a:	b570      	push	{r4, r5, r6, lr}
 800be9c:	460d      	mov	r5, r1
 800be9e:	4628      	mov	r0, r5
 800bea0:	2108      	movs	r1, #8
 800bea2:	f001 ffe5 	bl	800de70 <ucdr_alignment>
 800bea6:	2108      	movs	r1, #8
 800bea8:	186e      	adds	r6, r5, r1
 800beaa:	4406      	add	r6, r0
 800beac:	4630      	mov	r0, r6
 800beae:	f001 ffdf 	bl	800de70 <ucdr_alignment>
 800beb2:	f100 0408 	add.w	r4, r0, #8
 800beb6:	4434      	add	r4, r6
 800beb8:	2108      	movs	r1, #8
 800beba:	4620      	mov	r0, r4
 800bebc:	f001 ffd8 	bl	800de70 <ucdr_alignment>
 800bec0:	f1c5 0508 	rsb	r5, r5, #8
 800bec4:	4405      	add	r5, r0
 800bec6:	1928      	adds	r0, r5, r4
 800bec8:	bd70      	pop	{r4, r5, r6, pc}
 800beca:	4770      	bx	lr

0800becc <_Vector3__cdr_deserialize>:
 800becc:	b538      	push	{r3, r4, r5, lr}
 800bece:	460c      	mov	r4, r1
 800bed0:	b171      	cbz	r1, 800bef0 <_Vector3__cdr_deserialize+0x24>
 800bed2:	4605      	mov	r5, r0
 800bed4:	f001 fdee 	bl	800dab4 <ucdr_deserialize_double>
 800bed8:	f104 0108 	add.w	r1, r4, #8
 800bedc:	4628      	mov	r0, r5
 800bede:	f001 fde9 	bl	800dab4 <ucdr_deserialize_double>
 800bee2:	f104 0110 	add.w	r1, r4, #16
 800bee6:	4628      	mov	r0, r5
 800bee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800beec:	f001 bde2 	b.w	800dab4 <ucdr_deserialize_double>
 800bef0:	4608      	mov	r0, r1
 800bef2:	bd38      	pop	{r3, r4, r5, pc}

0800bef4 <_Vector3__cdr_serialize>:
 800bef4:	b198      	cbz	r0, 800bf1e <_Vector3__cdr_serialize+0x2a>
 800bef6:	b538      	push	{r3, r4, r5, lr}
 800bef8:	ed90 0b00 	vldr	d0, [r0]
 800befc:	460d      	mov	r5, r1
 800befe:	4604      	mov	r4, r0
 800bf00:	4608      	mov	r0, r1
 800bf02:	f001 fc47 	bl	800d794 <ucdr_serialize_double>
 800bf06:	ed94 0b02 	vldr	d0, [r4, #8]
 800bf0a:	4628      	mov	r0, r5
 800bf0c:	f001 fc42 	bl	800d794 <ucdr_serialize_double>
 800bf10:	ed94 0b04 	vldr	d0, [r4, #16]
 800bf14:	4628      	mov	r0, r5
 800bf16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf1a:	f001 bc3b 	b.w	800d794 <ucdr_serialize_double>
 800bf1e:	4770      	bx	lr

0800bf20 <_Vector3__get_serialized_size>:
 800bf20:	b1a0      	cbz	r0, 800bf4c <_Vector3__get_serialized_size+0x2c>
 800bf22:	b538      	push	{r3, r4, r5, lr}
 800bf24:	2108      	movs	r1, #8
 800bf26:	2000      	movs	r0, #0
 800bf28:	f001 ffa2 	bl	800de70 <ucdr_alignment>
 800bf2c:	f100 0508 	add.w	r5, r0, #8
 800bf30:	2108      	movs	r1, #8
 800bf32:	4628      	mov	r0, r5
 800bf34:	f001 ff9c 	bl	800de70 <ucdr_alignment>
 800bf38:	f100 0408 	add.w	r4, r0, #8
 800bf3c:	442c      	add	r4, r5
 800bf3e:	2108      	movs	r1, #8
 800bf40:	4620      	mov	r0, r4
 800bf42:	f001 ff95 	bl	800de70 <ucdr_alignment>
 800bf46:	3008      	adds	r0, #8
 800bf48:	4420      	add	r0, r4
 800bf4a:	bd38      	pop	{r3, r4, r5, pc}
 800bf4c:	4770      	bx	lr
 800bf4e:	bf00      	nop

0800bf50 <_Vector3__max_serialized_size>:
 800bf50:	b538      	push	{r3, r4, r5, lr}
 800bf52:	2108      	movs	r1, #8
 800bf54:	2000      	movs	r0, #0
 800bf56:	f001 ff8b 	bl	800de70 <ucdr_alignment>
 800bf5a:	f100 0508 	add.w	r5, r0, #8
 800bf5e:	2108      	movs	r1, #8
 800bf60:	4628      	mov	r0, r5
 800bf62:	f001 ff85 	bl	800de70 <ucdr_alignment>
 800bf66:	f100 0408 	add.w	r4, r0, #8
 800bf6a:	442c      	add	r4, r5
 800bf6c:	2108      	movs	r1, #8
 800bf6e:	4620      	mov	r0, r4
 800bf70:	f001 ff7e 	bl	800de70 <ucdr_alignment>
 800bf74:	3008      	adds	r0, #8
 800bf76:	4420      	add	r0, r4
 800bf78:	bd38      	pop	{r3, r4, r5, pc}
 800bf7a:	bf00      	nop

0800bf7c <max_serialized_size_geometry_msgs__msg__Vector3>:
 800bf7c:	b570      	push	{r4, r5, r6, lr}
 800bf7e:	2301      	movs	r3, #1
 800bf80:	460c      	mov	r4, r1
 800bf82:	7003      	strb	r3, [r0, #0]
 800bf84:	2108      	movs	r1, #8
 800bf86:	4620      	mov	r0, r4
 800bf88:	f001 ff72 	bl	800de70 <ucdr_alignment>
 800bf8c:	2108      	movs	r1, #8
 800bf8e:	1863      	adds	r3, r4, r1
 800bf90:	18c6      	adds	r6, r0, r3
 800bf92:	4630      	mov	r0, r6
 800bf94:	f001 ff6c 	bl	800de70 <ucdr_alignment>
 800bf98:	f100 0508 	add.w	r5, r0, #8
 800bf9c:	4435      	add	r5, r6
 800bf9e:	2108      	movs	r1, #8
 800bfa0:	4628      	mov	r0, r5
 800bfa2:	f001 ff65 	bl	800de70 <ucdr_alignment>
 800bfa6:	f1c4 0408 	rsb	r4, r4, #8
 800bfaa:	4420      	add	r0, r4
 800bfac:	4428      	add	r0, r5
 800bfae:	bd70      	pop	{r4, r5, r6, pc}

0800bfb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800bfb0:	4800      	ldr	r0, [pc, #0]	@ (800bfb4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800bfb2:	4770      	bx	lr
 800bfb4:	20000254 	.word	0x20000254

0800bfb8 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800bfb8:	4b04      	ldr	r3, [pc, #16]	@ (800bfcc <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	b10a      	cbz	r2, 800bfc2 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xa>
 800bfbe:	4803      	ldr	r0, [pc, #12]	@ (800bfcc <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800bfc0:	4770      	bx	lr
 800bfc2:	4a03      	ldr	r2, [pc, #12]	@ (800bfd0 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x18>)
 800bfc4:	4801      	ldr	r0, [pc, #4]	@ (800bfcc <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800bfc6:	6812      	ldr	r2, [r2, #0]
 800bfc8:	601a      	str	r2, [r3, #0]
 800bfca:	4770      	bx	lr
 800bfcc:	20000288 	.word	0x20000288
 800bfd0:	200005bc 	.word	0x200005bc

0800bfd4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800bfd4:	4b06      	ldr	r3, [pc, #24]	@ (800bff0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x1c>)
 800bfd6:	4807      	ldr	r0, [pc, #28]	@ (800bff4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800bfd8:	4907      	ldr	r1, [pc, #28]	@ (800bff8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x24>)
 800bfda:	4a08      	ldr	r2, [pc, #32]	@ (800bffc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x28>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	b410      	push	{r4}
 800bfe0:	4c07      	ldr	r4, [pc, #28]	@ (800c000 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x2c>)
 800bfe2:	6003      	str	r3, [r0, #0]
 800bfe4:	6023      	str	r3, [r4, #0]
 800bfe6:	600b      	str	r3, [r1, #0]
 800bfe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfec:	6013      	str	r3, [r2, #0]
 800bfee:	4770      	bx	lr
 800bff0:	200005bc 	.word	0x200005bc
 800bff4:	200002dc 	.word	0x200002dc
 800bff8:	200002bc 	.word	0x200002bc
 800bffc:	20000288 	.word	0x20000288
 800c000:	200002fc 	.word	0x200002fc

0800c004 <imu_interfaces__srv__ImuCalibration_Event__rosidl_typesupport_introspection_c__size_function__ImuCalibration_Event__request>:
 800c004:	6840      	ldr	r0, [r0, #4]
 800c006:	4770      	bx	lr

0800c008 <imu_interfaces__srv__ImuCalibration_Event__rosidl_typesupport_introspection_c__get_const_function__ImuCalibration_Event__request>:
 800c008:	6800      	ldr	r0, [r0, #0]
 800c00a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c00e:	eb00 1081 	add.w	r0, r0, r1, lsl #6
 800c012:	4770      	bx	lr

0800c014 <imu_interfaces__srv__ImuCalibration_Event__rosidl_typesupport_introspection_c__fetch_function__ImuCalibration_Event__request>:
 800c014:	b508      	push	{r3, lr}
 800c016:	6803      	ldr	r3, [r0, #0]
 800c018:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c01c:	4610      	mov	r0, r2
 800c01e:	eb03 1181 	add.w	r1, r3, r1, lsl #6
 800c022:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800c026:	f011 fcda 	bl	801d9de <memcpy>
 800c02a:	bd08      	pop	{r3, pc}

0800c02c <imu_interfaces__srv__ImuCalibration_Event__rosidl_typesupport_introspection_c__assign_function__ImuCalibration_Event__request>:
 800c02c:	b508      	push	{r3, lr}
 800c02e:	6803      	ldr	r3, [r0, #0]
 800c030:	4694      	mov	ip, r2
 800c032:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 800c036:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800c03a:	4661      	mov	r1, ip
 800c03c:	eb03 1080 	add.w	r0, r3, r0, lsl #6
 800c040:	f011 fccd 	bl	801d9de <memcpy>
 800c044:	bd08      	pop	{r3, pc}
 800c046:	bf00      	nop

0800c048 <imu_interfaces__srv__ImuCalibration_Event__rosidl_typesupport_introspection_c__size_function__ImuCalibration_Event__response>:
 800c048:	6840      	ldr	r0, [r0, #4]
 800c04a:	4770      	bx	lr

0800c04c <imu_interfaces__srv__ImuCalibration_Event__rosidl_typesupport_introspection_c__get_const_function__ImuCalibration_Event__response>:
 800c04c:	6800      	ldr	r0, [r0, #0]
 800c04e:	4408      	add	r0, r1
 800c050:	4770      	bx	lr
 800c052:	bf00      	nop

0800c054 <imu_interfaces__srv__ImuCalibration_Event__rosidl_typesupport_introspection_c__fetch_function__ImuCalibration_Event__response>:
 800c054:	6803      	ldr	r3, [r0, #0]
 800c056:	5c5b      	ldrb	r3, [r3, r1]
 800c058:	7013      	strb	r3, [r2, #0]
 800c05a:	4770      	bx	lr

0800c05c <imu_interfaces__srv__ImuCalibration_Event__rosidl_typesupport_introspection_c__assign_function__ImuCalibration_Event__response>:
 800c05c:	6803      	ldr	r3, [r0, #0]
 800c05e:	7812      	ldrb	r2, [r2, #0]
 800c060:	545a      	strb	r2, [r3, r1]
 800c062:	4770      	bx	lr

0800c064 <imu_interfaces__srv__ImuCalibration_Request__rosidl_typesupport_introspection_c__ImuCalibration_Request_init_function>:
 800c064:	f006 b8aa 	b.w	80121bc <imu_interfaces__srv__ImuCalibration_Request__init>

0800c068 <imu_interfaces__srv__ImuCalibration_Request__rosidl_typesupport_introspection_c__ImuCalibration_Request_fini_function>:
 800c068:	f006 b8b6 	b.w	80121d8 <imu_interfaces__srv__ImuCalibration_Request__fini>

0800c06c <imu_interfaces__srv__ImuCalibration_Response__rosidl_typesupport_introspection_c__ImuCalibration_Response_init_function>:
 800c06c:	f006 b92c 	b.w	80122c8 <imu_interfaces__srv__ImuCalibration_Response__init>

0800c070 <imu_interfaces__srv__ImuCalibration_Response__rosidl_typesupport_introspection_c__ImuCalibration_Response_fini_function>:
 800c070:	f006 b92e 	b.w	80122d0 <imu_interfaces__srv__ImuCalibration_Response__fini>

0800c074 <imu_interfaces__srv__ImuCalibration_Event__rosidl_typesupport_introspection_c__ImuCalibration_Event_init_function>:
 800c074:	f006 b966 	b.w	8012344 <imu_interfaces__srv__ImuCalibration_Event__init>

0800c078 <imu_interfaces__srv__ImuCalibration_Event__rosidl_typesupport_introspection_c__ImuCalibration_Event_fini_function>:
 800c078:	f006 b9b0 	b.w	80123dc <imu_interfaces__srv__ImuCalibration_Event__fini>

0800c07c <imu_interfaces__srv__ImuCalibration_Event__rosidl_typesupport_introspection_c__resize_function__ImuCalibration_Event__request>:
 800c07c:	b538      	push	{r3, r4, r5, lr}
 800c07e:	4604      	mov	r4, r0
 800c080:	460d      	mov	r5, r1
 800c082:	f006 f8f9 	bl	8012278 <imu_interfaces__srv__ImuCalibration_Request__Sequence__fini>
 800c086:	4629      	mov	r1, r5
 800c088:	4620      	mov	r0, r4
 800c08a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c08e:	f006 b8ad 	b.w	80121ec <imu_interfaces__srv__ImuCalibration_Request__Sequence__init>
 800c092:	bf00      	nop

0800c094 <imu_interfaces__srv__ImuCalibration_Event__rosidl_typesupport_introspection_c__resize_function__ImuCalibration_Event__response>:
 800c094:	b538      	push	{r3, r4, r5, lr}
 800c096:	4604      	mov	r4, r0
 800c098:	460d      	mov	r5, r1
 800c09a:	f006 f93f 	bl	801231c <imu_interfaces__srv__ImuCalibration_Response__Sequence__fini>
 800c09e:	4629      	mov	r1, r5
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0a6:	f006 b91d 	b.w	80122e4 <imu_interfaces__srv__ImuCalibration_Response__Sequence__init>
 800c0aa:	bf00      	nop

0800c0ac <imu_interfaces__srv__ImuCalibration_Event__rosidl_typesupport_introspection_c__get_function__ImuCalibration_Event__response>:
 800c0ac:	6800      	ldr	r0, [r0, #0]
 800c0ae:	4408      	add	r0, r1
 800c0b0:	4770      	bx	lr
 800c0b2:	bf00      	nop

0800c0b4 <imu_interfaces__srv__ImuCalibration_Event__rosidl_typesupport_introspection_c__get_function__ImuCalibration_Event__request>:
 800c0b4:	6800      	ldr	r0, [r0, #0]
 800c0b6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c0ba:	eb00 1081 	add.w	r0, r0, r1, lsl #6
 800c0be:	4770      	bx	lr

0800c0c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800c0c0:	b508      	push	{r3, lr}
 800c0c2:	f004 fe11 	bl	8010ce8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800c0c6:	4b06      	ldr	r3, [pc, #24]	@ (800c0e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800c0c8:	4906      	ldr	r1, [pc, #24]	@ (800c0e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x24>)
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	60c8      	str	r0, [r1, #12]
 800c0ce:	b10a      	cbz	r2, 800c0d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x14>
 800c0d0:	4803      	ldr	r0, [pc, #12]	@ (800c0e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800c0d2:	bd08      	pop	{r3, pc}
 800c0d4:	4a04      	ldr	r2, [pc, #16]	@ (800c0e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x28>)
 800c0d6:	4802      	ldr	r0, [pc, #8]	@ (800c0e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800c0d8:	6812      	ldr	r2, [r2, #0]
 800c0da:	601a      	str	r2, [r3, #0]
 800c0dc:	bd08      	pop	{r3, pc}
 800c0de:	bf00      	nop
 800c0e0:	2000047c 	.word	0x2000047c
 800c0e4:	20000494 	.word	0x20000494
 800c0e8:	200005c0 	.word	0x200005c0

0800c0ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response>:
 800c0ec:	4b04      	ldr	r3, [pc, #16]	@ (800c100 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800c0ee:	681a      	ldr	r2, [r3, #0]
 800c0f0:	b10a      	cbz	r2, 800c0f6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0xa>
 800c0f2:	4803      	ldr	r0, [pc, #12]	@ (800c100 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800c0f4:	4770      	bx	lr
 800c0f6:	4a03      	ldr	r2, [pc, #12]	@ (800c104 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x18>)
 800c0f8:	4801      	ldr	r0, [pc, #4]	@ (800c100 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800c0fa:	6812      	ldr	r2, [r2, #0]
 800c0fc:	601a      	str	r2, [r3, #0]
 800c0fe:	4770      	bx	lr
 800c100:	20000428 	.word	0x20000428
 800c104:	200005c0 	.word	0x200005c0

0800c108 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event>:
 800c108:	b510      	push	{r4, lr}
 800c10a:	f004 ff09 	bl	8010f20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c10e:	4c15      	ldr	r4, [pc, #84]	@ (800c164 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x5c>)
 800c110:	60e0      	str	r0, [r4, #12]
 800c112:	f004 fde9 	bl	8010ce8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800c116:	4a14      	ldr	r2, [pc, #80]	@ (800c168 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x60>)
 800c118:	4914      	ldr	r1, [pc, #80]	@ (800c16c <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x64>)
 800c11a:	6813      	ldr	r3, [r2, #0]
 800c11c:	60c8      	str	r0, [r1, #12]
 800c11e:	b153      	cbz	r3, 800c136 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x2e>
 800c120:	4b13      	ldr	r3, [pc, #76]	@ (800c170 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x68>)
 800c122:	64a2      	str	r2, [r4, #72]	@ 0x48
 800c124:	681a      	ldr	r2, [r3, #0]
 800c126:	b172      	cbz	r2, 800c146 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x3e>
 800c128:	4a12      	ldr	r2, [pc, #72]	@ (800c174 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x6c>)
 800c12a:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 800c12e:	6813      	ldr	r3, [r2, #0]
 800c130:	b193      	cbz	r3, 800c158 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x50>
 800c132:	4810      	ldr	r0, [pc, #64]	@ (800c174 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x6c>)
 800c134:	bd10      	pop	{r4, pc}
 800c136:	4b10      	ldr	r3, [pc, #64]	@ (800c178 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x70>)
 800c138:	64a2      	str	r2, [r4, #72]	@ 0x48
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	6013      	str	r3, [r2, #0]
 800c13e:	4b0c      	ldr	r3, [pc, #48]	@ (800c170 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x68>)
 800c140:	681a      	ldr	r2, [r3, #0]
 800c142:	2a00      	cmp	r2, #0
 800c144:	d1f0      	bne.n	800c128 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x20>
 800c146:	4a0c      	ldr	r2, [pc, #48]	@ (800c178 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x70>)
 800c148:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 800c14c:	6812      	ldr	r2, [r2, #0]
 800c14e:	601a      	str	r2, [r3, #0]
 800c150:	4a08      	ldr	r2, [pc, #32]	@ (800c174 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x6c>)
 800c152:	6813      	ldr	r3, [r2, #0]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d1ec      	bne.n	800c132 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x2a>
 800c158:	4b07      	ldr	r3, [pc, #28]	@ (800c178 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x70>)
 800c15a:	4806      	ldr	r0, [pc, #24]	@ (800c174 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x6c>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	6013      	str	r3, [r2, #0]
 800c160:	bd10      	pop	{r4, pc}
 800c162:	bf00      	nop
 800c164:	20000374 	.word	0x20000374
 800c168:	2000047c 	.word	0x2000047c
 800c16c:	20000494 	.word	0x20000494
 800c170:	20000428 	.word	0x20000428
 800c174:	2000035c 	.word	0x2000035c
 800c178:	200005c0 	.word	0x200005c0

0800c17c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800c17c:	b538      	push	{r3, r4, r5, lr}
 800c17e:	4b2a      	ldr	r3, [pc, #168]	@ (800c228 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xac>)
 800c180:	681a      	ldr	r2, [r3, #0]
 800c182:	b142      	cbz	r2, 800c196 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x1a>
 800c184:	685c      	ldr	r4, [r3, #4]
 800c186:	68a3      	ldr	r3, [r4, #8]
 800c188:	b163      	cbz	r3, 800c1a4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x28>
 800c18a:	68e3      	ldr	r3, [r4, #12]
 800c18c:	b1bb      	cbz	r3, 800c1be <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x42>
 800c18e:	6923      	ldr	r3, [r4, #16]
 800c190:	b1eb      	cbz	r3, 800c1ce <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x52>
 800c192:	4825      	ldr	r0, [pc, #148]	@ (800c228 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xac>)
 800c194:	bd38      	pop	{r3, r4, r5, pc}
 800c196:	4a25      	ldr	r2, [pc, #148]	@ (800c22c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xb0>)
 800c198:	685c      	ldr	r4, [r3, #4]
 800c19a:	6812      	ldr	r2, [r2, #0]
 800c19c:	601a      	str	r2, [r3, #0]
 800c19e:	68a3      	ldr	r3, [r4, #8]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d1f2      	bne.n	800c18a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xe>
 800c1a4:	f004 fda0 	bl	8010ce8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800c1a8:	4a21      	ldr	r2, [pc, #132]	@ (800c230 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xb4>)
 800c1aa:	4922      	ldr	r1, [pc, #136]	@ (800c234 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xb8>)
 800c1ac:	6813      	ldr	r3, [r2, #0]
 800c1ae:	60c8      	str	r0, [r1, #12]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d034      	beq.n	800c21e <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xa2>
 800c1b4:	6853      	ldr	r3, [r2, #4]
 800c1b6:	60a3      	str	r3, [r4, #8]
 800c1b8:	68e3      	ldr	r3, [r4, #12]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d1e7      	bne.n	800c18e <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x12>
 800c1be:	4b1e      	ldr	r3, [pc, #120]	@ (800c238 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xbc>)
 800c1c0:	681a      	ldr	r2, [r3, #0]
 800c1c2:	b1e2      	cbz	r2, 800c1fe <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x82>
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	60e3      	str	r3, [r4, #12]
 800c1c8:	6923      	ldr	r3, [r4, #16]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d1e1      	bne.n	800c192 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x16>
 800c1ce:	f004 fea7 	bl	8010f20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c1d2:	4d1a      	ldr	r5, [pc, #104]	@ (800c23c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xc0>)
 800c1d4:	60e8      	str	r0, [r5, #12]
 800c1d6:	f004 fd87 	bl	8010ce8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800c1da:	4b16      	ldr	r3, [pc, #88]	@ (800c234 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xb8>)
 800c1dc:	4a14      	ldr	r2, [pc, #80]	@ (800c230 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xb4>)
 800c1de:	60d8      	str	r0, [r3, #12]
 800c1e0:	6813      	ldr	r3, [r2, #0]
 800c1e2:	b1a3      	cbz	r3, 800c20e <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x92>
 800c1e4:	4b14      	ldr	r3, [pc, #80]	@ (800c238 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xbc>)
 800c1e6:	64aa      	str	r2, [r5, #72]	@ 0x48
 800c1e8:	681a      	ldr	r2, [r3, #0]
 800c1ea:	b162      	cbz	r2, 800c206 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x8a>
 800c1ec:	4a14      	ldr	r2, [pc, #80]	@ (800c240 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xc4>)
 800c1ee:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
 800c1f2:	6813      	ldr	r3, [r2, #0]
 800c1f4:	b17b      	cbz	r3, 800c216 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x9a>
 800c1f6:	6853      	ldr	r3, [r2, #4]
 800c1f8:	480b      	ldr	r0, [pc, #44]	@ (800c228 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xac>)
 800c1fa:	6123      	str	r3, [r4, #16]
 800c1fc:	bd38      	pop	{r3, r4, r5, pc}
 800c1fe:	4a0b      	ldr	r2, [pc, #44]	@ (800c22c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xb0>)
 800c200:	6812      	ldr	r2, [r2, #0]
 800c202:	601a      	str	r2, [r3, #0]
 800c204:	e7de      	b.n	800c1c4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x48>
 800c206:	4a09      	ldr	r2, [pc, #36]	@ (800c22c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xb0>)
 800c208:	6812      	ldr	r2, [r2, #0]
 800c20a:	601a      	str	r2, [r3, #0]
 800c20c:	e7ee      	b.n	800c1ec <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x70>
 800c20e:	4b07      	ldr	r3, [pc, #28]	@ (800c22c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xb0>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	6013      	str	r3, [r2, #0]
 800c214:	e7e6      	b.n	800c1e4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x68>
 800c216:	4b05      	ldr	r3, [pc, #20]	@ (800c22c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xb0>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	6013      	str	r3, [r2, #0]
 800c21c:	e7eb      	b.n	800c1f6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x7a>
 800c21e:	4b03      	ldr	r3, [pc, #12]	@ (800c22c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xb0>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	6013      	str	r3, [r2, #0]
 800c224:	e7c6      	b.n	800c1b4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x38>
 800c226:	bf00      	nop
 800c228:	2000031c 	.word	0x2000031c
 800c22c:	200005c0 	.word	0x200005c0
 800c230:	2000047c 	.word	0x2000047c
 800c234:	20000494 	.word	0x20000494
 800c238:	20000428 	.word	0x20000428
 800c23c:	20000374 	.word	0x20000374
 800c240:	2000035c 	.word	0x2000035c

0800c244 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800c244:	4800      	ldr	r0, [pc, #0]	@ (800c248 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x4>)
 800c246:	4770      	bx	lr
 800c248:	20000574 	.word	0x20000574

0800c24c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response>:
 800c24c:	4800      	ldr	r0, [pc, #0]	@ (800c250 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x4>)
 800c24e:	4770      	bx	lr
 800c250:	20000540 	.word	0x20000540

0800c254 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Request>:
 800c254:	b108      	cbz	r0, 800c25a <get_serialized_size_imu_interfaces__srv__ImuCalibration_Request+0x6>
 800c256:	f004 bd97 	b.w	8010d88 <get_serialized_size_sensor_msgs__msg__Imu>
 800c25a:	4770      	bx	lr

0800c25c <_ImuCalibration_Request__max_serialized_size>:
 800c25c:	b500      	push	{lr}
 800c25e:	b083      	sub	sp, #12
 800c260:	2301      	movs	r3, #1
 800c262:	2100      	movs	r1, #0
 800c264:	f10d 0007 	add.w	r0, sp, #7
 800c268:	f88d 3007 	strb.w	r3, [sp, #7]
 800c26c:	f004 fe0a 	bl	8010e84 <max_serialized_size_sensor_msgs__msg__Imu>
 800c270:	b003      	add	sp, #12
 800c272:	f85d fb04 	ldr.w	pc, [sp], #4
 800c276:	bf00      	nop

0800c278 <_ImuCalibration_Response__max_serialized_size>:
 800c278:	b508      	push	{r3, lr}
 800c27a:	2101      	movs	r1, #1
 800c27c:	2000      	movs	r0, #0
 800c27e:	f001 fdf7 	bl	800de70 <ucdr_alignment>
 800c282:	3001      	adds	r0, #1
 800c284:	bd08      	pop	{r3, pc}
 800c286:	bf00      	nop

0800c288 <_ImuCalibration_Response__cdr_deserialize>:
 800c288:	b109      	cbz	r1, 800c28e <_ImuCalibration_Response__cdr_deserialize+0x6>
 800c28a:	f000 b98f 	b.w	800c5ac <ucdr_deserialize_bool>
 800c28e:	4608      	mov	r0, r1
 800c290:	4770      	bx	lr
 800c292:	bf00      	nop

0800c294 <_ImuCalibration_Event__max_serialized_size>:
 800c294:	b500      	push	{lr}
 800c296:	b083      	sub	sp, #12
 800c298:	2301      	movs	r3, #1
 800c29a:	2100      	movs	r1, #0
 800c29c:	f10d 0007 	add.w	r0, sp, #7
 800c2a0:	f88d 3007 	strb.w	r3, [sp, #7]
 800c2a4:	f004 fee6 	bl	8011074 <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800c2a8:	b003      	add	sp, #12
 800c2aa:	f85d fb04 	ldr.w	pc, [sp], #4
 800c2ae:	bf00      	nop

0800c2b0 <_ImuCalibration_Event__cdr_deserialize>:
 800c2b0:	2900      	cmp	r1, #0
 800c2b2:	d049      	beq.n	800c348 <_ImuCalibration_Event__cdr_deserialize+0x98>
 800c2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2b8:	b082      	sub	sp, #8
 800c2ba:	4607      	mov	r7, r0
 800c2bc:	460c      	mov	r4, r1
 800c2be:	f004 fef9 	bl	80110b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c2c2:	6843      	ldr	r3, [r0, #4]
 800c2c4:	4621      	mov	r1, r4
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	4638      	mov	r0, r7
 800c2ca:	4798      	blx	r3
 800c2cc:	a901      	add	r1, sp, #4
 800c2ce:	4638      	mov	r0, r7
 800c2d0:	f000 fcca 	bl	800cc68 <ucdr_deserialize_uint32_t>
 800c2d4:	9b01      	ldr	r3, [sp, #4]
 800c2d6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d331      	bcc.n	800c340 <_ImuCalibration_Event__cdr_deserialize+0x90>
 800c2dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c2de:	b19b      	cbz	r3, 800c308 <_ImuCalibration_Event__cdr_deserialize+0x58>
 800c2e0:	2500      	movs	r5, #0
 800c2e2:	f8df 806c 	ldr.w	r8, [pc, #108]	@ 800c350 <_ImuCalibration_Event__cdr_deserialize+0xa0>
 800c2e6:	462e      	mov	r6, r5
 800c2e8:	e005      	b.n	800c2f6 <_ImuCalibration_Event__cdr_deserialize+0x46>
 800c2ea:	9b01      	ldr	r3, [sp, #4]
 800c2ec:	3601      	adds	r6, #1
 800c2ee:	42b3      	cmp	r3, r6
 800c2f0:	f505 75a0 	add.w	r5, r5, #320	@ 0x140
 800c2f4:	d908      	bls.n	800c308 <_ImuCalibration_Event__cdr_deserialize+0x58>
 800c2f6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800c2f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c2fc:	4429      	add	r1, r5
 800c2fe:	68db      	ldr	r3, [r3, #12]
 800c300:	4638      	mov	r0, r7
 800c302:	4798      	blx	r3
 800c304:	2800      	cmp	r0, #0
 800c306:	d1f0      	bne.n	800c2ea <_ImuCalibration_Event__cdr_deserialize+0x3a>
 800c308:	a901      	add	r1, sp, #4
 800c30a:	4638      	mov	r0, r7
 800c30c:	f000 fcac 	bl	800cc68 <ucdr_deserialize_uint32_t>
 800c310:	9b01      	ldr	r3, [sp, #4]
 800c312:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800c314:	429a      	cmp	r2, r3
 800c316:	d313      	bcc.n	800c340 <_ImuCalibration_Event__cdr_deserialize+0x90>
 800c318:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c31a:	b173      	cbz	r3, 800c33a <_ImuCalibration_Event__cdr_deserialize+0x8a>
 800c31c:	4e0b      	ldr	r6, [pc, #44]	@ (800c34c <_ImuCalibration_Event__cdr_deserialize+0x9c>)
 800c31e:	2500      	movs	r5, #0
 800c320:	e002      	b.n	800c328 <_ImuCalibration_Event__cdr_deserialize+0x78>
 800c322:	9b01      	ldr	r3, [sp, #4]
 800c324:	42ab      	cmp	r3, r5
 800c326:	d908      	bls.n	800c33a <_ImuCalibration_Event__cdr_deserialize+0x8a>
 800c328:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c32a:	6873      	ldr	r3, [r6, #4]
 800c32c:	4429      	add	r1, r5
 800c32e:	68db      	ldr	r3, [r3, #12]
 800c330:	4638      	mov	r0, r7
 800c332:	4798      	blx	r3
 800c334:	3501      	adds	r5, #1
 800c336:	2800      	cmp	r0, #0
 800c338:	d1f3      	bne.n	800c322 <_ImuCalibration_Event__cdr_deserialize+0x72>
 800c33a:	b002      	add	sp, #8
 800c33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c340:	2000      	movs	r0, #0
 800c342:	b002      	add	sp, #8
 800c344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c348:	2000      	movs	r0, #0
 800c34a:	4770      	bx	lr
 800c34c:	20000540 	.word	0x20000540
 800c350:	20000574 	.word	0x20000574

0800c354 <_ImuCalibration_Event__cdr_serialize>:
 800c354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c358:	2800      	cmp	r0, #0
 800c35a:	d03a      	beq.n	800c3d2 <_ImuCalibration_Event__cdr_serialize+0x7e>
 800c35c:	460e      	mov	r6, r1
 800c35e:	4605      	mov	r5, r0
 800c360:	f004 fea8 	bl	80110b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c364:	6843      	ldr	r3, [r0, #4]
 800c366:	4631      	mov	r1, r6
 800c368:	689b      	ldr	r3, [r3, #8]
 800c36a:	4628      	mov	r0, r5
 800c36c:	4798      	blx	r3
 800c36e:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 800c370:	4630      	mov	r0, r6
 800c372:	4639      	mov	r1, r7
 800c374:	f000 fb4e 	bl	800ca14 <ucdr_serialize_uint32_t>
 800c378:	b198      	cbz	r0, 800c3a2 <_ImuCalibration_Event__cdr_serialize+0x4e>
 800c37a:	b197      	cbz	r7, 800c3a2 <_ImuCalibration_Event__cdr_serialize+0x4e>
 800c37c:	f8df 805c 	ldr.w	r8, [pc, #92]	@ 800c3dc <_ImuCalibration_Event__cdr_serialize+0x88>
 800c380:	2400      	movs	r4, #0
 800c382:	e002      	b.n	800c38a <_ImuCalibration_Event__cdr_serialize+0x36>
 800c384:	3401      	adds	r4, #1
 800c386:	42a7      	cmp	r7, r4
 800c388:	d00b      	beq.n	800c3a2 <_ImuCalibration_Event__cdr_serialize+0x4e>
 800c38a:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800c38c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800c390:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800c394:	6892      	ldr	r2, [r2, #8]
 800c396:	4631      	mov	r1, r6
 800c398:	eb00 1083 	add.w	r0, r0, r3, lsl #6
 800c39c:	4790      	blx	r2
 800c39e:	2800      	cmp	r0, #0
 800c3a0:	d1f0      	bne.n	800c384 <_ImuCalibration_Event__cdr_serialize+0x30>
 800c3a2:	6baf      	ldr	r7, [r5, #56]	@ 0x38
 800c3a4:	4630      	mov	r0, r6
 800c3a6:	4639      	mov	r1, r7
 800c3a8:	f000 fb34 	bl	800ca14 <ucdr_serialize_uint32_t>
 800c3ac:	4680      	mov	r8, r0
 800c3ae:	b180      	cbz	r0, 800c3d2 <_ImuCalibration_Event__cdr_serialize+0x7e>
 800c3b0:	b18f      	cbz	r7, 800c3d6 <_ImuCalibration_Event__cdr_serialize+0x82>
 800c3b2:	f8df 902c 	ldr.w	r9, [pc, #44]	@ 800c3e0 <_ImuCalibration_Event__cdr_serialize+0x8c>
 800c3b6:	2400      	movs	r4, #0
 800c3b8:	e002      	b.n	800c3c0 <_ImuCalibration_Event__cdr_serialize+0x6c>
 800c3ba:	3401      	adds	r4, #1
 800c3bc:	42a7      	cmp	r7, r4
 800c3be:	d00a      	beq.n	800c3d6 <_ImuCalibration_Event__cdr_serialize+0x82>
 800c3c0:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800c3c2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c3c6:	4631      	mov	r1, r6
 800c3c8:	689b      	ldr	r3, [r3, #8]
 800c3ca:	4420      	add	r0, r4
 800c3cc:	4798      	blx	r3
 800c3ce:	2800      	cmp	r0, #0
 800c3d0:	d1f3      	bne.n	800c3ba <_ImuCalibration_Event__cdr_serialize+0x66>
 800c3d2:	f04f 0800 	mov.w	r8, #0
 800c3d6:	4640      	mov	r0, r8
 800c3d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3dc:	20000574 	.word	0x20000574
 800c3e0:	20000540 	.word	0x20000540

0800c3e4 <_ImuCalibration_Request__get_serialized_size>:
 800c3e4:	b110      	cbz	r0, 800c3ec <_ImuCalibration_Request__get_serialized_size+0x8>
 800c3e6:	2100      	movs	r1, #0
 800c3e8:	f004 bcce 	b.w	8010d88 <get_serialized_size_sensor_msgs__msg__Imu>
 800c3ec:	4770      	bx	lr
 800c3ee:	bf00      	nop

0800c3f0 <_ImuCalibration_Request__cdr_deserialize>:
 800c3f0:	b570      	push	{r4, r5, r6, lr}
 800c3f2:	460c      	mov	r4, r1
 800c3f4:	b149      	cbz	r1, 800c40a <_ImuCalibration_Request__cdr_deserialize+0x1a>
 800c3f6:	4605      	mov	r5, r0
 800c3f8:	f004 fd7c 	bl	8010ef4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800c3fc:	6843      	ldr	r3, [r0, #4]
 800c3fe:	4621      	mov	r1, r4
 800c400:	4628      	mov	r0, r5
 800c402:	68db      	ldr	r3, [r3, #12]
 800c404:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c408:	4718      	bx	r3
 800c40a:	4608      	mov	r0, r1
 800c40c:	bd70      	pop	{r4, r5, r6, pc}
 800c40e:	bf00      	nop

0800c410 <_ImuCalibration_Request__cdr_serialize>:
 800c410:	b158      	cbz	r0, 800c42a <_ImuCalibration_Request__cdr_serialize+0x1a>
 800c412:	b570      	push	{r4, r5, r6, lr}
 800c414:	460d      	mov	r5, r1
 800c416:	4604      	mov	r4, r0
 800c418:	f004 fd6c 	bl	8010ef4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800c41c:	6843      	ldr	r3, [r0, #4]
 800c41e:	4629      	mov	r1, r5
 800c420:	4620      	mov	r0, r4
 800c422:	689b      	ldr	r3, [r3, #8]
 800c424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c428:	4718      	bx	r3
 800c42a:	4770      	bx	lr

0800c42c <get_serialized_size_imu_interfaces__srv__ImuCalibration_Response>:
 800c42c:	b508      	push	{r3, lr}
 800c42e:	b120      	cbz	r0, 800c43a <get_serialized_size_imu_interfaces__srv__ImuCalibration_Response+0xe>
 800c430:	4608      	mov	r0, r1
 800c432:	2101      	movs	r1, #1
 800c434:	f001 fd1c 	bl	800de70 <ucdr_alignment>
 800c438:	3001      	adds	r0, #1
 800c43a:	bd08      	pop	{r3, pc}

0800c43c <_ImuCalibration_Response__cdr_serialize>:
 800c43c:	460a      	mov	r2, r1
 800c43e:	b118      	cbz	r0, 800c448 <_ImuCalibration_Response__cdr_serialize+0xc>
 800c440:	7801      	ldrb	r1, [r0, #0]
 800c442:	4610      	mov	r0, r2
 800c444:	f000 b89c 	b.w	800c580 <ucdr_serialize_bool>
 800c448:	4770      	bx	lr
 800c44a:	bf00      	nop

0800c44c <get_serialized_size_imu_interfaces__srv__ImuCalibration_Event.part.0>:
 800c44c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c450:	4689      	mov	r9, r1
 800c452:	4607      	mov	r7, r0
 800c454:	f004 fd7a 	bl	8010f4c <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800c458:	eb09 0400 	add.w	r4, r9, r0
 800c45c:	2104      	movs	r1, #4
 800c45e:	4620      	mov	r0, r4
 800c460:	f8d7 802c 	ldr.w	r8, [r7, #44]	@ 0x2c
 800c464:	f001 fd04 	bl	800de70 <ucdr_alignment>
 800c468:	1d06      	adds	r6, r0, #4
 800c46a:	4426      	add	r6, r4
 800c46c:	f1b8 0f00 	cmp.w	r8, #0
 800c470:	d01a      	beq.n	800c4a8 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Event.part.0+0x5c>
 800c472:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c4f8 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Event.part.0+0xac>
 800c476:	2500      	movs	r5, #0
 800c478:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c47a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c47e:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 800c482:	4631      	mov	r1, r6
 800c484:	695b      	ldr	r3, [r3, #20]
 800c486:	eb02 1080 	add.w	r0, r2, r0, lsl #6
 800c48a:	4798      	blx	r3
 800c48c:	2804      	cmp	r0, #4
 800c48e:	4601      	mov	r1, r0
 800c490:	4604      	mov	r4, r0
 800c492:	bf28      	it	cs
 800c494:	2104      	movcs	r1, #4
 800c496:	4630      	mov	r0, r6
 800c498:	f001 fcea 	bl	800de70 <ucdr_alignment>
 800c49c:	3501      	adds	r5, #1
 800c49e:	4434      	add	r4, r6
 800c4a0:	45a8      	cmp	r8, r5
 800c4a2:	eb00 0604 	add.w	r6, r0, r4
 800c4a6:	d1e7      	bne.n	800c478 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Event.part.0+0x2c>
 800c4a8:	2104      	movs	r1, #4
 800c4aa:	4630      	mov	r0, r6
 800c4ac:	f8d7 8038 	ldr.w	r8, [r7, #56]	@ 0x38
 800c4b0:	f001 fcde 	bl	800de70 <ucdr_alignment>
 800c4b4:	1985      	adds	r5, r0, r6
 800c4b6:	3504      	adds	r5, #4
 800c4b8:	f1b8 0f00 	cmp.w	r8, #0
 800c4bc:	d017      	beq.n	800c4ee <get_serialized_size_imu_interfaces__srv__ImuCalibration_Event.part.0+0xa2>
 800c4be:	f8df a03c 	ldr.w	sl, [pc, #60]	@ 800c4fc <get_serialized_size_imu_interfaces__srv__ImuCalibration_Event.part.0+0xb0>
 800c4c2:	2600      	movs	r6, #0
 800c4c4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c4c6:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c4ca:	4629      	mov	r1, r5
 800c4cc:	695b      	ldr	r3, [r3, #20]
 800c4ce:	4430      	add	r0, r6
 800c4d0:	4798      	blx	r3
 800c4d2:	2804      	cmp	r0, #4
 800c4d4:	4601      	mov	r1, r0
 800c4d6:	4604      	mov	r4, r0
 800c4d8:	bf28      	it	cs
 800c4da:	2104      	movcs	r1, #4
 800c4dc:	4628      	mov	r0, r5
 800c4de:	f001 fcc7 	bl	800de70 <ucdr_alignment>
 800c4e2:	3601      	adds	r6, #1
 800c4e4:	442c      	add	r4, r5
 800c4e6:	45b0      	cmp	r8, r6
 800c4e8:	eb00 0504 	add.w	r5, r0, r4
 800c4ec:	d1ea      	bne.n	800c4c4 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Event.part.0+0x78>
 800c4ee:	eba5 0009 	sub.w	r0, r5, r9
 800c4f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4f6:	bf00      	nop
 800c4f8:	20000574 	.word	0x20000574
 800c4fc:	20000540 	.word	0x20000540

0800c500 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Event>:
 800c500:	b108      	cbz	r0, 800c506 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Event+0x6>
 800c502:	f7ff bfa3 	b.w	800c44c <get_serialized_size_imu_interfaces__srv__ImuCalibration_Event.part.0>
 800c506:	4770      	bx	lr

0800c508 <_ImuCalibration_Event__get_serialized_size>:
 800c508:	b110      	cbz	r0, 800c510 <_ImuCalibration_Event__get_serialized_size+0x8>
 800c50a:	2100      	movs	r1, #0
 800c50c:	f7ff bf9e 	b.w	800c44c <get_serialized_size_imu_interfaces__srv__ImuCalibration_Event.part.0>
 800c510:	4770      	bx	lr
 800c512:	bf00      	nop

0800c514 <_ImuCalibration_Response__get_serialized_size>:
 800c514:	b130      	cbz	r0, 800c524 <_ImuCalibration_Response__get_serialized_size+0x10>
 800c516:	b508      	push	{r3, lr}
 800c518:	2101      	movs	r1, #1
 800c51a:	2000      	movs	r0, #0
 800c51c:	f001 fca8 	bl	800de70 <ucdr_alignment>
 800c520:	3001      	adds	r0, #1
 800c522:	bd08      	pop	{r3, pc}
 800c524:	4770      	bx	lr
 800c526:	bf00      	nop

0800c528 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event>:
 800c528:	4800      	ldr	r0, [pc, #0]	@ (800c52c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x4>)
 800c52a:	4770      	bx	lr
 800c52c:	2000050c 	.word	0x2000050c

0800c530 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800c530:	4800      	ldr	r0, [pc, #0]	@ (800c534 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x4>)
 800c532:	4770      	bx	lr
 800c534:	200004d0 	.word	0x200004d0

0800c538 <micro_ros_string_utilities_init>:
 800c538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c53c:	b086      	sub	sp, #24
 800c53e:	460f      	mov	r7, r1
 800c540:	4604      	mov	r4, r0
 800c542:	a801      	add	r0, sp, #4
 800c544:	f002 fe5a 	bl	800f1fc <rcutils_get_default_allocator>
 800c548:	4638      	mov	r0, r7
 800c54a:	f7f3 fec9 	bl	80002e0 <strlen>
 800c54e:	f100 0801 	add.w	r8, r0, #1
 800c552:	9b01      	ldr	r3, [sp, #4]
 800c554:	9905      	ldr	r1, [sp, #20]
 800c556:	4605      	mov	r5, r0
 800c558:	4640      	mov	r0, r8
 800c55a:	4798      	blx	r3
 800c55c:	4642      	mov	r2, r8
 800c55e:	4606      	mov	r6, r0
 800c560:	2100      	movs	r1, #0
 800c562:	f011 f961 	bl	801d828 <memset>
 800c566:	462a      	mov	r2, r5
 800c568:	4639      	mov	r1, r7
 800c56a:	4630      	mov	r0, r6
 800c56c:	f011 fa37 	bl	801d9de <memcpy>
 800c570:	4620      	mov	r0, r4
 800c572:	e9c4 6500 	strd	r6, r5, [r4]
 800c576:	f8c4 8008 	str.w	r8, [r4, #8]
 800c57a:	b006      	add	sp, #24
 800c57c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c580 <ucdr_serialize_bool>:
 800c580:	b538      	push	{r3, r4, r5, lr}
 800c582:	460d      	mov	r5, r1
 800c584:	2101      	movs	r1, #1
 800c586:	4604      	mov	r4, r0
 800c588:	f001 fc26 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800c58c:	b148      	cbz	r0, 800c5a2 <ucdr_serialize_bool+0x22>
 800c58e:	68a3      	ldr	r3, [r4, #8]
 800c590:	701d      	strb	r5, [r3, #0]
 800c592:	68a2      	ldr	r2, [r4, #8]
 800c594:	6923      	ldr	r3, [r4, #16]
 800c596:	2101      	movs	r1, #1
 800c598:	440a      	add	r2, r1
 800c59a:	440b      	add	r3, r1
 800c59c:	60a2      	str	r2, [r4, #8]
 800c59e:	6123      	str	r3, [r4, #16]
 800c5a0:	7561      	strb	r1, [r4, #21]
 800c5a2:	7da0      	ldrb	r0, [r4, #22]
 800c5a4:	f080 0001 	eor.w	r0, r0, #1
 800c5a8:	bd38      	pop	{r3, r4, r5, pc}
 800c5aa:	bf00      	nop

0800c5ac <ucdr_deserialize_bool>:
 800c5ac:	b538      	push	{r3, r4, r5, lr}
 800c5ae:	460d      	mov	r5, r1
 800c5b0:	2101      	movs	r1, #1
 800c5b2:	4604      	mov	r4, r0
 800c5b4:	f001 fc10 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800c5b8:	b160      	cbz	r0, 800c5d4 <ucdr_deserialize_bool+0x28>
 800c5ba:	68a2      	ldr	r2, [r4, #8]
 800c5bc:	6923      	ldr	r3, [r4, #16]
 800c5be:	f812 1b01 	ldrb.w	r1, [r2], #1
 800c5c2:	3900      	subs	r1, #0
 800c5c4:	bf18      	it	ne
 800c5c6:	2101      	movne	r1, #1
 800c5c8:	7029      	strb	r1, [r5, #0]
 800c5ca:	3301      	adds	r3, #1
 800c5cc:	2101      	movs	r1, #1
 800c5ce:	60a2      	str	r2, [r4, #8]
 800c5d0:	6123      	str	r3, [r4, #16]
 800c5d2:	7561      	strb	r1, [r4, #21]
 800c5d4:	7da0      	ldrb	r0, [r4, #22]
 800c5d6:	f080 0001 	eor.w	r0, r0, #1
 800c5da:	bd38      	pop	{r3, r4, r5, pc}

0800c5dc <ucdr_serialize_uint8_t>:
 800c5dc:	b538      	push	{r3, r4, r5, lr}
 800c5de:	460d      	mov	r5, r1
 800c5e0:	2101      	movs	r1, #1
 800c5e2:	4604      	mov	r4, r0
 800c5e4:	f001 fbf8 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800c5e8:	b148      	cbz	r0, 800c5fe <ucdr_serialize_uint8_t+0x22>
 800c5ea:	68a3      	ldr	r3, [r4, #8]
 800c5ec:	701d      	strb	r5, [r3, #0]
 800c5ee:	68a2      	ldr	r2, [r4, #8]
 800c5f0:	6923      	ldr	r3, [r4, #16]
 800c5f2:	2101      	movs	r1, #1
 800c5f4:	440a      	add	r2, r1
 800c5f6:	440b      	add	r3, r1
 800c5f8:	60a2      	str	r2, [r4, #8]
 800c5fa:	6123      	str	r3, [r4, #16]
 800c5fc:	7561      	strb	r1, [r4, #21]
 800c5fe:	7da0      	ldrb	r0, [r4, #22]
 800c600:	f080 0001 	eor.w	r0, r0, #1
 800c604:	bd38      	pop	{r3, r4, r5, pc}
 800c606:	bf00      	nop

0800c608 <ucdr_deserialize_uint8_t>:
 800c608:	b538      	push	{r3, r4, r5, lr}
 800c60a:	460d      	mov	r5, r1
 800c60c:	2101      	movs	r1, #1
 800c60e:	4604      	mov	r4, r0
 800c610:	f001 fbe2 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800c614:	b150      	cbz	r0, 800c62c <ucdr_deserialize_uint8_t+0x24>
 800c616:	68a3      	ldr	r3, [r4, #8]
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	702b      	strb	r3, [r5, #0]
 800c61c:	68a2      	ldr	r2, [r4, #8]
 800c61e:	6923      	ldr	r3, [r4, #16]
 800c620:	2101      	movs	r1, #1
 800c622:	440a      	add	r2, r1
 800c624:	440b      	add	r3, r1
 800c626:	60a2      	str	r2, [r4, #8]
 800c628:	6123      	str	r3, [r4, #16]
 800c62a:	7561      	strb	r1, [r4, #21]
 800c62c:	7da0      	ldrb	r0, [r4, #22]
 800c62e:	f080 0001 	eor.w	r0, r0, #1
 800c632:	bd38      	pop	{r3, r4, r5, pc}

0800c634 <ucdr_serialize_uint16_t>:
 800c634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c638:	b082      	sub	sp, #8
 800c63a:	460b      	mov	r3, r1
 800c63c:	2102      	movs	r1, #2
 800c63e:	4604      	mov	r4, r0
 800c640:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c644:	f001 fc1c 	bl	800de80 <ucdr_buffer_alignment>
 800c648:	4601      	mov	r1, r0
 800c64a:	4620      	mov	r0, r4
 800c64c:	7d67      	ldrb	r7, [r4, #21]
 800c64e:	f001 fc5b 	bl	800df08 <ucdr_advance_buffer>
 800c652:	2102      	movs	r1, #2
 800c654:	4620      	mov	r0, r4
 800c656:	f001 fbb3 	bl	800ddc0 <ucdr_check_buffer_available_for>
 800c65a:	b1c0      	cbz	r0, 800c68e <ucdr_serialize_uint16_t+0x5a>
 800c65c:	7d22      	ldrb	r2, [r4, #20]
 800c65e:	68a3      	ldr	r3, [r4, #8]
 800c660:	2a01      	cmp	r2, #1
 800c662:	d04e      	beq.n	800c702 <ucdr_serialize_uint16_t+0xce>
 800c664:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c668:	701a      	strb	r2, [r3, #0]
 800c66a:	68a3      	ldr	r3, [r4, #8]
 800c66c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c670:	705a      	strb	r2, [r3, #1]
 800c672:	68a2      	ldr	r2, [r4, #8]
 800c674:	6923      	ldr	r3, [r4, #16]
 800c676:	3202      	adds	r2, #2
 800c678:	3302      	adds	r3, #2
 800c67a:	2102      	movs	r1, #2
 800c67c:	60a2      	str	r2, [r4, #8]
 800c67e:	6123      	str	r3, [r4, #16]
 800c680:	7561      	strb	r1, [r4, #21]
 800c682:	7da0      	ldrb	r0, [r4, #22]
 800c684:	f080 0001 	eor.w	r0, r0, #1
 800c688:	b002      	add	sp, #8
 800c68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c68e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c692:	42ab      	cmp	r3, r5
 800c694:	d923      	bls.n	800c6de <ucdr_serialize_uint16_t+0xaa>
 800c696:	1b5e      	subs	r6, r3, r5
 800c698:	60a3      	str	r3, [r4, #8]
 800c69a:	6923      	ldr	r3, [r4, #16]
 800c69c:	f1c6 0802 	rsb	r8, r6, #2
 800c6a0:	4433      	add	r3, r6
 800c6a2:	6123      	str	r3, [r4, #16]
 800c6a4:	4641      	mov	r1, r8
 800c6a6:	4620      	mov	r0, r4
 800c6a8:	f001 fb96 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800c6ac:	b368      	cbz	r0, 800c70a <ucdr_serialize_uint16_t+0xd6>
 800c6ae:	7d23      	ldrb	r3, [r4, #20]
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d03b      	beq.n	800c72c <ucdr_serialize_uint16_t+0xf8>
 800c6b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c6b8:	702b      	strb	r3, [r5, #0]
 800c6ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c6be:	706b      	strb	r3, [r5, #1]
 800c6c0:	6923      	ldr	r3, [r4, #16]
 800c6c2:	68a2      	ldr	r2, [r4, #8]
 800c6c4:	7da0      	ldrb	r0, [r4, #22]
 800c6c6:	3302      	adds	r3, #2
 800c6c8:	4442      	add	r2, r8
 800c6ca:	1b9b      	subs	r3, r3, r6
 800c6cc:	2102      	movs	r1, #2
 800c6ce:	f080 0001 	eor.w	r0, r0, #1
 800c6d2:	60a2      	str	r2, [r4, #8]
 800c6d4:	6123      	str	r3, [r4, #16]
 800c6d6:	7561      	strb	r1, [r4, #21]
 800c6d8:	b002      	add	sp, #8
 800c6da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6de:	2102      	movs	r1, #2
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	f001 fb79 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800c6e6:	2800      	cmp	r0, #0
 800c6e8:	d0cb      	beq.n	800c682 <ucdr_serialize_uint16_t+0x4e>
 800c6ea:	7d23      	ldrb	r3, [r4, #20]
 800c6ec:	68a2      	ldr	r2, [r4, #8]
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d018      	beq.n	800c724 <ucdr_serialize_uint16_t+0xf0>
 800c6f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c6f6:	7013      	strb	r3, [r2, #0]
 800c6f8:	68a3      	ldr	r3, [r4, #8]
 800c6fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c6fe:	705a      	strb	r2, [r3, #1]
 800c700:	e7b7      	b.n	800c672 <ucdr_serialize_uint16_t+0x3e>
 800c702:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c706:	801a      	strh	r2, [r3, #0]
 800c708:	e7b3      	b.n	800c672 <ucdr_serialize_uint16_t+0x3e>
 800c70a:	68a2      	ldr	r2, [r4, #8]
 800c70c:	6923      	ldr	r3, [r4, #16]
 800c70e:	7da0      	ldrb	r0, [r4, #22]
 800c710:	7567      	strb	r7, [r4, #21]
 800c712:	1b92      	subs	r2, r2, r6
 800c714:	1b9b      	subs	r3, r3, r6
 800c716:	f080 0001 	eor.w	r0, r0, #1
 800c71a:	60a2      	str	r2, [r4, #8]
 800c71c:	6123      	str	r3, [r4, #16]
 800c71e:	b002      	add	sp, #8
 800c720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c724:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800c728:	8013      	strh	r3, [r2, #0]
 800c72a:	e7a2      	b.n	800c672 <ucdr_serialize_uint16_t+0x3e>
 800c72c:	4628      	mov	r0, r5
 800c72e:	f10d 0506 	add.w	r5, sp, #6
 800c732:	4632      	mov	r2, r6
 800c734:	4629      	mov	r1, r5
 800c736:	f011 f952 	bl	801d9de <memcpy>
 800c73a:	68a0      	ldr	r0, [r4, #8]
 800c73c:	4642      	mov	r2, r8
 800c73e:	19a9      	adds	r1, r5, r6
 800c740:	f011 f94d 	bl	801d9de <memcpy>
 800c744:	e7bc      	b.n	800c6c0 <ucdr_serialize_uint16_t+0x8c>
 800c746:	bf00      	nop

0800c748 <ucdr_serialize_endian_uint16_t>:
 800c748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c74c:	b083      	sub	sp, #12
 800c74e:	460d      	mov	r5, r1
 800c750:	2102      	movs	r1, #2
 800c752:	4604      	mov	r4, r0
 800c754:	f8ad 2006 	strh.w	r2, [sp, #6]
 800c758:	f001 fb92 	bl	800de80 <ucdr_buffer_alignment>
 800c75c:	4601      	mov	r1, r0
 800c75e:	4620      	mov	r0, r4
 800c760:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c764:	f001 fbd0 	bl	800df08 <ucdr_advance_buffer>
 800c768:	2102      	movs	r1, #2
 800c76a:	4620      	mov	r0, r4
 800c76c:	f001 fb28 	bl	800ddc0 <ucdr_check_buffer_available_for>
 800c770:	bb60      	cbnz	r0, 800c7cc <ucdr_serialize_endian_uint16_t+0x84>
 800c772:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c776:	42be      	cmp	r6, r7
 800c778:	d923      	bls.n	800c7c2 <ucdr_serialize_endian_uint16_t+0x7a>
 800c77a:	6923      	ldr	r3, [r4, #16]
 800c77c:	60a6      	str	r6, [r4, #8]
 800c77e:	1bf6      	subs	r6, r6, r7
 800c780:	4433      	add	r3, r6
 800c782:	f1c6 0902 	rsb	r9, r6, #2
 800c786:	6123      	str	r3, [r4, #16]
 800c788:	4649      	mov	r1, r9
 800c78a:	4620      	mov	r0, r4
 800c78c:	f001 fb24 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800c790:	2800      	cmp	r0, #0
 800c792:	d037      	beq.n	800c804 <ucdr_serialize_endian_uint16_t+0xbc>
 800c794:	2d01      	cmp	r5, #1
 800c796:	d043      	beq.n	800c820 <ucdr_serialize_endian_uint16_t+0xd8>
 800c798:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c79c:	703b      	strb	r3, [r7, #0]
 800c79e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c7a2:	707b      	strb	r3, [r7, #1]
 800c7a4:	6923      	ldr	r3, [r4, #16]
 800c7a6:	68a2      	ldr	r2, [r4, #8]
 800c7a8:	7da0      	ldrb	r0, [r4, #22]
 800c7aa:	3302      	adds	r3, #2
 800c7ac:	444a      	add	r2, r9
 800c7ae:	1b9b      	subs	r3, r3, r6
 800c7b0:	2102      	movs	r1, #2
 800c7b2:	f080 0001 	eor.w	r0, r0, #1
 800c7b6:	60a2      	str	r2, [r4, #8]
 800c7b8:	6123      	str	r3, [r4, #16]
 800c7ba:	7561      	strb	r1, [r4, #21]
 800c7bc:	b003      	add	sp, #12
 800c7be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7c2:	2102      	movs	r1, #2
 800c7c4:	4620      	mov	r0, r4
 800c7c6:	f001 fb07 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800c7ca:	b188      	cbz	r0, 800c7f0 <ucdr_serialize_endian_uint16_t+0xa8>
 800c7cc:	2d01      	cmp	r5, #1
 800c7ce:	68a3      	ldr	r3, [r4, #8]
 800c7d0:	d014      	beq.n	800c7fc <ucdr_serialize_endian_uint16_t+0xb4>
 800c7d2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c7d6:	701a      	strb	r2, [r3, #0]
 800c7d8:	68a3      	ldr	r3, [r4, #8]
 800c7da:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c7de:	705a      	strb	r2, [r3, #1]
 800c7e0:	68a2      	ldr	r2, [r4, #8]
 800c7e2:	6923      	ldr	r3, [r4, #16]
 800c7e4:	3202      	adds	r2, #2
 800c7e6:	3302      	adds	r3, #2
 800c7e8:	2102      	movs	r1, #2
 800c7ea:	60a2      	str	r2, [r4, #8]
 800c7ec:	6123      	str	r3, [r4, #16]
 800c7ee:	7561      	strb	r1, [r4, #21]
 800c7f0:	7da0      	ldrb	r0, [r4, #22]
 800c7f2:	f080 0001 	eor.w	r0, r0, #1
 800c7f6:	b003      	add	sp, #12
 800c7f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7fc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c800:	801a      	strh	r2, [r3, #0]
 800c802:	e7ed      	b.n	800c7e0 <ucdr_serialize_endian_uint16_t+0x98>
 800c804:	68a2      	ldr	r2, [r4, #8]
 800c806:	6923      	ldr	r3, [r4, #16]
 800c808:	7da0      	ldrb	r0, [r4, #22]
 800c80a:	f884 8015 	strb.w	r8, [r4, #21]
 800c80e:	1b92      	subs	r2, r2, r6
 800c810:	1b9b      	subs	r3, r3, r6
 800c812:	f080 0001 	eor.w	r0, r0, #1
 800c816:	60a2      	str	r2, [r4, #8]
 800c818:	6123      	str	r3, [r4, #16]
 800c81a:	b003      	add	sp, #12
 800c81c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c820:	f10d 0506 	add.w	r5, sp, #6
 800c824:	4632      	mov	r2, r6
 800c826:	4629      	mov	r1, r5
 800c828:	4638      	mov	r0, r7
 800c82a:	f011 f8d8 	bl	801d9de <memcpy>
 800c82e:	68a0      	ldr	r0, [r4, #8]
 800c830:	464a      	mov	r2, r9
 800c832:	19a9      	adds	r1, r5, r6
 800c834:	f011 f8d3 	bl	801d9de <memcpy>
 800c838:	e7b4      	b.n	800c7a4 <ucdr_serialize_endian_uint16_t+0x5c>
 800c83a:	bf00      	nop

0800c83c <ucdr_deserialize_uint16_t>:
 800c83c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c840:	460d      	mov	r5, r1
 800c842:	2102      	movs	r1, #2
 800c844:	4604      	mov	r4, r0
 800c846:	f001 fb1b 	bl	800de80 <ucdr_buffer_alignment>
 800c84a:	4601      	mov	r1, r0
 800c84c:	4620      	mov	r0, r4
 800c84e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c852:	f001 fb59 	bl	800df08 <ucdr_advance_buffer>
 800c856:	2102      	movs	r1, #2
 800c858:	4620      	mov	r0, r4
 800c85a:	f001 fab1 	bl	800ddc0 <ucdr_check_buffer_available_for>
 800c85e:	b1a8      	cbz	r0, 800c88c <ucdr_deserialize_uint16_t+0x50>
 800c860:	7d22      	ldrb	r2, [r4, #20]
 800c862:	68a3      	ldr	r3, [r4, #8]
 800c864:	2a01      	cmp	r2, #1
 800c866:	d046      	beq.n	800c8f6 <ucdr_deserialize_uint16_t+0xba>
 800c868:	785b      	ldrb	r3, [r3, #1]
 800c86a:	702b      	strb	r3, [r5, #0]
 800c86c:	68a3      	ldr	r3, [r4, #8]
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	706b      	strb	r3, [r5, #1]
 800c872:	68a2      	ldr	r2, [r4, #8]
 800c874:	6923      	ldr	r3, [r4, #16]
 800c876:	3202      	adds	r2, #2
 800c878:	3302      	adds	r3, #2
 800c87a:	2102      	movs	r1, #2
 800c87c:	60a2      	str	r2, [r4, #8]
 800c87e:	6123      	str	r3, [r4, #16]
 800c880:	7561      	strb	r1, [r4, #21]
 800c882:	7da0      	ldrb	r0, [r4, #22]
 800c884:	f080 0001 	eor.w	r0, r0, #1
 800c888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c88c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c890:	42be      	cmp	r6, r7
 800c892:	d920      	bls.n	800c8d6 <ucdr_deserialize_uint16_t+0x9a>
 800c894:	6923      	ldr	r3, [r4, #16]
 800c896:	60a6      	str	r6, [r4, #8]
 800c898:	1bf6      	subs	r6, r6, r7
 800c89a:	4433      	add	r3, r6
 800c89c:	f1c6 0902 	rsb	r9, r6, #2
 800c8a0:	6123      	str	r3, [r4, #16]
 800c8a2:	4649      	mov	r1, r9
 800c8a4:	4620      	mov	r0, r4
 800c8a6:	f001 fa97 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800c8aa:	b338      	cbz	r0, 800c8fc <ucdr_deserialize_uint16_t+0xc0>
 800c8ac:	7d23      	ldrb	r3, [r4, #20]
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	d034      	beq.n	800c91c <ucdr_deserialize_uint16_t+0xe0>
 800c8b2:	787b      	ldrb	r3, [r7, #1]
 800c8b4:	702b      	strb	r3, [r5, #0]
 800c8b6:	783b      	ldrb	r3, [r7, #0]
 800c8b8:	706b      	strb	r3, [r5, #1]
 800c8ba:	6923      	ldr	r3, [r4, #16]
 800c8bc:	68a2      	ldr	r2, [r4, #8]
 800c8be:	7da0      	ldrb	r0, [r4, #22]
 800c8c0:	2102      	movs	r1, #2
 800c8c2:	3302      	adds	r3, #2
 800c8c4:	444a      	add	r2, r9
 800c8c6:	1b9b      	subs	r3, r3, r6
 800c8c8:	7561      	strb	r1, [r4, #21]
 800c8ca:	60a2      	str	r2, [r4, #8]
 800c8cc:	6123      	str	r3, [r4, #16]
 800c8ce:	f080 0001 	eor.w	r0, r0, #1
 800c8d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8d6:	2102      	movs	r1, #2
 800c8d8:	4620      	mov	r0, r4
 800c8da:	f001 fa7d 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800c8de:	2800      	cmp	r0, #0
 800c8e0:	d0cf      	beq.n	800c882 <ucdr_deserialize_uint16_t+0x46>
 800c8e2:	7d23      	ldrb	r3, [r4, #20]
 800c8e4:	68a2      	ldr	r2, [r4, #8]
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	d015      	beq.n	800c916 <ucdr_deserialize_uint16_t+0xda>
 800c8ea:	7853      	ldrb	r3, [r2, #1]
 800c8ec:	702b      	strb	r3, [r5, #0]
 800c8ee:	68a3      	ldr	r3, [r4, #8]
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	706b      	strb	r3, [r5, #1]
 800c8f4:	e7bd      	b.n	800c872 <ucdr_deserialize_uint16_t+0x36>
 800c8f6:	881b      	ldrh	r3, [r3, #0]
 800c8f8:	802b      	strh	r3, [r5, #0]
 800c8fa:	e7ba      	b.n	800c872 <ucdr_deserialize_uint16_t+0x36>
 800c8fc:	68a2      	ldr	r2, [r4, #8]
 800c8fe:	6923      	ldr	r3, [r4, #16]
 800c900:	7da0      	ldrb	r0, [r4, #22]
 800c902:	f884 8015 	strb.w	r8, [r4, #21]
 800c906:	1b92      	subs	r2, r2, r6
 800c908:	1b9b      	subs	r3, r3, r6
 800c90a:	60a2      	str	r2, [r4, #8]
 800c90c:	6123      	str	r3, [r4, #16]
 800c90e:	f080 0001 	eor.w	r0, r0, #1
 800c912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c916:	8813      	ldrh	r3, [r2, #0]
 800c918:	802b      	strh	r3, [r5, #0]
 800c91a:	e7aa      	b.n	800c872 <ucdr_deserialize_uint16_t+0x36>
 800c91c:	4639      	mov	r1, r7
 800c91e:	4632      	mov	r2, r6
 800c920:	4628      	mov	r0, r5
 800c922:	f011 f85c 	bl	801d9de <memcpy>
 800c926:	68a1      	ldr	r1, [r4, #8]
 800c928:	464a      	mov	r2, r9
 800c92a:	19a8      	adds	r0, r5, r6
 800c92c:	f011 f857 	bl	801d9de <memcpy>
 800c930:	e7c3      	b.n	800c8ba <ucdr_deserialize_uint16_t+0x7e>
 800c932:	bf00      	nop

0800c934 <ucdr_deserialize_endian_uint16_t>:
 800c934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c938:	460e      	mov	r6, r1
 800c93a:	2102      	movs	r1, #2
 800c93c:	4604      	mov	r4, r0
 800c93e:	4615      	mov	r5, r2
 800c940:	f001 fa9e 	bl	800de80 <ucdr_buffer_alignment>
 800c944:	4601      	mov	r1, r0
 800c946:	4620      	mov	r0, r4
 800c948:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c94c:	f001 fadc 	bl	800df08 <ucdr_advance_buffer>
 800c950:	2102      	movs	r1, #2
 800c952:	4620      	mov	r0, r4
 800c954:	f001 fa34 	bl	800ddc0 <ucdr_check_buffer_available_for>
 800c958:	bb60      	cbnz	r0, 800c9b4 <ucdr_deserialize_endian_uint16_t+0x80>
 800c95a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800c95e:	4547      	cmp	r7, r8
 800c960:	d923      	bls.n	800c9aa <ucdr_deserialize_endian_uint16_t+0x76>
 800c962:	6923      	ldr	r3, [r4, #16]
 800c964:	60a7      	str	r7, [r4, #8]
 800c966:	eba7 0708 	sub.w	r7, r7, r8
 800c96a:	443b      	add	r3, r7
 800c96c:	f1c7 0a02 	rsb	sl, r7, #2
 800c970:	6123      	str	r3, [r4, #16]
 800c972:	4651      	mov	r1, sl
 800c974:	4620      	mov	r0, r4
 800c976:	f001 fa2f 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800c97a:	2800      	cmp	r0, #0
 800c97c:	d032      	beq.n	800c9e4 <ucdr_deserialize_endian_uint16_t+0xb0>
 800c97e:	2e01      	cmp	r6, #1
 800c980:	d03d      	beq.n	800c9fe <ucdr_deserialize_endian_uint16_t+0xca>
 800c982:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c986:	702b      	strb	r3, [r5, #0]
 800c988:	f898 3000 	ldrb.w	r3, [r8]
 800c98c:	706b      	strb	r3, [r5, #1]
 800c98e:	6923      	ldr	r3, [r4, #16]
 800c990:	68a2      	ldr	r2, [r4, #8]
 800c992:	7da0      	ldrb	r0, [r4, #22]
 800c994:	2102      	movs	r1, #2
 800c996:	3302      	adds	r3, #2
 800c998:	4452      	add	r2, sl
 800c99a:	1bdb      	subs	r3, r3, r7
 800c99c:	7561      	strb	r1, [r4, #21]
 800c99e:	60a2      	str	r2, [r4, #8]
 800c9a0:	6123      	str	r3, [r4, #16]
 800c9a2:	f080 0001 	eor.w	r0, r0, #1
 800c9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9aa:	2102      	movs	r1, #2
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	f001 fa13 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800c9b2:	b178      	cbz	r0, 800c9d4 <ucdr_deserialize_endian_uint16_t+0xa0>
 800c9b4:	2e01      	cmp	r6, #1
 800c9b6:	68a3      	ldr	r3, [r4, #8]
 800c9b8:	d011      	beq.n	800c9de <ucdr_deserialize_endian_uint16_t+0xaa>
 800c9ba:	785b      	ldrb	r3, [r3, #1]
 800c9bc:	702b      	strb	r3, [r5, #0]
 800c9be:	68a3      	ldr	r3, [r4, #8]
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	706b      	strb	r3, [r5, #1]
 800c9c4:	68a2      	ldr	r2, [r4, #8]
 800c9c6:	6923      	ldr	r3, [r4, #16]
 800c9c8:	3202      	adds	r2, #2
 800c9ca:	3302      	adds	r3, #2
 800c9cc:	2102      	movs	r1, #2
 800c9ce:	60a2      	str	r2, [r4, #8]
 800c9d0:	6123      	str	r3, [r4, #16]
 800c9d2:	7561      	strb	r1, [r4, #21]
 800c9d4:	7da0      	ldrb	r0, [r4, #22]
 800c9d6:	f080 0001 	eor.w	r0, r0, #1
 800c9da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9de:	881b      	ldrh	r3, [r3, #0]
 800c9e0:	802b      	strh	r3, [r5, #0]
 800c9e2:	e7ef      	b.n	800c9c4 <ucdr_deserialize_endian_uint16_t+0x90>
 800c9e4:	68a2      	ldr	r2, [r4, #8]
 800c9e6:	6923      	ldr	r3, [r4, #16]
 800c9e8:	7da0      	ldrb	r0, [r4, #22]
 800c9ea:	f884 9015 	strb.w	r9, [r4, #21]
 800c9ee:	1bd2      	subs	r2, r2, r7
 800c9f0:	1bdb      	subs	r3, r3, r7
 800c9f2:	60a2      	str	r2, [r4, #8]
 800c9f4:	6123      	str	r3, [r4, #16]
 800c9f6:	f080 0001 	eor.w	r0, r0, #1
 800c9fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9fe:	4641      	mov	r1, r8
 800ca00:	463a      	mov	r2, r7
 800ca02:	4628      	mov	r0, r5
 800ca04:	f010 ffeb 	bl	801d9de <memcpy>
 800ca08:	68a1      	ldr	r1, [r4, #8]
 800ca0a:	4652      	mov	r2, sl
 800ca0c:	19e8      	adds	r0, r5, r7
 800ca0e:	f010 ffe6 	bl	801d9de <memcpy>
 800ca12:	e7bc      	b.n	800c98e <ucdr_deserialize_endian_uint16_t+0x5a>

0800ca14 <ucdr_serialize_uint32_t>:
 800ca14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca18:	b082      	sub	sp, #8
 800ca1a:	4604      	mov	r4, r0
 800ca1c:	9101      	str	r1, [sp, #4]
 800ca1e:	2104      	movs	r1, #4
 800ca20:	f001 fa2e 	bl	800de80 <ucdr_buffer_alignment>
 800ca24:	4601      	mov	r1, r0
 800ca26:	4620      	mov	r0, r4
 800ca28:	7d67      	ldrb	r7, [r4, #21]
 800ca2a:	f001 fa6d 	bl	800df08 <ucdr_advance_buffer>
 800ca2e:	2104      	movs	r1, #4
 800ca30:	4620      	mov	r0, r4
 800ca32:	f001 f9c5 	bl	800ddc0 <ucdr_check_buffer_available_for>
 800ca36:	b300      	cbz	r0, 800ca7a <ucdr_serialize_uint32_t+0x66>
 800ca38:	7d22      	ldrb	r2, [r4, #20]
 800ca3a:	68a3      	ldr	r3, [r4, #8]
 800ca3c:	2a01      	cmp	r2, #1
 800ca3e:	d05d      	beq.n	800cafc <ucdr_serialize_uint32_t+0xe8>
 800ca40:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ca44:	701a      	strb	r2, [r3, #0]
 800ca46:	68a3      	ldr	r3, [r4, #8]
 800ca48:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ca4c:	705a      	strb	r2, [r3, #1]
 800ca4e:	68a3      	ldr	r3, [r4, #8]
 800ca50:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ca54:	709a      	strb	r2, [r3, #2]
 800ca56:	68a3      	ldr	r3, [r4, #8]
 800ca58:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ca5c:	70da      	strb	r2, [r3, #3]
 800ca5e:	68a2      	ldr	r2, [r4, #8]
 800ca60:	6923      	ldr	r3, [r4, #16]
 800ca62:	3204      	adds	r2, #4
 800ca64:	3304      	adds	r3, #4
 800ca66:	2104      	movs	r1, #4
 800ca68:	60a2      	str	r2, [r4, #8]
 800ca6a:	6123      	str	r3, [r4, #16]
 800ca6c:	7561      	strb	r1, [r4, #21]
 800ca6e:	7da0      	ldrb	r0, [r4, #22]
 800ca70:	f080 0001 	eor.w	r0, r0, #1
 800ca74:	b002      	add	sp, #8
 800ca76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca7a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ca7e:	42ab      	cmp	r3, r5
 800ca80:	d92e      	bls.n	800cae0 <ucdr_serialize_uint32_t+0xcc>
 800ca82:	1b5e      	subs	r6, r3, r5
 800ca84:	60a3      	str	r3, [r4, #8]
 800ca86:	6923      	ldr	r3, [r4, #16]
 800ca88:	f1c6 0804 	rsb	r8, r6, #4
 800ca8c:	4433      	add	r3, r6
 800ca8e:	6123      	str	r3, [r4, #16]
 800ca90:	4641      	mov	r1, r8
 800ca92:	4620      	mov	r0, r4
 800ca94:	f001 f9a0 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800ca98:	b398      	cbz	r0, 800cb02 <ucdr_serialize_uint32_t+0xee>
 800ca9a:	7d23      	ldrb	r3, [r4, #20]
 800ca9c:	2b01      	cmp	r3, #1
 800ca9e:	d046      	beq.n	800cb2e <ucdr_serialize_uint32_t+0x11a>
 800caa0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800caa4:	702b      	strb	r3, [r5, #0]
 800caa6:	2e01      	cmp	r6, #1
 800caa8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800caac:	706b      	strb	r3, [r5, #1]
 800caae:	d035      	beq.n	800cb1c <ucdr_serialize_uint32_t+0x108>
 800cab0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cab4:	70ab      	strb	r3, [r5, #2]
 800cab6:	2e02      	cmp	r6, #2
 800cab8:	d034      	beq.n	800cb24 <ucdr_serialize_uint32_t+0x110>
 800caba:	3503      	adds	r5, #3
 800cabc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cac0:	702b      	strb	r3, [r5, #0]
 800cac2:	6923      	ldr	r3, [r4, #16]
 800cac4:	68a2      	ldr	r2, [r4, #8]
 800cac6:	7da0      	ldrb	r0, [r4, #22]
 800cac8:	3304      	adds	r3, #4
 800caca:	4442      	add	r2, r8
 800cacc:	1b9b      	subs	r3, r3, r6
 800cace:	2104      	movs	r1, #4
 800cad0:	f080 0001 	eor.w	r0, r0, #1
 800cad4:	60a2      	str	r2, [r4, #8]
 800cad6:	6123      	str	r3, [r4, #16]
 800cad8:	7561      	strb	r1, [r4, #21]
 800cada:	b002      	add	sp, #8
 800cadc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cae0:	2104      	movs	r1, #4
 800cae2:	4620      	mov	r0, r4
 800cae4:	f001 f978 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800cae8:	2800      	cmp	r0, #0
 800caea:	d0c0      	beq.n	800ca6e <ucdr_serialize_uint32_t+0x5a>
 800caec:	7d23      	ldrb	r3, [r4, #20]
 800caee:	68a2      	ldr	r2, [r4, #8]
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d019      	beq.n	800cb28 <ucdr_serialize_uint32_t+0x114>
 800caf4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800caf8:	7013      	strb	r3, [r2, #0]
 800cafa:	e7a4      	b.n	800ca46 <ucdr_serialize_uint32_t+0x32>
 800cafc:	9a01      	ldr	r2, [sp, #4]
 800cafe:	601a      	str	r2, [r3, #0]
 800cb00:	e7ad      	b.n	800ca5e <ucdr_serialize_uint32_t+0x4a>
 800cb02:	68a2      	ldr	r2, [r4, #8]
 800cb04:	6923      	ldr	r3, [r4, #16]
 800cb06:	7da0      	ldrb	r0, [r4, #22]
 800cb08:	7567      	strb	r7, [r4, #21]
 800cb0a:	1b92      	subs	r2, r2, r6
 800cb0c:	1b9b      	subs	r3, r3, r6
 800cb0e:	f080 0001 	eor.w	r0, r0, #1
 800cb12:	60a2      	str	r2, [r4, #8]
 800cb14:	6123      	str	r3, [r4, #16]
 800cb16:	b002      	add	sp, #8
 800cb18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb1c:	68a3      	ldr	r3, [r4, #8]
 800cb1e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cb22:	701a      	strb	r2, [r3, #0]
 800cb24:	68a5      	ldr	r5, [r4, #8]
 800cb26:	e7c9      	b.n	800cabc <ucdr_serialize_uint32_t+0xa8>
 800cb28:	9b01      	ldr	r3, [sp, #4]
 800cb2a:	6013      	str	r3, [r2, #0]
 800cb2c:	e797      	b.n	800ca5e <ucdr_serialize_uint32_t+0x4a>
 800cb2e:	4628      	mov	r0, r5
 800cb30:	ad01      	add	r5, sp, #4
 800cb32:	4632      	mov	r2, r6
 800cb34:	4629      	mov	r1, r5
 800cb36:	f010 ff52 	bl	801d9de <memcpy>
 800cb3a:	68a0      	ldr	r0, [r4, #8]
 800cb3c:	4642      	mov	r2, r8
 800cb3e:	19a9      	adds	r1, r5, r6
 800cb40:	f010 ff4d 	bl	801d9de <memcpy>
 800cb44:	e7bd      	b.n	800cac2 <ucdr_serialize_uint32_t+0xae>
 800cb46:	bf00      	nop

0800cb48 <ucdr_serialize_endian_uint32_t>:
 800cb48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb4c:	b083      	sub	sp, #12
 800cb4e:	460d      	mov	r5, r1
 800cb50:	2104      	movs	r1, #4
 800cb52:	4604      	mov	r4, r0
 800cb54:	9201      	str	r2, [sp, #4]
 800cb56:	f001 f993 	bl	800de80 <ucdr_buffer_alignment>
 800cb5a:	4601      	mov	r1, r0
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cb62:	f001 f9d1 	bl	800df08 <ucdr_advance_buffer>
 800cb66:	2104      	movs	r1, #4
 800cb68:	4620      	mov	r0, r4
 800cb6a:	f001 f929 	bl	800ddc0 <ucdr_check_buffer_available_for>
 800cb6e:	2800      	cmp	r0, #0
 800cb70:	d137      	bne.n	800cbe2 <ucdr_serialize_endian_uint32_t+0x9a>
 800cb72:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800cb76:	42b7      	cmp	r7, r6
 800cb78:	d92e      	bls.n	800cbd8 <ucdr_serialize_endian_uint32_t+0x90>
 800cb7a:	6923      	ldr	r3, [r4, #16]
 800cb7c:	60a7      	str	r7, [r4, #8]
 800cb7e:	1bbf      	subs	r7, r7, r6
 800cb80:	443b      	add	r3, r7
 800cb82:	f1c7 0904 	rsb	r9, r7, #4
 800cb86:	6123      	str	r3, [r4, #16]
 800cb88:	4649      	mov	r1, r9
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	f001 f924 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800cb90:	2800      	cmp	r0, #0
 800cb92:	d049      	beq.n	800cc28 <ucdr_serialize_endian_uint32_t+0xe0>
 800cb94:	2d01      	cmp	r5, #1
 800cb96:	d05b      	beq.n	800cc50 <ucdr_serialize_endian_uint32_t+0x108>
 800cb98:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cb9c:	7033      	strb	r3, [r6, #0]
 800cb9e:	2f01      	cmp	r7, #1
 800cba0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cba4:	7073      	strb	r3, [r6, #1]
 800cba6:	d04d      	beq.n	800cc44 <ucdr_serialize_endian_uint32_t+0xfc>
 800cba8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cbac:	70b3      	strb	r3, [r6, #2]
 800cbae:	2f02      	cmp	r7, #2
 800cbb0:	d04c      	beq.n	800cc4c <ucdr_serialize_endian_uint32_t+0x104>
 800cbb2:	3603      	adds	r6, #3
 800cbb4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cbb8:	7033      	strb	r3, [r6, #0]
 800cbba:	6923      	ldr	r3, [r4, #16]
 800cbbc:	68a2      	ldr	r2, [r4, #8]
 800cbbe:	7da0      	ldrb	r0, [r4, #22]
 800cbc0:	3304      	adds	r3, #4
 800cbc2:	444a      	add	r2, r9
 800cbc4:	1bdb      	subs	r3, r3, r7
 800cbc6:	2104      	movs	r1, #4
 800cbc8:	f080 0001 	eor.w	r0, r0, #1
 800cbcc:	60a2      	str	r2, [r4, #8]
 800cbce:	6123      	str	r3, [r4, #16]
 800cbd0:	7561      	strb	r1, [r4, #21]
 800cbd2:	b003      	add	sp, #12
 800cbd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbd8:	2104      	movs	r1, #4
 800cbda:	4620      	mov	r0, r4
 800cbdc:	f001 f8fc 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800cbe0:	b1c8      	cbz	r0, 800cc16 <ucdr_serialize_endian_uint32_t+0xce>
 800cbe2:	2d01      	cmp	r5, #1
 800cbe4:	68a3      	ldr	r3, [r4, #8]
 800cbe6:	d01c      	beq.n	800cc22 <ucdr_serialize_endian_uint32_t+0xda>
 800cbe8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cbec:	701a      	strb	r2, [r3, #0]
 800cbee:	68a3      	ldr	r3, [r4, #8]
 800cbf0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cbf4:	705a      	strb	r2, [r3, #1]
 800cbf6:	68a3      	ldr	r3, [r4, #8]
 800cbf8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cbfc:	709a      	strb	r2, [r3, #2]
 800cbfe:	68a3      	ldr	r3, [r4, #8]
 800cc00:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cc04:	70da      	strb	r2, [r3, #3]
 800cc06:	68a2      	ldr	r2, [r4, #8]
 800cc08:	6923      	ldr	r3, [r4, #16]
 800cc0a:	3204      	adds	r2, #4
 800cc0c:	3304      	adds	r3, #4
 800cc0e:	2104      	movs	r1, #4
 800cc10:	60a2      	str	r2, [r4, #8]
 800cc12:	6123      	str	r3, [r4, #16]
 800cc14:	7561      	strb	r1, [r4, #21]
 800cc16:	7da0      	ldrb	r0, [r4, #22]
 800cc18:	f080 0001 	eor.w	r0, r0, #1
 800cc1c:	b003      	add	sp, #12
 800cc1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc22:	9a01      	ldr	r2, [sp, #4]
 800cc24:	601a      	str	r2, [r3, #0]
 800cc26:	e7ee      	b.n	800cc06 <ucdr_serialize_endian_uint32_t+0xbe>
 800cc28:	68a2      	ldr	r2, [r4, #8]
 800cc2a:	6923      	ldr	r3, [r4, #16]
 800cc2c:	7da0      	ldrb	r0, [r4, #22]
 800cc2e:	f884 8015 	strb.w	r8, [r4, #21]
 800cc32:	1bd2      	subs	r2, r2, r7
 800cc34:	1bdb      	subs	r3, r3, r7
 800cc36:	f080 0001 	eor.w	r0, r0, #1
 800cc3a:	60a2      	str	r2, [r4, #8]
 800cc3c:	6123      	str	r3, [r4, #16]
 800cc3e:	b003      	add	sp, #12
 800cc40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc44:	68a3      	ldr	r3, [r4, #8]
 800cc46:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cc4a:	701a      	strb	r2, [r3, #0]
 800cc4c:	68a6      	ldr	r6, [r4, #8]
 800cc4e:	e7b1      	b.n	800cbb4 <ucdr_serialize_endian_uint32_t+0x6c>
 800cc50:	ad01      	add	r5, sp, #4
 800cc52:	463a      	mov	r2, r7
 800cc54:	4629      	mov	r1, r5
 800cc56:	4630      	mov	r0, r6
 800cc58:	f010 fec1 	bl	801d9de <memcpy>
 800cc5c:	68a0      	ldr	r0, [r4, #8]
 800cc5e:	464a      	mov	r2, r9
 800cc60:	19e9      	adds	r1, r5, r7
 800cc62:	f010 febc 	bl	801d9de <memcpy>
 800cc66:	e7a8      	b.n	800cbba <ucdr_serialize_endian_uint32_t+0x72>

0800cc68 <ucdr_deserialize_uint32_t>:
 800cc68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc6c:	460d      	mov	r5, r1
 800cc6e:	2104      	movs	r1, #4
 800cc70:	4604      	mov	r4, r0
 800cc72:	f001 f905 	bl	800de80 <ucdr_buffer_alignment>
 800cc76:	4601      	mov	r1, r0
 800cc78:	4620      	mov	r0, r4
 800cc7a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cc7e:	f001 f943 	bl	800df08 <ucdr_advance_buffer>
 800cc82:	2104      	movs	r1, #4
 800cc84:	4620      	mov	r0, r4
 800cc86:	f001 f89b 	bl	800ddc0 <ucdr_check_buffer_available_for>
 800cc8a:	b1d8      	cbz	r0, 800ccc4 <ucdr_deserialize_uint32_t+0x5c>
 800cc8c:	7d22      	ldrb	r2, [r4, #20]
 800cc8e:	68a3      	ldr	r3, [r4, #8]
 800cc90:	2a01      	cmp	r2, #1
 800cc92:	d052      	beq.n	800cd3a <ucdr_deserialize_uint32_t+0xd2>
 800cc94:	78db      	ldrb	r3, [r3, #3]
 800cc96:	702b      	strb	r3, [r5, #0]
 800cc98:	68a3      	ldr	r3, [r4, #8]
 800cc9a:	789b      	ldrb	r3, [r3, #2]
 800cc9c:	706b      	strb	r3, [r5, #1]
 800cc9e:	68a3      	ldr	r3, [r4, #8]
 800cca0:	785b      	ldrb	r3, [r3, #1]
 800cca2:	70ab      	strb	r3, [r5, #2]
 800cca4:	68a3      	ldr	r3, [r4, #8]
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	70eb      	strb	r3, [r5, #3]
 800ccaa:	68a2      	ldr	r2, [r4, #8]
 800ccac:	6923      	ldr	r3, [r4, #16]
 800ccae:	3204      	adds	r2, #4
 800ccb0:	3304      	adds	r3, #4
 800ccb2:	2104      	movs	r1, #4
 800ccb4:	60a2      	str	r2, [r4, #8]
 800ccb6:	6123      	str	r3, [r4, #16]
 800ccb8:	7561      	strb	r1, [r4, #21]
 800ccba:	7da0      	ldrb	r0, [r4, #22]
 800ccbc:	f080 0001 	eor.w	r0, r0, #1
 800ccc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccc4:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ccc8:	42b7      	cmp	r7, r6
 800ccca:	d92a      	bls.n	800cd22 <ucdr_deserialize_uint32_t+0xba>
 800cccc:	6923      	ldr	r3, [r4, #16]
 800ccce:	60a7      	str	r7, [r4, #8]
 800ccd0:	1bbf      	subs	r7, r7, r6
 800ccd2:	443b      	add	r3, r7
 800ccd4:	f1c7 0904 	rsb	r9, r7, #4
 800ccd8:	6123      	str	r3, [r4, #16]
 800ccda:	4649      	mov	r1, r9
 800ccdc:	4620      	mov	r0, r4
 800ccde:	f001 f87b 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800cce2:	b368      	cbz	r0, 800cd40 <ucdr_deserialize_uint32_t+0xd8>
 800cce4:	7d23      	ldrb	r3, [r4, #20]
 800cce6:	2b01      	cmp	r3, #1
 800cce8:	d040      	beq.n	800cd6c <ucdr_deserialize_uint32_t+0x104>
 800ccea:	78f3      	ldrb	r3, [r6, #3]
 800ccec:	702b      	strb	r3, [r5, #0]
 800ccee:	78b3      	ldrb	r3, [r6, #2]
 800ccf0:	706b      	strb	r3, [r5, #1]
 800ccf2:	2f01      	cmp	r7, #1
 800ccf4:	d031      	beq.n	800cd5a <ucdr_deserialize_uint32_t+0xf2>
 800ccf6:	7873      	ldrb	r3, [r6, #1]
 800ccf8:	70ab      	strb	r3, [r5, #2]
 800ccfa:	2f02      	cmp	r7, #2
 800ccfc:	f105 0503 	add.w	r5, r5, #3
 800cd00:	d02f      	beq.n	800cd62 <ucdr_deserialize_uint32_t+0xfa>
 800cd02:	7833      	ldrb	r3, [r6, #0]
 800cd04:	702b      	strb	r3, [r5, #0]
 800cd06:	6923      	ldr	r3, [r4, #16]
 800cd08:	68a2      	ldr	r2, [r4, #8]
 800cd0a:	7da0      	ldrb	r0, [r4, #22]
 800cd0c:	2104      	movs	r1, #4
 800cd0e:	3304      	adds	r3, #4
 800cd10:	444a      	add	r2, r9
 800cd12:	1bdb      	subs	r3, r3, r7
 800cd14:	7561      	strb	r1, [r4, #21]
 800cd16:	60a2      	str	r2, [r4, #8]
 800cd18:	6123      	str	r3, [r4, #16]
 800cd1a:	f080 0001 	eor.w	r0, r0, #1
 800cd1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd22:	2104      	movs	r1, #4
 800cd24:	4620      	mov	r0, r4
 800cd26:	f001 f857 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800cd2a:	2800      	cmp	r0, #0
 800cd2c:	d0c5      	beq.n	800ccba <ucdr_deserialize_uint32_t+0x52>
 800cd2e:	7d23      	ldrb	r3, [r4, #20]
 800cd30:	68a2      	ldr	r2, [r4, #8]
 800cd32:	2b01      	cmp	r3, #1
 800cd34:	d017      	beq.n	800cd66 <ucdr_deserialize_uint32_t+0xfe>
 800cd36:	78d3      	ldrb	r3, [r2, #3]
 800cd38:	e7ad      	b.n	800cc96 <ucdr_deserialize_uint32_t+0x2e>
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	602b      	str	r3, [r5, #0]
 800cd3e:	e7b4      	b.n	800ccaa <ucdr_deserialize_uint32_t+0x42>
 800cd40:	68a2      	ldr	r2, [r4, #8]
 800cd42:	6923      	ldr	r3, [r4, #16]
 800cd44:	7da0      	ldrb	r0, [r4, #22]
 800cd46:	f884 8015 	strb.w	r8, [r4, #21]
 800cd4a:	1bd2      	subs	r2, r2, r7
 800cd4c:	1bdb      	subs	r3, r3, r7
 800cd4e:	60a2      	str	r2, [r4, #8]
 800cd50:	6123      	str	r3, [r4, #16]
 800cd52:	f080 0001 	eor.w	r0, r0, #1
 800cd56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd5a:	68a3      	ldr	r3, [r4, #8]
 800cd5c:	785b      	ldrb	r3, [r3, #1]
 800cd5e:	70ab      	strb	r3, [r5, #2]
 800cd60:	3503      	adds	r5, #3
 800cd62:	68a6      	ldr	r6, [r4, #8]
 800cd64:	e7cd      	b.n	800cd02 <ucdr_deserialize_uint32_t+0x9a>
 800cd66:	6813      	ldr	r3, [r2, #0]
 800cd68:	602b      	str	r3, [r5, #0]
 800cd6a:	e79e      	b.n	800ccaa <ucdr_deserialize_uint32_t+0x42>
 800cd6c:	4631      	mov	r1, r6
 800cd6e:	463a      	mov	r2, r7
 800cd70:	4628      	mov	r0, r5
 800cd72:	f010 fe34 	bl	801d9de <memcpy>
 800cd76:	68a1      	ldr	r1, [r4, #8]
 800cd78:	464a      	mov	r2, r9
 800cd7a:	19e8      	adds	r0, r5, r7
 800cd7c:	f010 fe2f 	bl	801d9de <memcpy>
 800cd80:	e7c1      	b.n	800cd06 <ucdr_deserialize_uint32_t+0x9e>
 800cd82:	bf00      	nop

0800cd84 <ucdr_deserialize_endian_uint32_t>:
 800cd84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd88:	460e      	mov	r6, r1
 800cd8a:	2104      	movs	r1, #4
 800cd8c:	4604      	mov	r4, r0
 800cd8e:	4615      	mov	r5, r2
 800cd90:	f001 f876 	bl	800de80 <ucdr_buffer_alignment>
 800cd94:	4601      	mov	r1, r0
 800cd96:	4620      	mov	r0, r4
 800cd98:	f894 9015 	ldrb.w	r9, [r4, #21]
 800cd9c:	f001 f8b4 	bl	800df08 <ucdr_advance_buffer>
 800cda0:	2104      	movs	r1, #4
 800cda2:	4620      	mov	r0, r4
 800cda4:	f001 f80c 	bl	800ddc0 <ucdr_check_buffer_available_for>
 800cda8:	2800      	cmp	r0, #0
 800cdaa:	d137      	bne.n	800ce1c <ucdr_deserialize_endian_uint32_t+0x98>
 800cdac:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800cdb0:	42bb      	cmp	r3, r7
 800cdb2:	d92e      	bls.n	800ce12 <ucdr_deserialize_endian_uint32_t+0x8e>
 800cdb4:	eba3 0807 	sub.w	r8, r3, r7
 800cdb8:	60a3      	str	r3, [r4, #8]
 800cdba:	6923      	ldr	r3, [r4, #16]
 800cdbc:	f1c8 0a04 	rsb	sl, r8, #4
 800cdc0:	4443      	add	r3, r8
 800cdc2:	6123      	str	r3, [r4, #16]
 800cdc4:	4651      	mov	r1, sl
 800cdc6:	4620      	mov	r0, r4
 800cdc8:	f001 f806 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	d043      	beq.n	800ce58 <ucdr_deserialize_endian_uint32_t+0xd4>
 800cdd0:	2e01      	cmp	r6, #1
 800cdd2:	d056      	beq.n	800ce82 <ucdr_deserialize_endian_uint32_t+0xfe>
 800cdd4:	78fb      	ldrb	r3, [r7, #3]
 800cdd6:	702b      	strb	r3, [r5, #0]
 800cdd8:	78bb      	ldrb	r3, [r7, #2]
 800cdda:	706b      	strb	r3, [r5, #1]
 800cddc:	f1b8 0f01 	cmp.w	r8, #1
 800cde0:	d049      	beq.n	800ce76 <ucdr_deserialize_endian_uint32_t+0xf2>
 800cde2:	787b      	ldrb	r3, [r7, #1]
 800cde4:	70ab      	strb	r3, [r5, #2]
 800cde6:	f1b8 0f02 	cmp.w	r8, #2
 800cdea:	f105 0503 	add.w	r5, r5, #3
 800cdee:	d046      	beq.n	800ce7e <ucdr_deserialize_endian_uint32_t+0xfa>
 800cdf0:	783b      	ldrb	r3, [r7, #0]
 800cdf2:	702b      	strb	r3, [r5, #0]
 800cdf4:	6923      	ldr	r3, [r4, #16]
 800cdf6:	68a2      	ldr	r2, [r4, #8]
 800cdf8:	7da0      	ldrb	r0, [r4, #22]
 800cdfa:	2104      	movs	r1, #4
 800cdfc:	3304      	adds	r3, #4
 800cdfe:	4452      	add	r2, sl
 800ce00:	eba3 0308 	sub.w	r3, r3, r8
 800ce04:	7561      	strb	r1, [r4, #21]
 800ce06:	60a2      	str	r2, [r4, #8]
 800ce08:	6123      	str	r3, [r4, #16]
 800ce0a:	f080 0001 	eor.w	r0, r0, #1
 800ce0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce12:	2104      	movs	r1, #4
 800ce14:	4620      	mov	r0, r4
 800ce16:	f000 ffdf 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800ce1a:	b1a8      	cbz	r0, 800ce48 <ucdr_deserialize_endian_uint32_t+0xc4>
 800ce1c:	2e01      	cmp	r6, #1
 800ce1e:	68a3      	ldr	r3, [r4, #8]
 800ce20:	d017      	beq.n	800ce52 <ucdr_deserialize_endian_uint32_t+0xce>
 800ce22:	78db      	ldrb	r3, [r3, #3]
 800ce24:	702b      	strb	r3, [r5, #0]
 800ce26:	68a3      	ldr	r3, [r4, #8]
 800ce28:	789b      	ldrb	r3, [r3, #2]
 800ce2a:	706b      	strb	r3, [r5, #1]
 800ce2c:	68a3      	ldr	r3, [r4, #8]
 800ce2e:	785b      	ldrb	r3, [r3, #1]
 800ce30:	70ab      	strb	r3, [r5, #2]
 800ce32:	68a3      	ldr	r3, [r4, #8]
 800ce34:	781b      	ldrb	r3, [r3, #0]
 800ce36:	70eb      	strb	r3, [r5, #3]
 800ce38:	68a2      	ldr	r2, [r4, #8]
 800ce3a:	6923      	ldr	r3, [r4, #16]
 800ce3c:	3204      	adds	r2, #4
 800ce3e:	3304      	adds	r3, #4
 800ce40:	2104      	movs	r1, #4
 800ce42:	60a2      	str	r2, [r4, #8]
 800ce44:	6123      	str	r3, [r4, #16]
 800ce46:	7561      	strb	r1, [r4, #21]
 800ce48:	7da0      	ldrb	r0, [r4, #22]
 800ce4a:	f080 0001 	eor.w	r0, r0, #1
 800ce4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	602b      	str	r3, [r5, #0]
 800ce56:	e7ef      	b.n	800ce38 <ucdr_deserialize_endian_uint32_t+0xb4>
 800ce58:	68a2      	ldr	r2, [r4, #8]
 800ce5a:	6923      	ldr	r3, [r4, #16]
 800ce5c:	7da0      	ldrb	r0, [r4, #22]
 800ce5e:	f884 9015 	strb.w	r9, [r4, #21]
 800ce62:	eba2 0208 	sub.w	r2, r2, r8
 800ce66:	eba3 0308 	sub.w	r3, r3, r8
 800ce6a:	60a2      	str	r2, [r4, #8]
 800ce6c:	6123      	str	r3, [r4, #16]
 800ce6e:	f080 0001 	eor.w	r0, r0, #1
 800ce72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce76:	68a3      	ldr	r3, [r4, #8]
 800ce78:	785b      	ldrb	r3, [r3, #1]
 800ce7a:	70ab      	strb	r3, [r5, #2]
 800ce7c:	3503      	adds	r5, #3
 800ce7e:	68a7      	ldr	r7, [r4, #8]
 800ce80:	e7b6      	b.n	800cdf0 <ucdr_deserialize_endian_uint32_t+0x6c>
 800ce82:	4639      	mov	r1, r7
 800ce84:	4642      	mov	r2, r8
 800ce86:	4628      	mov	r0, r5
 800ce88:	f010 fda9 	bl	801d9de <memcpy>
 800ce8c:	68a1      	ldr	r1, [r4, #8]
 800ce8e:	4652      	mov	r2, sl
 800ce90:	eb05 0008 	add.w	r0, r5, r8
 800ce94:	f010 fda3 	bl	801d9de <memcpy>
 800ce98:	e7ac      	b.n	800cdf4 <ucdr_deserialize_endian_uint32_t+0x70>
 800ce9a:	bf00      	nop

0800ce9c <ucdr_serialize_uint64_t>:
 800ce9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cea0:	2108      	movs	r1, #8
 800cea2:	b082      	sub	sp, #8
 800cea4:	4604      	mov	r4, r0
 800cea6:	e9cd 2300 	strd	r2, r3, [sp]
 800ceaa:	f000 ffe9 	bl	800de80 <ucdr_buffer_alignment>
 800ceae:	4601      	mov	r1, r0
 800ceb0:	4620      	mov	r0, r4
 800ceb2:	7d67      	ldrb	r7, [r4, #21]
 800ceb4:	f001 f828 	bl	800df08 <ucdr_advance_buffer>
 800ceb8:	2108      	movs	r1, #8
 800ceba:	4620      	mov	r0, r4
 800cebc:	f000 ff80 	bl	800ddc0 <ucdr_check_buffer_available_for>
 800cec0:	2800      	cmp	r0, #0
 800cec2:	d14d      	bne.n	800cf60 <ucdr_serialize_uint64_t+0xc4>
 800cec4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800cec8:	42ab      	cmp	r3, r5
 800ceca:	d944      	bls.n	800cf56 <ucdr_serialize_uint64_t+0xba>
 800cecc:	1b5e      	subs	r6, r3, r5
 800cece:	60a3      	str	r3, [r4, #8]
 800ced0:	6923      	ldr	r3, [r4, #16]
 800ced2:	f1c6 0808 	rsb	r8, r6, #8
 800ced6:	4433      	add	r3, r6
 800ced8:	6123      	str	r3, [r4, #16]
 800ceda:	4641      	mov	r1, r8
 800cedc:	4620      	mov	r0, r4
 800cede:	f000 ff7b 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800cee2:	2800      	cmp	r0, #0
 800cee4:	d072      	beq.n	800cfcc <ucdr_serialize_uint64_t+0x130>
 800cee6:	7d23      	ldrb	r3, [r4, #20]
 800cee8:	2b01      	cmp	r3, #1
 800ceea:	f000 8092 	beq.w	800d012 <ucdr_serialize_uint64_t+0x176>
 800ceee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cef2:	702b      	strb	r3, [r5, #0]
 800cef4:	2e01      	cmp	r6, #1
 800cef6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cefa:	706b      	strb	r3, [r5, #1]
 800cefc:	d073      	beq.n	800cfe6 <ucdr_serialize_uint64_t+0x14a>
 800cefe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cf02:	70ab      	strb	r3, [r5, #2]
 800cf04:	2e02      	cmp	r6, #2
 800cf06:	d072      	beq.n	800cfee <ucdr_serialize_uint64_t+0x152>
 800cf08:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cf0c:	70eb      	strb	r3, [r5, #3]
 800cf0e:	2e03      	cmp	r6, #3
 800cf10:	d071      	beq.n	800cff6 <ucdr_serialize_uint64_t+0x15a>
 800cf12:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800cf16:	712b      	strb	r3, [r5, #4]
 800cf18:	2e04      	cmp	r6, #4
 800cf1a:	d070      	beq.n	800cffe <ucdr_serialize_uint64_t+0x162>
 800cf1c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800cf20:	716b      	strb	r3, [r5, #5]
 800cf22:	2e05      	cmp	r6, #5
 800cf24:	d06f      	beq.n	800d006 <ucdr_serialize_uint64_t+0x16a>
 800cf26:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800cf2a:	71ab      	strb	r3, [r5, #6]
 800cf2c:	2e06      	cmp	r6, #6
 800cf2e:	d06e      	beq.n	800d00e <ucdr_serialize_uint64_t+0x172>
 800cf30:	3507      	adds	r5, #7
 800cf32:	f89d 3000 	ldrb.w	r3, [sp]
 800cf36:	702b      	strb	r3, [r5, #0]
 800cf38:	6923      	ldr	r3, [r4, #16]
 800cf3a:	68a2      	ldr	r2, [r4, #8]
 800cf3c:	7da0      	ldrb	r0, [r4, #22]
 800cf3e:	3308      	adds	r3, #8
 800cf40:	4442      	add	r2, r8
 800cf42:	1b9b      	subs	r3, r3, r6
 800cf44:	2108      	movs	r1, #8
 800cf46:	f080 0001 	eor.w	r0, r0, #1
 800cf4a:	60a2      	str	r2, [r4, #8]
 800cf4c:	6123      	str	r3, [r4, #16]
 800cf4e:	7561      	strb	r1, [r4, #21]
 800cf50:	b002      	add	sp, #8
 800cf52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf56:	2108      	movs	r1, #8
 800cf58:	4620      	mov	r0, r4
 800cf5a:	f000 ff3d 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800cf5e:	b350      	cbz	r0, 800cfb6 <ucdr_serialize_uint64_t+0x11a>
 800cf60:	7d22      	ldrb	r2, [r4, #20]
 800cf62:	68a3      	ldr	r3, [r4, #8]
 800cf64:	2a01      	cmp	r2, #1
 800cf66:	d02c      	beq.n	800cfc2 <ucdr_serialize_uint64_t+0x126>
 800cf68:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cf6c:	701a      	strb	r2, [r3, #0]
 800cf6e:	68a3      	ldr	r3, [r4, #8]
 800cf70:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cf74:	705a      	strb	r2, [r3, #1]
 800cf76:	68a3      	ldr	r3, [r4, #8]
 800cf78:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cf7c:	709a      	strb	r2, [r3, #2]
 800cf7e:	68a3      	ldr	r3, [r4, #8]
 800cf80:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cf84:	70da      	strb	r2, [r3, #3]
 800cf86:	68a3      	ldr	r3, [r4, #8]
 800cf88:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800cf8c:	711a      	strb	r2, [r3, #4]
 800cf8e:	68a3      	ldr	r3, [r4, #8]
 800cf90:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800cf94:	715a      	strb	r2, [r3, #5]
 800cf96:	68a3      	ldr	r3, [r4, #8]
 800cf98:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800cf9c:	719a      	strb	r2, [r3, #6]
 800cf9e:	68a3      	ldr	r3, [r4, #8]
 800cfa0:	f89d 2000 	ldrb.w	r2, [sp]
 800cfa4:	71da      	strb	r2, [r3, #7]
 800cfa6:	68a2      	ldr	r2, [r4, #8]
 800cfa8:	6923      	ldr	r3, [r4, #16]
 800cfaa:	3208      	adds	r2, #8
 800cfac:	3308      	adds	r3, #8
 800cfae:	2108      	movs	r1, #8
 800cfb0:	60a2      	str	r2, [r4, #8]
 800cfb2:	6123      	str	r3, [r4, #16]
 800cfb4:	7561      	strb	r1, [r4, #21]
 800cfb6:	7da0      	ldrb	r0, [r4, #22]
 800cfb8:	f080 0001 	eor.w	r0, r0, #1
 800cfbc:	b002      	add	sp, #8
 800cfbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfc2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cfc6:	6019      	str	r1, [r3, #0]
 800cfc8:	605a      	str	r2, [r3, #4]
 800cfca:	e7ec      	b.n	800cfa6 <ucdr_serialize_uint64_t+0x10a>
 800cfcc:	68a2      	ldr	r2, [r4, #8]
 800cfce:	6923      	ldr	r3, [r4, #16]
 800cfd0:	7da0      	ldrb	r0, [r4, #22]
 800cfd2:	7567      	strb	r7, [r4, #21]
 800cfd4:	1b92      	subs	r2, r2, r6
 800cfd6:	1b9b      	subs	r3, r3, r6
 800cfd8:	f080 0001 	eor.w	r0, r0, #1
 800cfdc:	60a2      	str	r2, [r4, #8]
 800cfde:	6123      	str	r3, [r4, #16]
 800cfe0:	b002      	add	sp, #8
 800cfe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfe6:	68a3      	ldr	r3, [r4, #8]
 800cfe8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cfec:	701a      	strb	r2, [r3, #0]
 800cfee:	68a3      	ldr	r3, [r4, #8]
 800cff0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cff4:	701a      	strb	r2, [r3, #0]
 800cff6:	68a3      	ldr	r3, [r4, #8]
 800cff8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800cffc:	701a      	strb	r2, [r3, #0]
 800cffe:	68a3      	ldr	r3, [r4, #8]
 800d000:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d004:	701a      	strb	r2, [r3, #0]
 800d006:	68a3      	ldr	r3, [r4, #8]
 800d008:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d00c:	701a      	strb	r2, [r3, #0]
 800d00e:	68a5      	ldr	r5, [r4, #8]
 800d010:	e78f      	b.n	800cf32 <ucdr_serialize_uint64_t+0x96>
 800d012:	4628      	mov	r0, r5
 800d014:	466d      	mov	r5, sp
 800d016:	4632      	mov	r2, r6
 800d018:	4629      	mov	r1, r5
 800d01a:	f010 fce0 	bl	801d9de <memcpy>
 800d01e:	68a0      	ldr	r0, [r4, #8]
 800d020:	4642      	mov	r2, r8
 800d022:	19a9      	adds	r1, r5, r6
 800d024:	f010 fcdb 	bl	801d9de <memcpy>
 800d028:	e786      	b.n	800cf38 <ucdr_serialize_uint64_t+0x9c>
 800d02a:	bf00      	nop

0800d02c <ucdr_serialize_int16_t>:
 800d02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d030:	b082      	sub	sp, #8
 800d032:	460b      	mov	r3, r1
 800d034:	2102      	movs	r1, #2
 800d036:	4604      	mov	r4, r0
 800d038:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d03c:	f000 ff20 	bl	800de80 <ucdr_buffer_alignment>
 800d040:	4601      	mov	r1, r0
 800d042:	4620      	mov	r0, r4
 800d044:	7d67      	ldrb	r7, [r4, #21]
 800d046:	f000 ff5f 	bl	800df08 <ucdr_advance_buffer>
 800d04a:	2102      	movs	r1, #2
 800d04c:	4620      	mov	r0, r4
 800d04e:	f000 feb7 	bl	800ddc0 <ucdr_check_buffer_available_for>
 800d052:	b1c0      	cbz	r0, 800d086 <ucdr_serialize_int16_t+0x5a>
 800d054:	7d22      	ldrb	r2, [r4, #20]
 800d056:	68a3      	ldr	r3, [r4, #8]
 800d058:	2a01      	cmp	r2, #1
 800d05a:	d04e      	beq.n	800d0fa <ucdr_serialize_int16_t+0xce>
 800d05c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d060:	701a      	strb	r2, [r3, #0]
 800d062:	68a3      	ldr	r3, [r4, #8]
 800d064:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d068:	705a      	strb	r2, [r3, #1]
 800d06a:	68a2      	ldr	r2, [r4, #8]
 800d06c:	6923      	ldr	r3, [r4, #16]
 800d06e:	3202      	adds	r2, #2
 800d070:	3302      	adds	r3, #2
 800d072:	2102      	movs	r1, #2
 800d074:	60a2      	str	r2, [r4, #8]
 800d076:	6123      	str	r3, [r4, #16]
 800d078:	7561      	strb	r1, [r4, #21]
 800d07a:	7da0      	ldrb	r0, [r4, #22]
 800d07c:	f080 0001 	eor.w	r0, r0, #1
 800d080:	b002      	add	sp, #8
 800d082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d086:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d08a:	42ab      	cmp	r3, r5
 800d08c:	d923      	bls.n	800d0d6 <ucdr_serialize_int16_t+0xaa>
 800d08e:	1b5e      	subs	r6, r3, r5
 800d090:	60a3      	str	r3, [r4, #8]
 800d092:	6923      	ldr	r3, [r4, #16]
 800d094:	f1c6 0802 	rsb	r8, r6, #2
 800d098:	4433      	add	r3, r6
 800d09a:	6123      	str	r3, [r4, #16]
 800d09c:	4641      	mov	r1, r8
 800d09e:	4620      	mov	r0, r4
 800d0a0:	f000 fe9a 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800d0a4:	b368      	cbz	r0, 800d102 <ucdr_serialize_int16_t+0xd6>
 800d0a6:	7d23      	ldrb	r3, [r4, #20]
 800d0a8:	2b01      	cmp	r3, #1
 800d0aa:	d03b      	beq.n	800d124 <ucdr_serialize_int16_t+0xf8>
 800d0ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d0b0:	702b      	strb	r3, [r5, #0]
 800d0b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d0b6:	706b      	strb	r3, [r5, #1]
 800d0b8:	6923      	ldr	r3, [r4, #16]
 800d0ba:	68a2      	ldr	r2, [r4, #8]
 800d0bc:	7da0      	ldrb	r0, [r4, #22]
 800d0be:	3302      	adds	r3, #2
 800d0c0:	4442      	add	r2, r8
 800d0c2:	1b9b      	subs	r3, r3, r6
 800d0c4:	2102      	movs	r1, #2
 800d0c6:	f080 0001 	eor.w	r0, r0, #1
 800d0ca:	60a2      	str	r2, [r4, #8]
 800d0cc:	6123      	str	r3, [r4, #16]
 800d0ce:	7561      	strb	r1, [r4, #21]
 800d0d0:	b002      	add	sp, #8
 800d0d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0d6:	2102      	movs	r1, #2
 800d0d8:	4620      	mov	r0, r4
 800d0da:	f000 fe7d 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800d0de:	2800      	cmp	r0, #0
 800d0e0:	d0cb      	beq.n	800d07a <ucdr_serialize_int16_t+0x4e>
 800d0e2:	7d23      	ldrb	r3, [r4, #20]
 800d0e4:	68a2      	ldr	r2, [r4, #8]
 800d0e6:	2b01      	cmp	r3, #1
 800d0e8:	d018      	beq.n	800d11c <ucdr_serialize_int16_t+0xf0>
 800d0ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d0ee:	7013      	strb	r3, [r2, #0]
 800d0f0:	68a3      	ldr	r3, [r4, #8]
 800d0f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d0f6:	705a      	strb	r2, [r3, #1]
 800d0f8:	e7b7      	b.n	800d06a <ucdr_serialize_int16_t+0x3e>
 800d0fa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d0fe:	801a      	strh	r2, [r3, #0]
 800d100:	e7b3      	b.n	800d06a <ucdr_serialize_int16_t+0x3e>
 800d102:	68a2      	ldr	r2, [r4, #8]
 800d104:	6923      	ldr	r3, [r4, #16]
 800d106:	7da0      	ldrb	r0, [r4, #22]
 800d108:	7567      	strb	r7, [r4, #21]
 800d10a:	1b92      	subs	r2, r2, r6
 800d10c:	1b9b      	subs	r3, r3, r6
 800d10e:	f080 0001 	eor.w	r0, r0, #1
 800d112:	60a2      	str	r2, [r4, #8]
 800d114:	6123      	str	r3, [r4, #16]
 800d116:	b002      	add	sp, #8
 800d118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d11c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800d120:	8013      	strh	r3, [r2, #0]
 800d122:	e7a2      	b.n	800d06a <ucdr_serialize_int16_t+0x3e>
 800d124:	4628      	mov	r0, r5
 800d126:	f10d 0506 	add.w	r5, sp, #6
 800d12a:	4632      	mov	r2, r6
 800d12c:	4629      	mov	r1, r5
 800d12e:	f010 fc56 	bl	801d9de <memcpy>
 800d132:	68a0      	ldr	r0, [r4, #8]
 800d134:	4642      	mov	r2, r8
 800d136:	19a9      	adds	r1, r5, r6
 800d138:	f010 fc51 	bl	801d9de <memcpy>
 800d13c:	e7bc      	b.n	800d0b8 <ucdr_serialize_int16_t+0x8c>
 800d13e:	bf00      	nop

0800d140 <ucdr_deserialize_int16_t>:
 800d140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d144:	460d      	mov	r5, r1
 800d146:	2102      	movs	r1, #2
 800d148:	4604      	mov	r4, r0
 800d14a:	f000 fe99 	bl	800de80 <ucdr_buffer_alignment>
 800d14e:	4601      	mov	r1, r0
 800d150:	4620      	mov	r0, r4
 800d152:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d156:	f000 fed7 	bl	800df08 <ucdr_advance_buffer>
 800d15a:	2102      	movs	r1, #2
 800d15c:	4620      	mov	r0, r4
 800d15e:	f000 fe2f 	bl	800ddc0 <ucdr_check_buffer_available_for>
 800d162:	b1a8      	cbz	r0, 800d190 <ucdr_deserialize_int16_t+0x50>
 800d164:	7d22      	ldrb	r2, [r4, #20]
 800d166:	68a3      	ldr	r3, [r4, #8]
 800d168:	2a01      	cmp	r2, #1
 800d16a:	d046      	beq.n	800d1fa <ucdr_deserialize_int16_t+0xba>
 800d16c:	785b      	ldrb	r3, [r3, #1]
 800d16e:	702b      	strb	r3, [r5, #0]
 800d170:	68a3      	ldr	r3, [r4, #8]
 800d172:	781b      	ldrb	r3, [r3, #0]
 800d174:	706b      	strb	r3, [r5, #1]
 800d176:	68a2      	ldr	r2, [r4, #8]
 800d178:	6923      	ldr	r3, [r4, #16]
 800d17a:	3202      	adds	r2, #2
 800d17c:	3302      	adds	r3, #2
 800d17e:	2102      	movs	r1, #2
 800d180:	60a2      	str	r2, [r4, #8]
 800d182:	6123      	str	r3, [r4, #16]
 800d184:	7561      	strb	r1, [r4, #21]
 800d186:	7da0      	ldrb	r0, [r4, #22]
 800d188:	f080 0001 	eor.w	r0, r0, #1
 800d18c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d190:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d194:	42be      	cmp	r6, r7
 800d196:	d920      	bls.n	800d1da <ucdr_deserialize_int16_t+0x9a>
 800d198:	6923      	ldr	r3, [r4, #16]
 800d19a:	60a6      	str	r6, [r4, #8]
 800d19c:	1bf6      	subs	r6, r6, r7
 800d19e:	4433      	add	r3, r6
 800d1a0:	f1c6 0902 	rsb	r9, r6, #2
 800d1a4:	6123      	str	r3, [r4, #16]
 800d1a6:	4649      	mov	r1, r9
 800d1a8:	4620      	mov	r0, r4
 800d1aa:	f000 fe15 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800d1ae:	b338      	cbz	r0, 800d200 <ucdr_deserialize_int16_t+0xc0>
 800d1b0:	7d23      	ldrb	r3, [r4, #20]
 800d1b2:	2b01      	cmp	r3, #1
 800d1b4:	d034      	beq.n	800d220 <ucdr_deserialize_int16_t+0xe0>
 800d1b6:	787b      	ldrb	r3, [r7, #1]
 800d1b8:	702b      	strb	r3, [r5, #0]
 800d1ba:	783b      	ldrb	r3, [r7, #0]
 800d1bc:	706b      	strb	r3, [r5, #1]
 800d1be:	6923      	ldr	r3, [r4, #16]
 800d1c0:	68a2      	ldr	r2, [r4, #8]
 800d1c2:	7da0      	ldrb	r0, [r4, #22]
 800d1c4:	2102      	movs	r1, #2
 800d1c6:	3302      	adds	r3, #2
 800d1c8:	444a      	add	r2, r9
 800d1ca:	1b9b      	subs	r3, r3, r6
 800d1cc:	7561      	strb	r1, [r4, #21]
 800d1ce:	60a2      	str	r2, [r4, #8]
 800d1d0:	6123      	str	r3, [r4, #16]
 800d1d2:	f080 0001 	eor.w	r0, r0, #1
 800d1d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1da:	2102      	movs	r1, #2
 800d1dc:	4620      	mov	r0, r4
 800d1de:	f000 fdfb 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800d1e2:	2800      	cmp	r0, #0
 800d1e4:	d0cf      	beq.n	800d186 <ucdr_deserialize_int16_t+0x46>
 800d1e6:	7d23      	ldrb	r3, [r4, #20]
 800d1e8:	68a2      	ldr	r2, [r4, #8]
 800d1ea:	2b01      	cmp	r3, #1
 800d1ec:	d015      	beq.n	800d21a <ucdr_deserialize_int16_t+0xda>
 800d1ee:	7853      	ldrb	r3, [r2, #1]
 800d1f0:	702b      	strb	r3, [r5, #0]
 800d1f2:	68a3      	ldr	r3, [r4, #8]
 800d1f4:	781b      	ldrb	r3, [r3, #0]
 800d1f6:	706b      	strb	r3, [r5, #1]
 800d1f8:	e7bd      	b.n	800d176 <ucdr_deserialize_int16_t+0x36>
 800d1fa:	881b      	ldrh	r3, [r3, #0]
 800d1fc:	802b      	strh	r3, [r5, #0]
 800d1fe:	e7ba      	b.n	800d176 <ucdr_deserialize_int16_t+0x36>
 800d200:	68a2      	ldr	r2, [r4, #8]
 800d202:	6923      	ldr	r3, [r4, #16]
 800d204:	7da0      	ldrb	r0, [r4, #22]
 800d206:	f884 8015 	strb.w	r8, [r4, #21]
 800d20a:	1b92      	subs	r2, r2, r6
 800d20c:	1b9b      	subs	r3, r3, r6
 800d20e:	60a2      	str	r2, [r4, #8]
 800d210:	6123      	str	r3, [r4, #16]
 800d212:	f080 0001 	eor.w	r0, r0, #1
 800d216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d21a:	8813      	ldrh	r3, [r2, #0]
 800d21c:	802b      	strh	r3, [r5, #0]
 800d21e:	e7aa      	b.n	800d176 <ucdr_deserialize_int16_t+0x36>
 800d220:	4639      	mov	r1, r7
 800d222:	4632      	mov	r2, r6
 800d224:	4628      	mov	r0, r5
 800d226:	f010 fbda 	bl	801d9de <memcpy>
 800d22a:	68a1      	ldr	r1, [r4, #8]
 800d22c:	464a      	mov	r2, r9
 800d22e:	19a8      	adds	r0, r5, r6
 800d230:	f010 fbd5 	bl	801d9de <memcpy>
 800d234:	e7c3      	b.n	800d1be <ucdr_deserialize_int16_t+0x7e>
 800d236:	bf00      	nop

0800d238 <ucdr_serialize_int32_t>:
 800d238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d23c:	b082      	sub	sp, #8
 800d23e:	4604      	mov	r4, r0
 800d240:	9101      	str	r1, [sp, #4]
 800d242:	2104      	movs	r1, #4
 800d244:	f000 fe1c 	bl	800de80 <ucdr_buffer_alignment>
 800d248:	4601      	mov	r1, r0
 800d24a:	4620      	mov	r0, r4
 800d24c:	7d67      	ldrb	r7, [r4, #21]
 800d24e:	f000 fe5b 	bl	800df08 <ucdr_advance_buffer>
 800d252:	2104      	movs	r1, #4
 800d254:	4620      	mov	r0, r4
 800d256:	f000 fdb3 	bl	800ddc0 <ucdr_check_buffer_available_for>
 800d25a:	b300      	cbz	r0, 800d29e <ucdr_serialize_int32_t+0x66>
 800d25c:	7d22      	ldrb	r2, [r4, #20]
 800d25e:	68a3      	ldr	r3, [r4, #8]
 800d260:	2a01      	cmp	r2, #1
 800d262:	d05d      	beq.n	800d320 <ucdr_serialize_int32_t+0xe8>
 800d264:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d268:	701a      	strb	r2, [r3, #0]
 800d26a:	68a3      	ldr	r3, [r4, #8]
 800d26c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d270:	705a      	strb	r2, [r3, #1]
 800d272:	68a3      	ldr	r3, [r4, #8]
 800d274:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d278:	709a      	strb	r2, [r3, #2]
 800d27a:	68a3      	ldr	r3, [r4, #8]
 800d27c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d280:	70da      	strb	r2, [r3, #3]
 800d282:	68a2      	ldr	r2, [r4, #8]
 800d284:	6923      	ldr	r3, [r4, #16]
 800d286:	3204      	adds	r2, #4
 800d288:	3304      	adds	r3, #4
 800d28a:	2104      	movs	r1, #4
 800d28c:	60a2      	str	r2, [r4, #8]
 800d28e:	6123      	str	r3, [r4, #16]
 800d290:	7561      	strb	r1, [r4, #21]
 800d292:	7da0      	ldrb	r0, [r4, #22]
 800d294:	f080 0001 	eor.w	r0, r0, #1
 800d298:	b002      	add	sp, #8
 800d29a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d29e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d2a2:	42ab      	cmp	r3, r5
 800d2a4:	d92e      	bls.n	800d304 <ucdr_serialize_int32_t+0xcc>
 800d2a6:	1b5e      	subs	r6, r3, r5
 800d2a8:	60a3      	str	r3, [r4, #8]
 800d2aa:	6923      	ldr	r3, [r4, #16]
 800d2ac:	f1c6 0804 	rsb	r8, r6, #4
 800d2b0:	4433      	add	r3, r6
 800d2b2:	6123      	str	r3, [r4, #16]
 800d2b4:	4641      	mov	r1, r8
 800d2b6:	4620      	mov	r0, r4
 800d2b8:	f000 fd8e 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800d2bc:	b398      	cbz	r0, 800d326 <ucdr_serialize_int32_t+0xee>
 800d2be:	7d23      	ldrb	r3, [r4, #20]
 800d2c0:	2b01      	cmp	r3, #1
 800d2c2:	d046      	beq.n	800d352 <ucdr_serialize_int32_t+0x11a>
 800d2c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d2c8:	702b      	strb	r3, [r5, #0]
 800d2ca:	2e01      	cmp	r6, #1
 800d2cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d2d0:	706b      	strb	r3, [r5, #1]
 800d2d2:	d035      	beq.n	800d340 <ucdr_serialize_int32_t+0x108>
 800d2d4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d2d8:	70ab      	strb	r3, [r5, #2]
 800d2da:	2e02      	cmp	r6, #2
 800d2dc:	d034      	beq.n	800d348 <ucdr_serialize_int32_t+0x110>
 800d2de:	3503      	adds	r5, #3
 800d2e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d2e4:	702b      	strb	r3, [r5, #0]
 800d2e6:	6923      	ldr	r3, [r4, #16]
 800d2e8:	68a2      	ldr	r2, [r4, #8]
 800d2ea:	7da0      	ldrb	r0, [r4, #22]
 800d2ec:	3304      	adds	r3, #4
 800d2ee:	4442      	add	r2, r8
 800d2f0:	1b9b      	subs	r3, r3, r6
 800d2f2:	2104      	movs	r1, #4
 800d2f4:	f080 0001 	eor.w	r0, r0, #1
 800d2f8:	60a2      	str	r2, [r4, #8]
 800d2fa:	6123      	str	r3, [r4, #16]
 800d2fc:	7561      	strb	r1, [r4, #21]
 800d2fe:	b002      	add	sp, #8
 800d300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d304:	2104      	movs	r1, #4
 800d306:	4620      	mov	r0, r4
 800d308:	f000 fd66 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800d30c:	2800      	cmp	r0, #0
 800d30e:	d0c0      	beq.n	800d292 <ucdr_serialize_int32_t+0x5a>
 800d310:	7d23      	ldrb	r3, [r4, #20]
 800d312:	68a2      	ldr	r2, [r4, #8]
 800d314:	2b01      	cmp	r3, #1
 800d316:	d019      	beq.n	800d34c <ucdr_serialize_int32_t+0x114>
 800d318:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d31c:	7013      	strb	r3, [r2, #0]
 800d31e:	e7a4      	b.n	800d26a <ucdr_serialize_int32_t+0x32>
 800d320:	9a01      	ldr	r2, [sp, #4]
 800d322:	601a      	str	r2, [r3, #0]
 800d324:	e7ad      	b.n	800d282 <ucdr_serialize_int32_t+0x4a>
 800d326:	68a2      	ldr	r2, [r4, #8]
 800d328:	6923      	ldr	r3, [r4, #16]
 800d32a:	7da0      	ldrb	r0, [r4, #22]
 800d32c:	7567      	strb	r7, [r4, #21]
 800d32e:	1b92      	subs	r2, r2, r6
 800d330:	1b9b      	subs	r3, r3, r6
 800d332:	f080 0001 	eor.w	r0, r0, #1
 800d336:	60a2      	str	r2, [r4, #8]
 800d338:	6123      	str	r3, [r4, #16]
 800d33a:	b002      	add	sp, #8
 800d33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d340:	68a3      	ldr	r3, [r4, #8]
 800d342:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d346:	701a      	strb	r2, [r3, #0]
 800d348:	68a5      	ldr	r5, [r4, #8]
 800d34a:	e7c9      	b.n	800d2e0 <ucdr_serialize_int32_t+0xa8>
 800d34c:	9b01      	ldr	r3, [sp, #4]
 800d34e:	6013      	str	r3, [r2, #0]
 800d350:	e797      	b.n	800d282 <ucdr_serialize_int32_t+0x4a>
 800d352:	4628      	mov	r0, r5
 800d354:	ad01      	add	r5, sp, #4
 800d356:	4632      	mov	r2, r6
 800d358:	4629      	mov	r1, r5
 800d35a:	f010 fb40 	bl	801d9de <memcpy>
 800d35e:	68a0      	ldr	r0, [r4, #8]
 800d360:	4642      	mov	r2, r8
 800d362:	19a9      	adds	r1, r5, r6
 800d364:	f010 fb3b 	bl	801d9de <memcpy>
 800d368:	e7bd      	b.n	800d2e6 <ucdr_serialize_int32_t+0xae>
 800d36a:	bf00      	nop

0800d36c <ucdr_deserialize_int32_t>:
 800d36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d370:	460d      	mov	r5, r1
 800d372:	2104      	movs	r1, #4
 800d374:	4604      	mov	r4, r0
 800d376:	f000 fd83 	bl	800de80 <ucdr_buffer_alignment>
 800d37a:	4601      	mov	r1, r0
 800d37c:	4620      	mov	r0, r4
 800d37e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d382:	f000 fdc1 	bl	800df08 <ucdr_advance_buffer>
 800d386:	2104      	movs	r1, #4
 800d388:	4620      	mov	r0, r4
 800d38a:	f000 fd19 	bl	800ddc0 <ucdr_check_buffer_available_for>
 800d38e:	b1d8      	cbz	r0, 800d3c8 <ucdr_deserialize_int32_t+0x5c>
 800d390:	7d22      	ldrb	r2, [r4, #20]
 800d392:	68a3      	ldr	r3, [r4, #8]
 800d394:	2a01      	cmp	r2, #1
 800d396:	d052      	beq.n	800d43e <ucdr_deserialize_int32_t+0xd2>
 800d398:	78db      	ldrb	r3, [r3, #3]
 800d39a:	702b      	strb	r3, [r5, #0]
 800d39c:	68a3      	ldr	r3, [r4, #8]
 800d39e:	789b      	ldrb	r3, [r3, #2]
 800d3a0:	706b      	strb	r3, [r5, #1]
 800d3a2:	68a3      	ldr	r3, [r4, #8]
 800d3a4:	785b      	ldrb	r3, [r3, #1]
 800d3a6:	70ab      	strb	r3, [r5, #2]
 800d3a8:	68a3      	ldr	r3, [r4, #8]
 800d3aa:	781b      	ldrb	r3, [r3, #0]
 800d3ac:	70eb      	strb	r3, [r5, #3]
 800d3ae:	68a2      	ldr	r2, [r4, #8]
 800d3b0:	6923      	ldr	r3, [r4, #16]
 800d3b2:	3204      	adds	r2, #4
 800d3b4:	3304      	adds	r3, #4
 800d3b6:	2104      	movs	r1, #4
 800d3b8:	60a2      	str	r2, [r4, #8]
 800d3ba:	6123      	str	r3, [r4, #16]
 800d3bc:	7561      	strb	r1, [r4, #21]
 800d3be:	7da0      	ldrb	r0, [r4, #22]
 800d3c0:	f080 0001 	eor.w	r0, r0, #1
 800d3c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3c8:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d3cc:	42b7      	cmp	r7, r6
 800d3ce:	d92a      	bls.n	800d426 <ucdr_deserialize_int32_t+0xba>
 800d3d0:	6923      	ldr	r3, [r4, #16]
 800d3d2:	60a7      	str	r7, [r4, #8]
 800d3d4:	1bbf      	subs	r7, r7, r6
 800d3d6:	443b      	add	r3, r7
 800d3d8:	f1c7 0904 	rsb	r9, r7, #4
 800d3dc:	6123      	str	r3, [r4, #16]
 800d3de:	4649      	mov	r1, r9
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	f000 fcf9 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800d3e6:	b368      	cbz	r0, 800d444 <ucdr_deserialize_int32_t+0xd8>
 800d3e8:	7d23      	ldrb	r3, [r4, #20]
 800d3ea:	2b01      	cmp	r3, #1
 800d3ec:	d040      	beq.n	800d470 <ucdr_deserialize_int32_t+0x104>
 800d3ee:	78f3      	ldrb	r3, [r6, #3]
 800d3f0:	702b      	strb	r3, [r5, #0]
 800d3f2:	78b3      	ldrb	r3, [r6, #2]
 800d3f4:	706b      	strb	r3, [r5, #1]
 800d3f6:	2f01      	cmp	r7, #1
 800d3f8:	d031      	beq.n	800d45e <ucdr_deserialize_int32_t+0xf2>
 800d3fa:	7873      	ldrb	r3, [r6, #1]
 800d3fc:	70ab      	strb	r3, [r5, #2]
 800d3fe:	2f02      	cmp	r7, #2
 800d400:	f105 0503 	add.w	r5, r5, #3
 800d404:	d02f      	beq.n	800d466 <ucdr_deserialize_int32_t+0xfa>
 800d406:	7833      	ldrb	r3, [r6, #0]
 800d408:	702b      	strb	r3, [r5, #0]
 800d40a:	6923      	ldr	r3, [r4, #16]
 800d40c:	68a2      	ldr	r2, [r4, #8]
 800d40e:	7da0      	ldrb	r0, [r4, #22]
 800d410:	2104      	movs	r1, #4
 800d412:	3304      	adds	r3, #4
 800d414:	444a      	add	r2, r9
 800d416:	1bdb      	subs	r3, r3, r7
 800d418:	7561      	strb	r1, [r4, #21]
 800d41a:	60a2      	str	r2, [r4, #8]
 800d41c:	6123      	str	r3, [r4, #16]
 800d41e:	f080 0001 	eor.w	r0, r0, #1
 800d422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d426:	2104      	movs	r1, #4
 800d428:	4620      	mov	r0, r4
 800d42a:	f000 fcd5 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800d42e:	2800      	cmp	r0, #0
 800d430:	d0c5      	beq.n	800d3be <ucdr_deserialize_int32_t+0x52>
 800d432:	7d23      	ldrb	r3, [r4, #20]
 800d434:	68a2      	ldr	r2, [r4, #8]
 800d436:	2b01      	cmp	r3, #1
 800d438:	d017      	beq.n	800d46a <ucdr_deserialize_int32_t+0xfe>
 800d43a:	78d3      	ldrb	r3, [r2, #3]
 800d43c:	e7ad      	b.n	800d39a <ucdr_deserialize_int32_t+0x2e>
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	602b      	str	r3, [r5, #0]
 800d442:	e7b4      	b.n	800d3ae <ucdr_deserialize_int32_t+0x42>
 800d444:	68a2      	ldr	r2, [r4, #8]
 800d446:	6923      	ldr	r3, [r4, #16]
 800d448:	7da0      	ldrb	r0, [r4, #22]
 800d44a:	f884 8015 	strb.w	r8, [r4, #21]
 800d44e:	1bd2      	subs	r2, r2, r7
 800d450:	1bdb      	subs	r3, r3, r7
 800d452:	60a2      	str	r2, [r4, #8]
 800d454:	6123      	str	r3, [r4, #16]
 800d456:	f080 0001 	eor.w	r0, r0, #1
 800d45a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d45e:	68a3      	ldr	r3, [r4, #8]
 800d460:	785b      	ldrb	r3, [r3, #1]
 800d462:	70ab      	strb	r3, [r5, #2]
 800d464:	3503      	adds	r5, #3
 800d466:	68a6      	ldr	r6, [r4, #8]
 800d468:	e7cd      	b.n	800d406 <ucdr_deserialize_int32_t+0x9a>
 800d46a:	6813      	ldr	r3, [r2, #0]
 800d46c:	602b      	str	r3, [r5, #0]
 800d46e:	e79e      	b.n	800d3ae <ucdr_deserialize_int32_t+0x42>
 800d470:	4631      	mov	r1, r6
 800d472:	463a      	mov	r2, r7
 800d474:	4628      	mov	r0, r5
 800d476:	f010 fab2 	bl	801d9de <memcpy>
 800d47a:	68a1      	ldr	r1, [r4, #8]
 800d47c:	464a      	mov	r2, r9
 800d47e:	19e8      	adds	r0, r5, r7
 800d480:	f010 faad 	bl	801d9de <memcpy>
 800d484:	e7c1      	b.n	800d40a <ucdr_deserialize_int32_t+0x9e>
 800d486:	bf00      	nop

0800d488 <ucdr_serialize_int64_t>:
 800d488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d48c:	2108      	movs	r1, #8
 800d48e:	b082      	sub	sp, #8
 800d490:	4604      	mov	r4, r0
 800d492:	e9cd 2300 	strd	r2, r3, [sp]
 800d496:	f000 fcf3 	bl	800de80 <ucdr_buffer_alignment>
 800d49a:	4601      	mov	r1, r0
 800d49c:	4620      	mov	r0, r4
 800d49e:	7d67      	ldrb	r7, [r4, #21]
 800d4a0:	f000 fd32 	bl	800df08 <ucdr_advance_buffer>
 800d4a4:	2108      	movs	r1, #8
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	f000 fc8a 	bl	800ddc0 <ucdr_check_buffer_available_for>
 800d4ac:	2800      	cmp	r0, #0
 800d4ae:	d14d      	bne.n	800d54c <ucdr_serialize_int64_t+0xc4>
 800d4b0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d4b4:	42ab      	cmp	r3, r5
 800d4b6:	d944      	bls.n	800d542 <ucdr_serialize_int64_t+0xba>
 800d4b8:	1b5e      	subs	r6, r3, r5
 800d4ba:	60a3      	str	r3, [r4, #8]
 800d4bc:	6923      	ldr	r3, [r4, #16]
 800d4be:	f1c6 0808 	rsb	r8, r6, #8
 800d4c2:	4433      	add	r3, r6
 800d4c4:	6123      	str	r3, [r4, #16]
 800d4c6:	4641      	mov	r1, r8
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	f000 fc85 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800d4ce:	2800      	cmp	r0, #0
 800d4d0:	d072      	beq.n	800d5b8 <ucdr_serialize_int64_t+0x130>
 800d4d2:	7d23      	ldrb	r3, [r4, #20]
 800d4d4:	2b01      	cmp	r3, #1
 800d4d6:	f000 8092 	beq.w	800d5fe <ucdr_serialize_int64_t+0x176>
 800d4da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d4de:	702b      	strb	r3, [r5, #0]
 800d4e0:	2e01      	cmp	r6, #1
 800d4e2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d4e6:	706b      	strb	r3, [r5, #1]
 800d4e8:	d073      	beq.n	800d5d2 <ucdr_serialize_int64_t+0x14a>
 800d4ea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d4ee:	70ab      	strb	r3, [r5, #2]
 800d4f0:	2e02      	cmp	r6, #2
 800d4f2:	d072      	beq.n	800d5da <ucdr_serialize_int64_t+0x152>
 800d4f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d4f8:	70eb      	strb	r3, [r5, #3]
 800d4fa:	2e03      	cmp	r6, #3
 800d4fc:	d071      	beq.n	800d5e2 <ucdr_serialize_int64_t+0x15a>
 800d4fe:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d502:	712b      	strb	r3, [r5, #4]
 800d504:	2e04      	cmp	r6, #4
 800d506:	d070      	beq.n	800d5ea <ucdr_serialize_int64_t+0x162>
 800d508:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d50c:	716b      	strb	r3, [r5, #5]
 800d50e:	2e05      	cmp	r6, #5
 800d510:	d06f      	beq.n	800d5f2 <ucdr_serialize_int64_t+0x16a>
 800d512:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d516:	71ab      	strb	r3, [r5, #6]
 800d518:	2e06      	cmp	r6, #6
 800d51a:	d06e      	beq.n	800d5fa <ucdr_serialize_int64_t+0x172>
 800d51c:	3507      	adds	r5, #7
 800d51e:	f89d 3000 	ldrb.w	r3, [sp]
 800d522:	702b      	strb	r3, [r5, #0]
 800d524:	6923      	ldr	r3, [r4, #16]
 800d526:	68a2      	ldr	r2, [r4, #8]
 800d528:	7da0      	ldrb	r0, [r4, #22]
 800d52a:	3308      	adds	r3, #8
 800d52c:	4442      	add	r2, r8
 800d52e:	1b9b      	subs	r3, r3, r6
 800d530:	2108      	movs	r1, #8
 800d532:	f080 0001 	eor.w	r0, r0, #1
 800d536:	60a2      	str	r2, [r4, #8]
 800d538:	6123      	str	r3, [r4, #16]
 800d53a:	7561      	strb	r1, [r4, #21]
 800d53c:	b002      	add	sp, #8
 800d53e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d542:	2108      	movs	r1, #8
 800d544:	4620      	mov	r0, r4
 800d546:	f000 fc47 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800d54a:	b350      	cbz	r0, 800d5a2 <ucdr_serialize_int64_t+0x11a>
 800d54c:	7d22      	ldrb	r2, [r4, #20]
 800d54e:	68a3      	ldr	r3, [r4, #8]
 800d550:	2a01      	cmp	r2, #1
 800d552:	d02c      	beq.n	800d5ae <ucdr_serialize_int64_t+0x126>
 800d554:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d558:	701a      	strb	r2, [r3, #0]
 800d55a:	68a3      	ldr	r3, [r4, #8]
 800d55c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d560:	705a      	strb	r2, [r3, #1]
 800d562:	68a3      	ldr	r3, [r4, #8]
 800d564:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d568:	709a      	strb	r2, [r3, #2]
 800d56a:	68a3      	ldr	r3, [r4, #8]
 800d56c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d570:	70da      	strb	r2, [r3, #3]
 800d572:	68a3      	ldr	r3, [r4, #8]
 800d574:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d578:	711a      	strb	r2, [r3, #4]
 800d57a:	68a3      	ldr	r3, [r4, #8]
 800d57c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d580:	715a      	strb	r2, [r3, #5]
 800d582:	68a3      	ldr	r3, [r4, #8]
 800d584:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d588:	719a      	strb	r2, [r3, #6]
 800d58a:	68a3      	ldr	r3, [r4, #8]
 800d58c:	f89d 2000 	ldrb.w	r2, [sp]
 800d590:	71da      	strb	r2, [r3, #7]
 800d592:	68a2      	ldr	r2, [r4, #8]
 800d594:	6923      	ldr	r3, [r4, #16]
 800d596:	3208      	adds	r2, #8
 800d598:	3308      	adds	r3, #8
 800d59a:	2108      	movs	r1, #8
 800d59c:	60a2      	str	r2, [r4, #8]
 800d59e:	6123      	str	r3, [r4, #16]
 800d5a0:	7561      	strb	r1, [r4, #21]
 800d5a2:	7da0      	ldrb	r0, [r4, #22]
 800d5a4:	f080 0001 	eor.w	r0, r0, #1
 800d5a8:	b002      	add	sp, #8
 800d5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d5b2:	6019      	str	r1, [r3, #0]
 800d5b4:	605a      	str	r2, [r3, #4]
 800d5b6:	e7ec      	b.n	800d592 <ucdr_serialize_int64_t+0x10a>
 800d5b8:	68a2      	ldr	r2, [r4, #8]
 800d5ba:	6923      	ldr	r3, [r4, #16]
 800d5bc:	7da0      	ldrb	r0, [r4, #22]
 800d5be:	7567      	strb	r7, [r4, #21]
 800d5c0:	1b92      	subs	r2, r2, r6
 800d5c2:	1b9b      	subs	r3, r3, r6
 800d5c4:	f080 0001 	eor.w	r0, r0, #1
 800d5c8:	60a2      	str	r2, [r4, #8]
 800d5ca:	6123      	str	r3, [r4, #16]
 800d5cc:	b002      	add	sp, #8
 800d5ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5d2:	68a3      	ldr	r3, [r4, #8]
 800d5d4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d5d8:	701a      	strb	r2, [r3, #0]
 800d5da:	68a3      	ldr	r3, [r4, #8]
 800d5dc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d5e0:	701a      	strb	r2, [r3, #0]
 800d5e2:	68a3      	ldr	r3, [r4, #8]
 800d5e4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d5e8:	701a      	strb	r2, [r3, #0]
 800d5ea:	68a3      	ldr	r3, [r4, #8]
 800d5ec:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d5f0:	701a      	strb	r2, [r3, #0]
 800d5f2:	68a3      	ldr	r3, [r4, #8]
 800d5f4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d5f8:	701a      	strb	r2, [r3, #0]
 800d5fa:	68a5      	ldr	r5, [r4, #8]
 800d5fc:	e78f      	b.n	800d51e <ucdr_serialize_int64_t+0x96>
 800d5fe:	4628      	mov	r0, r5
 800d600:	466d      	mov	r5, sp
 800d602:	4632      	mov	r2, r6
 800d604:	4629      	mov	r1, r5
 800d606:	f010 f9ea 	bl	801d9de <memcpy>
 800d60a:	68a0      	ldr	r0, [r4, #8]
 800d60c:	4642      	mov	r2, r8
 800d60e:	19a9      	adds	r1, r5, r6
 800d610:	f010 f9e5 	bl	801d9de <memcpy>
 800d614:	e786      	b.n	800d524 <ucdr_serialize_int64_t+0x9c>
 800d616:	bf00      	nop

0800d618 <ucdr_deserialize_int64_t>:
 800d618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d61c:	460d      	mov	r5, r1
 800d61e:	2108      	movs	r1, #8
 800d620:	4604      	mov	r4, r0
 800d622:	f000 fc2d 	bl	800de80 <ucdr_buffer_alignment>
 800d626:	4601      	mov	r1, r0
 800d628:	4620      	mov	r0, r4
 800d62a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d62e:	f000 fc6b 	bl	800df08 <ucdr_advance_buffer>
 800d632:	2108      	movs	r1, #8
 800d634:	4620      	mov	r0, r4
 800d636:	f000 fbc3 	bl	800ddc0 <ucdr_check_buffer_available_for>
 800d63a:	2800      	cmp	r0, #0
 800d63c:	d147      	bne.n	800d6ce <ucdr_deserialize_int64_t+0xb6>
 800d63e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d642:	42be      	cmp	r6, r7
 800d644:	d93e      	bls.n	800d6c4 <ucdr_deserialize_int64_t+0xac>
 800d646:	6923      	ldr	r3, [r4, #16]
 800d648:	60a6      	str	r6, [r4, #8]
 800d64a:	1bf6      	subs	r6, r6, r7
 800d64c:	4433      	add	r3, r6
 800d64e:	f1c6 0908 	rsb	r9, r6, #8
 800d652:	6123      	str	r3, [r4, #16]
 800d654:	4649      	mov	r1, r9
 800d656:	4620      	mov	r0, r4
 800d658:	f000 fbbe 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800d65c:	2800      	cmp	r0, #0
 800d65e:	d063      	beq.n	800d728 <ucdr_deserialize_int64_t+0x110>
 800d660:	7d23      	ldrb	r3, [r4, #20]
 800d662:	2b01      	cmp	r3, #1
 800d664:	f000 8083 	beq.w	800d76e <ucdr_deserialize_int64_t+0x156>
 800d668:	79fb      	ldrb	r3, [r7, #7]
 800d66a:	702b      	strb	r3, [r5, #0]
 800d66c:	79bb      	ldrb	r3, [r7, #6]
 800d66e:	706b      	strb	r3, [r5, #1]
 800d670:	2e01      	cmp	r6, #1
 800d672:	d066      	beq.n	800d742 <ucdr_deserialize_int64_t+0x12a>
 800d674:	797b      	ldrb	r3, [r7, #5]
 800d676:	70ab      	strb	r3, [r5, #2]
 800d678:	2e02      	cmp	r6, #2
 800d67a:	f000 8089 	beq.w	800d790 <ucdr_deserialize_int64_t+0x178>
 800d67e:	793b      	ldrb	r3, [r7, #4]
 800d680:	70eb      	strb	r3, [r5, #3]
 800d682:	2e03      	cmp	r6, #3
 800d684:	f000 8082 	beq.w	800d78c <ucdr_deserialize_int64_t+0x174>
 800d688:	78fb      	ldrb	r3, [r7, #3]
 800d68a:	712b      	strb	r3, [r5, #4]
 800d68c:	2e04      	cmp	r6, #4
 800d68e:	d07b      	beq.n	800d788 <ucdr_deserialize_int64_t+0x170>
 800d690:	78bb      	ldrb	r3, [r7, #2]
 800d692:	716b      	strb	r3, [r5, #5]
 800d694:	2e05      	cmp	r6, #5
 800d696:	d075      	beq.n	800d784 <ucdr_deserialize_int64_t+0x16c>
 800d698:	787b      	ldrb	r3, [r7, #1]
 800d69a:	71ab      	strb	r3, [r5, #6]
 800d69c:	2e06      	cmp	r6, #6
 800d69e:	f105 0507 	add.w	r5, r5, #7
 800d6a2:	d062      	beq.n	800d76a <ucdr_deserialize_int64_t+0x152>
 800d6a4:	783b      	ldrb	r3, [r7, #0]
 800d6a6:	702b      	strb	r3, [r5, #0]
 800d6a8:	6923      	ldr	r3, [r4, #16]
 800d6aa:	68a2      	ldr	r2, [r4, #8]
 800d6ac:	7da0      	ldrb	r0, [r4, #22]
 800d6ae:	2108      	movs	r1, #8
 800d6b0:	3308      	adds	r3, #8
 800d6b2:	444a      	add	r2, r9
 800d6b4:	1b9b      	subs	r3, r3, r6
 800d6b6:	7561      	strb	r1, [r4, #21]
 800d6b8:	60a2      	str	r2, [r4, #8]
 800d6ba:	6123      	str	r3, [r4, #16]
 800d6bc:	f080 0001 	eor.w	r0, r0, #1
 800d6c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6c4:	2108      	movs	r1, #8
 800d6c6:	4620      	mov	r0, r4
 800d6c8:	f000 fb86 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800d6cc:	b310      	cbz	r0, 800d714 <ucdr_deserialize_int64_t+0xfc>
 800d6ce:	7d22      	ldrb	r2, [r4, #20]
 800d6d0:	68a3      	ldr	r3, [r4, #8]
 800d6d2:	2a01      	cmp	r2, #1
 800d6d4:	d023      	beq.n	800d71e <ucdr_deserialize_int64_t+0x106>
 800d6d6:	79db      	ldrb	r3, [r3, #7]
 800d6d8:	702b      	strb	r3, [r5, #0]
 800d6da:	68a3      	ldr	r3, [r4, #8]
 800d6dc:	799b      	ldrb	r3, [r3, #6]
 800d6de:	706b      	strb	r3, [r5, #1]
 800d6e0:	68a3      	ldr	r3, [r4, #8]
 800d6e2:	795b      	ldrb	r3, [r3, #5]
 800d6e4:	70ab      	strb	r3, [r5, #2]
 800d6e6:	68a3      	ldr	r3, [r4, #8]
 800d6e8:	791b      	ldrb	r3, [r3, #4]
 800d6ea:	70eb      	strb	r3, [r5, #3]
 800d6ec:	68a3      	ldr	r3, [r4, #8]
 800d6ee:	78db      	ldrb	r3, [r3, #3]
 800d6f0:	712b      	strb	r3, [r5, #4]
 800d6f2:	68a3      	ldr	r3, [r4, #8]
 800d6f4:	789b      	ldrb	r3, [r3, #2]
 800d6f6:	716b      	strb	r3, [r5, #5]
 800d6f8:	68a3      	ldr	r3, [r4, #8]
 800d6fa:	785b      	ldrb	r3, [r3, #1]
 800d6fc:	71ab      	strb	r3, [r5, #6]
 800d6fe:	68a3      	ldr	r3, [r4, #8]
 800d700:	781b      	ldrb	r3, [r3, #0]
 800d702:	71eb      	strb	r3, [r5, #7]
 800d704:	68a2      	ldr	r2, [r4, #8]
 800d706:	6923      	ldr	r3, [r4, #16]
 800d708:	3208      	adds	r2, #8
 800d70a:	3308      	adds	r3, #8
 800d70c:	2108      	movs	r1, #8
 800d70e:	60a2      	str	r2, [r4, #8]
 800d710:	6123      	str	r3, [r4, #16]
 800d712:	7561      	strb	r1, [r4, #21]
 800d714:	7da0      	ldrb	r0, [r4, #22]
 800d716:	f080 0001 	eor.w	r0, r0, #1
 800d71a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d71e:	681a      	ldr	r2, [r3, #0]
 800d720:	685b      	ldr	r3, [r3, #4]
 800d722:	606b      	str	r3, [r5, #4]
 800d724:	602a      	str	r2, [r5, #0]
 800d726:	e7ed      	b.n	800d704 <ucdr_deserialize_int64_t+0xec>
 800d728:	68a2      	ldr	r2, [r4, #8]
 800d72a:	6923      	ldr	r3, [r4, #16]
 800d72c:	7da0      	ldrb	r0, [r4, #22]
 800d72e:	f884 8015 	strb.w	r8, [r4, #21]
 800d732:	1b92      	subs	r2, r2, r6
 800d734:	1b9b      	subs	r3, r3, r6
 800d736:	60a2      	str	r2, [r4, #8]
 800d738:	6123      	str	r3, [r4, #16]
 800d73a:	f080 0001 	eor.w	r0, r0, #1
 800d73e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d742:	68a3      	ldr	r3, [r4, #8]
 800d744:	795b      	ldrb	r3, [r3, #5]
 800d746:	70ab      	strb	r3, [r5, #2]
 800d748:	3503      	adds	r5, #3
 800d74a:	68a3      	ldr	r3, [r4, #8]
 800d74c:	791b      	ldrb	r3, [r3, #4]
 800d74e:	f805 3b01 	strb.w	r3, [r5], #1
 800d752:	68a3      	ldr	r3, [r4, #8]
 800d754:	78db      	ldrb	r3, [r3, #3]
 800d756:	f805 3b01 	strb.w	r3, [r5], #1
 800d75a:	68a3      	ldr	r3, [r4, #8]
 800d75c:	789b      	ldrb	r3, [r3, #2]
 800d75e:	f805 3b01 	strb.w	r3, [r5], #1
 800d762:	68a3      	ldr	r3, [r4, #8]
 800d764:	785b      	ldrb	r3, [r3, #1]
 800d766:	f805 3b01 	strb.w	r3, [r5], #1
 800d76a:	68a7      	ldr	r7, [r4, #8]
 800d76c:	e79a      	b.n	800d6a4 <ucdr_deserialize_int64_t+0x8c>
 800d76e:	4639      	mov	r1, r7
 800d770:	4632      	mov	r2, r6
 800d772:	4628      	mov	r0, r5
 800d774:	f010 f933 	bl	801d9de <memcpy>
 800d778:	68a1      	ldr	r1, [r4, #8]
 800d77a:	464a      	mov	r2, r9
 800d77c:	19a8      	adds	r0, r5, r6
 800d77e:	f010 f92e 	bl	801d9de <memcpy>
 800d782:	e791      	b.n	800d6a8 <ucdr_deserialize_int64_t+0x90>
 800d784:	3506      	adds	r5, #6
 800d786:	e7ec      	b.n	800d762 <ucdr_deserialize_int64_t+0x14a>
 800d788:	3505      	adds	r5, #5
 800d78a:	e7e6      	b.n	800d75a <ucdr_deserialize_int64_t+0x142>
 800d78c:	3504      	adds	r5, #4
 800d78e:	e7e0      	b.n	800d752 <ucdr_deserialize_int64_t+0x13a>
 800d790:	3503      	adds	r5, #3
 800d792:	e7da      	b.n	800d74a <ucdr_deserialize_int64_t+0x132>

0800d794 <ucdr_serialize_double>:
 800d794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d798:	2108      	movs	r1, #8
 800d79a:	b082      	sub	sp, #8
 800d79c:	4604      	mov	r4, r0
 800d79e:	ed8d 0b00 	vstr	d0, [sp]
 800d7a2:	f000 fb6d 	bl	800de80 <ucdr_buffer_alignment>
 800d7a6:	4601      	mov	r1, r0
 800d7a8:	4620      	mov	r0, r4
 800d7aa:	7d67      	ldrb	r7, [r4, #21]
 800d7ac:	f000 fbac 	bl	800df08 <ucdr_advance_buffer>
 800d7b0:	2108      	movs	r1, #8
 800d7b2:	4620      	mov	r0, r4
 800d7b4:	f000 fb04 	bl	800ddc0 <ucdr_check_buffer_available_for>
 800d7b8:	2800      	cmp	r0, #0
 800d7ba:	d14d      	bne.n	800d858 <ucdr_serialize_double+0xc4>
 800d7bc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d7c0:	42ab      	cmp	r3, r5
 800d7c2:	d944      	bls.n	800d84e <ucdr_serialize_double+0xba>
 800d7c4:	1b5e      	subs	r6, r3, r5
 800d7c6:	60a3      	str	r3, [r4, #8]
 800d7c8:	6923      	ldr	r3, [r4, #16]
 800d7ca:	f1c6 0808 	rsb	r8, r6, #8
 800d7ce:	4433      	add	r3, r6
 800d7d0:	6123      	str	r3, [r4, #16]
 800d7d2:	4641      	mov	r1, r8
 800d7d4:	4620      	mov	r0, r4
 800d7d6:	f000 faff 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800d7da:	2800      	cmp	r0, #0
 800d7dc:	d072      	beq.n	800d8c4 <ucdr_serialize_double+0x130>
 800d7de:	7d23      	ldrb	r3, [r4, #20]
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	f000 8092 	beq.w	800d90a <ucdr_serialize_double+0x176>
 800d7e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d7ea:	702b      	strb	r3, [r5, #0]
 800d7ec:	2e01      	cmp	r6, #1
 800d7ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d7f2:	706b      	strb	r3, [r5, #1]
 800d7f4:	d073      	beq.n	800d8de <ucdr_serialize_double+0x14a>
 800d7f6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d7fa:	70ab      	strb	r3, [r5, #2]
 800d7fc:	2e02      	cmp	r6, #2
 800d7fe:	d072      	beq.n	800d8e6 <ucdr_serialize_double+0x152>
 800d800:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d804:	70eb      	strb	r3, [r5, #3]
 800d806:	2e03      	cmp	r6, #3
 800d808:	d071      	beq.n	800d8ee <ucdr_serialize_double+0x15a>
 800d80a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d80e:	712b      	strb	r3, [r5, #4]
 800d810:	2e04      	cmp	r6, #4
 800d812:	d070      	beq.n	800d8f6 <ucdr_serialize_double+0x162>
 800d814:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d818:	716b      	strb	r3, [r5, #5]
 800d81a:	2e05      	cmp	r6, #5
 800d81c:	d06f      	beq.n	800d8fe <ucdr_serialize_double+0x16a>
 800d81e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d822:	71ab      	strb	r3, [r5, #6]
 800d824:	2e06      	cmp	r6, #6
 800d826:	d06e      	beq.n	800d906 <ucdr_serialize_double+0x172>
 800d828:	3507      	adds	r5, #7
 800d82a:	f89d 3000 	ldrb.w	r3, [sp]
 800d82e:	702b      	strb	r3, [r5, #0]
 800d830:	6923      	ldr	r3, [r4, #16]
 800d832:	68a2      	ldr	r2, [r4, #8]
 800d834:	7da0      	ldrb	r0, [r4, #22]
 800d836:	3308      	adds	r3, #8
 800d838:	4442      	add	r2, r8
 800d83a:	1b9b      	subs	r3, r3, r6
 800d83c:	2108      	movs	r1, #8
 800d83e:	f080 0001 	eor.w	r0, r0, #1
 800d842:	60a2      	str	r2, [r4, #8]
 800d844:	6123      	str	r3, [r4, #16]
 800d846:	7561      	strb	r1, [r4, #21]
 800d848:	b002      	add	sp, #8
 800d84a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d84e:	2108      	movs	r1, #8
 800d850:	4620      	mov	r0, r4
 800d852:	f000 fac1 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800d856:	b350      	cbz	r0, 800d8ae <ucdr_serialize_double+0x11a>
 800d858:	7d22      	ldrb	r2, [r4, #20]
 800d85a:	68a3      	ldr	r3, [r4, #8]
 800d85c:	2a01      	cmp	r2, #1
 800d85e:	d02c      	beq.n	800d8ba <ucdr_serialize_double+0x126>
 800d860:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d864:	701a      	strb	r2, [r3, #0]
 800d866:	68a3      	ldr	r3, [r4, #8]
 800d868:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d86c:	705a      	strb	r2, [r3, #1]
 800d86e:	68a3      	ldr	r3, [r4, #8]
 800d870:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d874:	709a      	strb	r2, [r3, #2]
 800d876:	68a3      	ldr	r3, [r4, #8]
 800d878:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d87c:	70da      	strb	r2, [r3, #3]
 800d87e:	68a3      	ldr	r3, [r4, #8]
 800d880:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d884:	711a      	strb	r2, [r3, #4]
 800d886:	68a3      	ldr	r3, [r4, #8]
 800d888:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d88c:	715a      	strb	r2, [r3, #5]
 800d88e:	68a3      	ldr	r3, [r4, #8]
 800d890:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d894:	719a      	strb	r2, [r3, #6]
 800d896:	68a3      	ldr	r3, [r4, #8]
 800d898:	f89d 2000 	ldrb.w	r2, [sp]
 800d89c:	71da      	strb	r2, [r3, #7]
 800d89e:	68a2      	ldr	r2, [r4, #8]
 800d8a0:	6923      	ldr	r3, [r4, #16]
 800d8a2:	3208      	adds	r2, #8
 800d8a4:	3308      	adds	r3, #8
 800d8a6:	2108      	movs	r1, #8
 800d8a8:	60a2      	str	r2, [r4, #8]
 800d8aa:	6123      	str	r3, [r4, #16]
 800d8ac:	7561      	strb	r1, [r4, #21]
 800d8ae:	7da0      	ldrb	r0, [r4, #22]
 800d8b0:	f080 0001 	eor.w	r0, r0, #1
 800d8b4:	b002      	add	sp, #8
 800d8b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d8be:	6019      	str	r1, [r3, #0]
 800d8c0:	605a      	str	r2, [r3, #4]
 800d8c2:	e7ec      	b.n	800d89e <ucdr_serialize_double+0x10a>
 800d8c4:	68a2      	ldr	r2, [r4, #8]
 800d8c6:	6923      	ldr	r3, [r4, #16]
 800d8c8:	7da0      	ldrb	r0, [r4, #22]
 800d8ca:	7567      	strb	r7, [r4, #21]
 800d8cc:	1b92      	subs	r2, r2, r6
 800d8ce:	1b9b      	subs	r3, r3, r6
 800d8d0:	f080 0001 	eor.w	r0, r0, #1
 800d8d4:	60a2      	str	r2, [r4, #8]
 800d8d6:	6123      	str	r3, [r4, #16]
 800d8d8:	b002      	add	sp, #8
 800d8da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8de:	68a3      	ldr	r3, [r4, #8]
 800d8e0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d8e4:	701a      	strb	r2, [r3, #0]
 800d8e6:	68a3      	ldr	r3, [r4, #8]
 800d8e8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d8ec:	701a      	strb	r2, [r3, #0]
 800d8ee:	68a3      	ldr	r3, [r4, #8]
 800d8f0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d8f4:	701a      	strb	r2, [r3, #0]
 800d8f6:	68a3      	ldr	r3, [r4, #8]
 800d8f8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d8fc:	701a      	strb	r2, [r3, #0]
 800d8fe:	68a3      	ldr	r3, [r4, #8]
 800d900:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d904:	701a      	strb	r2, [r3, #0]
 800d906:	68a5      	ldr	r5, [r4, #8]
 800d908:	e78f      	b.n	800d82a <ucdr_serialize_double+0x96>
 800d90a:	4628      	mov	r0, r5
 800d90c:	466d      	mov	r5, sp
 800d90e:	4632      	mov	r2, r6
 800d910:	4629      	mov	r1, r5
 800d912:	f010 f864 	bl	801d9de <memcpy>
 800d916:	68a0      	ldr	r0, [r4, #8]
 800d918:	4642      	mov	r2, r8
 800d91a:	19a9      	adds	r1, r5, r6
 800d91c:	f010 f85f 	bl	801d9de <memcpy>
 800d920:	e786      	b.n	800d830 <ucdr_serialize_double+0x9c>
 800d922:	bf00      	nop

0800d924 <ucdr_serialize_endian_double>:
 800d924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d928:	460e      	mov	r6, r1
 800d92a:	b083      	sub	sp, #12
 800d92c:	2108      	movs	r1, #8
 800d92e:	4604      	mov	r4, r0
 800d930:	ed8d 0b00 	vstr	d0, [sp]
 800d934:	f000 faa4 	bl	800de80 <ucdr_buffer_alignment>
 800d938:	4601      	mov	r1, r0
 800d93a:	4620      	mov	r0, r4
 800d93c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d940:	f000 fae2 	bl	800df08 <ucdr_advance_buffer>
 800d944:	2108      	movs	r1, #8
 800d946:	4620      	mov	r0, r4
 800d948:	f000 fa3a 	bl	800ddc0 <ucdr_check_buffer_available_for>
 800d94c:	2800      	cmp	r0, #0
 800d94e:	d14c      	bne.n	800d9ea <ucdr_serialize_endian_double+0xc6>
 800d950:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800d954:	42bd      	cmp	r5, r7
 800d956:	d943      	bls.n	800d9e0 <ucdr_serialize_endian_double+0xbc>
 800d958:	6923      	ldr	r3, [r4, #16]
 800d95a:	60a5      	str	r5, [r4, #8]
 800d95c:	1bed      	subs	r5, r5, r7
 800d95e:	442b      	add	r3, r5
 800d960:	f1c5 0908 	rsb	r9, r5, #8
 800d964:	6123      	str	r3, [r4, #16]
 800d966:	4649      	mov	r1, r9
 800d968:	4620      	mov	r0, r4
 800d96a:	f000 fa35 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800d96e:	2800      	cmp	r0, #0
 800d970:	d070      	beq.n	800da54 <ucdr_serialize_endian_double+0x130>
 800d972:	2e01      	cmp	r6, #1
 800d974:	f000 8092 	beq.w	800da9c <ucdr_serialize_endian_double+0x178>
 800d978:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d97c:	703b      	strb	r3, [r7, #0]
 800d97e:	2d01      	cmp	r5, #1
 800d980:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d984:	707b      	strb	r3, [r7, #1]
 800d986:	d073      	beq.n	800da70 <ucdr_serialize_endian_double+0x14c>
 800d988:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d98c:	70bb      	strb	r3, [r7, #2]
 800d98e:	2d02      	cmp	r5, #2
 800d990:	d072      	beq.n	800da78 <ucdr_serialize_endian_double+0x154>
 800d992:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d996:	70fb      	strb	r3, [r7, #3]
 800d998:	2d03      	cmp	r5, #3
 800d99a:	d071      	beq.n	800da80 <ucdr_serialize_endian_double+0x15c>
 800d99c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d9a0:	713b      	strb	r3, [r7, #4]
 800d9a2:	2d04      	cmp	r5, #4
 800d9a4:	d070      	beq.n	800da88 <ucdr_serialize_endian_double+0x164>
 800d9a6:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d9aa:	717b      	strb	r3, [r7, #5]
 800d9ac:	2d05      	cmp	r5, #5
 800d9ae:	d06f      	beq.n	800da90 <ucdr_serialize_endian_double+0x16c>
 800d9b0:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d9b4:	71bb      	strb	r3, [r7, #6]
 800d9b6:	2d06      	cmp	r5, #6
 800d9b8:	d06e      	beq.n	800da98 <ucdr_serialize_endian_double+0x174>
 800d9ba:	3707      	adds	r7, #7
 800d9bc:	f89d 3000 	ldrb.w	r3, [sp]
 800d9c0:	703b      	strb	r3, [r7, #0]
 800d9c2:	6923      	ldr	r3, [r4, #16]
 800d9c4:	68a2      	ldr	r2, [r4, #8]
 800d9c6:	7da0      	ldrb	r0, [r4, #22]
 800d9c8:	3308      	adds	r3, #8
 800d9ca:	444a      	add	r2, r9
 800d9cc:	1b5b      	subs	r3, r3, r5
 800d9ce:	2108      	movs	r1, #8
 800d9d0:	f080 0001 	eor.w	r0, r0, #1
 800d9d4:	60a2      	str	r2, [r4, #8]
 800d9d6:	6123      	str	r3, [r4, #16]
 800d9d8:	7561      	strb	r1, [r4, #21]
 800d9da:	b003      	add	sp, #12
 800d9dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9e0:	2108      	movs	r1, #8
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	f000 f9f8 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800d9e8:	b348      	cbz	r0, 800da3e <ucdr_serialize_endian_double+0x11a>
 800d9ea:	2e01      	cmp	r6, #1
 800d9ec:	68a3      	ldr	r3, [r4, #8]
 800d9ee:	d02c      	beq.n	800da4a <ucdr_serialize_endian_double+0x126>
 800d9f0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d9f4:	701a      	strb	r2, [r3, #0]
 800d9f6:	68a3      	ldr	r3, [r4, #8]
 800d9f8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d9fc:	705a      	strb	r2, [r3, #1]
 800d9fe:	68a3      	ldr	r3, [r4, #8]
 800da00:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800da04:	709a      	strb	r2, [r3, #2]
 800da06:	68a3      	ldr	r3, [r4, #8]
 800da08:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800da0c:	70da      	strb	r2, [r3, #3]
 800da0e:	68a3      	ldr	r3, [r4, #8]
 800da10:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800da14:	711a      	strb	r2, [r3, #4]
 800da16:	68a3      	ldr	r3, [r4, #8]
 800da18:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800da1c:	715a      	strb	r2, [r3, #5]
 800da1e:	68a3      	ldr	r3, [r4, #8]
 800da20:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800da24:	719a      	strb	r2, [r3, #6]
 800da26:	68a3      	ldr	r3, [r4, #8]
 800da28:	f89d 2000 	ldrb.w	r2, [sp]
 800da2c:	71da      	strb	r2, [r3, #7]
 800da2e:	68a2      	ldr	r2, [r4, #8]
 800da30:	6923      	ldr	r3, [r4, #16]
 800da32:	3208      	adds	r2, #8
 800da34:	3308      	adds	r3, #8
 800da36:	2108      	movs	r1, #8
 800da38:	60a2      	str	r2, [r4, #8]
 800da3a:	6123      	str	r3, [r4, #16]
 800da3c:	7561      	strb	r1, [r4, #21]
 800da3e:	7da0      	ldrb	r0, [r4, #22]
 800da40:	f080 0001 	eor.w	r0, r0, #1
 800da44:	b003      	add	sp, #12
 800da46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da4a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800da4e:	6019      	str	r1, [r3, #0]
 800da50:	605a      	str	r2, [r3, #4]
 800da52:	e7ec      	b.n	800da2e <ucdr_serialize_endian_double+0x10a>
 800da54:	68a2      	ldr	r2, [r4, #8]
 800da56:	6923      	ldr	r3, [r4, #16]
 800da58:	7da0      	ldrb	r0, [r4, #22]
 800da5a:	f884 8015 	strb.w	r8, [r4, #21]
 800da5e:	1b52      	subs	r2, r2, r5
 800da60:	1b5b      	subs	r3, r3, r5
 800da62:	f080 0001 	eor.w	r0, r0, #1
 800da66:	60a2      	str	r2, [r4, #8]
 800da68:	6123      	str	r3, [r4, #16]
 800da6a:	b003      	add	sp, #12
 800da6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da70:	68a3      	ldr	r3, [r4, #8]
 800da72:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800da76:	701a      	strb	r2, [r3, #0]
 800da78:	68a3      	ldr	r3, [r4, #8]
 800da7a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800da7e:	701a      	strb	r2, [r3, #0]
 800da80:	68a3      	ldr	r3, [r4, #8]
 800da82:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800da86:	701a      	strb	r2, [r3, #0]
 800da88:	68a3      	ldr	r3, [r4, #8]
 800da8a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800da8e:	701a      	strb	r2, [r3, #0]
 800da90:	68a3      	ldr	r3, [r4, #8]
 800da92:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800da96:	701a      	strb	r2, [r3, #0]
 800da98:	68a7      	ldr	r7, [r4, #8]
 800da9a:	e78f      	b.n	800d9bc <ucdr_serialize_endian_double+0x98>
 800da9c:	466e      	mov	r6, sp
 800da9e:	462a      	mov	r2, r5
 800daa0:	4631      	mov	r1, r6
 800daa2:	4638      	mov	r0, r7
 800daa4:	f00f ff9b 	bl	801d9de <memcpy>
 800daa8:	68a0      	ldr	r0, [r4, #8]
 800daaa:	464a      	mov	r2, r9
 800daac:	1971      	adds	r1, r6, r5
 800daae:	f00f ff96 	bl	801d9de <memcpy>
 800dab2:	e786      	b.n	800d9c2 <ucdr_serialize_endian_double+0x9e>

0800dab4 <ucdr_deserialize_double>:
 800dab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dab8:	460d      	mov	r5, r1
 800daba:	2108      	movs	r1, #8
 800dabc:	4604      	mov	r4, r0
 800dabe:	f000 f9df 	bl	800de80 <ucdr_buffer_alignment>
 800dac2:	4601      	mov	r1, r0
 800dac4:	4620      	mov	r0, r4
 800dac6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800daca:	f000 fa1d 	bl	800df08 <ucdr_advance_buffer>
 800dace:	2108      	movs	r1, #8
 800dad0:	4620      	mov	r0, r4
 800dad2:	f000 f975 	bl	800ddc0 <ucdr_check_buffer_available_for>
 800dad6:	2800      	cmp	r0, #0
 800dad8:	d147      	bne.n	800db6a <ucdr_deserialize_double+0xb6>
 800dada:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800dade:	42be      	cmp	r6, r7
 800dae0:	d93e      	bls.n	800db60 <ucdr_deserialize_double+0xac>
 800dae2:	6923      	ldr	r3, [r4, #16]
 800dae4:	60a6      	str	r6, [r4, #8]
 800dae6:	1bf6      	subs	r6, r6, r7
 800dae8:	4433      	add	r3, r6
 800daea:	f1c6 0908 	rsb	r9, r6, #8
 800daee:	6123      	str	r3, [r4, #16]
 800daf0:	4649      	mov	r1, r9
 800daf2:	4620      	mov	r0, r4
 800daf4:	f000 f970 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800daf8:	2800      	cmp	r0, #0
 800dafa:	d063      	beq.n	800dbc4 <ucdr_deserialize_double+0x110>
 800dafc:	7d23      	ldrb	r3, [r4, #20]
 800dafe:	2b01      	cmp	r3, #1
 800db00:	f000 8083 	beq.w	800dc0a <ucdr_deserialize_double+0x156>
 800db04:	79fb      	ldrb	r3, [r7, #7]
 800db06:	702b      	strb	r3, [r5, #0]
 800db08:	79bb      	ldrb	r3, [r7, #6]
 800db0a:	706b      	strb	r3, [r5, #1]
 800db0c:	2e01      	cmp	r6, #1
 800db0e:	d066      	beq.n	800dbde <ucdr_deserialize_double+0x12a>
 800db10:	797b      	ldrb	r3, [r7, #5]
 800db12:	70ab      	strb	r3, [r5, #2]
 800db14:	2e02      	cmp	r6, #2
 800db16:	f000 8089 	beq.w	800dc2c <ucdr_deserialize_double+0x178>
 800db1a:	793b      	ldrb	r3, [r7, #4]
 800db1c:	70eb      	strb	r3, [r5, #3]
 800db1e:	2e03      	cmp	r6, #3
 800db20:	f000 8082 	beq.w	800dc28 <ucdr_deserialize_double+0x174>
 800db24:	78fb      	ldrb	r3, [r7, #3]
 800db26:	712b      	strb	r3, [r5, #4]
 800db28:	2e04      	cmp	r6, #4
 800db2a:	d07b      	beq.n	800dc24 <ucdr_deserialize_double+0x170>
 800db2c:	78bb      	ldrb	r3, [r7, #2]
 800db2e:	716b      	strb	r3, [r5, #5]
 800db30:	2e05      	cmp	r6, #5
 800db32:	d075      	beq.n	800dc20 <ucdr_deserialize_double+0x16c>
 800db34:	787b      	ldrb	r3, [r7, #1]
 800db36:	71ab      	strb	r3, [r5, #6]
 800db38:	2e06      	cmp	r6, #6
 800db3a:	f105 0507 	add.w	r5, r5, #7
 800db3e:	d062      	beq.n	800dc06 <ucdr_deserialize_double+0x152>
 800db40:	783b      	ldrb	r3, [r7, #0]
 800db42:	702b      	strb	r3, [r5, #0]
 800db44:	6923      	ldr	r3, [r4, #16]
 800db46:	68a2      	ldr	r2, [r4, #8]
 800db48:	7da0      	ldrb	r0, [r4, #22]
 800db4a:	2108      	movs	r1, #8
 800db4c:	3308      	adds	r3, #8
 800db4e:	444a      	add	r2, r9
 800db50:	1b9b      	subs	r3, r3, r6
 800db52:	7561      	strb	r1, [r4, #21]
 800db54:	60a2      	str	r2, [r4, #8]
 800db56:	6123      	str	r3, [r4, #16]
 800db58:	f080 0001 	eor.w	r0, r0, #1
 800db5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db60:	2108      	movs	r1, #8
 800db62:	4620      	mov	r0, r4
 800db64:	f000 f938 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800db68:	b310      	cbz	r0, 800dbb0 <ucdr_deserialize_double+0xfc>
 800db6a:	7d22      	ldrb	r2, [r4, #20]
 800db6c:	68a3      	ldr	r3, [r4, #8]
 800db6e:	2a01      	cmp	r2, #1
 800db70:	d023      	beq.n	800dbba <ucdr_deserialize_double+0x106>
 800db72:	79db      	ldrb	r3, [r3, #7]
 800db74:	702b      	strb	r3, [r5, #0]
 800db76:	68a3      	ldr	r3, [r4, #8]
 800db78:	799b      	ldrb	r3, [r3, #6]
 800db7a:	706b      	strb	r3, [r5, #1]
 800db7c:	68a3      	ldr	r3, [r4, #8]
 800db7e:	795b      	ldrb	r3, [r3, #5]
 800db80:	70ab      	strb	r3, [r5, #2]
 800db82:	68a3      	ldr	r3, [r4, #8]
 800db84:	791b      	ldrb	r3, [r3, #4]
 800db86:	70eb      	strb	r3, [r5, #3]
 800db88:	68a3      	ldr	r3, [r4, #8]
 800db8a:	78db      	ldrb	r3, [r3, #3]
 800db8c:	712b      	strb	r3, [r5, #4]
 800db8e:	68a3      	ldr	r3, [r4, #8]
 800db90:	789b      	ldrb	r3, [r3, #2]
 800db92:	716b      	strb	r3, [r5, #5]
 800db94:	68a3      	ldr	r3, [r4, #8]
 800db96:	785b      	ldrb	r3, [r3, #1]
 800db98:	71ab      	strb	r3, [r5, #6]
 800db9a:	68a3      	ldr	r3, [r4, #8]
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	71eb      	strb	r3, [r5, #7]
 800dba0:	68a2      	ldr	r2, [r4, #8]
 800dba2:	6923      	ldr	r3, [r4, #16]
 800dba4:	3208      	adds	r2, #8
 800dba6:	3308      	adds	r3, #8
 800dba8:	2108      	movs	r1, #8
 800dbaa:	60a2      	str	r2, [r4, #8]
 800dbac:	6123      	str	r3, [r4, #16]
 800dbae:	7561      	strb	r1, [r4, #21]
 800dbb0:	7da0      	ldrb	r0, [r4, #22]
 800dbb2:	f080 0001 	eor.w	r0, r0, #1
 800dbb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbba:	681a      	ldr	r2, [r3, #0]
 800dbbc:	685b      	ldr	r3, [r3, #4]
 800dbbe:	606b      	str	r3, [r5, #4]
 800dbc0:	602a      	str	r2, [r5, #0]
 800dbc2:	e7ed      	b.n	800dba0 <ucdr_deserialize_double+0xec>
 800dbc4:	68a2      	ldr	r2, [r4, #8]
 800dbc6:	6923      	ldr	r3, [r4, #16]
 800dbc8:	7da0      	ldrb	r0, [r4, #22]
 800dbca:	f884 8015 	strb.w	r8, [r4, #21]
 800dbce:	1b92      	subs	r2, r2, r6
 800dbd0:	1b9b      	subs	r3, r3, r6
 800dbd2:	60a2      	str	r2, [r4, #8]
 800dbd4:	6123      	str	r3, [r4, #16]
 800dbd6:	f080 0001 	eor.w	r0, r0, #1
 800dbda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbde:	68a3      	ldr	r3, [r4, #8]
 800dbe0:	795b      	ldrb	r3, [r3, #5]
 800dbe2:	70ab      	strb	r3, [r5, #2]
 800dbe4:	3503      	adds	r5, #3
 800dbe6:	68a3      	ldr	r3, [r4, #8]
 800dbe8:	791b      	ldrb	r3, [r3, #4]
 800dbea:	f805 3b01 	strb.w	r3, [r5], #1
 800dbee:	68a3      	ldr	r3, [r4, #8]
 800dbf0:	78db      	ldrb	r3, [r3, #3]
 800dbf2:	f805 3b01 	strb.w	r3, [r5], #1
 800dbf6:	68a3      	ldr	r3, [r4, #8]
 800dbf8:	789b      	ldrb	r3, [r3, #2]
 800dbfa:	f805 3b01 	strb.w	r3, [r5], #1
 800dbfe:	68a3      	ldr	r3, [r4, #8]
 800dc00:	785b      	ldrb	r3, [r3, #1]
 800dc02:	f805 3b01 	strb.w	r3, [r5], #1
 800dc06:	68a7      	ldr	r7, [r4, #8]
 800dc08:	e79a      	b.n	800db40 <ucdr_deserialize_double+0x8c>
 800dc0a:	4639      	mov	r1, r7
 800dc0c:	4632      	mov	r2, r6
 800dc0e:	4628      	mov	r0, r5
 800dc10:	f00f fee5 	bl	801d9de <memcpy>
 800dc14:	68a1      	ldr	r1, [r4, #8]
 800dc16:	464a      	mov	r2, r9
 800dc18:	19a8      	adds	r0, r5, r6
 800dc1a:	f00f fee0 	bl	801d9de <memcpy>
 800dc1e:	e791      	b.n	800db44 <ucdr_deserialize_double+0x90>
 800dc20:	3506      	adds	r5, #6
 800dc22:	e7ec      	b.n	800dbfe <ucdr_deserialize_double+0x14a>
 800dc24:	3505      	adds	r5, #5
 800dc26:	e7e6      	b.n	800dbf6 <ucdr_deserialize_double+0x142>
 800dc28:	3504      	adds	r5, #4
 800dc2a:	e7e0      	b.n	800dbee <ucdr_deserialize_double+0x13a>
 800dc2c:	3503      	adds	r5, #3
 800dc2e:	e7da      	b.n	800dbe6 <ucdr_deserialize_double+0x132>

0800dc30 <ucdr_deserialize_endian_double>:
 800dc30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc34:	460f      	mov	r7, r1
 800dc36:	2108      	movs	r1, #8
 800dc38:	4604      	mov	r4, r0
 800dc3a:	4615      	mov	r5, r2
 800dc3c:	f000 f920 	bl	800de80 <ucdr_buffer_alignment>
 800dc40:	4601      	mov	r1, r0
 800dc42:	4620      	mov	r0, r4
 800dc44:	f894 9015 	ldrb.w	r9, [r4, #21]
 800dc48:	f000 f95e 	bl	800df08 <ucdr_advance_buffer>
 800dc4c:	2108      	movs	r1, #8
 800dc4e:	4620      	mov	r0, r4
 800dc50:	f000 f8b6 	bl	800ddc0 <ucdr_check_buffer_available_for>
 800dc54:	2800      	cmp	r0, #0
 800dc56:	d14f      	bne.n	800dcf8 <ucdr_deserialize_endian_double+0xc8>
 800dc58:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800dc5c:	4546      	cmp	r6, r8
 800dc5e:	d946      	bls.n	800dcee <ucdr_deserialize_endian_double+0xbe>
 800dc60:	6923      	ldr	r3, [r4, #16]
 800dc62:	60a6      	str	r6, [r4, #8]
 800dc64:	eba6 0608 	sub.w	r6, r6, r8
 800dc68:	4433      	add	r3, r6
 800dc6a:	f1c6 0a08 	rsb	sl, r6, #8
 800dc6e:	6123      	str	r3, [r4, #16]
 800dc70:	4651      	mov	r1, sl
 800dc72:	4620      	mov	r0, r4
 800dc74:	f000 f8b0 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800dc78:	2800      	cmp	r0, #0
 800dc7a:	d069      	beq.n	800dd50 <ucdr_deserialize_endian_double+0x120>
 800dc7c:	2f01      	cmp	r7, #1
 800dc7e:	f000 808b 	beq.w	800dd98 <ucdr_deserialize_endian_double+0x168>
 800dc82:	f898 3007 	ldrb.w	r3, [r8, #7]
 800dc86:	702b      	strb	r3, [r5, #0]
 800dc88:	f898 3006 	ldrb.w	r3, [r8, #6]
 800dc8c:	706b      	strb	r3, [r5, #1]
 800dc8e:	2e01      	cmp	r6, #1
 800dc90:	d06b      	beq.n	800dd6a <ucdr_deserialize_endian_double+0x13a>
 800dc92:	f898 3005 	ldrb.w	r3, [r8, #5]
 800dc96:	70ab      	strb	r3, [r5, #2]
 800dc98:	2e02      	cmp	r6, #2
 800dc9a:	f000 808e 	beq.w	800ddba <ucdr_deserialize_endian_double+0x18a>
 800dc9e:	f898 3004 	ldrb.w	r3, [r8, #4]
 800dca2:	70eb      	strb	r3, [r5, #3]
 800dca4:	2e03      	cmp	r6, #3
 800dca6:	f000 8086 	beq.w	800ddb6 <ucdr_deserialize_endian_double+0x186>
 800dcaa:	f898 3003 	ldrb.w	r3, [r8, #3]
 800dcae:	712b      	strb	r3, [r5, #4]
 800dcb0:	2e04      	cmp	r6, #4
 800dcb2:	d07e      	beq.n	800ddb2 <ucdr_deserialize_endian_double+0x182>
 800dcb4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800dcb8:	716b      	strb	r3, [r5, #5]
 800dcba:	2e05      	cmp	r6, #5
 800dcbc:	d077      	beq.n	800ddae <ucdr_deserialize_endian_double+0x17e>
 800dcbe:	f898 3001 	ldrb.w	r3, [r8, #1]
 800dcc2:	71ab      	strb	r3, [r5, #6]
 800dcc4:	2e06      	cmp	r6, #6
 800dcc6:	f105 0507 	add.w	r5, r5, #7
 800dcca:	d062      	beq.n	800dd92 <ucdr_deserialize_endian_double+0x162>
 800dccc:	f898 3000 	ldrb.w	r3, [r8]
 800dcd0:	702b      	strb	r3, [r5, #0]
 800dcd2:	6923      	ldr	r3, [r4, #16]
 800dcd4:	68a2      	ldr	r2, [r4, #8]
 800dcd6:	7da0      	ldrb	r0, [r4, #22]
 800dcd8:	2108      	movs	r1, #8
 800dcda:	3308      	adds	r3, #8
 800dcdc:	4452      	add	r2, sl
 800dcde:	1b9b      	subs	r3, r3, r6
 800dce0:	7561      	strb	r1, [r4, #21]
 800dce2:	60a2      	str	r2, [r4, #8]
 800dce4:	6123      	str	r3, [r4, #16]
 800dce6:	f080 0001 	eor.w	r0, r0, #1
 800dcea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcee:	2108      	movs	r1, #8
 800dcf0:	4620      	mov	r0, r4
 800dcf2:	f000 f871 	bl	800ddd8 <ucdr_check_final_buffer_behavior>
 800dcf6:	b308      	cbz	r0, 800dd3c <ucdr_deserialize_endian_double+0x10c>
 800dcf8:	2f01      	cmp	r7, #1
 800dcfa:	68a3      	ldr	r3, [r4, #8]
 800dcfc:	d023      	beq.n	800dd46 <ucdr_deserialize_endian_double+0x116>
 800dcfe:	79db      	ldrb	r3, [r3, #7]
 800dd00:	702b      	strb	r3, [r5, #0]
 800dd02:	68a3      	ldr	r3, [r4, #8]
 800dd04:	799b      	ldrb	r3, [r3, #6]
 800dd06:	706b      	strb	r3, [r5, #1]
 800dd08:	68a3      	ldr	r3, [r4, #8]
 800dd0a:	795b      	ldrb	r3, [r3, #5]
 800dd0c:	70ab      	strb	r3, [r5, #2]
 800dd0e:	68a3      	ldr	r3, [r4, #8]
 800dd10:	791b      	ldrb	r3, [r3, #4]
 800dd12:	70eb      	strb	r3, [r5, #3]
 800dd14:	68a3      	ldr	r3, [r4, #8]
 800dd16:	78db      	ldrb	r3, [r3, #3]
 800dd18:	712b      	strb	r3, [r5, #4]
 800dd1a:	68a3      	ldr	r3, [r4, #8]
 800dd1c:	789b      	ldrb	r3, [r3, #2]
 800dd1e:	716b      	strb	r3, [r5, #5]
 800dd20:	68a3      	ldr	r3, [r4, #8]
 800dd22:	785b      	ldrb	r3, [r3, #1]
 800dd24:	71ab      	strb	r3, [r5, #6]
 800dd26:	68a3      	ldr	r3, [r4, #8]
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	71eb      	strb	r3, [r5, #7]
 800dd2c:	68a2      	ldr	r2, [r4, #8]
 800dd2e:	6923      	ldr	r3, [r4, #16]
 800dd30:	3208      	adds	r2, #8
 800dd32:	3308      	adds	r3, #8
 800dd34:	2108      	movs	r1, #8
 800dd36:	60a2      	str	r2, [r4, #8]
 800dd38:	6123      	str	r3, [r4, #16]
 800dd3a:	7561      	strb	r1, [r4, #21]
 800dd3c:	7da0      	ldrb	r0, [r4, #22]
 800dd3e:	f080 0001 	eor.w	r0, r0, #1
 800dd42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd46:	681a      	ldr	r2, [r3, #0]
 800dd48:	685b      	ldr	r3, [r3, #4]
 800dd4a:	606b      	str	r3, [r5, #4]
 800dd4c:	602a      	str	r2, [r5, #0]
 800dd4e:	e7ed      	b.n	800dd2c <ucdr_deserialize_endian_double+0xfc>
 800dd50:	68a2      	ldr	r2, [r4, #8]
 800dd52:	6923      	ldr	r3, [r4, #16]
 800dd54:	7da0      	ldrb	r0, [r4, #22]
 800dd56:	f884 9015 	strb.w	r9, [r4, #21]
 800dd5a:	1b92      	subs	r2, r2, r6
 800dd5c:	1b9b      	subs	r3, r3, r6
 800dd5e:	60a2      	str	r2, [r4, #8]
 800dd60:	6123      	str	r3, [r4, #16]
 800dd62:	f080 0001 	eor.w	r0, r0, #1
 800dd66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd6a:	68a3      	ldr	r3, [r4, #8]
 800dd6c:	795b      	ldrb	r3, [r3, #5]
 800dd6e:	70ab      	strb	r3, [r5, #2]
 800dd70:	3503      	adds	r5, #3
 800dd72:	68a3      	ldr	r3, [r4, #8]
 800dd74:	791b      	ldrb	r3, [r3, #4]
 800dd76:	f805 3b01 	strb.w	r3, [r5], #1
 800dd7a:	68a3      	ldr	r3, [r4, #8]
 800dd7c:	78db      	ldrb	r3, [r3, #3]
 800dd7e:	f805 3b01 	strb.w	r3, [r5], #1
 800dd82:	68a3      	ldr	r3, [r4, #8]
 800dd84:	789b      	ldrb	r3, [r3, #2]
 800dd86:	f805 3b01 	strb.w	r3, [r5], #1
 800dd8a:	68a3      	ldr	r3, [r4, #8]
 800dd8c:	785b      	ldrb	r3, [r3, #1]
 800dd8e:	f805 3b01 	strb.w	r3, [r5], #1
 800dd92:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800dd96:	e799      	b.n	800dccc <ucdr_deserialize_endian_double+0x9c>
 800dd98:	4641      	mov	r1, r8
 800dd9a:	4632      	mov	r2, r6
 800dd9c:	4628      	mov	r0, r5
 800dd9e:	f00f fe1e 	bl	801d9de <memcpy>
 800dda2:	68a1      	ldr	r1, [r4, #8]
 800dda4:	4652      	mov	r2, sl
 800dda6:	19a8      	adds	r0, r5, r6
 800dda8:	f00f fe19 	bl	801d9de <memcpy>
 800ddac:	e791      	b.n	800dcd2 <ucdr_deserialize_endian_double+0xa2>
 800ddae:	3506      	adds	r5, #6
 800ddb0:	e7eb      	b.n	800dd8a <ucdr_deserialize_endian_double+0x15a>
 800ddb2:	3505      	adds	r5, #5
 800ddb4:	e7e5      	b.n	800dd82 <ucdr_deserialize_endian_double+0x152>
 800ddb6:	3504      	adds	r5, #4
 800ddb8:	e7df      	b.n	800dd7a <ucdr_deserialize_endian_double+0x14a>
 800ddba:	3503      	adds	r5, #3
 800ddbc:	e7d9      	b.n	800dd72 <ucdr_deserialize_endian_double+0x142>
 800ddbe:	bf00      	nop

0800ddc0 <ucdr_check_buffer_available_for>:
 800ddc0:	7d83      	ldrb	r3, [r0, #22]
 800ddc2:	b93b      	cbnz	r3, 800ddd4 <ucdr_check_buffer_available_for+0x14>
 800ddc4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800ddc8:	440b      	add	r3, r1
 800ddca:	4298      	cmp	r0, r3
 800ddcc:	bf34      	ite	cc
 800ddce:	2000      	movcc	r0, #0
 800ddd0:	2001      	movcs	r0, #1
 800ddd2:	4770      	bx	lr
 800ddd4:	2000      	movs	r0, #0
 800ddd6:	4770      	bx	lr

0800ddd8 <ucdr_check_final_buffer_behavior>:
 800ddd8:	7d83      	ldrb	r3, [r0, #22]
 800ddda:	b943      	cbnz	r3, 800ddee <ucdr_check_final_buffer_behavior+0x16>
 800dddc:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800dde0:	4291      	cmp	r1, r2
 800dde2:	b510      	push	{r4, lr}
 800dde4:	4604      	mov	r4, r0
 800dde6:	d205      	bcs.n	800ddf4 <ucdr_check_final_buffer_behavior+0x1c>
 800dde8:	2301      	movs	r3, #1
 800ddea:	4618      	mov	r0, r3
 800ddec:	bd10      	pop	{r4, pc}
 800ddee:	2300      	movs	r3, #0
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	4770      	bx	lr
 800ddf4:	6982      	ldr	r2, [r0, #24]
 800ddf6:	b13a      	cbz	r2, 800de08 <ucdr_check_final_buffer_behavior+0x30>
 800ddf8:	69c1      	ldr	r1, [r0, #28]
 800ddfa:	4790      	blx	r2
 800ddfc:	f080 0301 	eor.w	r3, r0, #1
 800de00:	b2db      	uxtb	r3, r3
 800de02:	75a0      	strb	r0, [r4, #22]
 800de04:	4618      	mov	r0, r3
 800de06:	bd10      	pop	{r4, pc}
 800de08:	2001      	movs	r0, #1
 800de0a:	75a0      	strb	r0, [r4, #22]
 800de0c:	e7fa      	b.n	800de04 <ucdr_check_final_buffer_behavior+0x2c>
 800de0e:	bf00      	nop

0800de10 <ucdr_set_on_full_buffer_callback>:
 800de10:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800de14:	4770      	bx	lr
 800de16:	bf00      	nop

0800de18 <ucdr_init_buffer_origin_offset_endian>:
 800de18:	b410      	push	{r4}
 800de1a:	9c01      	ldr	r4, [sp, #4]
 800de1c:	6001      	str	r1, [r0, #0]
 800de1e:	440a      	add	r2, r1
 800de20:	6042      	str	r2, [r0, #4]
 800de22:	190a      	adds	r2, r1, r4
 800de24:	441c      	add	r4, r3
 800de26:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800de2a:	6082      	str	r2, [r0, #8]
 800de2c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800de30:	7503      	strb	r3, [r0, #20]
 800de32:	2200      	movs	r2, #0
 800de34:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800de38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de3c:	7542      	strb	r2, [r0, #21]
 800de3e:	7582      	strb	r2, [r0, #22]
 800de40:	4770      	bx	lr
 800de42:	bf00      	nop

0800de44 <ucdr_init_buffer_origin_offset>:
 800de44:	b510      	push	{r4, lr}
 800de46:	b082      	sub	sp, #8
 800de48:	9c04      	ldr	r4, [sp, #16]
 800de4a:	9400      	str	r4, [sp, #0]
 800de4c:	2401      	movs	r4, #1
 800de4e:	9401      	str	r4, [sp, #4]
 800de50:	f7ff ffe2 	bl	800de18 <ucdr_init_buffer_origin_offset_endian>
 800de54:	b002      	add	sp, #8
 800de56:	bd10      	pop	{r4, pc}

0800de58 <ucdr_init_buffer_origin>:
 800de58:	b510      	push	{r4, lr}
 800de5a:	b082      	sub	sp, #8
 800de5c:	2400      	movs	r4, #0
 800de5e:	9400      	str	r4, [sp, #0]
 800de60:	f7ff fff0 	bl	800de44 <ucdr_init_buffer_origin_offset>
 800de64:	b002      	add	sp, #8
 800de66:	bd10      	pop	{r4, pc}

0800de68 <ucdr_init_buffer>:
 800de68:	2300      	movs	r3, #0
 800de6a:	f7ff bff5 	b.w	800de58 <ucdr_init_buffer_origin>
 800de6e:	bf00      	nop

0800de70 <ucdr_alignment>:
 800de70:	fbb0 f3f1 	udiv	r3, r0, r1
 800de74:	fb03 0011 	mls	r0, r3, r1, r0
 800de78:	1a08      	subs	r0, r1, r0
 800de7a:	3901      	subs	r1, #1
 800de7c:	4008      	ands	r0, r1
 800de7e:	4770      	bx	lr

0800de80 <ucdr_buffer_alignment>:
 800de80:	7d43      	ldrb	r3, [r0, #21]
 800de82:	428b      	cmp	r3, r1
 800de84:	d208      	bcs.n	800de98 <ucdr_buffer_alignment+0x18>
 800de86:	6900      	ldr	r0, [r0, #16]
 800de88:	fbb0 f3f1 	udiv	r3, r0, r1
 800de8c:	fb01 0013 	mls	r0, r1, r3, r0
 800de90:	1a08      	subs	r0, r1, r0
 800de92:	3901      	subs	r1, #1
 800de94:	4008      	ands	r0, r1
 800de96:	4770      	bx	lr
 800de98:	2000      	movs	r0, #0
 800de9a:	4770      	bx	lr

0800de9c <ucdr_align_to>:
 800de9c:	b538      	push	{r3, r4, r5, lr}
 800de9e:	4604      	mov	r4, r0
 800dea0:	460d      	mov	r5, r1
 800dea2:	f7ff ffed 	bl	800de80 <ucdr_buffer_alignment>
 800dea6:	68a3      	ldr	r3, [r4, #8]
 800dea8:	6861      	ldr	r1, [r4, #4]
 800deaa:	6922      	ldr	r2, [r4, #16]
 800deac:	7565      	strb	r5, [r4, #21]
 800deae:	4403      	add	r3, r0
 800deb0:	428b      	cmp	r3, r1
 800deb2:	bf28      	it	cs
 800deb4:	460b      	movcs	r3, r1
 800deb6:	4402      	add	r2, r0
 800deb8:	60a3      	str	r3, [r4, #8]
 800deba:	6122      	str	r2, [r4, #16]
 800debc:	bd38      	pop	{r3, r4, r5, pc}
 800debe:	bf00      	nop

0800dec0 <ucdr_buffer_length>:
 800dec0:	6882      	ldr	r2, [r0, #8]
 800dec2:	6800      	ldr	r0, [r0, #0]
 800dec4:	1a10      	subs	r0, r2, r0
 800dec6:	4770      	bx	lr

0800dec8 <ucdr_buffer_remaining>:
 800dec8:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800decc:	1a10      	subs	r0, r2, r0
 800dece:	4770      	bx	lr

0800ded0 <ucdr_check_final_buffer_behavior_array>:
 800ded0:	b538      	push	{r3, r4, r5, lr}
 800ded2:	7d83      	ldrb	r3, [r0, #22]
 800ded4:	b963      	cbnz	r3, 800def0 <ucdr_check_final_buffer_behavior_array+0x20>
 800ded6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800deda:	429a      	cmp	r2, r3
 800dedc:	4604      	mov	r4, r0
 800dede:	460d      	mov	r5, r1
 800dee0:	d308      	bcc.n	800def4 <ucdr_check_final_buffer_behavior_array+0x24>
 800dee2:	b139      	cbz	r1, 800def4 <ucdr_check_final_buffer_behavior_array+0x24>
 800dee4:	6983      	ldr	r3, [r0, #24]
 800dee6:	b163      	cbz	r3, 800df02 <ucdr_check_final_buffer_behavior_array+0x32>
 800dee8:	69c1      	ldr	r1, [r0, #28]
 800deea:	4798      	blx	r3
 800deec:	75a0      	strb	r0, [r4, #22]
 800deee:	b108      	cbz	r0, 800def4 <ucdr_check_final_buffer_behavior_array+0x24>
 800def0:	2000      	movs	r0, #0
 800def2:	bd38      	pop	{r3, r4, r5, pc}
 800def4:	4620      	mov	r0, r4
 800def6:	f7ff ffe7 	bl	800dec8 <ucdr_buffer_remaining>
 800defa:	42a8      	cmp	r0, r5
 800defc:	bf28      	it	cs
 800defe:	4628      	movcs	r0, r5
 800df00:	bd38      	pop	{r3, r4, r5, pc}
 800df02:	2301      	movs	r3, #1
 800df04:	7583      	strb	r3, [r0, #22]
 800df06:	e7f3      	b.n	800def0 <ucdr_check_final_buffer_behavior_array+0x20>

0800df08 <ucdr_advance_buffer>:
 800df08:	b538      	push	{r3, r4, r5, lr}
 800df0a:	4604      	mov	r4, r0
 800df0c:	460d      	mov	r5, r1
 800df0e:	f7ff ff57 	bl	800ddc0 <ucdr_check_buffer_available_for>
 800df12:	b178      	cbz	r0, 800df34 <ucdr_advance_buffer+0x2c>
 800df14:	6923      	ldr	r3, [r4, #16]
 800df16:	68a2      	ldr	r2, [r4, #8]
 800df18:	442b      	add	r3, r5
 800df1a:	6123      	str	r3, [r4, #16]
 800df1c:	2301      	movs	r3, #1
 800df1e:	442a      	add	r2, r5
 800df20:	7563      	strb	r3, [r4, #21]
 800df22:	60a2      	str	r2, [r4, #8]
 800df24:	bd38      	pop	{r3, r4, r5, pc}
 800df26:	68a2      	ldr	r2, [r4, #8]
 800df28:	6923      	ldr	r3, [r4, #16]
 800df2a:	4402      	add	r2, r0
 800df2c:	4403      	add	r3, r0
 800df2e:	1a2d      	subs	r5, r5, r0
 800df30:	60a2      	str	r2, [r4, #8]
 800df32:	6123      	str	r3, [r4, #16]
 800df34:	2201      	movs	r2, #1
 800df36:	4629      	mov	r1, r5
 800df38:	4620      	mov	r0, r4
 800df3a:	f7ff ffc9 	bl	800ded0 <ucdr_check_final_buffer_behavior_array>
 800df3e:	2800      	cmp	r0, #0
 800df40:	d1f1      	bne.n	800df26 <ucdr_advance_buffer+0x1e>
 800df42:	2301      	movs	r3, #1
 800df44:	7563      	strb	r3, [r4, #21]
 800df46:	bd38      	pop	{r3, r4, r5, pc}

0800df48 <rcl_get_zero_initialized_init_options>:
 800df48:	2000      	movs	r0, #0
 800df4a:	4770      	bx	lr

0800df4c <rcl_init_options_init>:
 800df4c:	b084      	sub	sp, #16
 800df4e:	b570      	push	{r4, r5, r6, lr}
 800df50:	b09e      	sub	sp, #120	@ 0x78
 800df52:	ad23      	add	r5, sp, #140	@ 0x8c
 800df54:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800df58:	2800      	cmp	r0, #0
 800df5a:	d046      	beq.n	800dfea <rcl_init_options_init+0x9e>
 800df5c:	6803      	ldr	r3, [r0, #0]
 800df5e:	4604      	mov	r4, r0
 800df60:	b133      	cbz	r3, 800df70 <rcl_init_options_init+0x24>
 800df62:	2564      	movs	r5, #100	@ 0x64
 800df64:	4628      	mov	r0, r5
 800df66:	b01e      	add	sp, #120	@ 0x78
 800df68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800df6c:	b004      	add	sp, #16
 800df6e:	4770      	bx	lr
 800df70:	4628      	mov	r0, r5
 800df72:	f001 f96f 	bl	800f254 <rcutils_allocator_is_valid>
 800df76:	2800      	cmp	r0, #0
 800df78:	d037      	beq.n	800dfea <rcl_init_options_init+0x9e>
 800df7a:	46ae      	mov	lr, r5
 800df7c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800df80:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800df84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800df88:	f8de 3000 	ldr.w	r3, [lr]
 800df8c:	f8cc 3000 	str.w	r3, [ip]
 800df90:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 800df92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800df94:	2070      	movs	r0, #112	@ 0x70
 800df96:	4798      	blx	r3
 800df98:	4606      	mov	r6, r0
 800df9a:	6020      	str	r0, [r4, #0]
 800df9c:	b338      	cbz	r0, 800dfee <rcl_init_options_init+0xa2>
 800df9e:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800dfa2:	4686      	mov	lr, r0
 800dfa4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dfa8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800dfac:	f8dc 3000 	ldr.w	r3, [ip]
 800dfb0:	f8ce 3000 	str.w	r3, [lr]
 800dfb4:	a802      	add	r0, sp, #8
 800dfb6:	f001 f9e3 	bl	800f380 <rmw_get_zero_initialized_init_options>
 800dfba:	2258      	movs	r2, #88	@ 0x58
 800dfbc:	a902      	add	r1, sp, #8
 800dfbe:	f106 0018 	add.w	r0, r6, #24
 800dfc2:	f00f fd0c 	bl	801d9de <memcpy>
 800dfc6:	ab26      	add	r3, sp, #152	@ 0x98
 800dfc8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dfcc:	6826      	ldr	r6, [r4, #0]
 800dfce:	e88d 0003 	stmia.w	sp, {r0, r1}
 800dfd2:	f106 0018 	add.w	r0, r6, #24
 800dfd6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800dfda:	f001 fa17 	bl	800f40c <rmw_init_options_init>
 800dfde:	4605      	mov	r5, r0
 800dfe0:	b938      	cbnz	r0, 800dff2 <rcl_init_options_init+0xa6>
 800dfe2:	6823      	ldr	r3, [r4, #0]
 800dfe4:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
 800dfe8:	e7bc      	b.n	800df64 <rcl_init_options_init+0x18>
 800dfea:	250b      	movs	r5, #11
 800dfec:	e7ba      	b.n	800df64 <rcl_init_options_init+0x18>
 800dfee:	250a      	movs	r5, #10
 800dff0:	e7b8      	b.n	800df64 <rcl_init_options_init+0x18>
 800dff2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800dff4:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 800dff6:	6820      	ldr	r0, [r4, #0]
 800dff8:	4798      	blx	r3
 800dffa:	4628      	mov	r0, r5
 800dffc:	f008 f916 	bl	801622c <rcl_convert_rmw_ret_to_rcl_ret>
 800e000:	4605      	mov	r5, r0
 800e002:	e7af      	b.n	800df64 <rcl_init_options_init+0x18>

0800e004 <rcl_init_options_fini>:
 800e004:	b530      	push	{r4, r5, lr}
 800e006:	b087      	sub	sp, #28
 800e008:	b1f0      	cbz	r0, 800e048 <rcl_init_options_fini+0x44>
 800e00a:	6803      	ldr	r3, [r0, #0]
 800e00c:	4604      	mov	r4, r0
 800e00e:	b1db      	cbz	r3, 800e048 <rcl_init_options_fini+0x44>
 800e010:	469c      	mov	ip, r3
 800e012:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e016:	f10d 0e04 	add.w	lr, sp, #4
 800e01a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e01e:	f8dc 3000 	ldr.w	r3, [ip]
 800e022:	f8ce 3000 	str.w	r3, [lr]
 800e026:	a801      	add	r0, sp, #4
 800e028:	f001 f914 	bl	800f254 <rcutils_allocator_is_valid>
 800e02c:	b160      	cbz	r0, 800e048 <rcl_init_options_fini+0x44>
 800e02e:	6820      	ldr	r0, [r4, #0]
 800e030:	3018      	adds	r0, #24
 800e032:	f001 fa87 	bl	800f544 <rmw_init_options_fini>
 800e036:	4605      	mov	r5, r0
 800e038:	b950      	cbnz	r0, 800e050 <rcl_init_options_fini+0x4c>
 800e03a:	6820      	ldr	r0, [r4, #0]
 800e03c:	9b02      	ldr	r3, [sp, #8]
 800e03e:	9905      	ldr	r1, [sp, #20]
 800e040:	4798      	blx	r3
 800e042:	4628      	mov	r0, r5
 800e044:	b007      	add	sp, #28
 800e046:	bd30      	pop	{r4, r5, pc}
 800e048:	250b      	movs	r5, #11
 800e04a:	4628      	mov	r0, r5
 800e04c:	b007      	add	sp, #28
 800e04e:	bd30      	pop	{r4, r5, pc}
 800e050:	f008 f8ec 	bl	801622c <rcl_convert_rmw_ret_to_rcl_ret>
 800e054:	4605      	mov	r5, r0
 800e056:	e7f8      	b.n	800e04a <rcl_init_options_fini+0x46>

0800e058 <rcl_init_options_copy>:
 800e058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e05a:	b09d      	sub	sp, #116	@ 0x74
 800e05c:	2800      	cmp	r0, #0
 800e05e:	d04a      	beq.n	800e0f6 <rcl_init_options_copy+0x9e>
 800e060:	4604      	mov	r4, r0
 800e062:	6800      	ldr	r0, [r0, #0]
 800e064:	2800      	cmp	r0, #0
 800e066:	d046      	beq.n	800e0f6 <rcl_init_options_copy+0x9e>
 800e068:	460d      	mov	r5, r1
 800e06a:	f001 f8f3 	bl	800f254 <rcutils_allocator_is_valid>
 800e06e:	2800      	cmp	r0, #0
 800e070:	d041      	beq.n	800e0f6 <rcl_init_options_copy+0x9e>
 800e072:	2d00      	cmp	r5, #0
 800e074:	d03f      	beq.n	800e0f6 <rcl_init_options_copy+0x9e>
 800e076:	682b      	ldr	r3, [r5, #0]
 800e078:	b11b      	cbz	r3, 800e082 <rcl_init_options_copy+0x2a>
 800e07a:	2464      	movs	r4, #100	@ 0x64
 800e07c:	4620      	mov	r0, r4
 800e07e:	b01d      	add	sp, #116	@ 0x74
 800e080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e082:	6826      	ldr	r6, [r4, #0]
 800e084:	46b6      	mov	lr, r6
 800e086:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e08a:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800e08e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e092:	f8de 3000 	ldr.w	r3, [lr]
 800e096:	6837      	ldr	r7, [r6, #0]
 800e098:	f8cc 3000 	str.w	r3, [ip]
 800e09c:	4619      	mov	r1, r3
 800e09e:	2070      	movs	r0, #112	@ 0x70
 800e0a0:	47b8      	blx	r7
 800e0a2:	4606      	mov	r6, r0
 800e0a4:	6028      	str	r0, [r5, #0]
 800e0a6:	b350      	cbz	r0, 800e0fe <rcl_init_options_copy+0xa6>
 800e0a8:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800e0ac:	4686      	mov	lr, r0
 800e0ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e0b2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e0b6:	f8dc 3000 	ldr.w	r3, [ip]
 800e0ba:	f8ce 3000 	str.w	r3, [lr]
 800e0be:	4668      	mov	r0, sp
 800e0c0:	f001 f95e 	bl	800f380 <rmw_get_zero_initialized_init_options>
 800e0c4:	2258      	movs	r2, #88	@ 0x58
 800e0c6:	4669      	mov	r1, sp
 800e0c8:	f106 0018 	add.w	r0, r6, #24
 800e0cc:	f00f fc87 	bl	801d9de <memcpy>
 800e0d0:	6820      	ldr	r0, [r4, #0]
 800e0d2:	6829      	ldr	r1, [r5, #0]
 800e0d4:	3018      	adds	r0, #24
 800e0d6:	3118      	adds	r1, #24
 800e0d8:	f001 fa00 	bl	800f4dc <rmw_init_options_copy>
 800e0dc:	4604      	mov	r4, r0
 800e0de:	2800      	cmp	r0, #0
 800e0e0:	d0cc      	beq.n	800e07c <rcl_init_options_copy+0x24>
 800e0e2:	f001 f8c5 	bl	800f270 <rcutils_get_error_string>
 800e0e6:	f001 f8db 	bl	800f2a0 <rcutils_reset_error>
 800e0ea:	4628      	mov	r0, r5
 800e0ec:	f7ff ff8a 	bl	800e004 <rcl_init_options_fini>
 800e0f0:	b138      	cbz	r0, 800e102 <rcl_init_options_copy+0xaa>
 800e0f2:	4604      	mov	r4, r0
 800e0f4:	e7c2      	b.n	800e07c <rcl_init_options_copy+0x24>
 800e0f6:	240b      	movs	r4, #11
 800e0f8:	4620      	mov	r0, r4
 800e0fa:	b01d      	add	sp, #116	@ 0x74
 800e0fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0fe:	240a      	movs	r4, #10
 800e100:	e7bc      	b.n	800e07c <rcl_init_options_copy+0x24>
 800e102:	4620      	mov	r0, r4
 800e104:	b01d      	add	sp, #116	@ 0x74
 800e106:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e10a:	f008 b88f 	b.w	801622c <rcl_convert_rmw_ret_to_rcl_ret>
 800e10e:	bf00      	nop

0800e110 <rcl_init_options_set_domain_id>:
 800e110:	b120      	cbz	r0, 800e11c <rcl_init_options_set_domain_id+0xc>
 800e112:	6803      	ldr	r3, [r0, #0]
 800e114:	b113      	cbz	r3, 800e11c <rcl_init_options_set_domain_id+0xc>
 800e116:	6259      	str	r1, [r3, #36]	@ 0x24
 800e118:	2000      	movs	r0, #0
 800e11a:	4770      	bx	lr
 800e11c:	200b      	movs	r0, #11
 800e11e:	4770      	bx	lr

0800e120 <rcl_get_zero_initialized_publisher>:
 800e120:	4b01      	ldr	r3, [pc, #4]	@ (800e128 <rcl_get_zero_initialized_publisher+0x8>)
 800e122:	6818      	ldr	r0, [r3, #0]
 800e124:	4770      	bx	lr
 800e126:	bf00      	nop
 800e128:	08020144 	.word	0x08020144

0800e12c <rcl_publisher_init>:
 800e12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e130:	b088      	sub	sp, #32
 800e132:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800e134:	2d00      	cmp	r5, #0
 800e136:	d06a      	beq.n	800e20e <rcl_publisher_init+0xe2>
 800e138:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800e13c:	4604      	mov	r4, r0
 800e13e:	4648      	mov	r0, r9
 800e140:	460e      	mov	r6, r1
 800e142:	4690      	mov	r8, r2
 800e144:	461f      	mov	r7, r3
 800e146:	f001 f885 	bl	800f254 <rcutils_allocator_is_valid>
 800e14a:	2800      	cmp	r0, #0
 800e14c:	d05f      	beq.n	800e20e <rcl_publisher_init+0xe2>
 800e14e:	2c00      	cmp	r4, #0
 800e150:	d05d      	beq.n	800e20e <rcl_publisher_init+0xe2>
 800e152:	f8d4 a000 	ldr.w	sl, [r4]
 800e156:	f1ba 0f00 	cmp.w	sl, #0
 800e15a:	d004      	beq.n	800e166 <rcl_publisher_init+0x3a>
 800e15c:	2764      	movs	r7, #100	@ 0x64
 800e15e:	4638      	mov	r0, r7
 800e160:	b008      	add	sp, #32
 800e162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e166:	4630      	mov	r0, r6
 800e168:	f008 fba2 	bl	80168b0 <rcl_node_is_valid>
 800e16c:	2800      	cmp	r0, #0
 800e16e:	d053      	beq.n	800e218 <rcl_publisher_init+0xec>
 800e170:	f1b8 0f00 	cmp.w	r8, #0
 800e174:	d04b      	beq.n	800e20e <rcl_publisher_init+0xe2>
 800e176:	2f00      	cmp	r7, #0
 800e178:	d049      	beq.n	800e20e <rcl_publisher_init+0xe2>
 800e17a:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800e17e:	aa07      	add	r2, sp, #28
 800e180:	9205      	str	r2, [sp, #20]
 800e182:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800e186:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e18a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e18e:	f8cd a01c 	str.w	sl, [sp, #28]
 800e192:	4639      	mov	r1, r7
 800e194:	e899 000c 	ldmia.w	r9, {r2, r3}
 800e198:	4630      	mov	r0, r6
 800e19a:	f008 fc19 	bl	80169d0 <rcl_node_resolve_name>
 800e19e:	4607      	mov	r7, r0
 800e1a0:	2800      	cmp	r0, #0
 800e1a2:	d150      	bne.n	800e246 <rcl_publisher_init+0x11a>
 800e1a4:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 800e1a8:	21c8      	movs	r1, #200	@ 0xc8
 800e1aa:	2001      	movs	r0, #1
 800e1ac:	4798      	blx	r3
 800e1ae:	6020      	str	r0, [r4, #0]
 800e1b0:	2800      	cmp	r0, #0
 800e1b2:	d04e      	beq.n	800e252 <rcl_publisher_init+0x126>
 800e1b4:	4630      	mov	r0, r6
 800e1b6:	f008 fb9d 	bl	80168f4 <rcl_node_get_rmw_handle>
 800e1ba:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800e1be:	9300      	str	r3, [sp, #0]
 800e1c0:	9a07      	ldr	r2, [sp, #28]
 800e1c2:	6827      	ldr	r7, [r4, #0]
 800e1c4:	462b      	mov	r3, r5
 800e1c6:	4641      	mov	r1, r8
 800e1c8:	f001 fcd0 	bl	800fb6c <rmw_create_publisher>
 800e1cc:	6823      	ldr	r3, [r4, #0]
 800e1ce:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800e1d2:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e1d6:	b370      	cbz	r0, 800e236 <rcl_publisher_init+0x10a>
 800e1d8:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800e1dc:	f001 fda2 	bl	800fd24 <rmw_publisher_get_actual_qos>
 800e1e0:	6823      	ldr	r3, [r4, #0]
 800e1e2:	4607      	mov	r7, r0
 800e1e4:	b9d0      	cbnz	r0, 800e21c <rcl_publisher_init+0xf0>
 800e1e6:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800e1ea:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800e1ee:	4629      	mov	r1, r5
 800e1f0:	2270      	movs	r2, #112	@ 0x70
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f00f fbf3 	bl	801d9de <memcpy>
 800e1f8:	6832      	ldr	r2, [r6, #0]
 800e1fa:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800e1fe:	9807      	ldr	r0, [sp, #28]
 800e200:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800e202:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800e204:	4798      	blx	r3
 800e206:	4638      	mov	r0, r7
 800e208:	b008      	add	sp, #32
 800e20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e20e:	270b      	movs	r7, #11
 800e210:	4638      	mov	r0, r7
 800e212:	b008      	add	sp, #32
 800e214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e218:	27c8      	movs	r7, #200	@ 0xc8
 800e21a:	e7a0      	b.n	800e15e <rcl_publisher_init+0x32>
 800e21c:	b18b      	cbz	r3, 800e242 <rcl_publisher_init+0x116>
 800e21e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e222:	b142      	cbz	r2, 800e236 <rcl_publisher_init+0x10a>
 800e224:	4630      	mov	r0, r6
 800e226:	f008 fb65 	bl	80168f4 <rcl_node_get_rmw_handle>
 800e22a:	6823      	ldr	r3, [r4, #0]
 800e22c:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800e230:	f001 fd86 	bl	800fd40 <rmw_destroy_publisher>
 800e234:	6823      	ldr	r3, [r4, #0]
 800e236:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800e238:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800e23a:	4618      	mov	r0, r3
 800e23c:	4790      	blx	r2
 800e23e:	2300      	movs	r3, #0
 800e240:	6023      	str	r3, [r4, #0]
 800e242:	2701      	movs	r7, #1
 800e244:	e7db      	b.n	800e1fe <rcl_publisher_init+0xd2>
 800e246:	2867      	cmp	r0, #103	@ 0x67
 800e248:	d0d9      	beq.n	800e1fe <rcl_publisher_init+0xd2>
 800e24a:	2869      	cmp	r0, #105	@ 0x69
 800e24c:	d003      	beq.n	800e256 <rcl_publisher_init+0x12a>
 800e24e:	280a      	cmp	r0, #10
 800e250:	d1f7      	bne.n	800e242 <rcl_publisher_init+0x116>
 800e252:	270a      	movs	r7, #10
 800e254:	e7d3      	b.n	800e1fe <rcl_publisher_init+0xd2>
 800e256:	2767      	movs	r7, #103	@ 0x67
 800e258:	e7d1      	b.n	800e1fe <rcl_publisher_init+0xd2>
 800e25a:	bf00      	nop

0800e25c <rcl_publisher_get_default_options>:
 800e25c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e25e:	4919      	ldr	r1, [pc, #100]	@ (800e2c4 <rcl_publisher_get_default_options+0x68>)
 800e260:	4c19      	ldr	r4, [pc, #100]	@ (800e2c8 <rcl_publisher_get_default_options+0x6c>)
 800e262:	b08b      	sub	sp, #44	@ 0x2c
 800e264:	2250      	movs	r2, #80	@ 0x50
 800e266:	4605      	mov	r5, r0
 800e268:	4818      	ldr	r0, [pc, #96]	@ (800e2cc <rcl_publisher_get_default_options+0x70>)
 800e26a:	f00f fbb8 	bl	801d9de <memcpy>
 800e26e:	a802      	add	r0, sp, #8
 800e270:	f000 ffc4 	bl	800f1fc <rcutils_get_default_allocator>
 800e274:	f10d 0c08 	add.w	ip, sp, #8
 800e278:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e27c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e27e:	466f      	mov	r7, sp
 800e280:	f8dc 3000 	ldr.w	r3, [ip]
 800e284:	f844 3b04 	str.w	r3, [r4], #4
 800e288:	4638      	mov	r0, r7
 800e28a:	f001 f8a1 	bl	800f3d0 <rmw_get_default_publisher_options>
 800e28e:	e897 0003 	ldmia.w	r7, {r0, r1}
 800e292:	2600      	movs	r6, #0
 800e294:	e884 0003 	stmia.w	r4, {r0, r1}
 800e298:	f10d 0027 	add.w	r0, sp, #39	@ 0x27
 800e29c:	f88d 6027 	strb.w	r6, [sp, #39]	@ 0x27
 800e2a0:	f008 fb2e 	bl	8016900 <rcl_get_disable_loaned_message>
 800e2a4:	b958      	cbnz	r0, 800e2be <rcl_publisher_get_default_options+0x62>
 800e2a6:	f89d 6027 	ldrb.w	r6, [sp, #39]	@ 0x27
 800e2aa:	4908      	ldr	r1, [pc, #32]	@ (800e2cc <rcl_publisher_get_default_options+0x70>)
 800e2ac:	2270      	movs	r2, #112	@ 0x70
 800e2ae:	4628      	mov	r0, r5
 800e2b0:	f881 606c 	strb.w	r6, [r1, #108]	@ 0x6c
 800e2b4:	f00f fb93 	bl	801d9de <memcpy>
 800e2b8:	4628      	mov	r0, r5
 800e2ba:	b00b      	add	sp, #44	@ 0x2c
 800e2bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2be:	f000 ffef 	bl	800f2a0 <rcutils_reset_error>
 800e2c2:	e7f2      	b.n	800e2aa <rcl_publisher_get_default_options+0x4e>
 800e2c4:	08020148 	.word	0x08020148
 800e2c8:	2000a058 	.word	0x2000a058
 800e2cc:	2000a008 	.word	0x2000a008

0800e2d0 <rcl_publish>:
 800e2d0:	b1f8      	cbz	r0, 800e312 <rcl_publish+0x42>
 800e2d2:	6803      	ldr	r3, [r0, #0]
 800e2d4:	b570      	push	{r4, r5, r6, lr}
 800e2d6:	4604      	mov	r4, r0
 800e2d8:	b1b3      	cbz	r3, 800e308 <rcl_publish+0x38>
 800e2da:	4616      	mov	r6, r2
 800e2dc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e2e0:	b192      	cbz	r2, 800e308 <rcl_publish+0x38>
 800e2e2:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800e2e6:	460d      	mov	r5, r1
 800e2e8:	f007 ffc0 	bl	801626c <rcl_context_is_valid>
 800e2ec:	b160      	cbz	r0, 800e308 <rcl_publish+0x38>
 800e2ee:	6823      	ldr	r3, [r4, #0]
 800e2f0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e2f4:	b140      	cbz	r0, 800e308 <rcl_publish+0x38>
 800e2f6:	b155      	cbz	r5, 800e30e <rcl_publish+0x3e>
 800e2f8:	4632      	mov	r2, r6
 800e2fa:	4629      	mov	r1, r5
 800e2fc:	f001 fbd6 	bl	800faac <rmw_publish>
 800e300:	3800      	subs	r0, #0
 800e302:	bf18      	it	ne
 800e304:	2001      	movne	r0, #1
 800e306:	bd70      	pop	{r4, r5, r6, pc}
 800e308:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800e30c:	bd70      	pop	{r4, r5, r6, pc}
 800e30e:	200b      	movs	r0, #11
 800e310:	bd70      	pop	{r4, r5, r6, pc}
 800e312:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800e316:	4770      	bx	lr

0800e318 <rcl_publisher_is_valid>:
 800e318:	b1a0      	cbz	r0, 800e344 <rcl_publisher_is_valid+0x2c>
 800e31a:	6803      	ldr	r3, [r0, #0]
 800e31c:	b510      	push	{r4, lr}
 800e31e:	4604      	mov	r4, r0
 800e320:	b173      	cbz	r3, 800e340 <rcl_publisher_is_valid+0x28>
 800e322:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e326:	b15a      	cbz	r2, 800e340 <rcl_publisher_is_valid+0x28>
 800e328:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800e32c:	f007 ff9e 	bl	801626c <rcl_context_is_valid>
 800e330:	b130      	cbz	r0, 800e340 <rcl_publisher_is_valid+0x28>
 800e332:	6823      	ldr	r3, [r4, #0]
 800e334:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e338:	3800      	subs	r0, #0
 800e33a:	bf18      	it	ne
 800e33c:	2001      	movne	r0, #1
 800e33e:	bd10      	pop	{r4, pc}
 800e340:	2000      	movs	r0, #0
 800e342:	bd10      	pop	{r4, pc}
 800e344:	2000      	movs	r0, #0
 800e346:	4770      	bx	lr

0800e348 <rcl_publisher_is_valid_except_context>:
 800e348:	b130      	cbz	r0, 800e358 <rcl_publisher_is_valid_except_context+0x10>
 800e34a:	6800      	ldr	r0, [r0, #0]
 800e34c:	b120      	cbz	r0, 800e358 <rcl_publisher_is_valid_except_context+0x10>
 800e34e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800e352:	3800      	subs	r0, #0
 800e354:	bf18      	it	ne
 800e356:	2001      	movne	r0, #1
 800e358:	4770      	bx	lr
 800e35a:	bf00      	nop

0800e35c <_rclc_check_for_new_data>:
 800e35c:	2800      	cmp	r0, #0
 800e35e:	d046      	beq.n	800e3ee <_rclc_check_for_new_data+0x92>
 800e360:	b510      	push	{r4, lr}
 800e362:	7802      	ldrb	r2, [r0, #0]
 800e364:	b084      	sub	sp, #16
 800e366:	4603      	mov	r3, r0
 800e368:	2a0a      	cmp	r2, #10
 800e36a:	d842      	bhi.n	800e3f2 <_rclc_check_for_new_data+0x96>
 800e36c:	e8df f002 	tbb	[pc, r2]
 800e370:	14181212 	.word	0x14181212
 800e374:	06060614 	.word	0x06060614
 800e378:	2e1a      	.short	0x2e1a
 800e37a:	16          	.byte	0x16
 800e37b:	00          	.byte	0x00
 800e37c:	6a0a      	ldr	r2, [r1, #32]
 800e37e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800e380:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e384:	3a00      	subs	r2, #0
 800e386:	bf18      	it	ne
 800e388:	2201      	movne	r2, #1
 800e38a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800e38e:	2000      	movs	r0, #0
 800e390:	b004      	add	sp, #16
 800e392:	bd10      	pop	{r4, pc}
 800e394:	680a      	ldr	r2, [r1, #0]
 800e396:	e7f2      	b.n	800e37e <_rclc_check_for_new_data+0x22>
 800e398:	698a      	ldr	r2, [r1, #24]
 800e39a:	e7f0      	b.n	800e37e <_rclc_check_for_new_data+0x22>
 800e39c:	688a      	ldr	r2, [r1, #8]
 800e39e:	e7ee      	b.n	800e37e <_rclc_check_for_new_data+0x22>
 800e3a0:	690a      	ldr	r2, [r1, #16]
 800e3a2:	e7ec      	b.n	800e37e <_rclc_check_for_new_data+0x22>
 800e3a4:	685c      	ldr	r4, [r3, #4]
 800e3a6:	4608      	mov	r0, r1
 800e3a8:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800e3ac:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800e3b0:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800e3b4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800e3b8:	9300      	str	r3, [sp, #0]
 800e3ba:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800e3be:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800e3c2:	f104 0110 	add.w	r1, r4, #16
 800e3c6:	f00a faeb 	bl	80189a0 <rcl_action_client_wait_set_get_entities_ready>
 800e3ca:	e7e1      	b.n	800e390 <_rclc_check_for_new_data+0x34>
 800e3cc:	685c      	ldr	r4, [r3, #4]
 800e3ce:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800e3d2:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800e3d6:	e9cd 3200 	strd	r3, r2, [sp]
 800e3da:	4608      	mov	r0, r1
 800e3dc:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800e3e0:	f104 0220 	add.w	r2, r4, #32
 800e3e4:	f104 0110 	add.w	r1, r4, #16
 800e3e8:	f00a fce0 	bl	8018dac <rcl_action_server_wait_set_get_entities_ready>
 800e3ec:	e7d0      	b.n	800e390 <_rclc_check_for_new_data+0x34>
 800e3ee:	200b      	movs	r0, #11
 800e3f0:	4770      	bx	lr
 800e3f2:	2001      	movs	r0, #1
 800e3f4:	e7cc      	b.n	800e390 <_rclc_check_for_new_data+0x34>
 800e3f6:	bf00      	nop

0800e3f8 <_rclc_take_new_data>:
 800e3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3fa:	b099      	sub	sp, #100	@ 0x64
 800e3fc:	2800      	cmp	r0, #0
 800e3fe:	f000 8082 	beq.w	800e506 <_rclc_take_new_data+0x10e>
 800e402:	7803      	ldrb	r3, [r0, #0]
 800e404:	4604      	mov	r4, r0
 800e406:	2b0a      	cmp	r3, #10
 800e408:	f200 815d 	bhi.w	800e6c6 <_rclc_take_new_data+0x2ce>
 800e40c:	e8df f003 	tbb	[pc, r3]
 800e410:	31531f1f 	.word	0x31531f1f
 800e414:	06060631 	.word	0x06060631
 800e418:	4555      	.short	0x4555
 800e41a:	53          	.byte	0x53
 800e41b:	00          	.byte	0x00
 800e41c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e41e:	6a0b      	ldr	r3, [r1, #32]
 800e420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d046      	beq.n	800e4b6 <_rclc_take_new_data+0xbe>
 800e428:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800e42c:	f104 0110 	add.w	r1, r4, #16
 800e430:	f008 fd36 	bl	8016ea0 <rcl_take_request>
 800e434:	4605      	mov	r5, r0
 800e436:	2800      	cmp	r0, #0
 800e438:	d03d      	beq.n	800e4b6 <_rclc_take_new_data+0xbe>
 800e43a:	f240 2359 	movw	r3, #601	@ 0x259
 800e43e:	4298      	cmp	r0, r3
 800e440:	d128      	bne.n	800e494 <_rclc_take_new_data+0x9c>
 800e442:	2300      	movs	r3, #0
 800e444:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800e448:	4628      	mov	r0, r5
 800e44a:	b019      	add	sp, #100	@ 0x64
 800e44c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e44e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e450:	680b      	ldr	r3, [r1, #0]
 800e452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e456:	b373      	cbz	r3, 800e4b6 <_rclc_take_new_data+0xbe>
 800e458:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800e45c:	2300      	movs	r3, #0
 800e45e:	aa0a      	add	r2, sp, #40	@ 0x28
 800e460:	f008 fe32 	bl	80170c8 <rcl_take>
 800e464:	4605      	mov	r5, r0
 800e466:	b330      	cbz	r0, 800e4b6 <_rclc_take_new_data+0xbe>
 800e468:	f240 1391 	movw	r3, #401	@ 0x191
 800e46c:	4298      	cmp	r0, r3
 800e46e:	d0e8      	beq.n	800e442 <_rclc_take_new_data+0x4a>
 800e470:	e010      	b.n	800e494 <_rclc_take_new_data+0x9c>
 800e472:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e474:	698b      	ldr	r3, [r1, #24]
 800e476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e47a:	b1e3      	cbz	r3, 800e4b6 <_rclc_take_new_data+0xbe>
 800e47c:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800e480:	f104 0110 	add.w	r1, r4, #16
 800e484:	f007 fe5c 	bl	8016140 <rcl_take_response>
 800e488:	4605      	mov	r5, r0
 800e48a:	b1a0      	cbz	r0, 800e4b6 <_rclc_take_new_data+0xbe>
 800e48c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800e490:	4298      	cmp	r0, r3
 800e492:	d0d9      	beq.n	800e448 <_rclc_take_new_data+0x50>
 800e494:	f000 ff04 	bl	800f2a0 <rcutils_reset_error>
 800e498:	e7d6      	b.n	800e448 <_rclc_take_new_data+0x50>
 800e49a:	6840      	ldr	r0, [r0, #4]
 800e49c:	f890 3020 	ldrb.w	r3, [r0, #32]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d15f      	bne.n	800e564 <_rclc_take_new_data+0x16c>
 800e4a4:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d179      	bne.n	800e5a0 <_rclc_take_new_data+0x1a8>
 800e4ac:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	f040 8096 	bne.w	800e5e2 <_rclc_take_new_data+0x1ea>
 800e4b6:	2500      	movs	r5, #0
 800e4b8:	e7c6      	b.n	800e448 <_rclc_take_new_data+0x50>
 800e4ba:	6840      	ldr	r0, [r0, #4]
 800e4bc:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d138      	bne.n	800e536 <_rclc_take_new_data+0x13e>
 800e4c4:	69c3      	ldr	r3, [r0, #28]
 800e4c6:	b113      	cbz	r3, 800e4ce <_rclc_take_new_data+0xd6>
 800e4c8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e4cc:	b9fb      	cbnz	r3, 800e50e <_rclc_take_new_data+0x116>
 800e4ce:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	f040 80a8 	bne.w	800e628 <_rclc_take_new_data+0x230>
 800e4d8:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d0ea      	beq.n	800e4b6 <_rclc_take_new_data+0xbe>
 800e4e0:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800e4e2:	a90a      	add	r1, sp, #40	@ 0x28
 800e4e4:	3010      	adds	r0, #16
 800e4e6:	f00a f93f 	bl	8018768 <rcl_action_take_result_response>
 800e4ea:	4605      	mov	r5, r0
 800e4ec:	2800      	cmp	r0, #0
 800e4ee:	d1d1      	bne.n	800e494 <_rclc_take_new_data+0x9c>
 800e4f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e4f4:	6860      	ldr	r0, [r4, #4]
 800e4f6:	f00a fd7f 	bl	8018ff8 <rclc_action_find_handle_by_result_request_sequence_number>
 800e4fa:	2800      	cmp	r0, #0
 800e4fc:	d0db      	beq.n	800e4b6 <_rclc_take_new_data+0xbe>
 800e4fe:	2301      	movs	r3, #1
 800e500:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800e504:	e7d7      	b.n	800e4b6 <_rclc_take_new_data+0xbe>
 800e506:	250b      	movs	r5, #11
 800e508:	4628      	mov	r0, r5
 800e50a:	b019      	add	sp, #100	@ 0x64
 800e50c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e50e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e510:	3010      	adds	r0, #16
 800e512:	f00a f9a5 	bl	8018860 <rcl_action_take_feedback>
 800e516:	4605      	mov	r5, r0
 800e518:	2800      	cmp	r0, #0
 800e51a:	d1bb      	bne.n	800e494 <_rclc_take_new_data+0x9c>
 800e51c:	6860      	ldr	r0, [r4, #4]
 800e51e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e520:	f00a fd28 	bl	8018f74 <rclc_action_find_goal_handle_by_uuid>
 800e524:	4603      	mov	r3, r0
 800e526:	2800      	cmp	r0, #0
 800e528:	f000 80c4 	beq.w	800e6b4 <_rclc_take_new_data+0x2bc>
 800e52c:	2201      	movs	r2, #1
 800e52e:	6860      	ldr	r0, [r4, #4]
 800e530:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800e534:	e7cb      	b.n	800e4ce <_rclc_take_new_data+0xd6>
 800e536:	aa04      	add	r2, sp, #16
 800e538:	a90a      	add	r1, sp, #40	@ 0x28
 800e53a:	3010      	adds	r0, #16
 800e53c:	f00a f8a4 	bl	8018688 <rcl_action_take_goal_response>
 800e540:	4605      	mov	r5, r0
 800e542:	2800      	cmp	r0, #0
 800e544:	d1a6      	bne.n	800e494 <_rclc_take_new_data+0x9c>
 800e546:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e54a:	6860      	ldr	r0, [r4, #4]
 800e54c:	f00a fd42 	bl	8018fd4 <rclc_action_find_handle_by_goal_request_sequence_number>
 800e550:	b130      	cbz	r0, 800e560 <_rclc_take_new_data+0x168>
 800e552:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800e556:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800e55a:	2201      	movs	r2, #1
 800e55c:	f880 2020 	strb.w	r2, [r0, #32]
 800e560:	6860      	ldr	r0, [r4, #4]
 800e562:	e7af      	b.n	800e4c4 <_rclc_take_new_data+0xcc>
 800e564:	f00a fce0 	bl	8018f28 <rclc_action_take_goal_handle>
 800e568:	4606      	mov	r6, r0
 800e56a:	6860      	ldr	r0, [r4, #4]
 800e56c:	2e00      	cmp	r6, #0
 800e56e:	d099      	beq.n	800e4a4 <_rclc_take_new_data+0xac>
 800e570:	6070      	str	r0, [r6, #4]
 800e572:	69f2      	ldr	r2, [r6, #28]
 800e574:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800e578:	3010      	adds	r0, #16
 800e57a:	f00a faa1 	bl	8018ac0 <rcl_action_take_goal_request>
 800e57e:	4605      	mov	r5, r0
 800e580:	2800      	cmp	r0, #0
 800e582:	f040 8099 	bne.w	800e6b8 <_rclc_take_new_data+0x2c0>
 800e586:	69f7      	ldr	r7, [r6, #28]
 800e588:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e58a:	7235      	strb	r5, [r6, #8]
 800e58c:	f8c6 0009 	str.w	r0, [r6, #9]
 800e590:	f8c6 100d 	str.w	r1, [r6, #13]
 800e594:	6860      	ldr	r0, [r4, #4]
 800e596:	f8c6 2011 	str.w	r2, [r6, #17]
 800e59a:	f8c6 3015 	str.w	r3, [r6, #21]
 800e59e:	e781      	b.n	800e4a4 <_rclc_take_new_data+0xac>
 800e5a0:	aa04      	add	r2, sp, #16
 800e5a2:	3010      	adds	r0, #16
 800e5a4:	a90a      	add	r1, sp, #40	@ 0x28
 800e5a6:	f00a fafb 	bl	8018ba0 <rcl_action_take_result_request>
 800e5aa:	4605      	mov	r5, r0
 800e5ac:	2800      	cmp	r0, #0
 800e5ae:	f47f af71 	bne.w	800e494 <_rclc_take_new_data+0x9c>
 800e5b2:	6860      	ldr	r0, [r4, #4]
 800e5b4:	a904      	add	r1, sp, #16
 800e5b6:	f00a fcdd 	bl	8018f74 <rclc_action_find_goal_handle_by_uuid>
 800e5ba:	4607      	mov	r7, r0
 800e5bc:	b160      	cbz	r0, 800e5d8 <_rclc_take_new_data+0x1e0>
 800e5be:	ad0a      	add	r5, sp, #40	@ 0x28
 800e5c0:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800e5c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e5c6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e5c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e5cc:	f04f 0c02 	mov.w	ip, #2
 800e5d0:	e886 0003 	stmia.w	r6, {r0, r1}
 800e5d4:	f887 c008 	strb.w	ip, [r7, #8]
 800e5d8:	6860      	ldr	r0, [r4, #4]
 800e5da:	2300      	movs	r3, #0
 800e5dc:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800e5e0:	e764      	b.n	800e4ac <_rclc_take_new_data+0xb4>
 800e5e2:	ae04      	add	r6, sp, #16
 800e5e4:	aa0a      	add	r2, sp, #40	@ 0x28
 800e5e6:	3010      	adds	r0, #16
 800e5e8:	4631      	mov	r1, r6
 800e5ea:	f00a fb17 	bl	8018c1c <rcl_action_take_cancel_request>
 800e5ee:	4605      	mov	r5, r0
 800e5f0:	2800      	cmp	r0, #0
 800e5f2:	f47f af4f 	bne.w	800e494 <_rclc_take_new_data+0x9c>
 800e5f6:	6860      	ldr	r0, [r4, #4]
 800e5f8:	a90a      	add	r1, sp, #40	@ 0x28
 800e5fa:	f00a fcbb 	bl	8018f74 <rclc_action_find_goal_handle_by_uuid>
 800e5fe:	4605      	mov	r5, r0
 800e600:	2800      	cmp	r0, #0
 800e602:	d04c      	beq.n	800e69e <_rclc_take_new_data+0x2a6>
 800e604:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800e608:	2101      	movs	r1, #1
 800e60a:	f00a fc3b 	bl	8018e84 <rcl_action_transition_goal_state>
 800e60e:	2803      	cmp	r0, #3
 800e610:	4607      	mov	r7, r0
 800e612:	d139      	bne.n	800e688 <_rclc_take_new_data+0x290>
 800e614:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e616:	f105 0458 	add.w	r4, r5, #88	@ 0x58
 800e61a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e61c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e620:	e884 0003 	stmia.w	r4, {r0, r1}
 800e624:	722f      	strb	r7, [r5, #8]
 800e626:	e746      	b.n	800e4b6 <_rclc_take_new_data+0xbe>
 800e628:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800e62c:	a90a      	add	r1, sp, #40	@ 0x28
 800e62e:	3010      	adds	r0, #16
 800e630:	f00a f8d8 	bl	80187e4 <rcl_action_take_cancel_response>
 800e634:	4605      	mov	r5, r0
 800e636:	2800      	cmp	r0, #0
 800e638:	f47f af2c 	bne.w	800e494 <_rclc_take_new_data+0x9c>
 800e63c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e640:	6860      	ldr	r0, [r4, #4]
 800e642:	f00a fceb 	bl	801901c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800e646:	4606      	mov	r6, r0
 800e648:	6860      	ldr	r0, [r4, #4]
 800e64a:	2e00      	cmp	r6, #0
 800e64c:	f43f af44 	beq.w	800e4d8 <_rclc_take_new_data+0xe0>
 800e650:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800e652:	2701      	movs	r7, #1
 800e654:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800e656:	2b00      	cmp	r3, #0
 800e658:	f43f af3e 	beq.w	800e4d8 <_rclc_take_new_data+0xe0>
 800e65c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e65e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800e662:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800e666:	f00a fc85 	bl	8018f74 <rclc_action_find_goal_handle_by_uuid>
 800e66a:	b138      	cbz	r0, 800e67c <_rclc_take_new_data+0x284>
 800e66c:	6860      	ldr	r0, [r4, #4]
 800e66e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800e670:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800e674:	3501      	adds	r5, #1
 800e676:	42ab      	cmp	r3, r5
 800e678:	d8f0      	bhi.n	800e65c <_rclc_take_new_data+0x264>
 800e67a:	e72d      	b.n	800e4d8 <_rclc_take_new_data+0xe0>
 800e67c:	6860      	ldr	r0, [r4, #4]
 800e67e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800e680:	3501      	adds	r5, #1
 800e682:	42ab      	cmp	r3, r5
 800e684:	d8ea      	bhi.n	800e65c <_rclc_take_new_data+0x264>
 800e686:	e727      	b.n	800e4d8 <_rclc_take_new_data+0xe0>
 800e688:	ab06      	add	r3, sp, #24
 800e68a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e68c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e690:	2103      	movs	r1, #3
 800e692:	e896 000c 	ldmia.w	r6, {r2, r3}
 800e696:	6860      	ldr	r0, [r4, #4]
 800e698:	f00a fd36 	bl	8019108 <rclc_action_server_goal_cancel_reject>
 800e69c:	e70b      	b.n	800e4b6 <_rclc_take_new_data+0xbe>
 800e69e:	ab06      	add	r3, sp, #24
 800e6a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e6a2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e6a6:	2102      	movs	r1, #2
 800e6a8:	e896 000c 	ldmia.w	r6, {r2, r3}
 800e6ac:	6860      	ldr	r0, [r4, #4]
 800e6ae:	f00a fd2b 	bl	8019108 <rclc_action_server_goal_cancel_reject>
 800e6b2:	e700      	b.n	800e4b6 <_rclc_take_new_data+0xbe>
 800e6b4:	6860      	ldr	r0, [r4, #4]
 800e6b6:	e70a      	b.n	800e4ce <_rclc_take_new_data+0xd6>
 800e6b8:	6860      	ldr	r0, [r4, #4]
 800e6ba:	4631      	mov	r1, r6
 800e6bc:	f00a fc44 	bl	8018f48 <rclc_action_remove_used_goal_handle>
 800e6c0:	f000 fdee 	bl	800f2a0 <rcutils_reset_error>
 800e6c4:	e6c0      	b.n	800e448 <_rclc_take_new_data+0x50>
 800e6c6:	2501      	movs	r5, #1
 800e6c8:	e6be      	b.n	800e448 <_rclc_take_new_data+0x50>
 800e6ca:	bf00      	nop

0800e6cc <rclc_executor_trigger_any>:
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	b370      	cbz	r0, 800e72e <rclc_executor_trigger_any+0x62>
 800e6d0:	b379      	cbz	r1, 800e732 <rclc_executor_trigger_any+0x66>
 800e6d2:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	b350      	cbz	r0, 800e730 <rclc_executor_trigger_any+0x64>
 800e6da:	b430      	push	{r4, r5}
 800e6dc:	f893 c000 	ldrb.w	ip, [r3]
 800e6e0:	f1bc 0f08 	cmp.w	ip, #8
 800e6e4:	d017      	beq.n	800e716 <rclc_executor_trigger_any+0x4a>
 800e6e6:	f1bc 0f09 	cmp.w	ip, #9
 800e6ea:	d00d      	beq.n	800e708 <rclc_executor_trigger_any+0x3c>
 800e6ec:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800e6f0:	b940      	cbnz	r0, 800e704 <rclc_executor_trigger_any+0x38>
 800e6f2:	3201      	adds	r2, #1
 800e6f4:	4291      	cmp	r1, r2
 800e6f6:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800e6fa:	d003      	beq.n	800e704 <rclc_executor_trigger_any+0x38>
 800e6fc:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800e700:	2800      	cmp	r0, #0
 800e702:	d1eb      	bne.n	800e6dc <rclc_executor_trigger_any+0x10>
 800e704:	bc30      	pop	{r4, r5}
 800e706:	4770      	bx	lr
 800e708:	685c      	ldr	r4, [r3, #4]
 800e70a:	6a25      	ldr	r5, [r4, #32]
 800e70c:	2d00      	cmp	r5, #0
 800e70e:	d1f9      	bne.n	800e704 <rclc_executor_trigger_any+0x38>
 800e710:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800e714:	e7ec      	b.n	800e6f0 <rclc_executor_trigger_any+0x24>
 800e716:	685c      	ldr	r4, [r3, #4]
 800e718:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800e71a:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800e71e:	d1f1      	bne.n	800e704 <rclc_executor_trigger_any+0x38>
 800e720:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800e724:	2800      	cmp	r0, #0
 800e726:	d1ed      	bne.n	800e704 <rclc_executor_trigger_any+0x38>
 800e728:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800e72c:	e7e0      	b.n	800e6f0 <rclc_executor_trigger_any+0x24>
 800e72e:	4770      	bx	lr
 800e730:	4770      	bx	lr
 800e732:	4608      	mov	r0, r1
 800e734:	4770      	bx	lr
 800e736:	bf00      	nop

0800e738 <_rclc_execute>:
 800e738:	2800      	cmp	r0, #0
 800e73a:	f000 80da 	beq.w	800e8f2 <_rclc_execute+0x1ba>
 800e73e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e740:	7843      	ldrb	r3, [r0, #1]
 800e742:	b087      	sub	sp, #28
 800e744:	4604      	mov	r4, r0
 800e746:	b123      	cbz	r3, 800e752 <_rclc_execute+0x1a>
 800e748:	2b01      	cmp	r3, #1
 800e74a:	d01c      	beq.n	800e786 <_rclc_execute+0x4e>
 800e74c:	2000      	movs	r0, #0
 800e74e:	b007      	add	sp, #28
 800e750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e752:	7803      	ldrb	r3, [r0, #0]
 800e754:	2b08      	cmp	r3, #8
 800e756:	f000 809e 	beq.w	800e896 <_rclc_execute+0x15e>
 800e75a:	2b09      	cmp	r3, #9
 800e75c:	d024      	beq.n	800e7a8 <_rclc_execute+0x70>
 800e75e:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800e762:	2800      	cmp	r0, #0
 800e764:	d0f2      	beq.n	800e74c <_rclc_execute+0x14>
 800e766:	2b0a      	cmp	r3, #10
 800e768:	f200 8158 	bhi.w	800ea1c <_rclc_execute+0x2e4>
 800e76c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e770:	008c0071 	.word	0x008c0071
 800e774:	0071007e 	.word	0x0071007e
 800e778:	00590075 	.word	0x00590075
 800e77c:	00590059 	.word	0x00590059
 800e780:	01560156 	.word	0x01560156
 800e784:	007b      	.short	0x007b
 800e786:	7803      	ldrb	r3, [r0, #0]
 800e788:	2b0a      	cmp	r3, #10
 800e78a:	f200 8147 	bhi.w	800ea1c <_rclc_execute+0x2e4>
 800e78e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e792:	00f7      	.short	0x00f7
 800e794:	006d0079 	.word	0x006d0079
 800e798:	00640060 	.word	0x00640060
 800e79c:	00480048 	.word	0x00480048
 800e7a0:	00fe0048 	.word	0x00fe0048
 800e7a4:	006a0100 	.word	0x006a0100
 800e7a8:	6840      	ldr	r0, [r0, #4]
 800e7aa:	6a02      	ldr	r2, [r0, #32]
 800e7ac:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800e7b0:	2a00      	cmp	r2, #0
 800e7b2:	f040 80f1 	bne.w	800e998 <_rclc_execute+0x260>
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d0c8      	beq.n	800e74c <_rclc_execute+0x14>
 800e7ba:	e003      	b.n	800e7c4 <_rclc_execute+0x8c>
 800e7bc:	6858      	ldr	r0, [r3, #4]
 800e7be:	f00a fbc3 	bl	8018f48 <rclc_action_remove_used_goal_handle>
 800e7c2:	6860      	ldr	r0, [r4, #4]
 800e7c4:	f00a fbfa 	bl	8018fbc <rclc_action_find_first_terminated_handle>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	4601      	mov	r1, r0
 800e7cc:	2800      	cmp	r0, #0
 800e7ce:	d1f5      	bne.n	800e7bc <_rclc_execute+0x84>
 800e7d0:	6860      	ldr	r0, [r4, #4]
 800e7d2:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 800e7d6:	f890 3020 	ldrb.w	r3, [r0, #32]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	f000 80e9 	beq.w	800e9b2 <_rclc_execute+0x27a>
 800e7e0:	f640 0634 	movw	r6, #2100	@ 0x834
 800e7e4:	2701      	movs	r7, #1
 800e7e6:	e007      	b.n	800e7f8 <_rclc_execute+0xc0>
 800e7e8:	4628      	mov	r0, r5
 800e7ea:	f00a fc41 	bl	8019070 <rclc_action_server_response_goal_request>
 800e7ee:	6860      	ldr	r0, [r4, #4]
 800e7f0:	4629      	mov	r1, r5
 800e7f2:	f00a fba9 	bl	8018f48 <rclc_action_remove_used_goal_handle>
 800e7f6:	6860      	ldr	r0, [r4, #4]
 800e7f8:	2100      	movs	r1, #0
 800e7fa:	f00a fbd3 	bl	8018fa4 <rclc_action_find_first_handle_by_status>
 800e7fe:	4605      	mov	r5, r0
 800e800:	2800      	cmp	r0, #0
 800e802:	f000 80d3 	beq.w	800e9ac <_rclc_execute+0x274>
 800e806:	6863      	ldr	r3, [r4, #4]
 800e808:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e80a:	699b      	ldr	r3, [r3, #24]
 800e80c:	4798      	blx	r3
 800e80e:	42b0      	cmp	r0, r6
 800e810:	f04f 0100 	mov.w	r1, #0
 800e814:	d1e8      	bne.n	800e7e8 <_rclc_execute+0xb0>
 800e816:	2101      	movs	r1, #1
 800e818:	4628      	mov	r0, r5
 800e81a:	f00a fc29 	bl	8019070 <rclc_action_server_response_goal_request>
 800e81e:	722f      	strb	r7, [r5, #8]
 800e820:	e7e9      	b.n	800e7f6 <_rclc_execute+0xbe>
 800e822:	2b06      	cmp	r3, #6
 800e824:	68a0      	ldr	r0, [r4, #8]
 800e826:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800e828:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800e82a:	f000 80b9 	beq.w	800e9a0 <_rclc_execute+0x268>
 800e82e:	2b07      	cmp	r3, #7
 800e830:	f000 80ef 	beq.w	800ea12 <_rclc_execute+0x2da>
 800e834:	47b0      	blx	r6
 800e836:	f104 0510 	add.w	r5, r4, #16
 800e83a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800e83c:	6860      	ldr	r0, [r4, #4]
 800e83e:	4629      	mov	r1, r5
 800e840:	f008 fb7e 	bl	8016f40 <rcl_send_response>
 800e844:	2800      	cmp	r0, #0
 800e846:	d082      	beq.n	800e74e <_rclc_execute+0x16>
 800e848:	9005      	str	r0, [sp, #20]
 800e84a:	f000 fd29 	bl	800f2a0 <rcutils_reset_error>
 800e84e:	9805      	ldr	r0, [sp, #20]
 800e850:	e77d      	b.n	800e74e <_rclc_execute+0x16>
 800e852:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e854:	68a0      	ldr	r0, [r4, #8]
 800e856:	4798      	blx	r3
 800e858:	e778      	b.n	800e74c <_rclc_execute+0x14>
 800e85a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e85c:	68a0      	ldr	r0, [r4, #8]
 800e85e:	f104 0110 	add.w	r1, r4, #16
 800e862:	4798      	blx	r3
 800e864:	e772      	b.n	800e74c <_rclc_execute+0x14>
 800e866:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e868:	4798      	blx	r3
 800e86a:	e76f      	b.n	800e74c <_rclc_execute+0x14>
 800e86c:	6860      	ldr	r0, [r4, #4]
 800e86e:	f008 ff67 	bl	8017740 <rcl_timer_call>
 800e872:	f240 3321 	movw	r3, #801	@ 0x321
 800e876:	4298      	cmp	r0, r3
 800e878:	f43f af68 	beq.w	800e74c <_rclc_execute+0x14>
 800e87c:	2800      	cmp	r0, #0
 800e87e:	f43f af66 	beq.w	800e74e <_rclc_execute+0x16>
 800e882:	e7e1      	b.n	800e848 <_rclc_execute+0x110>
 800e884:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800e888:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 800e88c:	2800      	cmp	r0, #0
 800e88e:	d0e8      	beq.n	800e862 <_rclc_execute+0x12a>
 800e890:	68a0      	ldr	r0, [r4, #8]
 800e892:	4798      	blx	r3
 800e894:	e75a      	b.n	800e74c <_rclc_execute+0x14>
 800e896:	6840      	ldr	r0, [r0, #4]
 800e898:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800e89a:	f033 437f 	bics.w	r3, r3, #4278190080	@ 0xff000000
 800e89e:	d107      	bne.n	800e8b0 <_rclc_execute+0x178>
 800e8a0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800e8a4:	b923      	cbnz	r3, 800e8b0 <_rclc_execute+0x178>
 800e8a6:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	f43f af4e 	beq.w	800e74c <_rclc_execute+0x14>
 800e8b0:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800e8b4:	b303      	cbz	r3, 800e8f8 <_rclc_execute+0x1c0>
 800e8b6:	2600      	movs	r6, #0
 800e8b8:	2701      	movs	r7, #1
 800e8ba:	e004      	b.n	800e8c6 <_rclc_execute+0x18e>
 800e8bc:	f00a fb0e 	bl	8018edc <rclc_action_send_result_request>
 800e8c0:	b990      	cbnz	r0, 800e8e8 <_rclc_execute+0x1b0>
 800e8c2:	722f      	strb	r7, [r5, #8]
 800e8c4:	6860      	ldr	r0, [r4, #4]
 800e8c6:	f00a fbbb 	bl	8019040 <rclc_action_find_first_handle_with_goal_response>
 800e8ca:	4605      	mov	r5, r0
 800e8cc:	b198      	cbz	r0, 800e8f6 <_rclc_execute+0x1be>
 800e8ce:	6863      	ldr	r3, [r4, #4]
 800e8d0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e8d2:	699b      	ldr	r3, [r3, #24]
 800e8d4:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800e8d8:	f885 6020 	strb.w	r6, [r5, #32]
 800e8dc:	4798      	blx	r3
 800e8de:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800e8e2:	4628      	mov	r0, r5
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d1e9      	bne.n	800e8bc <_rclc_execute+0x184>
 800e8e8:	6860      	ldr	r0, [r4, #4]
 800e8ea:	4629      	mov	r1, r5
 800e8ec:	f00a fb2c 	bl	8018f48 <rclc_action_remove_used_goal_handle>
 800e8f0:	e7e8      	b.n	800e8c4 <_rclc_execute+0x18c>
 800e8f2:	200b      	movs	r0, #11
 800e8f4:	4770      	bx	lr
 800e8f6:	6860      	ldr	r0, [r4, #4]
 800e8f8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e8fc:	b18b      	cbz	r3, 800e922 <_rclc_execute+0x1ea>
 800e8fe:	68c5      	ldr	r5, [r0, #12]
 800e900:	b32d      	cbz	r5, 800e94e <_rclc_execute+0x216>
 800e902:	2600      	movs	r6, #0
 800e904:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800e908:	b143      	cbz	r3, 800e91c <_rclc_execute+0x1e4>
 800e90a:	69c3      	ldr	r3, [r0, #28]
 800e90c:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800e910:	b123      	cbz	r3, 800e91c <_rclc_execute+0x1e4>
 800e912:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e914:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e916:	4628      	mov	r0, r5
 800e918:	4798      	blx	r3
 800e91a:	6860      	ldr	r0, [r4, #4]
 800e91c:	682d      	ldr	r5, [r5, #0]
 800e91e:	2d00      	cmp	r5, #0
 800e920:	d1f0      	bne.n	800e904 <_rclc_execute+0x1cc>
 800e922:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800e926:	b193      	cbz	r3, 800e94e <_rclc_execute+0x216>
 800e928:	68c5      	ldr	r5, [r0, #12]
 800e92a:	b185      	cbz	r5, 800e94e <_rclc_execute+0x216>
 800e92c:	2600      	movs	r6, #0
 800e92e:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800e932:	b14b      	cbz	r3, 800e948 <_rclc_execute+0x210>
 800e934:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800e936:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800e93a:	b12b      	cbz	r3, 800e948 <_rclc_execute+0x210>
 800e93c:	4628      	mov	r0, r5
 800e93e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e940:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800e944:	4798      	blx	r3
 800e946:	6860      	ldr	r0, [r4, #4]
 800e948:	682d      	ldr	r5, [r5, #0]
 800e94a:	2d00      	cmp	r5, #0
 800e94c:	d1ef      	bne.n	800e92e <_rclc_execute+0x1f6>
 800e94e:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800e952:	2b00      	cmp	r3, #0
 800e954:	f43f aefa 	beq.w	800e74c <_rclc_execute+0x14>
 800e958:	2700      	movs	r7, #0
 800e95a:	e00b      	b.n	800e974 <_rclc_execute+0x23c>
 800e95c:	6863      	ldr	r3, [r4, #4]
 800e95e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e960:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800e962:	6a1e      	ldr	r6, [r3, #32]
 800e964:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800e968:	47b0      	blx	r6
 800e96a:	6860      	ldr	r0, [r4, #4]
 800e96c:	4629      	mov	r1, r5
 800e96e:	f00a faeb 	bl	8018f48 <rclc_action_remove_used_goal_handle>
 800e972:	6860      	ldr	r0, [r4, #4]
 800e974:	f00a fb70 	bl	8019058 <rclc_action_find_first_handle_with_result_response>
 800e978:	4605      	mov	r5, r0
 800e97a:	2800      	cmp	r0, #0
 800e97c:	d1ee      	bne.n	800e95c <_rclc_execute+0x224>
 800e97e:	e6e5      	b.n	800e74c <_rclc_execute+0x14>
 800e980:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800e984:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e986:	2800      	cmp	r0, #0
 800e988:	f43f af65 	beq.w	800e856 <_rclc_execute+0x11e>
 800e98c:	e762      	b.n	800e854 <_rclc_execute+0x11c>
 800e98e:	6840      	ldr	r0, [r0, #4]
 800e990:	e78e      	b.n	800e8b0 <_rclc_execute+0x178>
 800e992:	6840      	ldr	r0, [r0, #4]
 800e994:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800e998:	2b00      	cmp	r3, #0
 800e99a:	f43f af1c 	beq.w	800e7d6 <_rclc_execute+0x9e>
 800e99e:	e711      	b.n	800e7c4 <_rclc_execute+0x8c>
 800e9a0:	f104 0510 	add.w	r5, r4, #16
 800e9a4:	460a      	mov	r2, r1
 800e9a6:	4629      	mov	r1, r5
 800e9a8:	47b0      	blx	r6
 800e9aa:	e746      	b.n	800e83a <_rclc_execute+0x102>
 800e9ac:	6860      	ldr	r0, [r4, #4]
 800e9ae:	f880 5020 	strb.w	r5, [r0, #32]
 800e9b2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	f43f aec8 	beq.w	800e74c <_rclc_execute+0x14>
 800e9bc:	68c5      	ldr	r5, [r0, #12]
 800e9be:	b325      	cbz	r5, 800ea0a <_rclc_execute+0x2d2>
 800e9c0:	2602      	movs	r6, #2
 800e9c2:	e001      	b.n	800e9c8 <_rclc_execute+0x290>
 800e9c4:	682d      	ldr	r5, [r5, #0]
 800e9c6:	b305      	cbz	r5, 800ea0a <_rclc_execute+0x2d2>
 800e9c8:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800e9cc:	2b03      	cmp	r3, #3
 800e9ce:	d1f9      	bne.n	800e9c4 <_rclc_execute+0x28c>
 800e9d0:	69c3      	ldr	r3, [r0, #28]
 800e9d2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e9d4:	4628      	mov	r0, r5
 800e9d6:	4798      	blx	r3
 800e9d8:	4603      	mov	r3, r0
 800e9da:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800e9de:	4628      	mov	r0, r5
 800e9e0:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800e9e4:	b11b      	cbz	r3, 800e9ee <_rclc_execute+0x2b6>
 800e9e6:	f00a fb63 	bl	80190b0 <rclc_action_server_goal_cancel_accept>
 800e9ea:	6860      	ldr	r0, [r4, #4]
 800e9ec:	e7ea      	b.n	800e9c4 <_rclc_execute+0x28c>
 800e9ee:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800e9f0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e9f4:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800e9f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e9fc:	6860      	ldr	r0, [r4, #4]
 800e9fe:	2101      	movs	r1, #1
 800ea00:	f00a fb82 	bl	8019108 <rclc_action_server_goal_cancel_reject>
 800ea04:	722e      	strb	r6, [r5, #8]
 800ea06:	6860      	ldr	r0, [r4, #4]
 800ea08:	e7dc      	b.n	800e9c4 <_rclc_execute+0x28c>
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800ea10:	e69c      	b.n	800e74c <_rclc_execute+0x14>
 800ea12:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ea14:	47b0      	blx	r6
 800ea16:	f104 0510 	add.w	r5, r4, #16
 800ea1a:	e70e      	b.n	800e83a <_rclc_execute+0x102>
 800ea1c:	2001      	movs	r0, #1
 800ea1e:	e696      	b.n	800e74e <_rclc_execute+0x16>

0800ea20 <rclc_executor_get_zero_initialized_executor>:
 800ea20:	b510      	push	{r4, lr}
 800ea22:	4903      	ldr	r1, [pc, #12]	@ (800ea30 <rclc_executor_get_zero_initialized_executor+0x10>)
 800ea24:	4604      	mov	r4, r0
 800ea26:	2290      	movs	r2, #144	@ 0x90
 800ea28:	f00e ffd9 	bl	801d9de <memcpy>
 800ea2c:	4620      	mov	r0, r4
 800ea2e:	bd10      	pop	{r4, pc}
 800ea30:	08020198 	.word	0x08020198
 800ea34:	00000000 	.word	0x00000000

0800ea38 <rclc_executor_init>:
 800ea38:	2800      	cmp	r0, #0
 800ea3a:	d05a      	beq.n	800eaf2 <rclc_executor_init+0xba>
 800ea3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea40:	460d      	mov	r5, r1
 800ea42:	b0b2      	sub	sp, #200	@ 0xc8
 800ea44:	2900      	cmp	r1, #0
 800ea46:	d050      	beq.n	800eaea <rclc_executor_init+0xb2>
 800ea48:	4604      	mov	r4, r0
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	4616      	mov	r6, r2
 800ea4e:	461f      	mov	r7, r3
 800ea50:	f000 fc00 	bl	800f254 <rcutils_allocator_is_valid>
 800ea54:	2800      	cmp	r0, #0
 800ea56:	d048      	beq.n	800eaea <rclc_executor_init+0xb2>
 800ea58:	2e00      	cmp	r6, #0
 800ea5a:	d046      	beq.n	800eaea <rclc_executor_init+0xb2>
 800ea5c:	492a      	ldr	r1, [pc, #168]	@ (800eb08 <rclc_executor_init+0xd0>)
 800ea5e:	2290      	movs	r2, #144	@ 0x90
 800ea60:	a80e      	add	r0, sp, #56	@ 0x38
 800ea62:	f00e ffbc 	bl	801d9de <memcpy>
 800ea66:	a90e      	add	r1, sp, #56	@ 0x38
 800ea68:	2290      	movs	r2, #144	@ 0x90
 800ea6a:	4620      	mov	r0, r4
 800ea6c:	f00e ffb7 	bl	801d9de <memcpy>
 800ea70:	6065      	str	r5, [r4, #4]
 800ea72:	4668      	mov	r0, sp
 800ea74:	60e6      	str	r6, [r4, #12]
 800ea76:	466d      	mov	r5, sp
 800ea78:	f008 ffb0 	bl	80179dc <rcl_get_zero_initialized_wait_set>
 800ea7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea7e:	f104 0c18 	add.w	ip, r4, #24
 800ea82:	f8d7 8000 	ldr.w	r8, [r7]
 800ea86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ea8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ea90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ea96:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 800eb00 <rclc_executor_init+0xc8>
 800ea9a:	682b      	ldr	r3, [r5, #0]
 800ea9c:	f8cc 3000 	str.w	r3, [ip]
 800eaa0:	6939      	ldr	r1, [r7, #16]
 800eaa2:	6167      	str	r7, [r4, #20]
 800eaa4:	ed84 7b1c 	vstr	d7, [r4, #112]	@ 0x70
 800eaa8:	01b0      	lsls	r0, r6, #6
 800eaaa:	47c0      	blx	r8
 800eaac:	60a0      	str	r0, [r4, #8]
 800eaae:	b310      	cbz	r0, 800eaf6 <rclc_executor_init+0xbe>
 800eab0:	2500      	movs	r5, #0
 800eab2:	e000      	b.n	800eab6 <rclc_executor_init+0x7e>
 800eab4:	68a0      	ldr	r0, [r4, #8]
 800eab6:	eb00 1085 	add.w	r0, r0, r5, lsl #6
 800eaba:	4631      	mov	r1, r6
 800eabc:	3501      	adds	r5, #1
 800eabe:	f000 fa39 	bl	800ef34 <rclc_executor_handle_init>
 800eac2:	42ae      	cmp	r6, r5
 800eac4:	d1f6      	bne.n	800eab4 <rclc_executor_init+0x7c>
 800eac6:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 800eaca:	f000 fa29 	bl	800ef20 <rclc_executor_handle_counters_zero_init>
 800eace:	490f      	ldr	r1, [pc, #60]	@ (800eb0c <rclc_executor_init+0xd4>)
 800ead0:	68a2      	ldr	r2, [r4, #8]
 800ead2:	2300      	movs	r3, #0
 800ead4:	e9c4 1320 	strd	r1, r3, [r4, #128]	@ 0x80
 800ead8:	b12a      	cbz	r2, 800eae6 <rclc_executor_init+0xae>
 800eada:	6962      	ldr	r2, [r4, #20]
 800eadc:	b11a      	cbz	r2, 800eae6 <rclc_executor_init+0xae>
 800eade:	68e2      	ldr	r2, [r4, #12]
 800eae0:	b10a      	cbz	r2, 800eae6 <rclc_executor_init+0xae>
 800eae2:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 800eae6:	2000      	movs	r0, #0
 800eae8:	e000      	b.n	800eaec <rclc_executor_init+0xb4>
 800eaea:	200b      	movs	r0, #11
 800eaec:	b032      	add	sp, #200	@ 0xc8
 800eaee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaf2:	200b      	movs	r0, #11
 800eaf4:	4770      	bx	lr
 800eaf6:	200a      	movs	r0, #10
 800eaf8:	e7f8      	b.n	800eaec <rclc_executor_init+0xb4>
 800eafa:	bf00      	nop
 800eafc:	f3af 8000 	nop.w
 800eb00:	3b9aca00 	.word	0x3b9aca00
 800eb04:	00000000 	.word	0x00000000
 800eb08:	08020198 	.word	0x08020198
 800eb0c:	0800e6cd 	.word	0x0800e6cd

0800eb10 <rclc_executor_add_timer>:
 800eb10:	b300      	cbz	r0, 800eb54 <rclc_executor_add_timer+0x44>
 800eb12:	b1f9      	cbz	r1, 800eb54 <rclc_executor_add_timer+0x44>
 800eb14:	b538      	push	{r3, r4, r5, lr}
 800eb16:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	4604      	mov	r4, r0
 800eb1e:	d301      	bcc.n	800eb24 <rclc_executor_add_timer+0x14>
 800eb20:	2001      	movs	r0, #1
 800eb22:	bd38      	pop	{r3, r4, r5, pc}
 800eb24:	6880      	ldr	r0, [r0, #8]
 800eb26:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800eb2a:	019d      	lsls	r5, r3, #6
 800eb2c:	6051      	str	r1, [r2, #4]
 800eb2e:	2102      	movs	r1, #2
 800eb30:	5341      	strh	r1, [r0, r5]
 800eb32:	3301      	adds	r3, #1
 800eb34:	2000      	movs	r0, #0
 800eb36:	2101      	movs	r1, #1
 800eb38:	f104 0518 	add.w	r5, r4, #24
 800eb3c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800eb3e:	8711      	strh	r1, [r2, #56]	@ 0x38
 800eb40:	4628      	mov	r0, r5
 800eb42:	6123      	str	r3, [r4, #16]
 800eb44:	f008 ff5e 	bl	8017a04 <rcl_wait_set_is_valid>
 800eb48:	b930      	cbnz	r0, 800eb58 <rclc_executor_add_timer+0x48>
 800eb4a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800eb4c:	3301      	adds	r3, #1
 800eb4e:	2000      	movs	r0, #0
 800eb50:	6523      	str	r3, [r4, #80]	@ 0x50
 800eb52:	bd38      	pop	{r3, r4, r5, pc}
 800eb54:	200b      	movs	r0, #11
 800eb56:	4770      	bx	lr
 800eb58:	4628      	mov	r0, r5
 800eb5a:	f008 ff59 	bl	8017a10 <rcl_wait_set_fini>
 800eb5e:	2800      	cmp	r0, #0
 800eb60:	d0f3      	beq.n	800eb4a <rclc_executor_add_timer+0x3a>
 800eb62:	bd38      	pop	{r3, r4, r5, pc}

0800eb64 <rclc_executor_add_service>:
 800eb64:	b370      	cbz	r0, 800ebc4 <rclc_executor_add_service+0x60>
 800eb66:	b369      	cbz	r1, 800ebc4 <rclc_executor_add_service+0x60>
 800eb68:	b362      	cbz	r2, 800ebc4 <rclc_executor_add_service+0x60>
 800eb6a:	b35b      	cbz	r3, 800ebc4 <rclc_executor_add_service+0x60>
 800eb6c:	b538      	push	{r3, r4, r5, lr}
 800eb6e:	4604      	mov	r4, r0
 800eb70:	9804      	ldr	r0, [sp, #16]
 800eb72:	b378      	cbz	r0, 800ebd4 <rclc_executor_add_service+0x70>
 800eb74:	e9d4 5003 	ldrd	r5, r0, [r4, #12]
 800eb78:	42a8      	cmp	r0, r5
 800eb7a:	d301      	bcc.n	800eb80 <rclc_executor_add_service+0x1c>
 800eb7c:	2001      	movs	r0, #1
 800eb7e:	bd38      	pop	{r3, r4, r5, pc}
 800eb80:	68a5      	ldr	r5, [r4, #8]
 800eb82:	eb05 1c80 	add.w	ip, r5, r0, lsl #6
 800eb86:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800eb8a:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
 800eb8e:	9b04      	ldr	r3, [sp, #16]
 800eb90:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800eb94:	2305      	movs	r3, #5
 800eb96:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800eb9a:	3001      	adds	r0, #1
 800eb9c:	f825 300e 	strh.w	r3, [r5, lr]
 800eba0:	2201      	movs	r2, #1
 800eba2:	2300      	movs	r3, #0
 800eba4:	f104 0518 	add.w	r5, r4, #24
 800eba8:	f88c 2038 	strb.w	r2, [ip, #56]	@ 0x38
 800ebac:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
 800ebb0:	6120      	str	r0, [r4, #16]
 800ebb2:	4628      	mov	r0, r5
 800ebb4:	f008 ff26 	bl	8017a04 <rcl_wait_set_is_valid>
 800ebb8:	b930      	cbnz	r0, 800ebc8 <rclc_executor_add_service+0x64>
 800ebba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ebbc:	3301      	adds	r3, #1
 800ebbe:	2000      	movs	r0, #0
 800ebc0:	65a3      	str	r3, [r4, #88]	@ 0x58
 800ebc2:	bd38      	pop	{r3, r4, r5, pc}
 800ebc4:	200b      	movs	r0, #11
 800ebc6:	4770      	bx	lr
 800ebc8:	4628      	mov	r0, r5
 800ebca:	f008 ff21 	bl	8017a10 <rcl_wait_set_fini>
 800ebce:	2800      	cmp	r0, #0
 800ebd0:	d0f3      	beq.n	800ebba <rclc_executor_add_service+0x56>
 800ebd2:	e7d4      	b.n	800eb7e <rclc_executor_add_service+0x1a>
 800ebd4:	200b      	movs	r0, #11
 800ebd6:	bd38      	pop	{r3, r4, r5, pc}

0800ebd8 <rclc_executor_prepare>:
 800ebd8:	2800      	cmp	r0, #0
 800ebda:	d044      	beq.n	800ec66 <rclc_executor_prepare+0x8e>
 800ebdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebde:	f100 0518 	add.w	r5, r0, #24
 800ebe2:	b09b      	sub	sp, #108	@ 0x6c
 800ebe4:	4604      	mov	r4, r0
 800ebe6:	4628      	mov	r0, r5
 800ebe8:	f008 ff0c 	bl	8017a04 <rcl_wait_set_is_valid>
 800ebec:	b110      	cbz	r0, 800ebf4 <rclc_executor_prepare+0x1c>
 800ebee:	2000      	movs	r0, #0
 800ebf0:	b01b      	add	sp, #108	@ 0x6c
 800ebf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebf4:	4628      	mov	r0, r5
 800ebf6:	f008 ff0b 	bl	8017a10 <rcl_wait_set_fini>
 800ebfa:	2800      	cmp	r0, #0
 800ebfc:	d130      	bne.n	800ec60 <rclc_executor_prepare+0x88>
 800ebfe:	a80c      	add	r0, sp, #48	@ 0x30
 800ec00:	f008 feec 	bl	80179dc <rcl_get_zero_initialized_wait_set>
 800ec04:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800ec08:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ec0c:	46ae      	mov	lr, r5
 800ec0e:	6967      	ldr	r7, [r4, #20]
 800ec10:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ec14:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ec18:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ec1c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ec20:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ec24:	f8dc 3000 	ldr.w	r3, [ip]
 800ec28:	f8ce 3000 	str.w	r3, [lr]
 800ec2c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ec2e:	ae04      	add	r6, sp, #16
 800ec30:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	6862      	ldr	r2, [r4, #4]
 800ec36:	6033      	str	r3, [r6, #0]
 800ec38:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800ec3a:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800ec3c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800ec40:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 800ec44:	e9cd 2100 	strd	r2, r1, [sp]
 800ec48:	4628      	mov	r0, r5
 800ec4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ec4c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800ec4e:	f009 f9fb 	bl	8018048 <rcl_wait_set_init>
 800ec52:	2800      	cmp	r0, #0
 800ec54:	d0cc      	beq.n	800ebf0 <rclc_executor_prepare+0x18>
 800ec56:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ec58:	f000 fb22 	bl	800f2a0 <rcutils_reset_error>
 800ec5c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ec5e:	e7c7      	b.n	800ebf0 <rclc_executor_prepare+0x18>
 800ec60:	f000 fb1e 	bl	800f2a0 <rcutils_reset_error>
 800ec64:	e7cb      	b.n	800ebfe <rclc_executor_prepare+0x26>
 800ec66:	200b      	movs	r0, #11
 800ec68:	4770      	bx	lr
 800ec6a:	bf00      	nop

0800ec6c <rclc_executor_spin_some>:
 800ec6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec70:	b083      	sub	sp, #12
 800ec72:	2800      	cmp	r0, #0
 800ec74:	f000 8091 	beq.w	800ed9a <rclc_executor_spin_some+0x12e>
 800ec78:	4604      	mov	r4, r0
 800ec7a:	6840      	ldr	r0, [r0, #4]
 800ec7c:	4690      	mov	r8, r2
 800ec7e:	4699      	mov	r9, r3
 800ec80:	f007 faf4 	bl	801626c <rcl_context_is_valid>
 800ec84:	2800      	cmp	r0, #0
 800ec86:	d037      	beq.n	800ecf8 <rclc_executor_spin_some+0x8c>
 800ec88:	4620      	mov	r0, r4
 800ec8a:	f104 0718 	add.w	r7, r4, #24
 800ec8e:	f7ff ffa3 	bl	800ebd8 <rclc_executor_prepare>
 800ec92:	4638      	mov	r0, r7
 800ec94:	f008 ff8c 	bl	8017bb0 <rcl_wait_set_clear>
 800ec98:	4606      	mov	r6, r0
 800ec9a:	2800      	cmp	r0, #0
 800ec9c:	d177      	bne.n	800ed8e <rclc_executor_spin_some+0x122>
 800ec9e:	68e3      	ldr	r3, [r4, #12]
 800eca0:	4605      	mov	r5, r0
 800eca2:	b1eb      	cbz	r3, 800ece0 <rclc_executor_spin_some+0x74>
 800eca4:	68a1      	ldr	r1, [r4, #8]
 800eca6:	eb01 1c85 	add.w	ip, r1, r5, lsl #6
 800ecaa:	01aa      	lsls	r2, r5, #6
 800ecac:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800ecb0:	b1b3      	cbz	r3, 800ece0 <rclc_executor_spin_some+0x74>
 800ecb2:	5c8b      	ldrb	r3, [r1, r2]
 800ecb4:	2b0a      	cmp	r3, #10
 800ecb6:	d81f      	bhi.n	800ecf8 <rclc_executor_spin_some+0x8c>
 800ecb8:	e8df f003 	tbb	[pc, r3]
 800ecbc:	253e3434 	.word	0x253e3434
 800ecc0:	06060625 	.word	0x06060625
 800ecc4:	525d      	.short	0x525d
 800ecc6:	48          	.byte	0x48
 800ecc7:	00          	.byte	0x00
 800ecc8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800eccc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ecd0:	4638      	mov	r0, r7
 800ecd2:	f009 facd 	bl	8018270 <rcl_wait_set_add_service>
 800ecd6:	b9f8      	cbnz	r0, 800ed18 <rclc_executor_spin_some+0xac>
 800ecd8:	68e3      	ldr	r3, [r4, #12]
 800ecda:	3501      	adds	r5, #1
 800ecdc:	42ab      	cmp	r3, r5
 800ecde:	d8e1      	bhi.n	800eca4 <rclc_executor_spin_some+0x38>
 800ece0:	4642      	mov	r2, r8
 800ece2:	464b      	mov	r3, r9
 800ece4:	4638      	mov	r0, r7
 800ece6:	f009 faef 	bl	80182c8 <rcl_wait>
 800ecea:	f894 5088 	ldrb.w	r5, [r4, #136]	@ 0x88
 800ecee:	2d00      	cmp	r5, #0
 800ecf0:	f000 80ab 	beq.w	800ee4a <rclc_executor_spin_some+0x1de>
 800ecf4:	2d01      	cmp	r5, #1
 800ecf6:	d055      	beq.n	800eda4 <rclc_executor_spin_some+0x138>
 800ecf8:	f000 fad2 	bl	800f2a0 <rcutils_reset_error>
 800ecfc:	2601      	movs	r6, #1
 800ecfe:	4630      	mov	r0, r6
 800ed00:	b003      	add	sp, #12
 800ed02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed06:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ed0a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ed0e:	4638      	mov	r0, r7
 800ed10:	f009 fa82 	bl	8018218 <rcl_wait_set_add_client>
 800ed14:	2800      	cmp	r0, #0
 800ed16:	d0df      	beq.n	800ecd8 <rclc_executor_spin_some+0x6c>
 800ed18:	9001      	str	r0, [sp, #4]
 800ed1a:	f000 fac1 	bl	800f2a0 <rcutils_reset_error>
 800ed1e:	9801      	ldr	r0, [sp, #4]
 800ed20:	4606      	mov	r6, r0
 800ed22:	e7ec      	b.n	800ecfe <rclc_executor_spin_some+0x92>
 800ed24:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ed28:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ed2c:	4638      	mov	r0, r7
 800ed2e:	f008 ff13 	bl	8017b58 <rcl_wait_set_add_subscription>
 800ed32:	2800      	cmp	r0, #0
 800ed34:	d0d0      	beq.n	800ecd8 <rclc_executor_spin_some+0x6c>
 800ed36:	e7ef      	b.n	800ed18 <rclc_executor_spin_some+0xac>
 800ed38:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ed3c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ed40:	4638      	mov	r0, r7
 800ed42:	f009 fa39 	bl	80181b8 <rcl_wait_set_add_timer>
 800ed46:	2800      	cmp	r0, #0
 800ed48:	d0c6      	beq.n	800ecd8 <rclc_executor_spin_some+0x6c>
 800ed4a:	e7e5      	b.n	800ed18 <rclc_executor_spin_some+0xac>
 800ed4c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ed50:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ed54:	4638      	mov	r0, r7
 800ed56:	f009 fa03 	bl	8018160 <rcl_wait_set_add_guard_condition>
 800ed5a:	2800      	cmp	r0, #0
 800ed5c:	d0bc      	beq.n	800ecd8 <rclc_executor_spin_some+0x6c>
 800ed5e:	e7db      	b.n	800ed18 <rclc_executor_spin_some+0xac>
 800ed60:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ed64:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ed68:	3110      	adds	r1, #16
 800ed6a:	4638      	mov	r0, r7
 800ed6c:	f009 ffca 	bl	8018d04 <rcl_action_wait_set_add_action_server>
 800ed70:	2800      	cmp	r0, #0
 800ed72:	d0b1      	beq.n	800ecd8 <rclc_executor_spin_some+0x6c>
 800ed74:	e7d0      	b.n	800ed18 <rclc_executor_spin_some+0xac>
 800ed76:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ed80:	3110      	adds	r1, #16
 800ed82:	4638      	mov	r0, r7
 800ed84:	f009 fdac 	bl	80188e0 <rcl_action_wait_set_add_action_client>
 800ed88:	2800      	cmp	r0, #0
 800ed8a:	d0a5      	beq.n	800ecd8 <rclc_executor_spin_some+0x6c>
 800ed8c:	e7c4      	b.n	800ed18 <rclc_executor_spin_some+0xac>
 800ed8e:	f000 fa87 	bl	800f2a0 <rcutils_reset_error>
 800ed92:	4630      	mov	r0, r6
 800ed94:	b003      	add	sp, #12
 800ed96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed9a:	260b      	movs	r6, #11
 800ed9c:	4630      	mov	r0, r6
 800ed9e:	b003      	add	sp, #12
 800eda0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eda4:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 800eda8:	4663      	mov	r3, ip
 800edaa:	4615      	mov	r5, r2
 800edac:	b1ca      	cbz	r2, 800ede2 <rclc_executor_spin_some+0x176>
 800edae:	2500      	movs	r5, #0
 800edb0:	46a8      	mov	r8, r5
 800edb2:	f240 1991 	movw	r9, #401	@ 0x191
 800edb6:	e00c      	b.n	800edd2 <rclc_executor_spin_some+0x166>
 800edb8:	f7ff fad0 	bl	800e35c <_rclc_check_for_new_data>
 800edbc:	f108 0801 	add.w	r8, r8, #1
 800edc0:	4605      	mov	r5, r0
 800edc2:	b108      	cbz	r0, 800edc8 <rclc_executor_spin_some+0x15c>
 800edc4:	4548      	cmp	r0, r9
 800edc6:	d13e      	bne.n	800ee46 <rclc_executor_spin_some+0x1da>
 800edc8:	68e2      	ldr	r2, [r4, #12]
 800edca:	4590      	cmp	r8, r2
 800edcc:	f080 808b 	bcs.w	800eee6 <rclc_executor_spin_some+0x27a>
 800edd0:	68a3      	ldr	r3, [r4, #8]
 800edd2:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800edd6:	469c      	mov	ip, r3
 800edd8:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800eddc:	4639      	mov	r1, r7
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d1ea      	bne.n	800edb8 <rclc_executor_spin_some+0x14c>
 800ede2:	4611      	mov	r1, r2
 800ede4:	4660      	mov	r0, ip
 800ede6:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 800edea:	4798      	blx	r3
 800edec:	b358      	cbz	r0, 800ee46 <rclc_executor_spin_some+0x1da>
 800edee:	68e3      	ldr	r3, [r4, #12]
 800edf0:	b34b      	cbz	r3, 800ee46 <rclc_executor_spin_some+0x1da>
 800edf2:	f04f 0800 	mov.w	r8, #0
 800edf6:	f240 1991 	movw	r9, #401	@ 0x191
 800edfa:	e00a      	b.n	800ee12 <rclc_executor_spin_some+0x1a6>
 800edfc:	f7ff fafc 	bl	800e3f8 <_rclc_take_new_data>
 800ee00:	f108 0801 	add.w	r8, r8, #1
 800ee04:	4605      	mov	r5, r0
 800ee06:	b108      	cbz	r0, 800ee0c <rclc_executor_spin_some+0x1a0>
 800ee08:	4548      	cmp	r0, r9
 800ee0a:	d11c      	bne.n	800ee46 <rclc_executor_spin_some+0x1da>
 800ee0c:	68e3      	ldr	r3, [r4, #12]
 800ee0e:	4598      	cmp	r8, r3
 800ee10:	d26f      	bcs.n	800eef2 <rclc_executor_spin_some+0x286>
 800ee12:	68a3      	ldr	r3, [r4, #8]
 800ee14:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800ee18:	4639      	mov	r1, r7
 800ee1a:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800ee1e:	2a00      	cmp	r2, #0
 800ee20:	d1ec      	bne.n	800edfc <rclc_executor_spin_some+0x190>
 800ee22:	2700      	movs	r7, #0
 800ee24:	e009      	b.n	800ee3a <rclc_executor_spin_some+0x1ce>
 800ee26:	f7ff fc87 	bl	800e738 <_rclc_execute>
 800ee2a:	3701      	adds	r7, #1
 800ee2c:	4605      	mov	r5, r0
 800ee2e:	b950      	cbnz	r0, 800ee46 <rclc_executor_spin_some+0x1da>
 800ee30:	68e3      	ldr	r3, [r4, #12]
 800ee32:	429f      	cmp	r7, r3
 800ee34:	f4bf af63 	bcs.w	800ecfe <rclc_executor_spin_some+0x92>
 800ee38:	68a3      	ldr	r3, [r4, #8]
 800ee3a:	eb03 1087 	add.w	r0, r3, r7, lsl #6
 800ee3e:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d1ef      	bne.n	800ee26 <rclc_executor_spin_some+0x1ba>
 800ee46:	462e      	mov	r6, r5
 800ee48:	e759      	b.n	800ecfe <rclc_executor_spin_some+0x92>
 800ee4a:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 800ee4e:	4663      	mov	r3, ip
 800ee50:	2a00      	cmp	r2, #0
 800ee52:	d054      	beq.n	800eefe <rclc_executor_spin_some+0x292>
 800ee54:	46a8      	mov	r8, r5
 800ee56:	f240 1991 	movw	r9, #401	@ 0x191
 800ee5a:	e00b      	b.n	800ee74 <rclc_executor_spin_some+0x208>
 800ee5c:	f7ff fa7e 	bl	800e35c <_rclc_check_for_new_data>
 800ee60:	f108 0801 	add.w	r8, r8, #1
 800ee64:	4605      	mov	r5, r0
 800ee66:	b108      	cbz	r0, 800ee6c <rclc_executor_spin_some+0x200>
 800ee68:	4548      	cmp	r0, r9
 800ee6a:	d1ec      	bne.n	800ee46 <rclc_executor_spin_some+0x1da>
 800ee6c:	68e2      	ldr	r2, [r4, #12]
 800ee6e:	4590      	cmp	r8, r2
 800ee70:	d23c      	bcs.n	800eeec <rclc_executor_spin_some+0x280>
 800ee72:	68a3      	ldr	r3, [r4, #8]
 800ee74:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800ee78:	469c      	mov	ip, r3
 800ee7a:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800ee7e:	4639      	mov	r1, r7
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d1eb      	bne.n	800ee5c <rclc_executor_spin_some+0x1f0>
 800ee84:	4611      	mov	r1, r2
 800ee86:	4660      	mov	r0, ip
 800ee88:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 800ee8c:	4798      	blx	r3
 800ee8e:	2800      	cmp	r0, #0
 800ee90:	d0d9      	beq.n	800ee46 <rclc_executor_spin_some+0x1da>
 800ee92:	68e3      	ldr	r3, [r4, #12]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d0d6      	beq.n	800ee46 <rclc_executor_spin_some+0x1da>
 800ee98:	f04f 0a00 	mov.w	sl, #0
 800ee9c:	f240 1891 	movw	r8, #401	@ 0x191
 800eea0:	f240 2959 	movw	r9, #601	@ 0x259
 800eea4:	e013      	b.n	800eece <rclc_executor_spin_some+0x262>
 800eea6:	f7ff faa7 	bl	800e3f8 <_rclc_take_new_data>
 800eeaa:	b118      	cbz	r0, 800eeb4 <rclc_executor_spin_some+0x248>
 800eeac:	4540      	cmp	r0, r8
 800eeae:	d001      	beq.n	800eeb4 <rclc_executor_spin_some+0x248>
 800eeb0:	4548      	cmp	r0, r9
 800eeb2:	d122      	bne.n	800eefa <rclc_executor_spin_some+0x28e>
 800eeb4:	68a0      	ldr	r0, [r4, #8]
 800eeb6:	4458      	add	r0, fp
 800eeb8:	f7ff fc3e 	bl	800e738 <_rclc_execute>
 800eebc:	f10a 0a01 	add.w	sl, sl, #1
 800eec0:	4605      	mov	r5, r0
 800eec2:	2800      	cmp	r0, #0
 800eec4:	d1bf      	bne.n	800ee46 <rclc_executor_spin_some+0x1da>
 800eec6:	68e3      	ldr	r3, [r4, #12]
 800eec8:	459a      	cmp	sl, r3
 800eeca:	f4bf af18 	bcs.w	800ecfe <rclc_executor_spin_some+0x92>
 800eece:	68a0      	ldr	r0, [r4, #8]
 800eed0:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800eed4:	4639      	mov	r1, r7
 800eed6:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800eeda:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d1e1      	bne.n	800eea6 <rclc_executor_spin_some+0x23a>
 800eee2:	462e      	mov	r6, r5
 800eee4:	e70b      	b.n	800ecfe <rclc_executor_spin_some+0x92>
 800eee6:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800eeea:	e77a      	b.n	800ede2 <rclc_executor_spin_some+0x176>
 800eeec:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800eef0:	e7c8      	b.n	800ee84 <rclc_executor_spin_some+0x218>
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d0a7      	beq.n	800ee46 <rclc_executor_spin_some+0x1da>
 800eef6:	68a3      	ldr	r3, [r4, #8]
 800eef8:	e793      	b.n	800ee22 <rclc_executor_spin_some+0x1b6>
 800eefa:	4606      	mov	r6, r0
 800eefc:	e6ff      	b.n	800ecfe <rclc_executor_spin_some+0x92>
 800eefe:	4615      	mov	r5, r2
 800ef00:	e7c0      	b.n	800ee84 <rclc_executor_spin_some+0x218>
 800ef02:	bf00      	nop

0800ef04 <rclc_executor_spin>:
 800ef04:	b150      	cbz	r0, 800ef1c <rclc_executor_spin+0x18>
 800ef06:	b510      	push	{r4, lr}
 800ef08:	4604      	mov	r4, r0
 800ef0a:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	@ 0x70
 800ef0e:	4620      	mov	r0, r4
 800ef10:	f7ff feac 	bl	800ec6c <rclc_executor_spin_some>
 800ef14:	f030 0302 	bics.w	r3, r0, #2
 800ef18:	d0f7      	beq.n	800ef0a <rclc_executor_spin+0x6>
 800ef1a:	bd10      	pop	{r4, pc}
 800ef1c:	200b      	movs	r0, #11
 800ef1e:	4770      	bx	lr

0800ef20 <rclc_executor_handle_counters_zero_init>:
 800ef20:	b130      	cbz	r0, 800ef30 <rclc_executor_handle_counters_zero_init+0x10>
 800ef22:	b508      	push	{r3, lr}
 800ef24:	2220      	movs	r2, #32
 800ef26:	2100      	movs	r1, #0
 800ef28:	f00e fc7e 	bl	801d828 <memset>
 800ef2c:	2000      	movs	r0, #0
 800ef2e:	bd08      	pop	{r3, pc}
 800ef30:	200b      	movs	r0, #11
 800ef32:	4770      	bx	lr

0800ef34 <rclc_executor_handle_init>:
 800ef34:	b158      	cbz	r0, 800ef4e <rclc_executor_handle_init+0x1a>
 800ef36:	2300      	movs	r3, #0
 800ef38:	220b      	movs	r2, #11
 800ef3a:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800ef3e:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 800ef42:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800ef46:	8002      	strh	r2, [r0, #0]
 800ef48:	8703      	strh	r3, [r0, #56]	@ 0x38
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	4770      	bx	lr
 800ef4e:	200b      	movs	r0, #11
 800ef50:	4770      	bx	lr
 800ef52:	bf00      	nop

0800ef54 <rclc_support_init_with_options>:
 800ef54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef58:	b083      	sub	sp, #12
 800ef5a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ef5c:	b340      	cbz	r0, 800efb0 <rclc_support_init_with_options+0x5c>
 800ef5e:	461d      	mov	r5, r3
 800ef60:	b333      	cbz	r3, 800efb0 <rclc_support_init_with_options+0x5c>
 800ef62:	b32e      	cbz	r6, 800efb0 <rclc_support_init_with_options+0x5c>
 800ef64:	46e9      	mov	r9, sp
 800ef66:	4604      	mov	r4, r0
 800ef68:	4648      	mov	r0, r9
 800ef6a:	460f      	mov	r7, r1
 800ef6c:	4690      	mov	r8, r2
 800ef6e:	f007 f973 	bl	8016258 <rcl_get_zero_initialized_context>
 800ef72:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ef76:	462a      	mov	r2, r5
 800ef78:	e884 0003 	stmia.w	r4, {r0, r1}
 800ef7c:	4623      	mov	r3, r4
 800ef7e:	4641      	mov	r1, r8
 800ef80:	4638      	mov	r0, r7
 800ef82:	f007 f9d9 	bl	8016338 <rcl_init>
 800ef86:	4605      	mov	r5, r0
 800ef88:	b960      	cbnz	r0, 800efa4 <rclc_support_init_with_options+0x50>
 800ef8a:	60a6      	str	r6, [r4, #8]
 800ef8c:	4632      	mov	r2, r6
 800ef8e:	f104 010c 	add.w	r1, r4, #12
 800ef92:	2003      	movs	r0, #3
 800ef94:	f008 f924 	bl	80171e0 <rcl_clock_init>
 800ef98:	4605      	mov	r5, r0
 800ef9a:	b918      	cbnz	r0, 800efa4 <rclc_support_init_with_options+0x50>
 800ef9c:	4628      	mov	r0, r5
 800ef9e:	b003      	add	sp, #12
 800efa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efa4:	f000 f97c 	bl	800f2a0 <rcutils_reset_error>
 800efa8:	4628      	mov	r0, r5
 800efaa:	b003      	add	sp, #12
 800efac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efb0:	250b      	movs	r5, #11
 800efb2:	4628      	mov	r0, r5
 800efb4:	b003      	add	sp, #12
 800efb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efba:	bf00      	nop

0800efbc <rclc_node_init_default>:
 800efbc:	b3b8      	cbz	r0, 800f02e <rclc_node_init_default+0x72>
 800efbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800efc2:	460d      	mov	r5, r1
 800efc4:	b0a1      	sub	sp, #132	@ 0x84
 800efc6:	b329      	cbz	r1, 800f014 <rclc_node_init_default+0x58>
 800efc8:	4616      	mov	r6, r2
 800efca:	b31a      	cbz	r2, 800f014 <rclc_node_init_default+0x58>
 800efcc:	461f      	mov	r7, r3
 800efce:	b30b      	cbz	r3, 800f014 <rclc_node_init_default+0x58>
 800efd0:	f10d 0810 	add.w	r8, sp, #16
 800efd4:	4604      	mov	r4, r0
 800efd6:	4640      	mov	r0, r8
 800efd8:	f007 fb0a 	bl	80165f0 <rcl_get_zero_initialized_node>
 800efdc:	e898 0003 	ldmia.w	r8, {r0, r1}
 800efe0:	f10d 0918 	add.w	r9, sp, #24
 800efe4:	e884 0003 	stmia.w	r4, {r0, r1}
 800efe8:	4648      	mov	r0, r9
 800efea:	f007 fca9 	bl	8016940 <rcl_node_get_default_options>
 800efee:	4640      	mov	r0, r8
 800eff0:	f007 fafe 	bl	80165f0 <rcl_get_zero_initialized_node>
 800eff4:	f8cd 9000 	str.w	r9, [sp]
 800eff8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800effc:	463b      	mov	r3, r7
 800effe:	e884 0003 	stmia.w	r4, {r0, r1}
 800f002:	4632      	mov	r2, r6
 800f004:	4629      	mov	r1, r5
 800f006:	4620      	mov	r0, r4
 800f008:	f007 fafc 	bl	8016604 <rcl_node_init>
 800f00c:	b930      	cbnz	r0, 800f01c <rclc_node_init_default+0x60>
 800f00e:	b021      	add	sp, #132	@ 0x84
 800f010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f014:	200b      	movs	r0, #11
 800f016:	b021      	add	sp, #132	@ 0x84
 800f018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f01c:	9003      	str	r0, [sp, #12]
 800f01e:	f000 f93f 	bl	800f2a0 <rcutils_reset_error>
 800f022:	f000 f93d 	bl	800f2a0 <rcutils_reset_error>
 800f026:	9803      	ldr	r0, [sp, #12]
 800f028:	b021      	add	sp, #132	@ 0x84
 800f02a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f02e:	200b      	movs	r0, #11
 800f030:	4770      	bx	lr
 800f032:	bf00      	nop

0800f034 <rclc_publisher_init_default>:
 800f034:	b368      	cbz	r0, 800f092 <rclc_publisher_init_default+0x5e>
 800f036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f03a:	460d      	mov	r5, r1
 800f03c:	b0a0      	sub	sp, #128	@ 0x80
 800f03e:	b321      	cbz	r1, 800f08a <rclc_publisher_init_default+0x56>
 800f040:	4616      	mov	r6, r2
 800f042:	b312      	cbz	r2, 800f08a <rclc_publisher_init_default+0x56>
 800f044:	461f      	mov	r7, r3
 800f046:	b303      	cbz	r3, 800f08a <rclc_publisher_init_default+0x56>
 800f048:	4604      	mov	r4, r0
 800f04a:	f7ff f869 	bl	800e120 <rcl_get_zero_initialized_publisher>
 800f04e:	f10d 0810 	add.w	r8, sp, #16
 800f052:	6020      	str	r0, [r4, #0]
 800f054:	4640      	mov	r0, r8
 800f056:	f7ff f901 	bl	800e25c <rcl_publisher_get_default_options>
 800f05a:	490f      	ldr	r1, [pc, #60]	@ (800f098 <rclc_publisher_init_default+0x64>)
 800f05c:	2250      	movs	r2, #80	@ 0x50
 800f05e:	4640      	mov	r0, r8
 800f060:	f00e fcbd 	bl	801d9de <memcpy>
 800f064:	f8cd 8000 	str.w	r8, [sp]
 800f068:	463b      	mov	r3, r7
 800f06a:	4632      	mov	r2, r6
 800f06c:	4629      	mov	r1, r5
 800f06e:	4620      	mov	r0, r4
 800f070:	f7ff f85c 	bl	800e12c <rcl_publisher_init>
 800f074:	b910      	cbnz	r0, 800f07c <rclc_publisher_init_default+0x48>
 800f076:	b020      	add	sp, #128	@ 0x80
 800f078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f07c:	9003      	str	r0, [sp, #12]
 800f07e:	f000 f90f 	bl	800f2a0 <rcutils_reset_error>
 800f082:	9803      	ldr	r0, [sp, #12]
 800f084:	b020      	add	sp, #128	@ 0x80
 800f086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f08a:	200b      	movs	r0, #11
 800f08c:	b020      	add	sp, #128	@ 0x80
 800f08e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f092:	200b      	movs	r0, #11
 800f094:	4770      	bx	lr
 800f096:	bf00      	nop
 800f098:	08020228 	.word	0x08020228

0800f09c <rclc_publisher_init_best_effort>:
 800f09c:	b368      	cbz	r0, 800f0fa <rclc_publisher_init_best_effort+0x5e>
 800f09e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0a2:	460d      	mov	r5, r1
 800f0a4:	b0a0      	sub	sp, #128	@ 0x80
 800f0a6:	b321      	cbz	r1, 800f0f2 <rclc_publisher_init_best_effort+0x56>
 800f0a8:	4616      	mov	r6, r2
 800f0aa:	b312      	cbz	r2, 800f0f2 <rclc_publisher_init_best_effort+0x56>
 800f0ac:	461f      	mov	r7, r3
 800f0ae:	b303      	cbz	r3, 800f0f2 <rclc_publisher_init_best_effort+0x56>
 800f0b0:	4604      	mov	r4, r0
 800f0b2:	f7ff f835 	bl	800e120 <rcl_get_zero_initialized_publisher>
 800f0b6:	f10d 0810 	add.w	r8, sp, #16
 800f0ba:	6020      	str	r0, [r4, #0]
 800f0bc:	4640      	mov	r0, r8
 800f0be:	f7ff f8cd 	bl	800e25c <rcl_publisher_get_default_options>
 800f0c2:	490f      	ldr	r1, [pc, #60]	@ (800f100 <rclc_publisher_init_best_effort+0x64>)
 800f0c4:	2250      	movs	r2, #80	@ 0x50
 800f0c6:	4640      	mov	r0, r8
 800f0c8:	f00e fc89 	bl	801d9de <memcpy>
 800f0cc:	f8cd 8000 	str.w	r8, [sp]
 800f0d0:	463b      	mov	r3, r7
 800f0d2:	4632      	mov	r2, r6
 800f0d4:	4629      	mov	r1, r5
 800f0d6:	4620      	mov	r0, r4
 800f0d8:	f7ff f828 	bl	800e12c <rcl_publisher_init>
 800f0dc:	b910      	cbnz	r0, 800f0e4 <rclc_publisher_init_best_effort+0x48>
 800f0de:	b020      	add	sp, #128	@ 0x80
 800f0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0e4:	9003      	str	r0, [sp, #12]
 800f0e6:	f000 f8db 	bl	800f2a0 <rcutils_reset_error>
 800f0ea:	9803      	ldr	r0, [sp, #12]
 800f0ec:	b020      	add	sp, #128	@ 0x80
 800f0ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0f2:	200b      	movs	r0, #11
 800f0f4:	b020      	add	sp, #128	@ 0x80
 800f0f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0fa:	200b      	movs	r0, #11
 800f0fc:	4770      	bx	lr
 800f0fe:	bf00      	nop
 800f100:	08020278 	.word	0x08020278

0800f104 <rclc_service_init_default>:
 800f104:	b368      	cbz	r0, 800f162 <rclc_service_init_default+0x5e>
 800f106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f10a:	460d      	mov	r5, r1
 800f10c:	b09e      	sub	sp, #120	@ 0x78
 800f10e:	b321      	cbz	r1, 800f15a <rclc_service_init_default+0x56>
 800f110:	4616      	mov	r6, r2
 800f112:	b312      	cbz	r2, 800f15a <rclc_service_init_default+0x56>
 800f114:	461f      	mov	r7, r3
 800f116:	b303      	cbz	r3, 800f15a <rclc_service_init_default+0x56>
 800f118:	4604      	mov	r4, r0
 800f11a:	f007 fded 	bl	8016cf8 <rcl_get_zero_initialized_service>
 800f11e:	f10d 0810 	add.w	r8, sp, #16
 800f122:	6020      	str	r0, [r4, #0]
 800f124:	4640      	mov	r0, r8
 800f126:	f007 fe91 	bl	8016e4c <rcl_service_get_default_options>
 800f12a:	490f      	ldr	r1, [pc, #60]	@ (800f168 <rclc_service_init_default+0x64>)
 800f12c:	2250      	movs	r2, #80	@ 0x50
 800f12e:	4640      	mov	r0, r8
 800f130:	f00e fc55 	bl	801d9de <memcpy>
 800f134:	f8cd 8000 	str.w	r8, [sp]
 800f138:	463b      	mov	r3, r7
 800f13a:	4632      	mov	r2, r6
 800f13c:	4629      	mov	r1, r5
 800f13e:	4620      	mov	r0, r4
 800f140:	f007 fde0 	bl	8016d04 <rcl_service_init>
 800f144:	b910      	cbnz	r0, 800f14c <rclc_service_init_default+0x48>
 800f146:	b01e      	add	sp, #120	@ 0x78
 800f148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f14c:	9003      	str	r0, [sp, #12]
 800f14e:	f000 f8a7 	bl	800f2a0 <rcutils_reset_error>
 800f152:	9803      	ldr	r0, [sp, #12]
 800f154:	b01e      	add	sp, #120	@ 0x78
 800f156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f15a:	200b      	movs	r0, #11
 800f15c:	b01e      	add	sp, #120	@ 0x78
 800f15e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f162:	200b      	movs	r0, #11
 800f164:	4770      	bx	lr
 800f166:	bf00      	nop
 800f168:	080202c8 	.word	0x080202c8

0800f16c <rclc_timer_init_default>:
 800f16c:	b370      	cbz	r0, 800f1cc <rclc_timer_init_default+0x60>
 800f16e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f172:	460e      	mov	r6, r1
 800f174:	b08c      	sub	sp, #48	@ 0x30
 800f176:	b329      	cbz	r1, 800f1c4 <rclc_timer_init_default+0x58>
 800f178:	4690      	mov	r8, r2
 800f17a:	461f      	mov	r7, r3
 800f17c:	4605      	mov	r5, r0
 800f17e:	f008 fa19 	bl	80175b4 <rcl_get_zero_initialized_timer>
 800f182:	2301      	movs	r3, #1
 800f184:	6028      	str	r0, [r5, #0]
 800f186:	9308      	str	r3, [sp, #32]
 800f188:	68b4      	ldr	r4, [r6, #8]
 800f18a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f18c:	f10d 0c0c 	add.w	ip, sp, #12
 800f190:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f194:	6823      	ldr	r3, [r4, #0]
 800f196:	f8cc 3000 	str.w	r3, [ip]
 800f19a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f19c:	9302      	str	r3, [sp, #8]
 800f19e:	e9cd 8700 	strd	r8, r7, [sp]
 800f1a2:	4628      	mov	r0, r5
 800f1a4:	4632      	mov	r2, r6
 800f1a6:	f106 010c 	add.w	r1, r6, #12
 800f1aa:	f008 fa09 	bl	80175c0 <rcl_timer_init2>
 800f1ae:	b910      	cbnz	r0, 800f1b6 <rclc_timer_init_default+0x4a>
 800f1b0:	b00c      	add	sp, #48	@ 0x30
 800f1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1b6:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f1b8:	f000 f872 	bl	800f2a0 <rcutils_reset_error>
 800f1bc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800f1be:	b00c      	add	sp, #48	@ 0x30
 800f1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1c4:	200b      	movs	r0, #11
 800f1c6:	b00c      	add	sp, #48	@ 0x30
 800f1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1cc:	200b      	movs	r0, #11
 800f1ce:	4770      	bx	lr

0800f1d0 <__default_zero_allocate>:
 800f1d0:	f00d be40 	b.w	801ce54 <calloc>

0800f1d4 <__default_reallocate>:
 800f1d4:	f00d bfde 	b.w	801d194 <realloc>

0800f1d8 <__default_deallocate>:
 800f1d8:	f00d beba 	b.w	801cf50 <free>

0800f1dc <__default_allocate>:
 800f1dc:	f00d beb0 	b.w	801cf40 <malloc>

0800f1e0 <rcutils_get_zero_initialized_allocator>:
 800f1e0:	b510      	push	{r4, lr}
 800f1e2:	4c05      	ldr	r4, [pc, #20]	@ (800f1f8 <rcutils_get_zero_initialized_allocator+0x18>)
 800f1e4:	4686      	mov	lr, r0
 800f1e6:	4684      	mov	ip, r0
 800f1e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f1ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f1ee:	6823      	ldr	r3, [r4, #0]
 800f1f0:	f8cc 3000 	str.w	r3, [ip]
 800f1f4:	4670      	mov	r0, lr
 800f1f6:	bd10      	pop	{r4, pc}
 800f1f8:	08020318 	.word	0x08020318

0800f1fc <rcutils_get_default_allocator>:
 800f1fc:	b510      	push	{r4, lr}
 800f1fe:	4c05      	ldr	r4, [pc, #20]	@ (800f214 <rcutils_get_default_allocator+0x18>)
 800f200:	4686      	mov	lr, r0
 800f202:	4684      	mov	ip, r0
 800f204:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f206:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f20a:	6823      	ldr	r3, [r4, #0]
 800f20c:	f8cc 3000 	str.w	r3, [ip]
 800f210:	4670      	mov	r0, lr
 800f212:	bd10      	pop	{r4, pc}
 800f214:	200005a8 	.word	0x200005a8

0800f218 <rcutils_set_default_allocator>:
 800f218:	b1a8      	cbz	r0, 800f246 <rcutils_set_default_allocator+0x2e>
 800f21a:	6802      	ldr	r2, [r0, #0]
 800f21c:	b1a2      	cbz	r2, 800f248 <rcutils_set_default_allocator+0x30>
 800f21e:	6841      	ldr	r1, [r0, #4]
 800f220:	b1a1      	cbz	r1, 800f24c <rcutils_set_default_allocator+0x34>
 800f222:	b410      	push	{r4}
 800f224:	68c4      	ldr	r4, [r0, #12]
 800f226:	b164      	cbz	r4, 800f242 <rcutils_set_default_allocator+0x2a>
 800f228:	6880      	ldr	r0, [r0, #8]
 800f22a:	b138      	cbz	r0, 800f23c <rcutils_set_default_allocator+0x24>
 800f22c:	4b08      	ldr	r3, [pc, #32]	@ (800f250 <rcutils_set_default_allocator+0x38>)
 800f22e:	601a      	str	r2, [r3, #0]
 800f230:	2200      	movs	r2, #0
 800f232:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800f236:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800f23a:	2001      	movs	r0, #1
 800f23c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f240:	4770      	bx	lr
 800f242:	4620      	mov	r0, r4
 800f244:	e7fa      	b.n	800f23c <rcutils_set_default_allocator+0x24>
 800f246:	4770      	bx	lr
 800f248:	4610      	mov	r0, r2
 800f24a:	4770      	bx	lr
 800f24c:	4608      	mov	r0, r1
 800f24e:	4770      	bx	lr
 800f250:	200005a8 	.word	0x200005a8

0800f254 <rcutils_allocator_is_valid>:
 800f254:	b158      	cbz	r0, 800f26e <rcutils_allocator_is_valid+0x1a>
 800f256:	6803      	ldr	r3, [r0, #0]
 800f258:	b143      	cbz	r3, 800f26c <rcutils_allocator_is_valid+0x18>
 800f25a:	6843      	ldr	r3, [r0, #4]
 800f25c:	b133      	cbz	r3, 800f26c <rcutils_allocator_is_valid+0x18>
 800f25e:	68c3      	ldr	r3, [r0, #12]
 800f260:	b123      	cbz	r3, 800f26c <rcutils_allocator_is_valid+0x18>
 800f262:	6880      	ldr	r0, [r0, #8]
 800f264:	3800      	subs	r0, #0
 800f266:	bf18      	it	ne
 800f268:	2001      	movne	r0, #1
 800f26a:	4770      	bx	lr
 800f26c:	4618      	mov	r0, r3
 800f26e:	4770      	bx	lr

0800f270 <rcutils_get_error_string>:
 800f270:	4b06      	ldr	r3, [pc, #24]	@ (800f28c <rcutils_get_error_string+0x1c>)
 800f272:	781b      	ldrb	r3, [r3, #0]
 800f274:	b13b      	cbz	r3, 800f286 <rcutils_get_error_string+0x16>
 800f276:	4b06      	ldr	r3, [pc, #24]	@ (800f290 <rcutils_get_error_string+0x20>)
 800f278:	781a      	ldrb	r2, [r3, #0]
 800f27a:	b90a      	cbnz	r2, 800f280 <rcutils_get_error_string+0x10>
 800f27c:	2201      	movs	r2, #1
 800f27e:	701a      	strb	r2, [r3, #0]
 800f280:	4b04      	ldr	r3, [pc, #16]	@ (800f294 <rcutils_get_error_string+0x24>)
 800f282:	7818      	ldrb	r0, [r3, #0]
 800f284:	4770      	bx	lr
 800f286:	4b04      	ldr	r3, [pc, #16]	@ (800f298 <rcutils_get_error_string+0x28>)
 800f288:	7818      	ldrb	r0, [r3, #0]
 800f28a:	4770      	bx	lr
 800f28c:	2000a078 	.word	0x2000a078
 800f290:	2000a07d 	.word	0x2000a07d
 800f294:	2000a07c 	.word	0x2000a07c
 800f298:	0801fe48 	.word	0x0801fe48
 800f29c:	00000000 	.word	0x00000000

0800f2a0 <rcutils_reset_error>:
 800f2a0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800f2c0 <rcutils_reset_error+0x20>
 800f2a4:	4a08      	ldr	r2, [pc, #32]	@ (800f2c8 <rcutils_reset_error+0x28>)
 800f2a6:	4809      	ldr	r0, [pc, #36]	@ (800f2cc <rcutils_reset_error+0x2c>)
 800f2a8:	4909      	ldr	r1, [pc, #36]	@ (800f2d0 <rcutils_reset_error+0x30>)
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	8013      	strh	r3, [r2, #0]
 800f2ae:	ed82 7b02 	vstr	d7, [r2, #8]
 800f2b2:	4a08      	ldr	r2, [pc, #32]	@ (800f2d4 <rcutils_reset_error+0x34>)
 800f2b4:	7003      	strb	r3, [r0, #0]
 800f2b6:	700b      	strb	r3, [r1, #0]
 800f2b8:	7013      	strb	r3, [r2, #0]
 800f2ba:	4770      	bx	lr
 800f2bc:	f3af 8000 	nop.w
	...
 800f2c8:	2000a080 	.word	0x2000a080
 800f2cc:	2000a07d 	.word	0x2000a07d
 800f2d0:	2000a07c 	.word	0x2000a07c
 800f2d4:	2000a078 	.word	0x2000a078

0800f2d8 <rcutils_system_time_now>:
 800f2d8:	b318      	cbz	r0, 800f322 <rcutils_system_time_now+0x4a>
 800f2da:	b570      	push	{r4, r5, r6, lr}
 800f2dc:	b084      	sub	sp, #16
 800f2de:	4604      	mov	r4, r0
 800f2e0:	4669      	mov	r1, sp
 800f2e2:	2001      	movs	r0, #1
 800f2e4:	f7f4 f800 	bl	80032e8 <clock_gettime>
 800f2e8:	2800      	cmp	r0, #0
 800f2ea:	db17      	blt.n	800f31c <rcutils_system_time_now+0x44>
 800f2ec:	e9dd 3100 	ldrd	r3, r1, [sp]
 800f2f0:	2900      	cmp	r1, #0
 800f2f2:	db13      	blt.n	800f31c <rcutils_system_time_now+0x44>
 800f2f4:	9d02      	ldr	r5, [sp, #8]
 800f2f6:	2d00      	cmp	r5, #0
 800f2f8:	db0d      	blt.n	800f316 <rcutils_system_time_now+0x3e>
 800f2fa:	4e0b      	ldr	r6, [pc, #44]	@ (800f328 <rcutils_system_time_now+0x50>)
 800f2fc:	fba3 3206 	umull	r3, r2, r3, r6
 800f300:	195b      	adds	r3, r3, r5
 800f302:	fb06 2201 	mla	r2, r6, r1, r2
 800f306:	f04f 0000 	mov.w	r0, #0
 800f30a:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800f30e:	e9c4 3200 	strd	r3, r2, [r4]
 800f312:	b004      	add	sp, #16
 800f314:	bd70      	pop	{r4, r5, r6, pc}
 800f316:	ea53 0201 	orrs.w	r2, r3, r1
 800f31a:	d1ee      	bne.n	800f2fa <rcutils_system_time_now+0x22>
 800f31c:	2002      	movs	r0, #2
 800f31e:	b004      	add	sp, #16
 800f320:	bd70      	pop	{r4, r5, r6, pc}
 800f322:	200b      	movs	r0, #11
 800f324:	4770      	bx	lr
 800f326:	bf00      	nop
 800f328:	3b9aca00 	.word	0x3b9aca00

0800f32c <rcutils_steady_time_now>:
 800f32c:	b318      	cbz	r0, 800f376 <rcutils_steady_time_now+0x4a>
 800f32e:	b570      	push	{r4, r5, r6, lr}
 800f330:	b084      	sub	sp, #16
 800f332:	4604      	mov	r4, r0
 800f334:	4669      	mov	r1, sp
 800f336:	2000      	movs	r0, #0
 800f338:	f7f3 ffd6 	bl	80032e8 <clock_gettime>
 800f33c:	2800      	cmp	r0, #0
 800f33e:	db17      	blt.n	800f370 <rcutils_steady_time_now+0x44>
 800f340:	e9dd 3100 	ldrd	r3, r1, [sp]
 800f344:	2900      	cmp	r1, #0
 800f346:	db13      	blt.n	800f370 <rcutils_steady_time_now+0x44>
 800f348:	9d02      	ldr	r5, [sp, #8]
 800f34a:	2d00      	cmp	r5, #0
 800f34c:	db0d      	blt.n	800f36a <rcutils_steady_time_now+0x3e>
 800f34e:	4e0b      	ldr	r6, [pc, #44]	@ (800f37c <rcutils_steady_time_now+0x50>)
 800f350:	fba3 3206 	umull	r3, r2, r3, r6
 800f354:	195b      	adds	r3, r3, r5
 800f356:	fb06 2201 	mla	r2, r6, r1, r2
 800f35a:	f04f 0000 	mov.w	r0, #0
 800f35e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800f362:	e9c4 3200 	strd	r3, r2, [r4]
 800f366:	b004      	add	sp, #16
 800f368:	bd70      	pop	{r4, r5, r6, pc}
 800f36a:	ea53 0201 	orrs.w	r2, r3, r1
 800f36e:	d1ee      	bne.n	800f34e <rcutils_steady_time_now+0x22>
 800f370:	2002      	movs	r0, #2
 800f372:	b004      	add	sp, #16
 800f374:	bd70      	pop	{r4, r5, r6, pc}
 800f376:	200b      	movs	r0, #11
 800f378:	4770      	bx	lr
 800f37a:	bf00      	nop
 800f37c:	3b9aca00 	.word	0x3b9aca00

0800f380 <rmw_get_zero_initialized_init_options>:
 800f380:	b530      	push	{r4, r5, lr}
 800f382:	b08b      	sub	sp, #44	@ 0x2c
 800f384:	466d      	mov	r5, sp
 800f386:	4604      	mov	r4, r0
 800f388:	4628      	mov	r0, r5
 800f38a:	f000 f825 	bl	800f3d8 <rmw_get_default_security_options>
 800f38e:	a802      	add	r0, sp, #8
 800f390:	f00a fa42 	bl	8019818 <rmw_get_zero_initialized_discovery_options>
 800f394:	2258      	movs	r2, #88	@ 0x58
 800f396:	2100      	movs	r1, #0
 800f398:	4620      	mov	r0, r4
 800f39a:	f00e fa45 	bl	801d828 <memset>
 800f39e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f3a2:	f104 0310 	add.w	r3, r4, #16
 800f3a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f3aa:	f10d 0c08 	add.w	ip, sp, #8
 800f3ae:	e883 0003 	stmia.w	r3, {r0, r1}
 800f3b2:	60e2      	str	r2, [r4, #12]
 800f3b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f3b8:	f104 0e1c 	add.w	lr, r4, #28
 800f3bc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f3c0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800f3c4:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	b00b      	add	sp, #44	@ 0x2c
 800f3cc:	bd30      	pop	{r4, r5, pc}
 800f3ce:	bf00      	nop

0800f3d0 <rmw_get_default_publisher_options>:
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	6002      	str	r2, [r0, #0]
 800f3d4:	7102      	strb	r2, [r0, #4]
 800f3d6:	4770      	bx	lr

0800f3d8 <rmw_get_default_security_options>:
 800f3d8:	2200      	movs	r2, #0
 800f3da:	7002      	strb	r2, [r0, #0]
 800f3dc:	6042      	str	r2, [r0, #4]
 800f3de:	4770      	bx	lr

0800f3e0 <rmw_uros_set_custom_transport>:
 800f3e0:	b470      	push	{r4, r5, r6}
 800f3e2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800f3e6:	b162      	cbz	r2, 800f402 <rmw_uros_set_custom_transport+0x22>
 800f3e8:	b15b      	cbz	r3, 800f402 <rmw_uros_set_custom_transport+0x22>
 800f3ea:	b155      	cbz	r5, 800f402 <rmw_uros_set_custom_transport+0x22>
 800f3ec:	b14e      	cbz	r6, 800f402 <rmw_uros_set_custom_transport+0x22>
 800f3ee:	4c06      	ldr	r4, [pc, #24]	@ (800f408 <rmw_uros_set_custom_transport+0x28>)
 800f3f0:	7020      	strb	r0, [r4, #0]
 800f3f2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800f3f6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f3fa:	6166      	str	r6, [r4, #20]
 800f3fc:	2000      	movs	r0, #0
 800f3fe:	bc70      	pop	{r4, r5, r6}
 800f400:	4770      	bx	lr
 800f402:	200b      	movs	r0, #11
 800f404:	bc70      	pop	{r4, r5, r6}
 800f406:	4770      	bx	lr
 800f408:	2000a090 	.word	0x2000a090

0800f40c <rmw_init_options_init>:
 800f40c:	b084      	sub	sp, #16
 800f40e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f410:	b083      	sub	sp, #12
 800f412:	ad09      	add	r5, sp, #36	@ 0x24
 800f414:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800f418:	b130      	cbz	r0, 800f428 <rmw_init_options_init+0x1c>
 800f41a:	4604      	mov	r4, r0
 800f41c:	4628      	mov	r0, r5
 800f41e:	f7ff ff19 	bl	800f254 <rcutils_allocator_is_valid>
 800f422:	b108      	cbz	r0, 800f428 <rmw_init_options_init+0x1c>
 800f424:	68a6      	ldr	r6, [r4, #8]
 800f426:	b12e      	cbz	r6, 800f434 <rmw_init_options_init+0x28>
 800f428:	200b      	movs	r0, #11
 800f42a:	b003      	add	sp, #12
 800f42c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f430:	b004      	add	sp, #16
 800f432:	4770      	bx	lr
 800f434:	2200      	movs	r2, #0
 800f436:	2300      	movs	r3, #0
 800f438:	e9c4 2300 	strd	r2, r3, [r4]
 800f43c:	4b22      	ldr	r3, [pc, #136]	@ (800f4c8 <rmw_init_options_init+0xbc>)
 800f43e:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800f4d8 <rmw_init_options_init+0xcc>
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	60a3      	str	r3, [r4, #8]
 800f446:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f448:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 800f44c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f450:	466f      	mov	r7, sp
 800f452:	682b      	ldr	r3, [r5, #0]
 800f454:	f8cc 3000 	str.w	r3, [ip]
 800f458:	4638      	mov	r0, r7
 800f45a:	f8c4 e03c 	str.w	lr, [r4, #60]	@ 0x3c
 800f45e:	60e6      	str	r6, [r4, #12]
 800f460:	f7ff ffba 	bl	800f3d8 <rmw_get_default_security_options>
 800f464:	e897 0003 	ldmia.w	r7, {r0, r1}
 800f468:	f104 0310 	add.w	r3, r4, #16
 800f46c:	e883 0003 	stmia.w	r3, {r0, r1}
 800f470:	2203      	movs	r2, #3
 800f472:	4816      	ldr	r0, [pc, #88]	@ (800f4cc <rmw_init_options_init+0xc0>)
 800f474:	4916      	ldr	r1, [pc, #88]	@ (800f4d0 <rmw_init_options_init+0xc4>)
 800f476:	7626      	strb	r6, [r4, #24]
 800f478:	f000 ff8c 	bl	8010394 <rmw_uxrce_init_init_options_impl_memory>
 800f47c:	4813      	ldr	r0, [pc, #76]	@ (800f4cc <rmw_init_options_init+0xc0>)
 800f47e:	f00a fcbb 	bl	8019df8 <get_memory>
 800f482:	b1f0      	cbz	r0, 800f4c2 <rmw_init_options_init+0xb6>
 800f484:	4a13      	ldr	r2, [pc, #76]	@ (800f4d4 <rmw_init_options_init+0xc8>)
 800f486:	6883      	ldr	r3, [r0, #8]
 800f488:	6851      	ldr	r1, [r2, #4]
 800f48a:	7810      	ldrb	r0, [r2, #0]
 800f48c:	6563      	str	r3, [r4, #84]	@ 0x54
 800f48e:	7418      	strb	r0, [r3, #16]
 800f490:	6159      	str	r1, [r3, #20]
 800f492:	68d1      	ldr	r1, [r2, #12]
 800f494:	61d9      	str	r1, [r3, #28]
 800f496:	6911      	ldr	r1, [r2, #16]
 800f498:	6219      	str	r1, [r3, #32]
 800f49a:	6951      	ldr	r1, [r2, #20]
 800f49c:	6892      	ldr	r2, [r2, #8]
 800f49e:	619a      	str	r2, [r3, #24]
 800f4a0:	6259      	str	r1, [r3, #36]	@ 0x24
 800f4a2:	f005 fca1 	bl	8014de8 <uxr_nanos>
 800f4a6:	f00d fe09 	bl	801d0bc <srand>
 800f4aa:	f00d fe35 	bl	801d118 <rand>
 800f4ae:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800f4b0:	6298      	str	r0, [r3, #40]	@ 0x28
 800f4b2:	2800      	cmp	r0, #0
 800f4b4:	d0f9      	beq.n	800f4aa <rmw_init_options_init+0x9e>
 800f4b6:	2000      	movs	r0, #0
 800f4b8:	b003      	add	sp, #12
 800f4ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f4be:	b004      	add	sp, #16
 800f4c0:	4770      	bx	lr
 800f4c2:	2001      	movs	r0, #1
 800f4c4:	e7b1      	b.n	800f42a <rmw_init_options_init+0x1e>
 800f4c6:	bf00      	nop
 800f4c8:	080215d8 	.word	0x080215d8
 800f4cc:	2000a3bc 	.word	0x2000a3bc
 800f4d0:	2000a338 	.word	0x2000a338
 800f4d4:	2000a090 	.word	0x2000a090
 800f4d8:	0802032c 	.word	0x0802032c

0800f4dc <rmw_init_options_copy>:
 800f4dc:	b570      	push	{r4, r5, r6, lr}
 800f4de:	b158      	cbz	r0, 800f4f8 <rmw_init_options_copy+0x1c>
 800f4e0:	460d      	mov	r5, r1
 800f4e2:	b149      	cbz	r1, 800f4f8 <rmw_init_options_copy+0x1c>
 800f4e4:	4604      	mov	r4, r0
 800f4e6:	6880      	ldr	r0, [r0, #8]
 800f4e8:	b120      	cbz	r0, 800f4f4 <rmw_init_options_copy+0x18>
 800f4ea:	4b14      	ldr	r3, [pc, #80]	@ (800f53c <rmw_init_options_copy+0x60>)
 800f4ec:	6819      	ldr	r1, [r3, #0]
 800f4ee:	f7f0 fe97 	bl	8000220 <strcmp>
 800f4f2:	b9e8      	cbnz	r0, 800f530 <rmw_init_options_copy+0x54>
 800f4f4:	68ae      	ldr	r6, [r5, #8]
 800f4f6:	b116      	cbz	r6, 800f4fe <rmw_init_options_copy+0x22>
 800f4f8:	260b      	movs	r6, #11
 800f4fa:	4630      	mov	r0, r6
 800f4fc:	bd70      	pop	{r4, r5, r6, pc}
 800f4fe:	2258      	movs	r2, #88	@ 0x58
 800f500:	4621      	mov	r1, r4
 800f502:	4628      	mov	r0, r5
 800f504:	f00e fa6b 	bl	801d9de <memcpy>
 800f508:	480d      	ldr	r0, [pc, #52]	@ (800f540 <rmw_init_options_copy+0x64>)
 800f50a:	f00a fc75 	bl	8019df8 <get_memory>
 800f50e:	b190      	cbz	r0, 800f536 <rmw_init_options_copy+0x5a>
 800f510:	6883      	ldr	r3, [r0, #8]
 800f512:	656b      	str	r3, [r5, #84]	@ 0x54
 800f514:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f516:	f102 0c10 	add.w	ip, r2, #16
 800f51a:	f103 0510 	add.w	r5, r3, #16
 800f51e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f522:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f524:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800f528:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800f52c:	4630      	mov	r0, r6
 800f52e:	bd70      	pop	{r4, r5, r6, pc}
 800f530:	260c      	movs	r6, #12
 800f532:	4630      	mov	r0, r6
 800f534:	bd70      	pop	{r4, r5, r6, pc}
 800f536:	2601      	movs	r6, #1
 800f538:	e7df      	b.n	800f4fa <rmw_init_options_copy+0x1e>
 800f53a:	bf00      	nop
 800f53c:	080215d8 	.word	0x080215d8
 800f540:	2000a3bc 	.word	0x2000a3bc

0800f544 <rmw_init_options_fini>:
 800f544:	b368      	cbz	r0, 800f5a2 <rmw_init_options_fini+0x5e>
 800f546:	b510      	push	{r4, lr}
 800f548:	4604      	mov	r4, r0
 800f54a:	b096      	sub	sp, #88	@ 0x58
 800f54c:	3040      	adds	r0, #64	@ 0x40
 800f54e:	f7ff fe81 	bl	800f254 <rcutils_allocator_is_valid>
 800f552:	b1f0      	cbz	r0, 800f592 <rmw_init_options_fini+0x4e>
 800f554:	68a0      	ldr	r0, [r4, #8]
 800f556:	b120      	cbz	r0, 800f562 <rmw_init_options_fini+0x1e>
 800f558:	4b13      	ldr	r3, [pc, #76]	@ (800f5a8 <rmw_init_options_fini+0x64>)
 800f55a:	6819      	ldr	r1, [r3, #0]
 800f55c:	f7f0 fe60 	bl	8000220 <strcmp>
 800f560:	b9e8      	cbnz	r0, 800f59e <rmw_init_options_fini+0x5a>
 800f562:	4b12      	ldr	r3, [pc, #72]	@ (800f5ac <rmw_init_options_fini+0x68>)
 800f564:	6819      	ldr	r1, [r3, #0]
 800f566:	b1b9      	cbz	r1, 800f598 <rmw_init_options_fini+0x54>
 800f568:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f56a:	e001      	b.n	800f570 <rmw_init_options_fini+0x2c>
 800f56c:	6849      	ldr	r1, [r1, #4]
 800f56e:	b199      	cbz	r1, 800f598 <rmw_init_options_fini+0x54>
 800f570:	688b      	ldr	r3, [r1, #8]
 800f572:	429a      	cmp	r2, r3
 800f574:	d1fa      	bne.n	800f56c <rmw_init_options_fini+0x28>
 800f576:	480d      	ldr	r0, [pc, #52]	@ (800f5ac <rmw_init_options_fini+0x68>)
 800f578:	f00a fc4e 	bl	8019e18 <put_memory>
 800f57c:	4668      	mov	r0, sp
 800f57e:	f7ff feff 	bl	800f380 <rmw_get_zero_initialized_init_options>
 800f582:	2258      	movs	r2, #88	@ 0x58
 800f584:	4669      	mov	r1, sp
 800f586:	4620      	mov	r0, r4
 800f588:	f00e fa29 	bl	801d9de <memcpy>
 800f58c:	2000      	movs	r0, #0
 800f58e:	b016      	add	sp, #88	@ 0x58
 800f590:	bd10      	pop	{r4, pc}
 800f592:	200b      	movs	r0, #11
 800f594:	b016      	add	sp, #88	@ 0x58
 800f596:	bd10      	pop	{r4, pc}
 800f598:	2001      	movs	r0, #1
 800f59a:	b016      	add	sp, #88	@ 0x58
 800f59c:	bd10      	pop	{r4, pc}
 800f59e:	200c      	movs	r0, #12
 800f5a0:	e7f5      	b.n	800f58e <rmw_init_options_fini+0x4a>
 800f5a2:	200b      	movs	r0, #11
 800f5a4:	4770      	bx	lr
 800f5a6:	bf00      	nop
 800f5a8:	080215d8 	.word	0x080215d8
 800f5ac:	2000a3bc 	.word	0x2000a3bc

0800f5b0 <rmw_init>:
 800f5b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f5b4:	b083      	sub	sp, #12
 800f5b6:	2800      	cmp	r0, #0
 800f5b8:	f000 80d4 	beq.w	800f764 <rmw_init+0x1b4>
 800f5bc:	460e      	mov	r6, r1
 800f5be:	2900      	cmp	r1, #0
 800f5c0:	f000 80d0 	beq.w	800f764 <rmw_init+0x1b4>
 800f5c4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800f5c6:	4605      	mov	r5, r0
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	f000 80cb 	beq.w	800f764 <rmw_init+0x1b4>
 800f5ce:	4b77      	ldr	r3, [pc, #476]	@ (800f7ac <rmw_init+0x1fc>)
 800f5d0:	6880      	ldr	r0, [r0, #8]
 800f5d2:	681f      	ldr	r7, [r3, #0]
 800f5d4:	b128      	cbz	r0, 800f5e2 <rmw_init+0x32>
 800f5d6:	4639      	mov	r1, r7
 800f5d8:	f7f0 fe22 	bl	8000220 <strcmp>
 800f5dc:	2800      	cmp	r0, #0
 800f5de:	f040 80d3 	bne.w	800f788 <rmw_init+0x1d8>
 800f5e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f5e6:	4c72      	ldr	r4, [pc, #456]	@ (800f7b0 <rmw_init+0x200>)
 800f5e8:	4972      	ldr	r1, [pc, #456]	@ (800f7b4 <rmw_init+0x204>)
 800f5ea:	4873      	ldr	r0, [pc, #460]	@ (800f7b8 <rmw_init+0x208>)
 800f5ec:	60b7      	str	r7, [r6, #8]
 800f5ee:	e9c6 2300 	strd	r2, r3, [r6]
 800f5f2:	68eb      	ldr	r3, [r5, #12]
 800f5f4:	66b3      	str	r3, [r6, #104]	@ 0x68
 800f5f6:	2201      	movs	r2, #1
 800f5f8:	f000 fe6c 	bl	80102d4 <rmw_uxrce_init_session_memory>
 800f5fc:	4620      	mov	r0, r4
 800f5fe:	496f      	ldr	r1, [pc, #444]	@ (800f7bc <rmw_init+0x20c>)
 800f600:	2204      	movs	r2, #4
 800f602:	f000 fea7 	bl	8010354 <rmw_uxrce_init_static_input_buffer_memory>
 800f606:	f04f 0800 	mov.w	r8, #0
 800f60a:	486b      	ldr	r0, [pc, #428]	@ (800f7b8 <rmw_init+0x208>)
 800f60c:	f884 800d 	strb.w	r8, [r4, #13]
 800f610:	f00a fbf2 	bl	8019df8 <get_memory>
 800f614:	2800      	cmp	r0, #0
 800f616:	f000 80b2 	beq.w	800f77e <rmw_init+0x1ce>
 800f61a:	6884      	ldr	r4, [r0, #8]
 800f61c:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 800f61e:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800f620:	f890 c010 	ldrb.w	ip, [r0, #16]
 800f624:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800f628:	9101      	str	r1, [sp, #4]
 800f62a:	6a00      	ldr	r0, [r0, #32]
 800f62c:	9000      	str	r0, [sp, #0]
 800f62e:	f104 0910 	add.w	r9, r4, #16
 800f632:	4661      	mov	r1, ip
 800f634:	4648      	mov	r0, r9
 800f636:	f003 fb93 	bl	8012d60 <uxr_set_custom_transport_callbacks>
 800f63a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f63e:	e9c4 33e3 	strd	r3, r3, [r4, #908]	@ 0x38c
 800f642:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800f646:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800f64a:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800f64e:	495c      	ldr	r1, [pc, #368]	@ (800f7c0 <rmw_init+0x210>)
 800f650:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800f654:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800f658:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800f65c:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800f660:	4858      	ldr	r0, [pc, #352]	@ (800f7c4 <rmw_init+0x214>)
 800f662:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800f666:	2201      	movs	r2, #1
 800f668:	66f4      	str	r4, [r6, #108]	@ 0x6c
 800f66a:	f000 fe13 	bl	8010294 <rmw_uxrce_init_node_memory>
 800f66e:	4956      	ldr	r1, [pc, #344]	@ (800f7c8 <rmw_init+0x218>)
 800f670:	4856      	ldr	r0, [pc, #344]	@ (800f7cc <rmw_init+0x21c>)
 800f672:	2205      	movs	r2, #5
 800f674:	f000 fdee 	bl	8010254 <rmw_uxrce_init_subscription_memory>
 800f678:	4955      	ldr	r1, [pc, #340]	@ (800f7d0 <rmw_init+0x220>)
 800f67a:	4856      	ldr	r0, [pc, #344]	@ (800f7d4 <rmw_init+0x224>)
 800f67c:	220a      	movs	r2, #10
 800f67e:	f000 fdc9 	bl	8010214 <rmw_uxrce_init_publisher_memory>
 800f682:	4955      	ldr	r1, [pc, #340]	@ (800f7d8 <rmw_init+0x228>)
 800f684:	4855      	ldr	r0, [pc, #340]	@ (800f7dc <rmw_init+0x22c>)
 800f686:	2202      	movs	r2, #2
 800f688:	f000 fd84 	bl	8010194 <rmw_uxrce_init_service_memory>
 800f68c:	4954      	ldr	r1, [pc, #336]	@ (800f7e0 <rmw_init+0x230>)
 800f68e:	4855      	ldr	r0, [pc, #340]	@ (800f7e4 <rmw_init+0x234>)
 800f690:	2202      	movs	r2, #2
 800f692:	f000 fd9f 	bl	80101d4 <rmw_uxrce_init_client_memory>
 800f696:	4954      	ldr	r1, [pc, #336]	@ (800f7e8 <rmw_init+0x238>)
 800f698:	4854      	ldr	r0, [pc, #336]	@ (800f7ec <rmw_init+0x23c>)
 800f69a:	220f      	movs	r2, #15
 800f69c:	f000 fe3a 	bl	8010314 <rmw_uxrce_init_topic_memory>
 800f6a0:	4953      	ldr	r1, [pc, #332]	@ (800f7f0 <rmw_init+0x240>)
 800f6a2:	4854      	ldr	r0, [pc, #336]	@ (800f7f4 <rmw_init+0x244>)
 800f6a4:	2203      	movs	r2, #3
 800f6a6:	f000 fe75 	bl	8010394 <rmw_uxrce_init_init_options_impl_memory>
 800f6aa:	4953      	ldr	r1, [pc, #332]	@ (800f7f8 <rmw_init+0x248>)
 800f6ac:	4853      	ldr	r0, [pc, #332]	@ (800f7fc <rmw_init+0x24c>)
 800f6ae:	2204      	movs	r2, #4
 800f6b0:	f000 fe90 	bl	80103d4 <rmw_uxrce_init_wait_set_memory>
 800f6b4:	4952      	ldr	r1, [pc, #328]	@ (800f800 <rmw_init+0x250>)
 800f6b6:	4853      	ldr	r0, [pc, #332]	@ (800f804 <rmw_init+0x254>)
 800f6b8:	2204      	movs	r2, #4
 800f6ba:	f000 feab 	bl	8010414 <rmw_uxrce_init_guard_condition_memory>
 800f6be:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800f6c0:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800f6c2:	4642      	mov	r2, r8
 800f6c4:	f000 fd20 	bl	8010108 <rmw_uxrce_transport_init>
 800f6c8:	4607      	mov	r7, r0
 800f6ca:	2800      	cmp	r0, #0
 800f6cc:	d161      	bne.n	800f792 <rmw_init+0x1e2>
 800f6ce:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800f6d0:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800f6d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f6d6:	4628      	mov	r0, r5
 800f6d8:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800f6dc:	f003 fd78 	bl	80131d0 <uxr_init_session>
 800f6e0:	4628      	mov	r0, r5
 800f6e2:	4949      	ldr	r1, [pc, #292]	@ (800f808 <rmw_init+0x258>)
 800f6e4:	4622      	mov	r2, r4
 800f6e6:	f003 fd97 	bl	8013218 <uxr_set_topic_callback>
 800f6ea:	4628      	mov	r0, r5
 800f6ec:	4947      	ldr	r1, [pc, #284]	@ (800f80c <rmw_init+0x25c>)
 800f6ee:	463a      	mov	r2, r7
 800f6f0:	f003 fd8e 	bl	8013210 <uxr_set_status_callback>
 800f6f4:	4628      	mov	r0, r5
 800f6f6:	4946      	ldr	r1, [pc, #280]	@ (800f810 <rmw_init+0x260>)
 800f6f8:	463a      	mov	r2, r7
 800f6fa:	f003 fd91 	bl	8013220 <uxr_set_request_callback>
 800f6fe:	4628      	mov	r0, r5
 800f700:	4944      	ldr	r1, [pc, #272]	@ (800f814 <rmw_init+0x264>)
 800f702:	463a      	mov	r2, r7
 800f704:	f003 fd90 	bl	8013228 <uxr_set_reply_callback>
 800f708:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800f70c:	2304      	movs	r3, #4
 800f70e:	0092      	lsls	r2, r2, #2
 800f710:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800f714:	4628      	mov	r0, r5
 800f716:	f003 fdb5 	bl	8013284 <uxr_create_input_reliable_stream>
 800f71a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800f71e:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800f722:	2304      	movs	r3, #4
 800f724:	0092      	lsls	r2, r2, #2
 800f726:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800f72a:	4628      	mov	r0, r5
 800f72c:	f003 fd92 	bl	8013254 <uxr_create_output_reliable_stream>
 800f730:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800f734:	4628      	mov	r0, r5
 800f736:	f003 fd9f 	bl	8013278 <uxr_create_input_best_effort_stream>
 800f73a:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800f73e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800f742:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800f746:	3114      	adds	r1, #20
 800f748:	4628      	mov	r0, r5
 800f74a:	f003 fd71 	bl	8013230 <uxr_create_output_best_effort_stream>
 800f74e:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800f752:	4628      	mov	r0, r5
 800f754:	f004 fb18 	bl	8013d88 <uxr_create_session>
 800f758:	4605      	mov	r5, r0
 800f75a:	b140      	cbz	r0, 800f76e <rmw_init+0x1be>
 800f75c:	4638      	mov	r0, r7
 800f75e:	b003      	add	sp, #12
 800f760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f764:	270b      	movs	r7, #11
 800f766:	4638      	mov	r0, r7
 800f768:	b003      	add	sp, #12
 800f76a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f76e:	4648      	mov	r0, r9
 800f770:	f003 fb38 	bl	8012de4 <uxr_close_custom_transport>
 800f774:	4810      	ldr	r0, [pc, #64]	@ (800f7b8 <rmw_init+0x208>)
 800f776:	4621      	mov	r1, r4
 800f778:	f00a fb4e 	bl	8019e18 <put_memory>
 800f77c:	66f5      	str	r5, [r6, #108]	@ 0x6c
 800f77e:	2701      	movs	r7, #1
 800f780:	4638      	mov	r0, r7
 800f782:	b003      	add	sp, #12
 800f784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f788:	270c      	movs	r7, #12
 800f78a:	4638      	mov	r0, r7
 800f78c:	b003      	add	sp, #12
 800f78e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f792:	4648      	mov	r0, r9
 800f794:	f003 fb26 	bl	8012de4 <uxr_close_custom_transport>
 800f798:	4807      	ldr	r0, [pc, #28]	@ (800f7b8 <rmw_init+0x208>)
 800f79a:	4621      	mov	r1, r4
 800f79c:	f00a fb3c 	bl	8019e18 <put_memory>
 800f7a0:	4638      	mov	r0, r7
 800f7a2:	f8c6 806c 	str.w	r8, [r6, #108]	@ 0x6c
 800f7a6:	b003      	add	sp, #12
 800f7a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7ac:	080215d8 	.word	0x080215d8
 800f7b0:	2000c4d0 	.word	0x2000c4d0
 800f7b4:	2000d758 	.word	0x2000d758
 800f7b8:	2000ed00 	.word	0x2000ed00
 800f7bc:	2000a3d0 	.word	0x2000a3d0
 800f7c0:	2000d6a0 	.word	0x2000d6a0
 800f7c4:	2000d744 	.word	0x2000d744
 800f7c8:	2000c9d8 	.word	0x2000c9d8
 800f7cc:	2000ce10 	.word	0x2000ce10
 800f7d0:	2000ce20 	.word	0x2000ce20
 800f7d4:	2000d690 	.word	0x2000d690
 800f7d8:	2000c838 	.word	0x2000c838
 800f7dc:	2000c9c8 	.word	0x2000c9c8
 800f7e0:	2000c698 	.word	0x2000c698
 800f7e4:	2000c828 	.word	0x2000c828
 800f7e8:	2000c4e0 	.word	0x2000c4e0
 800f7ec:	2000c684 	.word	0x2000c684
 800f7f0:	2000a338 	.word	0x2000a338
 800f7f4:	2000a3bc 	.word	0x2000a3bc
 800f7f8:	2000a2b8 	.word	0x2000a2b8
 800f7fc:	2000a328 	.word	0x2000a328
 800f800:	2000a228 	.word	0x2000a228
 800f804:	2000a2a8 	.word	0x2000a2a8
 800f808:	08019c31 	.word	0x08019c31
 800f80c:	08019c29 	.word	0x08019c29
 800f810:	08019cc9 	.word	0x08019cc9
 800f814:	08019d65 	.word	0x08019d65

0800f818 <rmw_context_fini>:
 800f818:	4b17      	ldr	r3, [pc, #92]	@ (800f878 <rmw_context_fini+0x60>)
 800f81a:	b570      	push	{r4, r5, r6, lr}
 800f81c:	681c      	ldr	r4, [r3, #0]
 800f81e:	4605      	mov	r5, r0
 800f820:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 800f822:	b33c      	cbz	r4, 800f874 <rmw_context_fini+0x5c>
 800f824:	2600      	movs	r6, #0
 800f826:	e9d4 4301 	ldrd	r4, r3, [r4, #4]
 800f82a:	691a      	ldr	r2, [r3, #16]
 800f82c:	4282      	cmp	r2, r0
 800f82e:	d018      	beq.n	800f862 <rmw_context_fini+0x4a>
 800f830:	2c00      	cmp	r4, #0
 800f832:	d1f8      	bne.n	800f826 <rmw_context_fini+0xe>
 800f834:	b188      	cbz	r0, 800f85a <rmw_context_fini+0x42>
 800f836:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f83a:	789b      	ldrb	r3, [r3, #2]
 800f83c:	2b01      	cmp	r3, #1
 800f83e:	bf14      	ite	ne
 800f840:	210a      	movne	r1, #10
 800f842:	2100      	moveq	r1, #0
 800f844:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f848:	f004 fa76 	bl	8013d38 <uxr_delete_session_retries>
 800f84c:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 800f84e:	f000 fe01 	bl	8010454 <rmw_uxrce_fini_session_memory>
 800f852:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 800f854:	3010      	adds	r0, #16
 800f856:	f003 fac5 	bl	8012de4 <uxr_close_custom_transport>
 800f85a:	2300      	movs	r3, #0
 800f85c:	66eb      	str	r3, [r5, #108]	@ 0x6c
 800f85e:	4630      	mov	r0, r6
 800f860:	bd70      	pop	{r4, r5, r6, pc}
 800f862:	f103 0018 	add.w	r0, r3, #24
 800f866:	f000 f89b 	bl	800f9a0 <rmw_destroy_node>
 800f86a:	4606      	mov	r6, r0
 800f86c:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 800f86e:	2c00      	cmp	r4, #0
 800f870:	d1d9      	bne.n	800f826 <rmw_context_fini+0xe>
 800f872:	e7df      	b.n	800f834 <rmw_context_fini+0x1c>
 800f874:	4626      	mov	r6, r4
 800f876:	e7dd      	b.n	800f834 <rmw_context_fini+0x1c>
 800f878:	2000d744 	.word	0x2000d744

0800f87c <create_node>:
 800f87c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f880:	b083      	sub	sp, #12
 800f882:	2b00      	cmp	r3, #0
 800f884:	d063      	beq.n	800f94e <create_node+0xd2>
 800f886:	4606      	mov	r6, r0
 800f888:	4836      	ldr	r0, [pc, #216]	@ (800f964 <create_node+0xe8>)
 800f88a:	460f      	mov	r7, r1
 800f88c:	4690      	mov	r8, r2
 800f88e:	461d      	mov	r5, r3
 800f890:	f00a fab2 	bl	8019df8 <get_memory>
 800f894:	2800      	cmp	r0, #0
 800f896:	d05a      	beq.n	800f94e <create_node+0xd2>
 800f898:	6884      	ldr	r4, [r0, #8]
 800f89a:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 800f89c:	6123      	str	r3, [r4, #16]
 800f89e:	f00a fb31 	bl	8019f04 <rmw_get_implementation_identifier>
 800f8a2:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800f8a6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800f8aa:	f8c4 9020 	str.w	r9, [r4, #32]
 800f8ae:	4630      	mov	r0, r6
 800f8b0:	f7f0 fd16 	bl	80002e0 <strlen>
 800f8b4:	1c42      	adds	r2, r0, #1
 800f8b6:	2a3c      	cmp	r2, #60	@ 0x3c
 800f8b8:	f104 0518 	add.w	r5, r4, #24
 800f8bc:	d844      	bhi.n	800f948 <create_node+0xcc>
 800f8be:	4648      	mov	r0, r9
 800f8c0:	4631      	mov	r1, r6
 800f8c2:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800f8c6:	f00e f88a 	bl	801d9de <memcpy>
 800f8ca:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800f8ce:	4638      	mov	r0, r7
 800f8d0:	f7f0 fd06 	bl	80002e0 <strlen>
 800f8d4:	1c42      	adds	r2, r0, #1
 800f8d6:	2a3c      	cmp	r2, #60	@ 0x3c
 800f8d8:	d836      	bhi.n	800f948 <create_node+0xcc>
 800f8da:	4639      	mov	r1, r7
 800f8dc:	4648      	mov	r0, r9
 800f8de:	f00e f87e 	bl	801d9de <memcpy>
 800f8e2:	6923      	ldr	r3, [r4, #16]
 800f8e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f8e8:	2101      	movs	r1, #1
 800f8ea:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800f8ee:	1842      	adds	r2, r0, r1
 800f8f0:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800f8f4:	f003 fa7a 	bl	8012dec <uxr_object_id>
 800f8f8:	6160      	str	r0, [r4, #20]
 800f8fa:	783b      	ldrb	r3, [r7, #0]
 800f8fc:	2b2f      	cmp	r3, #47	@ 0x2f
 800f8fe:	d128      	bne.n	800f952 <create_node+0xd6>
 800f900:	787b      	ldrb	r3, [r7, #1]
 800f902:	bb33      	cbnz	r3, 800f952 <create_node+0xd6>
 800f904:	4a18      	ldr	r2, [pc, #96]	@ (800f968 <create_node+0xec>)
 800f906:	4819      	ldr	r0, [pc, #100]	@ (800f96c <create_node+0xf0>)
 800f908:	4633      	mov	r3, r6
 800f90a:	213c      	movs	r1, #60	@ 0x3c
 800f90c:	f00d fe1e 	bl	801d54c <sniprintf>
 800f910:	6920      	ldr	r0, [r4, #16]
 800f912:	4916      	ldr	r1, [pc, #88]	@ (800f96c <create_node+0xf0>)
 800f914:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800f918:	9100      	str	r1, [sp, #0]
 800f91a:	2106      	movs	r1, #6
 800f91c:	9101      	str	r1, [sp, #4]
 800f91e:	6811      	ldr	r1, [r2, #0]
 800f920:	6962      	ldr	r2, [r4, #20]
 800f922:	fa1f f388 	uxth.w	r3, r8
 800f926:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f92a:	f003 f86b 	bl	8012a04 <uxr_buffer_create_participant_bin>
 800f92e:	4602      	mov	r2, r0
 800f930:	6920      	ldr	r0, [r4, #16]
 800f932:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f936:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f93a:	f000 ff0b 	bl	8010754 <run_xrce_session>
 800f93e:	b118      	cbz	r0, 800f948 <create_node+0xcc>
 800f940:	4628      	mov	r0, r5
 800f942:	b003      	add	sp, #12
 800f944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f948:	4628      	mov	r0, r5
 800f94a:	f000 fd89 	bl	8010460 <rmw_uxrce_fini_node_memory>
 800f94e:	2500      	movs	r5, #0
 800f950:	e7f6      	b.n	800f940 <create_node+0xc4>
 800f952:	4a07      	ldr	r2, [pc, #28]	@ (800f970 <create_node+0xf4>)
 800f954:	9600      	str	r6, [sp, #0]
 800f956:	463b      	mov	r3, r7
 800f958:	213c      	movs	r1, #60	@ 0x3c
 800f95a:	4804      	ldr	r0, [pc, #16]	@ (800f96c <create_node+0xf0>)
 800f95c:	f00d fdf6 	bl	801d54c <sniprintf>
 800f960:	e7d6      	b.n	800f910 <create_node+0x94>
 800f962:	bf00      	nop
 800f964:	2000d744 	.word	0x2000d744
 800f968:	08020348 	.word	0x08020348
 800f96c:	2000a0ac 	.word	0x2000a0ac
 800f970:	08020330 	.word	0x08020330

0800f974 <rmw_create_node>:
 800f974:	b191      	cbz	r1, 800f99c <rmw_create_node+0x28>
 800f976:	b410      	push	{r4}
 800f978:	4614      	mov	r4, r2
 800f97a:	780a      	ldrb	r2, [r1, #0]
 800f97c:	4603      	mov	r3, r0
 800f97e:	4608      	mov	r0, r1
 800f980:	b142      	cbz	r2, 800f994 <rmw_create_node+0x20>
 800f982:	b13c      	cbz	r4, 800f994 <rmw_create_node+0x20>
 800f984:	7822      	ldrb	r2, [r4, #0]
 800f986:	b12a      	cbz	r2, 800f994 <rmw_create_node+0x20>
 800f988:	4621      	mov	r1, r4
 800f98a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800f98c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f990:	f7ff bf74 	b.w	800f87c <create_node>
 800f994:	2000      	movs	r0, #0
 800f996:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f99a:	4770      	bx	lr
 800f99c:	2000      	movs	r0, #0
 800f99e:	4770      	bx	lr

0800f9a0 <rmw_destroy_node>:
 800f9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9a2:	b328      	cbz	r0, 800f9f0 <rmw_destroy_node+0x50>
 800f9a4:	4607      	mov	r7, r0
 800f9a6:	6800      	ldr	r0, [r0, #0]
 800f9a8:	b120      	cbz	r0, 800f9b4 <rmw_destroy_node+0x14>
 800f9aa:	4b36      	ldr	r3, [pc, #216]	@ (800fa84 <rmw_destroy_node+0xe4>)
 800f9ac:	6819      	ldr	r1, [r3, #0]
 800f9ae:	f7f0 fc37 	bl	8000220 <strcmp>
 800f9b2:	b9e8      	cbnz	r0, 800f9f0 <rmw_destroy_node+0x50>
 800f9b4:	687d      	ldr	r5, [r7, #4]
 800f9b6:	b1dd      	cbz	r5, 800f9f0 <rmw_destroy_node+0x50>
 800f9b8:	4b33      	ldr	r3, [pc, #204]	@ (800fa88 <rmw_destroy_node+0xe8>)
 800f9ba:	681c      	ldr	r4, [r3, #0]
 800f9bc:	2c00      	cmp	r4, #0
 800f9be:	d05f      	beq.n	800fa80 <rmw_destroy_node+0xe0>
 800f9c0:	2600      	movs	r6, #0
 800f9c2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f9c6:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800f9ca:	429d      	cmp	r5, r3
 800f9cc:	d013      	beq.n	800f9f6 <rmw_destroy_node+0x56>
 800f9ce:	2c00      	cmp	r4, #0
 800f9d0:	d1f7      	bne.n	800f9c2 <rmw_destroy_node+0x22>
 800f9d2:	4b2e      	ldr	r3, [pc, #184]	@ (800fa8c <rmw_destroy_node+0xec>)
 800f9d4:	681c      	ldr	r4, [r3, #0]
 800f9d6:	b1c4      	cbz	r4, 800fa0a <rmw_destroy_node+0x6a>
 800f9d8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f9dc:	6a0b      	ldr	r3, [r1, #32]
 800f9de:	429d      	cmp	r5, r3
 800f9e0:	d1f9      	bne.n	800f9d6 <rmw_destroy_node+0x36>
 800f9e2:	317c      	adds	r1, #124	@ 0x7c
 800f9e4:	4638      	mov	r0, r7
 800f9e6:	f000 fb2f 	bl	8010048 <rmw_destroy_subscription>
 800f9ea:	2801      	cmp	r0, #1
 800f9ec:	4606      	mov	r6, r0
 800f9ee:	d1f2      	bne.n	800f9d6 <rmw_destroy_node+0x36>
 800f9f0:	2601      	movs	r6, #1
 800f9f2:	4630      	mov	r0, r6
 800f9f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9f6:	3184      	adds	r1, #132	@ 0x84
 800f9f8:	4638      	mov	r0, r7
 800f9fa:	f000 f9a1 	bl	800fd40 <rmw_destroy_publisher>
 800f9fe:	2801      	cmp	r0, #1
 800fa00:	4606      	mov	r6, r0
 800fa02:	d0f5      	beq.n	800f9f0 <rmw_destroy_node+0x50>
 800fa04:	2c00      	cmp	r4, #0
 800fa06:	d1dc      	bne.n	800f9c2 <rmw_destroy_node+0x22>
 800fa08:	e7e3      	b.n	800f9d2 <rmw_destroy_node+0x32>
 800fa0a:	4b21      	ldr	r3, [pc, #132]	@ (800fa90 <rmw_destroy_node+0xf0>)
 800fa0c:	681c      	ldr	r4, [r3, #0]
 800fa0e:	b16c      	cbz	r4, 800fa2c <rmw_destroy_node+0x8c>
 800fa10:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800fa14:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800fa16:	429d      	cmp	r5, r3
 800fa18:	d1f9      	bne.n	800fa0e <rmw_destroy_node+0x6e>
 800fa1a:	317c      	adds	r1, #124	@ 0x7c
 800fa1c:	4638      	mov	r0, r7
 800fa1e:	f000 fab3 	bl	800ff88 <rmw_destroy_service>
 800fa22:	2801      	cmp	r0, #1
 800fa24:	4606      	mov	r6, r0
 800fa26:	d0e3      	beq.n	800f9f0 <rmw_destroy_node+0x50>
 800fa28:	2c00      	cmp	r4, #0
 800fa2a:	d1f1      	bne.n	800fa10 <rmw_destroy_node+0x70>
 800fa2c:	4b19      	ldr	r3, [pc, #100]	@ (800fa94 <rmw_destroy_node+0xf4>)
 800fa2e:	681c      	ldr	r4, [r3, #0]
 800fa30:	b16c      	cbz	r4, 800fa4e <rmw_destroy_node+0xae>
 800fa32:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800fa36:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800fa38:	429d      	cmp	r5, r3
 800fa3a:	d1f9      	bne.n	800fa30 <rmw_destroy_node+0x90>
 800fa3c:	317c      	adds	r1, #124	@ 0x7c
 800fa3e:	4638      	mov	r0, r7
 800fa40:	f00a f9fe 	bl	8019e40 <rmw_destroy_client>
 800fa44:	2801      	cmp	r0, #1
 800fa46:	4606      	mov	r6, r0
 800fa48:	d0d2      	beq.n	800f9f0 <rmw_destroy_node+0x50>
 800fa4a:	2c00      	cmp	r4, #0
 800fa4c:	d1f1      	bne.n	800fa32 <rmw_destroy_node+0x92>
 800fa4e:	6928      	ldr	r0, [r5, #16]
 800fa50:	696a      	ldr	r2, [r5, #20]
 800fa52:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fa56:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fa5a:	6819      	ldr	r1, [r3, #0]
 800fa5c:	f002 ff88 	bl	8012970 <uxr_buffer_delete_entity>
 800fa60:	4602      	mov	r2, r0
 800fa62:	6928      	ldr	r0, [r5, #16]
 800fa64:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fa68:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fa6c:	f000 fe72 	bl	8010754 <run_xrce_session>
 800fa70:	2800      	cmp	r0, #0
 800fa72:	bf08      	it	eq
 800fa74:	2602      	moveq	r6, #2
 800fa76:	4638      	mov	r0, r7
 800fa78:	f000 fcf2 	bl	8010460 <rmw_uxrce_fini_node_memory>
 800fa7c:	4630      	mov	r0, r6
 800fa7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa80:	4626      	mov	r6, r4
 800fa82:	e7a6      	b.n	800f9d2 <rmw_destroy_node+0x32>
 800fa84:	080215d8 	.word	0x080215d8
 800fa88:	2000d690 	.word	0x2000d690
 800fa8c:	2000ce10 	.word	0x2000ce10
 800fa90:	2000c9c8 	.word	0x2000c9c8
 800fa94:	2000c828 	.word	0x2000c828

0800fa98 <rmw_node_get_graph_guard_condition>:
 800fa98:	6843      	ldr	r3, [r0, #4]
 800fa9a:	6918      	ldr	r0, [r3, #16]
 800fa9c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800faa0:	4770      	bx	lr
 800faa2:	bf00      	nop

0800faa4 <flush_session>:
 800faa4:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800faa6:	f003 bfad 	b.w	8013a04 <uxr_run_session_until_confirm_delivery>
 800faaa:	bf00      	nop

0800faac <rmw_publish>:
 800faac:	2800      	cmp	r0, #0
 800faae:	d053      	beq.n	800fb58 <rmw_publish+0xac>
 800fab0:	b570      	push	{r4, r5, r6, lr}
 800fab2:	460d      	mov	r5, r1
 800fab4:	b08e      	sub	sp, #56	@ 0x38
 800fab6:	2900      	cmp	r1, #0
 800fab8:	d04b      	beq.n	800fb52 <rmw_publish+0xa6>
 800faba:	4604      	mov	r4, r0
 800fabc:	6800      	ldr	r0, [r0, #0]
 800fabe:	f000 ff69 	bl	8010994 <is_uxrce_rmw_identifier_valid>
 800fac2:	2800      	cmp	r0, #0
 800fac4:	d045      	beq.n	800fb52 <rmw_publish+0xa6>
 800fac6:	6866      	ldr	r6, [r4, #4]
 800fac8:	2e00      	cmp	r6, #0
 800faca:	d042      	beq.n	800fb52 <rmw_publish+0xa6>
 800facc:	69b4      	ldr	r4, [r6, #24]
 800face:	4628      	mov	r0, r5
 800fad0:	6923      	ldr	r3, [r4, #16]
 800fad2:	4798      	blx	r3
 800fad4:	69f3      	ldr	r3, [r6, #28]
 800fad6:	9005      	str	r0, [sp, #20]
 800fad8:	b113      	cbz	r3, 800fae0 <rmw_publish+0x34>
 800fada:	a805      	add	r0, sp, #20
 800fadc:	4798      	blx	r3
 800fade:	9805      	ldr	r0, [sp, #20]
 800fae0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800fae4:	691b      	ldr	r3, [r3, #16]
 800fae6:	9000      	str	r0, [sp, #0]
 800fae8:	6972      	ldr	r2, [r6, #20]
 800faea:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800faec:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800faf0:	ab06      	add	r3, sp, #24
 800faf2:	f005 fa1b 	bl	8014f2c <uxr_prepare_output_stream>
 800faf6:	b1d8      	cbz	r0, 800fb30 <rmw_publish+0x84>
 800faf8:	68a3      	ldr	r3, [r4, #8]
 800fafa:	a906      	add	r1, sp, #24
 800fafc:	4628      	mov	r0, r5
 800fafe:	4798      	blx	r3
 800fb00:	6a33      	ldr	r3, [r6, #32]
 800fb02:	4604      	mov	r4, r0
 800fb04:	b10b      	cbz	r3, 800fb0a <rmw_publish+0x5e>
 800fb06:	a806      	add	r0, sp, #24
 800fb08:	4798      	blx	r3
 800fb0a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800fb0e:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
 800fb12:	2b01      	cmp	r3, #1
 800fb14:	6910      	ldr	r0, [r2, #16]
 800fb16:	d021      	beq.n	800fb5c <rmw_publish+0xb0>
 800fb18:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800fb1a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fb1e:	f003 ff71 	bl	8013a04 <uxr_run_session_until_confirm_delivery>
 800fb22:	4004      	ands	r4, r0
 800fb24:	b2e4      	uxtb	r4, r4
 800fb26:	f084 0001 	eor.w	r0, r4, #1
 800fb2a:	b2c0      	uxtb	r0, r0
 800fb2c:	b00e      	add	sp, #56	@ 0x38
 800fb2e:	bd70      	pop	{r4, r5, r6, pc}
 800fb30:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800fb34:	6918      	ldr	r0, [r3, #16]
 800fb36:	4b0c      	ldr	r3, [pc, #48]	@ (800fb68 <rmw_publish+0xbc>)
 800fb38:	9301      	str	r3, [sp, #4]
 800fb3a:	9b05      	ldr	r3, [sp, #20]
 800fb3c:	9300      	str	r3, [sp, #0]
 800fb3e:	9602      	str	r6, [sp, #8]
 800fb40:	6972      	ldr	r2, [r6, #20]
 800fb42:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800fb44:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fb48:	ab06      	add	r3, sp, #24
 800fb4a:	f005 fa1f 	bl	8014f8c <uxr_prepare_output_stream_fragmented>
 800fb4e:	2800      	cmp	r0, #0
 800fb50:	d1d2      	bne.n	800faf8 <rmw_publish+0x4c>
 800fb52:	2001      	movs	r0, #1
 800fb54:	b00e      	add	sp, #56	@ 0x38
 800fb56:	bd70      	pop	{r4, r5, r6, pc}
 800fb58:	2001      	movs	r0, #1
 800fb5a:	4770      	bx	lr
 800fb5c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fb60:	f003 fbb8 	bl	80132d4 <uxr_flash_output_streams>
 800fb64:	e7df      	b.n	800fb26 <rmw_publish+0x7a>
 800fb66:	bf00      	nop
 800fb68:	0800faa5 	.word	0x0800faa5

0800fb6c <rmw_create_publisher>:
 800fb6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb70:	b087      	sub	sp, #28
 800fb72:	2800      	cmp	r0, #0
 800fb74:	f000 80c9 	beq.w	800fd0a <rmw_create_publisher+0x19e>
 800fb78:	460f      	mov	r7, r1
 800fb7a:	2900      	cmp	r1, #0
 800fb7c:	f000 80c5 	beq.w	800fd0a <rmw_create_publisher+0x19e>
 800fb80:	4604      	mov	r4, r0
 800fb82:	6800      	ldr	r0, [r0, #0]
 800fb84:	4615      	mov	r5, r2
 800fb86:	461e      	mov	r6, r3
 800fb88:	f000 ff04 	bl	8010994 <is_uxrce_rmw_identifier_valid>
 800fb8c:	2800      	cmp	r0, #0
 800fb8e:	f000 80bc 	beq.w	800fd0a <rmw_create_publisher+0x19e>
 800fb92:	2d00      	cmp	r5, #0
 800fb94:	f000 80b9 	beq.w	800fd0a <rmw_create_publisher+0x19e>
 800fb98:	782b      	ldrb	r3, [r5, #0]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	f000 80b5 	beq.w	800fd0a <rmw_create_publisher+0x19e>
 800fba0:	2e00      	cmp	r6, #0
 800fba2:	f000 80b2 	beq.w	800fd0a <rmw_create_publisher+0x19e>
 800fba6:	485c      	ldr	r0, [pc, #368]	@ (800fd18 <rmw_create_publisher+0x1ac>)
 800fba8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800fbac:	f00a f924 	bl	8019df8 <get_memory>
 800fbb0:	2800      	cmp	r0, #0
 800fbb2:	f000 80aa 	beq.w	800fd0a <rmw_create_publisher+0x19e>
 800fbb6:	6884      	ldr	r4, [r0, #8]
 800fbb8:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800fbbc:	f00a f9a2 	bl	8019f04 <rmw_get_implementation_identifier>
 800fbc0:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800fbc4:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800fbc8:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800fbcc:	4628      	mov	r0, r5
 800fbce:	f7f0 fb87 	bl	80002e0 <strlen>
 800fbd2:	3001      	adds	r0, #1
 800fbd4:	283c      	cmp	r0, #60	@ 0x3c
 800fbd6:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 800fbda:	f200 808f 	bhi.w	800fcfc <rmw_create_publisher+0x190>
 800fbde:	4a4f      	ldr	r2, [pc, #316]	@ (800fd1c <rmw_create_publisher+0x1b0>)
 800fbe0:	462b      	mov	r3, r5
 800fbe2:	213c      	movs	r1, #60	@ 0x3c
 800fbe4:	4650      	mov	r0, sl
 800fbe6:	f00d fcb1 	bl	801d54c <sniprintf>
 800fbea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fbee:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800fbf0:	4631      	mov	r1, r6
 800fbf2:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800fbf6:	2250      	movs	r2, #80	@ 0x50
 800fbf8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800fbfc:	f00d feef 	bl	801d9de <memcpy>
 800fc00:	7a33      	ldrb	r3, [r6, #8]
 800fc02:	4947      	ldr	r1, [pc, #284]	@ (800fd20 <rmw_create_publisher+0x1b4>)
 800fc04:	2b02      	cmp	r3, #2
 800fc06:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fc0a:	bf0c      	ite	eq
 800fc0c:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800fc10:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800fc14:	67a3      	str	r3, [r4, #120]	@ 0x78
 800fc16:	2300      	movs	r3, #0
 800fc18:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800fc1c:	4638      	mov	r0, r7
 800fc1e:	f000 fec7 	bl	80109b0 <get_message_typesupport_handle>
 800fc22:	2800      	cmp	r0, #0
 800fc24:	d06a      	beq.n	800fcfc <rmw_create_publisher+0x190>
 800fc26:	6842      	ldr	r2, [r0, #4]
 800fc28:	61a2      	str	r2, [r4, #24]
 800fc2a:	2a00      	cmp	r2, #0
 800fc2c:	d066      	beq.n	800fcfc <rmw_create_publisher+0x190>
 800fc2e:	4629      	mov	r1, r5
 800fc30:	4633      	mov	r3, r6
 800fc32:	4648      	mov	r0, r9
 800fc34:	f00a f96c 	bl	8019f10 <create_topic>
 800fc38:	6260      	str	r0, [r4, #36]	@ 0x24
 800fc3a:	2800      	cmp	r0, #0
 800fc3c:	d062      	beq.n	800fd04 <rmw_create_publisher+0x198>
 800fc3e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fc42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fc46:	2103      	movs	r1, #3
 800fc48:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800fc4c:	1c42      	adds	r2, r0, #1
 800fc4e:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800fc52:	f003 f8cb 	bl	8012dec <uxr_object_id>
 800fc56:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800fc5a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fc5e:	6120      	str	r0, [r4, #16]
 800fc60:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800fc64:	6910      	ldr	r0, [r2, #16]
 800fc66:	2506      	movs	r5, #6
 800fc68:	9500      	str	r5, [sp, #0]
 800fc6a:	6819      	ldr	r1, [r3, #0]
 800fc6c:	6922      	ldr	r2, [r4, #16]
 800fc6e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800fc72:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fc76:	f002 ff2b 	bl	8012ad0 <uxr_buffer_create_publisher_bin>
 800fc7a:	4602      	mov	r2, r0
 800fc7c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fc80:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800fc84:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800fc88:	f000 fd64 	bl	8010754 <run_xrce_session>
 800fc8c:	b3b0      	cbz	r0, 800fcfc <rmw_create_publisher+0x190>
 800fc8e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fc92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fc96:	2105      	movs	r1, #5
 800fc98:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800fc9c:	1c42      	adds	r2, r0, #1
 800fc9e:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800fca2:	f003 f8a3 	bl	8012dec <uxr_object_id>
 800fca6:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800fcaa:	6160      	str	r0, [r4, #20]
 800fcac:	4631      	mov	r1, r6
 800fcae:	af04      	add	r7, sp, #16
 800fcb0:	691e      	ldr	r6, [r3, #16]
 800fcb2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fcb6:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800fcba:	f8d3 a384 	ldr.w	sl, [r3, #900]	@ 0x384
 800fcbe:	4638      	mov	r0, r7
 800fcc0:	f000 fd68 	bl	8010794 <convert_qos_profile>
 800fcc4:	9503      	str	r5, [sp, #12]
 800fcc6:	e897 0003 	ldmia.w	r7, {r0, r1}
 800fcca:	9001      	str	r0, [sp, #4]
 800fccc:	f8ad 1008 	strh.w	r1, [sp, #8]
 800fcd0:	f8db 3010 	ldr.w	r3, [fp, #16]
 800fcd4:	9300      	str	r3, [sp, #0]
 800fcd6:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800fcda:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800fcde:	f8da 1000 	ldr.w	r1, [sl]
 800fce2:	4630      	mov	r0, r6
 800fce4:	f002 ff22 	bl	8012b2c <uxr_buffer_create_datawriter_bin>
 800fce8:	4602      	mov	r2, r0
 800fcea:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fcee:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800fcf2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800fcf6:	f000 fd2d 	bl	8010754 <run_xrce_session>
 800fcfa:	b940      	cbnz	r0, 800fd0e <rmw_create_publisher+0x1a2>
 800fcfc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800fcfe:	b108      	cbz	r0, 800fd04 <rmw_create_publisher+0x198>
 800fd00:	f000 fc1e 	bl	8010540 <rmw_uxrce_fini_topic_memory>
 800fd04:	4640      	mov	r0, r8
 800fd06:	f000 fbc3 	bl	8010490 <rmw_uxrce_fini_publisher_memory>
 800fd0a:	f04f 0800 	mov.w	r8, #0
 800fd0e:	4640      	mov	r0, r8
 800fd10:	b007      	add	sp, #28
 800fd12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd16:	bf00      	nop
 800fd18:	2000d690 	.word	0x2000d690
 800fd1c:	08020348 	.word	0x08020348
 800fd20:	0801fb40 	.word	0x0801fb40

0800fd24 <rmw_publisher_get_actual_qos>:
 800fd24:	b508      	push	{r3, lr}
 800fd26:	4603      	mov	r3, r0
 800fd28:	b140      	cbz	r0, 800fd3c <rmw_publisher_get_actual_qos+0x18>
 800fd2a:	4608      	mov	r0, r1
 800fd2c:	b131      	cbz	r1, 800fd3c <rmw_publisher_get_actual_qos+0x18>
 800fd2e:	6859      	ldr	r1, [r3, #4]
 800fd30:	2250      	movs	r2, #80	@ 0x50
 800fd32:	3128      	adds	r1, #40	@ 0x28
 800fd34:	f00d fe53 	bl	801d9de <memcpy>
 800fd38:	2000      	movs	r0, #0
 800fd3a:	bd08      	pop	{r3, pc}
 800fd3c:	200b      	movs	r0, #11
 800fd3e:	bd08      	pop	{r3, pc}

0800fd40 <rmw_destroy_publisher>:
 800fd40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd44:	b128      	cbz	r0, 800fd52 <rmw_destroy_publisher+0x12>
 800fd46:	4604      	mov	r4, r0
 800fd48:	6800      	ldr	r0, [r0, #0]
 800fd4a:	460d      	mov	r5, r1
 800fd4c:	f000 fe22 	bl	8010994 <is_uxrce_rmw_identifier_valid>
 800fd50:	b918      	cbnz	r0, 800fd5a <rmw_destroy_publisher+0x1a>
 800fd52:	2401      	movs	r4, #1
 800fd54:	4620      	mov	r0, r4
 800fd56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd5a:	6863      	ldr	r3, [r4, #4]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d0f8      	beq.n	800fd52 <rmw_destroy_publisher+0x12>
 800fd60:	2d00      	cmp	r5, #0
 800fd62:	d0f6      	beq.n	800fd52 <rmw_destroy_publisher+0x12>
 800fd64:	6828      	ldr	r0, [r5, #0]
 800fd66:	f000 fe15 	bl	8010994 <is_uxrce_rmw_identifier_valid>
 800fd6a:	2800      	cmp	r0, #0
 800fd6c:	d0f1      	beq.n	800fd52 <rmw_destroy_publisher+0x12>
 800fd6e:	686c      	ldr	r4, [r5, #4]
 800fd70:	2c00      	cmp	r4, #0
 800fd72:	d0ee      	beq.n	800fd52 <rmw_destroy_publisher+0x12>
 800fd74:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800fd76:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800fd7a:	f00a f91d 	bl	8019fb8 <destroy_topic>
 800fd7e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800fd82:	6962      	ldr	r2, [r4, #20]
 800fd84:	6918      	ldr	r0, [r3, #16]
 800fd86:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fd8a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fd8e:	6819      	ldr	r1, [r3, #0]
 800fd90:	f002 fdee 	bl	8012970 <uxr_buffer_delete_entity>
 800fd94:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800fd98:	6922      	ldr	r2, [r4, #16]
 800fd9a:	4680      	mov	r8, r0
 800fd9c:	6918      	ldr	r0, [r3, #16]
 800fd9e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fda2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fda6:	6819      	ldr	r1, [r3, #0]
 800fda8:	f002 fde2 	bl	8012970 <uxr_buffer_delete_entity>
 800fdac:	4606      	mov	r6, r0
 800fdae:	6938      	ldr	r0, [r7, #16]
 800fdb0:	4642      	mov	r2, r8
 800fdb2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fdb6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fdba:	f000 fccb 	bl	8010754 <run_xrce_session>
 800fdbe:	4604      	mov	r4, r0
 800fdc0:	6938      	ldr	r0, [r7, #16]
 800fdc2:	4632      	mov	r2, r6
 800fdc4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fdc8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fdcc:	f000 fcc2 	bl	8010754 <run_xrce_session>
 800fdd0:	4004      	ands	r4, r0
 800fdd2:	f084 0401 	eor.w	r4, r4, #1
 800fdd6:	b2e4      	uxtb	r4, r4
 800fdd8:	4628      	mov	r0, r5
 800fdda:	0064      	lsls	r4, r4, #1
 800fddc:	f000 fb58 	bl	8010490 <rmw_uxrce_fini_publisher_memory>
 800fde0:	e7b8      	b.n	800fd54 <rmw_destroy_publisher+0x14>
 800fde2:	bf00      	nop

0800fde4 <rmw_create_service>:
 800fde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fde8:	b091      	sub	sp, #68	@ 0x44
 800fdea:	2800      	cmp	r0, #0
 800fdec:	f000 80ba 	beq.w	800ff64 <rmw_create_service+0x180>
 800fdf0:	4689      	mov	r9, r1
 800fdf2:	2900      	cmp	r1, #0
 800fdf4:	f000 80b6 	beq.w	800ff64 <rmw_create_service+0x180>
 800fdf8:	4606      	mov	r6, r0
 800fdfa:	6800      	ldr	r0, [r0, #0]
 800fdfc:	4614      	mov	r4, r2
 800fdfe:	461d      	mov	r5, r3
 800fe00:	f000 fdc8 	bl	8010994 <is_uxrce_rmw_identifier_valid>
 800fe04:	2800      	cmp	r0, #0
 800fe06:	f000 80ad 	beq.w	800ff64 <rmw_create_service+0x180>
 800fe0a:	2c00      	cmp	r4, #0
 800fe0c:	f000 80aa 	beq.w	800ff64 <rmw_create_service+0x180>
 800fe10:	7823      	ldrb	r3, [r4, #0]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	f000 80a6 	beq.w	800ff64 <rmw_create_service+0x180>
 800fe18:	2d00      	cmp	r5, #0
 800fe1a:	f000 80a3 	beq.w	800ff64 <rmw_create_service+0x180>
 800fe1e:	4854      	ldr	r0, [pc, #336]	@ (800ff70 <rmw_create_service+0x18c>)
 800fe20:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800fe24:	f009 ffe8 	bl	8019df8 <get_memory>
 800fe28:	2800      	cmp	r0, #0
 800fe2a:	f000 809b 	beq.w	800ff64 <rmw_create_service+0x180>
 800fe2e:	6886      	ldr	r6, [r0, #8]
 800fe30:	f8c6 6080 	str.w	r6, [r6, #128]	@ 0x80
 800fe34:	f00a f866 	bl	8019f04 <rmw_get_implementation_identifier>
 800fe38:	f106 0a88 	add.w	sl, r6, #136	@ 0x88
 800fe3c:	67f0      	str	r0, [r6, #124]	@ 0x7c
 800fe3e:	f8c6 a084 	str.w	sl, [r6, #132]	@ 0x84
 800fe42:	4620      	mov	r0, r4
 800fe44:	f7f0 fa4c 	bl	80002e0 <strlen>
 800fe48:	1c42      	adds	r2, r0, #1
 800fe4a:	2a3c      	cmp	r2, #60	@ 0x3c
 800fe4c:	f106 077c 	add.w	r7, r6, #124	@ 0x7c
 800fe50:	f200 8085 	bhi.w	800ff5e <rmw_create_service+0x17a>
 800fe54:	4621      	mov	r1, r4
 800fe56:	4650      	mov	r0, sl
 800fe58:	f00d fdc1 	bl	801d9de <memcpy>
 800fe5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fe60:	4629      	mov	r1, r5
 800fe62:	f8c6 8078 	str.w	r8, [r6, #120]	@ 0x78
 800fe66:	6773      	str	r3, [r6, #116]	@ 0x74
 800fe68:	2250      	movs	r2, #80	@ 0x50
 800fe6a:	f106 0020 	add.w	r0, r6, #32
 800fe6e:	f00d fdb6 	bl	801d9de <memcpy>
 800fe72:	4940      	ldr	r1, [pc, #256]	@ (800ff74 <rmw_create_service+0x190>)
 800fe74:	4648      	mov	r0, r9
 800fe76:	f000 fda7 	bl	80109c8 <get_service_typesupport_handle>
 800fe7a:	2800      	cmp	r0, #0
 800fe7c:	d06f      	beq.n	800ff5e <rmw_create_service+0x17a>
 800fe7e:	6843      	ldr	r3, [r0, #4]
 800fe80:	6173      	str	r3, [r6, #20]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d06b      	beq.n	800ff5e <rmw_create_service+0x17a>
 800fe86:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800fe8a:	f8df a0f0 	ldr.w	sl, [pc, #240]	@ 800ff7c <rmw_create_service+0x198>
 800fe8e:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 800ff80 <rmw_create_service+0x19c>
 800fe92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fe96:	2108      	movs	r1, #8
 800fe98:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 800fe9c:	1c42      	adds	r2, r0, #1
 800fe9e:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 800fea2:	f002 ffa3 	bl	8012dec <uxr_object_id>
 800fea6:	2364      	movs	r3, #100	@ 0x64
 800fea8:	6130      	str	r0, [r6, #16]
 800feaa:	4652      	mov	r2, sl
 800feac:	6970      	ldr	r0, [r6, #20]
 800feae:	4649      	mov	r1, r9
 800feb0:	f000 fcbe 	bl	8010830 <generate_service_types>
 800feb4:	2800      	cmp	r0, #0
 800feb6:	d052      	beq.n	800ff5e <rmw_create_service+0x17a>
 800feb8:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 800ff84 <rmw_create_service+0x1a0>
 800febc:	492e      	ldr	r1, [pc, #184]	@ (800ff78 <rmw_create_service+0x194>)
 800febe:	233c      	movs	r3, #60	@ 0x3c
 800fec0:	465a      	mov	r2, fp
 800fec2:	4620      	mov	r0, r4
 800fec4:	f000 fc82 	bl	80107cc <generate_service_topics>
 800fec8:	2800      	cmp	r0, #0
 800feca:	d048      	beq.n	800ff5e <rmw_create_service+0x17a>
 800fecc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800fed0:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800fed4:	a80c      	add	r0, sp, #48	@ 0x30
 800fed6:	4629      	mov	r1, r5
 800fed8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fedc:	f000 fc5a 	bl	8010794 <convert_qos_profile>
 800fee0:	4b25      	ldr	r3, [pc, #148]	@ (800ff78 <rmw_create_service+0x194>)
 800fee2:	f8cd b010 	str.w	fp, [sp, #16]
 800fee6:	e9cd a302 	strd	sl, r3, [sp, #8]
 800feea:	e9cd 4900 	strd	r4, r9, [sp]
 800feee:	a80c      	add	r0, sp, #48	@ 0x30
 800fef0:	c803      	ldmia	r0, {r0, r1}
 800fef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fef4:	9005      	str	r0, [sp, #20]
 800fef6:	9a08      	ldr	r2, [sp, #32]
 800fef8:	f8ad 1018 	strh.w	r1, [sp, #24]
 800fefc:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800ff00:	2306      	movs	r3, #6
 800ff02:	9307      	str	r3, [sp, #28]
 800ff04:	6811      	ldr	r1, [r2, #0]
 800ff06:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800ff0a:	6932      	ldr	r2, [r6, #16]
 800ff0c:	f002 fe72 	bl	8012bf4 <uxr_buffer_create_replier_bin>
 800ff10:	4602      	mov	r2, r0
 800ff12:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800ff16:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ff1a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ff1e:	f000 fc19 	bl	8010754 <run_xrce_session>
 800ff22:	b1e0      	cbz	r0, 800ff5e <rmw_create_service+0x17a>
 800ff24:	7a2b      	ldrb	r3, [r5, #8]
 800ff26:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	2b02      	cmp	r3, #2
 800ff2e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800ff32:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 800ff36:	bf0c      	ite	eq
 800ff38:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 800ff3c:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 800ff40:	6732      	str	r2, [r6, #112]	@ 0x70
 800ff42:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ff44:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800ff48:	ab0e      	add	r3, sp, #56	@ 0x38
 800ff4a:	9300      	str	r3, [sp, #0]
 800ff4c:	6811      	ldr	r1, [r2, #0]
 800ff4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ff50:	6932      	ldr	r2, [r6, #16]
 800ff52:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ff56:	f002 ff77 	bl	8012e48 <uxr_buffer_request_data>
 800ff5a:	8330      	strh	r0, [r6, #24]
 800ff5c:	e003      	b.n	800ff66 <rmw_create_service+0x182>
 800ff5e:	4638      	mov	r0, r7
 800ff60:	f000 fac2 	bl	80104e8 <rmw_uxrce_fini_service_memory>
 800ff64:	2700      	movs	r7, #0
 800ff66:	4638      	mov	r0, r7
 800ff68:	b011      	add	sp, #68	@ 0x44
 800ff6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff6e:	bf00      	nop
 800ff70:	2000c9c8 	.word	0x2000c9c8
 800ff74:	0801fb40 	.word	0x0801fb40
 800ff78:	2000a124 	.word	0x2000a124
 800ff7c:	2000a160 	.word	0x2000a160
 800ff80:	2000a1c4 	.word	0x2000a1c4
 800ff84:	2000a0e8 	.word	0x2000a0e8

0800ff88 <rmw_destroy_service>:
 800ff88:	b570      	push	{r4, r5, r6, lr}
 800ff8a:	b128      	cbz	r0, 800ff98 <rmw_destroy_service+0x10>
 800ff8c:	4604      	mov	r4, r0
 800ff8e:	6800      	ldr	r0, [r0, #0]
 800ff90:	460d      	mov	r5, r1
 800ff92:	f000 fcff 	bl	8010994 <is_uxrce_rmw_identifier_valid>
 800ff96:	b910      	cbnz	r0, 800ff9e <rmw_destroy_service+0x16>
 800ff98:	2401      	movs	r4, #1
 800ff9a:	4620      	mov	r0, r4
 800ff9c:	bd70      	pop	{r4, r5, r6, pc}
 800ff9e:	6863      	ldr	r3, [r4, #4]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d0f9      	beq.n	800ff98 <rmw_destroy_service+0x10>
 800ffa4:	2d00      	cmp	r5, #0
 800ffa6:	d0f7      	beq.n	800ff98 <rmw_destroy_service+0x10>
 800ffa8:	6828      	ldr	r0, [r5, #0]
 800ffaa:	f000 fcf3 	bl	8010994 <is_uxrce_rmw_identifier_valid>
 800ffae:	2800      	cmp	r0, #0
 800ffb0:	d0f2      	beq.n	800ff98 <rmw_destroy_service+0x10>
 800ffb2:	686e      	ldr	r6, [r5, #4]
 800ffb4:	2e00      	cmp	r6, #0
 800ffb6:	d0ef      	beq.n	800ff98 <rmw_destroy_service+0x10>
 800ffb8:	6864      	ldr	r4, [r4, #4]
 800ffba:	6932      	ldr	r2, [r6, #16]
 800ffbc:	6920      	ldr	r0, [r4, #16]
 800ffbe:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ffc2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ffc6:	6819      	ldr	r1, [r3, #0]
 800ffc8:	f002 ff76 	bl	8012eb8 <uxr_buffer_cancel_data>
 800ffcc:	4602      	mov	r2, r0
 800ffce:	6920      	ldr	r0, [r4, #16]
 800ffd0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ffd4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ffd8:	f000 fbbc 	bl	8010754 <run_xrce_session>
 800ffdc:	6920      	ldr	r0, [r4, #16]
 800ffde:	6932      	ldr	r2, [r6, #16]
 800ffe0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ffe4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ffe8:	6819      	ldr	r1, [r3, #0]
 800ffea:	f002 fcc1 	bl	8012970 <uxr_buffer_delete_entity>
 800ffee:	4602      	mov	r2, r0
 800fff0:	6920      	ldr	r0, [r4, #16]
 800fff2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fff6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fffa:	f000 fbab 	bl	8010754 <run_xrce_session>
 800fffe:	f080 0401 	eor.w	r4, r0, #1
 8010002:	b2e4      	uxtb	r4, r4
 8010004:	4628      	mov	r0, r5
 8010006:	0064      	lsls	r4, r4, #1
 8010008:	f000 fa6e 	bl	80104e8 <rmw_uxrce_fini_service_memory>
 801000c:	e7c5      	b.n	800ff9a <rmw_destroy_service+0x12>
 801000e:	bf00      	nop

08010010 <rmw_service_response_publisher_get_actual_qos>:
 8010010:	b508      	push	{r3, lr}
 8010012:	4603      	mov	r3, r0
 8010014:	b140      	cbz	r0, 8010028 <rmw_service_response_publisher_get_actual_qos+0x18>
 8010016:	4608      	mov	r0, r1
 8010018:	b131      	cbz	r1, 8010028 <rmw_service_response_publisher_get_actual_qos+0x18>
 801001a:	6859      	ldr	r1, [r3, #4]
 801001c:	2250      	movs	r2, #80	@ 0x50
 801001e:	3120      	adds	r1, #32
 8010020:	f00d fcdd 	bl	801d9de <memcpy>
 8010024:	2000      	movs	r0, #0
 8010026:	bd08      	pop	{r3, pc}
 8010028:	200b      	movs	r0, #11
 801002a:	bd08      	pop	{r3, pc}

0801002c <rmw_service_request_subscription_get_actual_qos>:
 801002c:	b508      	push	{r3, lr}
 801002e:	4603      	mov	r3, r0
 8010030:	b140      	cbz	r0, 8010044 <rmw_service_request_subscription_get_actual_qos+0x18>
 8010032:	4608      	mov	r0, r1
 8010034:	b131      	cbz	r1, 8010044 <rmw_service_request_subscription_get_actual_qos+0x18>
 8010036:	6859      	ldr	r1, [r3, #4]
 8010038:	2250      	movs	r2, #80	@ 0x50
 801003a:	3120      	adds	r1, #32
 801003c:	f00d fccf 	bl	801d9de <memcpy>
 8010040:	2000      	movs	r0, #0
 8010042:	bd08      	pop	{r3, pc}
 8010044:	200b      	movs	r0, #11
 8010046:	bd08      	pop	{r3, pc}

08010048 <rmw_destroy_subscription>:
 8010048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801004c:	b128      	cbz	r0, 801005a <rmw_destroy_subscription+0x12>
 801004e:	4604      	mov	r4, r0
 8010050:	6800      	ldr	r0, [r0, #0]
 8010052:	460d      	mov	r5, r1
 8010054:	f000 fc9e 	bl	8010994 <is_uxrce_rmw_identifier_valid>
 8010058:	b918      	cbnz	r0, 8010062 <rmw_destroy_subscription+0x1a>
 801005a:	2401      	movs	r4, #1
 801005c:	4620      	mov	r0, r4
 801005e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010062:	6863      	ldr	r3, [r4, #4]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d0f8      	beq.n	801005a <rmw_destroy_subscription+0x12>
 8010068:	2d00      	cmp	r5, #0
 801006a:	d0f6      	beq.n	801005a <rmw_destroy_subscription+0x12>
 801006c:	6828      	ldr	r0, [r5, #0]
 801006e:	f000 fc91 	bl	8010994 <is_uxrce_rmw_identifier_valid>
 8010072:	2800      	cmp	r0, #0
 8010074:	d0f1      	beq.n	801005a <rmw_destroy_subscription+0x12>
 8010076:	686c      	ldr	r4, [r5, #4]
 8010078:	2c00      	cmp	r4, #0
 801007a:	d0ee      	beq.n	801005a <rmw_destroy_subscription+0x12>
 801007c:	6a26      	ldr	r6, [r4, #32]
 801007e:	6962      	ldr	r2, [r4, #20]
 8010080:	6930      	ldr	r0, [r6, #16]
 8010082:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010086:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801008a:	6819      	ldr	r1, [r3, #0]
 801008c:	f002 ff14 	bl	8012eb8 <uxr_buffer_cancel_data>
 8010090:	4602      	mov	r2, r0
 8010092:	6930      	ldr	r0, [r6, #16]
 8010094:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010098:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801009c:	f000 fb5a 	bl	8010754 <run_xrce_session>
 80100a0:	69e0      	ldr	r0, [r4, #28]
 80100a2:	f009 ff89 	bl	8019fb8 <destroy_topic>
 80100a6:	6a23      	ldr	r3, [r4, #32]
 80100a8:	6962      	ldr	r2, [r4, #20]
 80100aa:	6918      	ldr	r0, [r3, #16]
 80100ac:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80100b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80100b4:	6819      	ldr	r1, [r3, #0]
 80100b6:	f002 fc5b 	bl	8012970 <uxr_buffer_delete_entity>
 80100ba:	6a23      	ldr	r3, [r4, #32]
 80100bc:	6922      	ldr	r2, [r4, #16]
 80100be:	4680      	mov	r8, r0
 80100c0:	6918      	ldr	r0, [r3, #16]
 80100c2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80100c6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80100ca:	6819      	ldr	r1, [r3, #0]
 80100cc:	f002 fc50 	bl	8012970 <uxr_buffer_delete_entity>
 80100d0:	4607      	mov	r7, r0
 80100d2:	6930      	ldr	r0, [r6, #16]
 80100d4:	4642      	mov	r2, r8
 80100d6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80100da:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80100de:	f000 fb39 	bl	8010754 <run_xrce_session>
 80100e2:	4604      	mov	r4, r0
 80100e4:	6930      	ldr	r0, [r6, #16]
 80100e6:	463a      	mov	r2, r7
 80100e8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80100ec:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80100f0:	f000 fb30 	bl	8010754 <run_xrce_session>
 80100f4:	4004      	ands	r4, r0
 80100f6:	f084 0401 	eor.w	r4, r4, #1
 80100fa:	b2e4      	uxtb	r4, r4
 80100fc:	4628      	mov	r0, r5
 80100fe:	0064      	lsls	r4, r4, #1
 8010100:	f000 f9dc 	bl	80104bc <rmw_uxrce_fini_subscription_memory>
 8010104:	e7aa      	b.n	801005c <rmw_destroy_subscription+0x14>
 8010106:	bf00      	nop

08010108 <rmw_uxrce_transport_init>:
 8010108:	b508      	push	{r3, lr}
 801010a:	b108      	cbz	r0, 8010110 <rmw_uxrce_transport_init+0x8>
 801010c:	f100 0210 	add.w	r2, r0, #16
 8010110:	b139      	cbz	r1, 8010122 <rmw_uxrce_transport_init+0x1a>
 8010112:	6949      	ldr	r1, [r1, #20]
 8010114:	4610      	mov	r0, r2
 8010116:	f002 fe31 	bl	8012d7c <uxr_init_custom_transport>
 801011a:	f080 0001 	eor.w	r0, r0, #1
 801011e:	b2c0      	uxtb	r0, r0
 8010120:	bd08      	pop	{r3, pc}
 8010122:	4b04      	ldr	r3, [pc, #16]	@ (8010134 <rmw_uxrce_transport_init+0x2c>)
 8010124:	4610      	mov	r0, r2
 8010126:	6859      	ldr	r1, [r3, #4]
 8010128:	f002 fe28 	bl	8012d7c <uxr_init_custom_transport>
 801012c:	f080 0001 	eor.w	r0, r0, #1
 8010130:	b2c0      	uxtb	r0, r0
 8010132:	bd08      	pop	{r3, pc}
 8010134:	2000a090 	.word	0x2000a090

08010138 <rmw_uros_epoch_millis>:
 8010138:	4b05      	ldr	r3, [pc, #20]	@ (8010150 <rmw_uros_epoch_millis+0x18>)
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	b123      	cbz	r3, 8010148 <rmw_uros_epoch_millis+0x10>
 801013e:	6898      	ldr	r0, [r3, #8]
 8010140:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010144:	f003 b8aa 	b.w	801329c <uxr_epoch_millis>
 8010148:	2000      	movs	r0, #0
 801014a:	2100      	movs	r1, #0
 801014c:	4770      	bx	lr
 801014e:	bf00      	nop
 8010150:	2000ed00 	.word	0x2000ed00

08010154 <rmw_uros_epoch_nanos>:
 8010154:	4b05      	ldr	r3, [pc, #20]	@ (801016c <rmw_uros_epoch_nanos+0x18>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	b123      	cbz	r3, 8010164 <rmw_uros_epoch_nanos+0x10>
 801015a:	6898      	ldr	r0, [r3, #8]
 801015c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010160:	f003 b8ae 	b.w	80132c0 <uxr_epoch_nanos>
 8010164:	2000      	movs	r0, #0
 8010166:	2100      	movs	r1, #0
 8010168:	4770      	bx	lr
 801016a:	bf00      	nop
 801016c:	2000ed00 	.word	0x2000ed00

08010170 <rmw_uros_sync_session>:
 8010170:	b508      	push	{r3, lr}
 8010172:	4b07      	ldr	r3, [pc, #28]	@ (8010190 <rmw_uros_sync_session+0x20>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	b14b      	cbz	r3, 801018c <rmw_uros_sync_session+0x1c>
 8010178:	4601      	mov	r1, r0
 801017a:	6898      	ldr	r0, [r3, #8]
 801017c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010180:	f003 fcba 	bl	8013af8 <uxr_sync_session>
 8010184:	f080 0001 	eor.w	r0, r0, #1
 8010188:	b2c0      	uxtb	r0, r0
 801018a:	bd08      	pop	{r3, pc}
 801018c:	2001      	movs	r0, #1
 801018e:	bd08      	pop	{r3, pc}
 8010190:	2000ed00 	.word	0x2000ed00

08010194 <rmw_uxrce_init_service_memory>:
 8010194:	b1e2      	cbz	r2, 80101d0 <rmw_uxrce_init_service_memory+0x3c>
 8010196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801019a:	7b05      	ldrb	r5, [r0, #12]
 801019c:	4606      	mov	r6, r0
 801019e:	b9ad      	cbnz	r5, 80101cc <rmw_uxrce_init_service_memory+0x38>
 80101a0:	23c8      	movs	r3, #200	@ 0xc8
 80101a2:	e9c0 5500 	strd	r5, r5, [r0]
 80101a6:	6083      	str	r3, [r0, #8]
 80101a8:	f240 1301 	movw	r3, #257	@ 0x101
 80101ac:	4617      	mov	r7, r2
 80101ae:	8183      	strh	r3, [r0, #12]
 80101b0:	460c      	mov	r4, r1
 80101b2:	46a8      	mov	r8, r5
 80101b4:	4621      	mov	r1, r4
 80101b6:	4630      	mov	r0, r6
 80101b8:	3501      	adds	r5, #1
 80101ba:	f009 fe2d 	bl	8019e18 <put_memory>
 80101be:	42af      	cmp	r7, r5
 80101c0:	60a4      	str	r4, [r4, #8]
 80101c2:	f884 800c 	strb.w	r8, [r4, #12]
 80101c6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 80101ca:	d1f3      	bne.n	80101b4 <rmw_uxrce_init_service_memory+0x20>
 80101cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101d0:	4770      	bx	lr
 80101d2:	bf00      	nop

080101d4 <rmw_uxrce_init_client_memory>:
 80101d4:	b1e2      	cbz	r2, 8010210 <rmw_uxrce_init_client_memory+0x3c>
 80101d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101da:	7b05      	ldrb	r5, [r0, #12]
 80101dc:	4606      	mov	r6, r0
 80101de:	b9ad      	cbnz	r5, 801020c <rmw_uxrce_init_client_memory+0x38>
 80101e0:	23c8      	movs	r3, #200	@ 0xc8
 80101e2:	e9c0 5500 	strd	r5, r5, [r0]
 80101e6:	6083      	str	r3, [r0, #8]
 80101e8:	f240 1301 	movw	r3, #257	@ 0x101
 80101ec:	4617      	mov	r7, r2
 80101ee:	8183      	strh	r3, [r0, #12]
 80101f0:	460c      	mov	r4, r1
 80101f2:	46a8      	mov	r8, r5
 80101f4:	4621      	mov	r1, r4
 80101f6:	4630      	mov	r0, r6
 80101f8:	3501      	adds	r5, #1
 80101fa:	f009 fe0d 	bl	8019e18 <put_memory>
 80101fe:	42af      	cmp	r7, r5
 8010200:	60a4      	str	r4, [r4, #8]
 8010202:	f884 800c 	strb.w	r8, [r4, #12]
 8010206:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 801020a:	d1f3      	bne.n	80101f4 <rmw_uxrce_init_client_memory+0x20>
 801020c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010210:	4770      	bx	lr
 8010212:	bf00      	nop

08010214 <rmw_uxrce_init_publisher_memory>:
 8010214:	b1e2      	cbz	r2, 8010250 <rmw_uxrce_init_publisher_memory+0x3c>
 8010216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801021a:	7b05      	ldrb	r5, [r0, #12]
 801021c:	4606      	mov	r6, r0
 801021e:	b9ad      	cbnz	r5, 801024c <rmw_uxrce_init_publisher_memory+0x38>
 8010220:	23d8      	movs	r3, #216	@ 0xd8
 8010222:	e9c0 5500 	strd	r5, r5, [r0]
 8010226:	6083      	str	r3, [r0, #8]
 8010228:	f240 1301 	movw	r3, #257	@ 0x101
 801022c:	4617      	mov	r7, r2
 801022e:	8183      	strh	r3, [r0, #12]
 8010230:	460c      	mov	r4, r1
 8010232:	46a8      	mov	r8, r5
 8010234:	4621      	mov	r1, r4
 8010236:	4630      	mov	r0, r6
 8010238:	3501      	adds	r5, #1
 801023a:	f009 fded 	bl	8019e18 <put_memory>
 801023e:	42af      	cmp	r7, r5
 8010240:	60a4      	str	r4, [r4, #8]
 8010242:	f884 800c 	strb.w	r8, [r4, #12]
 8010246:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 801024a:	d1f3      	bne.n	8010234 <rmw_uxrce_init_publisher_memory+0x20>
 801024c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010250:	4770      	bx	lr
 8010252:	bf00      	nop

08010254 <rmw_uxrce_init_subscription_memory>:
 8010254:	b1e2      	cbz	r2, 8010290 <rmw_uxrce_init_subscription_memory+0x3c>
 8010256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801025a:	7b05      	ldrb	r5, [r0, #12]
 801025c:	4606      	mov	r6, r0
 801025e:	b9ad      	cbnz	r5, 801028c <rmw_uxrce_init_subscription_memory+0x38>
 8010260:	23d8      	movs	r3, #216	@ 0xd8
 8010262:	e9c0 5500 	strd	r5, r5, [r0]
 8010266:	6083      	str	r3, [r0, #8]
 8010268:	f240 1301 	movw	r3, #257	@ 0x101
 801026c:	4617      	mov	r7, r2
 801026e:	8183      	strh	r3, [r0, #12]
 8010270:	460c      	mov	r4, r1
 8010272:	46a8      	mov	r8, r5
 8010274:	4621      	mov	r1, r4
 8010276:	4630      	mov	r0, r6
 8010278:	3501      	adds	r5, #1
 801027a:	f009 fdcd 	bl	8019e18 <put_memory>
 801027e:	42af      	cmp	r7, r5
 8010280:	60a4      	str	r4, [r4, #8]
 8010282:	f884 800c 	strb.w	r8, [r4, #12]
 8010286:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 801028a:	d1f3      	bne.n	8010274 <rmw_uxrce_init_subscription_memory+0x20>
 801028c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010290:	4770      	bx	lr
 8010292:	bf00      	nop

08010294 <rmw_uxrce_init_node_memory>:
 8010294:	b1e2      	cbz	r2, 80102d0 <rmw_uxrce_init_node_memory+0x3c>
 8010296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801029a:	7b05      	ldrb	r5, [r0, #12]
 801029c:	4606      	mov	r6, r0
 801029e:	b9ad      	cbnz	r5, 80102cc <rmw_uxrce_init_node_memory+0x38>
 80102a0:	23a4      	movs	r3, #164	@ 0xa4
 80102a2:	e9c0 5500 	strd	r5, r5, [r0]
 80102a6:	6083      	str	r3, [r0, #8]
 80102a8:	f240 1301 	movw	r3, #257	@ 0x101
 80102ac:	4617      	mov	r7, r2
 80102ae:	8183      	strh	r3, [r0, #12]
 80102b0:	460c      	mov	r4, r1
 80102b2:	46a8      	mov	r8, r5
 80102b4:	4621      	mov	r1, r4
 80102b6:	4630      	mov	r0, r6
 80102b8:	3501      	adds	r5, #1
 80102ba:	f009 fdad 	bl	8019e18 <put_memory>
 80102be:	42af      	cmp	r7, r5
 80102c0:	60a4      	str	r4, [r4, #8]
 80102c2:	f884 800c 	strb.w	r8, [r4, #12]
 80102c6:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 80102ca:	d1f3      	bne.n	80102b4 <rmw_uxrce_init_node_memory+0x20>
 80102cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102d0:	4770      	bx	lr
 80102d2:	bf00      	nop

080102d4 <rmw_uxrce_init_session_memory>:
 80102d4:	b1ea      	cbz	r2, 8010312 <rmw_uxrce_init_session_memory+0x3e>
 80102d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102da:	7b05      	ldrb	r5, [r0, #12]
 80102dc:	4606      	mov	r6, r0
 80102de:	b9b5      	cbnz	r5, 801030e <rmw_uxrce_init_session_memory+0x3a>
 80102e0:	e9c0 5500 	strd	r5, r5, [r0]
 80102e4:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 80102e8:	f240 1301 	movw	r3, #257	@ 0x101
 80102ec:	4617      	mov	r7, r2
 80102ee:	f8c0 8008 	str.w	r8, [r0, #8]
 80102f2:	460c      	mov	r4, r1
 80102f4:	8183      	strh	r3, [r0, #12]
 80102f6:	46a9      	mov	r9, r5
 80102f8:	4621      	mov	r1, r4
 80102fa:	4630      	mov	r0, r6
 80102fc:	3501      	adds	r5, #1
 80102fe:	f009 fd8b 	bl	8019e18 <put_memory>
 8010302:	42af      	cmp	r7, r5
 8010304:	60a4      	str	r4, [r4, #8]
 8010306:	f884 900c 	strb.w	r9, [r4, #12]
 801030a:	4444      	add	r4, r8
 801030c:	d1f4      	bne.n	80102f8 <rmw_uxrce_init_session_memory+0x24>
 801030e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010312:	4770      	bx	lr

08010314 <rmw_uxrce_init_topic_memory>:
 8010314:	b1e2      	cbz	r2, 8010350 <rmw_uxrce_init_topic_memory+0x3c>
 8010316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801031a:	7b05      	ldrb	r5, [r0, #12]
 801031c:	4606      	mov	r6, r0
 801031e:	b9ad      	cbnz	r5, 801034c <rmw_uxrce_init_topic_memory+0x38>
 8010320:	231c      	movs	r3, #28
 8010322:	e9c0 5500 	strd	r5, r5, [r0]
 8010326:	6083      	str	r3, [r0, #8]
 8010328:	f240 1301 	movw	r3, #257	@ 0x101
 801032c:	4617      	mov	r7, r2
 801032e:	8183      	strh	r3, [r0, #12]
 8010330:	460c      	mov	r4, r1
 8010332:	46a8      	mov	r8, r5
 8010334:	4621      	mov	r1, r4
 8010336:	4630      	mov	r0, r6
 8010338:	3501      	adds	r5, #1
 801033a:	f009 fd6d 	bl	8019e18 <put_memory>
 801033e:	42af      	cmp	r7, r5
 8010340:	60a4      	str	r4, [r4, #8]
 8010342:	f884 800c 	strb.w	r8, [r4, #12]
 8010346:	f104 041c 	add.w	r4, r4, #28
 801034a:	d1f3      	bne.n	8010334 <rmw_uxrce_init_topic_memory+0x20>
 801034c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010350:	4770      	bx	lr
 8010352:	bf00      	nop

08010354 <rmw_uxrce_init_static_input_buffer_memory>:
 8010354:	b1ea      	cbz	r2, 8010392 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8010356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801035a:	7b05      	ldrb	r5, [r0, #12]
 801035c:	4606      	mov	r6, r0
 801035e:	b9b5      	cbnz	r5, 801038e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8010360:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8010364:	e9c0 5500 	strd	r5, r5, [r0]
 8010368:	6083      	str	r3, [r0, #8]
 801036a:	f240 1301 	movw	r3, #257	@ 0x101
 801036e:	4617      	mov	r7, r2
 8010370:	8183      	strh	r3, [r0, #12]
 8010372:	460c      	mov	r4, r1
 8010374:	46a8      	mov	r8, r5
 8010376:	4621      	mov	r1, r4
 8010378:	4630      	mov	r0, r6
 801037a:	3501      	adds	r5, #1
 801037c:	f009 fd4c 	bl	8019e18 <put_memory>
 8010380:	42af      	cmp	r7, r5
 8010382:	60a4      	str	r4, [r4, #8]
 8010384:	f884 800c 	strb.w	r8, [r4, #12]
 8010388:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 801038c:	d1f3      	bne.n	8010376 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 801038e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010392:	4770      	bx	lr

08010394 <rmw_uxrce_init_init_options_impl_memory>:
 8010394:	b1e2      	cbz	r2, 80103d0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8010396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801039a:	7b05      	ldrb	r5, [r0, #12]
 801039c:	4606      	mov	r6, r0
 801039e:	b9ad      	cbnz	r5, 80103cc <rmw_uxrce_init_init_options_impl_memory+0x38>
 80103a0:	232c      	movs	r3, #44	@ 0x2c
 80103a2:	e9c0 5500 	strd	r5, r5, [r0]
 80103a6:	6083      	str	r3, [r0, #8]
 80103a8:	f240 1301 	movw	r3, #257	@ 0x101
 80103ac:	4617      	mov	r7, r2
 80103ae:	8183      	strh	r3, [r0, #12]
 80103b0:	460c      	mov	r4, r1
 80103b2:	46a8      	mov	r8, r5
 80103b4:	4621      	mov	r1, r4
 80103b6:	4630      	mov	r0, r6
 80103b8:	3501      	adds	r5, #1
 80103ba:	f009 fd2d 	bl	8019e18 <put_memory>
 80103be:	42af      	cmp	r7, r5
 80103c0:	60a4      	str	r4, [r4, #8]
 80103c2:	f884 800c 	strb.w	r8, [r4, #12]
 80103c6:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 80103ca:	d1f3      	bne.n	80103b4 <rmw_uxrce_init_init_options_impl_memory+0x20>
 80103cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103d0:	4770      	bx	lr
 80103d2:	bf00      	nop

080103d4 <rmw_uxrce_init_wait_set_memory>:
 80103d4:	b1e2      	cbz	r2, 8010410 <rmw_uxrce_init_wait_set_memory+0x3c>
 80103d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103da:	7b05      	ldrb	r5, [r0, #12]
 80103dc:	4606      	mov	r6, r0
 80103de:	b9ad      	cbnz	r5, 801040c <rmw_uxrce_init_wait_set_memory+0x38>
 80103e0:	231c      	movs	r3, #28
 80103e2:	e9c0 5500 	strd	r5, r5, [r0]
 80103e6:	6083      	str	r3, [r0, #8]
 80103e8:	f240 1301 	movw	r3, #257	@ 0x101
 80103ec:	4617      	mov	r7, r2
 80103ee:	8183      	strh	r3, [r0, #12]
 80103f0:	460c      	mov	r4, r1
 80103f2:	46a8      	mov	r8, r5
 80103f4:	4621      	mov	r1, r4
 80103f6:	4630      	mov	r0, r6
 80103f8:	3501      	adds	r5, #1
 80103fa:	f009 fd0d 	bl	8019e18 <put_memory>
 80103fe:	42af      	cmp	r7, r5
 8010400:	60a4      	str	r4, [r4, #8]
 8010402:	f884 800c 	strb.w	r8, [r4, #12]
 8010406:	f104 041c 	add.w	r4, r4, #28
 801040a:	d1f3      	bne.n	80103f4 <rmw_uxrce_init_wait_set_memory+0x20>
 801040c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010410:	4770      	bx	lr
 8010412:	bf00      	nop

08010414 <rmw_uxrce_init_guard_condition_memory>:
 8010414:	b1e2      	cbz	r2, 8010450 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8010416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801041a:	7b05      	ldrb	r5, [r0, #12]
 801041c:	4606      	mov	r6, r0
 801041e:	b9ad      	cbnz	r5, 801044c <rmw_uxrce_init_guard_condition_memory+0x38>
 8010420:	2320      	movs	r3, #32
 8010422:	e9c0 5500 	strd	r5, r5, [r0]
 8010426:	6083      	str	r3, [r0, #8]
 8010428:	f240 1301 	movw	r3, #257	@ 0x101
 801042c:	4617      	mov	r7, r2
 801042e:	8183      	strh	r3, [r0, #12]
 8010430:	460c      	mov	r4, r1
 8010432:	46a8      	mov	r8, r5
 8010434:	4621      	mov	r1, r4
 8010436:	4630      	mov	r0, r6
 8010438:	3501      	adds	r5, #1
 801043a:	f009 fced 	bl	8019e18 <put_memory>
 801043e:	42af      	cmp	r7, r5
 8010440:	60a4      	str	r4, [r4, #8]
 8010442:	f884 800c 	strb.w	r8, [r4, #12]
 8010446:	f104 0420 	add.w	r4, r4, #32
 801044a:	d1f3      	bne.n	8010434 <rmw_uxrce_init_guard_condition_memory+0x20>
 801044c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010450:	4770      	bx	lr
 8010452:	bf00      	nop

08010454 <rmw_uxrce_fini_session_memory>:
 8010454:	4601      	mov	r1, r0
 8010456:	4801      	ldr	r0, [pc, #4]	@ (801045c <rmw_uxrce_fini_session_memory+0x8>)
 8010458:	f009 bcde 	b.w	8019e18 <put_memory>
 801045c:	2000ed00 	.word	0x2000ed00

08010460 <rmw_uxrce_fini_node_memory>:
 8010460:	b538      	push	{r3, r4, r5, lr}
 8010462:	4604      	mov	r4, r0
 8010464:	6800      	ldr	r0, [r0, #0]
 8010466:	b128      	cbz	r0, 8010474 <rmw_uxrce_fini_node_memory+0x14>
 8010468:	4b07      	ldr	r3, [pc, #28]	@ (8010488 <rmw_uxrce_fini_node_memory+0x28>)
 801046a:	6819      	ldr	r1, [r3, #0]
 801046c:	f7ef fed8 	bl	8000220 <strcmp>
 8010470:	b940      	cbnz	r0, 8010484 <rmw_uxrce_fini_node_memory+0x24>
 8010472:	6020      	str	r0, [r4, #0]
 8010474:	6861      	ldr	r1, [r4, #4]
 8010476:	b129      	cbz	r1, 8010484 <rmw_uxrce_fini_node_memory+0x24>
 8010478:	2500      	movs	r5, #0
 801047a:	4804      	ldr	r0, [pc, #16]	@ (801048c <rmw_uxrce_fini_node_memory+0x2c>)
 801047c:	610d      	str	r5, [r1, #16]
 801047e:	f009 fccb 	bl	8019e18 <put_memory>
 8010482:	6065      	str	r5, [r4, #4]
 8010484:	bd38      	pop	{r3, r4, r5, pc}
 8010486:	bf00      	nop
 8010488:	080215d8 	.word	0x080215d8
 801048c:	2000d744 	.word	0x2000d744

08010490 <rmw_uxrce_fini_publisher_memory>:
 8010490:	b510      	push	{r4, lr}
 8010492:	4604      	mov	r4, r0
 8010494:	6800      	ldr	r0, [r0, #0]
 8010496:	b128      	cbz	r0, 80104a4 <rmw_uxrce_fini_publisher_memory+0x14>
 8010498:	4b06      	ldr	r3, [pc, #24]	@ (80104b4 <rmw_uxrce_fini_publisher_memory+0x24>)
 801049a:	6819      	ldr	r1, [r3, #0]
 801049c:	f7ef fec0 	bl	8000220 <strcmp>
 80104a0:	b938      	cbnz	r0, 80104b2 <rmw_uxrce_fini_publisher_memory+0x22>
 80104a2:	6020      	str	r0, [r4, #0]
 80104a4:	6861      	ldr	r1, [r4, #4]
 80104a6:	b121      	cbz	r1, 80104b2 <rmw_uxrce_fini_publisher_memory+0x22>
 80104a8:	4803      	ldr	r0, [pc, #12]	@ (80104b8 <rmw_uxrce_fini_publisher_memory+0x28>)
 80104aa:	f009 fcb5 	bl	8019e18 <put_memory>
 80104ae:	2300      	movs	r3, #0
 80104b0:	6063      	str	r3, [r4, #4]
 80104b2:	bd10      	pop	{r4, pc}
 80104b4:	080215d8 	.word	0x080215d8
 80104b8:	2000d690 	.word	0x2000d690

080104bc <rmw_uxrce_fini_subscription_memory>:
 80104bc:	b510      	push	{r4, lr}
 80104be:	4604      	mov	r4, r0
 80104c0:	6800      	ldr	r0, [r0, #0]
 80104c2:	b128      	cbz	r0, 80104d0 <rmw_uxrce_fini_subscription_memory+0x14>
 80104c4:	4b06      	ldr	r3, [pc, #24]	@ (80104e0 <rmw_uxrce_fini_subscription_memory+0x24>)
 80104c6:	6819      	ldr	r1, [r3, #0]
 80104c8:	f7ef feaa 	bl	8000220 <strcmp>
 80104cc:	b938      	cbnz	r0, 80104de <rmw_uxrce_fini_subscription_memory+0x22>
 80104ce:	6020      	str	r0, [r4, #0]
 80104d0:	6861      	ldr	r1, [r4, #4]
 80104d2:	b121      	cbz	r1, 80104de <rmw_uxrce_fini_subscription_memory+0x22>
 80104d4:	4803      	ldr	r0, [pc, #12]	@ (80104e4 <rmw_uxrce_fini_subscription_memory+0x28>)
 80104d6:	f009 fc9f 	bl	8019e18 <put_memory>
 80104da:	2300      	movs	r3, #0
 80104dc:	6063      	str	r3, [r4, #4]
 80104de:	bd10      	pop	{r4, pc}
 80104e0:	080215d8 	.word	0x080215d8
 80104e4:	2000ce10 	.word	0x2000ce10

080104e8 <rmw_uxrce_fini_service_memory>:
 80104e8:	b510      	push	{r4, lr}
 80104ea:	4604      	mov	r4, r0
 80104ec:	6800      	ldr	r0, [r0, #0]
 80104ee:	b128      	cbz	r0, 80104fc <rmw_uxrce_fini_service_memory+0x14>
 80104f0:	4b06      	ldr	r3, [pc, #24]	@ (801050c <rmw_uxrce_fini_service_memory+0x24>)
 80104f2:	6819      	ldr	r1, [r3, #0]
 80104f4:	f7ef fe94 	bl	8000220 <strcmp>
 80104f8:	b938      	cbnz	r0, 801050a <rmw_uxrce_fini_service_memory+0x22>
 80104fa:	6020      	str	r0, [r4, #0]
 80104fc:	6861      	ldr	r1, [r4, #4]
 80104fe:	b121      	cbz	r1, 801050a <rmw_uxrce_fini_service_memory+0x22>
 8010500:	4803      	ldr	r0, [pc, #12]	@ (8010510 <rmw_uxrce_fini_service_memory+0x28>)
 8010502:	f009 fc89 	bl	8019e18 <put_memory>
 8010506:	2300      	movs	r3, #0
 8010508:	6063      	str	r3, [r4, #4]
 801050a:	bd10      	pop	{r4, pc}
 801050c:	080215d8 	.word	0x080215d8
 8010510:	2000c9c8 	.word	0x2000c9c8

08010514 <rmw_uxrce_fini_client_memory>:
 8010514:	b510      	push	{r4, lr}
 8010516:	4604      	mov	r4, r0
 8010518:	6800      	ldr	r0, [r0, #0]
 801051a:	b128      	cbz	r0, 8010528 <rmw_uxrce_fini_client_memory+0x14>
 801051c:	4b06      	ldr	r3, [pc, #24]	@ (8010538 <rmw_uxrce_fini_client_memory+0x24>)
 801051e:	6819      	ldr	r1, [r3, #0]
 8010520:	f7ef fe7e 	bl	8000220 <strcmp>
 8010524:	b938      	cbnz	r0, 8010536 <rmw_uxrce_fini_client_memory+0x22>
 8010526:	6020      	str	r0, [r4, #0]
 8010528:	6861      	ldr	r1, [r4, #4]
 801052a:	b121      	cbz	r1, 8010536 <rmw_uxrce_fini_client_memory+0x22>
 801052c:	4803      	ldr	r0, [pc, #12]	@ (801053c <rmw_uxrce_fini_client_memory+0x28>)
 801052e:	f009 fc73 	bl	8019e18 <put_memory>
 8010532:	2300      	movs	r3, #0
 8010534:	6063      	str	r3, [r4, #4]
 8010536:	bd10      	pop	{r4, pc}
 8010538:	080215d8 	.word	0x080215d8
 801053c:	2000c828 	.word	0x2000c828

08010540 <rmw_uxrce_fini_topic_memory>:
 8010540:	b510      	push	{r4, lr}
 8010542:	4604      	mov	r4, r0
 8010544:	4621      	mov	r1, r4
 8010546:	4803      	ldr	r0, [pc, #12]	@ (8010554 <rmw_uxrce_fini_topic_memory+0x14>)
 8010548:	f009 fc66 	bl	8019e18 <put_memory>
 801054c:	2300      	movs	r3, #0
 801054e:	61a3      	str	r3, [r4, #24]
 8010550:	bd10      	pop	{r4, pc}
 8010552:	bf00      	nop
 8010554:	2000c684 	.word	0x2000c684

08010558 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8010558:	b082      	sub	sp, #8
 801055a:	b530      	push	{r4, r5, lr}
 801055c:	4929      	ldr	r1, [pc, #164]	@ (8010604 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 801055e:	ac03      	add	r4, sp, #12
 8010560:	e884 000c 	stmia.w	r4, {r2, r3}
 8010564:	680c      	ldr	r4, [r1, #0]
 8010566:	461d      	mov	r5, r3
 8010568:	4602      	mov	r2, r0
 801056a:	2c00      	cmp	r4, #0
 801056c:	d043      	beq.n	80105f6 <rmw_uxrce_get_static_input_buffer_for_entity+0x9e>
 801056e:	4620      	mov	r0, r4
 8010570:	2100      	movs	r1, #0
 8010572:	6883      	ldr	r3, [r0, #8]
 8010574:	6840      	ldr	r0, [r0, #4]
 8010576:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 801057a:	429a      	cmp	r2, r3
 801057c:	bf08      	it	eq
 801057e:	3101      	addeq	r1, #1
 8010580:	2800      	cmp	r0, #0
 8010582:	d1f6      	bne.n	8010572 <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 8010584:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8010588:	2b02      	cmp	r3, #2
 801058a:	d027      	beq.n	80105dc <rmw_uxrce_get_static_input_buffer_for_entity+0x84>
 801058c:	d906      	bls.n	801059c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 801058e:	2b03      	cmp	r3, #3
 8010590:	d004      	beq.n	801059c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8010592:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010596:	2000      	movs	r0, #0
 8010598:	b002      	add	sp, #8
 801059a:	4770      	bx	lr
 801059c:	b1fd      	cbz	r5, 80105de <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 801059e:	428d      	cmp	r5, r1
 80105a0:	d81d      	bhi.n	80105de <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80105a2:	2c00      	cmp	r4, #0
 80105a4:	d0f5      	beq.n	8010592 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 80105a6:	2000      	movs	r0, #0
 80105a8:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80105ac:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 80105b0:	e001      	b.n	80105b6 <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 80105b2:	6864      	ldr	r4, [r4, #4]
 80105b4:	b1dc      	cbz	r4, 80105ee <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 80105b6:	68a3      	ldr	r3, [r4, #8]
 80105b8:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 80105bc:	428a      	cmp	r2, r1
 80105be:	d1f8      	bne.n	80105b2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 80105c0:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 80105c4:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 80105c8:	4561      	cmp	r1, ip
 80105ca:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80105ce:	eb73 0e05 	sbcs.w	lr, r3, r5
 80105d2:	daee      	bge.n	80105b2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 80105d4:	468c      	mov	ip, r1
 80105d6:	461d      	mov	r5, r3
 80105d8:	4620      	mov	r0, r4
 80105da:	e7ea      	b.n	80105b2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 80105dc:	b92d      	cbnz	r5, 80105ea <rmw_uxrce_get_static_input_buffer_for_entity+0x92>
 80105de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80105e2:	4808      	ldr	r0, [pc, #32]	@ (8010604 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 80105e4:	b002      	add	sp, #8
 80105e6:	f009 bc07 	b.w	8019df8 <get_memory>
 80105ea:	428d      	cmp	r5, r1
 80105ec:	d8f7      	bhi.n	80105de <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80105ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80105f2:	b002      	add	sp, #8
 80105f4:	4770      	bx	lr
 80105f6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80105fa:	2b02      	cmp	r3, #2
 80105fc:	d0ef      	beq.n	80105de <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80105fe:	d9ee      	bls.n	80105de <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8010600:	4621      	mov	r1, r4
 8010602:	e7c4      	b.n	801058e <rmw_uxrce_get_static_input_buffer_for_entity+0x36>
 8010604:	2000c4d0 	.word	0x2000c4d0

08010608 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8010608:	4b11      	ldr	r3, [pc, #68]	@ (8010650 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	b1eb      	cbz	r3, 801064a <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 801060e:	b530      	push	{r4, r5, lr}
 8010610:	4684      	mov	ip, r0
 8010612:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8010616:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 801061a:	2000      	movs	r0, #0
 801061c:	e001      	b.n	8010622 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 801061e:	685b      	ldr	r3, [r3, #4]
 8010620:	b193      	cbz	r3, 8010648 <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 8010622:	689a      	ldr	r2, [r3, #8]
 8010624:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8010628:	458c      	cmp	ip, r1
 801062a:	d1f8      	bne.n	801061e <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 801062c:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8010630:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 8010634:	42a1      	cmp	r1, r4
 8010636:	eb72 050e 	sbcs.w	r5, r2, lr
 801063a:	daf0      	bge.n	801061e <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 801063c:	4618      	mov	r0, r3
 801063e:	685b      	ldr	r3, [r3, #4]
 8010640:	460c      	mov	r4, r1
 8010642:	4696      	mov	lr, r2
 8010644:	2b00      	cmp	r3, #0
 8010646:	d1ec      	bne.n	8010622 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 8010648:	bd30      	pop	{r4, r5, pc}
 801064a:	4618      	mov	r0, r3
 801064c:	4770      	bx	lr
 801064e:	bf00      	nop
 8010650:	2000c4d0 	.word	0x2000c4d0
 8010654:	00000000 	.word	0x00000000

08010658 <rmw_uxrce_clean_expired_static_input_buffer>:
 8010658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801065c:	4b3c      	ldr	r3, [pc, #240]	@ (8010750 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 801065e:	ed2d 8b06 	vpush	{d8-d10}
 8010662:	f8d3 8000 	ldr.w	r8, [r3]
 8010666:	b08d      	sub	sp, #52	@ 0x34
 8010668:	f7ff fd74 	bl	8010154 <rmw_uros_epoch_nanos>
 801066c:	f1b8 0f00 	cmp.w	r8, #0
 8010670:	d05c      	beq.n	801072c <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 8010672:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8010676:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 801067a:	2b04      	cmp	r3, #4
 801067c:	ed9f 8b2e 	vldr	d8, [pc, #184]	@ 8010738 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8010680:	ed9f ab2f 	vldr	d10, [pc, #188]	@ 8010740 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8010684:	ed9f 9b30 	vldr	d9, [pc, #192]	@ 8010748 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8010688:	4683      	mov	fp, r0
 801068a:	ac04      	add	r4, sp, #16
 801068c:	468a      	mov	sl, r1
 801068e:	d03f      	beq.n	8010710 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 8010690:	2b05      	cmp	r3, #5
 8010692:	d044      	beq.n	801071e <rmw_uxrce_clean_expired_static_input_buffer+0xc6>
 8010694:	2b03      	cmp	r3, #3
 8010696:	d03b      	beq.n	8010710 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 8010698:	ed8d 8b04 	vstr	d8, [sp, #16]
 801069c:	ed8d ab06 	vstr	d10, [sp, #24]
 80106a0:	ed8d 8b08 	vstr	d8, [sp, #32]
 80106a4:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 80106a8:	ab08      	add	r3, sp, #32
 80106aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80106ac:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80106b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80106b4:	f009 f8fc 	bl	80198b0 <rmw_time_equal>
 80106b8:	b118      	cbz	r0, 80106c2 <rmw_uxrce_clean_expired_static_input_buffer+0x6a>
 80106ba:	ed8d 9b04 	vstr	d9, [sp, #16]
 80106be:	ed8d 8b06 	vstr	d8, [sp, #24]
 80106c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80106c6:	f8d5 7818 	ldr.w	r7, [r5, #2072]	@ 0x818
 80106ca:	f8d5 681c 	ldr.w	r6, [r5, #2076]	@ 0x81c
 80106ce:	f8d8 9004 	ldr.w	r9, [r8, #4]
 80106d2:	f009 f941 	bl	8019958 <rmw_time_total_nsec>
 80106d6:	183f      	adds	r7, r7, r0
 80106d8:	eb46 0601 	adc.w	r6, r6, r1
 80106dc:	455f      	cmp	r7, fp
 80106de:	eb76 060a 	sbcs.w	r6, r6, sl
 80106e2:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 80106e6:	db05      	blt.n	80106f4 <rmw_uxrce_clean_expired_static_input_buffer+0x9c>
 80106e8:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 80106ec:	4593      	cmp	fp, r2
 80106ee:	eb7a 0303 	sbcs.w	r3, sl, r3
 80106f2:	da03      	bge.n	80106fc <rmw_uxrce_clean_expired_static_input_buffer+0xa4>
 80106f4:	4816      	ldr	r0, [pc, #88]	@ (8010750 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80106f6:	4641      	mov	r1, r8
 80106f8:	f009 fb8e 	bl	8019e18 <put_memory>
 80106fc:	f1b9 0f00 	cmp.w	r9, #0
 8010700:	d014      	beq.n	801072c <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 8010702:	46c8      	mov	r8, r9
 8010704:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8010708:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 801070c:	2b04      	cmp	r3, #4
 801070e:	d1bf      	bne.n	8010690 <rmw_uxrce_clean_expired_static_input_buffer+0x38>
 8010710:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8010714:	3340      	adds	r3, #64	@ 0x40
 8010716:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010718:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801071c:	e7c0      	b.n	80106a0 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 801071e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8010722:	3348      	adds	r3, #72	@ 0x48
 8010724:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010726:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801072a:	e7b9      	b.n	80106a0 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 801072c:	b00d      	add	sp, #52	@ 0x34
 801072e:	ecbd 8b06 	vpop	{d8-d10}
 8010732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010736:	bf00      	nop
	...
 8010740:	00000001 	.word	0x00000001
 8010744:	00000000 	.word	0x00000000
 8010748:	0000001e 	.word	0x0000001e
 801074c:	00000000 	.word	0x00000000
 8010750:	2000c4d0 	.word	0x2000c4d0

08010754 <run_xrce_session>:
 8010754:	b500      	push	{lr}
 8010756:	f891 c002 	ldrb.w	ip, [r1, #2]
 801075a:	b087      	sub	sp, #28
 801075c:	f1bc 0f01 	cmp.w	ip, #1
 8010760:	f8ad 200e 	strh.w	r2, [sp, #14]
 8010764:	d00f      	beq.n	8010786 <run_xrce_session+0x32>
 8010766:	4619      	mov	r1, r3
 8010768:	2301      	movs	r3, #1
 801076a:	9300      	str	r3, [sp, #0]
 801076c:	f10d 020e 	add.w	r2, sp, #14
 8010770:	f10d 0317 	add.w	r3, sp, #23
 8010774:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010778:	f003 f96a 	bl	8013a50 <uxr_run_session_until_all_status>
 801077c:	b100      	cbz	r0, 8010780 <run_xrce_session+0x2c>
 801077e:	2001      	movs	r0, #1
 8010780:	b007      	add	sp, #28
 8010782:	f85d fb04 	ldr.w	pc, [sp], #4
 8010786:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801078a:	f002 fda3 	bl	80132d4 <uxr_flash_output_streams>
 801078e:	2001      	movs	r0, #1
 8010790:	e7f6      	b.n	8010780 <run_xrce_session+0x2c>
 8010792:	bf00      	nop

08010794 <convert_qos_profile>:
 8010794:	780a      	ldrb	r2, [r1, #0]
 8010796:	f891 c008 	ldrb.w	ip, [r1, #8]
 801079a:	f1a2 0202 	sub.w	r2, r2, #2
 801079e:	fab2 f282 	clz	r2, r2
 80107a2:	0952      	lsrs	r2, r2, #5
 80107a4:	7082      	strb	r2, [r0, #2]
 80107a6:	7a4a      	ldrb	r2, [r1, #9]
 80107a8:	8889      	ldrh	r1, [r1, #4]
 80107aa:	8081      	strh	r1, [r0, #4]
 80107ac:	f1a2 0202 	sub.w	r2, r2, #2
 80107b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80107b4:	fab2 f282 	clz	r2, r2
 80107b8:	fabc fc8c 	clz	ip, ip
 80107bc:	0952      	lsrs	r2, r2, #5
 80107be:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80107c2:	0052      	lsls	r2, r2, #1
 80107c4:	f880 c001 	strb.w	ip, [r0, #1]
 80107c8:	7002      	strb	r2, [r0, #0]
 80107ca:	4770      	bx	lr

080107cc <generate_service_topics>:
 80107cc:	b570      	push	{r4, r5, r6, lr}
 80107ce:	b082      	sub	sp, #8
 80107d0:	461c      	mov	r4, r3
 80107d2:	4e12      	ldr	r6, [pc, #72]	@ (801081c <generate_service_topics+0x50>)
 80107d4:	4b12      	ldr	r3, [pc, #72]	@ (8010820 <generate_service_topics+0x54>)
 80107d6:	9601      	str	r6, [sp, #4]
 80107d8:	4605      	mov	r5, r0
 80107da:	9000      	str	r0, [sp, #0]
 80107dc:	4616      	mov	r6, r2
 80107de:	4608      	mov	r0, r1
 80107e0:	4a10      	ldr	r2, [pc, #64]	@ (8010824 <generate_service_topics+0x58>)
 80107e2:	4621      	mov	r1, r4
 80107e4:	f00c feb2 	bl	801d54c <sniprintf>
 80107e8:	4b0f      	ldr	r3, [pc, #60]	@ (8010828 <generate_service_topics+0x5c>)
 80107ea:	9301      	str	r3, [sp, #4]
 80107ec:	4601      	mov	r1, r0
 80107ee:	9500      	str	r5, [sp, #0]
 80107f0:	4b0e      	ldr	r3, [pc, #56]	@ (801082c <generate_service_topics+0x60>)
 80107f2:	4a0c      	ldr	r2, [pc, #48]	@ (8010824 <generate_service_topics+0x58>)
 80107f4:	460d      	mov	r5, r1
 80107f6:	4630      	mov	r0, r6
 80107f8:	4621      	mov	r1, r4
 80107fa:	f00c fea7 	bl	801d54c <sniprintf>
 80107fe:	2d00      	cmp	r5, #0
 8010800:	db01      	blt.n	8010806 <generate_service_topics+0x3a>
 8010802:	42ac      	cmp	r4, r5
 8010804:	dc02      	bgt.n	801080c <generate_service_topics+0x40>
 8010806:	2000      	movs	r0, #0
 8010808:	b002      	add	sp, #8
 801080a:	bd70      	pop	{r4, r5, r6, pc}
 801080c:	2800      	cmp	r0, #0
 801080e:	dbfa      	blt.n	8010806 <generate_service_topics+0x3a>
 8010810:	4284      	cmp	r4, r0
 8010812:	bfd4      	ite	le
 8010814:	2000      	movle	r0, #0
 8010816:	2001      	movgt	r0, #1
 8010818:	b002      	add	sp, #8
 801081a:	bd70      	pop	{r4, r5, r6, pc}
 801081c:	08020364 	.word	0x08020364
 8010820:	08020370 	.word	0x08020370
 8010824:	08020344 	.word	0x08020344
 8010828:	0802035c 	.word	0x0802035c
 801082c:	0802036c 	.word	0x0802036c

08010830 <generate_service_types>:
 8010830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010834:	4605      	mov	r5, r0
 8010836:	b086      	sub	sp, #24
 8010838:	6880      	ldr	r0, [r0, #8]
 801083a:	460c      	mov	r4, r1
 801083c:	4617      	mov	r7, r2
 801083e:	461e      	mov	r6, r3
 8010840:	4780      	blx	r0
 8010842:	68eb      	ldr	r3, [r5, #12]
 8010844:	4680      	mov	r8, r0
 8010846:	4798      	blx	r3
 8010848:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801084c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8010850:	2300      	movs	r3, #0
 8010852:	7023      	strb	r3, [r4, #0]
 8010854:	6813      	ldr	r3, [r2, #0]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d043      	beq.n	80108e2 <generate_service_types+0xb2>
 801085a:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80108f4 <generate_service_types+0xc4>
 801085e:	4641      	mov	r1, r8
 8010860:	4620      	mov	r0, r4
 8010862:	4c22      	ldr	r4, [pc, #136]	@ (80108ec <generate_service_types+0xbc>)
 8010864:	9405      	str	r4, [sp, #20]
 8010866:	6852      	ldr	r2, [r2, #4]
 8010868:	f8df a090 	ldr.w	sl, [pc, #144]	@ 80108fc <generate_service_types+0xcc>
 801086c:	9204      	str	r2, [sp, #16]
 801086e:	9100      	str	r1, [sp, #0]
 8010870:	e9cd 4802 	strd	r4, r8, [sp, #8]
 8010874:	4a1e      	ldr	r2, [pc, #120]	@ (80108f0 <generate_service_types+0xc0>)
 8010876:	f8cd a004 	str.w	sl, [sp, #4]
 801087a:	4631      	mov	r1, r6
 801087c:	f00c fe66 	bl	801d54c <sniprintf>
 8010880:	2800      	cmp	r0, #0
 8010882:	db20      	blt.n	80108c6 <generate_service_types+0x96>
 8010884:	2300      	movs	r3, #0
 8010886:	703b      	strb	r3, [r7, #0]
 8010888:	f8d9 3000 	ldr.w	r3, [r9]
 801088c:	42b0      	cmp	r0, r6
 801088e:	bfac      	ite	ge
 8010890:	2500      	movge	r5, #0
 8010892:	2501      	movlt	r5, #1
 8010894:	b1f3      	cbz	r3, 80108d4 <generate_service_types+0xa4>
 8010896:	4a17      	ldr	r2, [pc, #92]	@ (80108f4 <generate_service_types+0xc4>)
 8010898:	9405      	str	r4, [sp, #20]
 801089a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801089e:	9200      	str	r2, [sp, #0]
 80108a0:	e9cd 8103 	strd	r8, r1, [sp, #12]
 80108a4:	4a12      	ldr	r2, [pc, #72]	@ (80108f0 <generate_service_types+0xc0>)
 80108a6:	e9cd a401 	strd	sl, r4, [sp, #4]
 80108aa:	4638      	mov	r0, r7
 80108ac:	4631      	mov	r1, r6
 80108ae:	f00c fe4d 	bl	801d54c <sniprintf>
 80108b2:	1e02      	subs	r2, r0, #0
 80108b4:	db11      	blt.n	80108da <generate_service_types+0xaa>
 80108b6:	42b2      	cmp	r2, r6
 80108b8:	bfac      	ite	ge
 80108ba:	2000      	movge	r0, #0
 80108bc:	f005 0001 	andlt.w	r0, r5, #1
 80108c0:	b006      	add	sp, #24
 80108c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108c6:	2300      	movs	r3, #0
 80108c8:	703b      	strb	r3, [r7, #0]
 80108ca:	f8d9 3000 	ldr.w	r3, [r9]
 80108ce:	2500      	movs	r5, #0
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d1e0      	bne.n	8010896 <generate_service_types+0x66>
 80108d4:	4b08      	ldr	r3, [pc, #32]	@ (80108f8 <generate_service_types+0xc8>)
 80108d6:	461a      	mov	r2, r3
 80108d8:	e7de      	b.n	8010898 <generate_service_types+0x68>
 80108da:	2000      	movs	r0, #0
 80108dc:	b006      	add	sp, #24
 80108de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108e2:	4b05      	ldr	r3, [pc, #20]	@ (80108f8 <generate_service_types+0xc8>)
 80108e4:	f8df 800c 	ldr.w	r8, [pc, #12]	@ 80108f4 <generate_service_types+0xc4>
 80108e8:	4619      	mov	r1, r3
 80108ea:	e7b9      	b.n	8010860 <generate_service_types+0x30>
 80108ec:	0802034c 	.word	0x0802034c
 80108f0:	0802033c 	.word	0x0802033c
 80108f4:	08020338 	.word	0x08020338
 80108f8:	080203c4 	.word	0x080203c4
 80108fc:	08020350 	.word	0x08020350

08010900 <generate_type_name>:
 8010900:	b530      	push	{r4, r5, lr}
 8010902:	2300      	movs	r3, #0
 8010904:	700b      	strb	r3, [r1, #0]
 8010906:	6803      	ldr	r3, [r0, #0]
 8010908:	b087      	sub	sp, #28
 801090a:	4614      	mov	r4, r2
 801090c:	b1d3      	cbz	r3, 8010944 <generate_type_name+0x44>
 801090e:	4a0f      	ldr	r2, [pc, #60]	@ (801094c <generate_type_name+0x4c>)
 8010910:	4615      	mov	r5, r2
 8010912:	9203      	str	r2, [sp, #12]
 8010914:	9500      	str	r5, [sp, #0]
 8010916:	6842      	ldr	r2, [r0, #4]
 8010918:	480d      	ldr	r0, [pc, #52]	@ (8010950 <generate_type_name+0x50>)
 801091a:	9001      	str	r0, [sp, #4]
 801091c:	4608      	mov	r0, r1
 801091e:	490d      	ldr	r1, [pc, #52]	@ (8010954 <generate_type_name+0x54>)
 8010920:	9204      	str	r2, [sp, #16]
 8010922:	9105      	str	r1, [sp, #20]
 8010924:	9102      	str	r1, [sp, #8]
 8010926:	4a0c      	ldr	r2, [pc, #48]	@ (8010958 <generate_type_name+0x58>)
 8010928:	4621      	mov	r1, r4
 801092a:	f00c fe0f 	bl	801d54c <sniprintf>
 801092e:	2800      	cmp	r0, #0
 8010930:	db05      	blt.n	801093e <generate_type_name+0x3e>
 8010932:	4284      	cmp	r4, r0
 8010934:	bfd4      	ite	le
 8010936:	2000      	movle	r0, #0
 8010938:	2001      	movgt	r0, #1
 801093a:	b007      	add	sp, #28
 801093c:	bd30      	pop	{r4, r5, pc}
 801093e:	2000      	movs	r0, #0
 8010940:	b007      	add	sp, #28
 8010942:	bd30      	pop	{r4, r5, pc}
 8010944:	4b05      	ldr	r3, [pc, #20]	@ (801095c <generate_type_name+0x5c>)
 8010946:	4a01      	ldr	r2, [pc, #4]	@ (801094c <generate_type_name+0x4c>)
 8010948:	461d      	mov	r5, r3
 801094a:	e7e2      	b.n	8010912 <generate_type_name+0x12>
 801094c:	08020338 	.word	0x08020338
 8010950:	08020350 	.word	0x08020350
 8010954:	0802034c 	.word	0x0802034c
 8010958:	0802033c 	.word	0x0802033c
 801095c:	080203c4 	.word	0x080203c4

08010960 <generate_topic_name>:
 8010960:	b510      	push	{r4, lr}
 8010962:	b082      	sub	sp, #8
 8010964:	4614      	mov	r4, r2
 8010966:	9000      	str	r0, [sp, #0]
 8010968:	4b08      	ldr	r3, [pc, #32]	@ (801098c <generate_topic_name+0x2c>)
 801096a:	4a09      	ldr	r2, [pc, #36]	@ (8010990 <generate_topic_name+0x30>)
 801096c:	4608      	mov	r0, r1
 801096e:	4621      	mov	r1, r4
 8010970:	f00c fdec 	bl	801d54c <sniprintf>
 8010974:	2800      	cmp	r0, #0
 8010976:	db05      	blt.n	8010984 <generate_topic_name+0x24>
 8010978:	4284      	cmp	r4, r0
 801097a:	bfd4      	ite	le
 801097c:	2000      	movle	r0, #0
 801097e:	2001      	movgt	r0, #1
 8010980:	b002      	add	sp, #8
 8010982:	bd10      	pop	{r4, pc}
 8010984:	2000      	movs	r0, #0
 8010986:	b002      	add	sp, #8
 8010988:	bd10      	pop	{r4, pc}
 801098a:	bf00      	nop
 801098c:	08020374 	.word	0x08020374
 8010990:	08020354 	.word	0x08020354

08010994 <is_uxrce_rmw_identifier_valid>:
 8010994:	b510      	push	{r4, lr}
 8010996:	4604      	mov	r4, r0
 8010998:	b140      	cbz	r0, 80109ac <is_uxrce_rmw_identifier_valid+0x18>
 801099a:	f009 fab3 	bl	8019f04 <rmw_get_implementation_identifier>
 801099e:	4601      	mov	r1, r0
 80109a0:	4620      	mov	r0, r4
 80109a2:	f7ef fc3d 	bl	8000220 <strcmp>
 80109a6:	fab0 f080 	clz	r0, r0
 80109aa:	0940      	lsrs	r0, r0, #5
 80109ac:	bd10      	pop	{r4, pc}
 80109ae:	bf00      	nop

080109b0 <get_message_typesupport_handle>:
 80109b0:	6883      	ldr	r3, [r0, #8]
 80109b2:	4718      	bx	r3

080109b4 <get_message_typesupport_handle_function>:
 80109b4:	b510      	push	{r4, lr}
 80109b6:	4604      	mov	r4, r0
 80109b8:	6800      	ldr	r0, [r0, #0]
 80109ba:	f7ef fc31 	bl	8000220 <strcmp>
 80109be:	2800      	cmp	r0, #0
 80109c0:	bf0c      	ite	eq
 80109c2:	4620      	moveq	r0, r4
 80109c4:	2000      	movne	r0, #0
 80109c6:	bd10      	pop	{r4, pc}

080109c8 <get_service_typesupport_handle>:
 80109c8:	6883      	ldr	r3, [r0, #8]
 80109ca:	4718      	bx	r3

080109cc <get_service_typesupport_handle_function>:
 80109cc:	b510      	push	{r4, lr}
 80109ce:	4604      	mov	r4, r0
 80109d0:	6800      	ldr	r0, [r0, #0]
 80109d2:	f7ef fc25 	bl	8000220 <strcmp>
 80109d6:	2800      	cmp	r0, #0
 80109d8:	bf0c      	ite	eq
 80109da:	4620      	moveq	r0, r4
 80109dc:	2000      	movne	r0, #0
 80109de:	bd10      	pop	{r4, pc}

080109e0 <rosidl_runtime_c__String__init>:
 80109e0:	b1b0      	cbz	r0, 8010a10 <rosidl_runtime_c__String__init+0x30>
 80109e2:	b510      	push	{r4, lr}
 80109e4:	b086      	sub	sp, #24
 80109e6:	4604      	mov	r4, r0
 80109e8:	a801      	add	r0, sp, #4
 80109ea:	f7fe fc07 	bl	800f1fc <rcutils_get_default_allocator>
 80109ee:	9b01      	ldr	r3, [sp, #4]
 80109f0:	9905      	ldr	r1, [sp, #20]
 80109f2:	2001      	movs	r0, #1
 80109f4:	4798      	blx	r3
 80109f6:	6020      	str	r0, [r4, #0]
 80109f8:	b138      	cbz	r0, 8010a0a <rosidl_runtime_c__String__init+0x2a>
 80109fa:	2200      	movs	r2, #0
 80109fc:	2301      	movs	r3, #1
 80109fe:	7002      	strb	r2, [r0, #0]
 8010a00:	4618      	mov	r0, r3
 8010a02:	e9c4 2301 	strd	r2, r3, [r4, #4]
 8010a06:	b006      	add	sp, #24
 8010a08:	bd10      	pop	{r4, pc}
 8010a0a:	2000      	movs	r0, #0
 8010a0c:	b006      	add	sp, #24
 8010a0e:	bd10      	pop	{r4, pc}
 8010a10:	2000      	movs	r0, #0
 8010a12:	4770      	bx	lr

08010a14 <rosidl_runtime_c__String__fini>:
 8010a14:	b320      	cbz	r0, 8010a60 <rosidl_runtime_c__String__fini+0x4c>
 8010a16:	b510      	push	{r4, lr}
 8010a18:	6803      	ldr	r3, [r0, #0]
 8010a1a:	b086      	sub	sp, #24
 8010a1c:	4604      	mov	r4, r0
 8010a1e:	b173      	cbz	r3, 8010a3e <rosidl_runtime_c__String__fini+0x2a>
 8010a20:	6883      	ldr	r3, [r0, #8]
 8010a22:	b1f3      	cbz	r3, 8010a62 <rosidl_runtime_c__String__fini+0x4e>
 8010a24:	a801      	add	r0, sp, #4
 8010a26:	f7fe fbe9 	bl	800f1fc <rcutils_get_default_allocator>
 8010a2a:	9b02      	ldr	r3, [sp, #8]
 8010a2c:	9905      	ldr	r1, [sp, #20]
 8010a2e:	6820      	ldr	r0, [r4, #0]
 8010a30:	4798      	blx	r3
 8010a32:	2300      	movs	r3, #0
 8010a34:	e9c4 3300 	strd	r3, r3, [r4]
 8010a38:	60a3      	str	r3, [r4, #8]
 8010a3a:	b006      	add	sp, #24
 8010a3c:	bd10      	pop	{r4, pc}
 8010a3e:	6843      	ldr	r3, [r0, #4]
 8010a40:	b9db      	cbnz	r3, 8010a7a <rosidl_runtime_c__String__fini+0x66>
 8010a42:	6883      	ldr	r3, [r0, #8]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d0f8      	beq.n	8010a3a <rosidl_runtime_c__String__fini+0x26>
 8010a48:	4b12      	ldr	r3, [pc, #72]	@ (8010a94 <rosidl_runtime_c__String__fini+0x80>)
 8010a4a:	4813      	ldr	r0, [pc, #76]	@ (8010a98 <rosidl_runtime_c__String__fini+0x84>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	2251      	movs	r2, #81	@ 0x51
 8010a50:	68db      	ldr	r3, [r3, #12]
 8010a52:	2101      	movs	r1, #1
 8010a54:	f00c fd5a 	bl	801d50c <fwrite>
 8010a58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010a5c:	f00c fa16 	bl	801ce8c <exit>
 8010a60:	4770      	bx	lr
 8010a62:	4b0c      	ldr	r3, [pc, #48]	@ (8010a94 <rosidl_runtime_c__String__fini+0x80>)
 8010a64:	480d      	ldr	r0, [pc, #52]	@ (8010a9c <rosidl_runtime_c__String__fini+0x88>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	224c      	movs	r2, #76	@ 0x4c
 8010a6a:	68db      	ldr	r3, [r3, #12]
 8010a6c:	2101      	movs	r1, #1
 8010a6e:	f00c fd4d 	bl	801d50c <fwrite>
 8010a72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010a76:	f00c fa09 	bl	801ce8c <exit>
 8010a7a:	4b06      	ldr	r3, [pc, #24]	@ (8010a94 <rosidl_runtime_c__String__fini+0x80>)
 8010a7c:	4808      	ldr	r0, [pc, #32]	@ (8010aa0 <rosidl_runtime_c__String__fini+0x8c>)
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	224e      	movs	r2, #78	@ 0x4e
 8010a82:	68db      	ldr	r3, [r3, #12]
 8010a84:	2101      	movs	r1, #1
 8010a86:	f00c fd41 	bl	801d50c <fwrite>
 8010a8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010a8e:	f00c f9fd 	bl	801ce8c <exit>
 8010a92:	bf00      	nop
 8010a94:	2000327c 	.word	0x2000327c
 8010a98:	08020418 	.word	0x08020418
 8010a9c:	08020378 	.word	0x08020378
 8010aa0:	080203c8 	.word	0x080203c8

08010aa4 <rosidl_runtime_c__String__assign>:
 8010aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010aa8:	460c      	mov	r4, r1
 8010aaa:	b086      	sub	sp, #24
 8010aac:	b319      	cbz	r1, 8010af6 <rosidl_runtime_c__String__assign+0x52>
 8010aae:	4605      	mov	r5, r0
 8010ab0:	4608      	mov	r0, r1
 8010ab2:	f7ef fc15 	bl	80002e0 <strlen>
 8010ab6:	4606      	mov	r6, r0
 8010ab8:	b1cd      	cbz	r5, 8010aee <rosidl_runtime_c__String__assign+0x4a>
 8010aba:	a801      	add	r0, sp, #4
 8010abc:	f106 0801 	add.w	r8, r6, #1
 8010ac0:	f7fe fb9c 	bl	800f1fc <rcutils_get_default_allocator>
 8010ac4:	9b03      	ldr	r3, [sp, #12]
 8010ac6:	9a05      	ldr	r2, [sp, #20]
 8010ac8:	6828      	ldr	r0, [r5, #0]
 8010aca:	4641      	mov	r1, r8
 8010acc:	4798      	blx	r3
 8010ace:	4607      	mov	r7, r0
 8010ad0:	b168      	cbz	r0, 8010aee <rosidl_runtime_c__String__assign+0x4a>
 8010ad2:	4621      	mov	r1, r4
 8010ad4:	4632      	mov	r2, r6
 8010ad6:	f00c ff82 	bl	801d9de <memcpy>
 8010ada:	2300      	movs	r3, #0
 8010adc:	2001      	movs	r0, #1
 8010ade:	55bb      	strb	r3, [r7, r6]
 8010ae0:	e9c5 7600 	strd	r7, r6, [r5]
 8010ae4:	f8c5 8008 	str.w	r8, [r5, #8]
 8010ae8:	b006      	add	sp, #24
 8010aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010aee:	2000      	movs	r0, #0
 8010af0:	b006      	add	sp, #24
 8010af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010af6:	4608      	mov	r0, r1
 8010af8:	b006      	add	sp, #24
 8010afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010afe:	bf00      	nop

08010b00 <rosidl_runtime_c__String__copy>:
 8010b00:	b338      	cbz	r0, 8010b52 <rosidl_runtime_c__String__copy+0x52>
 8010b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b06:	e9d0 7500 	ldrd	r7, r5, [r0]
 8010b0a:	b086      	sub	sp, #24
 8010b0c:	460c      	mov	r4, r1
 8010b0e:	b1e1      	cbz	r1, 8010b4a <rosidl_runtime_c__String__copy+0x4a>
 8010b10:	b1df      	cbz	r7, 8010b4a <rosidl_runtime_c__String__copy+0x4a>
 8010b12:	1c6b      	adds	r3, r5, #1
 8010b14:	d019      	beq.n	8010b4a <rosidl_runtime_c__String__copy+0x4a>
 8010b16:	a801      	add	r0, sp, #4
 8010b18:	f105 0801 	add.w	r8, r5, #1
 8010b1c:	f7fe fb6e 	bl	800f1fc <rcutils_get_default_allocator>
 8010b20:	9b03      	ldr	r3, [sp, #12]
 8010b22:	9a05      	ldr	r2, [sp, #20]
 8010b24:	6820      	ldr	r0, [r4, #0]
 8010b26:	4641      	mov	r1, r8
 8010b28:	4798      	blx	r3
 8010b2a:	4606      	mov	r6, r0
 8010b2c:	b168      	cbz	r0, 8010b4a <rosidl_runtime_c__String__copy+0x4a>
 8010b2e:	4639      	mov	r1, r7
 8010b30:	462a      	mov	r2, r5
 8010b32:	f00c ff54 	bl	801d9de <memcpy>
 8010b36:	2300      	movs	r3, #0
 8010b38:	2001      	movs	r0, #1
 8010b3a:	5573      	strb	r3, [r6, r5]
 8010b3c:	e9c4 6500 	strd	r6, r5, [r4]
 8010b40:	f8c4 8008 	str.w	r8, [r4, #8]
 8010b44:	b006      	add	sp, #24
 8010b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b4a:	2000      	movs	r0, #0
 8010b4c:	b006      	add	sp, #24
 8010b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b52:	4770      	bx	lr

08010b54 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8010b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b58:	6805      	ldr	r5, [r0, #0]
 8010b5a:	4604      	mov	r4, r0
 8010b5c:	4628      	mov	r0, r5
 8010b5e:	460e      	mov	r6, r1
 8010b60:	f7ef fb5e 	bl	8000220 <strcmp>
 8010b64:	b308      	cbz	r0, 8010baa <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 8010b66:	4b12      	ldr	r3, [pc, #72]	@ (8010bb0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x5c>)
 8010b68:	4628      	mov	r0, r5
 8010b6a:	6819      	ldr	r1, [r3, #0]
 8010b6c:	f7ef fb58 	bl	8000220 <strcmp>
 8010b70:	4605      	mov	r5, r0
 8010b72:	b980      	cbnz	r0, 8010b96 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x42>
 8010b74:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8010b78:	f8d8 4000 	ldr.w	r4, [r8]
 8010b7c:	b1ac      	cbz	r4, 8010baa <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 8010b7e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8010b82:	3f04      	subs	r7, #4
 8010b84:	f857 0f04 	ldr.w	r0, [r7, #4]!
 8010b88:	4631      	mov	r1, r6
 8010b8a:	f7ef fb49 	bl	8000220 <strcmp>
 8010b8e:	b128      	cbz	r0, 8010b9c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x48>
 8010b90:	3501      	adds	r5, #1
 8010b92:	42a5      	cmp	r5, r4
 8010b94:	d1f6      	bne.n	8010b84 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x30>
 8010b96:	2000      	movs	r0, #0
 8010b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b9c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010ba0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8010ba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ba8:	4718      	bx	r3
 8010baa:	4620      	mov	r0, r4
 8010bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bb0:	200005bc 	.word	0x200005bc

08010bb4 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 8010bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bb8:	6805      	ldr	r5, [r0, #0]
 8010bba:	4604      	mov	r4, r0
 8010bbc:	4628      	mov	r0, r5
 8010bbe:	460e      	mov	r6, r1
 8010bc0:	f7ef fb2e 	bl	8000220 <strcmp>
 8010bc4:	b308      	cbz	r0, 8010c0a <rosidl_typesupport_c__get_service_typesupport_handle_function+0x56>
 8010bc6:	4b12      	ldr	r3, [pc, #72]	@ (8010c10 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x5c>)
 8010bc8:	4628      	mov	r0, r5
 8010bca:	6819      	ldr	r1, [r3, #0]
 8010bcc:	f7ef fb28 	bl	8000220 <strcmp>
 8010bd0:	4605      	mov	r5, r0
 8010bd2:	b980      	cbnz	r0, 8010bf6 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x42>
 8010bd4:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8010bd8:	f8d8 4000 	ldr.w	r4, [r8]
 8010bdc:	b1ac      	cbz	r4, 8010c0a <rosidl_typesupport_c__get_service_typesupport_handle_function+0x56>
 8010bde:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8010be2:	3f04      	subs	r7, #4
 8010be4:	f857 0f04 	ldr.w	r0, [r7, #4]!
 8010be8:	4631      	mov	r1, r6
 8010bea:	f7ef fb19 	bl	8000220 <strcmp>
 8010bee:	b128      	cbz	r0, 8010bfc <rosidl_typesupport_c__get_service_typesupport_handle_function+0x48>
 8010bf0:	3501      	adds	r5, #1
 8010bf2:	42a5      	cmp	r5, r4
 8010bf4:	d1f6      	bne.n	8010be4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x30>
 8010bf6:	2000      	movs	r0, #0
 8010bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bfc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010c00:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8010c04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c08:	4718      	bx	r3
 8010c0a:	4620      	mov	r0, r4
 8010c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c10:	200005bc 	.word	0x200005bc

08010c14 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8010c14:	4b04      	ldr	r3, [pc, #16]	@ (8010c28 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 8010c16:	681a      	ldr	r2, [r3, #0]
 8010c18:	b10a      	cbz	r2, 8010c1e <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 8010c1a:	4803      	ldr	r0, [pc, #12]	@ (8010c28 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 8010c1c:	4770      	bx	lr
 8010c1e:	4a03      	ldr	r2, [pc, #12]	@ (8010c2c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 8010c20:	4801      	ldr	r0, [pc, #4]	@ (8010c28 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 8010c22:	6812      	ldr	r2, [r2, #0]
 8010c24:	601a      	str	r2, [r3, #0]
 8010c26:	4770      	bx	lr
 8010c28:	200005c4 	.word	0x200005c4
 8010c2c:	200005bc 	.word	0x200005bc

08010c30 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8010c30:	4a02      	ldr	r2, [pc, #8]	@ (8010c3c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 8010c32:	4b03      	ldr	r3, [pc, #12]	@ (8010c40 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 8010c34:	6812      	ldr	r2, [r2, #0]
 8010c36:	601a      	str	r2, [r3, #0]
 8010c38:	4770      	bx	lr
 8010c3a:	bf00      	nop
 8010c3c:	200005bc 	.word	0x200005bc
 8010c40:	200005c4 	.word	0x200005c4

08010c44 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 8010c44:	2009      	movs	r0, #9
 8010c46:	4770      	bx	lr

08010c48 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 8010c48:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010c4c:	4770      	bx	lr
 8010c4e:	bf00      	nop

08010c50 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 8010c50:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010c54:	e9d0 0100 	ldrd	r0, r1, [r0]
 8010c58:	e9c2 0100 	strd	r0, r1, [r2]
 8010c5c:	4770      	bx	lr
 8010c5e:	bf00      	nop

08010c60 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 8010c60:	e9d2 2300 	ldrd	r2, r3, [r2]
 8010c64:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010c68:	e9c0 2300 	strd	r2, r3, [r0]
 8010c6c:	4770      	bx	lr
 8010c6e:	bf00      	nop

08010c70 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 8010c70:	f009 bd90 	b.w	801a794 <sensor_msgs__msg__Imu__init>

08010c74 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 8010c74:	f009 bdda 	b.w	801a82c <sensor_msgs__msg__Imu__fini>

08010c78 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 8010c78:	2009      	movs	r0, #9
 8010c7a:	4770      	bx	lr

08010c7c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 8010c7c:	2009      	movs	r0, #9
 8010c7e:	4770      	bx	lr

08010c80 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 8010c80:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010c84:	4770      	bx	lr
 8010c86:	bf00      	nop

08010c88 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 8010c88:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010c8c:	4770      	bx	lr
 8010c8e:	bf00      	nop

08010c90 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 8010c90:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010c94:	4770      	bx	lr
 8010c96:	bf00      	nop

08010c98 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 8010c98:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010c9c:	4770      	bx	lr
 8010c9e:	bf00      	nop

08010ca0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 8010ca0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010ca4:	4770      	bx	lr
 8010ca6:	bf00      	nop

08010ca8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 8010ca8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010cac:	e9d0 0100 	ldrd	r0, r1, [r0]
 8010cb0:	e9c2 0100 	strd	r0, r1, [r2]
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 8010cb8:	e9d2 2300 	ldrd	r2, r3, [r2]
 8010cbc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010cc0:	e9c0 2300 	strd	r2, r3, [r0]
 8010cc4:	4770      	bx	lr
 8010cc6:	bf00      	nop

08010cc8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 8010cc8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010ccc:	e9d0 0100 	ldrd	r0, r1, [r0]
 8010cd0:	e9c2 0100 	strd	r0, r1, [r2]
 8010cd4:	4770      	bx	lr
 8010cd6:	bf00      	nop

08010cd8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 8010cd8:	e9d2 2300 	ldrd	r2, r3, [r2]
 8010cdc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010ce0:	e9c0 2300 	strd	r2, r3, [r0]
 8010ce4:	4770      	bx	lr
 8010ce6:	bf00      	nop

08010ce8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8010ce8:	b510      	push	{r4, lr}
 8010cea:	f000 f9eb 	bl	80110c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010cee:	4c0b      	ldr	r4, [pc, #44]	@ (8010d1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 8010cf0:	60e0      	str	r0, [r4, #12]
 8010cf2:	f000 fe9f 	bl	8011a34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8010cf6:	64a0      	str	r0, [r4, #72]	@ 0x48
 8010cf8:	f7fb f85e 	bl	800bdb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8010cfc:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 8010d00:	f7fb f85a 	bl	800bdb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8010d04:	4b06      	ldr	r3, [pc, #24]	@ (8010d20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 8010d06:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 8010d0a:	681a      	ldr	r2, [r3, #0]
 8010d0c:	b10a      	cbz	r2, 8010d12 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 8010d0e:	4804      	ldr	r0, [pc, #16]	@ (8010d20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 8010d10:	bd10      	pop	{r4, pc}
 8010d12:	4a04      	ldr	r2, [pc, #16]	@ (8010d24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 8010d14:	4802      	ldr	r0, [pc, #8]	@ (8010d20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 8010d16:	6812      	ldr	r2, [r2, #0]
 8010d18:	601a      	str	r2, [r3, #0]
 8010d1a:	bd10      	pop	{r4, pc}
 8010d1c:	200005fc 	.word	0x200005fc
 8010d20:	200005e4 	.word	0x200005e4
 8010d24:	200005c0 	.word	0x200005c0

08010d28 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 8010d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d2a:	4607      	mov	r7, r0
 8010d2c:	460e      	mov	r6, r1
 8010d2e:	f000 f9ed 	bl	801110c <get_serialized_size_std_msgs__msg__Header>
 8010d32:	1834      	adds	r4, r6, r0
 8010d34:	4621      	mov	r1, r4
 8010d36:	f107 0018 	add.w	r0, r7, #24
 8010d3a:	f000 fe89 	bl	8011a50 <get_serialized_size_geometry_msgs__msg__Quaternion>
 8010d3e:	4404      	add	r4, r0
 8010d40:	2108      	movs	r1, #8
 8010d42:	4620      	mov	r0, r4
 8010d44:	f7fd f894 	bl	800de70 <ucdr_alignment>
 8010d48:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 8010d4c:	4425      	add	r5, r4
 8010d4e:	4629      	mov	r1, r5
 8010d50:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8010d54:	f7fb f8a0 	bl	800be98 <get_serialized_size_geometry_msgs__msg__Vector3>
 8010d58:	4405      	add	r5, r0
 8010d5a:	2108      	movs	r1, #8
 8010d5c:	4628      	mov	r0, r5
 8010d5e:	f7fd f887 	bl	800de70 <ucdr_alignment>
 8010d62:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 8010d66:	442c      	add	r4, r5
 8010d68:	4621      	mov	r1, r4
 8010d6a:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8010d6e:	f7fb f893 	bl	800be98 <get_serialized_size_geometry_msgs__msg__Vector3>
 8010d72:	4404      	add	r4, r0
 8010d74:	2108      	movs	r1, #8
 8010d76:	4620      	mov	r0, r4
 8010d78:	f7fd f87a 	bl	800de70 <ucdr_alignment>
 8010d7c:	f1c6 0648 	rsb	r6, r6, #72	@ 0x48
 8010d80:	4430      	add	r0, r6
 8010d82:	4420      	add	r0, r4
 8010d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d86:	bf00      	nop

08010d88 <get_serialized_size_sensor_msgs__msg__Imu>:
 8010d88:	b108      	cbz	r0, 8010d8e <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 8010d8a:	f7ff bfcd 	b.w	8010d28 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 8010d8e:	4770      	bx	lr

08010d90 <_Imu__get_serialized_size>:
 8010d90:	b110      	cbz	r0, 8010d98 <_Imu__get_serialized_size+0x8>
 8010d92:	2100      	movs	r1, #0
 8010d94:	f7ff bfc8 	b.w	8010d28 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 8010d98:	4770      	bx	lr
 8010d9a:	bf00      	nop

08010d9c <_Imu__cdr_deserialize>:
 8010d9c:	b538      	push	{r3, r4, r5, lr}
 8010d9e:	460c      	mov	r4, r1
 8010da0:	b399      	cbz	r1, 8010e0a <_Imu__cdr_deserialize+0x6e>
 8010da2:	4605      	mov	r5, r0
 8010da4:	f000 fa34 	bl	8011210 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010da8:	6843      	ldr	r3, [r0, #4]
 8010daa:	4621      	mov	r1, r4
 8010dac:	68db      	ldr	r3, [r3, #12]
 8010dae:	4628      	mov	r0, r5
 8010db0:	4798      	blx	r3
 8010db2:	f000 ff01 	bl	8011bb8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8010db6:	6843      	ldr	r3, [r0, #4]
 8010db8:	f104 0118 	add.w	r1, r4, #24
 8010dbc:	68db      	ldr	r3, [r3, #12]
 8010dbe:	4628      	mov	r0, r5
 8010dc0:	4798      	blx	r3
 8010dc2:	2209      	movs	r2, #9
 8010dc4:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8010dc8:	4628      	mov	r0, r5
 8010dca:	f001 fd1f 	bl	801280c <ucdr_deserialize_array_double>
 8010dce:	f7fb f8ef 	bl	800bfb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8010dd2:	6843      	ldr	r3, [r0, #4]
 8010dd4:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 8010dd8:	68db      	ldr	r3, [r3, #12]
 8010dda:	4628      	mov	r0, r5
 8010ddc:	4798      	blx	r3
 8010dde:	2209      	movs	r2, #9
 8010de0:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 8010de4:	4628      	mov	r0, r5
 8010de6:	f001 fd11 	bl	801280c <ucdr_deserialize_array_double>
 8010dea:	f7fb f8e1 	bl	800bfb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8010dee:	6843      	ldr	r3, [r0, #4]
 8010df0:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 8010df4:	68db      	ldr	r3, [r3, #12]
 8010df6:	4628      	mov	r0, r5
 8010df8:	4798      	blx	r3
 8010dfa:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 8010dfe:	4628      	mov	r0, r5
 8010e00:	2209      	movs	r2, #9
 8010e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e06:	f001 bd01 	b.w	801280c <ucdr_deserialize_array_double>
 8010e0a:	4608      	mov	r0, r1
 8010e0c:	bd38      	pop	{r3, r4, r5, pc}
 8010e0e:	bf00      	nop

08010e10 <_Imu__cdr_serialize>:
 8010e10:	2800      	cmp	r0, #0
 8010e12:	d035      	beq.n	8010e80 <_Imu__cdr_serialize+0x70>
 8010e14:	b538      	push	{r3, r4, r5, lr}
 8010e16:	4604      	mov	r4, r0
 8010e18:	460d      	mov	r5, r1
 8010e1a:	f000 f9f9 	bl	8011210 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010e1e:	6843      	ldr	r3, [r0, #4]
 8010e20:	4629      	mov	r1, r5
 8010e22:	689b      	ldr	r3, [r3, #8]
 8010e24:	4620      	mov	r0, r4
 8010e26:	4798      	blx	r3
 8010e28:	f000 fec6 	bl	8011bb8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8010e2c:	6843      	ldr	r3, [r0, #4]
 8010e2e:	4629      	mov	r1, r5
 8010e30:	689b      	ldr	r3, [r3, #8]
 8010e32:	f104 0018 	add.w	r0, r4, #24
 8010e36:	4798      	blx	r3
 8010e38:	2209      	movs	r2, #9
 8010e3a:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8010e3e:	4628      	mov	r0, r5
 8010e40:	f001 fc90 	bl	8012764 <ucdr_serialize_array_double>
 8010e44:	f7fb f8b4 	bl	800bfb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8010e48:	6843      	ldr	r3, [r0, #4]
 8010e4a:	4629      	mov	r1, r5
 8010e4c:	689b      	ldr	r3, [r3, #8]
 8010e4e:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8010e52:	4798      	blx	r3
 8010e54:	2209      	movs	r2, #9
 8010e56:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 8010e5a:	4628      	mov	r0, r5
 8010e5c:	f001 fc82 	bl	8012764 <ucdr_serialize_array_double>
 8010e60:	f7fb f8a6 	bl	800bfb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8010e64:	6843      	ldr	r3, [r0, #4]
 8010e66:	4629      	mov	r1, r5
 8010e68:	689b      	ldr	r3, [r3, #8]
 8010e6a:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8010e6e:	4798      	blx	r3
 8010e70:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 8010e74:	4628      	mov	r0, r5
 8010e76:	2209      	movs	r2, #9
 8010e78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e7c:	f001 bc72 	b.w	8012764 <ucdr_serialize_array_double>
 8010e80:	4770      	bx	lr
 8010e82:	bf00      	nop

08010e84 <max_serialized_size_sensor_msgs__msg__Imu>:
 8010e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e86:	2301      	movs	r3, #1
 8010e88:	7003      	strb	r3, [r0, #0]
 8010e8a:	4607      	mov	r7, r0
 8010e8c:	460e      	mov	r6, r1
 8010e8e:	f000 f9b5 	bl	80111fc <max_serialized_size_std_msgs__msg__Header>
 8010e92:	1834      	adds	r4, r6, r0
 8010e94:	4621      	mov	r1, r4
 8010e96:	4638      	mov	r0, r7
 8010e98:	f000 fe6c 	bl	8011b74 <max_serialized_size_geometry_msgs__msg__Quaternion>
 8010e9c:	4404      	add	r4, r0
 8010e9e:	2108      	movs	r1, #8
 8010ea0:	4620      	mov	r0, r4
 8010ea2:	f7fc ffe5 	bl	800de70 <ucdr_alignment>
 8010ea6:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 8010eaa:	4425      	add	r5, r4
 8010eac:	4629      	mov	r1, r5
 8010eae:	4638      	mov	r0, r7
 8010eb0:	f7fb f864 	bl	800bf7c <max_serialized_size_geometry_msgs__msg__Vector3>
 8010eb4:	4405      	add	r5, r0
 8010eb6:	2108      	movs	r1, #8
 8010eb8:	4628      	mov	r0, r5
 8010eba:	f7fc ffd9 	bl	800de70 <ucdr_alignment>
 8010ebe:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 8010ec2:	442c      	add	r4, r5
 8010ec4:	4621      	mov	r1, r4
 8010ec6:	4638      	mov	r0, r7
 8010ec8:	f7fb f858 	bl	800bf7c <max_serialized_size_geometry_msgs__msg__Vector3>
 8010ecc:	4404      	add	r4, r0
 8010ece:	2108      	movs	r1, #8
 8010ed0:	4620      	mov	r0, r4
 8010ed2:	f7fc ffcd 	bl	800de70 <ucdr_alignment>
 8010ed6:	f1c6 0648 	rsb	r6, r6, #72	@ 0x48
 8010eda:	4430      	add	r0, r6
 8010edc:	4420      	add	r0, r4
 8010ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010ee0 <_Imu__max_serialized_size>:
 8010ee0:	b500      	push	{lr}
 8010ee2:	b083      	sub	sp, #12
 8010ee4:	2100      	movs	r1, #0
 8010ee6:	f10d 0007 	add.w	r0, sp, #7
 8010eea:	f7ff ffcb 	bl	8010e84 <max_serialized_size_sensor_msgs__msg__Imu>
 8010eee:	b003      	add	sp, #12
 8010ef0:	f85d fb04 	ldr.w	pc, [sp], #4

08010ef4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8010ef4:	4800      	ldr	r0, [pc, #0]	@ (8010ef8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 8010ef6:	4770      	bx	lr
 8010ef8:	200007a0 	.word	0x200007a0

08010efc <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__size_function__ServiceEventInfo__client_gid>:
 8010efc:	2010      	movs	r0, #16
 8010efe:	4770      	bx	lr

08010f00 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_const_function__ServiceEventInfo__client_gid>:
 8010f00:	4408      	add	r0, r1
 8010f02:	4770      	bx	lr

08010f04 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__fetch_function__ServiceEventInfo__client_gid>:
 8010f04:	5c43      	ldrb	r3, [r0, r1]
 8010f06:	7013      	strb	r3, [r2, #0]
 8010f08:	4770      	bx	lr
 8010f0a:	bf00      	nop

08010f0c <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__assign_function__ServiceEventInfo__client_gid>:
 8010f0c:	7813      	ldrb	r3, [r2, #0]
 8010f0e:	5443      	strb	r3, [r0, r1]
 8010f10:	4770      	bx	lr
 8010f12:	bf00      	nop

08010f14 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_init_function>:
 8010f14:	f009 bd20 	b.w	801a958 <service_msgs__msg__ServiceEventInfo__init>

08010f18 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_fini_function>:
 8010f18:	f009 bd2e 	b.w	801a978 <service_msgs__msg__ServiceEventInfo__fini>

08010f1c <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_function__ServiceEventInfo__client_gid>:
 8010f1c:	4408      	add	r0, r1
 8010f1e:	4770      	bx	lr

08010f20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 8010f20:	b508      	push	{r3, lr}
 8010f22:	f000 fc53 	bl	80117cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010f26:	4b06      	ldr	r3, [pc, #24]	@ (8010f40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 8010f28:	4906      	ldr	r1, [pc, #24]	@ (8010f44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x24>)
 8010f2a:	681a      	ldr	r2, [r3, #0]
 8010f2c:	6488      	str	r0, [r1, #72]	@ 0x48
 8010f2e:	b10a      	cbz	r2, 8010f34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x14>
 8010f30:	4803      	ldr	r0, [pc, #12]	@ (8010f40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 8010f32:	bd08      	pop	{r3, pc}
 8010f34:	4a04      	ldr	r2, [pc, #16]	@ (8010f48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x28>)
 8010f36:	4802      	ldr	r0, [pc, #8]	@ (8010f40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 8010f38:	6812      	ldr	r2, [r2, #0]
 8010f3a:	601a      	str	r2, [r3, #0]
 8010f3c:	bd08      	pop	{r3, pc}
 8010f3e:	bf00      	nop
 8010f40:	200007d4 	.word	0x200007d4
 8010f44:	200007ec 	.word	0x200007ec
 8010f48:	200005c0 	.word	0x200005c0

08010f4c <get_serialized_size_service_msgs__msg__ServiceEventInfo>:
 8010f4c:	b570      	push	{r4, r5, r6, lr}
 8010f4e:	4604      	mov	r4, r0
 8010f50:	b1d0      	cbz	r0, 8010f88 <get_serialized_size_service_msgs__msg__ServiceEventInfo+0x3c>
 8010f52:	460d      	mov	r5, r1
 8010f54:	4628      	mov	r0, r5
 8010f56:	2101      	movs	r1, #1
 8010f58:	f7fc ff8a 	bl	800de70 <ucdr_alignment>
 8010f5c:	1c6e      	adds	r6, r5, #1
 8010f5e:	4406      	add	r6, r0
 8010f60:	4631      	mov	r1, r6
 8010f62:	1d20      	adds	r0, r4, #4
 8010f64:	f000 fc40 	bl	80117e8 <get_serialized_size_builtin_interfaces__msg__Time>
 8010f68:	4406      	add	r6, r0
 8010f6a:	2101      	movs	r1, #1
 8010f6c:	4630      	mov	r0, r6
 8010f6e:	f7fc ff7f 	bl	800de70 <ucdr_alignment>
 8010f72:	f100 0410 	add.w	r4, r0, #16
 8010f76:	4434      	add	r4, r6
 8010f78:	2108      	movs	r1, #8
 8010f7a:	4620      	mov	r0, r4
 8010f7c:	f7fc ff78 	bl	800de70 <ucdr_alignment>
 8010f80:	f1c5 0508 	rsb	r5, r5, #8
 8010f84:	4405      	add	r5, r0
 8010f86:	1928      	adds	r0, r5, r4
 8010f88:	bd70      	pop	{r4, r5, r6, pc}
 8010f8a:	bf00      	nop

08010f8c <_ServiceEventInfo__cdr_deserialize>:
 8010f8c:	b538      	push	{r3, r4, r5, lr}
 8010f8e:	460c      	mov	r4, r1
 8010f90:	b1b1      	cbz	r1, 8010fc0 <_ServiceEventInfo__cdr_deserialize+0x34>
 8010f92:	4605      	mov	r5, r0
 8010f94:	f7fb fb38 	bl	800c608 <ucdr_deserialize_uint8_t>
 8010f98:	f000 fc8a 	bl	80118b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010f9c:	6843      	ldr	r3, [r0, #4]
 8010f9e:	1d21      	adds	r1, r4, #4
 8010fa0:	68db      	ldr	r3, [r3, #12]
 8010fa2:	4628      	mov	r0, r5
 8010fa4:	4798      	blx	r3
 8010fa6:	f104 010c 	add.w	r1, r4, #12
 8010faa:	4628      	mov	r0, r5
 8010fac:	2210      	movs	r2, #16
 8010fae:	f001 fb75 	bl	801269c <ucdr_deserialize_array_uint8_t>
 8010fb2:	f104 0120 	add.w	r1, r4, #32
 8010fb6:	4628      	mov	r0, r5
 8010fb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010fbc:	f7fc bb2c 	b.w	800d618 <ucdr_deserialize_int64_t>
 8010fc0:	4608      	mov	r0, r1
 8010fc2:	bd38      	pop	{r3, r4, r5, pc}

08010fc4 <_ServiceEventInfo__cdr_serialize>:
 8010fc4:	b1e0      	cbz	r0, 8011000 <_ServiceEventInfo__cdr_serialize+0x3c>
 8010fc6:	b570      	push	{r4, r5, r6, lr}
 8010fc8:	4606      	mov	r6, r0
 8010fca:	460d      	mov	r5, r1
 8010fcc:	4604      	mov	r4, r0
 8010fce:	4608      	mov	r0, r1
 8010fd0:	f816 1b04 	ldrb.w	r1, [r6], #4
 8010fd4:	f7fb fb02 	bl	800c5dc <ucdr_serialize_uint8_t>
 8010fd8:	f000 fc6a 	bl	80118b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010fdc:	6843      	ldr	r3, [r0, #4]
 8010fde:	4629      	mov	r1, r5
 8010fe0:	689b      	ldr	r3, [r3, #8]
 8010fe2:	4630      	mov	r0, r6
 8010fe4:	4798      	blx	r3
 8010fe6:	2210      	movs	r2, #16
 8010fe8:	f104 010c 	add.w	r1, r4, #12
 8010fec:	4628      	mov	r0, r5
 8010fee:	f001 faf1 	bl	80125d4 <ucdr_serialize_array_uint8_t>
 8010ff2:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8010ff6:	4628      	mov	r0, r5
 8010ff8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010ffc:	f7fc ba44 	b.w	800d488 <ucdr_serialize_int64_t>
 8011000:	4770      	bx	lr
 8011002:	bf00      	nop

08011004 <_ServiceEventInfo__get_serialized_size>:
 8011004:	b538      	push	{r3, r4, r5, lr}
 8011006:	4604      	mov	r4, r0
 8011008:	b1a8      	cbz	r0, 8011036 <_ServiceEventInfo__get_serialized_size+0x32>
 801100a:	2101      	movs	r1, #1
 801100c:	2000      	movs	r0, #0
 801100e:	f7fc ff2f 	bl	800de70 <ucdr_alignment>
 8011012:	1c45      	adds	r5, r0, #1
 8011014:	4629      	mov	r1, r5
 8011016:	1d20      	adds	r0, r4, #4
 8011018:	f000 fbe6 	bl	80117e8 <get_serialized_size_builtin_interfaces__msg__Time>
 801101c:	182c      	adds	r4, r5, r0
 801101e:	2101      	movs	r1, #1
 8011020:	4620      	mov	r0, r4
 8011022:	f7fc ff25 	bl	800de70 <ucdr_alignment>
 8011026:	3010      	adds	r0, #16
 8011028:	4404      	add	r4, r0
 801102a:	2108      	movs	r1, #8
 801102c:	4620      	mov	r0, r4
 801102e:	f7fc ff1f 	bl	800de70 <ucdr_alignment>
 8011032:	3008      	adds	r0, #8
 8011034:	4420      	add	r0, r4
 8011036:	bd38      	pop	{r3, r4, r5, pc}

08011038 <_ServiceEventInfo__max_serialized_size>:
 8011038:	b530      	push	{r4, r5, lr}
 801103a:	2501      	movs	r5, #1
 801103c:	b083      	sub	sp, #12
 801103e:	4629      	mov	r1, r5
 8011040:	2000      	movs	r0, #0
 8011042:	f88d 5007 	strb.w	r5, [sp, #7]
 8011046:	f7fc ff13 	bl	800de70 <ucdr_alignment>
 801104a:	1944      	adds	r4, r0, r5
 801104c:	4621      	mov	r1, r4
 801104e:	f10d 0007 	add.w	r0, sp, #7
 8011052:	f000 fc19 	bl	8011888 <max_serialized_size_builtin_interfaces__msg__Time>
 8011056:	4404      	add	r4, r0
 8011058:	4629      	mov	r1, r5
 801105a:	4620      	mov	r0, r4
 801105c:	f7fc ff08 	bl	800de70 <ucdr_alignment>
 8011060:	3010      	adds	r0, #16
 8011062:	4404      	add	r4, r0
 8011064:	2108      	movs	r1, #8
 8011066:	4620      	mov	r0, r4
 8011068:	f7fc ff02 	bl	800de70 <ucdr_alignment>
 801106c:	3008      	adds	r0, #8
 801106e:	4420      	add	r0, r4
 8011070:	b003      	add	sp, #12
 8011072:	bd30      	pop	{r4, r5, pc}

08011074 <max_serialized_size_service_msgs__msg__ServiceEventInfo>:
 8011074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011076:	2701      	movs	r7, #1
 8011078:	460c      	mov	r4, r1
 801107a:	4606      	mov	r6, r0
 801107c:	7007      	strb	r7, [r0, #0]
 801107e:	4639      	mov	r1, r7
 8011080:	4620      	mov	r0, r4
 8011082:	f7fc fef5 	bl	800de70 <ucdr_alignment>
 8011086:	19e3      	adds	r3, r4, r7
 8011088:	18c5      	adds	r5, r0, r3
 801108a:	4629      	mov	r1, r5
 801108c:	4630      	mov	r0, r6
 801108e:	f000 fbfb 	bl	8011888 <max_serialized_size_builtin_interfaces__msg__Time>
 8011092:	4405      	add	r5, r0
 8011094:	4639      	mov	r1, r7
 8011096:	4628      	mov	r0, r5
 8011098:	f7fc feea 	bl	800de70 <ucdr_alignment>
 801109c:	3010      	adds	r0, #16
 801109e:	4405      	add	r5, r0
 80110a0:	2108      	movs	r1, #8
 80110a2:	4628      	mov	r0, r5
 80110a4:	f7fc fee4 	bl	800de70 <ucdr_alignment>
 80110a8:	f1c4 0408 	rsb	r4, r4, #8
 80110ac:	4420      	add	r0, r4
 80110ae:	4428      	add	r0, r5
 80110b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110b2:	bf00      	nop

080110b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 80110b4:	4800      	ldr	r0, [pc, #0]	@ (80110b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x4>)
 80110b6:	4770      	bx	lr
 80110b8:	200008dc 	.word	0x200008dc

080110bc <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 80110bc:	f009 bcaa 	b.w	801aa14 <std_msgs__msg__Header__init>

080110c0 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 80110c0:	f009 bcc8 	b.w	801aa54 <std_msgs__msg__Header__fini>

080110c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 80110c4:	b508      	push	{r3, lr}
 80110c6:	f000 fb81 	bl	80117cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80110ca:	4b06      	ldr	r3, [pc, #24]	@ (80110e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80110cc:	4906      	ldr	r1, [pc, #24]	@ (80110e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 80110ce:	681a      	ldr	r2, [r3, #0]
 80110d0:	60c8      	str	r0, [r1, #12]
 80110d2:	b10a      	cbz	r2, 80110d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 80110d4:	4803      	ldr	r0, [pc, #12]	@ (80110e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80110d6:	bd08      	pop	{r3, pc}
 80110d8:	4a04      	ldr	r2, [pc, #16]	@ (80110ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 80110da:	4802      	ldr	r0, [pc, #8]	@ (80110e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80110dc:	6812      	ldr	r2, [r2, #0]
 80110de:	601a      	str	r2, [r3, #0]
 80110e0:	bd08      	pop	{r3, pc}
 80110e2:	bf00      	nop
 80110e4:	20000910 	.word	0x20000910
 80110e8:	20000928 	.word	0x20000928
 80110ec:	200005c0 	.word	0x200005c0

080110f0 <_Header__max_serialized_size>:
 80110f0:	b500      	push	{lr}
 80110f2:	b083      	sub	sp, #12
 80110f4:	2301      	movs	r3, #1
 80110f6:	2100      	movs	r1, #0
 80110f8:	f10d 0007 	add.w	r0, sp, #7
 80110fc:	f88d 3007 	strb.w	r3, [sp, #7]
 8011100:	f000 fbc2 	bl	8011888 <max_serialized_size_builtin_interfaces__msg__Time>
 8011104:	b003      	add	sp, #12
 8011106:	f85d fb04 	ldr.w	pc, [sp], #4
 801110a:	bf00      	nop

0801110c <get_serialized_size_std_msgs__msg__Header>:
 801110c:	b570      	push	{r4, r5, r6, lr}
 801110e:	4605      	mov	r5, r0
 8011110:	b168      	cbz	r0, 801112e <get_serialized_size_std_msgs__msg__Header+0x22>
 8011112:	460c      	mov	r4, r1
 8011114:	f000 fb68 	bl	80117e8 <get_serialized_size_builtin_interfaces__msg__Time>
 8011118:	1826      	adds	r6, r4, r0
 801111a:	2104      	movs	r1, #4
 801111c:	4630      	mov	r0, r6
 801111e:	f7fc fea7 	bl	800de70 <ucdr_alignment>
 8011122:	68eb      	ldr	r3, [r5, #12]
 8011124:	f1c4 0405 	rsb	r4, r4, #5
 8011128:	441c      	add	r4, r3
 801112a:	4404      	add	r4, r0
 801112c:	19a0      	adds	r0, r4, r6
 801112e:	bd70      	pop	{r4, r5, r6, pc}

08011130 <_Header__cdr_deserialize>:
 8011130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011132:	460c      	mov	r4, r1
 8011134:	b083      	sub	sp, #12
 8011136:	b1e1      	cbz	r1, 8011172 <_Header__cdr_deserialize+0x42>
 8011138:	4606      	mov	r6, r0
 801113a:	f000 fbb9 	bl	80118b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801113e:	6843      	ldr	r3, [r0, #4]
 8011140:	4621      	mov	r1, r4
 8011142:	68db      	ldr	r3, [r3, #12]
 8011144:	4630      	mov	r0, r6
 8011146:	4798      	blx	r3
 8011148:	6927      	ldr	r7, [r4, #16]
 801114a:	68a1      	ldr	r1, [r4, #8]
 801114c:	ab01      	add	r3, sp, #4
 801114e:	463a      	mov	r2, r7
 8011150:	4630      	mov	r0, r6
 8011152:	f001 fbc3 	bl	80128dc <ucdr_deserialize_sequence_char>
 8011156:	9b01      	ldr	r3, [sp, #4]
 8011158:	4605      	mov	r5, r0
 801115a:	b920      	cbnz	r0, 8011166 <_Header__cdr_deserialize+0x36>
 801115c:	429f      	cmp	r7, r3
 801115e:	d30c      	bcc.n	801117a <_Header__cdr_deserialize+0x4a>
 8011160:	4628      	mov	r0, r5
 8011162:	b003      	add	sp, #12
 8011164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011166:	b103      	cbz	r3, 801116a <_Header__cdr_deserialize+0x3a>
 8011168:	3b01      	subs	r3, #1
 801116a:	4628      	mov	r0, r5
 801116c:	60e3      	str	r3, [r4, #12]
 801116e:	b003      	add	sp, #12
 8011170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011172:	460d      	mov	r5, r1
 8011174:	4628      	mov	r0, r5
 8011176:	b003      	add	sp, #12
 8011178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801117a:	2101      	movs	r1, #1
 801117c:	75b0      	strb	r0, [r6, #22]
 801117e:	7571      	strb	r1, [r6, #21]
 8011180:	60e0      	str	r0, [r4, #12]
 8011182:	4630      	mov	r0, r6
 8011184:	f7fc fe8a 	bl	800de9c <ucdr_align_to>
 8011188:	4630      	mov	r0, r6
 801118a:	9901      	ldr	r1, [sp, #4]
 801118c:	f7fc febc 	bl	800df08 <ucdr_advance_buffer>
 8011190:	4628      	mov	r0, r5
 8011192:	b003      	add	sp, #12
 8011194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011196:	bf00      	nop

08011198 <_Header__cdr_serialize>:
 8011198:	b1f8      	cbz	r0, 80111da <_Header__cdr_serialize+0x42>
 801119a:	b570      	push	{r4, r5, r6, lr}
 801119c:	4604      	mov	r4, r0
 801119e:	460d      	mov	r5, r1
 80111a0:	f000 fb86 	bl	80118b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80111a4:	6843      	ldr	r3, [r0, #4]
 80111a6:	4629      	mov	r1, r5
 80111a8:	689b      	ldr	r3, [r3, #8]
 80111aa:	4620      	mov	r0, r4
 80111ac:	4798      	blx	r3
 80111ae:	68a6      	ldr	r6, [r4, #8]
 80111b0:	b156      	cbz	r6, 80111c8 <_Header__cdr_serialize+0x30>
 80111b2:	4630      	mov	r0, r6
 80111b4:	f7ef f894 	bl	80002e0 <strlen>
 80111b8:	4631      	mov	r1, r6
 80111ba:	60e0      	str	r0, [r4, #12]
 80111bc:	1c42      	adds	r2, r0, #1
 80111be:	4628      	mov	r0, r5
 80111c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80111c4:	f001 bb78 	b.w	80128b8 <ucdr_serialize_sequence_char>
 80111c8:	4630      	mov	r0, r6
 80111ca:	60e0      	str	r0, [r4, #12]
 80111cc:	4632      	mov	r2, r6
 80111ce:	4631      	mov	r1, r6
 80111d0:	4628      	mov	r0, r5
 80111d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80111d6:	f001 bb6f 	b.w	80128b8 <ucdr_serialize_sequence_char>
 80111da:	4770      	bx	lr

080111dc <_Header__get_serialized_size>:
 80111dc:	b538      	push	{r3, r4, r5, lr}
 80111de:	4604      	mov	r4, r0
 80111e0:	b150      	cbz	r0, 80111f8 <_Header__get_serialized_size+0x1c>
 80111e2:	2100      	movs	r1, #0
 80111e4:	f000 fb00 	bl	80117e8 <get_serialized_size_builtin_interfaces__msg__Time>
 80111e8:	2104      	movs	r1, #4
 80111ea:	4605      	mov	r5, r0
 80111ec:	f7fc fe40 	bl	800de70 <ucdr_alignment>
 80111f0:	68e4      	ldr	r4, [r4, #12]
 80111f2:	3405      	adds	r4, #5
 80111f4:	442c      	add	r4, r5
 80111f6:	4420      	add	r0, r4
 80111f8:	bd38      	pop	{r3, r4, r5, pc}
 80111fa:	bf00      	nop

080111fc <max_serialized_size_std_msgs__msg__Header>:
 80111fc:	b510      	push	{r4, lr}
 80111fe:	2301      	movs	r3, #1
 8011200:	4604      	mov	r4, r0
 8011202:	7003      	strb	r3, [r0, #0]
 8011204:	f000 fb40 	bl	8011888 <max_serialized_size_builtin_interfaces__msg__Time>
 8011208:	2300      	movs	r3, #0
 801120a:	7023      	strb	r3, [r4, #0]
 801120c:	bd10      	pop	{r4, pc}
 801120e:	bf00      	nop

08011210 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8011210:	4800      	ldr	r0, [pc, #0]	@ (8011214 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 8011212:	4770      	bx	lr
 8011214:	200009a0 	.word	0x200009a0

08011218 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Trigger>:
 8011218:	4b04      	ldr	r3, [pc, #16]	@ (801122c <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x14>)
 801121a:	681a      	ldr	r2, [r3, #0]
 801121c:	b10a      	cbz	r2, 8011222 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Trigger+0xa>
 801121e:	4803      	ldr	r0, [pc, #12]	@ (801122c <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x14>)
 8011220:	4770      	bx	lr
 8011222:	4a03      	ldr	r2, [pc, #12]	@ (8011230 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x18>)
 8011224:	4801      	ldr	r0, [pc, #4]	@ (801122c <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x14>)
 8011226:	6812      	ldr	r2, [r2, #0]
 8011228:	601a      	str	r2, [r3, #0]
 801122a:	4770      	bx	lr
 801122c:	200009d4 	.word	0x200009d4
 8011230:	200005bc 	.word	0x200005bc

08011234 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request>:
 8011234:	4b06      	ldr	r3, [pc, #24]	@ (8011250 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x1c>)
 8011236:	4807      	ldr	r0, [pc, #28]	@ (8011254 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x20>)
 8011238:	4907      	ldr	r1, [pc, #28]	@ (8011258 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x24>)
 801123a:	4a08      	ldr	r2, [pc, #32]	@ (801125c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x28>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	b410      	push	{r4}
 8011240:	4c07      	ldr	r4, [pc, #28]	@ (8011260 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x2c>)
 8011242:	6003      	str	r3, [r0, #0]
 8011244:	6023      	str	r3, [r4, #0]
 8011246:	600b      	str	r3, [r1, #0]
 8011248:	f85d 4b04 	ldr.w	r4, [sp], #4
 801124c:	6013      	str	r3, [r2, #0]
 801124e:	4770      	bx	lr
 8011250:	200005bc 	.word	0x200005bc
 8011254:	20000a28 	.word	0x20000a28
 8011258:	20000a08 	.word	0x20000a08
 801125c:	200009d4 	.word	0x200009d4
 8011260:	20000a48 	.word	0x20000a48

08011264 <std_srvs__srv__Trigger_Event__rosidl_typesupport_introspection_c__size_function__Trigger_Event__request>:
 8011264:	6840      	ldr	r0, [r0, #4]
 8011266:	4770      	bx	lr

08011268 <std_srvs__srv__Trigger_Event__rosidl_typesupport_introspection_c__get_const_function__Trigger_Event__request>:
 8011268:	6800      	ldr	r0, [r0, #0]
 801126a:	4408      	add	r0, r1
 801126c:	4770      	bx	lr
 801126e:	bf00      	nop

08011270 <std_srvs__srv__Trigger_Event__rosidl_typesupport_introspection_c__fetch_function__Trigger_Event__request>:
 8011270:	6803      	ldr	r3, [r0, #0]
 8011272:	5c5b      	ldrb	r3, [r3, r1]
 8011274:	7013      	strb	r3, [r2, #0]
 8011276:	4770      	bx	lr

08011278 <std_srvs__srv__Trigger_Event__rosidl_typesupport_introspection_c__assign_function__Trigger_Event__request>:
 8011278:	6803      	ldr	r3, [r0, #0]
 801127a:	7812      	ldrb	r2, [r2, #0]
 801127c:	545a      	strb	r2, [r3, r1]
 801127e:	4770      	bx	lr

08011280 <std_srvs__srv__Trigger_Event__rosidl_typesupport_introspection_c__size_function__Trigger_Event__response>:
 8011280:	6840      	ldr	r0, [r0, #4]
 8011282:	4770      	bx	lr

08011284 <std_srvs__srv__Trigger_Event__rosidl_typesupport_introspection_c__get_const_function__Trigger_Event__response>:
 8011284:	6800      	ldr	r0, [r0, #0]
 8011286:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 801128a:	4770      	bx	lr

0801128c <std_srvs__srv__Trigger_Event__rosidl_typesupport_introspection_c__fetch_function__Trigger_Event__response>:
 801128c:	6803      	ldr	r3, [r0, #0]
 801128e:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8011292:	4694      	mov	ip, r2
 8011294:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8011296:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 801129a:	4770      	bx	lr

0801129c <std_srvs__srv__Trigger_Event__rosidl_typesupport_introspection_c__assign_function__Trigger_Event__response>:
 801129c:	6803      	ldr	r3, [r0, #0]
 801129e:	eb03 1c01 	add.w	ip, r3, r1, lsl #4
 80112a2:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80112a4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80112a8:	4770      	bx	lr
 80112aa:	bf00      	nop

080112ac <std_srvs__srv__Trigger_Request__rosidl_typesupport_introspection_c__Trigger_Request_init_function>:
 80112ac:	f009 bde4 	b.w	801ae78 <std_srvs__srv__Trigger_Request__init>

080112b0 <std_srvs__srv__Trigger_Request__rosidl_typesupport_introspection_c__Trigger_Request_fini_function>:
 80112b0:	f009 bde6 	b.w	801ae80 <std_srvs__srv__Trigger_Request__fini>

080112b4 <std_srvs__srv__Trigger_Response__rosidl_typesupport_introspection_c__Trigger_Response_init_function>:
 80112b4:	f009 be1e 	b.w	801aef4 <std_srvs__srv__Trigger_Response__init>

080112b8 <std_srvs__srv__Trigger_Response__rosidl_typesupport_introspection_c__Trigger_Response_fini_function>:
 80112b8:	f009 be2c 	b.w	801af14 <std_srvs__srv__Trigger_Response__fini>

080112bc <std_srvs__srv__Trigger_Event__rosidl_typesupport_introspection_c__Trigger_Event_init_function>:
 80112bc:	f009 bea4 	b.w	801b008 <std_srvs__srv__Trigger_Event__init>

080112c0 <std_srvs__srv__Trigger_Event__rosidl_typesupport_introspection_c__Trigger_Event_fini_function>:
 80112c0:	f009 bec2 	b.w	801b048 <std_srvs__srv__Trigger_Event__fini>

080112c4 <std_srvs__srv__Trigger_Event__rosidl_typesupport_introspection_c__resize_function__Trigger_Event__request>:
 80112c4:	b538      	push	{r3, r4, r5, lr}
 80112c6:	4604      	mov	r4, r0
 80112c8:	460d      	mov	r5, r1
 80112ca:	f009 fdff 	bl	801aecc <std_srvs__srv__Trigger_Request__Sequence__fini>
 80112ce:	4629      	mov	r1, r5
 80112d0:	4620      	mov	r0, r4
 80112d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80112d6:	f009 bddd 	b.w	801ae94 <std_srvs__srv__Trigger_Request__Sequence__init>
 80112da:	bf00      	nop

080112dc <std_srvs__srv__Trigger_Event__rosidl_typesupport_introspection_c__resize_function__Trigger_Event__response>:
 80112dc:	b538      	push	{r3, r4, r5, lr}
 80112de:	4604      	mov	r4, r0
 80112e0:	460d      	mov	r5, r1
 80112e2:	f009 fe69 	bl	801afb8 <std_srvs__srv__Trigger_Response__Sequence__fini>
 80112e6:	4629      	mov	r1, r5
 80112e8:	4620      	mov	r0, r4
 80112ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80112ee:	f009 be21 	b.w	801af34 <std_srvs__srv__Trigger_Response__Sequence__init>
 80112f2:	bf00      	nop

080112f4 <std_srvs__srv__Trigger_Event__rosidl_typesupport_introspection_c__get_function__Trigger_Event__request>:
 80112f4:	6800      	ldr	r0, [r0, #0]
 80112f6:	4408      	add	r0, r1
 80112f8:	4770      	bx	lr
 80112fa:	bf00      	nop

080112fc <std_srvs__srv__Trigger_Event__rosidl_typesupport_introspection_c__get_function__Trigger_Event__response>:
 80112fc:	6800      	ldr	r0, [r0, #0]
 80112fe:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8011302:	4770      	bx	lr

08011304 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request>:
 8011304:	4b04      	ldr	r3, [pc, #16]	@ (8011318 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x14>)
 8011306:	681a      	ldr	r2, [r3, #0]
 8011308:	b10a      	cbz	r2, 801130e <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0xa>
 801130a:	4803      	ldr	r0, [pc, #12]	@ (8011318 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x14>)
 801130c:	4770      	bx	lr
 801130e:	4a03      	ldr	r2, [pc, #12]	@ (801131c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x18>)
 8011310:	4801      	ldr	r0, [pc, #4]	@ (8011318 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x14>)
 8011312:	6812      	ldr	r2, [r2, #0]
 8011314:	601a      	str	r2, [r3, #0]
 8011316:	4770      	bx	lr
 8011318:	20000c04 	.word	0x20000c04
 801131c:	200005c0 	.word	0x200005c0

08011320 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response>:
 8011320:	4b04      	ldr	r3, [pc, #16]	@ (8011334 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response+0x14>)
 8011322:	681a      	ldr	r2, [r3, #0]
 8011324:	b10a      	cbz	r2, 801132a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response+0xa>
 8011326:	4803      	ldr	r0, [pc, #12]	@ (8011334 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response+0x14>)
 8011328:	4770      	bx	lr
 801132a:	4a03      	ldr	r2, [pc, #12]	@ (8011338 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response+0x18>)
 801132c:	4801      	ldr	r0, [pc, #4]	@ (8011334 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response+0x14>)
 801132e:	6812      	ldr	r2, [r2, #0]
 8011330:	601a      	str	r2, [r3, #0]
 8011332:	4770      	bx	lr
 8011334:	20000b74 	.word	0x20000b74
 8011338:	200005c0 	.word	0x200005c0

0801133c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event>:
 801133c:	b508      	push	{r3, lr}
 801133e:	f7ff fdef 	bl	8010f20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 8011342:	4913      	ldr	r1, [pc, #76]	@ (8011390 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x54>)
 8011344:	4b13      	ldr	r3, [pc, #76]	@ (8011394 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x58>)
 8011346:	680a      	ldr	r2, [r1, #0]
 8011348:	60d8      	str	r0, [r3, #12]
 801134a:	b152      	cbz	r2, 8011362 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x26>
 801134c:	4a12      	ldr	r2, [pc, #72]	@ (8011398 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x5c>)
 801134e:	6499      	str	r1, [r3, #72]	@ 0x48
 8011350:	6811      	ldr	r1, [r2, #0]
 8011352:	b171      	cbz	r1, 8011372 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x36>
 8011354:	4911      	ldr	r1, [pc, #68]	@ (801139c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x60>)
 8011356:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 801135a:	680b      	ldr	r3, [r1, #0]
 801135c:	b193      	cbz	r3, 8011384 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x48>
 801135e:	480f      	ldr	r0, [pc, #60]	@ (801139c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x60>)
 8011360:	bd08      	pop	{r3, pc}
 8011362:	4a0f      	ldr	r2, [pc, #60]	@ (80113a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x64>)
 8011364:	6499      	str	r1, [r3, #72]	@ 0x48
 8011366:	6812      	ldr	r2, [r2, #0]
 8011368:	600a      	str	r2, [r1, #0]
 801136a:	4a0b      	ldr	r2, [pc, #44]	@ (8011398 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x5c>)
 801136c:	6811      	ldr	r1, [r2, #0]
 801136e:	2900      	cmp	r1, #0
 8011370:	d1f0      	bne.n	8011354 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x18>
 8011372:	490b      	ldr	r1, [pc, #44]	@ (80113a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x64>)
 8011374:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8011378:	6809      	ldr	r1, [r1, #0]
 801137a:	6011      	str	r1, [r2, #0]
 801137c:	4907      	ldr	r1, [pc, #28]	@ (801139c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x60>)
 801137e:	680b      	ldr	r3, [r1, #0]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d1ec      	bne.n	801135e <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x22>
 8011384:	4b06      	ldr	r3, [pc, #24]	@ (80113a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x64>)
 8011386:	4805      	ldr	r0, [pc, #20]	@ (801139c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x60>)
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	600b      	str	r3, [r1, #0]
 801138c:	bd08      	pop	{r3, pc}
 801138e:	bf00      	nop
 8011390:	20000c04 	.word	0x20000c04
 8011394:	20000ac0 	.word	0x20000ac0
 8011398:	20000b74 	.word	0x20000b74
 801139c:	20000aa8 	.word	0x20000aa8
 80113a0:	200005c0 	.word	0x200005c0

080113a4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger>:
 80113a4:	4b25      	ldr	r3, [pc, #148]	@ (801143c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x98>)
 80113a6:	681a      	ldr	r2, [r3, #0]
 80113a8:	b510      	push	{r4, lr}
 80113aa:	b142      	cbz	r2, 80113be <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x1a>
 80113ac:	685c      	ldr	r4, [r3, #4]
 80113ae:	68a3      	ldr	r3, [r4, #8]
 80113b0:	b163      	cbz	r3, 80113cc <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x28>
 80113b2:	68e3      	ldr	r3, [r4, #12]
 80113b4:	b193      	cbz	r3, 80113dc <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x38>
 80113b6:	6923      	ldr	r3, [r4, #16]
 80113b8:	b1c3      	cbz	r3, 80113ec <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x48>
 80113ba:	4820      	ldr	r0, [pc, #128]	@ (801143c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x98>)
 80113bc:	bd10      	pop	{r4, pc}
 80113be:	4a20      	ldr	r2, [pc, #128]	@ (8011440 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x9c>)
 80113c0:	685c      	ldr	r4, [r3, #4]
 80113c2:	6812      	ldr	r2, [r2, #0]
 80113c4:	601a      	str	r2, [r3, #0]
 80113c6:	68a3      	ldr	r3, [r4, #8]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d1f2      	bne.n	80113b2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0xe>
 80113cc:	4a1d      	ldr	r2, [pc, #116]	@ (8011444 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0xa0>)
 80113ce:	6813      	ldr	r3, [r2, #0]
 80113d0:	b303      	cbz	r3, 8011414 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x70>
 80113d2:	6853      	ldr	r3, [r2, #4]
 80113d4:	60a3      	str	r3, [r4, #8]
 80113d6:	68e3      	ldr	r3, [r4, #12]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d1ec      	bne.n	80113b6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x12>
 80113dc:	4b1a      	ldr	r3, [pc, #104]	@ (8011448 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0xa4>)
 80113de:	681a      	ldr	r2, [r3, #0]
 80113e0:	b1e2      	cbz	r2, 801141c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x78>
 80113e2:	685b      	ldr	r3, [r3, #4]
 80113e4:	60e3      	str	r3, [r4, #12]
 80113e6:	6923      	ldr	r3, [r4, #16]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d1e6      	bne.n	80113ba <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x16>
 80113ec:	f7ff fd98 	bl	8010f20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 80113f0:	4a14      	ldr	r2, [pc, #80]	@ (8011444 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0xa0>)
 80113f2:	4916      	ldr	r1, [pc, #88]	@ (801144c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0xa8>)
 80113f4:	6813      	ldr	r3, [r2, #0]
 80113f6:	60c8      	str	r0, [r1, #12]
 80113f8:	b1e3      	cbz	r3, 8011434 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x90>
 80113fa:	4b13      	ldr	r3, [pc, #76]	@ (8011448 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0xa4>)
 80113fc:	648a      	str	r2, [r1, #72]	@ 0x48
 80113fe:	681a      	ldr	r2, [r3, #0]
 8011400:	b1a2      	cbz	r2, 801142c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x88>
 8011402:	4a13      	ldr	r2, [pc, #76]	@ (8011450 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0xac>)
 8011404:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 8011408:	6813      	ldr	r3, [r2, #0]
 801140a:	b15b      	cbz	r3, 8011424 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x80>
 801140c:	6853      	ldr	r3, [r2, #4]
 801140e:	480b      	ldr	r0, [pc, #44]	@ (801143c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x98>)
 8011410:	6123      	str	r3, [r4, #16]
 8011412:	bd10      	pop	{r4, pc}
 8011414:	4b0a      	ldr	r3, [pc, #40]	@ (8011440 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x9c>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	6013      	str	r3, [r2, #0]
 801141a:	e7da      	b.n	80113d2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x2e>
 801141c:	4a08      	ldr	r2, [pc, #32]	@ (8011440 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x9c>)
 801141e:	6812      	ldr	r2, [r2, #0]
 8011420:	601a      	str	r2, [r3, #0]
 8011422:	e7de      	b.n	80113e2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x3e>
 8011424:	4b06      	ldr	r3, [pc, #24]	@ (8011440 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x9c>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	6013      	str	r3, [r2, #0]
 801142a:	e7ef      	b.n	801140c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x68>
 801142c:	4a04      	ldr	r2, [pc, #16]	@ (8011440 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x9c>)
 801142e:	6812      	ldr	r2, [r2, #0]
 8011430:	601a      	str	r2, [r3, #0]
 8011432:	e7e6      	b.n	8011402 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x5e>
 8011434:	4b02      	ldr	r3, [pc, #8]	@ (8011440 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x9c>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	6013      	str	r3, [r2, #0]
 801143a:	e7de      	b.n	80113fa <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x56>
 801143c:	20000a68 	.word	0x20000a68
 8011440:	200005c0 	.word	0x200005c0
 8011444:	20000c04 	.word	0x20000c04
 8011448:	20000b74 	.word	0x20000b74
 801144c:	20000ac0 	.word	0x20000ac0
 8011450:	20000aa8 	.word	0x20000aa8

08011454 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request>:
 8011454:	4800      	ldr	r0, [pc, #0]	@ (8011458 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x4>)
 8011456:	4770      	bx	lr
 8011458:	20000cfc 	.word	0x20000cfc

0801145c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response>:
 801145c:	4800      	ldr	r0, [pc, #0]	@ (8011460 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response+0x4>)
 801145e:	4770      	bx	lr
 8011460:	20000cc8 	.word	0x20000cc8

08011464 <_Trigger_Request__max_serialized_size>:
 8011464:	b508      	push	{r3, lr}
 8011466:	2101      	movs	r1, #1
 8011468:	2000      	movs	r0, #0
 801146a:	f7fc fd01 	bl	800de70 <ucdr_alignment>
 801146e:	3001      	adds	r0, #1
 8011470:	bd08      	pop	{r3, pc}
 8011472:	bf00      	nop

08011474 <_Trigger_Request__cdr_deserialize>:
 8011474:	b109      	cbz	r1, 801147a <_Trigger_Request__cdr_deserialize+0x6>
 8011476:	f7fb b8c7 	b.w	800c608 <ucdr_deserialize_uint8_t>
 801147a:	4608      	mov	r0, r1
 801147c:	4770      	bx	lr
 801147e:	bf00      	nop

08011480 <_Trigger_Event__max_serialized_size>:
 8011480:	b500      	push	{lr}
 8011482:	b083      	sub	sp, #12
 8011484:	2301      	movs	r3, #1
 8011486:	2100      	movs	r1, #0
 8011488:	f10d 0007 	add.w	r0, sp, #7
 801148c:	f88d 3007 	strb.w	r3, [sp, #7]
 8011490:	f7ff fdf0 	bl	8011074 <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 8011494:	b003      	add	sp, #12
 8011496:	f85d fb04 	ldr.w	pc, [sp], #4
 801149a:	bf00      	nop

0801149c <_Trigger_Event__cdr_deserialize>:
 801149c:	2900      	cmp	r1, #0
 801149e:	d042      	beq.n	8011526 <_Trigger_Event__cdr_deserialize+0x8a>
 80114a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114a2:	b083      	sub	sp, #12
 80114a4:	4606      	mov	r6, r0
 80114a6:	460d      	mov	r5, r1
 80114a8:	f7ff fe04 	bl	80110b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 80114ac:	6843      	ldr	r3, [r0, #4]
 80114ae:	4629      	mov	r1, r5
 80114b0:	68db      	ldr	r3, [r3, #12]
 80114b2:	4630      	mov	r0, r6
 80114b4:	4798      	blx	r3
 80114b6:	a901      	add	r1, sp, #4
 80114b8:	4630      	mov	r0, r6
 80114ba:	f7fb fbd5 	bl	800cc68 <ucdr_deserialize_uint32_t>
 80114be:	9b01      	ldr	r3, [sp, #4]
 80114c0:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80114c2:	429a      	cmp	r2, r3
 80114c4:	d32c      	bcc.n	8011520 <_Trigger_Event__cdr_deserialize+0x84>
 80114c6:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80114c8:	b173      	cbz	r3, 80114e8 <_Trigger_Event__cdr_deserialize+0x4c>
 80114ca:	4f18      	ldr	r7, [pc, #96]	@ (801152c <_Trigger_Event__cdr_deserialize+0x90>)
 80114cc:	2400      	movs	r4, #0
 80114ce:	e003      	b.n	80114d8 <_Trigger_Event__cdr_deserialize+0x3c>
 80114d0:	9b01      	ldr	r3, [sp, #4]
 80114d2:	3401      	adds	r4, #1
 80114d4:	42a3      	cmp	r3, r4
 80114d6:	d907      	bls.n	80114e8 <_Trigger_Event__cdr_deserialize+0x4c>
 80114d8:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	4421      	add	r1, r4
 80114de:	68db      	ldr	r3, [r3, #12]
 80114e0:	4630      	mov	r0, r6
 80114e2:	4798      	blx	r3
 80114e4:	2800      	cmp	r0, #0
 80114e6:	d1f3      	bne.n	80114d0 <_Trigger_Event__cdr_deserialize+0x34>
 80114e8:	a901      	add	r1, sp, #4
 80114ea:	4630      	mov	r0, r6
 80114ec:	f7fb fbbc 	bl	800cc68 <ucdr_deserialize_uint32_t>
 80114f0:	9b01      	ldr	r3, [sp, #4]
 80114f2:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 80114f4:	429a      	cmp	r2, r3
 80114f6:	d313      	bcc.n	8011520 <_Trigger_Event__cdr_deserialize+0x84>
 80114f8:	63ab      	str	r3, [r5, #56]	@ 0x38
 80114fa:	b17b      	cbz	r3, 801151c <_Trigger_Event__cdr_deserialize+0x80>
 80114fc:	4f0c      	ldr	r7, [pc, #48]	@ (8011530 <_Trigger_Event__cdr_deserialize+0x94>)
 80114fe:	2400      	movs	r4, #0
 8011500:	e002      	b.n	8011508 <_Trigger_Event__cdr_deserialize+0x6c>
 8011502:	9b01      	ldr	r3, [sp, #4]
 8011504:	42a3      	cmp	r3, r4
 8011506:	d909      	bls.n	801151c <_Trigger_Event__cdr_deserialize+0x80>
 8011508:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8011510:	68db      	ldr	r3, [r3, #12]
 8011512:	4630      	mov	r0, r6
 8011514:	4798      	blx	r3
 8011516:	3401      	adds	r4, #1
 8011518:	2800      	cmp	r0, #0
 801151a:	d1f2      	bne.n	8011502 <_Trigger_Event__cdr_deserialize+0x66>
 801151c:	b003      	add	sp, #12
 801151e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011520:	2000      	movs	r0, #0
 8011522:	b003      	add	sp, #12
 8011524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011526:	2000      	movs	r0, #0
 8011528:	4770      	bx	lr
 801152a:	bf00      	nop
 801152c:	20000cfc 	.word	0x20000cfc
 8011530:	20000cc8 	.word	0x20000cc8

08011534 <_Trigger_Event__cdr_serialize>:
 8011534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011538:	2800      	cmp	r0, #0
 801153a:	d038      	beq.n	80115ae <_Trigger_Event__cdr_serialize+0x7a>
 801153c:	460e      	mov	r6, r1
 801153e:	4604      	mov	r4, r0
 8011540:	f7ff fdb8 	bl	80110b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 8011544:	6843      	ldr	r3, [r0, #4]
 8011546:	4631      	mov	r1, r6
 8011548:	689b      	ldr	r3, [r3, #8]
 801154a:	4620      	mov	r0, r4
 801154c:	4798      	blx	r3
 801154e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8011550:	4630      	mov	r0, r6
 8011552:	4639      	mov	r1, r7
 8011554:	f7fb fa5e 	bl	800ca14 <ucdr_serialize_uint32_t>
 8011558:	b180      	cbz	r0, 801157c <_Trigger_Event__cdr_serialize+0x48>
 801155a:	b17f      	cbz	r7, 801157c <_Trigger_Event__cdr_serialize+0x48>
 801155c:	f8df 8058 	ldr.w	r8, [pc, #88]	@ 80115b8 <_Trigger_Event__cdr_serialize+0x84>
 8011560:	2500      	movs	r5, #0
 8011562:	e002      	b.n	801156a <_Trigger_Event__cdr_serialize+0x36>
 8011564:	3501      	adds	r5, #1
 8011566:	42af      	cmp	r7, r5
 8011568:	d008      	beq.n	801157c <_Trigger_Event__cdr_serialize+0x48>
 801156a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801156c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011570:	4631      	mov	r1, r6
 8011572:	689b      	ldr	r3, [r3, #8]
 8011574:	4428      	add	r0, r5
 8011576:	4798      	blx	r3
 8011578:	2800      	cmp	r0, #0
 801157a:	d1f3      	bne.n	8011564 <_Trigger_Event__cdr_serialize+0x30>
 801157c:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
 801157e:	4630      	mov	r0, r6
 8011580:	4639      	mov	r1, r7
 8011582:	f7fb fa47 	bl	800ca14 <ucdr_serialize_uint32_t>
 8011586:	4680      	mov	r8, r0
 8011588:	b188      	cbz	r0, 80115ae <_Trigger_Event__cdr_serialize+0x7a>
 801158a:	b197      	cbz	r7, 80115b2 <_Trigger_Event__cdr_serialize+0x7e>
 801158c:	f8df 902c 	ldr.w	r9, [pc, #44]	@ 80115bc <_Trigger_Event__cdr_serialize+0x88>
 8011590:	2500      	movs	r5, #0
 8011592:	e002      	b.n	801159a <_Trigger_Event__cdr_serialize+0x66>
 8011594:	3501      	adds	r5, #1
 8011596:	42af      	cmp	r7, r5
 8011598:	d00b      	beq.n	80115b2 <_Trigger_Event__cdr_serialize+0x7e>
 801159a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 801159c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80115a0:	4631      	mov	r1, r6
 80115a2:	689b      	ldr	r3, [r3, #8]
 80115a4:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80115a8:	4798      	blx	r3
 80115aa:	2800      	cmp	r0, #0
 80115ac:	d1f2      	bne.n	8011594 <_Trigger_Event__cdr_serialize+0x60>
 80115ae:	f04f 0800 	mov.w	r8, #0
 80115b2:	4640      	mov	r0, r8
 80115b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115b8:	20000cfc 	.word	0x20000cfc
 80115bc:	20000cc8 	.word	0x20000cc8

080115c0 <get_serialized_size_std_srvs__srv__Trigger_Request>:
 80115c0:	b508      	push	{r3, lr}
 80115c2:	b120      	cbz	r0, 80115ce <get_serialized_size_std_srvs__srv__Trigger_Request+0xe>
 80115c4:	4608      	mov	r0, r1
 80115c6:	2101      	movs	r1, #1
 80115c8:	f7fc fc52 	bl	800de70 <ucdr_alignment>
 80115cc:	3001      	adds	r0, #1
 80115ce:	bd08      	pop	{r3, pc}

080115d0 <get_serialized_size_std_srvs__srv__Trigger_Response>:
 80115d0:	b570      	push	{r4, r5, r6, lr}
 80115d2:	4605      	mov	r5, r0
 80115d4:	b180      	cbz	r0, 80115f8 <get_serialized_size_std_srvs__srv__Trigger_Response+0x28>
 80115d6:	460c      	mov	r4, r1
 80115d8:	4620      	mov	r0, r4
 80115da:	2101      	movs	r1, #1
 80115dc:	f7fc fc48 	bl	800de70 <ucdr_alignment>
 80115e0:	1c66      	adds	r6, r4, #1
 80115e2:	4406      	add	r6, r0
 80115e4:	2104      	movs	r1, #4
 80115e6:	4630      	mov	r0, r6
 80115e8:	f7fc fc42 	bl	800de70 <ucdr_alignment>
 80115ec:	68ab      	ldr	r3, [r5, #8]
 80115ee:	f1c4 0405 	rsb	r4, r4, #5
 80115f2:	441c      	add	r4, r3
 80115f4:	4404      	add	r4, r0
 80115f6:	19a0      	adds	r0, r4, r6
 80115f8:	bd70      	pop	{r4, r5, r6, pc}
 80115fa:	bf00      	nop

080115fc <_Trigger_Request__cdr_serialize>:
 80115fc:	460a      	mov	r2, r1
 80115fe:	b118      	cbz	r0, 8011608 <_Trigger_Request__cdr_serialize+0xc>
 8011600:	7801      	ldrb	r1, [r0, #0]
 8011602:	4610      	mov	r0, r2
 8011604:	f7fa bfea 	b.w	800c5dc <ucdr_serialize_uint8_t>
 8011608:	4770      	bx	lr
 801160a:	bf00      	nop

0801160c <_Trigger_Response__cdr_deserialize>:
 801160c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801160e:	460c      	mov	r4, r1
 8011610:	b083      	sub	sp, #12
 8011612:	b1b9      	cbz	r1, 8011644 <_Trigger_Response__cdr_deserialize+0x38>
 8011614:	4606      	mov	r6, r0
 8011616:	f7fa ffc9 	bl	800c5ac <ucdr_deserialize_bool>
 801161a:	68e7      	ldr	r7, [r4, #12]
 801161c:	6861      	ldr	r1, [r4, #4]
 801161e:	ab01      	add	r3, sp, #4
 8011620:	463a      	mov	r2, r7
 8011622:	4630      	mov	r0, r6
 8011624:	f001 f95a 	bl	80128dc <ucdr_deserialize_sequence_char>
 8011628:	9b01      	ldr	r3, [sp, #4]
 801162a:	4605      	mov	r5, r0
 801162c:	b920      	cbnz	r0, 8011638 <_Trigger_Response__cdr_deserialize+0x2c>
 801162e:	429f      	cmp	r7, r3
 8011630:	d30c      	bcc.n	801164c <_Trigger_Response__cdr_deserialize+0x40>
 8011632:	4628      	mov	r0, r5
 8011634:	b003      	add	sp, #12
 8011636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011638:	b103      	cbz	r3, 801163c <_Trigger_Response__cdr_deserialize+0x30>
 801163a:	3b01      	subs	r3, #1
 801163c:	4628      	mov	r0, r5
 801163e:	60a3      	str	r3, [r4, #8]
 8011640:	b003      	add	sp, #12
 8011642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011644:	460d      	mov	r5, r1
 8011646:	4628      	mov	r0, r5
 8011648:	b003      	add	sp, #12
 801164a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801164c:	2101      	movs	r1, #1
 801164e:	75b0      	strb	r0, [r6, #22]
 8011650:	7571      	strb	r1, [r6, #21]
 8011652:	60a0      	str	r0, [r4, #8]
 8011654:	4630      	mov	r0, r6
 8011656:	f7fc fc21 	bl	800de9c <ucdr_align_to>
 801165a:	4630      	mov	r0, r6
 801165c:	9901      	ldr	r1, [sp, #4]
 801165e:	f7fc fc53 	bl	800df08 <ucdr_advance_buffer>
 8011662:	4628      	mov	r0, r5
 8011664:	b003      	add	sp, #12
 8011666:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011668 <_Trigger_Response__cdr_serialize>:
 8011668:	b1e0      	cbz	r0, 80116a4 <_Trigger_Response__cdr_serialize+0x3c>
 801166a:	b570      	push	{r4, r5, r6, lr}
 801166c:	460d      	mov	r5, r1
 801166e:	4604      	mov	r4, r0
 8011670:	7801      	ldrb	r1, [r0, #0]
 8011672:	4628      	mov	r0, r5
 8011674:	f7fa ff84 	bl	800c580 <ucdr_serialize_bool>
 8011678:	6866      	ldr	r6, [r4, #4]
 801167a:	b156      	cbz	r6, 8011692 <_Trigger_Response__cdr_serialize+0x2a>
 801167c:	4630      	mov	r0, r6
 801167e:	f7ee fe2f 	bl	80002e0 <strlen>
 8011682:	4631      	mov	r1, r6
 8011684:	60a0      	str	r0, [r4, #8]
 8011686:	1c42      	adds	r2, r0, #1
 8011688:	4628      	mov	r0, r5
 801168a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801168e:	f001 b913 	b.w	80128b8 <ucdr_serialize_sequence_char>
 8011692:	4630      	mov	r0, r6
 8011694:	60a0      	str	r0, [r4, #8]
 8011696:	4632      	mov	r2, r6
 8011698:	4631      	mov	r1, r6
 801169a:	4628      	mov	r0, r5
 801169c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80116a0:	f001 b90a 	b.w	80128b8 <ucdr_serialize_sequence_char>
 80116a4:	4770      	bx	lr
 80116a6:	bf00      	nop

080116a8 <get_serialized_size_std_srvs__srv__Trigger_Event.part.0>:
 80116a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116ac:	4689      	mov	r9, r1
 80116ae:	4607      	mov	r7, r0
 80116b0:	f7ff fc4c 	bl	8010f4c <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 80116b4:	eb09 0400 	add.w	r4, r9, r0
 80116b8:	2104      	movs	r1, #4
 80116ba:	4620      	mov	r0, r4
 80116bc:	f8d7 802c 	ldr.w	r8, [r7, #44]	@ 0x2c
 80116c0:	f7fc fbd6 	bl	800de70 <ucdr_alignment>
 80116c4:	1d06      	adds	r6, r0, #4
 80116c6:	4426      	add	r6, r4
 80116c8:	f1b8 0f00 	cmp.w	r8, #0
 80116cc:	d017      	beq.n	80116fe <get_serialized_size_std_srvs__srv__Trigger_Event.part.0+0x56>
 80116ce:	f8df a080 	ldr.w	sl, [pc, #128]	@ 8011750 <get_serialized_size_std_srvs__srv__Trigger_Event.part.0+0xa8>
 80116d2:	2500      	movs	r5, #0
 80116d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80116d6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80116da:	4631      	mov	r1, r6
 80116dc:	695b      	ldr	r3, [r3, #20]
 80116de:	4428      	add	r0, r5
 80116e0:	4798      	blx	r3
 80116e2:	2804      	cmp	r0, #4
 80116e4:	4601      	mov	r1, r0
 80116e6:	4604      	mov	r4, r0
 80116e8:	bf28      	it	cs
 80116ea:	2104      	movcs	r1, #4
 80116ec:	4630      	mov	r0, r6
 80116ee:	f7fc fbbf 	bl	800de70 <ucdr_alignment>
 80116f2:	3501      	adds	r5, #1
 80116f4:	4434      	add	r4, r6
 80116f6:	45a8      	cmp	r8, r5
 80116f8:	eb00 0604 	add.w	r6, r0, r4
 80116fc:	d1ea      	bne.n	80116d4 <get_serialized_size_std_srvs__srv__Trigger_Event.part.0+0x2c>
 80116fe:	2104      	movs	r1, #4
 8011700:	4630      	mov	r0, r6
 8011702:	f8d7 8038 	ldr.w	r8, [r7, #56]	@ 0x38
 8011706:	f7fc fbb3 	bl	800de70 <ucdr_alignment>
 801170a:	1985      	adds	r5, r0, r6
 801170c:	3504      	adds	r5, #4
 801170e:	f1b8 0f00 	cmp.w	r8, #0
 8011712:	d018      	beq.n	8011746 <get_serialized_size_std_srvs__srv__Trigger_Event.part.0+0x9e>
 8011714:	f8df a03c 	ldr.w	sl, [pc, #60]	@ 8011754 <get_serialized_size_std_srvs__srv__Trigger_Event.part.0+0xac>
 8011718:	2600      	movs	r6, #0
 801171a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801171c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8011720:	4629      	mov	r1, r5
 8011722:	695b      	ldr	r3, [r3, #20]
 8011724:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 8011728:	4798      	blx	r3
 801172a:	2804      	cmp	r0, #4
 801172c:	4601      	mov	r1, r0
 801172e:	4604      	mov	r4, r0
 8011730:	bf28      	it	cs
 8011732:	2104      	movcs	r1, #4
 8011734:	4628      	mov	r0, r5
 8011736:	f7fc fb9b 	bl	800de70 <ucdr_alignment>
 801173a:	3601      	adds	r6, #1
 801173c:	442c      	add	r4, r5
 801173e:	45b0      	cmp	r8, r6
 8011740:	eb00 0504 	add.w	r5, r0, r4
 8011744:	d1e9      	bne.n	801171a <get_serialized_size_std_srvs__srv__Trigger_Event.part.0+0x72>
 8011746:	eba5 0009 	sub.w	r0, r5, r9
 801174a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801174e:	bf00      	nop
 8011750:	20000cfc 	.word	0x20000cfc
 8011754:	20000cc8 	.word	0x20000cc8

08011758 <get_serialized_size_std_srvs__srv__Trigger_Event>:
 8011758:	b108      	cbz	r0, 801175e <get_serialized_size_std_srvs__srv__Trigger_Event+0x6>
 801175a:	f7ff bfa5 	b.w	80116a8 <get_serialized_size_std_srvs__srv__Trigger_Event.part.0>
 801175e:	4770      	bx	lr

08011760 <_Trigger_Event__get_serialized_size>:
 8011760:	b110      	cbz	r0, 8011768 <_Trigger_Event__get_serialized_size+0x8>
 8011762:	2100      	movs	r1, #0
 8011764:	f7ff bfa0 	b.w	80116a8 <get_serialized_size_std_srvs__srv__Trigger_Event.part.0>
 8011768:	4770      	bx	lr
 801176a:	bf00      	nop

0801176c <_Trigger_Request__get_serialized_size>:
 801176c:	b130      	cbz	r0, 801177c <_Trigger_Request__get_serialized_size+0x10>
 801176e:	b508      	push	{r3, lr}
 8011770:	2101      	movs	r1, #1
 8011772:	2000      	movs	r0, #0
 8011774:	f7fc fb7c 	bl	800de70 <ucdr_alignment>
 8011778:	3001      	adds	r0, #1
 801177a:	bd08      	pop	{r3, pc}
 801177c:	4770      	bx	lr
 801177e:	bf00      	nop

08011780 <_Trigger_Response__max_serialized_size>:
 8011780:	b508      	push	{r3, lr}
 8011782:	2101      	movs	r1, #1
 8011784:	2000      	movs	r0, #0
 8011786:	f7fc fb73 	bl	800de70 <ucdr_alignment>
 801178a:	3001      	adds	r0, #1
 801178c:	bd08      	pop	{r3, pc}
 801178e:	bf00      	nop

08011790 <_Trigger_Response__get_serialized_size>:
 8011790:	b538      	push	{r3, r4, r5, lr}
 8011792:	4604      	mov	r4, r0
 8011794:	b160      	cbz	r0, 80117b0 <_Trigger_Response__get_serialized_size+0x20>
 8011796:	2101      	movs	r1, #1
 8011798:	2000      	movs	r0, #0
 801179a:	f7fc fb69 	bl	800de70 <ucdr_alignment>
 801179e:	1c45      	adds	r5, r0, #1
 80117a0:	2104      	movs	r1, #4
 80117a2:	4628      	mov	r0, r5
 80117a4:	f7fc fb64 	bl	800de70 <ucdr_alignment>
 80117a8:	68a4      	ldr	r4, [r4, #8]
 80117aa:	3405      	adds	r4, #5
 80117ac:	4404      	add	r4, r0
 80117ae:	1960      	adds	r0, r4, r5
 80117b0:	bd38      	pop	{r3, r4, r5, pc}
 80117b2:	bf00      	nop

080117b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event>:
 80117b4:	4800      	ldr	r0, [pc, #0]	@ (80117b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x4>)
 80117b6:	4770      	bx	lr
 80117b8:	20000c94 	.word	0x20000c94

080117bc <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__Trigger>:
 80117bc:	4800      	ldr	r0, [pc, #0]	@ (80117c0 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x4>)
 80117be:	4770      	bx	lr
 80117c0:	20000c58 	.word	0x20000c58

080117c4 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 80117c4:	f009 bd08 	b.w	801b1d8 <builtin_interfaces__msg__Time__init>

080117c8 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 80117c8:	f009 bd0a 	b.w	801b1e0 <builtin_interfaces__msg__Time__fini>

080117cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 80117cc:	4b04      	ldr	r3, [pc, #16]	@ (80117e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80117ce:	681a      	ldr	r2, [r3, #0]
 80117d0:	b10a      	cbz	r2, 80117d6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 80117d2:	4803      	ldr	r0, [pc, #12]	@ (80117e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80117d4:	4770      	bx	lr
 80117d6:	4a03      	ldr	r2, [pc, #12]	@ (80117e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 80117d8:	4801      	ldr	r0, [pc, #4]	@ (80117e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80117da:	6812      	ldr	r2, [r2, #0]
 80117dc:	601a      	str	r2, [r3, #0]
 80117de:	4770      	bx	lr
 80117e0:	20000d30 	.word	0x20000d30
 80117e4:	200005c0 	.word	0x200005c0

080117e8 <get_serialized_size_builtin_interfaces__msg__Time>:
 80117e8:	b180      	cbz	r0, 801180c <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 80117ea:	b538      	push	{r3, r4, r5, lr}
 80117ec:	460d      	mov	r5, r1
 80117ee:	4628      	mov	r0, r5
 80117f0:	2104      	movs	r1, #4
 80117f2:	f7fc fb3d 	bl	800de70 <ucdr_alignment>
 80117f6:	2104      	movs	r1, #4
 80117f8:	186c      	adds	r4, r5, r1
 80117fa:	4404      	add	r4, r0
 80117fc:	4620      	mov	r0, r4
 80117fe:	f7fc fb37 	bl	800de70 <ucdr_alignment>
 8011802:	f1c5 0504 	rsb	r5, r5, #4
 8011806:	4405      	add	r5, r0
 8011808:	1928      	adds	r0, r5, r4
 801180a:	bd38      	pop	{r3, r4, r5, pc}
 801180c:	4770      	bx	lr
 801180e:	bf00      	nop

08011810 <_Time__cdr_deserialize>:
 8011810:	b538      	push	{r3, r4, r5, lr}
 8011812:	460c      	mov	r4, r1
 8011814:	b141      	cbz	r1, 8011828 <_Time__cdr_deserialize+0x18>
 8011816:	4605      	mov	r5, r0
 8011818:	f7fb fda8 	bl	800d36c <ucdr_deserialize_int32_t>
 801181c:	1d21      	adds	r1, r4, #4
 801181e:	4628      	mov	r0, r5
 8011820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011824:	f7fb ba20 	b.w	800cc68 <ucdr_deserialize_uint32_t>
 8011828:	4608      	mov	r0, r1
 801182a:	bd38      	pop	{r3, r4, r5, pc}

0801182c <_Time__cdr_serialize>:
 801182c:	b160      	cbz	r0, 8011848 <_Time__cdr_serialize+0x1c>
 801182e:	b538      	push	{r3, r4, r5, lr}
 8011830:	460d      	mov	r5, r1
 8011832:	4604      	mov	r4, r0
 8011834:	6801      	ldr	r1, [r0, #0]
 8011836:	4628      	mov	r0, r5
 8011838:	f7fb fcfe 	bl	800d238 <ucdr_serialize_int32_t>
 801183c:	6861      	ldr	r1, [r4, #4]
 801183e:	4628      	mov	r0, r5
 8011840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011844:	f7fb b8e6 	b.w	800ca14 <ucdr_serialize_uint32_t>
 8011848:	4770      	bx	lr
 801184a:	bf00      	nop

0801184c <_Time__get_serialized_size>:
 801184c:	b160      	cbz	r0, 8011868 <_Time__get_serialized_size+0x1c>
 801184e:	b510      	push	{r4, lr}
 8011850:	2104      	movs	r1, #4
 8011852:	2000      	movs	r0, #0
 8011854:	f7fc fb0c 	bl	800de70 <ucdr_alignment>
 8011858:	1d04      	adds	r4, r0, #4
 801185a:	2104      	movs	r1, #4
 801185c:	4620      	mov	r0, r4
 801185e:	f7fc fb07 	bl	800de70 <ucdr_alignment>
 8011862:	3004      	adds	r0, #4
 8011864:	4420      	add	r0, r4
 8011866:	bd10      	pop	{r4, pc}
 8011868:	4770      	bx	lr
 801186a:	bf00      	nop

0801186c <_Time__max_serialized_size>:
 801186c:	b510      	push	{r4, lr}
 801186e:	2104      	movs	r1, #4
 8011870:	2000      	movs	r0, #0
 8011872:	f7fc fafd 	bl	800de70 <ucdr_alignment>
 8011876:	1d04      	adds	r4, r0, #4
 8011878:	2104      	movs	r1, #4
 801187a:	4620      	mov	r0, r4
 801187c:	f7fc faf8 	bl	800de70 <ucdr_alignment>
 8011880:	3004      	adds	r0, #4
 8011882:	4420      	add	r0, r4
 8011884:	bd10      	pop	{r4, pc}
 8011886:	bf00      	nop

08011888 <max_serialized_size_builtin_interfaces__msg__Time>:
 8011888:	b538      	push	{r3, r4, r5, lr}
 801188a:	460c      	mov	r4, r1
 801188c:	2301      	movs	r3, #1
 801188e:	7003      	strb	r3, [r0, #0]
 8011890:	2104      	movs	r1, #4
 8011892:	4620      	mov	r0, r4
 8011894:	f7fc faec 	bl	800de70 <ucdr_alignment>
 8011898:	2104      	movs	r1, #4
 801189a:	1863      	adds	r3, r4, r1
 801189c:	18c5      	adds	r5, r0, r3
 801189e:	4628      	mov	r0, r5
 80118a0:	f7fc fae6 	bl	800de70 <ucdr_alignment>
 80118a4:	f1c4 0404 	rsb	r4, r4, #4
 80118a8:	4420      	add	r0, r4
 80118aa:	4428      	add	r0, r5
 80118ac:	bd38      	pop	{r3, r4, r5, pc}
 80118ae:	bf00      	nop

080118b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 80118b0:	4800      	ldr	r0, [pc, #0]	@ (80118b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 80118b2:	4770      	bx	lr
 80118b4:	20000dc0 	.word	0x20000dc0

080118b8 <geometry_msgs__msg__Twist__get_type_hash>:
 80118b8:	4800      	ldr	r0, [pc, #0]	@ (80118bc <geometry_msgs__msg__Twist__get_type_hash+0x4>)
 80118ba:	4770      	bx	lr
 80118bc:	20000df4 	.word	0x20000df4

080118c0 <geometry_msgs__msg__Twist__get_type_description>:
 80118c0:	b510      	push	{r4, lr}
 80118c2:	4c08      	ldr	r4, [pc, #32]	@ (80118e4 <geometry_msgs__msg__Twist__get_type_description+0x24>)
 80118c4:	7820      	ldrb	r0, [r4, #0]
 80118c6:	b108      	cbz	r0, 80118cc <geometry_msgs__msg__Twist__get_type_description+0xc>
 80118c8:	4807      	ldr	r0, [pc, #28]	@ (80118e8 <geometry_msgs__msg__Twist__get_type_description+0x28>)
 80118ca:	bd10      	pop	{r4, pc}
 80118cc:	f000 f868 	bl	80119a0 <geometry_msgs__msg__Vector3__get_type_description>
 80118d0:	300c      	adds	r0, #12
 80118d2:	c807      	ldmia	r0, {r0, r1, r2}
 80118d4:	4b05      	ldr	r3, [pc, #20]	@ (80118ec <geometry_msgs__msg__Twist__get_type_description+0x2c>)
 80118d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80118da:	2301      	movs	r3, #1
 80118dc:	4802      	ldr	r0, [pc, #8]	@ (80118e8 <geometry_msgs__msg__Twist__get_type_description+0x28>)
 80118de:	7023      	strb	r3, [r4, #0]
 80118e0:	bd10      	pop	{r4, pc}
 80118e2:	bf00      	nop
 80118e4:	2000ed59 	.word	0x2000ed59
 80118e8:	08020c14 	.word	0x08020c14
 80118ec:	20000e9c 	.word	0x20000e9c

080118f0 <geometry_msgs__msg__Twist__get_type_description_sources>:
 80118f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118f2:	4e0f      	ldr	r6, [pc, #60]	@ (8011930 <geometry_msgs__msg__Twist__get_type_description_sources+0x40>)
 80118f4:	7837      	ldrb	r7, [r6, #0]
 80118f6:	b10f      	cbz	r7, 80118fc <geometry_msgs__msg__Twist__get_type_description_sources+0xc>
 80118f8:	480e      	ldr	r0, [pc, #56]	@ (8011934 <geometry_msgs__msg__Twist__get_type_description_sources+0x44>)
 80118fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118fc:	4d0e      	ldr	r5, [pc, #56]	@ (8011938 <geometry_msgs__msg__Twist__get_type_description_sources+0x48>)
 80118fe:	4c0f      	ldr	r4, [pc, #60]	@ (801193c <geometry_msgs__msg__Twist__get_type_description_sources+0x4c>)
 8011900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011908:	682b      	ldr	r3, [r5, #0]
 801190a:	f844 3b04 	str.w	r3, [r4], #4
 801190e:	4638      	mov	r0, r7
 8011910:	f000 f852 	bl	80119b8 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 8011914:	2301      	movs	r3, #1
 8011916:	4684      	mov	ip, r0
 8011918:	7033      	strb	r3, [r6, #0]
 801191a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801191e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011920:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011926:	f8dc 3000 	ldr.w	r3, [ip]
 801192a:	4802      	ldr	r0, [pc, #8]	@ (8011934 <geometry_msgs__msg__Twist__get_type_description_sources+0x44>)
 801192c:	6023      	str	r3, [r4, #0]
 801192e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011930:	2000ed58 	.word	0x2000ed58
 8011934:	08020be4 	.word	0x08020be4
 8011938:	08020bf0 	.word	0x08020bf0
 801193c:	2000ed10 	.word	0x2000ed10

08011940 <geometry_msgs__msg__Twist__init>:
 8011940:	b1d8      	cbz	r0, 801197a <geometry_msgs__msg__Twist__init+0x3a>
 8011942:	b538      	push	{r3, r4, r5, lr}
 8011944:	4604      	mov	r4, r0
 8011946:	f000 f857 	bl	80119f8 <geometry_msgs__msg__Vector3__init>
 801194a:	b130      	cbz	r0, 801195a <geometry_msgs__msg__Twist__init+0x1a>
 801194c:	f104 0518 	add.w	r5, r4, #24
 8011950:	4628      	mov	r0, r5
 8011952:	f000 f851 	bl	80119f8 <geometry_msgs__msg__Vector3__init>
 8011956:	b148      	cbz	r0, 801196c <geometry_msgs__msg__Twist__init+0x2c>
 8011958:	bd38      	pop	{r3, r4, r5, pc}
 801195a:	4620      	mov	r0, r4
 801195c:	f000 f850 	bl	8011a00 <geometry_msgs__msg__Vector3__fini>
 8011960:	f104 0018 	add.w	r0, r4, #24
 8011964:	f000 f84c 	bl	8011a00 <geometry_msgs__msg__Vector3__fini>
 8011968:	2000      	movs	r0, #0
 801196a:	bd38      	pop	{r3, r4, r5, pc}
 801196c:	4620      	mov	r0, r4
 801196e:	f000 f847 	bl	8011a00 <geometry_msgs__msg__Vector3__fini>
 8011972:	4628      	mov	r0, r5
 8011974:	f000 f844 	bl	8011a00 <geometry_msgs__msg__Vector3__fini>
 8011978:	e7f6      	b.n	8011968 <geometry_msgs__msg__Twist__init+0x28>
 801197a:	2000      	movs	r0, #0
 801197c:	4770      	bx	lr
 801197e:	bf00      	nop

08011980 <geometry_msgs__msg__Twist__fini>:
 8011980:	b148      	cbz	r0, 8011996 <geometry_msgs__msg__Twist__fini+0x16>
 8011982:	b510      	push	{r4, lr}
 8011984:	4604      	mov	r4, r0
 8011986:	f000 f83b 	bl	8011a00 <geometry_msgs__msg__Vector3__fini>
 801198a:	f104 0018 	add.w	r0, r4, #24
 801198e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011992:	f000 b835 	b.w	8011a00 <geometry_msgs__msg__Vector3__fini>
 8011996:	4770      	bx	lr

08011998 <geometry_msgs__msg__Vector3__get_type_hash>:
 8011998:	4800      	ldr	r0, [pc, #0]	@ (801199c <geometry_msgs__msg__Vector3__get_type_hash+0x4>)
 801199a:	4770      	bx	lr
 801199c:	20000f7c 	.word	0x20000f7c

080119a0 <geometry_msgs__msg__Vector3__get_type_description>:
 80119a0:	4b03      	ldr	r3, [pc, #12]	@ (80119b0 <geometry_msgs__msg__Vector3__get_type_description+0x10>)
 80119a2:	781a      	ldrb	r2, [r3, #0]
 80119a4:	b90a      	cbnz	r2, 80119aa <geometry_msgs__msg__Vector3__get_type_description+0xa>
 80119a6:	2201      	movs	r2, #1
 80119a8:	701a      	strb	r2, [r3, #0]
 80119aa:	4802      	ldr	r0, [pc, #8]	@ (80119b4 <geometry_msgs__msg__Vector3__get_type_description+0x14>)
 80119ac:	4770      	bx	lr
 80119ae:	bf00      	nop
 80119b0:	2000ed81 	.word	0x2000ed81
 80119b4:	08020c68 	.word	0x08020c68

080119b8 <geometry_msgs__msg__Vector3__get_individual_type_description_source>:
 80119b8:	4800      	ldr	r0, [pc, #0]	@ (80119bc <geometry_msgs__msg__Vector3__get_individual_type_description_source+0x4>)
 80119ba:	4770      	bx	lr
 80119bc:	08020c44 	.word	0x08020c44

080119c0 <geometry_msgs__msg__Vector3__get_type_description_sources>:
 80119c0:	4b09      	ldr	r3, [pc, #36]	@ (80119e8 <geometry_msgs__msg__Vector3__get_type_description_sources+0x28>)
 80119c2:	781a      	ldrb	r2, [r3, #0]
 80119c4:	b96a      	cbnz	r2, 80119e2 <geometry_msgs__msg__Vector3__get_type_description_sources+0x22>
 80119c6:	b430      	push	{r4, r5}
 80119c8:	4d08      	ldr	r5, [pc, #32]	@ (80119ec <geometry_msgs__msg__Vector3__get_type_description_sources+0x2c>)
 80119ca:	4c09      	ldr	r4, [pc, #36]	@ (80119f0 <geometry_msgs__msg__Vector3__get_type_description_sources+0x30>)
 80119cc:	2201      	movs	r2, #1
 80119ce:	701a      	strb	r2, [r3, #0]
 80119d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119d8:	682b      	ldr	r3, [r5, #0]
 80119da:	4806      	ldr	r0, [pc, #24]	@ (80119f4 <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 80119dc:	6023      	str	r3, [r4, #0]
 80119de:	bc30      	pop	{r4, r5}
 80119e0:	4770      	bx	lr
 80119e2:	4804      	ldr	r0, [pc, #16]	@ (80119f4 <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 80119e4:	4770      	bx	lr
 80119e6:	bf00      	nop
 80119e8:	2000ed80 	.word	0x2000ed80
 80119ec:	08020c44 	.word	0x08020c44
 80119f0:	2000ed5c 	.word	0x2000ed5c
 80119f4:	08020c38 	.word	0x08020c38

080119f8 <geometry_msgs__msg__Vector3__init>:
 80119f8:	3800      	subs	r0, #0
 80119fa:	bf18      	it	ne
 80119fc:	2001      	movne	r0, #1
 80119fe:	4770      	bx	lr

08011a00 <geometry_msgs__msg__Vector3__fini>:
 8011a00:	4770      	bx	lr
 8011a02:	bf00      	nop

08011a04 <geometry_msgs__msg__Vector3__copy>:
 8011a04:	4603      	mov	r3, r0
 8011a06:	b170      	cbz	r0, 8011a26 <geometry_msgs__msg__Vector3__copy+0x22>
 8011a08:	b171      	cbz	r1, 8011a28 <geometry_msgs__msg__Vector3__copy+0x24>
 8011a0a:	ed90 7b00 	vldr	d7, [r0]
 8011a0e:	ed81 7b00 	vstr	d7, [r1]
 8011a12:	ed93 7b02 	vldr	d7, [r3, #8]
 8011a16:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8011a1a:	ed81 7b02 	vstr	d7, [r1, #8]
 8011a1e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8011a22:	2001      	movs	r0, #1
 8011a24:	4770      	bx	lr
 8011a26:	4770      	bx	lr
 8011a28:	4608      	mov	r0, r1
 8011a2a:	4770      	bx	lr

08011a2c <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 8011a2c:	f009 bc14 	b.w	801b258 <geometry_msgs__msg__Quaternion__init>

08011a30 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 8011a30:	f009 bc26 	b.w	801b280 <geometry_msgs__msg__Quaternion__fini>

08011a34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8011a34:	4b04      	ldr	r3, [pc, #16]	@ (8011a48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8011a36:	681a      	ldr	r2, [r3, #0]
 8011a38:	b10a      	cbz	r2, 8011a3e <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 8011a3a:	4803      	ldr	r0, [pc, #12]	@ (8011a48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8011a3c:	4770      	bx	lr
 8011a3e:	4a03      	ldr	r2, [pc, #12]	@ (8011a4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 8011a40:	4801      	ldr	r0, [pc, #4]	@ (8011a48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8011a42:	6812      	ldr	r2, [r2, #0]
 8011a44:	601a      	str	r2, [r3, #0]
 8011a46:	4770      	bx	lr
 8011a48:	200011a0 	.word	0x200011a0
 8011a4c:	200005c0 	.word	0x200005c0

08011a50 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 8011a50:	b1f0      	cbz	r0, 8011a90 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 8011a52:	b570      	push	{r4, r5, r6, lr}
 8011a54:	460d      	mov	r5, r1
 8011a56:	4628      	mov	r0, r5
 8011a58:	2108      	movs	r1, #8
 8011a5a:	f7fc fa09 	bl	800de70 <ucdr_alignment>
 8011a5e:	2108      	movs	r1, #8
 8011a60:	186c      	adds	r4, r5, r1
 8011a62:	4404      	add	r4, r0
 8011a64:	4620      	mov	r0, r4
 8011a66:	f7fc fa03 	bl	800de70 <ucdr_alignment>
 8011a6a:	f100 0608 	add.w	r6, r0, #8
 8011a6e:	4426      	add	r6, r4
 8011a70:	2108      	movs	r1, #8
 8011a72:	4630      	mov	r0, r6
 8011a74:	f7fc f9fc 	bl	800de70 <ucdr_alignment>
 8011a78:	f100 0408 	add.w	r4, r0, #8
 8011a7c:	4434      	add	r4, r6
 8011a7e:	2108      	movs	r1, #8
 8011a80:	4620      	mov	r0, r4
 8011a82:	f7fc f9f5 	bl	800de70 <ucdr_alignment>
 8011a86:	f1c5 0508 	rsb	r5, r5, #8
 8011a8a:	4405      	add	r5, r0
 8011a8c:	1928      	adds	r0, r5, r4
 8011a8e:	bd70      	pop	{r4, r5, r6, pc}
 8011a90:	4770      	bx	lr
 8011a92:	bf00      	nop

08011a94 <_Quaternion__cdr_deserialize>:
 8011a94:	b538      	push	{r3, r4, r5, lr}
 8011a96:	460c      	mov	r4, r1
 8011a98:	b199      	cbz	r1, 8011ac2 <_Quaternion__cdr_deserialize+0x2e>
 8011a9a:	4605      	mov	r5, r0
 8011a9c:	f7fc f80a 	bl	800dab4 <ucdr_deserialize_double>
 8011aa0:	f104 0108 	add.w	r1, r4, #8
 8011aa4:	4628      	mov	r0, r5
 8011aa6:	f7fc f805 	bl	800dab4 <ucdr_deserialize_double>
 8011aaa:	f104 0110 	add.w	r1, r4, #16
 8011aae:	4628      	mov	r0, r5
 8011ab0:	f7fc f800 	bl	800dab4 <ucdr_deserialize_double>
 8011ab4:	f104 0118 	add.w	r1, r4, #24
 8011ab8:	4628      	mov	r0, r5
 8011aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011abe:	f7fb bff9 	b.w	800dab4 <ucdr_deserialize_double>
 8011ac2:	4608      	mov	r0, r1
 8011ac4:	bd38      	pop	{r3, r4, r5, pc}
 8011ac6:	bf00      	nop

08011ac8 <_Quaternion__cdr_serialize>:
 8011ac8:	b1c0      	cbz	r0, 8011afc <_Quaternion__cdr_serialize+0x34>
 8011aca:	b538      	push	{r3, r4, r5, lr}
 8011acc:	ed90 0b00 	vldr	d0, [r0]
 8011ad0:	460d      	mov	r5, r1
 8011ad2:	4604      	mov	r4, r0
 8011ad4:	4608      	mov	r0, r1
 8011ad6:	f7fb fe5d 	bl	800d794 <ucdr_serialize_double>
 8011ada:	ed94 0b02 	vldr	d0, [r4, #8]
 8011ade:	4628      	mov	r0, r5
 8011ae0:	f7fb fe58 	bl	800d794 <ucdr_serialize_double>
 8011ae4:	ed94 0b04 	vldr	d0, [r4, #16]
 8011ae8:	4628      	mov	r0, r5
 8011aea:	f7fb fe53 	bl	800d794 <ucdr_serialize_double>
 8011aee:	ed94 0b06 	vldr	d0, [r4, #24]
 8011af2:	4628      	mov	r0, r5
 8011af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011af8:	f7fb be4c 	b.w	800d794 <ucdr_serialize_double>
 8011afc:	4770      	bx	lr
 8011afe:	bf00      	nop

08011b00 <_Quaternion__get_serialized_size>:
 8011b00:	b1d8      	cbz	r0, 8011b3a <_Quaternion__get_serialized_size+0x3a>
 8011b02:	b538      	push	{r3, r4, r5, lr}
 8011b04:	2108      	movs	r1, #8
 8011b06:	2000      	movs	r0, #0
 8011b08:	f7fc f9b2 	bl	800de70 <ucdr_alignment>
 8011b0c:	f100 0408 	add.w	r4, r0, #8
 8011b10:	2108      	movs	r1, #8
 8011b12:	4620      	mov	r0, r4
 8011b14:	f7fc f9ac 	bl	800de70 <ucdr_alignment>
 8011b18:	f100 0508 	add.w	r5, r0, #8
 8011b1c:	4425      	add	r5, r4
 8011b1e:	2108      	movs	r1, #8
 8011b20:	4628      	mov	r0, r5
 8011b22:	f7fc f9a5 	bl	800de70 <ucdr_alignment>
 8011b26:	f100 0408 	add.w	r4, r0, #8
 8011b2a:	442c      	add	r4, r5
 8011b2c:	2108      	movs	r1, #8
 8011b2e:	4620      	mov	r0, r4
 8011b30:	f7fc f99e 	bl	800de70 <ucdr_alignment>
 8011b34:	3008      	adds	r0, #8
 8011b36:	4420      	add	r0, r4
 8011b38:	bd38      	pop	{r3, r4, r5, pc}
 8011b3a:	4770      	bx	lr

08011b3c <_Quaternion__max_serialized_size>:
 8011b3c:	b538      	push	{r3, r4, r5, lr}
 8011b3e:	2108      	movs	r1, #8
 8011b40:	2000      	movs	r0, #0
 8011b42:	f7fc f995 	bl	800de70 <ucdr_alignment>
 8011b46:	f100 0408 	add.w	r4, r0, #8
 8011b4a:	2108      	movs	r1, #8
 8011b4c:	4620      	mov	r0, r4
 8011b4e:	f7fc f98f 	bl	800de70 <ucdr_alignment>
 8011b52:	f100 0508 	add.w	r5, r0, #8
 8011b56:	4425      	add	r5, r4
 8011b58:	2108      	movs	r1, #8
 8011b5a:	4628      	mov	r0, r5
 8011b5c:	f7fc f988 	bl	800de70 <ucdr_alignment>
 8011b60:	f100 0408 	add.w	r4, r0, #8
 8011b64:	442c      	add	r4, r5
 8011b66:	2108      	movs	r1, #8
 8011b68:	4620      	mov	r0, r4
 8011b6a:	f7fc f981 	bl	800de70 <ucdr_alignment>
 8011b6e:	3008      	adds	r0, #8
 8011b70:	4420      	add	r0, r4
 8011b72:	bd38      	pop	{r3, r4, r5, pc}

08011b74 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 8011b74:	b570      	push	{r4, r5, r6, lr}
 8011b76:	2301      	movs	r3, #1
 8011b78:	460c      	mov	r4, r1
 8011b7a:	7003      	strb	r3, [r0, #0]
 8011b7c:	2108      	movs	r1, #8
 8011b7e:	4620      	mov	r0, r4
 8011b80:	f7fc f976 	bl	800de70 <ucdr_alignment>
 8011b84:	2108      	movs	r1, #8
 8011b86:	1863      	adds	r3, r4, r1
 8011b88:	18c5      	adds	r5, r0, r3
 8011b8a:	4628      	mov	r0, r5
 8011b8c:	f7fc f970 	bl	800de70 <ucdr_alignment>
 8011b90:	f100 0608 	add.w	r6, r0, #8
 8011b94:	442e      	add	r6, r5
 8011b96:	2108      	movs	r1, #8
 8011b98:	4630      	mov	r0, r6
 8011b9a:	f7fc f969 	bl	800de70 <ucdr_alignment>
 8011b9e:	f100 0508 	add.w	r5, r0, #8
 8011ba2:	4435      	add	r5, r6
 8011ba4:	2108      	movs	r1, #8
 8011ba6:	4628      	mov	r0, r5
 8011ba8:	f7fc f962 	bl	800de70 <ucdr_alignment>
 8011bac:	f1c4 0408 	rsb	r4, r4, #8
 8011bb0:	4420      	add	r0, r4
 8011bb2:	4428      	add	r0, r5
 8011bb4:	bd70      	pop	{r4, r5, r6, pc}
 8011bb6:	bf00      	nop

08011bb8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8011bb8:	4800      	ldr	r0, [pc, #0]	@ (8011bbc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 8011bba:	4770      	bx	lr
 8011bbc:	200012a8 	.word	0x200012a8

08011bc0 <imu_interfaces__srv__ImuCalibration_Request__get_type_description.part.0>:
 8011bc0:	b510      	push	{r4, lr}
 8011bc2:	2000      	movs	r0, #0
 8011bc4:	f009 fadc 	bl	801b180 <builtin_interfaces__msg__Time__get_type_description>
 8011bc8:	300c      	adds	r0, #12
 8011bca:	c807      	ldmia	r0, {r0, r1, r2}
 8011bcc:	4c15      	ldr	r4, [pc, #84]	@ (8011c24 <imu_interfaces__srv__ImuCalibration_Request__get_type_description.part.0+0x64>)
 8011bce:	f104 030c 	add.w	r3, r4, #12
 8011bd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011bd6:	2000      	movs	r0, #0
 8011bd8:	f009 fb12 	bl	801b200 <geometry_msgs__msg__Quaternion__get_type_description>
 8011bdc:	300c      	adds	r0, #12
 8011bde:	c807      	ldmia	r0, {r0, r1, r2}
 8011be0:	f104 0324 	add.w	r3, r4, #36	@ 0x24
 8011be4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011be8:	2000      	movs	r0, #0
 8011bea:	f7ff fed9 	bl	80119a0 <geometry_msgs__msg__Vector3__get_type_description>
 8011bee:	300c      	adds	r0, #12
 8011bf0:	c807      	ldmia	r0, {r0, r1, r2}
 8011bf2:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 8011bf6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011bfa:	2000      	movs	r0, #0
 8011bfc:	f008 fd3e 	bl	801a67c <sensor_msgs__msg__Imu__get_type_description>
 8011c00:	300c      	adds	r0, #12
 8011c02:	c807      	ldmia	r0, {r0, r1, r2}
 8011c04:	f104 0354 	add.w	r3, r4, #84	@ 0x54
 8011c08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011c0c:	2000      	movs	r0, #0
 8011c0e:	f008 febd 	bl	801a98c <std_msgs__msg__Header__get_type_description>
 8011c12:	300c      	adds	r0, #12
 8011c14:	c807      	ldmia	r0, {r0, r1, r2}
 8011c16:	4b04      	ldr	r3, [pc, #16]	@ (8011c28 <imu_interfaces__srv__ImuCalibration_Request__get_type_description.part.0+0x68>)
 8011c18:	346c      	adds	r4, #108	@ 0x6c
 8011c1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011c1e:	2201      	movs	r2, #1
 8011c20:	701a      	strb	r2, [r3, #0]
 8011c22:	bd10      	pop	{r4, pc}
 8011c24:	200015b0 	.word	0x200015b0
 8011c28:	2000f13b 	.word	0x2000f13b

08011c2c <imu_interfaces__srv__ImuCalibration_Event__get_type_description.part.0>:
 8011c2c:	b510      	push	{r4, lr}
 8011c2e:	2000      	movs	r0, #0
 8011c30:	f009 faa6 	bl	801b180 <builtin_interfaces__msg__Time__get_type_description>
 8011c34:	300c      	adds	r0, #12
 8011c36:	c807      	ldmia	r0, {r0, r1, r2}
 8011c38:	4c24      	ldr	r4, [pc, #144]	@ (8011ccc <imu_interfaces__srv__ImuCalibration_Event__get_type_description.part.0+0xa0>)
 8011c3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011c3e:	2000      	movs	r0, #0
 8011c40:	f009 fade 	bl	801b200 <geometry_msgs__msg__Quaternion__get_type_description>
 8011c44:	300c      	adds	r0, #12
 8011c46:	c807      	ldmia	r0, {r0, r1, r2}
 8011c48:	f104 0318 	add.w	r3, r4, #24
 8011c4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011c50:	2000      	movs	r0, #0
 8011c52:	f7ff fea5 	bl	80119a0 <geometry_msgs__msg__Vector3__get_type_description>
 8011c56:	300c      	adds	r0, #12
 8011c58:	c807      	ldmia	r0, {r0, r1, r2}
 8011c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8011cd0 <imu_interfaces__srv__ImuCalibration_Event__get_type_description.part.0+0xa4>)
 8011c5c:	781b      	ldrb	r3, [r3, #0]
 8011c5e:	3430      	adds	r4, #48	@ 0x30
 8011c60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011c64:	b373      	cbz	r3, 8011cc4 <imu_interfaces__srv__ImuCalibration_Event__get_type_description.part.0+0x98>
 8011c66:	4b1b      	ldr	r3, [pc, #108]	@ (8011cd4 <imu_interfaces__srv__ImuCalibration_Event__get_type_description.part.0+0xa8>)
 8011c68:	4c1b      	ldr	r4, [pc, #108]	@ (8011cd8 <imu_interfaces__srv__ImuCalibration_Event__get_type_description.part.0+0xac>)
 8011c6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8011cdc <imu_interfaces__srv__ImuCalibration_Event__get_type_description.part.0+0xb0>)
 8011c70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011c74:	7823      	ldrb	r3, [r4, #0]
 8011c76:	b90b      	cbnz	r3, 8011c7c <imu_interfaces__srv__ImuCalibration_Event__get_type_description.part.0+0x50>
 8011c78:	2301      	movs	r3, #1
 8011c7a:	7023      	strb	r3, [r4, #0]
 8011c7c:	4b18      	ldr	r3, [pc, #96]	@ (8011ce0 <imu_interfaces__srv__ImuCalibration_Event__get_type_description.part.0+0xb4>)
 8011c7e:	4c19      	ldr	r4, [pc, #100]	@ (8011ce4 <imu_interfaces__srv__ImuCalibration_Event__get_type_description.part.0+0xb8>)
 8011c80:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011c84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011c88:	2000      	movs	r0, #0
 8011c8a:	f008 fcf7 	bl	801a67c <sensor_msgs__msg__Imu__get_type_description>
 8011c8e:	300c      	adds	r0, #12
 8011c90:	c807      	ldmia	r0, {r0, r1, r2}
 8011c92:	f104 0318 	add.w	r3, r4, #24
 8011c96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011c9a:	2000      	movs	r0, #0
 8011c9c:	f008 fe18 	bl	801a8d0 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8011ca0:	300c      	adds	r0, #12
 8011ca2:	c807      	ldmia	r0, {r0, r1, r2}
 8011ca4:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8011ca8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011cac:	2000      	movs	r0, #0
 8011cae:	f008 fe6d 	bl	801a98c <std_msgs__msg__Header__get_type_description>
 8011cb2:	300c      	adds	r0, #12
 8011cb4:	c807      	ldmia	r0, {r0, r1, r2}
 8011cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8011ce8 <imu_interfaces__srv__ImuCalibration_Event__get_type_description.part.0+0xbc>)
 8011cb8:	3448      	adds	r4, #72	@ 0x48
 8011cba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011cbe:	2201      	movs	r2, #1
 8011cc0:	701a      	strb	r2, [r3, #0]
 8011cc2:	bd10      	pop	{r4, pc}
 8011cc4:	f7ff ff7c 	bl	8011bc0 <imu_interfaces__srv__ImuCalibration_Request__get_type_description.part.0>
 8011cc8:	e7cd      	b.n	8011c66 <imu_interfaces__srv__ImuCalibration_Event__get_type_description.part.0+0x3a>
 8011cca:	bf00      	nop
 8011ccc:	200013b4 	.word	0x200013b4
 8011cd0:	2000f13b 	.word	0x2000f13b
 8011cd4:	08020dd0 	.word	0x08020dd0
 8011cd8:	2000f13a 	.word	0x2000f13a
 8011cdc:	200013fc 	.word	0x200013fc
 8011ce0:	08020dac 	.word	0x08020dac
 8011ce4:	20001414 	.word	0x20001414
 8011ce8:	2000f139 	.word	0x2000f139

08011cec <imu_interfaces__srv__ImuCalibration__get_type_hash>:
 8011cec:	4800      	ldr	r0, [pc, #0]	@ (8011cf0 <imu_interfaces__srv__ImuCalibration__get_type_hash+0x4>)
 8011cee:	4770      	bx	lr
 8011cf0:	20001348 	.word	0x20001348

08011cf4 <imu_interfaces__srv__ImuCalibration_Request__get_type_hash>:
 8011cf4:	4800      	ldr	r0, [pc, #0]	@ (8011cf8 <imu_interfaces__srv__ImuCalibration_Request__get_type_hash+0x4>)
 8011cf6:	4770      	bx	lr
 8011cf8:	20001324 	.word	0x20001324

08011cfc <imu_interfaces__srv__ImuCalibration_Response__get_type_hash>:
 8011cfc:	4800      	ldr	r0, [pc, #0]	@ (8011d00 <imu_interfaces__srv__ImuCalibration_Response__get_type_hash+0x4>)
 8011cfe:	4770      	bx	lr
 8011d00:	20001300 	.word	0x20001300

08011d04 <imu_interfaces__srv__ImuCalibration_Event__get_type_hash>:
 8011d04:	4800      	ldr	r0, [pc, #0]	@ (8011d08 <imu_interfaces__srv__ImuCalibration_Event__get_type_hash+0x4>)
 8011d06:	4770      	bx	lr
 8011d08:	200012dc 	.word	0x200012dc

08011d0c <imu_interfaces__srv__ImuCalibration__get_type_description>:
 8011d0c:	b570      	push	{r4, r5, r6, lr}
 8011d0e:	4e30      	ldr	r6, [pc, #192]	@ (8011dd0 <imu_interfaces__srv__ImuCalibration__get_type_description+0xc4>)
 8011d10:	7835      	ldrb	r5, [r6, #0]
 8011d12:	b10d      	cbz	r5, 8011d18 <imu_interfaces__srv__ImuCalibration__get_type_description+0xc>
 8011d14:	482f      	ldr	r0, [pc, #188]	@ (8011dd4 <imu_interfaces__srv__ImuCalibration__get_type_description+0xc8>)
 8011d16:	bd70      	pop	{r4, r5, r6, pc}
 8011d18:	4628      	mov	r0, r5
 8011d1a:	f009 fa31 	bl	801b180 <builtin_interfaces__msg__Time__get_type_description>
 8011d1e:	300c      	adds	r0, #12
 8011d20:	c807      	ldmia	r0, {r0, r1, r2}
 8011d22:	4c2d      	ldr	r4, [pc, #180]	@ (8011dd8 <imu_interfaces__srv__ImuCalibration__get_type_description+0xcc>)
 8011d24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011d28:	4628      	mov	r0, r5
 8011d2a:	f009 fa69 	bl	801b200 <geometry_msgs__msg__Quaternion__get_type_description>
 8011d2e:	300c      	adds	r0, #12
 8011d30:	c807      	ldmia	r0, {r0, r1, r2}
 8011d32:	f104 0318 	add.w	r3, r4, #24
 8011d36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011d3a:	4628      	mov	r0, r5
 8011d3c:	f7ff fe30 	bl	80119a0 <geometry_msgs__msg__Vector3__get_type_description>
 8011d40:	300c      	adds	r0, #12
 8011d42:	c807      	ldmia	r0, {r0, r1, r2}
 8011d44:	4b25      	ldr	r3, [pc, #148]	@ (8011ddc <imu_interfaces__srv__ImuCalibration__get_type_description+0xd0>)
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	3430      	adds	r4, #48	@ 0x30
 8011d4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d03a      	beq.n	8011dc8 <imu_interfaces__srv__ImuCalibration__get_type_description+0xbc>
 8011d52:	4b23      	ldr	r3, [pc, #140]	@ (8011de0 <imu_interfaces__srv__ImuCalibration__get_type_description+0xd4>)
 8011d54:	4c23      	ldr	r4, [pc, #140]	@ (8011de4 <imu_interfaces__srv__ImuCalibration__get_type_description+0xd8>)
 8011d56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011d5a:	4b23      	ldr	r3, [pc, #140]	@ (8011de8 <imu_interfaces__srv__ImuCalibration__get_type_description+0xdc>)
 8011d5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011d60:	7823      	ldrb	r3, [r4, #0]
 8011d62:	b373      	cbz	r3, 8011dc2 <imu_interfaces__srv__ImuCalibration__get_type_description+0xb6>
 8011d64:	4b21      	ldr	r3, [pc, #132]	@ (8011dec <imu_interfaces__srv__ImuCalibration__get_type_description+0xe0>)
 8011d66:	4c22      	ldr	r4, [pc, #136]	@ (8011df0 <imu_interfaces__srv__ImuCalibration__get_type_description+0xe4>)
 8011d68:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011d6c:	4b21      	ldr	r3, [pc, #132]	@ (8011df4 <imu_interfaces__srv__ImuCalibration__get_type_description+0xe8>)
 8011d6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011d72:	7823      	ldrb	r3, [r4, #0]
 8011d74:	b90b      	cbnz	r3, 8011d7a <imu_interfaces__srv__ImuCalibration__get_type_description+0x6e>
 8011d76:	2301      	movs	r3, #1
 8011d78:	7023      	strb	r3, [r4, #0]
 8011d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8011df8 <imu_interfaces__srv__ImuCalibration__get_type_description+0xec>)
 8011d7c:	4c1f      	ldr	r4, [pc, #124]	@ (8011dfc <imu_interfaces__srv__ImuCalibration__get_type_description+0xf0>)
 8011d7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011d82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011d86:	2000      	movs	r0, #0
 8011d88:	f008 fc78 	bl	801a67c <sensor_msgs__msg__Imu__get_type_description>
 8011d8c:	300c      	adds	r0, #12
 8011d8e:	c807      	ldmia	r0, {r0, r1, r2}
 8011d90:	f104 0318 	add.w	r3, r4, #24
 8011d94:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011d98:	2000      	movs	r0, #0
 8011d9a:	f008 fd99 	bl	801a8d0 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8011d9e:	300c      	adds	r0, #12
 8011da0:	c807      	ldmia	r0, {r0, r1, r2}
 8011da2:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8011da6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011daa:	2000      	movs	r0, #0
 8011dac:	f008 fdee 	bl	801a98c <std_msgs__msg__Header__get_type_description>
 8011db0:	300c      	adds	r0, #12
 8011db2:	c807      	ldmia	r0, {r0, r1, r2}
 8011db4:	3448      	adds	r4, #72	@ 0x48
 8011db6:	2301      	movs	r3, #1
 8011db8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011dbc:	7033      	strb	r3, [r6, #0]
 8011dbe:	4805      	ldr	r0, [pc, #20]	@ (8011dd4 <imu_interfaces__srv__ImuCalibration__get_type_description+0xc8>)
 8011dc0:	bd70      	pop	{r4, r5, r6, pc}
 8011dc2:	f7ff fefd 	bl	8011bc0 <imu_interfaces__srv__ImuCalibration_Request__get_type_description.part.0>
 8011dc6:	e7cd      	b.n	8011d64 <imu_interfaces__srv__ImuCalibration__get_type_description+0x58>
 8011dc8:	f7ff ff30 	bl	8011c2c <imu_interfaces__srv__ImuCalibration_Event__get_type_description.part.0>
 8011dcc:	e7c1      	b.n	8011d52 <imu_interfaces__srv__ImuCalibration__get_type_description+0x46>
 8011dce:	bf00      	nop
 8011dd0:	2000f13c 	.word	0x2000f13c
 8011dd4:	08020de8 	.word	0x08020de8
 8011dd8:	20001688 	.word	0x20001688
 8011ddc:	2000f139 	.word	0x2000f139
 8011de0:	08020d88 	.word	0x08020d88
 8011de4:	2000f13b 	.word	0x2000f13b
 8011de8:	200016d0 	.word	0x200016d0
 8011dec:	08020dd0 	.word	0x08020dd0
 8011df0:	2000f13a 	.word	0x2000f13a
 8011df4:	200016e8 	.word	0x200016e8
 8011df8:	08020dac 	.word	0x08020dac
 8011dfc:	20001700 	.word	0x20001700

08011e00 <imu_interfaces__srv__ImuCalibration_Request__get_type_description>:
 8011e00:	b508      	push	{r3, lr}
 8011e02:	4b04      	ldr	r3, [pc, #16]	@ (8011e14 <imu_interfaces__srv__ImuCalibration_Request__get_type_description+0x14>)
 8011e04:	781b      	ldrb	r3, [r3, #0]
 8011e06:	b10b      	cbz	r3, 8011e0c <imu_interfaces__srv__ImuCalibration_Request__get_type_description+0xc>
 8011e08:	4803      	ldr	r0, [pc, #12]	@ (8011e18 <imu_interfaces__srv__ImuCalibration_Request__get_type_description+0x18>)
 8011e0a:	bd08      	pop	{r3, pc}
 8011e0c:	f7ff fed8 	bl	8011bc0 <imu_interfaces__srv__ImuCalibration_Request__get_type_description.part.0>
 8011e10:	4801      	ldr	r0, [pc, #4]	@ (8011e18 <imu_interfaces__srv__ImuCalibration_Request__get_type_description+0x18>)
 8011e12:	bd08      	pop	{r3, pc}
 8011e14:	2000f13b 	.word	0x2000f13b
 8011e18:	08020dc4 	.word	0x08020dc4

08011e1c <imu_interfaces__srv__ImuCalibration_Response__get_type_description>:
 8011e1c:	4b03      	ldr	r3, [pc, #12]	@ (8011e2c <imu_interfaces__srv__ImuCalibration_Response__get_type_description+0x10>)
 8011e1e:	781a      	ldrb	r2, [r3, #0]
 8011e20:	b90a      	cbnz	r2, 8011e26 <imu_interfaces__srv__ImuCalibration_Response__get_type_description+0xa>
 8011e22:	2201      	movs	r2, #1
 8011e24:	701a      	strb	r2, [r3, #0]
 8011e26:	4802      	ldr	r0, [pc, #8]	@ (8011e30 <imu_interfaces__srv__ImuCalibration_Response__get_type_description+0x14>)
 8011e28:	4770      	bx	lr
 8011e2a:	bf00      	nop
 8011e2c:	2000f13a 	.word	0x2000f13a
 8011e30:	08020da0 	.word	0x08020da0

08011e34 <imu_interfaces__srv__ImuCalibration_Event__get_type_description>:
 8011e34:	b508      	push	{r3, lr}
 8011e36:	4b04      	ldr	r3, [pc, #16]	@ (8011e48 <imu_interfaces__srv__ImuCalibration_Event__get_type_description+0x14>)
 8011e38:	781b      	ldrb	r3, [r3, #0]
 8011e3a:	b10b      	cbz	r3, 8011e40 <imu_interfaces__srv__ImuCalibration_Event__get_type_description+0xc>
 8011e3c:	4803      	ldr	r0, [pc, #12]	@ (8011e4c <imu_interfaces__srv__ImuCalibration_Event__get_type_description+0x18>)
 8011e3e:	bd08      	pop	{r3, pc}
 8011e40:	f7ff fef4 	bl	8011c2c <imu_interfaces__srv__ImuCalibration_Event__get_type_description.part.0>
 8011e44:	4801      	ldr	r0, [pc, #4]	@ (8011e4c <imu_interfaces__srv__ImuCalibration_Event__get_type_description+0x18>)
 8011e46:	bd08      	pop	{r3, pc}
 8011e48:	2000f139 	.word	0x2000f139
 8011e4c:	08020d7c 	.word	0x08020d7c

08011e50 <imu_interfaces__srv__ImuCalibration__get_type_description_sources>:
 8011e50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e54:	4b44      	ldr	r3, [pc, #272]	@ (8011f68 <imu_interfaces__srv__ImuCalibration__get_type_description_sources+0x118>)
 8011e56:	f893 9000 	ldrb.w	r9, [r3]
 8011e5a:	f1b9 0f00 	cmp.w	r9, #0
 8011e5e:	d002      	beq.n	8011e66 <imu_interfaces__srv__ImuCalibration__get_type_description_sources+0x16>
 8011e60:	4842      	ldr	r0, [pc, #264]	@ (8011f6c <imu_interfaces__srv__ImuCalibration__get_type_description_sources+0x11c>)
 8011e62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e66:	4d42      	ldr	r5, [pc, #264]	@ (8011f70 <imu_interfaces__srv__ImuCalibration__get_type_description_sources+0x120>)
 8011e68:	4c42      	ldr	r4, [pc, #264]	@ (8011f74 <imu_interfaces__srv__ImuCalibration__get_type_description_sources+0x124>)
 8011e6a:	f8df a114 	ldr.w	sl, [pc, #276]	@ 8011f80 <imu_interfaces__srv__ImuCalibration__get_type_description_sources+0x130>
 8011e6e:	4f42      	ldr	r7, [pc, #264]	@ (8011f78 <imu_interfaces__srv__ImuCalibration__get_type_description_sources+0x128>)
 8011e70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011e74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011e78:	682b      	ldr	r3, [r5, #0]
 8011e7a:	4625      	mov	r5, r4
 8011e7c:	4648      	mov	r0, r9
 8011e7e:	f845 3b04 	str.w	r3, [r5], #4
 8011e82:	f009 f989 	bl	801b198 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8011e86:	4606      	mov	r6, r0
 8011e88:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8011e8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011e8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8011e8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011e90:	4648      	mov	r0, r9
 8011e92:	6833      	ldr	r3, [r6, #0]
 8011e94:	602b      	str	r3, [r5, #0]
 8011e96:	f009 f9bf 	bl	801b218 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 8011e9a:	4605      	mov	r5, r0
 8011e9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011e9e:	f104 0628 	add.w	r6, r4, #40	@ 0x28
 8011ea2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011ea4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ea6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011ea8:	4648      	mov	r0, r9
 8011eaa:	682b      	ldr	r3, [r5, #0]
 8011eac:	6033      	str	r3, [r6, #0]
 8011eae:	f7ff fd83 	bl	80119b8 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 8011eb2:	4684      	mov	ip, r0
 8011eb4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011eb8:	f104 0b4c 	add.w	fp, r4, #76	@ 0x4c
 8011ebc:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 8011ec0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011ec4:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 8011ec8:	f8dc 3000 	ldr.w	r3, [ip]
 8011ecc:	f8cb 3000 	str.w	r3, [fp]
 8011ed0:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8011ed4:	f104 0870 	add.w	r8, r4, #112	@ 0x70
 8011ed8:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8011edc:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8011ee0:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8011ee4:	f8da 3000 	ldr.w	r3, [sl]
 8011ee8:	f8c8 3000 	str.w	r3, [r8]
 8011eec:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011eee:	f104 0694 	add.w	r6, r4, #148	@ 0x94
 8011ef2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011ef4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011ef6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011ef8:	4d20      	ldr	r5, [pc, #128]	@ (8011f7c <imu_interfaces__srv__ImuCalibration__get_type_description_sources+0x12c>)
 8011efa:	683b      	ldr	r3, [r7, #0]
 8011efc:	6033      	str	r3, [r6, #0]
 8011efe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011f00:	f104 0eb8 	add.w	lr, r4, #184	@ 0xb8
 8011f04:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011f08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011f0a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011f0e:	682b      	ldr	r3, [r5, #0]
 8011f10:	f8ce 3000 	str.w	r3, [lr]
 8011f14:	4648      	mov	r0, r9
 8011f16:	f008 fbe3 	bl	801a6e0 <sensor_msgs__msg__Imu__get_individual_type_description_source>
 8011f1a:	4605      	mov	r5, r0
 8011f1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011f1e:	f104 06dc 	add.w	r6, r4, #220	@ 0xdc
 8011f22:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011f26:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011f28:	4648      	mov	r0, r9
 8011f2a:	682b      	ldr	r3, [r5, #0]
 8011f2c:	6033      	str	r3, [r6, #0]
 8011f2e:	f008 fce7 	bl	801a900 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 8011f32:	4605      	mov	r5, r0
 8011f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011f36:	f504 7680 	add.w	r6, r4, #256	@ 0x100
 8011f3a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011f3e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011f40:	4648      	mov	r0, r9
 8011f42:	682b      	ldr	r3, [r5, #0]
 8011f44:	6033      	str	r3, [r6, #0]
 8011f46:	f008 fd39 	bl	801a9bc <std_msgs__msg__Header__get_individual_type_description_source>
 8011f4a:	4a07      	ldr	r2, [pc, #28]	@ (8011f68 <imu_interfaces__srv__ImuCalibration__get_type_description_sources+0x118>)
 8011f4c:	2301      	movs	r3, #1
 8011f4e:	4605      	mov	r5, r0
 8011f50:	7013      	strb	r3, [r2, #0]
 8011f52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011f54:	f504 7492 	add.w	r4, r4, #292	@ 0x124
 8011f58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011f5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011f5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011f5e:	682b      	ldr	r3, [r5, #0]
 8011f60:	4802      	ldr	r0, [pc, #8]	@ (8011f6c <imu_interfaces__srv__ImuCalibration__get_type_description_sources+0x11c>)
 8011f62:	6023      	str	r3, [r4, #0]
 8011f64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f68:	2000f138 	.word	0x2000f138
 8011f6c:	08020ce0 	.word	0x08020ce0
 8011f70:	08020d58 	.word	0x08020d58
 8011f74:	2000efd0 	.word	0x2000efd0
 8011f78:	08020d34 	.word	0x08020d34
 8011f7c:	08020d10 	.word	0x08020d10
 8011f80:	08020cec 	.word	0x08020cec

08011f84 <imu_interfaces__srv__ImuCalibration_Request__get_type_description_sources>:
 8011f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f86:	4d2d      	ldr	r5, [pc, #180]	@ (801203c <imu_interfaces__srv__ImuCalibration_Request__get_type_description_sources+0xb8>)
 8011f88:	782e      	ldrb	r6, [r5, #0]
 8011f8a:	b10e      	cbz	r6, 8011f90 <imu_interfaces__srv__ImuCalibration_Request__get_type_description_sources+0xc>
 8011f8c:	482c      	ldr	r0, [pc, #176]	@ (8012040 <imu_interfaces__srv__ImuCalibration_Request__get_type_description_sources+0xbc>)
 8011f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f90:	4f2c      	ldr	r7, [pc, #176]	@ (8012044 <imu_interfaces__srv__ImuCalibration_Request__get_type_description_sources+0xc0>)
 8011f92:	4c2d      	ldr	r4, [pc, #180]	@ (8012048 <imu_interfaces__srv__ImuCalibration_Request__get_type_description_sources+0xc4>)
 8011f94:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011f98:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011f9c:	683b      	ldr	r3, [r7, #0]
 8011f9e:	4627      	mov	r7, r4
 8011fa0:	4630      	mov	r0, r6
 8011fa2:	f847 3b04 	str.w	r3, [r7], #4
 8011fa6:	f009 f8f7 	bl	801b198 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8011faa:	4684      	mov	ip, r0
 8011fac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011fb0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011fb2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011fb6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011fb8:	4630      	mov	r0, r6
 8011fba:	f8dc 3000 	ldr.w	r3, [ip]
 8011fbe:	603b      	str	r3, [r7, #0]
 8011fc0:	f009 f92a 	bl	801b218 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 8011fc4:	4684      	mov	ip, r0
 8011fc6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011fca:	f104 0728 	add.w	r7, r4, #40	@ 0x28
 8011fce:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011fd0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011fd4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011fd6:	4630      	mov	r0, r6
 8011fd8:	f8dc 3000 	ldr.w	r3, [ip]
 8011fdc:	603b      	str	r3, [r7, #0]
 8011fde:	f7ff fceb 	bl	80119b8 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 8011fe2:	4684      	mov	ip, r0
 8011fe4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011fe8:	f104 074c 	add.w	r7, r4, #76	@ 0x4c
 8011fec:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011fee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011ff2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011ff4:	4630      	mov	r0, r6
 8011ff6:	f8dc 3000 	ldr.w	r3, [ip]
 8011ffa:	603b      	str	r3, [r7, #0]
 8011ffc:	f008 fb70 	bl	801a6e0 <sensor_msgs__msg__Imu__get_individual_type_description_source>
 8012000:	4684      	mov	ip, r0
 8012002:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012006:	f104 0770 	add.w	r7, r4, #112	@ 0x70
 801200a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801200c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012010:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012012:	4630      	mov	r0, r6
 8012014:	f8dc 3000 	ldr.w	r3, [ip]
 8012018:	603b      	str	r3, [r7, #0]
 801201a:	f008 fccf 	bl	801a9bc <std_msgs__msg__Header__get_individual_type_description_source>
 801201e:	2301      	movs	r3, #1
 8012020:	4684      	mov	ip, r0
 8012022:	702b      	strb	r3, [r5, #0]
 8012024:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012028:	3494      	adds	r4, #148	@ 0x94
 801202a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801202c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012030:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012032:	f8dc 3000 	ldr.w	r3, [ip]
 8012036:	4802      	ldr	r0, [pc, #8]	@ (8012040 <imu_interfaces__srv__ImuCalibration_Request__get_type_description_sources+0xbc>)
 8012038:	6023      	str	r3, [r4, #0]
 801203a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801203c:	2000efcc 	.word	0x2000efcc
 8012040:	08020cd4 	.word	0x08020cd4
 8012044:	08020d34 	.word	0x08020d34
 8012048:	2000eef4 	.word	0x2000eef4

0801204c <imu_interfaces__srv__ImuCalibration_Response__get_type_description_sources>:
 801204c:	4b09      	ldr	r3, [pc, #36]	@ (8012074 <imu_interfaces__srv__ImuCalibration_Response__get_type_description_sources+0x28>)
 801204e:	781a      	ldrb	r2, [r3, #0]
 8012050:	b96a      	cbnz	r2, 801206e <imu_interfaces__srv__ImuCalibration_Response__get_type_description_sources+0x22>
 8012052:	b430      	push	{r4, r5}
 8012054:	4d08      	ldr	r5, [pc, #32]	@ (8012078 <imu_interfaces__srv__ImuCalibration_Response__get_type_description_sources+0x2c>)
 8012056:	4c09      	ldr	r4, [pc, #36]	@ (801207c <imu_interfaces__srv__ImuCalibration_Response__get_type_description_sources+0x30>)
 8012058:	2201      	movs	r2, #1
 801205a:	701a      	strb	r2, [r3, #0]
 801205c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801205e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012060:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012064:	682b      	ldr	r3, [r5, #0]
 8012066:	4806      	ldr	r0, [pc, #24]	@ (8012080 <imu_interfaces__srv__ImuCalibration_Response__get_type_description_sources+0x34>)
 8012068:	6023      	str	r3, [r4, #0]
 801206a:	bc30      	pop	{r4, r5}
 801206c:	4770      	bx	lr
 801206e:	4804      	ldr	r0, [pc, #16]	@ (8012080 <imu_interfaces__srv__ImuCalibration_Response__get_type_description_sources+0x34>)
 8012070:	4770      	bx	lr
 8012072:	bf00      	nop
 8012074:	2000eef0 	.word	0x2000eef0
 8012078:	08020d10 	.word	0x08020d10
 801207c:	2000eecc 	.word	0x2000eecc
 8012080:	08020cc8 	.word	0x08020cc8

08012084 <imu_interfaces__srv__ImuCalibration_Event__get_type_description_sources>:
 8012084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012088:	4d46      	ldr	r5, [pc, #280]	@ (80121a4 <imu_interfaces__srv__ImuCalibration_Event__get_type_description_sources+0x120>)
 801208a:	782e      	ldrb	r6, [r5, #0]
 801208c:	b116      	cbz	r6, 8012094 <imu_interfaces__srv__ImuCalibration_Event__get_type_description_sources+0x10>
 801208e:	4846      	ldr	r0, [pc, #280]	@ (80121a8 <imu_interfaces__srv__ImuCalibration_Event__get_type_description_sources+0x124>)
 8012090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012094:	4f45      	ldr	r7, [pc, #276]	@ (80121ac <imu_interfaces__srv__ImuCalibration_Event__get_type_description_sources+0x128>)
 8012096:	4c46      	ldr	r4, [pc, #280]	@ (80121b0 <imu_interfaces__srv__ImuCalibration_Event__get_type_description_sources+0x12c>)
 8012098:	f8df 9118 	ldr.w	r9, [pc, #280]	@ 80121b4 <imu_interfaces__srv__ImuCalibration_Event__get_type_description_sources+0x130>
 801209c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801209e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80120a0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80120a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80120a4:	683b      	ldr	r3, [r7, #0]
 80120a6:	4627      	mov	r7, r4
 80120a8:	4630      	mov	r0, r6
 80120aa:	f847 3b04 	str.w	r3, [r7], #4
 80120ae:	f009 f873 	bl	801b198 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 80120b2:	4684      	mov	ip, r0
 80120b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80120b8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80120ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80120be:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80120c0:	4630      	mov	r0, r6
 80120c2:	f8dc 3000 	ldr.w	r3, [ip]
 80120c6:	603b      	str	r3, [r7, #0]
 80120c8:	f009 f8a6 	bl	801b218 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 80120cc:	4684      	mov	ip, r0
 80120ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80120d2:	f104 0728 	add.w	r7, r4, #40	@ 0x28
 80120d6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80120d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80120dc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80120de:	4630      	mov	r0, r6
 80120e0:	f8dc 3000 	ldr.w	r3, [ip]
 80120e4:	603b      	str	r3, [r7, #0]
 80120e6:	f7ff fc67 	bl	80119b8 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 80120ea:	4684      	mov	ip, r0
 80120ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80120f0:	f104 0a4c 	add.w	sl, r4, #76	@ 0x4c
 80120f4:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 80120f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80120fc:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8012100:	f8dc 3000 	ldr.w	r3, [ip]
 8012104:	f8ca 3000 	str.w	r3, [sl]
 8012108:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 801210c:	f104 0870 	add.w	r8, r4, #112	@ 0x70
 8012110:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8012114:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8012118:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 801211c:	f8df e098 	ldr.w	lr, [pc, #152]	@ 80121b8 <imu_interfaces__srv__ImuCalibration_Event__get_type_description_sources+0x134>
 8012120:	f8d9 3000 	ldr.w	r3, [r9]
 8012124:	f8c8 3000 	str.w	r3, [r8]
 8012128:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801212c:	f104 0794 	add.w	r7, r4, #148	@ 0x94
 8012130:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012132:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012136:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012138:	f8de 3000 	ldr.w	r3, [lr]
 801213c:	603b      	str	r3, [r7, #0]
 801213e:	4630      	mov	r0, r6
 8012140:	f008 face 	bl	801a6e0 <sensor_msgs__msg__Imu__get_individual_type_description_source>
 8012144:	4684      	mov	ip, r0
 8012146:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801214a:	f104 07b8 	add.w	r7, r4, #184	@ 0xb8
 801214e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012150:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012154:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012156:	4630      	mov	r0, r6
 8012158:	f8dc 3000 	ldr.w	r3, [ip]
 801215c:	603b      	str	r3, [r7, #0]
 801215e:	f008 fbcf 	bl	801a900 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 8012162:	4684      	mov	ip, r0
 8012164:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012168:	f104 07dc 	add.w	r7, r4, #220	@ 0xdc
 801216c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801216e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012172:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012174:	4630      	mov	r0, r6
 8012176:	f8dc 3000 	ldr.w	r3, [ip]
 801217a:	603b      	str	r3, [r7, #0]
 801217c:	f008 fc1e 	bl	801a9bc <std_msgs__msg__Header__get_individual_type_description_source>
 8012180:	2301      	movs	r3, #1
 8012182:	4684      	mov	ip, r0
 8012184:	702b      	strb	r3, [r5, #0]
 8012186:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801218a:	f504 7480 	add.w	r4, r4, #256	@ 0x100
 801218e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012190:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012196:	f8dc 3000 	ldr.w	r3, [ip]
 801219a:	4803      	ldr	r0, [pc, #12]	@ (80121a8 <imu_interfaces__srv__ImuCalibration_Event__get_type_description_sources+0x124>)
 801219c:	6023      	str	r3, [r4, #0]
 801219e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121a2:	bf00      	nop
 80121a4:	2000eec8 	.word	0x2000eec8
 80121a8:	08020cbc 	.word	0x08020cbc
 80121ac:	08020cec 	.word	0x08020cec
 80121b0:	2000ed84 	.word	0x2000ed84
 80121b4:	08020d34 	.word	0x08020d34
 80121b8:	08020d10 	.word	0x08020d10

080121bc <imu_interfaces__srv__ImuCalibration_Request__init>:
 80121bc:	b150      	cbz	r0, 80121d4 <imu_interfaces__srv__ImuCalibration_Request__init+0x18>
 80121be:	b510      	push	{r4, lr}
 80121c0:	4604      	mov	r4, r0
 80121c2:	f008 fae7 	bl	801a794 <sensor_msgs__msg__Imu__init>
 80121c6:	b100      	cbz	r0, 80121ca <imu_interfaces__srv__ImuCalibration_Request__init+0xe>
 80121c8:	bd10      	pop	{r4, pc}
 80121ca:	4620      	mov	r0, r4
 80121cc:	f008 fb2e 	bl	801a82c <sensor_msgs__msg__Imu__fini>
 80121d0:	2000      	movs	r0, #0
 80121d2:	bd10      	pop	{r4, pc}
 80121d4:	2000      	movs	r0, #0
 80121d6:	4770      	bx	lr

080121d8 <imu_interfaces__srv__ImuCalibration_Request__fini>:
 80121d8:	b108      	cbz	r0, 80121de <imu_interfaces__srv__ImuCalibration_Request__fini+0x6>
 80121da:	f008 bb27 	b.w	801a82c <sensor_msgs__msg__Imu__fini>
 80121de:	4770      	bx	lr

080121e0 <imu_interfaces__srv__ImuCalibration_Request__copy>:
 80121e0:	b110      	cbz	r0, 80121e8 <imu_interfaces__srv__ImuCalibration_Request__copy+0x8>
 80121e2:	b109      	cbz	r1, 80121e8 <imu_interfaces__srv__ImuCalibration_Request__copy+0x8>
 80121e4:	f008 bb36 	b.w	801a854 <sensor_msgs__msg__Imu__copy>
 80121e8:	2000      	movs	r0, #0
 80121ea:	4770      	bx	lr

080121ec <imu_interfaces__srv__ImuCalibration_Request__Sequence__init>:
 80121ec:	2800      	cmp	r0, #0
 80121ee:	d041      	beq.n	8012274 <imu_interfaces__srv__ImuCalibration_Request__Sequence__init+0x88>
 80121f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80121f4:	b087      	sub	sp, #28
 80121f6:	460d      	mov	r5, r1
 80121f8:	4681      	mov	r9, r0
 80121fa:	a801      	add	r0, sp, #4
 80121fc:	f7fc fffe 	bl	800f1fc <rcutils_get_default_allocator>
 8012200:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012204:	b36d      	cbz	r5, 8012262 <imu_interfaces__srv__ImuCalibration_Request__Sequence__init+0x76>
 8012206:	9b04      	ldr	r3, [sp, #16]
 8012208:	4642      	mov	r2, r8
 801220a:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 801220e:	4628      	mov	r0, r5
 8012210:	4798      	blx	r3
 8012212:	4607      	mov	r7, r0
 8012214:	b318      	cbz	r0, 801225e <imu_interfaces__srv__ImuCalibration_Request__Sequence__init+0x72>
 8012216:	4606      	mov	r6, r0
 8012218:	2400      	movs	r4, #0
 801221a:	e004      	b.n	8012226 <imu_interfaces__srv__ImuCalibration_Request__Sequence__init+0x3a>
 801221c:	3401      	adds	r4, #1
 801221e:	42a5      	cmp	r5, r4
 8012220:	f506 76a0 	add.w	r6, r6, #320	@ 0x140
 8012224:	d01e      	beq.n	8012264 <imu_interfaces__srv__ImuCalibration_Request__Sequence__init+0x78>
 8012226:	4630      	mov	r0, r6
 8012228:	f008 fab4 	bl	801a794 <sensor_msgs__msg__Imu__init>
 801222c:	2800      	cmp	r0, #0
 801222e:	d1f5      	bne.n	801221c <imu_interfaces__srv__ImuCalibration_Request__Sequence__init+0x30>
 8012230:	4630      	mov	r0, r6
 8012232:	f008 fafb 	bl	801a82c <sensor_msgs__msg__Imu__fini>
 8012236:	42a5      	cmp	r5, r4
 8012238:	d914      	bls.n	8012264 <imu_interfaces__srv__ImuCalibration_Request__Sequence__init+0x78>
 801223a:	b164      	cbz	r4, 8012256 <imu_interfaces__srv__ImuCalibration_Request__Sequence__init+0x6a>
 801223c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8012240:	eb07 1484 	add.w	r4, r7, r4, lsl #6
 8012244:	f5a4 74a0 	sub.w	r4, r4, #320	@ 0x140
 8012248:	4620      	mov	r0, r4
 801224a:	f008 faef 	bl	801a82c <sensor_msgs__msg__Imu__fini>
 801224e:	42bc      	cmp	r4, r7
 8012250:	f5a4 74a0 	sub.w	r4, r4, #320	@ 0x140
 8012254:	d1f8      	bne.n	8012248 <imu_interfaces__srv__ImuCalibration_Request__Sequence__init+0x5c>
 8012256:	9b02      	ldr	r3, [sp, #8]
 8012258:	4641      	mov	r1, r8
 801225a:	4638      	mov	r0, r7
 801225c:	4798      	blx	r3
 801225e:	2000      	movs	r0, #0
 8012260:	e005      	b.n	801226e <imu_interfaces__srv__ImuCalibration_Request__Sequence__init+0x82>
 8012262:	462f      	mov	r7, r5
 8012264:	e9c9 7500 	strd	r7, r5, [r9]
 8012268:	f8c9 5008 	str.w	r5, [r9, #8]
 801226c:	2001      	movs	r0, #1
 801226e:	b007      	add	sp, #28
 8012270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012274:	2000      	movs	r0, #0
 8012276:	4770      	bx	lr

08012278 <imu_interfaces__srv__ImuCalibration_Request__Sequence__fini>:
 8012278:	b320      	cbz	r0, 80122c4 <imu_interfaces__srv__ImuCalibration_Request__Sequence__fini+0x4c>
 801227a:	b530      	push	{r4, r5, lr}
 801227c:	4605      	mov	r5, r0
 801227e:	b087      	sub	sp, #28
 8012280:	a801      	add	r0, sp, #4
 8012282:	f7fc ffbb 	bl	800f1fc <rcutils_get_default_allocator>
 8012286:	682a      	ldr	r2, [r5, #0]
 8012288:	b1b2      	cbz	r2, 80122b8 <imu_interfaces__srv__ImuCalibration_Request__Sequence__fini+0x40>
 801228a:	68a9      	ldr	r1, [r5, #8]
 801228c:	b161      	cbz	r1, 80122a8 <imu_interfaces__srv__ImuCalibration_Request__Sequence__fini+0x30>
 801228e:	2400      	movs	r4, #0
 8012290:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8012294:	eb12 1083 	adds.w	r0, r2, r3, lsl #6
 8012298:	d010      	beq.n	80122bc <imu_interfaces__srv__ImuCalibration_Request__Sequence__fini+0x44>
 801229a:	f008 fac7 	bl	801a82c <sensor_msgs__msg__Imu__fini>
 801229e:	68a9      	ldr	r1, [r5, #8]
 80122a0:	682a      	ldr	r2, [r5, #0]
 80122a2:	3401      	adds	r4, #1
 80122a4:	428c      	cmp	r4, r1
 80122a6:	d3f3      	bcc.n	8012290 <imu_interfaces__srv__ImuCalibration_Request__Sequence__fini+0x18>
 80122a8:	9b02      	ldr	r3, [sp, #8]
 80122aa:	9905      	ldr	r1, [sp, #20]
 80122ac:	4610      	mov	r0, r2
 80122ae:	4798      	blx	r3
 80122b0:	2300      	movs	r3, #0
 80122b2:	e9c5 3300 	strd	r3, r3, [r5]
 80122b6:	60ab      	str	r3, [r5, #8]
 80122b8:	b007      	add	sp, #28
 80122ba:	bd30      	pop	{r4, r5, pc}
 80122bc:	3401      	adds	r4, #1
 80122be:	428c      	cmp	r4, r1
 80122c0:	d3e6      	bcc.n	8012290 <imu_interfaces__srv__ImuCalibration_Request__Sequence__fini+0x18>
 80122c2:	e7f1      	b.n	80122a8 <imu_interfaces__srv__ImuCalibration_Request__Sequence__fini+0x30>
 80122c4:	4770      	bx	lr
 80122c6:	bf00      	nop

080122c8 <imu_interfaces__srv__ImuCalibration_Response__init>:
 80122c8:	3800      	subs	r0, #0
 80122ca:	bf18      	it	ne
 80122cc:	2001      	movne	r0, #1
 80122ce:	4770      	bx	lr

080122d0 <imu_interfaces__srv__ImuCalibration_Response__fini>:
 80122d0:	4770      	bx	lr
 80122d2:	bf00      	nop

080122d4 <imu_interfaces__srv__ImuCalibration_Response__copy>:
 80122d4:	b128      	cbz	r0, 80122e2 <imu_interfaces__srv__ImuCalibration_Response__copy+0xe>
 80122d6:	b119      	cbz	r1, 80122e0 <imu_interfaces__srv__ImuCalibration_Response__copy+0xc>
 80122d8:	7803      	ldrb	r3, [r0, #0]
 80122da:	700b      	strb	r3, [r1, #0]
 80122dc:	2001      	movs	r0, #1
 80122de:	4770      	bx	lr
 80122e0:	4608      	mov	r0, r1
 80122e2:	4770      	bx	lr

080122e4 <imu_interfaces__srv__ImuCalibration_Response__Sequence__init>:
 80122e4:	b1c0      	cbz	r0, 8012318 <imu_interfaces__srv__ImuCalibration_Response__Sequence__init+0x34>
 80122e6:	b530      	push	{r4, r5, lr}
 80122e8:	b087      	sub	sp, #28
 80122ea:	460d      	mov	r5, r1
 80122ec:	4604      	mov	r4, r0
 80122ee:	a801      	add	r0, sp, #4
 80122f0:	f7fc ff84 	bl	800f1fc <rcutils_get_default_allocator>
 80122f4:	9a05      	ldr	r2, [sp, #20]
 80122f6:	b935      	cbnz	r5, 8012306 <imu_interfaces__srv__ImuCalibration_Response__Sequence__init+0x22>
 80122f8:	4628      	mov	r0, r5
 80122fa:	e9c4 0500 	strd	r0, r5, [r4]
 80122fe:	2001      	movs	r0, #1
 8012300:	60a5      	str	r5, [r4, #8]
 8012302:	b007      	add	sp, #28
 8012304:	bd30      	pop	{r4, r5, pc}
 8012306:	9b04      	ldr	r3, [sp, #16]
 8012308:	2101      	movs	r1, #1
 801230a:	4628      	mov	r0, r5
 801230c:	4798      	blx	r3
 801230e:	2800      	cmp	r0, #0
 8012310:	d1f3      	bne.n	80122fa <imu_interfaces__srv__ImuCalibration_Response__Sequence__init+0x16>
 8012312:	2000      	movs	r0, #0
 8012314:	b007      	add	sp, #28
 8012316:	bd30      	pop	{r4, r5, pc}
 8012318:	2000      	movs	r0, #0
 801231a:	4770      	bx	lr

0801231c <imu_interfaces__srv__ImuCalibration_Response__Sequence__fini>:
 801231c:	b180      	cbz	r0, 8012340 <imu_interfaces__srv__ImuCalibration_Response__Sequence__fini+0x24>
 801231e:	b510      	push	{r4, lr}
 8012320:	4604      	mov	r4, r0
 8012322:	b086      	sub	sp, #24
 8012324:	a801      	add	r0, sp, #4
 8012326:	f7fc ff69 	bl	800f1fc <rcutils_get_default_allocator>
 801232a:	6820      	ldr	r0, [r4, #0]
 801232c:	b130      	cbz	r0, 801233c <imu_interfaces__srv__ImuCalibration_Response__Sequence__fini+0x20>
 801232e:	9b02      	ldr	r3, [sp, #8]
 8012330:	9905      	ldr	r1, [sp, #20]
 8012332:	4798      	blx	r3
 8012334:	2300      	movs	r3, #0
 8012336:	e9c4 3300 	strd	r3, r3, [r4]
 801233a:	60a3      	str	r3, [r4, #8]
 801233c:	b006      	add	sp, #24
 801233e:	bd10      	pop	{r4, pc}
 8012340:	4770      	bx	lr
 8012342:	bf00      	nop

08012344 <imu_interfaces__srv__ImuCalibration_Event__init>:
 8012344:	b570      	push	{r4, r5, r6, lr}
 8012346:	b08c      	sub	sp, #48	@ 0x30
 8012348:	2800      	cmp	r0, #0
 801234a:	d03e      	beq.n	80123ca <imu_interfaces__srv__ImuCalibration_Event__init+0x86>
 801234c:	4605      	mov	r5, r0
 801234e:	f008 fb03 	bl	801a958 <service_msgs__msg__ServiceEventInfo__init>
 8012352:	4604      	mov	r4, r0
 8012354:	b178      	cbz	r0, 8012376 <imu_interfaces__srv__ImuCalibration_Event__init+0x32>
 8012356:	2600      	movs	r6, #0
 8012358:	4668      	mov	r0, sp
 801235a:	f7fc ff4f 	bl	800f1fc <rcutils_get_default_allocator>
 801235e:	4668      	mov	r0, sp
 8012360:	e9c5 660a 	strd	r6, r6, [r5, #40]	@ 0x28
 8012364:	632e      	str	r6, [r5, #48]	@ 0x30
 8012366:	f7fc ff49 	bl	800f1fc <rcutils_get_default_allocator>
 801236a:	4620      	mov	r0, r4
 801236c:	e9c5 660d 	strd	r6, r6, [r5, #52]	@ 0x34
 8012370:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8012372:	b00c      	add	sp, #48	@ 0x30
 8012374:	bd70      	pop	{r4, r5, r6, pc}
 8012376:	4628      	mov	r0, r5
 8012378:	f008 fafe 	bl	801a978 <service_msgs__msg__ServiceEventInfo__fini>
 801237c:	a807      	add	r0, sp, #28
 801237e:	f7fc ff3d 	bl	800f1fc <rcutils_get_default_allocator>
 8012382:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8012384:	b1ab      	cbz	r3, 80123b2 <imu_interfaces__srv__ImuCalibration_Event__init+0x6e>
 8012386:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8012388:	b15a      	cbz	r2, 80123a2 <imu_interfaces__srv__ImuCalibration_Event__init+0x5e>
 801238a:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 801238e:	eb13 1080 	adds.w	r0, r3, r0, lsl #6
 8012392:	d01e      	beq.n	80123d2 <imu_interfaces__srv__ImuCalibration_Event__init+0x8e>
 8012394:	f008 fa4a 	bl	801a82c <sensor_msgs__msg__Imu__fini>
 8012398:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801239a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801239c:	3401      	adds	r4, #1
 801239e:	4294      	cmp	r4, r2
 80123a0:	d3f3      	bcc.n	801238a <imu_interfaces__srv__ImuCalibration_Event__init+0x46>
 80123a2:	4618      	mov	r0, r3
 80123a4:	9a08      	ldr	r2, [sp, #32]
 80123a6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80123a8:	4790      	blx	r2
 80123aa:	2300      	movs	r3, #0
 80123ac:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80123b0:	632b      	str	r3, [r5, #48]	@ 0x30
 80123b2:	a807      	add	r0, sp, #28
 80123b4:	f7fc ff22 	bl	800f1fc <rcutils_get_default_allocator>
 80123b8:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 80123ba:	b130      	cbz	r0, 80123ca <imu_interfaces__srv__ImuCalibration_Event__init+0x86>
 80123bc:	9b08      	ldr	r3, [sp, #32]
 80123be:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80123c0:	4798      	blx	r3
 80123c2:	2300      	movs	r3, #0
 80123c4:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80123c8:	63eb      	str	r3, [r5, #60]	@ 0x3c
 80123ca:	2400      	movs	r4, #0
 80123cc:	4620      	mov	r0, r4
 80123ce:	b00c      	add	sp, #48	@ 0x30
 80123d0:	bd70      	pop	{r4, r5, r6, pc}
 80123d2:	3401      	adds	r4, #1
 80123d4:	42a2      	cmp	r2, r4
 80123d6:	d8d8      	bhi.n	801238a <imu_interfaces__srv__ImuCalibration_Event__init+0x46>
 80123d8:	e7e3      	b.n	80123a2 <imu_interfaces__srv__ImuCalibration_Event__init+0x5e>
 80123da:	bf00      	nop

080123dc <imu_interfaces__srv__ImuCalibration_Event__fini>:
 80123dc:	2800      	cmp	r0, #0
 80123de:	d032      	beq.n	8012446 <imu_interfaces__srv__ImuCalibration_Event__fini+0x6a>
 80123e0:	b530      	push	{r4, r5, lr}
 80123e2:	4605      	mov	r5, r0
 80123e4:	b087      	sub	sp, #28
 80123e6:	f008 fac7 	bl	801a978 <service_msgs__msg__ServiceEventInfo__fini>
 80123ea:	a801      	add	r0, sp, #4
 80123ec:	f7fc ff06 	bl	800f1fc <rcutils_get_default_allocator>
 80123f0:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80123f2:	b1b3      	cbz	r3, 8012422 <imu_interfaces__srv__ImuCalibration_Event__fini+0x46>
 80123f4:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80123f6:	b162      	cbz	r2, 8012412 <imu_interfaces__srv__ImuCalibration_Event__fini+0x36>
 80123f8:	2400      	movs	r4, #0
 80123fa:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 80123fe:	eb13 1080 	adds.w	r0, r3, r0, lsl #6
 8012402:	d01c      	beq.n	801243e <imu_interfaces__srv__ImuCalibration_Event__fini+0x62>
 8012404:	f008 fa12 	bl	801a82c <sensor_msgs__msg__Imu__fini>
 8012408:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801240a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801240c:	3401      	adds	r4, #1
 801240e:	4294      	cmp	r4, r2
 8012410:	d3f3      	bcc.n	80123fa <imu_interfaces__srv__ImuCalibration_Event__fini+0x1e>
 8012412:	4618      	mov	r0, r3
 8012414:	9a02      	ldr	r2, [sp, #8]
 8012416:	9905      	ldr	r1, [sp, #20]
 8012418:	4790      	blx	r2
 801241a:	2300      	movs	r3, #0
 801241c:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8012420:	632b      	str	r3, [r5, #48]	@ 0x30
 8012422:	a801      	add	r0, sp, #4
 8012424:	f7fc feea 	bl	800f1fc <rcutils_get_default_allocator>
 8012428:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 801242a:	b130      	cbz	r0, 801243a <imu_interfaces__srv__ImuCalibration_Event__fini+0x5e>
 801242c:	9b02      	ldr	r3, [sp, #8]
 801242e:	9905      	ldr	r1, [sp, #20]
 8012430:	4798      	blx	r3
 8012432:	2300      	movs	r3, #0
 8012434:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8012438:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801243a:	b007      	add	sp, #28
 801243c:	bd30      	pop	{r4, r5, pc}
 801243e:	3401      	adds	r4, #1
 8012440:	4294      	cmp	r4, r2
 8012442:	d3da      	bcc.n	80123fa <imu_interfaces__srv__ImuCalibration_Event__fini+0x1e>
 8012444:	e7e5      	b.n	8012412 <imu_interfaces__srv__ImuCalibration_Event__fini+0x36>
 8012446:	4770      	bx	lr

08012448 <rosidl_typesupport_c__create_service_event_message__imu_interfaces__srv__ImuCalibration>:
 8012448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801244c:	2900      	cmp	r1, #0
 801244e:	d03e      	beq.n	80124ce <rosidl_typesupport_c__create_service_event_message__imu_interfaces__srv__ImuCalibration+0x86>
 8012450:	4605      	mov	r5, r0
 8012452:	2800      	cmp	r0, #0
 8012454:	d03b      	beq.n	80124ce <rosidl_typesupport_c__create_service_event_message__imu_interfaces__srv__ImuCalibration+0x86>
 8012456:	4698      	mov	r8, r3
 8012458:	460e      	mov	r6, r1
 801245a:	680b      	ldr	r3, [r1, #0]
 801245c:	6909      	ldr	r1, [r1, #16]
 801245e:	2040      	movs	r0, #64	@ 0x40
 8012460:	4617      	mov	r7, r2
 8012462:	4798      	blx	r3
 8012464:	4604      	mov	r4, r0
 8012466:	f7ff ff6d 	bl	8012344 <imu_interfaces__srv__ImuCalibration_Event__init>
 801246a:	b360      	cbz	r0, 80124c6 <rosidl_typesupport_c__create_service_event_message__imu_interfaces__srv__ImuCalibration+0x7e>
 801246c:	782b      	ldrb	r3, [r5, #0]
 801246e:	7023      	strb	r3, [r4, #0]
 8012470:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8012474:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8012478:	e9c4 2301 	strd	r2, r3, [r4, #4]
 801247c:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8012480:	68e9      	ldr	r1, [r5, #12]
 8012482:	692a      	ldr	r2, [r5, #16]
 8012484:	696b      	ldr	r3, [r5, #20]
 8012486:	69a8      	ldr	r0, [r5, #24]
 8012488:	61a0      	str	r0, [r4, #24]
 801248a:	60e1      	str	r1, [r4, #12]
 801248c:	6122      	str	r2, [r4, #16]
 801248e:	6163      	str	r3, [r4, #20]
 8012490:	b14f      	cbz	r7, 80124a6 <rosidl_typesupport_c__create_service_event_message__imu_interfaces__srv__ImuCalibration+0x5e>
 8012492:	2101      	movs	r1, #1
 8012494:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8012498:	f7ff fea8 	bl	80121ec <imu_interfaces__srv__ImuCalibration_Request__Sequence__init>
 801249c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801249e:	4638      	mov	r0, r7
 80124a0:	f7ff fe9e 	bl	80121e0 <imu_interfaces__srv__ImuCalibration_Request__copy>
 80124a4:	b178      	cbz	r0, 80124c6 <rosidl_typesupport_c__create_service_event_message__imu_interfaces__srv__ImuCalibration+0x7e>
 80124a6:	f1b8 0f00 	cmp.w	r8, #0
 80124aa:	d009      	beq.n	80124c0 <rosidl_typesupport_c__create_service_event_message__imu_interfaces__srv__ImuCalibration+0x78>
 80124ac:	2101      	movs	r1, #1
 80124ae:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 80124b2:	f7ff ff17 	bl	80122e4 <imu_interfaces__srv__ImuCalibration_Response__Sequence__init>
 80124b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80124b8:	4640      	mov	r0, r8
 80124ba:	f7ff ff0b 	bl	80122d4 <imu_interfaces__srv__ImuCalibration_Response__copy>
 80124be:	b110      	cbz	r0, 80124c6 <rosidl_typesupport_c__create_service_event_message__imu_interfaces__srv__ImuCalibration+0x7e>
 80124c0:	4620      	mov	r0, r4
 80124c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124c6:	6873      	ldr	r3, [r6, #4]
 80124c8:	6931      	ldr	r1, [r6, #16]
 80124ca:	4620      	mov	r0, r4
 80124cc:	4798      	blx	r3
 80124ce:	2400      	movs	r4, #0
 80124d0:	4620      	mov	r0, r4
 80124d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124d6:	bf00      	nop

080124d8 <rosidl_typesupport_c__destroy_service_event_message__imu_interfaces__srv__ImuCalibration>:
 80124d8:	b538      	push	{r3, r4, r5, lr}
 80124da:	460d      	mov	r5, r1
 80124dc:	b199      	cbz	r1, 8012506 <rosidl_typesupport_c__destroy_service_event_message__imu_interfaces__srv__ImuCalibration+0x2e>
 80124de:	4604      	mov	r4, r0
 80124e0:	b180      	cbz	r0, 8012504 <rosidl_typesupport_c__destroy_service_event_message__imu_interfaces__srv__ImuCalibration+0x2c>
 80124e2:	f7ff ff7b 	bl	80123dc <imu_interfaces__srv__ImuCalibration_Event__fini>
 80124e6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80124e8:	b110      	cbz	r0, 80124f0 <rosidl_typesupport_c__destroy_service_event_message__imu_interfaces__srv__ImuCalibration+0x18>
 80124ea:	686b      	ldr	r3, [r5, #4]
 80124ec:	6929      	ldr	r1, [r5, #16]
 80124ee:	4798      	blx	r3
 80124f0:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80124f2:	b110      	cbz	r0, 80124fa <rosidl_typesupport_c__destroy_service_event_message__imu_interfaces__srv__ImuCalibration+0x22>
 80124f4:	686b      	ldr	r3, [r5, #4]
 80124f6:	6929      	ldr	r1, [r5, #16]
 80124f8:	4798      	blx	r3
 80124fa:	4620      	mov	r0, r4
 80124fc:	686b      	ldr	r3, [r5, #4]
 80124fe:	6929      	ldr	r1, [r5, #16]
 8012500:	4798      	blx	r3
 8012502:	2001      	movs	r0, #1
 8012504:	bd38      	pop	{r3, r4, r5, pc}
 8012506:	4608      	mov	r0, r1
 8012508:	bd38      	pop	{r3, r4, r5, pc}
 801250a:	bf00      	nop

0801250c <ucdr_serialize_endian_array_char>:
 801250c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012510:	4619      	mov	r1, r3
 8012512:	461f      	mov	r7, r3
 8012514:	4605      	mov	r5, r0
 8012516:	4690      	mov	r8, r2
 8012518:	f7fb fc52 	bl	800ddc0 <ucdr_check_buffer_available_for>
 801251c:	b9e0      	cbnz	r0, 8012558 <ucdr_serialize_endian_array_char+0x4c>
 801251e:	463e      	mov	r6, r7
 8012520:	e009      	b.n	8012536 <ucdr_serialize_endian_array_char+0x2a>
 8012522:	68a8      	ldr	r0, [r5, #8]
 8012524:	f00b fa5b 	bl	801d9de <memcpy>
 8012528:	68ab      	ldr	r3, [r5, #8]
 801252a:	6928      	ldr	r0, [r5, #16]
 801252c:	4423      	add	r3, r4
 801252e:	4420      	add	r0, r4
 8012530:	1b36      	subs	r6, r6, r4
 8012532:	60ab      	str	r3, [r5, #8]
 8012534:	6128      	str	r0, [r5, #16]
 8012536:	2201      	movs	r2, #1
 8012538:	4631      	mov	r1, r6
 801253a:	4628      	mov	r0, r5
 801253c:	f7fb fcc8 	bl	800ded0 <ucdr_check_final_buffer_behavior_array>
 8012540:	1bb9      	subs	r1, r7, r6
 8012542:	4604      	mov	r4, r0
 8012544:	4602      	mov	r2, r0
 8012546:	4441      	add	r1, r8
 8012548:	2800      	cmp	r0, #0
 801254a:	d1ea      	bne.n	8012522 <ucdr_serialize_endian_array_char+0x16>
 801254c:	2301      	movs	r3, #1
 801254e:	7da8      	ldrb	r0, [r5, #22]
 8012550:	756b      	strb	r3, [r5, #21]
 8012552:	4058      	eors	r0, r3
 8012554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012558:	463a      	mov	r2, r7
 801255a:	68a8      	ldr	r0, [r5, #8]
 801255c:	4641      	mov	r1, r8
 801255e:	f00b fa3e 	bl	801d9de <memcpy>
 8012562:	68aa      	ldr	r2, [r5, #8]
 8012564:	692b      	ldr	r3, [r5, #16]
 8012566:	443a      	add	r2, r7
 8012568:	443b      	add	r3, r7
 801256a:	60aa      	str	r2, [r5, #8]
 801256c:	612b      	str	r3, [r5, #16]
 801256e:	e7ed      	b.n	801254c <ucdr_serialize_endian_array_char+0x40>

08012570 <ucdr_deserialize_endian_array_char>:
 8012570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012574:	4619      	mov	r1, r3
 8012576:	461f      	mov	r7, r3
 8012578:	4605      	mov	r5, r0
 801257a:	4690      	mov	r8, r2
 801257c:	f7fb fc20 	bl	800ddc0 <ucdr_check_buffer_available_for>
 8012580:	b9e0      	cbnz	r0, 80125bc <ucdr_deserialize_endian_array_char+0x4c>
 8012582:	463e      	mov	r6, r7
 8012584:	e009      	b.n	801259a <ucdr_deserialize_endian_array_char+0x2a>
 8012586:	68a9      	ldr	r1, [r5, #8]
 8012588:	f00b fa29 	bl	801d9de <memcpy>
 801258c:	68aa      	ldr	r2, [r5, #8]
 801258e:	692b      	ldr	r3, [r5, #16]
 8012590:	4422      	add	r2, r4
 8012592:	4423      	add	r3, r4
 8012594:	1b36      	subs	r6, r6, r4
 8012596:	60aa      	str	r2, [r5, #8]
 8012598:	612b      	str	r3, [r5, #16]
 801259a:	2201      	movs	r2, #1
 801259c:	4631      	mov	r1, r6
 801259e:	4628      	mov	r0, r5
 80125a0:	f7fb fc96 	bl	800ded0 <ucdr_check_final_buffer_behavior_array>
 80125a4:	4604      	mov	r4, r0
 80125a6:	1bb8      	subs	r0, r7, r6
 80125a8:	4622      	mov	r2, r4
 80125aa:	4440      	add	r0, r8
 80125ac:	2c00      	cmp	r4, #0
 80125ae:	d1ea      	bne.n	8012586 <ucdr_deserialize_endian_array_char+0x16>
 80125b0:	2301      	movs	r3, #1
 80125b2:	7da8      	ldrb	r0, [r5, #22]
 80125b4:	756b      	strb	r3, [r5, #21]
 80125b6:	4058      	eors	r0, r3
 80125b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125bc:	463a      	mov	r2, r7
 80125be:	68a9      	ldr	r1, [r5, #8]
 80125c0:	4640      	mov	r0, r8
 80125c2:	f00b fa0c 	bl	801d9de <memcpy>
 80125c6:	68aa      	ldr	r2, [r5, #8]
 80125c8:	692b      	ldr	r3, [r5, #16]
 80125ca:	443a      	add	r2, r7
 80125cc:	443b      	add	r3, r7
 80125ce:	60aa      	str	r2, [r5, #8]
 80125d0:	612b      	str	r3, [r5, #16]
 80125d2:	e7ed      	b.n	80125b0 <ucdr_deserialize_endian_array_char+0x40>

080125d4 <ucdr_serialize_array_uint8_t>:
 80125d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125d8:	4688      	mov	r8, r1
 80125da:	4611      	mov	r1, r2
 80125dc:	4617      	mov	r7, r2
 80125de:	4605      	mov	r5, r0
 80125e0:	f7fb fbee 	bl	800ddc0 <ucdr_check_buffer_available_for>
 80125e4:	b9e0      	cbnz	r0, 8012620 <ucdr_serialize_array_uint8_t+0x4c>
 80125e6:	463e      	mov	r6, r7
 80125e8:	e009      	b.n	80125fe <ucdr_serialize_array_uint8_t+0x2a>
 80125ea:	68a8      	ldr	r0, [r5, #8]
 80125ec:	f00b f9f7 	bl	801d9de <memcpy>
 80125f0:	68aa      	ldr	r2, [r5, #8]
 80125f2:	692b      	ldr	r3, [r5, #16]
 80125f4:	4422      	add	r2, r4
 80125f6:	4423      	add	r3, r4
 80125f8:	1b36      	subs	r6, r6, r4
 80125fa:	60aa      	str	r2, [r5, #8]
 80125fc:	612b      	str	r3, [r5, #16]
 80125fe:	2201      	movs	r2, #1
 8012600:	4631      	mov	r1, r6
 8012602:	4628      	mov	r0, r5
 8012604:	f7fb fc64 	bl	800ded0 <ucdr_check_final_buffer_behavior_array>
 8012608:	1bb9      	subs	r1, r7, r6
 801260a:	4604      	mov	r4, r0
 801260c:	4602      	mov	r2, r0
 801260e:	4441      	add	r1, r8
 8012610:	2800      	cmp	r0, #0
 8012612:	d1ea      	bne.n	80125ea <ucdr_serialize_array_uint8_t+0x16>
 8012614:	2301      	movs	r3, #1
 8012616:	7da8      	ldrb	r0, [r5, #22]
 8012618:	756b      	strb	r3, [r5, #21]
 801261a:	4058      	eors	r0, r3
 801261c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012620:	463a      	mov	r2, r7
 8012622:	68a8      	ldr	r0, [r5, #8]
 8012624:	4641      	mov	r1, r8
 8012626:	f00b f9da 	bl	801d9de <memcpy>
 801262a:	68aa      	ldr	r2, [r5, #8]
 801262c:	692b      	ldr	r3, [r5, #16]
 801262e:	443a      	add	r2, r7
 8012630:	443b      	add	r3, r7
 8012632:	60aa      	str	r2, [r5, #8]
 8012634:	612b      	str	r3, [r5, #16]
 8012636:	e7ed      	b.n	8012614 <ucdr_serialize_array_uint8_t+0x40>

08012638 <ucdr_serialize_endian_array_uint8_t>:
 8012638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801263c:	4619      	mov	r1, r3
 801263e:	461f      	mov	r7, r3
 8012640:	4605      	mov	r5, r0
 8012642:	4690      	mov	r8, r2
 8012644:	f7fb fbbc 	bl	800ddc0 <ucdr_check_buffer_available_for>
 8012648:	b9e0      	cbnz	r0, 8012684 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801264a:	463e      	mov	r6, r7
 801264c:	e009      	b.n	8012662 <ucdr_serialize_endian_array_uint8_t+0x2a>
 801264e:	68a8      	ldr	r0, [r5, #8]
 8012650:	f00b f9c5 	bl	801d9de <memcpy>
 8012654:	68ab      	ldr	r3, [r5, #8]
 8012656:	6928      	ldr	r0, [r5, #16]
 8012658:	4423      	add	r3, r4
 801265a:	4420      	add	r0, r4
 801265c:	1b36      	subs	r6, r6, r4
 801265e:	60ab      	str	r3, [r5, #8]
 8012660:	6128      	str	r0, [r5, #16]
 8012662:	2201      	movs	r2, #1
 8012664:	4631      	mov	r1, r6
 8012666:	4628      	mov	r0, r5
 8012668:	f7fb fc32 	bl	800ded0 <ucdr_check_final_buffer_behavior_array>
 801266c:	1bb9      	subs	r1, r7, r6
 801266e:	4604      	mov	r4, r0
 8012670:	4602      	mov	r2, r0
 8012672:	4441      	add	r1, r8
 8012674:	2800      	cmp	r0, #0
 8012676:	d1ea      	bne.n	801264e <ucdr_serialize_endian_array_uint8_t+0x16>
 8012678:	2301      	movs	r3, #1
 801267a:	7da8      	ldrb	r0, [r5, #22]
 801267c:	756b      	strb	r3, [r5, #21]
 801267e:	4058      	eors	r0, r3
 8012680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012684:	463a      	mov	r2, r7
 8012686:	68a8      	ldr	r0, [r5, #8]
 8012688:	4641      	mov	r1, r8
 801268a:	f00b f9a8 	bl	801d9de <memcpy>
 801268e:	68aa      	ldr	r2, [r5, #8]
 8012690:	692b      	ldr	r3, [r5, #16]
 8012692:	443a      	add	r2, r7
 8012694:	443b      	add	r3, r7
 8012696:	60aa      	str	r2, [r5, #8]
 8012698:	612b      	str	r3, [r5, #16]
 801269a:	e7ed      	b.n	8012678 <ucdr_serialize_endian_array_uint8_t+0x40>

0801269c <ucdr_deserialize_array_uint8_t>:
 801269c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126a0:	4688      	mov	r8, r1
 80126a2:	4611      	mov	r1, r2
 80126a4:	4617      	mov	r7, r2
 80126a6:	4605      	mov	r5, r0
 80126a8:	f7fb fb8a 	bl	800ddc0 <ucdr_check_buffer_available_for>
 80126ac:	b9e0      	cbnz	r0, 80126e8 <ucdr_deserialize_array_uint8_t+0x4c>
 80126ae:	463e      	mov	r6, r7
 80126b0:	e009      	b.n	80126c6 <ucdr_deserialize_array_uint8_t+0x2a>
 80126b2:	68a9      	ldr	r1, [r5, #8]
 80126b4:	f00b f993 	bl	801d9de <memcpy>
 80126b8:	68aa      	ldr	r2, [r5, #8]
 80126ba:	692b      	ldr	r3, [r5, #16]
 80126bc:	4422      	add	r2, r4
 80126be:	4423      	add	r3, r4
 80126c0:	1b36      	subs	r6, r6, r4
 80126c2:	60aa      	str	r2, [r5, #8]
 80126c4:	612b      	str	r3, [r5, #16]
 80126c6:	2201      	movs	r2, #1
 80126c8:	4631      	mov	r1, r6
 80126ca:	4628      	mov	r0, r5
 80126cc:	f7fb fc00 	bl	800ded0 <ucdr_check_final_buffer_behavior_array>
 80126d0:	4604      	mov	r4, r0
 80126d2:	1bb8      	subs	r0, r7, r6
 80126d4:	4622      	mov	r2, r4
 80126d6:	4440      	add	r0, r8
 80126d8:	2c00      	cmp	r4, #0
 80126da:	d1ea      	bne.n	80126b2 <ucdr_deserialize_array_uint8_t+0x16>
 80126dc:	2301      	movs	r3, #1
 80126de:	7da8      	ldrb	r0, [r5, #22]
 80126e0:	756b      	strb	r3, [r5, #21]
 80126e2:	4058      	eors	r0, r3
 80126e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126e8:	463a      	mov	r2, r7
 80126ea:	68a9      	ldr	r1, [r5, #8]
 80126ec:	4640      	mov	r0, r8
 80126ee:	f00b f976 	bl	801d9de <memcpy>
 80126f2:	68aa      	ldr	r2, [r5, #8]
 80126f4:	692b      	ldr	r3, [r5, #16]
 80126f6:	443a      	add	r2, r7
 80126f8:	443b      	add	r3, r7
 80126fa:	60aa      	str	r2, [r5, #8]
 80126fc:	612b      	str	r3, [r5, #16]
 80126fe:	e7ed      	b.n	80126dc <ucdr_deserialize_array_uint8_t+0x40>

08012700 <ucdr_deserialize_endian_array_uint8_t>:
 8012700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012704:	4619      	mov	r1, r3
 8012706:	461f      	mov	r7, r3
 8012708:	4605      	mov	r5, r0
 801270a:	4690      	mov	r8, r2
 801270c:	f7fb fb58 	bl	800ddc0 <ucdr_check_buffer_available_for>
 8012710:	b9e0      	cbnz	r0, 801274c <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8012712:	463e      	mov	r6, r7
 8012714:	e009      	b.n	801272a <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8012716:	68a9      	ldr	r1, [r5, #8]
 8012718:	f00b f961 	bl	801d9de <memcpy>
 801271c:	68aa      	ldr	r2, [r5, #8]
 801271e:	692b      	ldr	r3, [r5, #16]
 8012720:	4422      	add	r2, r4
 8012722:	4423      	add	r3, r4
 8012724:	1b36      	subs	r6, r6, r4
 8012726:	60aa      	str	r2, [r5, #8]
 8012728:	612b      	str	r3, [r5, #16]
 801272a:	2201      	movs	r2, #1
 801272c:	4631      	mov	r1, r6
 801272e:	4628      	mov	r0, r5
 8012730:	f7fb fbce 	bl	800ded0 <ucdr_check_final_buffer_behavior_array>
 8012734:	4604      	mov	r4, r0
 8012736:	1bb8      	subs	r0, r7, r6
 8012738:	4622      	mov	r2, r4
 801273a:	4440      	add	r0, r8
 801273c:	2c00      	cmp	r4, #0
 801273e:	d1ea      	bne.n	8012716 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8012740:	2301      	movs	r3, #1
 8012742:	7da8      	ldrb	r0, [r5, #22]
 8012744:	756b      	strb	r3, [r5, #21]
 8012746:	4058      	eors	r0, r3
 8012748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801274c:	463a      	mov	r2, r7
 801274e:	68a9      	ldr	r1, [r5, #8]
 8012750:	4640      	mov	r0, r8
 8012752:	f00b f944 	bl	801d9de <memcpy>
 8012756:	68aa      	ldr	r2, [r5, #8]
 8012758:	692b      	ldr	r3, [r5, #16]
 801275a:	443a      	add	r2, r7
 801275c:	443b      	add	r3, r7
 801275e:	60aa      	str	r2, [r5, #8]
 8012760:	612b      	str	r3, [r5, #16]
 8012762:	e7ed      	b.n	8012740 <ucdr_deserialize_endian_array_uint8_t+0x40>

08012764 <ucdr_serialize_array_double>:
 8012764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012768:	460e      	mov	r6, r1
 801276a:	2108      	movs	r1, #8
 801276c:	4604      	mov	r4, r0
 801276e:	4617      	mov	r7, r2
 8012770:	f7fb fb86 	bl	800de80 <ucdr_buffer_alignment>
 8012774:	4601      	mov	r1, r0
 8012776:	4620      	mov	r0, r4
 8012778:	7d65      	ldrb	r5, [r4, #21]
 801277a:	f7fb fbc5 	bl	800df08 <ucdr_advance_buffer>
 801277e:	7d21      	ldrb	r1, [r4, #20]
 8012780:	7565      	strb	r5, [r4, #21]
 8012782:	2901      	cmp	r1, #1
 8012784:	d010      	beq.n	80127a8 <ucdr_serialize_array_double+0x44>
 8012786:	b157      	cbz	r7, 801279e <ucdr_serialize_array_double+0x3a>
 8012788:	2500      	movs	r5, #0
 801278a:	e000      	b.n	801278e <ucdr_serialize_array_double+0x2a>
 801278c:	7d21      	ldrb	r1, [r4, #20]
 801278e:	ecb6 0b02 	vldmia	r6!, {d0}
 8012792:	4620      	mov	r0, r4
 8012794:	3501      	adds	r5, #1
 8012796:	f7fb f8c5 	bl	800d924 <ucdr_serialize_endian_double>
 801279a:	42af      	cmp	r7, r5
 801279c:	d1f6      	bne.n	801278c <ucdr_serialize_array_double+0x28>
 801279e:	7da0      	ldrb	r0, [r4, #22]
 80127a0:	f080 0001 	eor.w	r0, r0, #1
 80127a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127a8:	00ff      	lsls	r7, r7, #3
 80127aa:	4639      	mov	r1, r7
 80127ac:	4620      	mov	r0, r4
 80127ae:	f7fb fb07 	bl	800ddc0 <ucdr_check_buffer_available_for>
 80127b2:	b9f8      	cbnz	r0, 80127f4 <ucdr_serialize_array_double+0x90>
 80127b4:	46b8      	mov	r8, r7
 80127b6:	e00a      	b.n	80127ce <ucdr_serialize_array_double+0x6a>
 80127b8:	68a0      	ldr	r0, [r4, #8]
 80127ba:	f00b f910 	bl	801d9de <memcpy>
 80127be:	68a2      	ldr	r2, [r4, #8]
 80127c0:	6923      	ldr	r3, [r4, #16]
 80127c2:	442a      	add	r2, r5
 80127c4:	442b      	add	r3, r5
 80127c6:	eba8 0805 	sub.w	r8, r8, r5
 80127ca:	60a2      	str	r2, [r4, #8]
 80127cc:	6123      	str	r3, [r4, #16]
 80127ce:	2208      	movs	r2, #8
 80127d0:	4641      	mov	r1, r8
 80127d2:	4620      	mov	r0, r4
 80127d4:	f7fb fb7c 	bl	800ded0 <ucdr_check_final_buffer_behavior_array>
 80127d8:	eba7 0108 	sub.w	r1, r7, r8
 80127dc:	4605      	mov	r5, r0
 80127de:	4602      	mov	r2, r0
 80127e0:	4431      	add	r1, r6
 80127e2:	2800      	cmp	r0, #0
 80127e4:	d1e8      	bne.n	80127b8 <ucdr_serialize_array_double+0x54>
 80127e6:	7da0      	ldrb	r0, [r4, #22]
 80127e8:	2308      	movs	r3, #8
 80127ea:	7563      	strb	r3, [r4, #21]
 80127ec:	f080 0001 	eor.w	r0, r0, #1
 80127f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127f4:	463a      	mov	r2, r7
 80127f6:	68a0      	ldr	r0, [r4, #8]
 80127f8:	4631      	mov	r1, r6
 80127fa:	f00b f8f0 	bl	801d9de <memcpy>
 80127fe:	68a2      	ldr	r2, [r4, #8]
 8012800:	6923      	ldr	r3, [r4, #16]
 8012802:	443a      	add	r2, r7
 8012804:	443b      	add	r3, r7
 8012806:	60a2      	str	r2, [r4, #8]
 8012808:	6123      	str	r3, [r4, #16]
 801280a:	e7ec      	b.n	80127e6 <ucdr_serialize_array_double+0x82>

0801280c <ucdr_deserialize_array_double>:
 801280c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012810:	460e      	mov	r6, r1
 8012812:	2108      	movs	r1, #8
 8012814:	4604      	mov	r4, r0
 8012816:	4617      	mov	r7, r2
 8012818:	f7fb fb32 	bl	800de80 <ucdr_buffer_alignment>
 801281c:	4601      	mov	r1, r0
 801281e:	4620      	mov	r0, r4
 8012820:	7d65      	ldrb	r5, [r4, #21]
 8012822:	f7fb fb71 	bl	800df08 <ucdr_advance_buffer>
 8012826:	7d21      	ldrb	r1, [r4, #20]
 8012828:	7565      	strb	r5, [r4, #21]
 801282a:	2901      	cmp	r1, #1
 801282c:	d011      	beq.n	8012852 <ucdr_deserialize_array_double+0x46>
 801282e:	b15f      	cbz	r7, 8012848 <ucdr_deserialize_array_double+0x3c>
 8012830:	2500      	movs	r5, #0
 8012832:	e000      	b.n	8012836 <ucdr_deserialize_array_double+0x2a>
 8012834:	7d21      	ldrb	r1, [r4, #20]
 8012836:	4632      	mov	r2, r6
 8012838:	4620      	mov	r0, r4
 801283a:	3501      	adds	r5, #1
 801283c:	f7fb f9f8 	bl	800dc30 <ucdr_deserialize_endian_double>
 8012840:	42af      	cmp	r7, r5
 8012842:	f106 0608 	add.w	r6, r6, #8
 8012846:	d1f5      	bne.n	8012834 <ucdr_deserialize_array_double+0x28>
 8012848:	7da0      	ldrb	r0, [r4, #22]
 801284a:	f080 0001 	eor.w	r0, r0, #1
 801284e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012852:	00ff      	lsls	r7, r7, #3
 8012854:	4639      	mov	r1, r7
 8012856:	4620      	mov	r0, r4
 8012858:	f7fb fab2 	bl	800ddc0 <ucdr_check_buffer_available_for>
 801285c:	b9f8      	cbnz	r0, 801289e <ucdr_deserialize_array_double+0x92>
 801285e:	46b8      	mov	r8, r7
 8012860:	e00a      	b.n	8012878 <ucdr_deserialize_array_double+0x6c>
 8012862:	68a1      	ldr	r1, [r4, #8]
 8012864:	f00b f8bb 	bl	801d9de <memcpy>
 8012868:	68a2      	ldr	r2, [r4, #8]
 801286a:	6923      	ldr	r3, [r4, #16]
 801286c:	442a      	add	r2, r5
 801286e:	442b      	add	r3, r5
 8012870:	eba8 0805 	sub.w	r8, r8, r5
 8012874:	60a2      	str	r2, [r4, #8]
 8012876:	6123      	str	r3, [r4, #16]
 8012878:	2208      	movs	r2, #8
 801287a:	4641      	mov	r1, r8
 801287c:	4620      	mov	r0, r4
 801287e:	f7fb fb27 	bl	800ded0 <ucdr_check_final_buffer_behavior_array>
 8012882:	4605      	mov	r5, r0
 8012884:	eba7 0008 	sub.w	r0, r7, r8
 8012888:	462a      	mov	r2, r5
 801288a:	4430      	add	r0, r6
 801288c:	2d00      	cmp	r5, #0
 801288e:	d1e8      	bne.n	8012862 <ucdr_deserialize_array_double+0x56>
 8012890:	7da0      	ldrb	r0, [r4, #22]
 8012892:	2308      	movs	r3, #8
 8012894:	7563      	strb	r3, [r4, #21]
 8012896:	f080 0001 	eor.w	r0, r0, #1
 801289a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801289e:	463a      	mov	r2, r7
 80128a0:	68a1      	ldr	r1, [r4, #8]
 80128a2:	4630      	mov	r0, r6
 80128a4:	f00b f89b 	bl	801d9de <memcpy>
 80128a8:	68a2      	ldr	r2, [r4, #8]
 80128aa:	6923      	ldr	r3, [r4, #16]
 80128ac:	443a      	add	r2, r7
 80128ae:	443b      	add	r3, r7
 80128b0:	60a2      	str	r2, [r4, #8]
 80128b2:	6123      	str	r3, [r4, #16]
 80128b4:	e7ec      	b.n	8012890 <ucdr_deserialize_array_double+0x84>
 80128b6:	bf00      	nop

080128b8 <ucdr_serialize_sequence_char>:
 80128b8:	b570      	push	{r4, r5, r6, lr}
 80128ba:	460e      	mov	r6, r1
 80128bc:	4615      	mov	r5, r2
 80128be:	7d01      	ldrb	r1, [r0, #20]
 80128c0:	4604      	mov	r4, r0
 80128c2:	f7fa f941 	bl	800cb48 <ucdr_serialize_endian_uint32_t>
 80128c6:	b90d      	cbnz	r5, 80128cc <ucdr_serialize_sequence_char+0x14>
 80128c8:	2001      	movs	r0, #1
 80128ca:	bd70      	pop	{r4, r5, r6, pc}
 80128cc:	7d21      	ldrb	r1, [r4, #20]
 80128ce:	462b      	mov	r3, r5
 80128d0:	4632      	mov	r2, r6
 80128d2:	4620      	mov	r0, r4
 80128d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80128d8:	f7ff be18 	b.w	801250c <ucdr_serialize_endian_array_char>

080128dc <ucdr_deserialize_sequence_char>:
 80128dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128e0:	461d      	mov	r5, r3
 80128e2:	4616      	mov	r6, r2
 80128e4:	460f      	mov	r7, r1
 80128e6:	461a      	mov	r2, r3
 80128e8:	7d01      	ldrb	r1, [r0, #20]
 80128ea:	4604      	mov	r4, r0
 80128ec:	f7fa fa4a 	bl	800cd84 <ucdr_deserialize_endian_uint32_t>
 80128f0:	682b      	ldr	r3, [r5, #0]
 80128f2:	429e      	cmp	r6, r3
 80128f4:	d208      	bcs.n	8012908 <ucdr_deserialize_sequence_char+0x2c>
 80128f6:	2201      	movs	r2, #1
 80128f8:	75a2      	strb	r2, [r4, #22]
 80128fa:	7d21      	ldrb	r1, [r4, #20]
 80128fc:	463a      	mov	r2, r7
 80128fe:	4620      	mov	r0, r4
 8012900:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012904:	f7ff be34 	b.w	8012570 <ucdr_deserialize_endian_array_char>
 8012908:	2b00      	cmp	r3, #0
 801290a:	d1f6      	bne.n	80128fa <ucdr_deserialize_sequence_char+0x1e>
 801290c:	2001      	movs	r0, #1
 801290e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012912:	bf00      	nop

08012914 <ucdr_serialize_sequence_uint8_t>:
 8012914:	b570      	push	{r4, r5, r6, lr}
 8012916:	460e      	mov	r6, r1
 8012918:	4615      	mov	r5, r2
 801291a:	7d01      	ldrb	r1, [r0, #20]
 801291c:	4604      	mov	r4, r0
 801291e:	f7fa f913 	bl	800cb48 <ucdr_serialize_endian_uint32_t>
 8012922:	b90d      	cbnz	r5, 8012928 <ucdr_serialize_sequence_uint8_t+0x14>
 8012924:	2001      	movs	r0, #1
 8012926:	bd70      	pop	{r4, r5, r6, pc}
 8012928:	7d21      	ldrb	r1, [r4, #20]
 801292a:	462b      	mov	r3, r5
 801292c:	4632      	mov	r2, r6
 801292e:	4620      	mov	r0, r4
 8012930:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012934:	f7ff be80 	b.w	8012638 <ucdr_serialize_endian_array_uint8_t>

08012938 <ucdr_deserialize_sequence_uint8_t>:
 8012938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801293c:	461d      	mov	r5, r3
 801293e:	4616      	mov	r6, r2
 8012940:	460f      	mov	r7, r1
 8012942:	461a      	mov	r2, r3
 8012944:	7d01      	ldrb	r1, [r0, #20]
 8012946:	4604      	mov	r4, r0
 8012948:	f7fa fa1c 	bl	800cd84 <ucdr_deserialize_endian_uint32_t>
 801294c:	682b      	ldr	r3, [r5, #0]
 801294e:	429e      	cmp	r6, r3
 8012950:	d208      	bcs.n	8012964 <ucdr_deserialize_sequence_uint8_t+0x2c>
 8012952:	2201      	movs	r2, #1
 8012954:	75a2      	strb	r2, [r4, #22]
 8012956:	7d21      	ldrb	r1, [r4, #20]
 8012958:	463a      	mov	r2, r7
 801295a:	4620      	mov	r0, r4
 801295c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012960:	f7ff bece 	b.w	8012700 <ucdr_deserialize_endian_array_uint8_t>
 8012964:	2b00      	cmp	r3, #0
 8012966:	d1f6      	bne.n	8012956 <ucdr_deserialize_sequence_uint8_t+0x1e>
 8012968:	2001      	movs	r0, #1
 801296a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801296e:	bf00      	nop

08012970 <uxr_buffer_delete_entity>:
 8012970:	b510      	push	{r4, lr}
 8012972:	2300      	movs	r3, #0
 8012974:	b08e      	sub	sp, #56	@ 0x38
 8012976:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801297a:	2303      	movs	r3, #3
 801297c:	9300      	str	r3, [sp, #0]
 801297e:	2204      	movs	r2, #4
 8012980:	ab06      	add	r3, sp, #24
 8012982:	4604      	mov	r4, r0
 8012984:	f001 fae6 	bl	8013f54 <uxr_prepare_stream_to_write_submessage>
 8012988:	b918      	cbnz	r0, 8012992 <uxr_buffer_delete_entity+0x22>
 801298a:	4604      	mov	r4, r0
 801298c:	4620      	mov	r0, r4
 801298e:	b00e      	add	sp, #56	@ 0x38
 8012990:	bd10      	pop	{r4, pc}
 8012992:	9902      	ldr	r1, [sp, #8]
 8012994:	aa05      	add	r2, sp, #20
 8012996:	4620      	mov	r0, r4
 8012998:	f001 fc16 	bl	80141c8 <uxr_init_base_object_request>
 801299c:	a905      	add	r1, sp, #20
 801299e:	4604      	mov	r4, r0
 80129a0:	a806      	add	r0, sp, #24
 80129a2:	f003 f9cb 	bl	8015d3c <uxr_serialize_DELETE_Payload>
 80129a6:	4620      	mov	r0, r4
 80129a8:	b00e      	add	sp, #56	@ 0x38
 80129aa:	bd10      	pop	{r4, pc}

080129ac <uxr_common_create_entity>:
 80129ac:	b510      	push	{r4, lr}
 80129ae:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80129b2:	b08c      	sub	sp, #48	@ 0x30
 80129b4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80129b8:	f1bc 0f01 	cmp.w	ip, #1
 80129bc:	bf08      	it	eq
 80129be:	f003 0201 	andeq.w	r2, r3, #1
 80129c2:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 80129c6:	bf18      	it	ne
 80129c8:	2200      	movne	r2, #0
 80129ca:	330e      	adds	r3, #14
 80129cc:	441a      	add	r2, r3
 80129ce:	2301      	movs	r3, #1
 80129d0:	e9cd 3100 	strd	r3, r1, [sp]
 80129d4:	b292      	uxth	r2, r2
 80129d6:	9903      	ldr	r1, [sp, #12]
 80129d8:	ab04      	add	r3, sp, #16
 80129da:	4604      	mov	r4, r0
 80129dc:	f001 faba 	bl	8013f54 <uxr_prepare_stream_to_write_submessage>
 80129e0:	b918      	cbnz	r0, 80129ea <uxr_common_create_entity+0x3e>
 80129e2:	4604      	mov	r4, r0
 80129e4:	4620      	mov	r0, r4
 80129e6:	b00c      	add	sp, #48	@ 0x30
 80129e8:	bd10      	pop	{r4, pc}
 80129ea:	9902      	ldr	r1, [sp, #8]
 80129ec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80129ee:	4620      	mov	r0, r4
 80129f0:	f001 fbea 	bl	80141c8 <uxr_init_base_object_request>
 80129f4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80129f6:	4604      	mov	r4, r0
 80129f8:	a804      	add	r0, sp, #16
 80129fa:	f003 f8fd 	bl	8015bf8 <uxr_serialize_CREATE_Payload>
 80129fe:	4620      	mov	r0, r4
 8012a00:	b00c      	add	sp, #48	@ 0x30
 8012a02:	bd10      	pop	{r4, pc}

08012a04 <uxr_buffer_create_participant_bin>:
 8012a04:	b570      	push	{r4, r5, r6, lr}
 8012a06:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8012a0a:	ac11      	add	r4, sp, #68	@ 0x44
 8012a0c:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8012a10:	2303      	movs	r3, #3
 8012a12:	7223      	strb	r3, [r4, #8]
 8012a14:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8012a16:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8012a1a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8012a1e:	2201      	movs	r2, #1
 8012a20:	2100      	movs	r1, #0
 8012a22:	4605      	mov	r5, r0
 8012a24:	7122      	strb	r2, [r4, #4]
 8012a26:	f88d 1014 	strb.w	r1, [sp, #20]
 8012a2a:	b1cb      	cbz	r3, 8012a60 <uxr_buffer_create_participant_bin+0x5c>
 8012a2c:	f88d 201c 	strb.w	r2, [sp, #28]
 8012a30:	9308      	str	r3, [sp, #32]
 8012a32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012a36:	a915      	add	r1, sp, #84	@ 0x54
 8012a38:	a809      	add	r0, sp, #36	@ 0x24
 8012a3a:	f7fb fa15 	bl	800de68 <ucdr_init_buffer>
 8012a3e:	a905      	add	r1, sp, #20
 8012a40:	a809      	add	r0, sp, #36	@ 0x24
 8012a42:	f002 fd9f 	bl	8015584 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8012a46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012a48:	9600      	str	r6, [sp, #0]
 8012a4a:	9401      	str	r4, [sp, #4]
 8012a4c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012a50:	60e3      	str	r3, [r4, #12]
 8012a52:	4628      	mov	r0, r5
 8012a54:	b29b      	uxth	r3, r3
 8012a56:	f7ff ffa9 	bl	80129ac <uxr_common_create_entity>
 8012a5a:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8012a5e:	bd70      	pop	{r4, r5, r6, pc}
 8012a60:	f88d 301c 	strb.w	r3, [sp, #28]
 8012a64:	e7e5      	b.n	8012a32 <uxr_buffer_create_participant_bin+0x2e>
 8012a66:	bf00      	nop

08012a68 <uxr_buffer_create_topic_bin>:
 8012a68:	b570      	push	{r4, r5, r6, lr}
 8012a6a:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8012a6e:	4605      	mov	r5, r0
 8012a70:	9105      	str	r1, [sp, #20]
 8012a72:	4618      	mov	r0, r3
 8012a74:	a997      	add	r1, sp, #604	@ 0x25c
 8012a76:	2302      	movs	r3, #2
 8012a78:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8012a7c:	9204      	str	r2, [sp, #16]
 8012a7e:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8012a82:	f000 f9d5 	bl	8012e30 <uxr_object_id_to_raw>
 8012a86:	2303      	movs	r3, #3
 8012a88:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8012a8c:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8012a8e:	9306      	str	r3, [sp, #24]
 8012a90:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8012a92:	930a      	str	r3, [sp, #40]	@ 0x28
 8012a94:	2301      	movs	r3, #1
 8012a96:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8012a9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	a917      	add	r1, sp, #92	@ 0x5c
 8012aa2:	a80b      	add	r0, sp, #44	@ 0x2c
 8012aa4:	f88d 301c 	strb.w	r3, [sp, #28]
 8012aa8:	f7fb f9de 	bl	800de68 <ucdr_init_buffer>
 8012aac:	a906      	add	r1, sp, #24
 8012aae:	a80b      	add	r0, sp, #44	@ 0x2c
 8012ab0:	f002 fd8a 	bl	80155c8 <uxr_serialize_OBJK_Topic_Binary>
 8012ab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ab6:	9316      	str	r3, [sp, #88]	@ 0x58
 8012ab8:	ac13      	add	r4, sp, #76	@ 0x4c
 8012aba:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012abe:	9600      	str	r6, [sp, #0]
 8012ac0:	9401      	str	r4, [sp, #4]
 8012ac2:	b29b      	uxth	r3, r3
 8012ac4:	4628      	mov	r0, r5
 8012ac6:	f7ff ff71 	bl	80129ac <uxr_common_create_entity>
 8012aca:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8012ace:	bd70      	pop	{r4, r5, r6, pc}

08012ad0 <uxr_buffer_create_publisher_bin>:
 8012ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ad2:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8012ad6:	4605      	mov	r5, r0
 8012ad8:	9105      	str	r1, [sp, #20]
 8012ada:	4618      	mov	r0, r3
 8012adc:	2603      	movs	r6, #3
 8012ade:	a992      	add	r1, sp, #584	@ 0x248
 8012ae0:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8012ae4:	9204      	str	r2, [sp, #16]
 8012ae6:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8012aea:	f000 f9a1 	bl	8012e30 <uxr_object_id_to_raw>
 8012aee:	2300      	movs	r3, #0
 8012af0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012af4:	a912      	add	r1, sp, #72	@ 0x48
 8012af6:	a806      	add	r0, sp, #24
 8012af8:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8012afc:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8012b00:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8012b04:	f7fb f9b0 	bl	800de68 <ucdr_init_buffer>
 8012b08:	a993      	add	r1, sp, #588	@ 0x24c
 8012b0a:	a806      	add	r0, sp, #24
 8012b0c:	f002 fe12 	bl	8015734 <uxr_serialize_OBJK_Publisher_Binary>
 8012b10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012b12:	9311      	str	r3, [sp, #68]	@ 0x44
 8012b14:	ac0e      	add	r4, sp, #56	@ 0x38
 8012b16:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012b1a:	9700      	str	r7, [sp, #0]
 8012b1c:	9401      	str	r4, [sp, #4]
 8012b1e:	b29b      	uxth	r3, r3
 8012b20:	4628      	mov	r0, r5
 8012b22:	f7ff ff43 	bl	80129ac <uxr_common_create_entity>
 8012b26:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8012b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012b2c <uxr_buffer_create_datawriter_bin>:
 8012b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b2e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8012b32:	ac1d      	add	r4, sp, #116	@ 0x74
 8012b34:	9105      	str	r1, [sp, #20]
 8012b36:	4605      	mov	r5, r0
 8012b38:	a9a1      	add	r1, sp, #644	@ 0x284
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	2305      	movs	r3, #5
 8012b3e:	f8bd 72a8 	ldrh.w	r7, [sp, #680]	@ 0x2a8
 8012b42:	9204      	str	r2, [sp, #16]
 8012b44:	7123      	strb	r3, [r4, #4]
 8012b46:	f89d 62ac 	ldrb.w	r6, [sp, #684]	@ 0x2ac
 8012b4a:	f000 f971 	bl	8012e30 <uxr_object_id_to_raw>
 8012b4e:	2303      	movs	r3, #3
 8012b50:	a90e      	add	r1, sp, #56	@ 0x38
 8012b52:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8012b54:	7223      	strb	r3, [r4, #8]
 8012b56:	f000 f96b 	bl	8012e30 <uxr_object_id_to_raw>
 8012b5a:	f89d 32a5 	ldrb.w	r3, [sp, #677]	@ 0x2a5
 8012b5e:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 8012b62:	2200      	movs	r2, #0
 8012b64:	3f00      	subs	r7, #0
 8012b66:	fab3 f383 	clz	r3, r3
 8012b6a:	f89d 12a6 	ldrb.w	r1, [sp, #678]	@ 0x2a6
 8012b6e:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 8012b72:	bf18      	it	ne
 8012b74:	2701      	movne	r7, #1
 8012b76:	095b      	lsrs	r3, r3, #5
 8012b78:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 8012b7c:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 8012b80:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 8012b84:	2201      	movs	r2, #1
 8012b86:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 8012b8a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012b8e:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 8012b92:	b919      	cbnz	r1, 8012b9c <uxr_buffer_create_datawriter_bin+0x70>
 8012b94:	f043 0302 	orr.w	r3, r3, #2
 8012b98:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012b9c:	f89d 22a4 	ldrb.w	r2, [sp, #676]	@ 0x2a4
 8012ba0:	2a01      	cmp	r2, #1
 8012ba2:	d022      	beq.n	8012bea <uxr_buffer_create_datawriter_bin+0xbe>
 8012ba4:	2a03      	cmp	r2, #3
 8012ba6:	d01b      	beq.n	8012be0 <uxr_buffer_create_datawriter_bin+0xb4>
 8012ba8:	b91a      	cbnz	r2, 8012bb2 <uxr_buffer_create_datawriter_bin+0x86>
 8012baa:	f043 0308 	orr.w	r3, r3, #8
 8012bae:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012bb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012bb6:	a921      	add	r1, sp, #132	@ 0x84
 8012bb8:	a806      	add	r0, sp, #24
 8012bba:	f7fb f955 	bl	800de68 <ucdr_init_buffer>
 8012bbe:	a90e      	add	r1, sp, #56	@ 0x38
 8012bc0:	a806      	add	r0, sp, #24
 8012bc2:	f002 fe1d 	bl	8015800 <uxr_serialize_OBJK_DataWriter_Binary>
 8012bc6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012bc8:	9600      	str	r6, [sp, #0]
 8012bca:	9401      	str	r4, [sp, #4]
 8012bcc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012bd0:	60e3      	str	r3, [r4, #12]
 8012bd2:	4628      	mov	r0, r5
 8012bd4:	b29b      	uxth	r3, r3
 8012bd6:	f7ff fee9 	bl	80129ac <uxr_common_create_entity>
 8012bda:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8012bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012be0:	f043 0320 	orr.w	r3, r3, #32
 8012be4:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012be8:	e7e3      	b.n	8012bb2 <uxr_buffer_create_datawriter_bin+0x86>
 8012bea:	f043 0310 	orr.w	r3, r3, #16
 8012bee:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012bf2:	e7de      	b.n	8012bb2 <uxr_buffer_create_datawriter_bin+0x86>

08012bf4 <uxr_buffer_create_replier_bin>:
 8012bf4:	b570      	push	{r4, r5, r6, lr}
 8012bf6:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8012bfa:	4605      	mov	r5, r0
 8012bfc:	9105      	str	r1, [sp, #20]
 8012bfe:	4618      	mov	r0, r3
 8012c00:	a999      	add	r1, sp, #612	@ 0x264
 8012c02:	2308      	movs	r3, #8
 8012c04:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 8012c08:	9204      	str	r2, [sp, #16]
 8012c0a:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 8012c0e:	f000 f90f 	bl	8012e30 <uxr_object_id_to_raw>
 8012c12:	2203      	movs	r2, #3
 8012c14:	f88d 205c 	strb.w	r2, [sp, #92]	@ 0x5c
 8012c18:	9a9e      	ldr	r2, [sp, #632]	@ 0x278
 8012c1a:	9206      	str	r2, [sp, #24]
 8012c1c:	9a9f      	ldr	r2, [sp, #636]	@ 0x27c
 8012c1e:	9207      	str	r2, [sp, #28]
 8012c20:	9aa0      	ldr	r2, [sp, #640]	@ 0x280
 8012c22:	9208      	str	r2, [sp, #32]
 8012c24:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8012c26:	920c      	str	r2, [sp, #48]	@ 0x30
 8012c28:	9aa1      	ldr	r2, [sp, #644]	@ 0x284
 8012c2a:	920a      	str	r2, [sp, #40]	@ 0x28
 8012c2c:	2301      	movs	r3, #1
 8012c2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012c32:	a919      	add	r1, sp, #100	@ 0x64
 8012c34:	a80d      	add	r0, sp, #52	@ 0x34
 8012c36:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8012c3a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8012c3e:	f7fb f913 	bl	800de68 <ucdr_init_buffer>
 8012c42:	a906      	add	r1, sp, #24
 8012c44:	a80d      	add	r0, sp, #52	@ 0x34
 8012c46:	f002 fe07 	bl	8015858 <uxr_serialize_OBJK_Replier_Binary>
 8012c4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012c4c:	9318      	str	r3, [sp, #96]	@ 0x60
 8012c4e:	ac15      	add	r4, sp, #84	@ 0x54
 8012c50:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012c54:	9600      	str	r6, [sp, #0]
 8012c56:	9401      	str	r4, [sp, #4]
 8012c58:	b29b      	uxth	r3, r3
 8012c5a:	4628      	mov	r0, r5
 8012c5c:	f7ff fea6 	bl	80129ac <uxr_common_create_entity>
 8012c60:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 8012c64:	bd70      	pop	{r4, r5, r6, pc}
 8012c66:	bf00      	nop

08012c68 <get_custom_error>:
 8012c68:	4b01      	ldr	r3, [pc, #4]	@ (8012c70 <get_custom_error+0x8>)
 8012c6a:	7818      	ldrb	r0, [r3, #0]
 8012c6c:	4770      	bx	lr
 8012c6e:	bf00      	nop
 8012c70:	2000f13d 	.word	0x2000f13d

08012c74 <recv_custom_msg>:
 8012c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c78:	b089      	sub	sp, #36	@ 0x24
 8012c7a:	4693      	mov	fp, r2
 8012c7c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8012c80:	9104      	str	r1, [sp, #16]
 8012c82:	2100      	movs	r1, #0
 8012c84:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8012c88:	9305      	str	r3, [sp, #20]
 8012c8a:	4604      	mov	r4, r0
 8012c8c:	f88d 101e 	strb.w	r1, [sp, #30]
 8012c90:	b332      	cbz	r2, 8012ce0 <recv_custom_msg+0x6c>
 8012c92:	f200 2a02 	addw	sl, r0, #514	@ 0x202
 8012c96:	f10d 091f 	add.w	r9, sp, #31
 8012c9a:	f10d 0814 	add.w	r8, sp, #20
 8012c9e:	f10d 071e 	add.w	r7, sp, #30
 8012ca2:	f44f 7600 	mov.w	r6, #512	@ 0x200
 8012ca6:	e004      	b.n	8012cb2 <recv_custom_msg+0x3e>
 8012ca8:	9b05      	ldr	r3, [sp, #20]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	dd10      	ble.n	8012cd0 <recv_custom_msg+0x5c>
 8012cae:	f8d4 5274 	ldr.w	r5, [r4, #628]	@ 0x274
 8012cb2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8012cb6:	e9cd 6700 	strd	r6, r7, [sp]
 8012cba:	4623      	mov	r3, r4
 8012cbc:	4622      	mov	r2, r4
 8012cbe:	4629      	mov	r1, r5
 8012cc0:	4650      	mov	r0, sl
 8012cc2:	f001 fc93 	bl	80145ec <uxr_read_framed_msg>
 8012cc6:	2800      	cmp	r0, #0
 8012cc8:	d0ee      	beq.n	8012ca8 <recv_custom_msg+0x34>
 8012cca:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012cce:	b1a3      	cbz	r3, 8012cfa <recv_custom_msg+0x86>
 8012cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8012d0c <recv_custom_msg+0x98>)
 8012cd2:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8012cd6:	701a      	strb	r2, [r3, #0]
 8012cd8:	2000      	movs	r0, #0
 8012cda:	b009      	add	sp, #36	@ 0x24
 8012cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ce0:	f10d 021f 	add.w	r2, sp, #31
 8012ce4:	9200      	str	r2, [sp, #0]
 8012ce6:	4601      	mov	r1, r0
 8012ce8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012cec:	47a8      	blx	r5
 8012cee:	2800      	cmp	r0, #0
 8012cf0:	d0ee      	beq.n	8012cd0 <recv_custom_msg+0x5c>
 8012cf2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d1ea      	bne.n	8012cd0 <recv_custom_msg+0x5c>
 8012cfa:	9b04      	ldr	r3, [sp, #16]
 8012cfc:	f8cb 0000 	str.w	r0, [fp]
 8012d00:	2001      	movs	r0, #1
 8012d02:	601c      	str	r4, [r3, #0]
 8012d04:	b009      	add	sp, #36	@ 0x24
 8012d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d0a:	bf00      	nop
 8012d0c:	2000f13d 	.word	0x2000f13d

08012d10 <send_custom_msg>:
 8012d10:	b570      	push	{r4, r5, r6, lr}
 8012d12:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8012d16:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8012d1a:	b086      	sub	sp, #24
 8012d1c:	4616      	mov	r6, r2
 8012d1e:	b965      	cbnz	r5, 8012d3a <send_custom_msg+0x2a>
 8012d20:	f10d 0317 	add.w	r3, sp, #23
 8012d24:	47a0      	blx	r4
 8012d26:	b108      	cbz	r0, 8012d2c <send_custom_msg+0x1c>
 8012d28:	42b0      	cmp	r0, r6
 8012d2a:	d014      	beq.n	8012d56 <send_custom_msg+0x46>
 8012d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8012d5c <send_custom_msg+0x4c>)
 8012d2e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8012d32:	701a      	strb	r2, [r3, #0]
 8012d34:	2000      	movs	r0, #0
 8012d36:	b006      	add	sp, #24
 8012d38:	bd70      	pop	{r4, r5, r6, pc}
 8012d3a:	f10d 0217 	add.w	r2, sp, #23
 8012d3e:	9202      	str	r2, [sp, #8]
 8012d40:	2200      	movs	r2, #0
 8012d42:	e9cd 6200 	strd	r6, r2, [sp]
 8012d46:	460b      	mov	r3, r1
 8012d48:	4602      	mov	r2, r0
 8012d4a:	4621      	mov	r1, r4
 8012d4c:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8012d50:	f001 fa6e 	bl	8014230 <uxr_write_framed_msg>
 8012d54:	e7e7      	b.n	8012d26 <send_custom_msg+0x16>
 8012d56:	2001      	movs	r0, #1
 8012d58:	b006      	add	sp, #24
 8012d5a:	bd70      	pop	{r4, r5, r6, pc}
 8012d5c:	2000f13d 	.word	0x2000f13d

08012d60 <uxr_set_custom_transport_callbacks>:
 8012d60:	b410      	push	{r4}
 8012d62:	9c01      	ldr	r4, [sp, #4]
 8012d64:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8012d68:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8012d6c:	9b02      	ldr	r3, [sp, #8]
 8012d6e:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8012d72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d76:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8012d7a:	4770      	bx	lr

08012d7c <uxr_init_custom_transport>:
 8012d7c:	b538      	push	{r3, r4, r5, lr}
 8012d7e:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8012d82:	b303      	cbz	r3, 8012dc6 <uxr_init_custom_transport+0x4a>
 8012d84:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8012d88:	4604      	mov	r4, r0
 8012d8a:	b1e2      	cbz	r2, 8012dc6 <uxr_init_custom_transport+0x4a>
 8012d8c:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8012d90:	b1ca      	cbz	r2, 8012dc6 <uxr_init_custom_transport+0x4a>
 8012d92:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8012d96:	b1b2      	cbz	r2, 8012dc6 <uxr_init_custom_transport+0x4a>
 8012d98:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8012d9c:	4798      	blx	r3
 8012d9e:	4605      	mov	r5, r0
 8012da0:	b188      	cbz	r0, 8012dc6 <uxr_init_custom_transport+0x4a>
 8012da2:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8012da6:	b98b      	cbnz	r3, 8012dcc <uxr_init_custom_transport+0x50>
 8012da8:	490b      	ldr	r1, [pc, #44]	@ (8012dd8 <uxr_init_custom_transport+0x5c>)
 8012daa:	4b0c      	ldr	r3, [pc, #48]	@ (8012ddc <uxr_init_custom_transport+0x60>)
 8012dac:	4a0c      	ldr	r2, [pc, #48]	@ (8012de0 <uxr_init_custom_transport+0x64>)
 8012dae:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8012db2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012db6:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8012dba:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8012dbe:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8012dc2:	4628      	mov	r0, r5
 8012dc4:	bd38      	pop	{r3, r4, r5, pc}
 8012dc6:	2500      	movs	r5, #0
 8012dc8:	4628      	mov	r0, r5
 8012dca:	bd38      	pop	{r3, r4, r5, pc}
 8012dcc:	2100      	movs	r1, #0
 8012dce:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8012dd2:	f001 fa27 	bl	8014224 <uxr_init_framing_io>
 8012dd6:	e7e7      	b.n	8012da8 <uxr_init_custom_transport+0x2c>
 8012dd8:	08012d11 	.word	0x08012d11
 8012ddc:	08012c75 	.word	0x08012c75
 8012de0:	08012c69 	.word	0x08012c69

08012de4 <uxr_close_custom_transport>:
 8012de4:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8012de8:	4718      	bx	r3
 8012dea:	bf00      	nop

08012dec <uxr_object_id>:
 8012dec:	b082      	sub	sp, #8
 8012dee:	2300      	movs	r3, #0
 8012df0:	f88d 1006 	strb.w	r1, [sp, #6]
 8012df4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012df8:	f360 030f 	bfi	r3, r0, #0, #16
 8012dfc:	f362 431f 	bfi	r3, r2, #16, #16
 8012e00:	4618      	mov	r0, r3
 8012e02:	b002      	add	sp, #8
 8012e04:	4770      	bx	lr
 8012e06:	bf00      	nop

08012e08 <uxr_object_id_from_raw>:
 8012e08:	7843      	ldrb	r3, [r0, #1]
 8012e0a:	7801      	ldrb	r1, [r0, #0]
 8012e0c:	b082      	sub	sp, #8
 8012e0e:	f003 020f 	and.w	r2, r3, #15
 8012e12:	f88d 2006 	strb.w	r2, [sp, #6]
 8012e16:	091b      	lsrs	r3, r3, #4
 8012e18:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012e1c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8012e20:	2000      	movs	r0, #0
 8012e22:	f363 000f 	bfi	r0, r3, #0, #16
 8012e26:	f362 401f 	bfi	r0, r2, #16, #16
 8012e2a:	b002      	add	sp, #8
 8012e2c:	4770      	bx	lr
 8012e2e:	bf00      	nop

08012e30 <uxr_object_id_to_raw>:
 8012e30:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8012e34:	b082      	sub	sp, #8
 8012e36:	f3c0 120b 	ubfx	r2, r0, #4, #12
 8012e3a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8012e3e:	700a      	strb	r2, [r1, #0]
 8012e40:	704b      	strb	r3, [r1, #1]
 8012e42:	b002      	add	sp, #8
 8012e44:	4770      	bx	lr
 8012e46:	bf00      	nop

08012e48 <uxr_buffer_request_data>:
 8012e48:	b530      	push	{r4, r5, lr}
 8012e4a:	b095      	sub	sp, #84	@ 0x54
 8012e4c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8012e50:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8012e52:	f88d 301c 	strb.w	r3, [sp, #28]
 8012e56:	2200      	movs	r2, #0
 8012e58:	2d00      	cmp	r5, #0
 8012e5a:	bf14      	ite	ne
 8012e5c:	2101      	movne	r1, #1
 8012e5e:	4611      	moveq	r1, r2
 8012e60:	4604      	mov	r4, r0
 8012e62:	f88d 201d 	strb.w	r2, [sp, #29]
 8012e66:	f88d 201e 	strb.w	r2, [sp, #30]
 8012e6a:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8012e6e:	d021      	beq.n	8012eb4 <uxr_buffer_request_data+0x6c>
 8012e70:	682a      	ldr	r2, [r5, #0]
 8012e72:	686b      	ldr	r3, [r5, #4]
 8012e74:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8012e78:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8012e7c:	2210      	movs	r2, #16
 8012e7e:	2308      	movs	r3, #8
 8012e80:	2100      	movs	r1, #0
 8012e82:	e9cd 3100 	strd	r3, r1, [sp]
 8012e86:	4620      	mov	r0, r4
 8012e88:	9905      	ldr	r1, [sp, #20]
 8012e8a:	ab0c      	add	r3, sp, #48	@ 0x30
 8012e8c:	f001 f862 	bl	8013f54 <uxr_prepare_stream_to_write_submessage>
 8012e90:	b918      	cbnz	r0, 8012e9a <uxr_buffer_request_data+0x52>
 8012e92:	4604      	mov	r4, r0
 8012e94:	4620      	mov	r0, r4
 8012e96:	b015      	add	sp, #84	@ 0x54
 8012e98:	bd30      	pop	{r4, r5, pc}
 8012e9a:	9904      	ldr	r1, [sp, #16]
 8012e9c:	aa06      	add	r2, sp, #24
 8012e9e:	4620      	mov	r0, r4
 8012ea0:	f001 f992 	bl	80141c8 <uxr_init_base_object_request>
 8012ea4:	a906      	add	r1, sp, #24
 8012ea6:	4604      	mov	r4, r0
 8012ea8:	a80c      	add	r0, sp, #48	@ 0x30
 8012eaa:	f002 fff1 	bl	8015e90 <uxr_serialize_READ_DATA_Payload>
 8012eae:	4620      	mov	r0, r4
 8012eb0:	b015      	add	sp, #84	@ 0x54
 8012eb2:	bd30      	pop	{r4, r5, pc}
 8012eb4:	2208      	movs	r2, #8
 8012eb6:	e7e2      	b.n	8012e7e <uxr_buffer_request_data+0x36>

08012eb8 <uxr_buffer_cancel_data>:
 8012eb8:	b510      	push	{r4, lr}
 8012eba:	b094      	sub	sp, #80	@ 0x50
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	9301      	str	r3, [sp, #4]
 8012ec0:	9205      	str	r2, [sp, #20]
 8012ec2:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012ec6:	2201      	movs	r2, #1
 8012ec8:	f88d 301e 	strb.w	r3, [sp, #30]
 8012ecc:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8012ed0:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8012ed4:	2308      	movs	r3, #8
 8012ed6:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8012eda:	9300      	str	r3, [sp, #0]
 8012edc:	2210      	movs	r2, #16
 8012ede:	ab0c      	add	r3, sp, #48	@ 0x30
 8012ee0:	4604      	mov	r4, r0
 8012ee2:	f001 f837 	bl	8013f54 <uxr_prepare_stream_to_write_submessage>
 8012ee6:	b918      	cbnz	r0, 8012ef0 <uxr_buffer_cancel_data+0x38>
 8012ee8:	4604      	mov	r4, r0
 8012eea:	4620      	mov	r0, r4
 8012eec:	b014      	add	sp, #80	@ 0x50
 8012eee:	bd10      	pop	{r4, pc}
 8012ef0:	9905      	ldr	r1, [sp, #20]
 8012ef2:	aa06      	add	r2, sp, #24
 8012ef4:	4620      	mov	r0, r4
 8012ef6:	f001 f967 	bl	80141c8 <uxr_init_base_object_request>
 8012efa:	a906      	add	r1, sp, #24
 8012efc:	4604      	mov	r4, r0
 8012efe:	a80c      	add	r0, sp, #48	@ 0x30
 8012f00:	f002 ffc6 	bl	8015e90 <uxr_serialize_READ_DATA_Payload>
 8012f04:	4620      	mov	r0, r4
 8012f06:	b014      	add	sp, #80	@ 0x50
 8012f08:	bd10      	pop	{r4, pc}
 8012f0a:	bf00      	nop

08012f0c <read_submessage_format>:
 8012f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f10:	b095      	sub	sp, #84	@ 0x54
 8012f12:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 8012f16:	b113      	cbz	r3, 8012f1e <read_submessage_format+0x12>
 8012f18:	b015      	add	sp, #84	@ 0x54
 8012f1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f1e:	460c      	mov	r4, r1
 8012f20:	4616      	mov	r6, r2
 8012f22:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8012f26:	461d      	mov	r5, r3
 8012f28:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8012f2a:	9304      	str	r3, [sp, #16]
 8012f2c:	1a52      	subs	r2, r2, r1
 8012f2e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012f30:	9305      	str	r3, [sp, #20]
 8012f32:	4680      	mov	r8, r0
 8012f34:	a80c      	add	r0, sp, #48	@ 0x30
 8012f36:	f89d 9076 	ldrb.w	r9, [sp, #118]	@ 0x76
 8012f3a:	f7fa ff95 	bl	800de68 <ucdr_init_buffer>
 8012f3e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8012f42:	a80c      	add	r0, sp, #48	@ 0x30
 8012f44:	f7fa ff64 	bl	800de10 <ucdr_set_on_full_buffer_callback>
 8012f48:	69e3      	ldr	r3, [r4, #28]
 8012f4a:	b35b      	cbz	r3, 8012fa4 <read_submessage_format+0x98>
 8012f4c:	f1b9 0f07 	cmp.w	r9, #7
 8012f50:	751d      	strb	r5, [r3, #20]
 8012f52:	d043      	beq.n	8012fdc <read_submessage_format+0xd0>
 8012f54:	f1b9 0f08 	cmp.w	r9, #8
 8012f58:	d032      	beq.n	8012fc0 <read_submessage_format+0xb4>
 8012f5a:	f1b9 0f06 	cmp.w	r9, #6
 8012f5e:	d008      	beq.n	8012f72 <read_submessage_format+0x66>
 8012f60:	2201      	movs	r2, #1
 8012f62:	751a      	strb	r2, [r3, #20]
 8012f64:	4631      	mov	r1, r6
 8012f66:	4620      	mov	r0, r4
 8012f68:	f7fa ffce 	bl	800df08 <ucdr_advance_buffer>
 8012f6c:	b015      	add	sp, #84	@ 0x54
 8012f6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f72:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 8012f76:	2d00      	cmp	r5, #0
 8012f78:	d0f2      	beq.n	8012f60 <read_submessage_format+0x54>
 8012f7a:	ab0c      	add	r3, sp, #48	@ 0x30
 8012f7c:	e9cd 3600 	strd	r3, r6, [sp]
 8012f80:	2306      	movs	r3, #6
 8012f82:	f88d 3016 	strb.w	r3, [sp, #22]
 8012f86:	f8d8 308c 	ldr.w	r3, [r8, #140]	@ 0x8c
 8012f8a:	9302      	str	r3, [sp, #8]
 8012f8c:	463a      	mov	r2, r7
 8012f8e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8012f92:	4640      	mov	r0, r8
 8012f94:	47a8      	blx	r5
 8012f96:	69e3      	ldr	r3, [r4, #28]
 8012f98:	2201      	movs	r2, #1
 8012f9a:	f888 20b4 	strb.w	r2, [r8, #180]	@ 0xb4
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d1de      	bne.n	8012f60 <read_submessage_format+0x54>
 8012fa2:	e7df      	b.n	8012f64 <read_submessage_format+0x58>
 8012fa4:	f1b9 0f07 	cmp.w	r9, #7
 8012fa8:	d032      	beq.n	8013010 <read_submessage_format+0x104>
 8012faa:	f1b9 0f08 	cmp.w	r9, #8
 8012fae:	d02a      	beq.n	8013006 <read_submessage_format+0xfa>
 8012fb0:	f1b9 0f06 	cmp.w	r9, #6
 8012fb4:	d1d6      	bne.n	8012f64 <read_submessage_format+0x58>
 8012fb6:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 8012fba:	2d00      	cmp	r5, #0
 8012fbc:	d1dd      	bne.n	8012f7a <read_submessage_format+0x6e>
 8012fbe:	e7d1      	b.n	8012f64 <read_submessage_format+0x58>
 8012fc0:	f8d8 20a4 	ldr.w	r2, [r8, #164]	@ 0xa4
 8012fc4:	2a00      	cmp	r2, #0
 8012fc6:	d0cb      	beq.n	8012f60 <read_submessage_format+0x54>
 8012fc8:	a906      	add	r1, sp, #24
 8012fca:	a80c      	add	r0, sp, #48	@ 0x30
 8012fcc:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8012fce:	f003 f833 	bl	8016038 <uxr_deserialize_SampleIdentity>
 8012fd2:	bb28      	cbnz	r0, 8013020 <read_submessage_format+0x114>
 8012fd4:	69e3      	ldr	r3, [r4, #28]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d1c2      	bne.n	8012f60 <read_submessage_format+0x54>
 8012fda:	e7c3      	b.n	8012f64 <read_submessage_format+0x58>
 8012fdc:	f8d8 20ac 	ldr.w	r2, [r8, #172]	@ 0xac
 8012fe0:	b16a      	cbz	r2, 8012ffe <read_submessage_format+0xf2>
 8012fe2:	a906      	add	r1, sp, #24
 8012fe4:	a80c      	add	r0, sp, #48	@ 0x30
 8012fe6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8012fe8:	f002 fd06 	bl	80159f8 <uxr_deserialize_BaseObjectRequest>
 8012fec:	2800      	cmp	r0, #0
 8012fee:	d13a      	bne.n	8013066 <read_submessage_format+0x15a>
 8012ff0:	68a2      	ldr	r2, [r4, #8]
 8012ff2:	69e3      	ldr	r3, [r4, #28]
 8012ff4:	4432      	add	r2, r6
 8012ff6:	60a2      	str	r2, [r4, #8]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d1b1      	bne.n	8012f60 <read_submessage_format+0x54>
 8012ffc:	e7b2      	b.n	8012f64 <read_submessage_format+0x58>
 8012ffe:	68a2      	ldr	r2, [r4, #8]
 8013000:	4432      	add	r2, r6
 8013002:	60a2      	str	r2, [r4, #8]
 8013004:	e7ac      	b.n	8012f60 <read_submessage_format+0x54>
 8013006:	f8d8 30a4 	ldr.w	r3, [r8, #164]	@ 0xa4
 801300a:	2b00      	cmp	r3, #0
 801300c:	d1dc      	bne.n	8012fc8 <read_submessage_format+0xbc>
 801300e:	e7a9      	b.n	8012f64 <read_submessage_format+0x58>
 8013010:	f8d8 30ac 	ldr.w	r3, [r8, #172]	@ 0xac
 8013014:	2b00      	cmp	r3, #0
 8013016:	d1e4      	bne.n	8012fe2 <read_submessage_format+0xd6>
 8013018:	68a3      	ldr	r3, [r4, #8]
 801301a:	4433      	add	r3, r6
 801301c:	60a3      	str	r3, [r4, #8]
 801301e:	e7a1      	b.n	8012f64 <read_submessage_format+0x58>
 8013020:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8013024:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013026:	1a52      	subs	r2, r2, r1
 8013028:	1aed      	subs	r5, r5, r3
 801302a:	a80c      	add	r0, sp, #48	@ 0x30
 801302c:	f7fa ff1c 	bl	800de68 <ucdr_init_buffer>
 8013030:	4435      	add	r5, r6
 8013032:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013036:	a80c      	add	r0, sp, #48	@ 0x30
 8013038:	f7fa feea 	bl	800de10 <ucdr_set_on_full_buffer_callback>
 801303c:	b2ad      	uxth	r5, r5
 801303e:	ab0c      	add	r3, sp, #48	@ 0x30
 8013040:	9300      	str	r3, [sp, #0]
 8013042:	9501      	str	r5, [sp, #4]
 8013044:	2108      	movs	r1, #8
 8013046:	f88d 1016 	strb.w	r1, [sp, #22]
 801304a:	f8d8 10a8 	ldr.w	r1, [r8, #168]	@ 0xa8
 801304e:	9102      	str	r1, [sp, #8]
 8013050:	ab06      	add	r3, sp, #24
 8013052:	f8d8 50a4 	ldr.w	r5, [r8, #164]	@ 0xa4
 8013056:	9905      	ldr	r1, [sp, #20]
 8013058:	463a      	mov	r2, r7
 801305a:	4640      	mov	r0, r8
 801305c:	47a8      	blx	r5
 801305e:	2301      	movs	r3, #1
 8013060:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 8013064:	e7b6      	b.n	8012fd4 <read_submessage_format+0xc8>
 8013066:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801306a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801306c:	1a52      	subs	r2, r2, r1
 801306e:	1aed      	subs	r5, r5, r3
 8013070:	a80c      	add	r0, sp, #48	@ 0x30
 8013072:	f7fa fef9 	bl	800de68 <ucdr_init_buffer>
 8013076:	4435      	add	r5, r6
 8013078:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801307c:	a80c      	add	r0, sp, #48	@ 0x30
 801307e:	f7fa fec7 	bl	800de10 <ucdr_set_on_full_buffer_callback>
 8013082:	b2ad      	uxth	r5, r5
 8013084:	ab0c      	add	r3, sp, #48	@ 0x30
 8013086:	9300      	str	r3, [sp, #0]
 8013088:	9501      	str	r5, [sp, #4]
 801308a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801308e:	2107      	movs	r1, #7
 8013090:	f88d 1016 	strb.w	r1, [sp, #22]
 8013094:	f8d8 10b0 	ldr.w	r1, [r8, #176]	@ 0xb0
 8013098:	9102      	str	r1, [sp, #8]
 801309a:	ba5b      	rev16	r3, r3
 801309c:	b29b      	uxth	r3, r3
 801309e:	f8d8 50ac 	ldr.w	r5, [r8, #172]	@ 0xac
 80130a2:	9905      	ldr	r1, [sp, #20]
 80130a4:	463a      	mov	r2, r7
 80130a6:	4640      	mov	r0, r8
 80130a8:	47a8      	blx	r5
 80130aa:	2301      	movs	r3, #1
 80130ac:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 80130b0:	e79e      	b.n	8012ff0 <read_submessage_format+0xe4>
 80130b2:	bf00      	nop

080130b4 <on_get_fragmentation_info>:
 80130b4:	b500      	push	{lr}
 80130b6:	b08b      	sub	sp, #44	@ 0x2c
 80130b8:	4601      	mov	r1, r0
 80130ba:	2204      	movs	r2, #4
 80130bc:	a802      	add	r0, sp, #8
 80130be:	f7fa fed3 	bl	800de68 <ucdr_init_buffer>
 80130c2:	f10d 0305 	add.w	r3, sp, #5
 80130c6:	f10d 0206 	add.w	r2, sp, #6
 80130ca:	a901      	add	r1, sp, #4
 80130cc:	a802      	add	r0, sp, #8
 80130ce:	f001 fe45 	bl	8014d5c <uxr_read_submessage_header>
 80130d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80130d6:	2b0d      	cmp	r3, #13
 80130d8:	d003      	beq.n	80130e2 <on_get_fragmentation_info+0x2e>
 80130da:	2000      	movs	r0, #0
 80130dc:	b00b      	add	sp, #44	@ 0x2c
 80130de:	f85d fb04 	ldr.w	pc, [sp], #4
 80130e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80130e6:	f013 0f02 	tst.w	r3, #2
 80130ea:	bf0c      	ite	eq
 80130ec:	2001      	moveq	r0, #1
 80130ee:	2002      	movne	r0, #2
 80130f0:	b00b      	add	sp, #44	@ 0x2c
 80130f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80130f6:	bf00      	nop

080130f8 <read_submessage_get_info>:
 80130f8:	b570      	push	{r4, r5, r6, lr}
 80130fa:	2500      	movs	r5, #0
 80130fc:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8013100:	4604      	mov	r4, r0
 8013102:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8013106:	460e      	mov	r6, r1
 8013108:	a810      	add	r0, sp, #64	@ 0x40
 801310a:	4629      	mov	r1, r5
 801310c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8013110:	f00a fb8a 	bl	801d828 <memset>
 8013114:	a903      	add	r1, sp, #12
 8013116:	4630      	mov	r0, r6
 8013118:	f002 fdfc 	bl	8015d14 <uxr_deserialize_GET_INFO_Payload>
 801311c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013120:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8013124:	4620      	mov	r0, r4
 8013126:	f001 f847 	bl	80141b8 <uxr_session_header_offset>
 801312a:	462b      	mov	r3, r5
 801312c:	9000      	str	r0, [sp, #0]
 801312e:	220c      	movs	r2, #12
 8013130:	a905      	add	r1, sp, #20
 8013132:	a808      	add	r0, sp, #32
 8013134:	f7fa fe86 	bl	800de44 <ucdr_init_buffer_origin_offset>
 8013138:	a910      	add	r1, sp, #64	@ 0x40
 801313a:	a808      	add	r0, sp, #32
 801313c:	f002 fe5c 	bl	8015df8 <uxr_serialize_INFO_Payload>
 8013140:	9b08      	ldr	r3, [sp, #32]
 8013142:	462a      	mov	r2, r5
 8013144:	4629      	mov	r1, r5
 8013146:	4620      	mov	r0, r4
 8013148:	f000 ffe2 	bl	8014110 <uxr_stamp_session_header>
 801314c:	a808      	add	r0, sp, #32
 801314e:	f7fa feb7 	bl	800dec0 <ucdr_buffer_length>
 8013152:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013154:	4602      	mov	r2, r0
 8013156:	a905      	add	r1, sp, #20
 8013158:	e9d3 0400 	ldrd	r0, r4, [r3]
 801315c:	47a0      	blx	r4
 801315e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8013162:	bd70      	pop	{r4, r5, r6, pc}

08013164 <write_submessage_acknack.isra.0>:
 8013164:	b570      	push	{r4, r5, r6, lr}
 8013166:	b092      	sub	sp, #72	@ 0x48
 8013168:	4605      	mov	r5, r0
 801316a:	460e      	mov	r6, r1
 801316c:	4614      	mov	r4, r2
 801316e:	f001 f823 	bl	80141b8 <uxr_session_header_offset>
 8013172:	a905      	add	r1, sp, #20
 8013174:	9000      	str	r0, [sp, #0]
 8013176:	2300      	movs	r3, #0
 8013178:	a80a      	add	r0, sp, #40	@ 0x28
 801317a:	2211      	movs	r2, #17
 801317c:	f7fa fe62 	bl	800de44 <ucdr_init_buffer_origin_offset>
 8013180:	2318      	movs	r3, #24
 8013182:	fb03 5404 	mla	r4, r3, r4, r5
 8013186:	2205      	movs	r2, #5
 8013188:	2300      	movs	r3, #0
 801318a:	3450      	adds	r4, #80	@ 0x50
 801318c:	210a      	movs	r1, #10
 801318e:	a80a      	add	r0, sp, #40	@ 0x28
 8013190:	f001 fdca 	bl	8014d28 <uxr_buffer_submessage_header>
 8013194:	a903      	add	r1, sp, #12
 8013196:	4620      	mov	r0, r4
 8013198:	f008 fa38 	bl	801b60c <uxr_compute_acknack>
 801319c:	ba40      	rev16	r0, r0
 801319e:	f8ad 000e 	strh.w	r0, [sp, #14]
 80131a2:	a903      	add	r1, sp, #12
 80131a4:	a80a      	add	r0, sp, #40	@ 0x28
 80131a6:	f88d 6010 	strb.w	r6, [sp, #16]
 80131aa:	f002 fe95 	bl	8015ed8 <uxr_serialize_ACKNACK_Payload>
 80131ae:	2200      	movs	r2, #0
 80131b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80131b2:	4611      	mov	r1, r2
 80131b4:	4628      	mov	r0, r5
 80131b6:	f000 ffab 	bl	8014110 <uxr_stamp_session_header>
 80131ba:	a80a      	add	r0, sp, #40	@ 0x28
 80131bc:	f7fa fe80 	bl	800dec0 <ucdr_buffer_length>
 80131c0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80131c2:	4602      	mov	r2, r0
 80131c4:	a905      	add	r1, sp, #20
 80131c6:	e9d3 0400 	ldrd	r0, r4, [r3]
 80131ca:	47a0      	blx	r4
 80131cc:	b012      	add	sp, #72	@ 0x48
 80131ce:	bd70      	pop	{r4, r5, r6, pc}

080131d0 <uxr_init_session>:
 80131d0:	b510      	push	{r4, lr}
 80131d2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8013208 <uxr_init_session+0x38>
 80131d6:	2300      	movs	r3, #0
 80131d8:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 80131dc:	4604      	mov	r4, r0
 80131de:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 80131e2:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 80131e6:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 80131ea:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 80131ee:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 80131f2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80131f6:	2181      	movs	r1, #129	@ 0x81
 80131f8:	f000 feee 	bl	8013fd8 <uxr_init_session_info>
 80131fc:	f104 0008 	add.w	r0, r4, #8
 8013200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013204:	f001 bcac 	b.w	8014b60 <uxr_init_stream_storage>
	...

08013210 <uxr_set_status_callback>:
 8013210:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8013214:	4770      	bx	lr
 8013216:	bf00      	nop

08013218 <uxr_set_topic_callback>:
 8013218:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 801321c:	4770      	bx	lr
 801321e:	bf00      	nop

08013220 <uxr_set_request_callback>:
 8013220:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8013224:	4770      	bx	lr
 8013226:	bf00      	nop

08013228 <uxr_set_reply_callback>:
 8013228:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 801322c:	4770      	bx	lr
 801322e:	bf00      	nop

08013230 <uxr_create_output_best_effort_stream>:
 8013230:	b570      	push	{r4, r5, r6, lr}
 8013232:	b082      	sub	sp, #8
 8013234:	4604      	mov	r4, r0
 8013236:	460d      	mov	r5, r1
 8013238:	4616      	mov	r6, r2
 801323a:	f000 ffbd 	bl	80141b8 <uxr_session_header_offset>
 801323e:	4632      	mov	r2, r6
 8013240:	4603      	mov	r3, r0
 8013242:	4629      	mov	r1, r5
 8013244:	f104 0008 	add.w	r0, r4, #8
 8013248:	b002      	add	sp, #8
 801324a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801324e:	f001 bcd1 	b.w	8014bf4 <uxr_add_output_best_effort_buffer>
 8013252:	bf00      	nop

08013254 <uxr_create_output_reliable_stream>:
 8013254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013256:	b085      	sub	sp, #20
 8013258:	4604      	mov	r4, r0
 801325a:	460d      	mov	r5, r1
 801325c:	4616      	mov	r6, r2
 801325e:	461f      	mov	r7, r3
 8013260:	f000 ffaa 	bl	80141b8 <uxr_session_header_offset>
 8013264:	463b      	mov	r3, r7
 8013266:	9000      	str	r0, [sp, #0]
 8013268:	4632      	mov	r2, r6
 801326a:	4629      	mov	r1, r5
 801326c:	f104 0008 	add.w	r0, r4, #8
 8013270:	f001 fcd4 	bl	8014c1c <uxr_add_output_reliable_buffer>
 8013274:	b005      	add	sp, #20
 8013276:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013278 <uxr_create_input_best_effort_stream>:
 8013278:	b082      	sub	sp, #8
 801327a:	3008      	adds	r0, #8
 801327c:	b002      	add	sp, #8
 801327e:	f001 bce7 	b.w	8014c50 <uxr_add_input_best_effort_buffer>
 8013282:	bf00      	nop

08013284 <uxr_create_input_reliable_stream>:
 8013284:	b510      	push	{r4, lr}
 8013286:	b084      	sub	sp, #16
 8013288:	4c03      	ldr	r4, [pc, #12]	@ (8013298 <uxr_create_input_reliable_stream+0x14>)
 801328a:	9400      	str	r4, [sp, #0]
 801328c:	3008      	adds	r0, #8
 801328e:	f001 fcf5 	bl	8014c7c <uxr_add_input_reliable_buffer>
 8013292:	b004      	add	sp, #16
 8013294:	bd10      	pop	{r4, pc}
 8013296:	bf00      	nop
 8013298:	080130b5 	.word	0x080130b5

0801329c <uxr_epoch_millis>:
 801329c:	b510      	push	{r4, lr}
 801329e:	4604      	mov	r4, r0
 80132a0:	f001 fda2 	bl	8014de8 <uxr_nanos>
 80132a4:	e9d4 3426 	ldrd	r3, r4, [r4, #152]	@ 0x98
 80132a8:	1ac0      	subs	r0, r0, r3
 80132aa:	4a04      	ldr	r2, [pc, #16]	@ (80132bc <uxr_epoch_millis+0x20>)
 80132ac:	f04f 0300 	mov.w	r3, #0
 80132b0:	eb61 0104 	sbc.w	r1, r1, r4
 80132b4:	f7ed fcd8 	bl	8000c68 <__aeabi_ldivmod>
 80132b8:	bd10      	pop	{r4, pc}
 80132ba:	bf00      	nop
 80132bc:	000f4240 	.word	0x000f4240

080132c0 <uxr_epoch_nanos>:
 80132c0:	b510      	push	{r4, lr}
 80132c2:	4604      	mov	r4, r0
 80132c4:	f001 fd90 	bl	8014de8 <uxr_nanos>
 80132c8:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 80132cc:	1ac0      	subs	r0, r0, r3
 80132ce:	eb61 0102 	sbc.w	r1, r1, r2
 80132d2:	bd10      	pop	{r4, pc}

080132d4 <uxr_flash_output_streams>:
 80132d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132d8:	7e03      	ldrb	r3, [r0, #24]
 80132da:	b084      	sub	sp, #16
 80132dc:	4604      	mov	r4, r0
 80132de:	b373      	cbz	r3, 801333e <uxr_flash_output_streams+0x6a>
 80132e0:	2500      	movs	r5, #0
 80132e2:	f100 0908 	add.w	r9, r0, #8
 80132e6:	f10d 0802 	add.w	r8, sp, #2
 80132ea:	4628      	mov	r0, r5
 80132ec:	af03      	add	r7, sp, #12
 80132ee:	ae02      	add	r6, sp, #8
 80132f0:	e006      	b.n	8013300 <uxr_flash_output_streams+0x2c>
 80132f2:	7e23      	ldrb	r3, [r4, #24]
 80132f4:	3501      	adds	r5, #1
 80132f6:	b2e8      	uxtb	r0, r5
 80132f8:	4283      	cmp	r3, r0
 80132fa:	f109 0910 	add.w	r9, r9, #16
 80132fe:	d91e      	bls.n	801333e <uxr_flash_output_streams+0x6a>
 8013300:	2201      	movs	r2, #1
 8013302:	4611      	mov	r1, r2
 8013304:	f001 fbf4 	bl	8014af0 <uxr_stream_id>
 8013308:	4643      	mov	r3, r8
 801330a:	4684      	mov	ip, r0
 801330c:	463a      	mov	r2, r7
 801330e:	4631      	mov	r1, r6
 8013310:	4648      	mov	r0, r9
 8013312:	f8cd c004 	str.w	ip, [sp, #4]
 8013316:	f008 f9fd 	bl	801b714 <uxr_prepare_best_effort_buffer_to_send>
 801331a:	2800      	cmp	r0, #0
 801331c:	d0e9      	beq.n	80132f2 <uxr_flash_output_streams+0x1e>
 801331e:	9b02      	ldr	r3, [sp, #8]
 8013320:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8013324:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8013328:	4620      	mov	r0, r4
 801332a:	f000 fef1 	bl	8014110 <uxr_stamp_session_header>
 801332e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013330:	9a03      	ldr	r2, [sp, #12]
 8013332:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8013336:	9902      	ldr	r1, [sp, #8]
 8013338:	6818      	ldr	r0, [r3, #0]
 801333a:	47d0      	blx	sl
 801333c:	e7d9      	b.n	80132f2 <uxr_flash_output_streams+0x1e>
 801333e:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8013342:	b37b      	cbz	r3, 80133a4 <uxr_flash_output_streams+0xd0>
 8013344:	f04f 0900 	mov.w	r9, #0
 8013348:	f104 0520 	add.w	r5, r4, #32
 801334c:	f10d 0802 	add.w	r8, sp, #2
 8013350:	af03      	add	r7, sp, #12
 8013352:	ae02      	add	r6, sp, #8
 8013354:	4648      	mov	r0, r9
 8013356:	2201      	movs	r2, #1
 8013358:	2102      	movs	r1, #2
 801335a:	f001 fbc9 	bl	8014af0 <uxr_stream_id>
 801335e:	9001      	str	r0, [sp, #4]
 8013360:	e00e      	b.n	8013380 <uxr_flash_output_streams+0xac>
 8013362:	9b02      	ldr	r3, [sp, #8]
 8013364:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8013368:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801336c:	4620      	mov	r0, r4
 801336e:	f000 fecf 	bl	8014110 <uxr_stamp_session_header>
 8013372:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013374:	9a03      	ldr	r2, [sp, #12]
 8013376:	f8d3 a004 	ldr.w	sl, [r3, #4]
 801337a:	9902      	ldr	r1, [sp, #8]
 801337c:	6818      	ldr	r0, [r3, #0]
 801337e:	47d0      	blx	sl
 8013380:	4643      	mov	r3, r8
 8013382:	463a      	mov	r2, r7
 8013384:	4631      	mov	r1, r6
 8013386:	4628      	mov	r0, r5
 8013388:	f008 fbd8 	bl	801bb3c <uxr_prepare_next_reliable_buffer_to_send>
 801338c:	2800      	cmp	r0, #0
 801338e:	d1e8      	bne.n	8013362 <uxr_flash_output_streams+0x8e>
 8013390:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8013394:	f109 0901 	add.w	r9, r9, #1
 8013398:	fa5f f089 	uxtb.w	r0, r9
 801339c:	4283      	cmp	r3, r0
 801339e:	f105 0528 	add.w	r5, r5, #40	@ 0x28
 80133a2:	d8d8      	bhi.n	8013356 <uxr_flash_output_streams+0x82>
 80133a4:	b004      	add	sp, #16
 80133a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133aa:	bf00      	nop

080133ac <read_submessage_info>:
 80133ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133b0:	460d      	mov	r5, r1
 80133b2:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80133b6:	4669      	mov	r1, sp
 80133b8:	4607      	mov	r7, r0
 80133ba:	4628      	mov	r0, r5
 80133bc:	f002 fbba 	bl	8015b34 <uxr_deserialize_BaseObjectReply>
 80133c0:	a902      	add	r1, sp, #8
 80133c2:	4604      	mov	r4, r0
 80133c4:	4628      	mov	r0, r5
 80133c6:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80133ca:	f7f9 f8ef 	bl	800c5ac <ucdr_deserialize_bool>
 80133ce:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80133d2:	4004      	ands	r4, r0
 80133d4:	b2e4      	uxtb	r4, r4
 80133d6:	b95b      	cbnz	r3, 80133f0 <read_submessage_info+0x44>
 80133d8:	a987      	add	r1, sp, #540	@ 0x21c
 80133da:	4628      	mov	r0, r5
 80133dc:	f7f9 f8e6 	bl	800c5ac <ucdr_deserialize_bool>
 80133e0:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 80133e4:	4606      	mov	r6, r0
 80133e6:	b94b      	cbnz	r3, 80133fc <read_submessage_info+0x50>
 80133e8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80133ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133f0:	a903      	add	r1, sp, #12
 80133f2:	4628      	mov	r0, r5
 80133f4:	f002 fa60 	bl	80158b8 <uxr_deserialize_ObjectVariant>
 80133f8:	4004      	ands	r4, r0
 80133fa:	e7ed      	b.n	80133d8 <read_submessage_info+0x2c>
 80133fc:	a988      	add	r1, sp, #544	@ 0x220
 80133fe:	4628      	mov	r0, r5
 8013400:	f7f9 f902 	bl	800c608 <ucdr_deserialize_uint8_t>
 8013404:	4234      	tst	r4, r6
 8013406:	d0ef      	beq.n	80133e8 <read_submessage_info+0x3c>
 8013408:	2800      	cmp	r0, #0
 801340a:	d0ed      	beq.n	80133e8 <read_submessage_info+0x3c>
 801340c:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8013410:	2b0d      	cmp	r3, #13
 8013412:	d1e9      	bne.n	80133e8 <read_submessage_info+0x3c>
 8013414:	a98a      	add	r1, sp, #552	@ 0x228
 8013416:	4628      	mov	r0, r5
 8013418:	f7f9 fe92 	bl	800d140 <ucdr_deserialize_int16_t>
 801341c:	b140      	cbz	r0, 8013430 <read_submessage_info+0x84>
 801341e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8013422:	2b00      	cmp	r3, #0
 8013424:	dd07      	ble.n	8013436 <read_submessage_info+0x8a>
 8013426:	f1b8 0f00 	cmp.w	r8, #0
 801342a:	bf0c      	ite	eq
 801342c:	2002      	moveq	r0, #2
 801342e:	2001      	movne	r0, #1
 8013430:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8013434:	e7d8      	b.n	80133e8 <read_submessage_info+0x3c>
 8013436:	2000      	movs	r0, #0
 8013438:	e7fa      	b.n	8013430 <read_submessage_info+0x84>
 801343a:	bf00      	nop

0801343c <read_submessage_list>:
 801343c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013440:	b097      	sub	sp, #92	@ 0x5c
 8013442:	4604      	mov	r4, r0
 8013444:	460d      	mov	r5, r1
 8013446:	9209      	str	r2, [sp, #36]	@ 0x24
 8013448:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801344c:	aa0c      	add	r2, sp, #48	@ 0x30
 801344e:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8013452:	4628      	mov	r0, r5
 8013454:	f001 fc82 	bl	8014d5c <uxr_read_submessage_header>
 8013458:	2800      	cmp	r0, #0
 801345a:	f000 812c 	beq.w	80136b6 <read_submessage_list+0x27a>
 801345e:	f89d 102e 	ldrb.w	r1, [sp, #46]	@ 0x2e
 8013462:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013464:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 8013468:	f89d 702f 	ldrb.w	r7, [sp, #47]	@ 0x2f
 801346c:	3902      	subs	r1, #2
 801346e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8013472:	290d      	cmp	r1, #13
 8013474:	d8e8      	bhi.n	8013448 <read_submessage_list+0xc>
 8013476:	a201      	add	r2, pc, #4	@ (adr r2, 801347c <read_submessage_list+0x40>)
 8013478:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 801347c:	080136ad 	.word	0x080136ad
 8013480:	08013449 	.word	0x08013449
 8013484:	0801369d 	.word	0x0801369d
 8013488:	0801363f 	.word	0x0801363f
 801348c:	08013635 	.word	0x08013635
 8013490:	08013449 	.word	0x08013449
 8013494:	08013449 	.word	0x08013449
 8013498:	080135b9 	.word	0x080135b9
 801349c:	08013551 	.word	0x08013551
 80134a0:	08013511 	.word	0x08013511
 80134a4:	08013449 	.word	0x08013449
 80134a8:	08013449 	.word	0x08013449
 80134ac:	08013449 	.word	0x08013449
 80134b0:	080134b5 	.word	0x080134b5
 80134b4:	a910      	add	r1, sp, #64	@ 0x40
 80134b6:	4628      	mov	r0, r5
 80134b8:	f002 fd6c 	bl	8015f94 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80134bc:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 80134c0:	2e00      	cmp	r6, #0
 80134c2:	f000 8100 	beq.w	80136c6 <read_submessage_list+0x28a>
 80134c6:	f001 fc8f 	bl	8014de8 <uxr_nanos>
 80134ca:	f04f 0800 	mov.w	r8, #0
 80134ce:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 80134d0:	4602      	mov	r2, r0
 80134d2:	460b      	mov	r3, r1
 80134d4:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80134d6:	4990      	ldr	r1, [pc, #576]	@ (8013718 <read_submessage_list+0x2dc>)
 80134d8:	46c4      	mov	ip, r8
 80134da:	fbc0 7c01 	smlal	r7, ip, r0, r1
 80134de:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 80134e2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80134e4:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80134e6:	46c6      	mov	lr, r8
 80134e8:	fbc0 7e01 	smlal	r7, lr, r0, r1
 80134ec:	46bc      	mov	ip, r7
 80134ee:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 80134f2:	fbc0 7801 	smlal	r7, r8, r0, r1
 80134f6:	e9cd ce02 	strd	ip, lr, [sp, #8]
 80134fa:	e9cd 7800 	strd	r7, r8, [sp]
 80134fe:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8013502:	9106      	str	r1, [sp, #24]
 8013504:	4620      	mov	r0, r4
 8013506:	47b0      	blx	r6
 8013508:	2301      	movs	r3, #1
 801350a:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 801350e:	e79b      	b.n	8013448 <read_submessage_list+0xc>
 8013510:	a910      	add	r1, sp, #64	@ 0x40
 8013512:	4628      	mov	r0, r5
 8013514:	f002 fd1e 	bl	8015f54 <uxr_deserialize_HEARTBEAT_Payload>
 8013518:	2100      	movs	r1, #0
 801351a:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 801351e:	f001 fb03 	bl	8014b28 <uxr_stream_id_from_raw>
 8013522:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8013526:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013528:	4631      	mov	r1, r6
 801352a:	f104 0008 	add.w	r0, r4, #8
 801352e:	f001 fbdb 	bl	8014ce8 <uxr_get_input_reliable_stream>
 8013532:	2800      	cmp	r0, #0
 8013534:	d088      	beq.n	8013448 <read_submessage_list+0xc>
 8013536:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 801353a:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801353e:	f008 f859 	bl	801b5f4 <uxr_process_heartbeat>
 8013542:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8013546:	4632      	mov	r2, r6
 8013548:	4620      	mov	r0, r4
 801354a:	f7ff fe0b 	bl	8013164 <write_submessage_acknack.isra.0>
 801354e:	e77b      	b.n	8013448 <read_submessage_list+0xc>
 8013550:	a910      	add	r1, sp, #64	@ 0x40
 8013552:	4628      	mov	r0, r5
 8013554:	f002 fcd6 	bl	8015f04 <uxr_deserialize_ACKNACK_Payload>
 8013558:	2100      	movs	r1, #0
 801355a:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 801355e:	f001 fae3 	bl	8014b28 <uxr_stream_id_from_raw>
 8013562:	900d      	str	r0, [sp, #52]	@ 0x34
 8013564:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8013568:	f104 0008 	add.w	r0, r4, #8
 801356c:	f001 fba8 	bl	8014cc0 <uxr_get_output_reliable_stream>
 8013570:	4606      	mov	r6, r0
 8013572:	2800      	cmp	r0, #0
 8013574:	f43f af68 	beq.w	8013448 <read_submessage_list+0xc>
 8013578:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 801357c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8013580:	ba49      	rev16	r1, r1
 8013582:	b289      	uxth	r1, r1
 8013584:	f008 fb84 	bl	801bc90 <uxr_process_acknack>
 8013588:	4630      	mov	r0, r6
 801358a:	f008 fb45 	bl	801bc18 <uxr_begin_output_nack_buffer_it>
 801358e:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8013592:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8013596:	e005      	b.n	80135a4 <read_submessage_list+0x168>
 8013598:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801359a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801359c:	685f      	ldr	r7, [r3, #4]
 801359e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80135a0:	6818      	ldr	r0, [r3, #0]
 80135a2:	47b8      	blx	r7
 80135a4:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 80135a8:	aa0f      	add	r2, sp, #60	@ 0x3c
 80135aa:	4641      	mov	r1, r8
 80135ac:	4630      	mov	r0, r6
 80135ae:	f008 fb35 	bl	801bc1c <uxr_next_reliable_nack_buffer_to_send>
 80135b2:	2800      	cmp	r0, #0
 80135b4:	d1f0      	bne.n	8013598 <read_submessage_list+0x15c>
 80135b6:	e747      	b.n	8013448 <read_submessage_list+0xc>
 80135b8:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 80135bc:	4641      	mov	r1, r8
 80135be:	900d      	str	r0, [sp, #52]	@ 0x34
 80135c0:	4628      	mov	r0, r5
 80135c2:	f002 fa19 	bl	80159f8 <uxr_deserialize_BaseObjectRequest>
 80135c6:	3e04      	subs	r6, #4
 80135c8:	4640      	mov	r0, r8
 80135ca:	a90f      	add	r1, sp, #60	@ 0x3c
 80135cc:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 80135d0:	f000 fe18 	bl	8014204 <uxr_parse_base_object_request>
 80135d4:	fa1f f886 	uxth.w	r8, r6
 80135d8:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 80135dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80135de:	f8bd 9032 	ldrh.w	r9, [sp, #50]	@ 0x32
 80135e2:	9110      	str	r1, [sp, #64]	@ 0x40
 80135e4:	f007 070e 	and.w	r7, r7, #14
 80135e8:	b136      	cbz	r6, 80135f8 <read_submessage_list+0x1bc>
 80135ea:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80135ee:	9300      	str	r3, [sp, #0]
 80135f0:	464a      	mov	r2, r9
 80135f2:	2300      	movs	r3, #0
 80135f4:	4620      	mov	r0, r4
 80135f6:	47b0      	blx	r6
 80135f8:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 80135fa:	b16b      	cbz	r3, 8013618 <read_submessage_list+0x1dc>
 80135fc:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80135fe:	2100      	movs	r1, #0
 8013600:	3802      	subs	r0, #2
 8013602:	e002      	b.n	801360a <read_submessage_list+0x1ce>
 8013604:	3101      	adds	r1, #1
 8013606:	428b      	cmp	r3, r1
 8013608:	d006      	beq.n	8013618 <read_submessage_list+0x1dc>
 801360a:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 801360e:	454e      	cmp	r6, r9
 8013610:	d1f8      	bne.n	8013604 <read_submessage_list+0x1c8>
 8013612:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8013614:	2200      	movs	r2, #0
 8013616:	545a      	strb	r2, [r3, r1]
 8013618:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801361c:	9102      	str	r1, [sp, #8]
 801361e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013620:	9101      	str	r1, [sp, #4]
 8013622:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8013624:	9100      	str	r1, [sp, #0]
 8013626:	463b      	mov	r3, r7
 8013628:	4642      	mov	r2, r8
 801362a:	4629      	mov	r1, r5
 801362c:	4620      	mov	r0, r4
 801362e:	f7ff fc6d 	bl	8012f0c <read_submessage_format>
 8013632:	e709      	b.n	8013448 <read_submessage_list+0xc>
 8013634:	4629      	mov	r1, r5
 8013636:	4620      	mov	r0, r4
 8013638:	f7ff feb8 	bl	80133ac <read_submessage_info>
 801363c:	e704      	b.n	8013448 <read_submessage_list+0xc>
 801363e:	2b00      	cmp	r3, #0
 8013640:	d03c      	beq.n	80136bc <read_submessage_list+0x280>
 8013642:	a910      	add	r1, sp, #64	@ 0x40
 8013644:	4628      	mov	r0, r5
 8013646:	f002 fbb9 	bl	8015dbc <uxr_deserialize_STATUS_Payload>
 801364a:	a90e      	add	r1, sp, #56	@ 0x38
 801364c:	a810      	add	r0, sp, #64	@ 0x40
 801364e:	aa0d      	add	r2, sp, #52	@ 0x34
 8013650:	f000 fdd8 	bl	8014204 <uxr_parse_base_object_request>
 8013654:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 8013658:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801365a:	f89d 8044 	ldrb.w	r8, [sp, #68]	@ 0x44
 801365e:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8013662:	910f      	str	r1, [sp, #60]	@ 0x3c
 8013664:	b136      	cbz	r6, 8013674 <read_submessage_list+0x238>
 8013666:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801366a:	9300      	str	r3, [sp, #0]
 801366c:	463a      	mov	r2, r7
 801366e:	4643      	mov	r3, r8
 8013670:	4620      	mov	r0, r4
 8013672:	47b0      	blx	r6
 8013674:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8013676:	2a00      	cmp	r2, #0
 8013678:	f43f aee6 	beq.w	8013448 <read_submessage_list+0xc>
 801367c:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801367e:	2100      	movs	r1, #0
 8013680:	3802      	subs	r0, #2
 8013682:	e003      	b.n	801368c <read_submessage_list+0x250>
 8013684:	3101      	adds	r1, #1
 8013686:	4291      	cmp	r1, r2
 8013688:	f43f aede 	beq.w	8013448 <read_submessage_list+0xc>
 801368c:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 8013690:	42be      	cmp	r6, r7
 8013692:	d1f7      	bne.n	8013684 <read_submessage_list+0x248>
 8013694:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8013696:	f803 8001 	strb.w	r8, [r3, r1]
 801369a:	e6d5      	b.n	8013448 <read_submessage_list+0xc>
 801369c:	2b00      	cmp	r3, #0
 801369e:	f47f aed3 	bne.w	8013448 <read_submessage_list+0xc>
 80136a2:	4629      	mov	r1, r5
 80136a4:	4620      	mov	r0, r4
 80136a6:	f000 fcf5 	bl	8014094 <uxr_read_create_session_status>
 80136aa:	e6cd      	b.n	8013448 <read_submessage_list+0xc>
 80136ac:	4629      	mov	r1, r5
 80136ae:	4620      	mov	r0, r4
 80136b0:	f7ff fd22 	bl	80130f8 <read_submessage_get_info>
 80136b4:	e6c8      	b.n	8013448 <read_submessage_list+0xc>
 80136b6:	b017      	add	sp, #92	@ 0x5c
 80136b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80136bc:	4629      	mov	r1, r5
 80136be:	4620      	mov	r0, r4
 80136c0:	f000 fcf6 	bl	80140b0 <uxr_read_delete_session_status>
 80136c4:	e6c0      	b.n	8013448 <read_submessage_list+0xc>
 80136c6:	f001 fb8f 	bl	8014de8 <uxr_nanos>
 80136ca:	e9dd 7214 	ldrd	r7, r2, [sp, #80]	@ 0x50
 80136ce:	f8df c048 	ldr.w	ip, [pc, #72]	@ 8013718 <read_submessage_list+0x2dc>
 80136d2:	4633      	mov	r3, r6
 80136d4:	fbc7 230c 	smlal	r2, r3, r7, ip
 80136d8:	1810      	adds	r0, r2, r0
 80136da:	eb43 0301 	adc.w	r3, r3, r1
 80136de:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	@ 0x48
 80136e2:	46b6      	mov	lr, r6
 80136e4:	fbc1 2e0c 	smlal	r2, lr, r1, ip
 80136e8:	e9dd 1710 	ldrd	r1, r7, [sp, #64]	@ 0x40
 80136ec:	fbc1 760c 	smlal	r7, r6, r1, ip
 80136f0:	19d2      	adds	r2, r2, r7
 80136f2:	eb4e 0106 	adc.w	r1, lr, r6
 80136f6:	1a80      	subs	r0, r0, r2
 80136f8:	eb63 0301 	sbc.w	r3, r3, r1
 80136fc:	0fda      	lsrs	r2, r3, #31
 80136fe:	1812      	adds	r2, r2, r0
 8013700:	f143 0300 	adc.w	r3, r3, #0
 8013704:	0852      	lsrs	r2, r2, #1
 8013706:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 801370a:	105b      	asrs	r3, r3, #1
 801370c:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8013710:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8013714:	e6f8      	b.n	8013508 <read_submessage_list+0xcc>
 8013716:	bf00      	nop
 8013718:	3b9aca00 	.word	0x3b9aca00

0801371c <listen_message_reliably>:
 801371c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013720:	f1b1 0b00 	subs.w	fp, r1, #0
 8013724:	b09f      	sub	sp, #124	@ 0x7c
 8013726:	4606      	mov	r6, r0
 8013728:	bfb8      	it	lt
 801372a:	f06f 4b00 	mvnlt.w	fp, #2147483648	@ 0x80000000
 801372e:	f001 fb41 	bl	8014db4 <uxr_millis>
 8013732:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8013736:	9003      	str	r0, [sp, #12]
 8013738:	9104      	str	r1, [sp, #16]
 801373a:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 801373e:	f10d 0a24 	add.w	sl, sp, #36	@ 0x24
 8013742:	2b00      	cmp	r3, #0
 8013744:	f000 80a4 	beq.w	8013890 <listen_message_reliably+0x174>
 8013748:	2500      	movs	r5, #0
 801374a:	e9cd b806 	strd	fp, r8, [sp, #24]
 801374e:	f106 0420 	add.w	r4, r6, #32
 8013752:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8013756:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 801375a:	4628      	mov	r0, r5
 801375c:	e011      	b.n	8013782 <listen_message_reliably+0x66>
 801375e:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8013762:	42ba      	cmp	r2, r7
 8013764:	eb73 0109 	sbcs.w	r1, r3, r9
 8013768:	bfb8      	it	lt
 801376a:	4699      	movlt	r9, r3
 801376c:	f105 0501 	add.w	r5, r5, #1
 8013770:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8013774:	b2e8      	uxtb	r0, r5
 8013776:	bfb8      	it	lt
 8013778:	4617      	movlt	r7, r2
 801377a:	4283      	cmp	r3, r0
 801377c:	f104 0428 	add.w	r4, r4, #40	@ 0x28
 8013780:	d94a      	bls.n	8013818 <listen_message_reliably+0xfc>
 8013782:	2201      	movs	r2, #1
 8013784:	2102      	movs	r1, #2
 8013786:	f001 f9b3 	bl	8014af0 <uxr_stream_id>
 801378a:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 801378e:	4601      	mov	r1, r0
 8013790:	4620      	mov	r0, r4
 8013792:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013794:	f008 fa10 	bl	801bbb8 <uxr_update_output_stream_heartbeat_timestamp>
 8013798:	2800      	cmp	r0, #0
 801379a:	d0e0      	beq.n	801375e <listen_message_reliably+0x42>
 801379c:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 80137a0:	f89d b02d 	ldrb.w	fp, [sp, #45]	@ 0x2d
 80137a4:	9305      	str	r3, [sp, #20]
 80137a6:	4630      	mov	r0, r6
 80137a8:	f000 fd06 	bl	80141b8 <uxr_session_header_offset>
 80137ac:	f10d 0858 	add.w	r8, sp, #88	@ 0x58
 80137b0:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 80137b4:	9000      	str	r0, [sp, #0]
 80137b6:	a90e      	add	r1, sp, #56	@ 0x38
 80137b8:	4640      	mov	r0, r8
 80137ba:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
 80137be:	2300      	movs	r3, #0
 80137c0:	2211      	movs	r2, #17
 80137c2:	f7fa fb3f 	bl	800de44 <ucdr_init_buffer_origin_offset>
 80137c6:	2300      	movs	r3, #0
 80137c8:	2205      	movs	r2, #5
 80137ca:	210b      	movs	r1, #11
 80137cc:	4640      	mov	r0, r8
 80137ce:	f001 faab 	bl	8014d28 <uxr_buffer_submessage_header>
 80137d2:	f8bb 0032 	ldrh.w	r0, [fp, #50]	@ 0x32
 80137d6:	2101      	movs	r1, #1
 80137d8:	f008 fab0 	bl	801bd3c <uxr_seq_num_add>
 80137dc:	f8bb 3030 	ldrh.w	r3, [fp, #48]	@ 0x30
 80137e0:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80137e4:	4602      	mov	r2, r0
 80137e6:	9b05      	ldr	r3, [sp, #20]
 80137e8:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80137ec:	a90c      	add	r1, sp, #48	@ 0x30
 80137ee:	4640      	mov	r0, r8
 80137f0:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 80137f4:	f002 fb9a 	bl	8015f2c <uxr_serialize_HEARTBEAT_Payload>
 80137f8:	2200      	movs	r2, #0
 80137fa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80137fc:	4611      	mov	r1, r2
 80137fe:	4630      	mov	r0, r6
 8013800:	f000 fc86 	bl	8014110 <uxr_stamp_session_header>
 8013804:	4640      	mov	r0, r8
 8013806:	f7fa fb5b 	bl	800dec0 <ucdr_buffer_length>
 801380a:	4602      	mov	r2, r0
 801380c:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 801380e:	a90e      	add	r1, sp, #56	@ 0x38
 8013810:	e9d0 0300 	ldrd	r0, r3, [r0]
 8013814:	4798      	blx	r3
 8013816:	e7a2      	b.n	801375e <listen_message_reliably+0x42>
 8013818:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801381c:	4599      	cmp	r9, r3
 801381e:	bf08      	it	eq
 8013820:	f1b7 3fff 	cmpeq.w	r7, #4294967295	@ 0xffffffff
 8013824:	e9dd b806 	ldrd	fp, r8, [sp, #24]
 8013828:	d032      	beq.n	8013890 <listen_message_reliably+0x174>
 801382a:	9b03      	ldr	r3, [sp, #12]
 801382c:	1aff      	subs	r7, r7, r3
 801382e:	2f00      	cmp	r7, #0
 8013830:	bf08      	it	eq
 8013832:	2701      	moveq	r7, #1
 8013834:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8013836:	455f      	cmp	r7, fp
 8013838:	bfa8      	it	ge
 801383a:	465f      	movge	r7, fp
 801383c:	689c      	ldr	r4, [r3, #8]
 801383e:	6818      	ldr	r0, [r3, #0]
 8013840:	4642      	mov	r2, r8
 8013842:	463b      	mov	r3, r7
 8013844:	4651      	mov	r1, sl
 8013846:	47a0      	blx	r4
 8013848:	ebab 0b07 	sub.w	fp, fp, r7
 801384c:	b958      	cbnz	r0, 8013866 <listen_message_reliably+0x14a>
 801384e:	f1bb 0f00 	cmp.w	fp, #0
 8013852:	dd44      	ble.n	80138de <listen_message_reliably+0x1c2>
 8013854:	f001 faae 	bl	8014db4 <uxr_millis>
 8013858:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 801385c:	2b00      	cmp	r3, #0
 801385e:	d03c      	beq.n	80138da <listen_message_reliably+0x1be>
 8013860:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8013864:	e770      	b.n	8013748 <listen_message_reliably+0x2c>
 8013866:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 801386a:	4604      	mov	r4, r0
 801386c:	a80e      	add	r0, sp, #56	@ 0x38
 801386e:	f7fa fafb 	bl	800de68 <ucdr_init_buffer>
 8013872:	2500      	movs	r5, #0
 8013874:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 8013878:	aa08      	add	r2, sp, #32
 801387a:	a90e      	add	r1, sp, #56	@ 0x38
 801387c:	4630      	mov	r0, r6
 801387e:	f88d 5020 	strb.w	r5, [sp, #32]
 8013882:	f000 fc5b 	bl	801413c <uxr_read_session_header>
 8013886:	b928      	cbnz	r0, 8013894 <listen_message_reliably+0x178>
 8013888:	4620      	mov	r0, r4
 801388a:	b01f      	add	sp, #124	@ 0x7c
 801388c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013890:	465f      	mov	r7, fp
 8013892:	e7cc      	b.n	801382e <listen_message_reliably+0x112>
 8013894:	4629      	mov	r1, r5
 8013896:	f89d 0020 	ldrb.w	r0, [sp, #32]
 801389a:	f001 f945 	bl	8014b28 <uxr_stream_id_from_raw>
 801389e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80138a2:	2f01      	cmp	r7, #1
 80138a4:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 80138a8:	f8bd a022 	ldrh.w	sl, [sp, #34]	@ 0x22
 80138ac:	fa5f f880 	uxtb.w	r8, r0
 80138b0:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80138b4:	d050      	beq.n	8013958 <listen_message_reliably+0x23c>
 80138b6:	2f02      	cmp	r7, #2
 80138b8:	d016      	beq.n	80138e8 <listen_message_reliably+0x1cc>
 80138ba:	2f00      	cmp	r7, #0
 80138bc:	d1e4      	bne.n	8013888 <listen_message_reliably+0x16c>
 80138be:	4639      	mov	r1, r7
 80138c0:	4638      	mov	r0, r7
 80138c2:	f001 f931 	bl	8014b28 <uxr_stream_id_from_raw>
 80138c6:	a90e      	add	r1, sp, #56	@ 0x38
 80138c8:	4602      	mov	r2, r0
 80138ca:	4630      	mov	r0, r6
 80138cc:	920c      	str	r2, [sp, #48]	@ 0x30
 80138ce:	f7ff fdb5 	bl	801343c <read_submessage_list>
 80138d2:	4620      	mov	r0, r4
 80138d4:	b01f      	add	sp, #124	@ 0x7c
 80138d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138da:	465f      	mov	r7, fp
 80138dc:	e7aa      	b.n	8013834 <listen_message_reliably+0x118>
 80138de:	4604      	mov	r4, r0
 80138e0:	4620      	mov	r0, r4
 80138e2:	b01f      	add	sp, #124	@ 0x7c
 80138e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138e8:	4629      	mov	r1, r5
 80138ea:	f106 0008 	add.w	r0, r6, #8
 80138ee:	f001 f9fb 	bl	8014ce8 <uxr_get_input_reliable_stream>
 80138f2:	4681      	mov	r9, r0
 80138f4:	b338      	cbz	r0, 8013946 <listen_message_reliably+0x22a>
 80138f6:	a80e      	add	r0, sp, #56	@ 0x38
 80138f8:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 80138fc:	f7fa fae4 	bl	800dec8 <ucdr_buffer_remaining>
 8013900:	4603      	mov	r3, r0
 8013902:	f10d 0021 	add.w	r0, sp, #33	@ 0x21
 8013906:	9000      	str	r0, [sp, #0]
 8013908:	465a      	mov	r2, fp
 801390a:	4651      	mov	r1, sl
 801390c:	4648      	mov	r0, r9
 801390e:	f007 fd7f 	bl	801b410 <uxr_receive_reliable_message>
 8013912:	b1c0      	cbz	r0, 8013946 <listen_message_reliably+0x22a>
 8013914:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8013918:	b393      	cbz	r3, 8013980 <listen_message_reliably+0x264>
 801391a:	af16      	add	r7, sp, #88	@ 0x58
 801391c:	f04f 0a02 	mov.w	sl, #2
 8013920:	e00a      	b.n	8013938 <listen_message_reliably+0x21c>
 8013922:	f88d 8030 	strb.w	r8, [sp, #48]	@ 0x30
 8013926:	f88d 5031 	strb.w	r5, [sp, #49]	@ 0x31
 801392a:	f88d a032 	strb.w	sl, [sp, #50]	@ 0x32
 801392e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013930:	4639      	mov	r1, r7
 8013932:	4630      	mov	r0, r6
 8013934:	f7ff fd82 	bl	801343c <read_submessage_list>
 8013938:	2204      	movs	r2, #4
 801393a:	4639      	mov	r1, r7
 801393c:	4648      	mov	r0, r9
 801393e:	f007 fde1 	bl	801b504 <uxr_next_input_reliable_buffer_available>
 8013942:	2800      	cmp	r0, #0
 8013944:	d1ed      	bne.n	8013922 <listen_message_reliably+0x206>
 8013946:	4630      	mov	r0, r6
 8013948:	462a      	mov	r2, r5
 801394a:	4641      	mov	r1, r8
 801394c:	f7ff fc0a 	bl	8013164 <write_submessage_acknack.isra.0>
 8013950:	4620      	mov	r0, r4
 8013952:	b01f      	add	sp, #124	@ 0x7c
 8013954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013958:	4629      	mov	r1, r5
 801395a:	f106 0008 	add.w	r0, r6, #8
 801395e:	f001 f9b9 	bl	8014cd4 <uxr_get_input_best_effort_stream>
 8013962:	2800      	cmp	r0, #0
 8013964:	d090      	beq.n	8013888 <listen_message_reliably+0x16c>
 8013966:	4651      	mov	r1, sl
 8013968:	f007 fcc2 	bl	801b2f0 <uxr_receive_best_effort_message>
 801396c:	2800      	cmp	r0, #0
 801396e:	d08b      	beq.n	8013888 <listen_message_reliably+0x16c>
 8013970:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 8013974:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013976:	a90e      	add	r1, sp, #56	@ 0x38
 8013978:	4630      	mov	r0, r6
 801397a:	f7ff fd5f 	bl	801343c <read_submessage_list>
 801397e:	e783      	b.n	8013888 <listen_message_reliably+0x16c>
 8013980:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 8013984:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013986:	a90e      	add	r1, sp, #56	@ 0x38
 8013988:	4630      	mov	r0, r6
 801398a:	f7ff fd57 	bl	801343c <read_submessage_list>
 801398e:	e7c4      	b.n	801391a <listen_message_reliably+0x1fe>

08013990 <uxr_run_session_timeout>:
 8013990:	b570      	push	{r4, r5, r6, lr}
 8013992:	4604      	mov	r4, r0
 8013994:	460d      	mov	r5, r1
 8013996:	f001 fa0d 	bl	8014db4 <uxr_millis>
 801399a:	4606      	mov	r6, r0
 801399c:	4620      	mov	r0, r4
 801399e:	f7ff fc99 	bl	80132d4 <uxr_flash_output_streams>
 80139a2:	4629      	mov	r1, r5
 80139a4:	4620      	mov	r0, r4
 80139a6:	f7ff feb9 	bl	801371c <listen_message_reliably>
 80139aa:	f001 fa03 	bl	8014db4 <uxr_millis>
 80139ae:	1b81      	subs	r1, r0, r6
 80139b0:	1a69      	subs	r1, r5, r1
 80139b2:	2900      	cmp	r1, #0
 80139b4:	dcf6      	bgt.n	80139a4 <uxr_run_session_timeout+0x14>
 80139b6:	f104 0008 	add.w	r0, r4, #8
 80139ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80139be:	f001 b99d 	b.w	8014cfc <uxr_output_streams_confirmed>
 80139c2:	bf00      	nop

080139c4 <uxr_run_session_until_data>:
 80139c4:	b570      	push	{r4, r5, r6, lr}
 80139c6:	4604      	mov	r4, r0
 80139c8:	460d      	mov	r5, r1
 80139ca:	f001 f9f3 	bl	8014db4 <uxr_millis>
 80139ce:	4606      	mov	r6, r0
 80139d0:	4620      	mov	r0, r4
 80139d2:	f7ff fc7f 	bl	80132d4 <uxr_flash_output_streams>
 80139d6:	2300      	movs	r3, #0
 80139d8:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 80139dc:	4629      	mov	r1, r5
 80139de:	e005      	b.n	80139ec <uxr_run_session_until_data+0x28>
 80139e0:	f001 f9e8 	bl	8014db4 <uxr_millis>
 80139e4:	1b81      	subs	r1, r0, r6
 80139e6:	1a69      	subs	r1, r5, r1
 80139e8:	2900      	cmp	r1, #0
 80139ea:	dd07      	ble.n	80139fc <uxr_run_session_until_data+0x38>
 80139ec:	4620      	mov	r0, r4
 80139ee:	f7ff fe95 	bl	801371c <listen_message_reliably>
 80139f2:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80139f6:	2800      	cmp	r0, #0
 80139f8:	d0f2      	beq.n	80139e0 <uxr_run_session_until_data+0x1c>
 80139fa:	bd70      	pop	{r4, r5, r6, pc}
 80139fc:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8013a00:	bd70      	pop	{r4, r5, r6, pc}
 8013a02:	bf00      	nop

08013a04 <uxr_run_session_until_confirm_delivery>:
 8013a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a08:	4606      	mov	r6, r0
 8013a0a:	460d      	mov	r5, r1
 8013a0c:	f001 f9d2 	bl	8014db4 <uxr_millis>
 8013a10:	4607      	mov	r7, r0
 8013a12:	4630      	mov	r0, r6
 8013a14:	f7ff fc5e 	bl	80132d4 <uxr_flash_output_streams>
 8013a18:	2d00      	cmp	r5, #0
 8013a1a:	db16      	blt.n	8013a4a <uxr_run_session_until_confirm_delivery+0x46>
 8013a1c:	462c      	mov	r4, r5
 8013a1e:	f106 0808 	add.w	r8, r6, #8
 8013a22:	e008      	b.n	8013a36 <uxr_run_session_until_confirm_delivery+0x32>
 8013a24:	4621      	mov	r1, r4
 8013a26:	4630      	mov	r0, r6
 8013a28:	f7ff fe78 	bl	801371c <listen_message_reliably>
 8013a2c:	f001 f9c2 	bl	8014db4 <uxr_millis>
 8013a30:	1bc1      	subs	r1, r0, r7
 8013a32:	1a6c      	subs	r4, r5, r1
 8013a34:	d404      	bmi.n	8013a40 <uxr_run_session_until_confirm_delivery+0x3c>
 8013a36:	4640      	mov	r0, r8
 8013a38:	f001 f960 	bl	8014cfc <uxr_output_streams_confirmed>
 8013a3c:	2800      	cmp	r0, #0
 8013a3e:	d0f1      	beq.n	8013a24 <uxr_run_session_until_confirm_delivery+0x20>
 8013a40:	4640      	mov	r0, r8
 8013a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a46:	f001 b959 	b.w	8014cfc <uxr_output_streams_confirmed>
 8013a4a:	f106 0808 	add.w	r8, r6, #8
 8013a4e:	e7f7      	b.n	8013a40 <uxr_run_session_until_confirm_delivery+0x3c>

08013a50 <uxr_run_session_until_all_status>:
 8013a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a54:	9c08      	ldr	r4, [sp, #32]
 8013a56:	4605      	mov	r5, r0
 8013a58:	460f      	mov	r7, r1
 8013a5a:	4690      	mov	r8, r2
 8013a5c:	461e      	mov	r6, r3
 8013a5e:	f7ff fc39 	bl	80132d4 <uxr_flash_output_streams>
 8013a62:	b124      	cbz	r4, 8013a6e <uxr_run_session_until_all_status+0x1e>
 8013a64:	4622      	mov	r2, r4
 8013a66:	21ff      	movs	r1, #255	@ 0xff
 8013a68:	4630      	mov	r0, r6
 8013a6a:	f009 fedd 	bl	801d828 <memset>
 8013a6e:	e9c5 861d 	strd	r8, r6, [r5, #116]	@ 0x74
 8013a72:	67ec      	str	r4, [r5, #124]	@ 0x7c
 8013a74:	f001 f99e 	bl	8014db4 <uxr_millis>
 8013a78:	4639      	mov	r1, r7
 8013a7a:	4681      	mov	r9, r0
 8013a7c:	4628      	mov	r0, r5
 8013a7e:	f7ff fe4d 	bl	801371c <listen_message_reliably>
 8013a82:	f001 f997 	bl	8014db4 <uxr_millis>
 8013a86:	eba0 0109 	sub.w	r1, r0, r9
 8013a8a:	1a79      	subs	r1, r7, r1
 8013a8c:	b36c      	cbz	r4, 8013aea <uxr_run_session_until_all_status+0x9a>
 8013a8e:	1e70      	subs	r0, r6, #1
 8013a90:	46c6      	mov	lr, r8
 8013a92:	1902      	adds	r2, r0, r4
 8013a94:	4684      	mov	ip, r0
 8013a96:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8013a9a:	2bff      	cmp	r3, #255	@ 0xff
 8013a9c:	d007      	beq.n	8013aae <uxr_run_session_until_all_status+0x5e>
 8013a9e:	4594      	cmp	ip, r2
 8013aa0:	d00f      	beq.n	8013ac2 <uxr_run_session_until_all_status+0x72>
 8013aa2:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8013aa6:	2bff      	cmp	r3, #255	@ 0xff
 8013aa8:	f10e 0e02 	add.w	lr, lr, #2
 8013aac:	d1f7      	bne.n	8013a9e <uxr_run_session_until_all_status+0x4e>
 8013aae:	4594      	cmp	ip, r2
 8013ab0:	f8be 3000 	ldrh.w	r3, [lr]
 8013ab4:	d014      	beq.n	8013ae0 <uxr_run_session_until_all_status+0x90>
 8013ab6:	f10e 0e02 	add.w	lr, lr, #2
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d0eb      	beq.n	8013a96 <uxr_run_session_until_all_status+0x46>
 8013abe:	2900      	cmp	r1, #0
 8013ac0:	dcdc      	bgt.n	8013a7c <uxr_run_session_until_all_status+0x2c>
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8013ac6:	e001      	b.n	8013acc <uxr_run_session_until_all_status+0x7c>
 8013ac8:	2b01      	cmp	r3, #1
 8013aca:	d812      	bhi.n	8013af2 <uxr_run_session_until_all_status+0xa2>
 8013acc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8013ad0:	4290      	cmp	r0, r2
 8013ad2:	d1f9      	bne.n	8013ac8 <uxr_run_session_until_all_status+0x78>
 8013ad4:	2b01      	cmp	r3, #1
 8013ad6:	bf8c      	ite	hi
 8013ad8:	2000      	movhi	r0, #0
 8013ada:	2001      	movls	r0, #1
 8013adc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ae0:	2900      	cmp	r1, #0
 8013ae2:	ddee      	ble.n	8013ac2 <uxr_run_session_until_all_status+0x72>
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d1c9      	bne.n	8013a7c <uxr_run_session_until_all_status+0x2c>
 8013ae8:	e7eb      	b.n	8013ac2 <uxr_run_session_until_all_status+0x72>
 8013aea:	67ec      	str	r4, [r5, #124]	@ 0x7c
 8013aec:	2001      	movs	r0, #1
 8013aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013af2:	2000      	movs	r0, #0
 8013af4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013af8 <uxr_sync_session>:
 8013af8:	b570      	push	{r4, r5, r6, lr}
 8013afa:	b092      	sub	sp, #72	@ 0x48
 8013afc:	4604      	mov	r4, r0
 8013afe:	460d      	mov	r5, r1
 8013b00:	f000 fb5a 	bl	80141b8 <uxr_session_header_offset>
 8013b04:	2214      	movs	r2, #20
 8013b06:	eb0d 0102 	add.w	r1, sp, r2
 8013b0a:	9000      	str	r0, [sp, #0]
 8013b0c:	2300      	movs	r3, #0
 8013b0e:	a80a      	add	r0, sp, #40	@ 0x28
 8013b10:	f7fa f998 	bl	800de44 <ucdr_init_buffer_origin_offset>
 8013b14:	2300      	movs	r3, #0
 8013b16:	2208      	movs	r2, #8
 8013b18:	210e      	movs	r1, #14
 8013b1a:	a80a      	add	r0, sp, #40	@ 0x28
 8013b1c:	f001 f904 	bl	8014d28 <uxr_buffer_submessage_header>
 8013b20:	f001 f962 	bl	8014de8 <uxr_nanos>
 8013b24:	a318      	add	r3, pc, #96	@ (adr r3, 8013b88 <uxr_sync_session+0x90>)
 8013b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b2a:	f7ed f89d 	bl	8000c68 <__aeabi_ldivmod>
 8013b2e:	a903      	add	r1, sp, #12
 8013b30:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8013b34:	a80a      	add	r0, sp, #40	@ 0x28
 8013b36:	f002 fa1f 	bl	8015f78 <uxr_serialize_TIMESTAMP_Payload>
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	4611      	mov	r1, r2
 8013b3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013b40:	4620      	mov	r0, r4
 8013b42:	f000 fae5 	bl	8014110 <uxr_stamp_session_header>
 8013b46:	a80a      	add	r0, sp, #40	@ 0x28
 8013b48:	f7fa f9ba 	bl	800dec0 <ucdr_buffer_length>
 8013b4c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013b4e:	4602      	mov	r2, r0
 8013b50:	a905      	add	r1, sp, #20
 8013b52:	e9d3 0600 	ldrd	r0, r6, [r3]
 8013b56:	47b0      	blx	r6
 8013b58:	f001 f92c 	bl	8014db4 <uxr_millis>
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	4606      	mov	r6, r0
 8013b60:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8013b64:	4629      	mov	r1, r5
 8013b66:	e000      	b.n	8013b6a <uxr_sync_session+0x72>
 8013b68:	b950      	cbnz	r0, 8013b80 <uxr_sync_session+0x88>
 8013b6a:	4620      	mov	r0, r4
 8013b6c:	f7ff fdd6 	bl	801371c <listen_message_reliably>
 8013b70:	f001 f920 	bl	8014db4 <uxr_millis>
 8013b74:	1b81      	subs	r1, r0, r6
 8013b76:	1a69      	subs	r1, r5, r1
 8013b78:	2900      	cmp	r1, #0
 8013b7a:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 8013b7e:	dcf3      	bgt.n	8013b68 <uxr_sync_session+0x70>
 8013b80:	b012      	add	sp, #72	@ 0x48
 8013b82:	bd70      	pop	{r4, r5, r6, pc}
 8013b84:	f3af 8000 	nop.w
 8013b88:	3b9aca00 	.word	0x3b9aca00
 8013b8c:	00000000 	.word	0x00000000

08013b90 <wait_session_status>:
 8013b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b94:	4604      	mov	r4, r0
 8013b96:	20ff      	movs	r0, #255	@ 0xff
 8013b98:	b09f      	sub	sp, #124	@ 0x7c
 8013b9a:	7160      	strb	r0, [r4, #5]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	f000 80bb 	beq.w	8013d18 <wait_session_status+0x188>
 8013ba2:	4692      	mov	sl, r2
 8013ba4:	469b      	mov	fp, r3
 8013ba6:	f04f 0800 	mov.w	r8, #0
 8013baa:	9105      	str	r1, [sp, #20]
 8013bac:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013bae:	9905      	ldr	r1, [sp, #20]
 8013bb0:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013bb4:	4652      	mov	r2, sl
 8013bb6:	47a8      	blx	r5
 8013bb8:	f001 f8fc 	bl	8014db4 <uxr_millis>
 8013bbc:	2700      	movs	r7, #0
 8013bbe:	4605      	mov	r5, r0
 8013bc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013bc4:	e009      	b.n	8013bda <wait_session_status+0x4a>
 8013bc6:	f001 f8f5 	bl	8014db4 <uxr_millis>
 8013bca:	1b43      	subs	r3, r0, r5
 8013bcc:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	7962      	ldrb	r2, [r4, #5]
 8013bd4:	dd3d      	ble.n	8013c52 <wait_session_status+0xc2>
 8013bd6:	2aff      	cmp	r2, #255	@ 0xff
 8013bd8:	d13b      	bne.n	8013c52 <wait_session_status+0xc2>
 8013bda:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8013bdc:	a90a      	add	r1, sp, #40	@ 0x28
 8013bde:	6896      	ldr	r6, [r2, #8]
 8013be0:	6810      	ldr	r0, [r2, #0]
 8013be2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013be4:	47b0      	blx	r6
 8013be6:	2800      	cmp	r0, #0
 8013be8:	d0ed      	beq.n	8013bc6 <wait_session_status+0x36>
 8013bea:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 8013bee:	a80e      	add	r0, sp, #56	@ 0x38
 8013bf0:	f7fa f93a 	bl	800de68 <ucdr_init_buffer>
 8013bf4:	f10d 0326 	add.w	r3, sp, #38	@ 0x26
 8013bf8:	aa09      	add	r2, sp, #36	@ 0x24
 8013bfa:	a90e      	add	r1, sp, #56	@ 0x38
 8013bfc:	4620      	mov	r0, r4
 8013bfe:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
 8013c02:	f000 fa9b 	bl	801413c <uxr_read_session_header>
 8013c06:	2800      	cmp	r0, #0
 8013c08:	d0dd      	beq.n	8013bc6 <wait_session_status+0x36>
 8013c0a:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8013c0e:	2100      	movs	r1, #0
 8013c10:	f000 ff8a 	bl	8014b28 <uxr_stream_id_from_raw>
 8013c14:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8013c18:	9304      	str	r3, [sp, #16]
 8013c1a:	f3c0 4907 	ubfx	r9, r0, #16, #8
 8013c1e:	b2c3      	uxtb	r3, r0
 8013c20:	f1b9 0f01 	cmp.w	r9, #1
 8013c24:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 8013c28:	9303      	str	r3, [sp, #12]
 8013c2a:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8013c2e:	d05d      	beq.n	8013cec <wait_session_status+0x15c>
 8013c30:	f1b9 0f02 	cmp.w	r9, #2
 8013c34:	d01a      	beq.n	8013c6c <wait_session_status+0xdc>
 8013c36:	f1b9 0f00 	cmp.w	r9, #0
 8013c3a:	d1c4      	bne.n	8013bc6 <wait_session_status+0x36>
 8013c3c:	4649      	mov	r1, r9
 8013c3e:	4648      	mov	r0, r9
 8013c40:	f000 ff72 	bl	8014b28 <uxr_stream_id_from_raw>
 8013c44:	a90e      	add	r1, sp, #56	@ 0x38
 8013c46:	4602      	mov	r2, r0
 8013c48:	900d      	str	r0, [sp, #52]	@ 0x34
 8013c4a:	4620      	mov	r0, r4
 8013c4c:	f7ff fbf6 	bl	801343c <read_submessage_list>
 8013c50:	e7b9      	b.n	8013bc6 <wait_session_status+0x36>
 8013c52:	f108 0801 	add.w	r8, r8, #1
 8013c56:	45c3      	cmp	fp, r8
 8013c58:	d001      	beq.n	8013c5e <wait_session_status+0xce>
 8013c5a:	2aff      	cmp	r2, #255	@ 0xff
 8013c5c:	d0a6      	beq.n	8013bac <wait_session_status+0x1c>
 8013c5e:	f1b2 00ff 	subs.w	r0, r2, #255	@ 0xff
 8013c62:	bf18      	it	ne
 8013c64:	2001      	movne	r0, #1
 8013c66:	b01f      	add	sp, #124	@ 0x7c
 8013c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c6c:	4631      	mov	r1, r6
 8013c6e:	f104 0008 	add.w	r0, r4, #8
 8013c72:	f001 f839 	bl	8014ce8 <uxr_get_input_reliable_stream>
 8013c76:	9006      	str	r0, [sp, #24]
 8013c78:	2800      	cmp	r0, #0
 8013c7a:	d031      	beq.n	8013ce0 <wait_session_status+0x150>
 8013c7c:	aa0e      	add	r2, sp, #56	@ 0x38
 8013c7e:	4610      	mov	r0, r2
 8013c80:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8013c82:	9207      	str	r2, [sp, #28]
 8013c84:	f7fa f920 	bl	800dec8 <ucdr_buffer_remaining>
 8013c88:	4603      	mov	r3, r0
 8013c8a:	f10d 0025 	add.w	r0, sp, #37	@ 0x25
 8013c8e:	9000      	str	r0, [sp, #0]
 8013c90:	9a07      	ldr	r2, [sp, #28]
 8013c92:	9904      	ldr	r1, [sp, #16]
 8013c94:	9806      	ldr	r0, [sp, #24]
 8013c96:	f007 fbbb 	bl	801b410 <uxr_receive_reliable_message>
 8013c9a:	b308      	cbz	r0, 8013ce0 <wait_session_status+0x150>
 8013c9c:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d041      	beq.n	8013d28 <wait_session_status+0x198>
 8013ca4:	f8cd 8010 	str.w	r8, [sp, #16]
 8013ca8:	9507      	str	r5, [sp, #28]
 8013caa:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8013cae:	9d06      	ldr	r5, [sp, #24]
 8013cb0:	f04f 0902 	mov.w	r9, #2
 8013cb4:	e00a      	b.n	8013ccc <wait_session_status+0x13c>
 8013cb6:	f88d 8034 	strb.w	r8, [sp, #52]	@ 0x34
 8013cba:	f88d 6035 	strb.w	r6, [sp, #53]	@ 0x35
 8013cbe:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 8013cc2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013cc4:	a916      	add	r1, sp, #88	@ 0x58
 8013cc6:	4620      	mov	r0, r4
 8013cc8:	f7ff fbb8 	bl	801343c <read_submessage_list>
 8013ccc:	2204      	movs	r2, #4
 8013cce:	a916      	add	r1, sp, #88	@ 0x58
 8013cd0:	4628      	mov	r0, r5
 8013cd2:	f007 fc17 	bl	801b504 <uxr_next_input_reliable_buffer_available>
 8013cd6:	2800      	cmp	r0, #0
 8013cd8:	d1ed      	bne.n	8013cb6 <wait_session_status+0x126>
 8013cda:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013cde:	9d07      	ldr	r5, [sp, #28]
 8013ce0:	9903      	ldr	r1, [sp, #12]
 8013ce2:	4632      	mov	r2, r6
 8013ce4:	4620      	mov	r0, r4
 8013ce6:	f7ff fa3d 	bl	8013164 <write_submessage_acknack.isra.0>
 8013cea:	e76c      	b.n	8013bc6 <wait_session_status+0x36>
 8013cec:	4631      	mov	r1, r6
 8013cee:	f104 0008 	add.w	r0, r4, #8
 8013cf2:	f000 ffef 	bl	8014cd4 <uxr_get_input_best_effort_stream>
 8013cf6:	2800      	cmp	r0, #0
 8013cf8:	f43f af65 	beq.w	8013bc6 <wait_session_status+0x36>
 8013cfc:	9904      	ldr	r1, [sp, #16]
 8013cfe:	f007 faf7 	bl	801b2f0 <uxr_receive_best_effort_message>
 8013d02:	2800      	cmp	r0, #0
 8013d04:	f43f af5f 	beq.w	8013bc6 <wait_session_status+0x36>
 8013d08:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 8013d0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013d0e:	a90e      	add	r1, sp, #56	@ 0x38
 8013d10:	4620      	mov	r0, r4
 8013d12:	f7ff fb93 	bl	801343c <read_submessage_list>
 8013d16:	e756      	b.n	8013bc6 <wait_session_status+0x36>
 8013d18:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013d1a:	e9d3 0400 	ldrd	r0, r4, [r3]
 8013d1e:	47a0      	blx	r4
 8013d20:	2001      	movs	r0, #1
 8013d22:	b01f      	add	sp, #124	@ 0x7c
 8013d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d28:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 8013d2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013d2e:	a90e      	add	r1, sp, #56	@ 0x38
 8013d30:	4620      	mov	r0, r4
 8013d32:	f7ff fb83 	bl	801343c <read_submessage_list>
 8013d36:	e7b5      	b.n	8013ca4 <wait_session_status+0x114>

08013d38 <uxr_delete_session_retries>:
 8013d38:	b530      	push	{r4, r5, lr}
 8013d3a:	b08f      	sub	sp, #60	@ 0x3c
 8013d3c:	4604      	mov	r4, r0
 8013d3e:	460d      	mov	r5, r1
 8013d40:	f000 fa3a 	bl	80141b8 <uxr_session_header_offset>
 8013d44:	2300      	movs	r3, #0
 8013d46:	2210      	movs	r2, #16
 8013d48:	9000      	str	r0, [sp, #0]
 8013d4a:	a902      	add	r1, sp, #8
 8013d4c:	a806      	add	r0, sp, #24
 8013d4e:	f7fa f879 	bl	800de44 <ucdr_init_buffer_origin_offset>
 8013d52:	a906      	add	r1, sp, #24
 8013d54:	4620      	mov	r0, r4
 8013d56:	f000 f981 	bl	801405c <uxr_buffer_delete_session>
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	4611      	mov	r1, r2
 8013d5e:	9b06      	ldr	r3, [sp, #24]
 8013d60:	4620      	mov	r0, r4
 8013d62:	f000 f9d5 	bl	8014110 <uxr_stamp_session_header>
 8013d66:	a806      	add	r0, sp, #24
 8013d68:	f7fa f8aa 	bl	800dec0 <ucdr_buffer_length>
 8013d6c:	462b      	mov	r3, r5
 8013d6e:	4602      	mov	r2, r0
 8013d70:	a902      	add	r1, sp, #8
 8013d72:	4620      	mov	r0, r4
 8013d74:	f7ff ff0c 	bl	8013b90 <wait_session_status>
 8013d78:	b118      	cbz	r0, 8013d82 <uxr_delete_session_retries+0x4a>
 8013d7a:	7960      	ldrb	r0, [r4, #5]
 8013d7c:	fab0 f080 	clz	r0, r0
 8013d80:	0940      	lsrs	r0, r0, #5
 8013d82:	b00f      	add	sp, #60	@ 0x3c
 8013d84:	bd30      	pop	{r4, r5, pc}
 8013d86:	bf00      	nop

08013d88 <uxr_create_session>:
 8013d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d8c:	f100 0308 	add.w	r3, r0, #8
 8013d90:	b0ab      	sub	sp, #172	@ 0xac
 8013d92:	4604      	mov	r4, r0
 8013d94:	4618      	mov	r0, r3
 8013d96:	9303      	str	r3, [sp, #12]
 8013d98:	f000 feec 	bl	8014b74 <uxr_reset_stream_storage>
 8013d9c:	4620      	mov	r0, r4
 8013d9e:	f000 fa0b 	bl	80141b8 <uxr_session_header_offset>
 8013da2:	2300      	movs	r3, #0
 8013da4:	9000      	str	r0, [sp, #0]
 8013da6:	221c      	movs	r2, #28
 8013da8:	a90b      	add	r1, sp, #44	@ 0x2c
 8013daa:	a812      	add	r0, sp, #72	@ 0x48
 8013dac:	f7fa f84a 	bl	800de44 <ucdr_init_buffer_origin_offset>
 8013db0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013db2:	8a1a      	ldrh	r2, [r3, #16]
 8013db4:	3a04      	subs	r2, #4
 8013db6:	b292      	uxth	r2, r2
 8013db8:	a912      	add	r1, sp, #72	@ 0x48
 8013dba:	4620      	mov	r0, r4
 8013dbc:	f000 f924 	bl	8014008 <uxr_buffer_create_session>
 8013dc0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013dc2:	4620      	mov	r0, r4
 8013dc4:	f000 f990 	bl	80140e8 <uxr_stamp_create_session_header>
 8013dc8:	a812      	add	r0, sp, #72	@ 0x48
 8013dca:	f7fa f879 	bl	800dec0 <ucdr_buffer_length>
 8013dce:	23ff      	movs	r3, #255	@ 0xff
 8013dd0:	4683      	mov	fp, r0
 8013dd2:	7163      	strb	r3, [r4, #5]
 8013dd4:	f04f 080a 	mov.w	r8, #10
 8013dd8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013dda:	465a      	mov	r2, fp
 8013ddc:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013de0:	a90b      	add	r1, sp, #44	@ 0x2c
 8013de2:	47a8      	blx	r5
 8013de4:	f000 ffe6 	bl	8014db4 <uxr_millis>
 8013de8:	2700      	movs	r7, #0
 8013dea:	4605      	mov	r5, r0
 8013dec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013df0:	e009      	b.n	8013e06 <uxr_create_session+0x7e>
 8013df2:	f000 ffdf 	bl	8014db4 <uxr_millis>
 8013df6:	1b43      	subs	r3, r0, r5
 8013df8:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	7962      	ldrb	r2, [r4, #5]
 8013e00:	dd3d      	ble.n	8013e7e <uxr_create_session+0xf6>
 8013e02:	2aff      	cmp	r2, #255	@ 0xff
 8013e04:	d13b      	bne.n	8013e7e <uxr_create_session+0xf6>
 8013e06:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8013e08:	a907      	add	r1, sp, #28
 8013e0a:	6896      	ldr	r6, [r2, #8]
 8013e0c:	6810      	ldr	r0, [r2, #0]
 8013e0e:	aa08      	add	r2, sp, #32
 8013e10:	47b0      	blx	r6
 8013e12:	2800      	cmp	r0, #0
 8013e14:	d0ed      	beq.n	8013df2 <uxr_create_session+0x6a>
 8013e16:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8013e1a:	a81a      	add	r0, sp, #104	@ 0x68
 8013e1c:	f7fa f824 	bl	800de68 <ucdr_init_buffer>
 8013e20:	f10d 031a 	add.w	r3, sp, #26
 8013e24:	aa06      	add	r2, sp, #24
 8013e26:	a91a      	add	r1, sp, #104	@ 0x68
 8013e28:	4620      	mov	r0, r4
 8013e2a:	f88d 7018 	strb.w	r7, [sp, #24]
 8013e2e:	f000 f985 	bl	801413c <uxr_read_session_header>
 8013e32:	2800      	cmp	r0, #0
 8013e34:	d0dd      	beq.n	8013df2 <uxr_create_session+0x6a>
 8013e36:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8013e3a:	2100      	movs	r1, #0
 8013e3c:	f000 fe74 	bl	8014b28 <uxr_stream_id_from_raw>
 8013e40:	f3c0 4907 	ubfx	r9, r0, #16, #8
 8013e44:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8013e48:	9302      	str	r3, [sp, #8]
 8013e4a:	f1b9 0f01 	cmp.w	r9, #1
 8013e4e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8013e52:	fa5f fa80 	uxtb.w	sl, r0
 8013e56:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8013e5a:	d056      	beq.n	8013f0a <uxr_create_session+0x182>
 8013e5c:	f1b9 0f02 	cmp.w	r9, #2
 8013e60:	d018      	beq.n	8013e94 <uxr_create_session+0x10c>
 8013e62:	f1b9 0f00 	cmp.w	r9, #0
 8013e66:	d1c4      	bne.n	8013df2 <uxr_create_session+0x6a>
 8013e68:	4649      	mov	r1, r9
 8013e6a:	4648      	mov	r0, r9
 8013e6c:	f000 fe5c 	bl	8014b28 <uxr_stream_id_from_raw>
 8013e70:	a91a      	add	r1, sp, #104	@ 0x68
 8013e72:	4602      	mov	r2, r0
 8013e74:	900a      	str	r0, [sp, #40]	@ 0x28
 8013e76:	4620      	mov	r0, r4
 8013e78:	f7ff fae0 	bl	801343c <read_submessage_list>
 8013e7c:	e7b9      	b.n	8013df2 <uxr_create_session+0x6a>
 8013e7e:	f1b8 0801 	subs.w	r8, r8, #1
 8013e82:	d001      	beq.n	8013e88 <uxr_create_session+0x100>
 8013e84:	2aff      	cmp	r2, #255	@ 0xff
 8013e86:	d0a7      	beq.n	8013dd8 <uxr_create_session+0x50>
 8013e88:	2a00      	cmp	r2, #0
 8013e8a:	d05b      	beq.n	8013f44 <uxr_create_session+0x1bc>
 8013e8c:	2000      	movs	r0, #0
 8013e8e:	b02b      	add	sp, #172	@ 0xac
 8013e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e94:	9803      	ldr	r0, [sp, #12]
 8013e96:	4631      	mov	r1, r6
 8013e98:	f000 ff26 	bl	8014ce8 <uxr_get_input_reliable_stream>
 8013e9c:	9004      	str	r0, [sp, #16]
 8013e9e:	b370      	cbz	r0, 8013efe <uxr_create_session+0x176>
 8013ea0:	aa1a      	add	r2, sp, #104	@ 0x68
 8013ea2:	4610      	mov	r0, r2
 8013ea4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013ea6:	9205      	str	r2, [sp, #20]
 8013ea8:	f7fa f80e 	bl	800dec8 <ucdr_buffer_remaining>
 8013eac:	4603      	mov	r3, r0
 8013eae:	f10d 0019 	add.w	r0, sp, #25
 8013eb2:	9000      	str	r0, [sp, #0]
 8013eb4:	9a05      	ldr	r2, [sp, #20]
 8013eb6:	9902      	ldr	r1, [sp, #8]
 8013eb8:	9804      	ldr	r0, [sp, #16]
 8013eba:	f007 faa9 	bl	801b410 <uxr_receive_reliable_message>
 8013ebe:	b1f0      	cbz	r0, 8013efe <uxr_create_session+0x176>
 8013ec0:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d035      	beq.n	8013f34 <uxr_create_session+0x1ac>
 8013ec8:	f8cd b008 	str.w	fp, [sp, #8]
 8013ecc:	f04f 0902 	mov.w	r9, #2
 8013ed0:	f8dd b010 	ldr.w	fp, [sp, #16]
 8013ed4:	e00a      	b.n	8013eec <uxr_create_session+0x164>
 8013ed6:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 8013eda:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8013ede:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 8013ee2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013ee4:	a922      	add	r1, sp, #136	@ 0x88
 8013ee6:	4620      	mov	r0, r4
 8013ee8:	f7ff faa8 	bl	801343c <read_submessage_list>
 8013eec:	2204      	movs	r2, #4
 8013eee:	a922      	add	r1, sp, #136	@ 0x88
 8013ef0:	4658      	mov	r0, fp
 8013ef2:	f007 fb07 	bl	801b504 <uxr_next_input_reliable_buffer_available>
 8013ef6:	2800      	cmp	r0, #0
 8013ef8:	d1ed      	bne.n	8013ed6 <uxr_create_session+0x14e>
 8013efa:	f8dd b008 	ldr.w	fp, [sp, #8]
 8013efe:	4632      	mov	r2, r6
 8013f00:	4651      	mov	r1, sl
 8013f02:	4620      	mov	r0, r4
 8013f04:	f7ff f92e 	bl	8013164 <write_submessage_acknack.isra.0>
 8013f08:	e773      	b.n	8013df2 <uxr_create_session+0x6a>
 8013f0a:	9803      	ldr	r0, [sp, #12]
 8013f0c:	4631      	mov	r1, r6
 8013f0e:	f000 fee1 	bl	8014cd4 <uxr_get_input_best_effort_stream>
 8013f12:	2800      	cmp	r0, #0
 8013f14:	f43f af6d 	beq.w	8013df2 <uxr_create_session+0x6a>
 8013f18:	9902      	ldr	r1, [sp, #8]
 8013f1a:	f007 f9e9 	bl	801b2f0 <uxr_receive_best_effort_message>
 8013f1e:	2800      	cmp	r0, #0
 8013f20:	f43f af67 	beq.w	8013df2 <uxr_create_session+0x6a>
 8013f24:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 8013f28:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013f2a:	a91a      	add	r1, sp, #104	@ 0x68
 8013f2c:	4620      	mov	r0, r4
 8013f2e:	f7ff fa85 	bl	801343c <read_submessage_list>
 8013f32:	e75e      	b.n	8013df2 <uxr_create_session+0x6a>
 8013f34:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 8013f38:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013f3a:	a91a      	add	r1, sp, #104	@ 0x68
 8013f3c:	4620      	mov	r0, r4
 8013f3e:	f7ff fa7d 	bl	801343c <read_submessage_list>
 8013f42:	e7c1      	b.n	8013ec8 <uxr_create_session+0x140>
 8013f44:	9803      	ldr	r0, [sp, #12]
 8013f46:	f000 fe15 	bl	8014b74 <uxr_reset_stream_storage>
 8013f4a:	2001      	movs	r0, #1
 8013f4c:	b02b      	add	sp, #172	@ 0xac
 8013f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f52:	bf00      	nop

08013f54 <uxr_prepare_stream_to_write_submessage>:
 8013f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f58:	b082      	sub	sp, #8
 8013f5a:	4606      	mov	r6, r0
 8013f5c:	4610      	mov	r0, r2
 8013f5e:	4614      	mov	r4, r2
 8013f60:	9101      	str	r1, [sp, #4]
 8013f62:	461f      	mov	r7, r3
 8013f64:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8013f68:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 8013f6c:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8013f70:	f000 ff1a 	bl	8014da8 <uxr_submessage_padding>
 8013f74:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013f78:	1d21      	adds	r1, r4, #4
 8013f7a:	2b01      	cmp	r3, #1
 8013f7c:	eb01 0a00 	add.w	sl, r1, r0
 8013f80:	d012      	beq.n	8013fa8 <uxr_prepare_stream_to_write_submessage+0x54>
 8013f82:	2b02      	cmp	r3, #2
 8013f84:	d003      	beq.n	8013f8e <uxr_prepare_stream_to_write_submessage+0x3a>
 8013f86:	2000      	movs	r0, #0
 8013f88:	b002      	add	sp, #8
 8013f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f8e:	4629      	mov	r1, r5
 8013f90:	f106 0008 	add.w	r0, r6, #8
 8013f94:	f000 fe94 	bl	8014cc0 <uxr_get_output_reliable_stream>
 8013f98:	2800      	cmp	r0, #0
 8013f9a:	d0f4      	beq.n	8013f86 <uxr_prepare_stream_to_write_submessage+0x32>
 8013f9c:	4651      	mov	r1, sl
 8013f9e:	463a      	mov	r2, r7
 8013fa0:	f007 fc66 	bl	801b870 <uxr_prepare_reliable_buffer_to_write>
 8013fa4:	b968      	cbnz	r0, 8013fc2 <uxr_prepare_stream_to_write_submessage+0x6e>
 8013fa6:	e7ee      	b.n	8013f86 <uxr_prepare_stream_to_write_submessage+0x32>
 8013fa8:	4629      	mov	r1, r5
 8013faa:	f106 0008 	add.w	r0, r6, #8
 8013fae:	f000 fe7f 	bl	8014cb0 <uxr_get_output_best_effort_stream>
 8013fb2:	2800      	cmp	r0, #0
 8013fb4:	d0e7      	beq.n	8013f86 <uxr_prepare_stream_to_write_submessage+0x32>
 8013fb6:	4651      	mov	r1, sl
 8013fb8:	463a      	mov	r2, r7
 8013fba:	f007 fb8b 	bl	801b6d4 <uxr_prepare_best_effort_buffer_to_write>
 8013fbe:	2800      	cmp	r0, #0
 8013fc0:	d0e1      	beq.n	8013f86 <uxr_prepare_stream_to_write_submessage+0x32>
 8013fc2:	464b      	mov	r3, r9
 8013fc4:	b2a2      	uxth	r2, r4
 8013fc6:	4641      	mov	r1, r8
 8013fc8:	4638      	mov	r0, r7
 8013fca:	f000 fead 	bl	8014d28 <uxr_buffer_submessage_header>
 8013fce:	2001      	movs	r0, #1
 8013fd0:	b002      	add	sp, #8
 8013fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fd6:	bf00      	nop

08013fd8 <uxr_init_session_info>:
 8013fd8:	2300      	movs	r3, #0
 8013fda:	f361 0307 	bfi	r3, r1, #0, #8
 8013fde:	0e11      	lsrs	r1, r2, #24
 8013fe0:	f361 230f 	bfi	r3, r1, #8, #8
 8013fe4:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8013fe8:	f361 4317 	bfi	r3, r1, #16, #8
 8013fec:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8013ff0:	f361 631f 	bfi	r3, r1, #24, #8
 8013ff4:	f04f 0c09 	mov.w	ip, #9
 8013ff8:	21ff      	movs	r1, #255	@ 0xff
 8013ffa:	6003      	str	r3, [r0, #0]
 8013ffc:	7102      	strb	r2, [r0, #4]
 8013ffe:	f8a0 c006 	strh.w	ip, [r0, #6]
 8014002:	7141      	strb	r1, [r0, #5]
 8014004:	4770      	bx	lr
 8014006:	bf00      	nop

08014008 <uxr_buffer_create_session>:
 8014008:	b530      	push	{r4, r5, lr}
 801400a:	4d13      	ldr	r5, [pc, #76]	@ (8014058 <uxr_buffer_create_session+0x50>)
 801400c:	b089      	sub	sp, #36	@ 0x24
 801400e:	2300      	movs	r3, #0
 8014010:	9307      	str	r3, [sp, #28]
 8014012:	f8ad 201c 	strh.w	r2, [sp, #28]
 8014016:	682a      	ldr	r2, [r5, #0]
 8014018:	9200      	str	r2, [sp, #0]
 801401a:	460c      	mov	r4, r1
 801401c:	2201      	movs	r2, #1
 801401e:	88a9      	ldrh	r1, [r5, #4]
 8014020:	9301      	str	r3, [sp, #4]
 8014022:	80c2      	strh	r2, [r0, #6]
 8014024:	f8ad 1006 	strh.w	r1, [sp, #6]
 8014028:	f8d0 1001 	ldr.w	r1, [r0, #1]
 801402c:	7800      	ldrb	r0, [r0, #0]
 801402e:	9303      	str	r3, [sp, #12]
 8014030:	f88d 2004 	strb.w	r2, [sp, #4]
 8014034:	9102      	str	r1, [sp, #8]
 8014036:	2210      	movs	r2, #16
 8014038:	4619      	mov	r1, r3
 801403a:	f88d 000c 	strb.w	r0, [sp, #12]
 801403e:	4620      	mov	r0, r4
 8014040:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8014044:	9306      	str	r3, [sp, #24]
 8014046:	f000 fe6f 	bl	8014d28 <uxr_buffer_submessage_header>
 801404a:	4669      	mov	r1, sp
 801404c:	4620      	mov	r0, r4
 801404e:	f001 fdd1 	bl	8015bf4 <uxr_serialize_CREATE_CLIENT_Payload>
 8014052:	b009      	add	sp, #36	@ 0x24
 8014054:	bd30      	pop	{r4, r5, pc}
 8014056:	bf00      	nop
 8014058:	0801f9c8 	.word	0x0801f9c8

0801405c <uxr_buffer_delete_session>:
 801405c:	b510      	push	{r4, lr}
 801405e:	4a0c      	ldr	r2, [pc, #48]	@ (8014090 <uxr_buffer_delete_session+0x34>)
 8014060:	b082      	sub	sp, #8
 8014062:	460c      	mov	r4, r1
 8014064:	2302      	movs	r3, #2
 8014066:	8911      	ldrh	r1, [r2, #8]
 8014068:	80c3      	strh	r3, [r0, #6]
 801406a:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 801406e:	2300      	movs	r3, #0
 8014070:	2204      	movs	r2, #4
 8014072:	f8ad 1006 	strh.w	r1, [sp, #6]
 8014076:	4620      	mov	r0, r4
 8014078:	2103      	movs	r1, #3
 801407a:	f8ad c004 	strh.w	ip, [sp, #4]
 801407e:	f000 fe53 	bl	8014d28 <uxr_buffer_submessage_header>
 8014082:	a901      	add	r1, sp, #4
 8014084:	4620      	mov	r0, r4
 8014086:	f001 fe59 	bl	8015d3c <uxr_serialize_DELETE_Payload>
 801408a:	b002      	add	sp, #8
 801408c:	bd10      	pop	{r4, pc}
 801408e:	bf00      	nop
 8014090:	0801f9c8 	.word	0x0801f9c8

08014094 <uxr_read_create_session_status>:
 8014094:	b510      	push	{r4, lr}
 8014096:	460b      	mov	r3, r1
 8014098:	b088      	sub	sp, #32
 801409a:	4604      	mov	r4, r0
 801409c:	a901      	add	r1, sp, #4
 801409e:	4618      	mov	r0, r3
 80140a0:	f001 fe5c 	bl	8015d5c <uxr_deserialize_STATUS_AGENT_Payload>
 80140a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80140a8:	7163      	strb	r3, [r4, #5]
 80140aa:	b008      	add	sp, #32
 80140ac:	bd10      	pop	{r4, pc}
 80140ae:	bf00      	nop

080140b0 <uxr_read_delete_session_status>:
 80140b0:	b510      	push	{r4, lr}
 80140b2:	460b      	mov	r3, r1
 80140b4:	b082      	sub	sp, #8
 80140b6:	4604      	mov	r4, r0
 80140b8:	4669      	mov	r1, sp
 80140ba:	4618      	mov	r0, r3
 80140bc:	f001 fe7e 	bl	8015dbc <uxr_deserialize_STATUS_Payload>
 80140c0:	88e3      	ldrh	r3, [r4, #6]
 80140c2:	2b02      	cmp	r3, #2
 80140c4:	d001      	beq.n	80140ca <uxr_read_delete_session_status+0x1a>
 80140c6:	b002      	add	sp, #8
 80140c8:	bd10      	pop	{r4, pc}
 80140ca:	f10d 0002 	add.w	r0, sp, #2
 80140ce:	f7fe fe9b 	bl	8012e08 <uxr_object_id_from_raw>
 80140d2:	f8bd 3000 	ldrh.w	r3, [sp]
 80140d6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80140da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80140de:	bf08      	it	eq
 80140e0:	7162      	strbeq	r2, [r4, #5]
 80140e2:	b002      	add	sp, #8
 80140e4:	bd10      	pop	{r4, pc}
 80140e6:	bf00      	nop

080140e8 <uxr_stamp_create_session_header>:
 80140e8:	b510      	push	{r4, lr}
 80140ea:	2208      	movs	r2, #8
 80140ec:	b08a      	sub	sp, #40	@ 0x28
 80140ee:	4604      	mov	r4, r0
 80140f0:	eb0d 0002 	add.w	r0, sp, r2
 80140f4:	f7f9 feb8 	bl	800de68 <ucdr_init_buffer>
 80140f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140fc:	9400      	str	r4, [sp, #0]
 80140fe:	2300      	movs	r3, #0
 8014100:	461a      	mov	r2, r3
 8014102:	a802      	add	r0, sp, #8
 8014104:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8014108:	f001 f80c 	bl	8015124 <uxr_serialize_message_header>
 801410c:	b00a      	add	sp, #40	@ 0x28
 801410e:	bd10      	pop	{r4, pc}

08014110 <uxr_stamp_session_header>:
 8014110:	b570      	push	{r4, r5, r6, lr}
 8014112:	4604      	mov	r4, r0
 8014114:	b08a      	sub	sp, #40	@ 0x28
 8014116:	4616      	mov	r6, r2
 8014118:	2208      	movs	r2, #8
 801411a:	eb0d 0002 	add.w	r0, sp, r2
 801411e:	460d      	mov	r5, r1
 8014120:	4619      	mov	r1, r3
 8014122:	f7f9 fea1 	bl	800de68 <ucdr_init_buffer>
 8014126:	f814 1b01 	ldrb.w	r1, [r4], #1
 801412a:	9400      	str	r4, [sp, #0]
 801412c:	4633      	mov	r3, r6
 801412e:	462a      	mov	r2, r5
 8014130:	a802      	add	r0, sp, #8
 8014132:	f000 fff7 	bl	8015124 <uxr_serialize_message_header>
 8014136:	b00a      	add	sp, #40	@ 0x28
 8014138:	bd70      	pop	{r4, r5, r6, pc}
 801413a:	bf00      	nop

0801413c <uxr_read_session_header>:
 801413c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801413e:	4607      	mov	r7, r0
 8014140:	b085      	sub	sp, #20
 8014142:	4608      	mov	r0, r1
 8014144:	460c      	mov	r4, r1
 8014146:	4615      	mov	r5, r2
 8014148:	461e      	mov	r6, r3
 801414a:	f7f9 febd 	bl	800dec8 <ucdr_buffer_remaining>
 801414e:	2808      	cmp	r0, #8
 8014150:	d802      	bhi.n	8014158 <uxr_read_session_header+0x1c>
 8014152:	2000      	movs	r0, #0
 8014154:	b005      	add	sp, #20
 8014156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014158:	ab03      	add	r3, sp, #12
 801415a:	9300      	str	r3, [sp, #0]
 801415c:	462a      	mov	r2, r5
 801415e:	4633      	mov	r3, r6
 8014160:	f10d 010b 	add.w	r1, sp, #11
 8014164:	4620      	mov	r0, r4
 8014166:	f000 fffb 	bl	8015160 <uxr_deserialize_message_header>
 801416a:	783a      	ldrb	r2, [r7, #0]
 801416c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8014170:	4293      	cmp	r3, r2
 8014172:	d1ee      	bne.n	8014152 <uxr_read_session_header+0x16>
 8014174:	061b      	lsls	r3, r3, #24
 8014176:	d41c      	bmi.n	80141b2 <uxr_read_session_header+0x76>
 8014178:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801417c:	787b      	ldrb	r3, [r7, #1]
 801417e:	429a      	cmp	r2, r3
 8014180:	d003      	beq.n	801418a <uxr_read_session_header+0x4e>
 8014182:	2001      	movs	r0, #1
 8014184:	f080 0001 	eor.w	r0, r0, #1
 8014188:	e7e4      	b.n	8014154 <uxr_read_session_header+0x18>
 801418a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801418e:	78bb      	ldrb	r3, [r7, #2]
 8014190:	429a      	cmp	r2, r3
 8014192:	f107 0102 	add.w	r1, r7, #2
 8014196:	d1f4      	bne.n	8014182 <uxr_read_session_header+0x46>
 8014198:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801419c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80141a0:	429a      	cmp	r2, r3
 80141a2:	d1ee      	bne.n	8014182 <uxr_read_session_header+0x46>
 80141a4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80141a8:	784b      	ldrb	r3, [r1, #1]
 80141aa:	429a      	cmp	r2, r3
 80141ac:	d1e9      	bne.n	8014182 <uxr_read_session_header+0x46>
 80141ae:	2000      	movs	r0, #0
 80141b0:	e7e8      	b.n	8014184 <uxr_read_session_header+0x48>
 80141b2:	2001      	movs	r0, #1
 80141b4:	e7ce      	b.n	8014154 <uxr_read_session_header+0x18>
 80141b6:	bf00      	nop

080141b8 <uxr_session_header_offset>:
 80141b8:	f990 3000 	ldrsb.w	r3, [r0]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	bfb4      	ite	lt
 80141c0:	2004      	movlt	r0, #4
 80141c2:	2008      	movge	r0, #8
 80141c4:	4770      	bx	lr
 80141c6:	bf00      	nop

080141c8 <uxr_init_base_object_request>:
 80141c8:	b510      	push	{r4, lr}
 80141ca:	88c3      	ldrh	r3, [r0, #6]
 80141cc:	b082      	sub	sp, #8
 80141ce:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 80141d2:	9101      	str	r1, [sp, #4]
 80141d4:	f1a3 010a 	sub.w	r1, r3, #10
 80141d8:	b289      	uxth	r1, r1
 80141da:	42a1      	cmp	r1, r4
 80141dc:	d80e      	bhi.n	80141fc <uxr_init_base_object_request+0x34>
 80141de:	3301      	adds	r3, #1
 80141e0:	b29c      	uxth	r4, r3
 80141e2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80141e6:	b2db      	uxtb	r3, r3
 80141e8:	80c4      	strh	r4, [r0, #6]
 80141ea:	9801      	ldr	r0, [sp, #4]
 80141ec:	7011      	strb	r1, [r2, #0]
 80141ee:	7053      	strb	r3, [r2, #1]
 80141f0:	1c91      	adds	r1, r2, #2
 80141f2:	f7fe fe1d 	bl	8012e30 <uxr_object_id_to_raw>
 80141f6:	4620      	mov	r0, r4
 80141f8:	b002      	add	sp, #8
 80141fa:	bd10      	pop	{r4, pc}
 80141fc:	230a      	movs	r3, #10
 80141fe:	2100      	movs	r1, #0
 8014200:	461c      	mov	r4, r3
 8014202:	e7f1      	b.n	80141e8 <uxr_init_base_object_request+0x20>

08014204 <uxr_parse_base_object_request>:
 8014204:	b570      	push	{r4, r5, r6, lr}
 8014206:	4604      	mov	r4, r0
 8014208:	3002      	adds	r0, #2
 801420a:	460d      	mov	r5, r1
 801420c:	4616      	mov	r6, r2
 801420e:	f7fe fdfb 	bl	8012e08 <uxr_object_id_from_raw>
 8014212:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8014216:	8028      	strh	r0, [r5, #0]
 8014218:	806b      	strh	r3, [r5, #2]
 801421a:	8823      	ldrh	r3, [r4, #0]
 801421c:	ba5b      	rev16	r3, r3
 801421e:	8033      	strh	r3, [r6, #0]
 8014220:	bd70      	pop	{r4, r5, r6, pc}
 8014222:	bf00      	nop

08014224 <uxr_init_framing_io>:
 8014224:	2300      	movs	r3, #0
 8014226:	7041      	strb	r1, [r0, #1]
 8014228:	7003      	strb	r3, [r0, #0]
 801422a:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801422c:	4770      	bx	lr
 801422e:	bf00      	nop

08014230 <uxr_write_framed_msg>:
 8014230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014234:	f890 c001 	ldrb.w	ip, [r0, #1]
 8014238:	4617      	mov	r7, r2
 801423a:	227e      	movs	r2, #126	@ 0x7e
 801423c:	b085      	sub	sp, #20
 801423e:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
 8014242:	f1ac 027d 	sub.w	r2, ip, #125	@ 0x7d
 8014246:	2a01      	cmp	r2, #1
 8014248:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 801424c:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8014250:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8014254:	4604      	mov	r4, r0
 8014256:	460e      	mov	r6, r1
 8014258:	469a      	mov	sl, r3
 801425a:	f240 812e 	bls.w	80144ba <uxr_write_framed_msg+0x28a>
 801425e:	2003      	movs	r0, #3
 8014260:	2102      	movs	r1, #2
 8014262:	f04f 0905 	mov.w	r9, #5
 8014266:	2204      	movs	r2, #4
 8014268:	4686      	mov	lr, r0
 801426a:	460b      	mov	r3, r1
 801426c:	f884 c039 	strb.w	ip, [r4, #57]	@ 0x39
 8014270:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 8014274:	f1bc 0f01 	cmp.w	ip, #1
 8014278:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801427c:	4421      	add	r1, r4
 801427e:	f240 8110 	bls.w	80144a2 <uxr_write_framed_msg+0x272>
 8014282:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8014286:	fa5f fc8b 	uxtb.w	ip, fp
 801428a:	f3cb 2107 	ubfx	r1, fp, #8, #8
 801428e:	f1ac 0e7d 	sub.w	lr, ip, #125	@ 0x7d
 8014292:	f1a1 057d 	sub.w	r5, r1, #125	@ 0x7d
 8014296:	f1be 0f01 	cmp.w	lr, #1
 801429a:	f884 0062 	strb.w	r0, [r4, #98]	@ 0x62
 801429e:	b2ed      	uxtb	r5, r5
 80142a0:	d94c      	bls.n	801433c <uxr_write_framed_msg+0x10c>
 80142a2:	4420      	add	r0, r4
 80142a4:	2d01      	cmp	r5, #1
 80142a6:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 80142aa:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80142ae:	d95d      	bls.n	801436c <uxr_write_framed_msg+0x13c>
 80142b0:	18a0      	adds	r0, r4, r2
 80142b2:	3201      	adds	r2, #1
 80142b4:	b2d2      	uxtb	r2, r2
 80142b6:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80142ba:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80142be:	f1bb 0f00 	cmp.w	fp, #0
 80142c2:	f000 8108 	beq.w	80144d6 <uxr_write_framed_msg+0x2a6>
 80142c6:	f04f 0c00 	mov.w	ip, #0
 80142ca:	4661      	mov	r1, ip
 80142cc:	46de      	mov	lr, fp
 80142ce:	46e3      	mov	fp, ip
 80142d0:	46d4      	mov	ip, sl
 80142d2:	468a      	mov	sl, r1
 80142d4:	f8df 9208 	ldr.w	r9, [pc, #520]	@ 80144e0 <uxr_write_framed_msg+0x2b0>
 80142d8:	f81c 300a 	ldrb.w	r3, [ip, sl]
 80142dc:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80142e0:	2901      	cmp	r1, #1
 80142e2:	d91b      	bls.n	801431c <uxr_write_framed_msg+0xec>
 80142e4:	2a29      	cmp	r2, #41	@ 0x29
 80142e6:	d84e      	bhi.n	8014386 <uxr_write_framed_msg+0x156>
 80142e8:	18a1      	adds	r1, r4, r2
 80142ea:	3201      	adds	r2, #1
 80142ec:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 80142f0:	b2d2      	uxtb	r2, r2
 80142f2:	ea8b 0303 	eor.w	r3, fp, r3
 80142f6:	b2db      	uxtb	r3, r3
 80142f8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80142fc:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 8014300:	f10a 0a01 	add.w	sl, sl, #1
 8014304:	ea83 2b1b 	eor.w	fp, r3, fp, lsr #8
 8014308:	45d6      	cmp	lr, sl
 801430a:	d95a      	bls.n	80143c2 <uxr_write_framed_msg+0x192>
 801430c:	f81c 300a 	ldrb.w	r3, [ip, sl]
 8014310:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014314:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8014318:	2901      	cmp	r1, #1
 801431a:	d8e3      	bhi.n	80142e4 <uxr_write_framed_msg+0xb4>
 801431c:	1c51      	adds	r1, r2, #1
 801431e:	b2c9      	uxtb	r1, r1
 8014320:	2929      	cmp	r1, #41	@ 0x29
 8014322:	d830      	bhi.n	8014386 <uxr_write_framed_msg+0x156>
 8014324:	18a1      	adds	r1, r4, r2
 8014326:	f04f 007d 	mov.w	r0, #125	@ 0x7d
 801432a:	3202      	adds	r2, #2
 801432c:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8014330:	f083 0020 	eor.w	r0, r3, #32
 8014334:	b2d2      	uxtb	r2, r2
 8014336:	f881 0039 	strb.w	r0, [r1, #57]	@ 0x39
 801433a:	e7da      	b.n	80142f2 <uxr_write_framed_msg+0xc2>
 801433c:	eb04 0e00 	add.w	lr, r4, r0
 8014340:	f08c 0c20 	eor.w	ip, ip, #32
 8014344:	1c82      	adds	r2, r0, #2
 8014346:	f88e c039 	strb.w	ip, [lr, #57]	@ 0x39
 801434a:	b2d2      	uxtb	r2, r2
 801434c:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8014350:	2d01      	cmp	r5, #1
 8014352:	f88e c038 	strb.w	ip, [lr, #56]	@ 0x38
 8014356:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801435a:	d907      	bls.n	801436c <uxr_write_framed_msg+0x13c>
 801435c:	4422      	add	r2, r4
 801435e:	3003      	adds	r0, #3
 8014360:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
 8014364:	b2c2      	uxtb	r2, r0
 8014366:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801436a:	e7ac      	b.n	80142c6 <uxr_write_framed_msg+0x96>
 801436c:	18a0      	adds	r0, r4, r2
 801436e:	f081 0120 	eor.w	r1, r1, #32
 8014372:	3202      	adds	r2, #2
 8014374:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 8014378:	b2d2      	uxtb	r2, r2
 801437a:	217d      	movs	r1, #125	@ 0x7d
 801437c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8014380:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014384:	e79f      	b.n	80142c6 <uxr_write_framed_msg+0x96>
 8014386:	e9cd ba00 	strd	fp, sl, [sp]
 801438a:	2500      	movs	r5, #0
 801438c:	46e2      	mov	sl, ip
 801438e:	46f3      	mov	fp, lr
 8014390:	e000      	b.n	8014394 <uxr_write_framed_msg+0x164>
 8014392:	b190      	cbz	r0, 80143ba <uxr_write_framed_msg+0x18a>
 8014394:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014398:	1b52      	subs	r2, r2, r5
 801439a:	4643      	mov	r3, r8
 801439c:	4421      	add	r1, r4
 801439e:	4638      	mov	r0, r7
 80143a0:	47b0      	blx	r6
 80143a2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80143a6:	4405      	add	r5, r0
 80143a8:	4295      	cmp	r5, r2
 80143aa:	d3f2      	bcc.n	8014392 <uxr_write_framed_msg+0x162>
 80143ac:	46d4      	mov	ip, sl
 80143ae:	46de      	mov	lr, fp
 80143b0:	f8dd a004 	ldr.w	sl, [sp, #4]
 80143b4:	f8dd b000 	ldr.w	fp, [sp]
 80143b8:	d06f      	beq.n	801449a <uxr_write_framed_msg+0x26a>
 80143ba:	2000      	movs	r0, #0
 80143bc:	b005      	add	sp, #20
 80143be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143c2:	46dc      	mov	ip, fp
 80143c4:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80143c8:	f8ad c00c 	strh.w	ip, [sp, #12]
 80143cc:	46f3      	mov	fp, lr
 80143ce:	fa5f fc8c 	uxtb.w	ip, ip
 80143d2:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 80143d6:	2b01      	cmp	r3, #1
 80143d8:	f04f 0900 	mov.w	r9, #0
 80143dc:	f04f 0a7d 	mov.w	sl, #125	@ 0x7d
 80143e0:	d930      	bls.n	8014444 <uxr_write_framed_msg+0x214>
 80143e2:	2a29      	cmp	r2, #41	@ 0x29
 80143e4:	d91c      	bls.n	8014420 <uxr_write_framed_msg+0x1f0>
 80143e6:	2500      	movs	r5, #0
 80143e8:	e001      	b.n	80143ee <uxr_write_framed_msg+0x1be>
 80143ea:	2800      	cmp	r0, #0
 80143ec:	d0e5      	beq.n	80143ba <uxr_write_framed_msg+0x18a>
 80143ee:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80143f2:	1b52      	subs	r2, r2, r5
 80143f4:	4643      	mov	r3, r8
 80143f6:	4421      	add	r1, r4
 80143f8:	4638      	mov	r0, r7
 80143fa:	47b0      	blx	r6
 80143fc:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014400:	4405      	add	r5, r0
 8014402:	4295      	cmp	r5, r2
 8014404:	d3f1      	bcc.n	80143ea <uxr_write_framed_msg+0x1ba>
 8014406:	d1d8      	bne.n	80143ba <uxr_write_framed_msg+0x18a>
 8014408:	f109 0310 	add.w	r3, r9, #16
 801440c:	446b      	add	r3, sp
 801440e:	2200      	movs	r2, #0
 8014410:	f813 cc04 	ldrb.w	ip, [r3, #-4]
 8014414:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014418:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 801441c:	2b01      	cmp	r3, #1
 801441e:	d911      	bls.n	8014444 <uxr_write_framed_msg+0x214>
 8014420:	18a3      	adds	r3, r4, r2
 8014422:	3201      	adds	r2, #1
 8014424:	b2d2      	uxtb	r2, r2
 8014426:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 801442a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801442e:	f1b9 0f00 	cmp.w	r9, #0
 8014432:	d119      	bne.n	8014468 <uxr_write_framed_msg+0x238>
 8014434:	f89d c00d 	ldrb.w	ip, [sp, #13]
 8014438:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 801443c:	2b01      	cmp	r3, #1
 801443e:	f04f 0901 	mov.w	r9, #1
 8014442:	d8ce      	bhi.n	80143e2 <uxr_write_framed_msg+0x1b2>
 8014444:	1c53      	adds	r3, r2, #1
 8014446:	b2db      	uxtb	r3, r3
 8014448:	2b29      	cmp	r3, #41	@ 0x29
 801444a:	d8cc      	bhi.n	80143e6 <uxr_write_framed_msg+0x1b6>
 801444c:	18a3      	adds	r3, r4, r2
 801444e:	3202      	adds	r2, #2
 8014450:	f08c 0c20 	eor.w	ip, ip, #32
 8014454:	b2d2      	uxtb	r2, r2
 8014456:	f883 c039 	strb.w	ip, [r3, #57]	@ 0x39
 801445a:	f883 a038 	strb.w	sl, [r3, #56]	@ 0x38
 801445e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014462:	f1b9 0f00 	cmp.w	r9, #0
 8014466:	d0e5      	beq.n	8014434 <uxr_write_framed_msg+0x204>
 8014468:	2500      	movs	r5, #0
 801446a:	e001      	b.n	8014470 <uxr_write_framed_msg+0x240>
 801446c:	2800      	cmp	r0, #0
 801446e:	d0a4      	beq.n	80143ba <uxr_write_framed_msg+0x18a>
 8014470:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014474:	1b52      	subs	r2, r2, r5
 8014476:	4643      	mov	r3, r8
 8014478:	4421      	add	r1, r4
 801447a:	4638      	mov	r0, r7
 801447c:	47b0      	blx	r6
 801447e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014482:	4405      	add	r5, r0
 8014484:	4295      	cmp	r5, r2
 8014486:	d3f1      	bcc.n	801446c <uxr_write_framed_msg+0x23c>
 8014488:	d197      	bne.n	80143ba <uxr_write_framed_msg+0x18a>
 801448a:	2300      	movs	r3, #0
 801448c:	fa1f f08b 	uxth.w	r0, fp
 8014490:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014494:	b005      	add	sp, #20
 8014496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801449a:	2300      	movs	r3, #0
 801449c:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80144a0:	e732      	b.n	8014308 <uxr_write_framed_msg+0xd8>
 80144a2:	44a6      	add	lr, r4
 80144a4:	f085 0520 	eor.w	r5, r5, #32
 80144a8:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80144ac:	4610      	mov	r0, r2
 80144ae:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 80144b2:	464a      	mov	r2, r9
 80144b4:	f88e 5038 	strb.w	r5, [lr, #56]	@ 0x38
 80144b8:	e6e5      	b.n	8014286 <uxr_write_framed_msg+0x56>
 80144ba:	f08c 0c20 	eor.w	ip, ip, #32
 80144be:	f880 c03a 	strb.w	ip, [r0, #58]	@ 0x3a
 80144c2:	2103      	movs	r1, #3
 80144c4:	2004      	movs	r0, #4
 80144c6:	f04f 0906 	mov.w	r9, #6
 80144ca:	2205      	movs	r2, #5
 80144cc:	4686      	mov	lr, r0
 80144ce:	460b      	mov	r3, r1
 80144d0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80144d4:	e6ca      	b.n	801426c <uxr_write_framed_msg+0x3c>
 80144d6:	f8ad b00c 	strh.w	fp, [sp, #12]
 80144da:	46dc      	mov	ip, fp
 80144dc:	e779      	b.n	80143d2 <uxr_write_framed_msg+0x1a2>
 80144de:	bf00      	nop
 80144e0:	08020e0c 	.word	0x08020e0c

080144e4 <uxr_framing_read_transport>:
 80144e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144e8:	4604      	mov	r4, r0
 80144ea:	b083      	sub	sp, #12
 80144ec:	461f      	mov	r7, r3
 80144ee:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 80144f2:	4689      	mov	r9, r1
 80144f4:	4692      	mov	sl, r2
 80144f6:	f000 fc5d 	bl	8014db4 <uxr_millis>
 80144fa:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80144fe:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8014502:	42b3      	cmp	r3, r6
 8014504:	4680      	mov	r8, r0
 8014506:	d062      	beq.n	80145ce <uxr_framing_read_transport+0xea>
 8014508:	d81c      	bhi.n	8014544 <uxr_framing_read_transport+0x60>
 801450a:	1e75      	subs	r5, r6, #1
 801450c:	1aed      	subs	r5, r5, r3
 801450e:	b2ed      	uxtb	r5, r5
 8014510:	2600      	movs	r6, #0
 8014512:	455d      	cmp	r5, fp
 8014514:	d81f      	bhi.n	8014556 <uxr_framing_read_transport+0x72>
 8014516:	19ab      	adds	r3, r5, r6
 8014518:	455b      	cmp	r3, fp
 801451a:	bf84      	itt	hi
 801451c:	ebab 0b05 	subhi.w	fp, fp, r5
 8014520:	fa5f f68b 	uxtbhi.w	r6, fp
 8014524:	b9e5      	cbnz	r5, 8014560 <uxr_framing_read_transport+0x7c>
 8014526:	f04f 0b00 	mov.w	fp, #0
 801452a:	f000 fc43 	bl	8014db4 <uxr_millis>
 801452e:	683b      	ldr	r3, [r7, #0]
 8014530:	eba0 0108 	sub.w	r1, r0, r8
 8014534:	1a5b      	subs	r3, r3, r1
 8014536:	4658      	mov	r0, fp
 8014538:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801453c:	603b      	str	r3, [r7, #0]
 801453e:	b003      	add	sp, #12
 8014540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014544:	2e00      	cmp	r6, #0
 8014546:	d04a      	beq.n	80145de <uxr_framing_read_transport+0xfa>
 8014548:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 801454c:	b2dd      	uxtb	r5, r3
 801454e:	3e01      	subs	r6, #1
 8014550:	455d      	cmp	r5, fp
 8014552:	b2f6      	uxtb	r6, r6
 8014554:	d9df      	bls.n	8014516 <uxr_framing_read_transport+0x32>
 8014556:	fa5f f58b 	uxtb.w	r5, fp
 801455a:	2600      	movs	r6, #0
 801455c:	2d00      	cmp	r5, #0
 801455e:	d0e2      	beq.n	8014526 <uxr_framing_read_transport+0x42>
 8014560:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014564:	3102      	adds	r1, #2
 8014566:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014568:	9300      	str	r3, [sp, #0]
 801456a:	683b      	ldr	r3, [r7, #0]
 801456c:	4421      	add	r1, r4
 801456e:	462a      	mov	r2, r5
 8014570:	4650      	mov	r0, sl
 8014572:	47c8      	blx	r9
 8014574:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014578:	4a1b      	ldr	r2, [pc, #108]	@ (80145e8 <uxr_framing_read_transport+0x104>)
 801457a:	4403      	add	r3, r0
 801457c:	0859      	lsrs	r1, r3, #1
 801457e:	4683      	mov	fp, r0
 8014580:	fba2 0101 	umull	r0, r1, r2, r1
 8014584:	0889      	lsrs	r1, r1, #2
 8014586:	222a      	movs	r2, #42	@ 0x2a
 8014588:	fb02 3111 	mls	r1, r2, r1, r3
 801458c:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8014590:	f1bb 0f00 	cmp.w	fp, #0
 8014594:	d0c7      	beq.n	8014526 <uxr_framing_read_transport+0x42>
 8014596:	45ab      	cmp	fp, r5
 8014598:	d1c7      	bne.n	801452a <uxr_framing_read_transport+0x46>
 801459a:	2e00      	cmp	r6, #0
 801459c:	d0c5      	beq.n	801452a <uxr_framing_read_transport+0x46>
 801459e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80145a0:	9300      	str	r3, [sp, #0]
 80145a2:	3102      	adds	r1, #2
 80145a4:	4632      	mov	r2, r6
 80145a6:	4421      	add	r1, r4
 80145a8:	2300      	movs	r3, #0
 80145aa:	4650      	mov	r0, sl
 80145ac:	47c8      	blx	r9
 80145ae:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80145b2:	4a0d      	ldr	r2, [pc, #52]	@ (80145e8 <uxr_framing_read_transport+0x104>)
 80145b4:	4403      	add	r3, r0
 80145b6:	0859      	lsrs	r1, r3, #1
 80145b8:	fba2 2101 	umull	r2, r1, r2, r1
 80145bc:	0889      	lsrs	r1, r1, #2
 80145be:	222a      	movs	r2, #42	@ 0x2a
 80145c0:	fb02 3311 	mls	r3, r2, r1, r3
 80145c4:	eb00 0b05 	add.w	fp, r0, r5
 80145c8:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80145cc:	e7ad      	b.n	801452a <uxr_framing_read_transport+0x46>
 80145ce:	2600      	movs	r6, #0
 80145d0:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 80145d4:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 80145d6:	d9be      	bls.n	8014556 <uxr_framing_read_transport+0x72>
 80145d8:	2529      	movs	r5, #41	@ 0x29
 80145da:	2102      	movs	r1, #2
 80145dc:	e7c3      	b.n	8014566 <uxr_framing_read_transport+0x82>
 80145de:	f1c3 0329 	rsb	r3, r3, #41	@ 0x29
 80145e2:	b2dd      	uxtb	r5, r3
 80145e4:	e795      	b.n	8014512 <uxr_framing_read_transport+0x2e>
 80145e6:	bf00      	nop
 80145e8:	30c30c31 	.word	0x30c30c31

080145ec <uxr_read_framed_msg>:
 80145ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145f0:	461d      	mov	r5, r3
 80145f2:	f890 c02c 	ldrb.w	ip, [r0, #44]	@ 0x2c
 80145f6:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80145fa:	b085      	sub	sp, #20
 80145fc:	459c      	cmp	ip, r3
 80145fe:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 8014602:	4604      	mov	r4, r0
 8014604:	460f      	mov	r7, r1
 8014606:	4616      	mov	r6, r2
 8014608:	f000 81ae 	beq.w	8014968 <uxr_read_framed_msg+0x37c>
 801460c:	2000      	movs	r0, #0
 801460e:	4639      	mov	r1, r7
 8014610:	2800      	cmp	r0, #0
 8014612:	d138      	bne.n	8014686 <uxr_read_framed_msg+0x9a>
 8014614:	468a      	mov	sl, r1
 8014616:	7823      	ldrb	r3, [r4, #0]
 8014618:	2b07      	cmp	r3, #7
 801461a:	d8fd      	bhi.n	8014618 <uxr_read_framed_msg+0x2c>
 801461c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8014620:	0116013b 	.word	0x0116013b
 8014624:	00cd00f0 	.word	0x00cd00f0
 8014628:	005a00a0 	.word	0x005a00a0
 801462c:	00080037 	.word	0x00080037
 8014630:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8014634:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8014638:	4290      	cmp	r0, r2
 801463a:	f000 8167 	beq.w	801490c <uxr_read_framed_msg+0x320>
 801463e:	18a3      	adds	r3, r4, r2
 8014640:	1c57      	adds	r7, r2, #1
 8014642:	49c7      	ldr	r1, [pc, #796]	@ (8014960 <uxr_read_framed_msg+0x374>)
 8014644:	f893 c002 	ldrb.w	ip, [r3, #2]
 8014648:	087b      	lsrs	r3, r7, #1
 801464a:	fba1 8303 	umull	r8, r3, r1, r3
 801464e:	089b      	lsrs	r3, r3, #2
 8014650:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8014654:	fb08 7313 	mls	r3, r8, r3, r7
 8014658:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801465c:	b2df      	uxtb	r7, r3
 801465e:	f000 81b2 	beq.w	80149c6 <uxr_read_framed_msg+0x3da>
 8014662:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8014666:	f884 702d 	strb.w	r7, [r4, #45]	@ 0x2d
 801466a:	f000 8220 	beq.w	8014aae <uxr_read_framed_msg+0x4c2>
 801466e:	4661      	mov	r1, ip
 8014670:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8014672:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8014674:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8014678:	b29b      	uxth	r3, r3
 801467a:	2100      	movs	r1, #0
 801467c:	429a      	cmp	r2, r3
 801467e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8014680:	7021      	strb	r1, [r4, #0]
 8014682:	f000 8198 	beq.w	80149b6 <uxr_read_framed_msg+0x3ca>
 8014686:	2000      	movs	r0, #0
 8014688:	b005      	add	sp, #20
 801468a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801468e:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8014692:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8014696:	4297      	cmp	r7, r2
 8014698:	f000 8148 	beq.w	801492c <uxr_read_framed_msg+0x340>
 801469c:	18a3      	adds	r3, r4, r2
 801469e:	f102 0c01 	add.w	ip, r2, #1
 80146a2:	49af      	ldr	r1, [pc, #700]	@ (8014960 <uxr_read_framed_msg+0x374>)
 80146a4:	7898      	ldrb	r0, [r3, #2]
 80146a6:	ea4f 035c 	mov.w	r3, ip, lsr #1
 80146aa:	fba1 8303 	umull	r8, r3, r1, r3
 80146ae:	089b      	lsrs	r3, r3, #2
 80146b0:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 80146b4:	fb08 c313 	mls	r3, r8, r3, ip
 80146b8:	287d      	cmp	r0, #125	@ 0x7d
 80146ba:	fa5f fc83 	uxtb.w	ip, r3
 80146be:	f000 8194 	beq.w	80149ea <uxr_read_framed_msg+0x3fe>
 80146c2:	287e      	cmp	r0, #126	@ 0x7e
 80146c4:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 80146c8:	f000 8200 	beq.w	8014acc <uxr_read_framed_msg+0x4e0>
 80146cc:	2307      	movs	r3, #7
 80146ce:	86a0      	strh	r0, [r4, #52]	@ 0x34
 80146d0:	7023      	strb	r3, [r4, #0]
 80146d2:	e7a0      	b.n	8014616 <uxr_read_framed_msg+0x2a>
 80146d4:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80146d6:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 80146d8:	429f      	cmp	r7, r3
 80146da:	f240 8164 	bls.w	80149a6 <uxr_read_framed_msg+0x3ba>
 80146de:	f8df 9280 	ldr.w	r9, [pc, #640]	@ 8014960 <uxr_read_framed_msg+0x374>
 80146e2:	f8cd a00c 	str.w	sl, [sp, #12]
 80146e6:	212a      	movs	r1, #42	@ 0x2a
 80146e8:	e01f      	b.n	801472a <uxr_read_framed_msg+0x13e>
 80146ea:	f89a e002 	ldrb.w	lr, [sl, #2]
 80146ee:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 80146f2:	f000 80ea 	beq.w	80148ca <uxr_read_framed_msg+0x2de>
 80146f6:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 80146fa:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 80146fe:	f000 8142 	beq.w	8014986 <uxr_read_framed_msg+0x39a>
 8014702:	f805 e003 	strb.w	lr, [r5, r3]
 8014706:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8014708:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801470a:	4f96      	ldr	r7, [pc, #600]	@ (8014964 <uxr_read_framed_msg+0x378>)
 801470c:	ea80 020e 	eor.w	r2, r0, lr
 8014710:	b2d2      	uxtb	r2, r2
 8014712:	3301      	adds	r3, #1
 8014714:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8014718:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 801471a:	b29b      	uxth	r3, r3
 801471c:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8014720:	42bb      	cmp	r3, r7
 8014722:	8663      	strh	r3, [r4, #50]	@ 0x32
 8014724:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8014726:	f080 80e7 	bcs.w	80148f8 <uxr_read_framed_msg+0x30c>
 801472a:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 801472e:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 8014732:	f100 0c01 	add.w	ip, r0, #1
 8014736:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
 801473a:	fba9 e20e 	umull	lr, r2, r9, lr
 801473e:	0892      	lsrs	r2, r2, #2
 8014740:	fb01 c212 	mls	r2, r1, r2, ip
 8014744:	4580      	cmp	r8, r0
 8014746:	eb04 0a00 	add.w	sl, r4, r0
 801474a:	fa5f fc82 	uxtb.w	ip, r2
 801474e:	d1cc      	bne.n	80146ea <uxr_read_framed_msg+0xfe>
 8014750:	42bb      	cmp	r3, r7
 8014752:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8014756:	f040 8128 	bne.w	80149aa <uxr_read_framed_msg+0x3be>
 801475a:	2306      	movs	r3, #6
 801475c:	7023      	strb	r3, [r4, #0]
 801475e:	e75a      	b.n	8014616 <uxr_read_framed_msg+0x2a>
 8014760:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8014764:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8014768:	4297      	cmp	r7, r2
 801476a:	f000 80cf 	beq.w	801490c <uxr_read_framed_msg+0x320>
 801476e:	18a3      	adds	r3, r4, r2
 8014770:	f102 0c01 	add.w	ip, r2, #1
 8014774:	497a      	ldr	r1, [pc, #488]	@ (8014960 <uxr_read_framed_msg+0x374>)
 8014776:	7898      	ldrb	r0, [r3, #2]
 8014778:	ea4f 035c 	mov.w	r3, ip, lsr #1
 801477c:	fba1 8303 	umull	r8, r3, r1, r3
 8014780:	089b      	lsrs	r3, r3, #2
 8014782:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8014786:	fb08 c313 	mls	r3, r8, r3, ip
 801478a:	287d      	cmp	r0, #125	@ 0x7d
 801478c:	fa5f fc83 	uxtb.w	ip, r3
 8014790:	f000 813d 	beq.w	8014a0e <uxr_read_framed_msg+0x422>
 8014794:	287e      	cmp	r0, #126	@ 0x7e
 8014796:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 801479a:	f000 8188 	beq.w	8014aae <uxr_read_framed_msg+0x4c2>
 801479e:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80147a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80147a2:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 80147a6:	b29b      	uxth	r3, r3
 80147a8:	2200      	movs	r2, #0
 80147aa:	428b      	cmp	r3, r1
 80147ac:	8623      	strh	r3, [r4, #48]	@ 0x30
 80147ae:	8662      	strh	r2, [r4, #50]	@ 0x32
 80147b0:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80147b2:	f240 80f5 	bls.w	80149a0 <uxr_read_framed_msg+0x3b4>
 80147b6:	7022      	strb	r2, [r4, #0]
 80147b8:	e765      	b.n	8014686 <uxr_read_framed_msg+0x9a>
 80147ba:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 80147be:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80147c2:	4297      	cmp	r7, r2
 80147c4:	f000 80b2 	beq.w	801492c <uxr_read_framed_msg+0x340>
 80147c8:	18a3      	adds	r3, r4, r2
 80147ca:	f102 0c01 	add.w	ip, r2, #1
 80147ce:	4964      	ldr	r1, [pc, #400]	@ (8014960 <uxr_read_framed_msg+0x374>)
 80147d0:	7898      	ldrb	r0, [r3, #2]
 80147d2:	ea4f 035c 	mov.w	r3, ip, lsr #1
 80147d6:	fba1 8303 	umull	r8, r3, r1, r3
 80147da:	089b      	lsrs	r3, r3, #2
 80147dc:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 80147e0:	fb08 c313 	mls	r3, r8, r3, ip
 80147e4:	287d      	cmp	r0, #125	@ 0x7d
 80147e6:	fa5f fc83 	uxtb.w	ip, r3
 80147ea:	f000 813b 	beq.w	8014a64 <uxr_read_framed_msg+0x478>
 80147ee:	287e      	cmp	r0, #126	@ 0x7e
 80147f0:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 80147f4:	f000 816a 	beq.w	8014acc <uxr_read_framed_msg+0x4e0>
 80147f8:	2304      	movs	r3, #4
 80147fa:	8620      	strh	r0, [r4, #48]	@ 0x30
 80147fc:	7023      	strb	r3, [r4, #0]
 80147fe:	e70a      	b.n	8014616 <uxr_read_framed_msg+0x2a>
 8014800:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8014804:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8014808:	4297      	cmp	r7, r2
 801480a:	f000 80c4 	beq.w	8014996 <uxr_read_framed_msg+0x3aa>
 801480e:	18a3      	adds	r3, r4, r2
 8014810:	f102 0c01 	add.w	ip, r2, #1
 8014814:	4952      	ldr	r1, [pc, #328]	@ (8014960 <uxr_read_framed_msg+0x374>)
 8014816:	7898      	ldrb	r0, [r3, #2]
 8014818:	ea4f 035c 	mov.w	r3, ip, lsr #1
 801481c:	fba1 8303 	umull	r8, r3, r1, r3
 8014820:	089b      	lsrs	r3, r3, #2
 8014822:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8014826:	fb08 c313 	mls	r3, r8, r3, ip
 801482a:	287d      	cmp	r0, #125	@ 0x7d
 801482c:	fa5f fc83 	uxtb.w	ip, r3
 8014830:	f000 812b 	beq.w	8014a8a <uxr_read_framed_msg+0x49e>
 8014834:	287e      	cmp	r0, #126	@ 0x7e
 8014836:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 801483a:	f000 8155 	beq.w	8014ae8 <uxr_read_framed_msg+0x4fc>
 801483e:	7863      	ldrb	r3, [r4, #1]
 8014840:	4283      	cmp	r3, r0
 8014842:	bf0c      	ite	eq
 8014844:	2303      	moveq	r3, #3
 8014846:	2300      	movne	r3, #0
 8014848:	7023      	strb	r3, [r4, #0]
 801484a:	e6e4      	b.n	8014616 <uxr_read_framed_msg+0x2a>
 801484c:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8014850:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8014854:	2300      	movs	r3, #0
 8014856:	4290      	cmp	r0, r2
 8014858:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 801485c:	d06b      	beq.n	8014936 <uxr_read_framed_msg+0x34a>
 801485e:	18a3      	adds	r3, r4, r2
 8014860:	f102 0c01 	add.w	ip, r2, #1
 8014864:	493e      	ldr	r1, [pc, #248]	@ (8014960 <uxr_read_framed_msg+0x374>)
 8014866:	789f      	ldrb	r7, [r3, #2]
 8014868:	ea4f 035c 	mov.w	r3, ip, lsr #1
 801486c:	fba1 8303 	umull	r8, r3, r1, r3
 8014870:	089b      	lsrs	r3, r3, #2
 8014872:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8014876:	fb08 c313 	mls	r3, r8, r3, ip
 801487a:	2f7d      	cmp	r7, #125	@ 0x7d
 801487c:	fa5f fc83 	uxtb.w	ip, r3
 8014880:	f000 80d8 	beq.w	8014a34 <uxr_read_framed_msg+0x448>
 8014884:	2f7e      	cmp	r7, #126	@ 0x7e
 8014886:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 801488a:	f884 702e 	strb.w	r7, [r4, #46]	@ 0x2e
 801488e:	d052      	beq.n	8014936 <uxr_read_framed_msg+0x34a>
 8014890:	2302      	movs	r3, #2
 8014892:	7023      	strb	r3, [r4, #0]
 8014894:	e6bf      	b.n	8014616 <uxr_read_framed_msg+0x2a>
 8014896:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 801489a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801489e:	4930      	ldr	r1, [pc, #192]	@ (8014960 <uxr_read_framed_msg+0x374>)
 80148a0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80148a4:	e004      	b.n	80148b0 <uxr_read_framed_msg+0x2c4>
 80148a6:	78bb      	ldrb	r3, [r7, #2]
 80148a8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80148ac:	2b7e      	cmp	r3, #126	@ 0x7e
 80148ae:	d02a      	beq.n	8014906 <uxr_read_framed_msg+0x31a>
 80148b0:	1c50      	adds	r0, r2, #1
 80148b2:	0843      	lsrs	r3, r0, #1
 80148b4:	fba1 e303 	umull	lr, r3, r1, r3
 80148b8:	089b      	lsrs	r3, r3, #2
 80148ba:	fb0c 0013 	mls	r0, ip, r3, r0
 80148be:	4590      	cmp	r8, r2
 80148c0:	eb04 0702 	add.w	r7, r4, r2
 80148c4:	b2c2      	uxtb	r2, r0
 80148c6:	d1ee      	bne.n	80148a6 <uxr_read_framed_msg+0x2ba>
 80148c8:	e6dd      	b.n	8014686 <uxr_read_framed_msg+0x9a>
 80148ca:	3002      	adds	r0, #2
 80148cc:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80148d0:	eb04 0a02 	add.w	sl, r4, r2
 80148d4:	fba9 e20e 	umull	lr, r2, r9, lr
 80148d8:	0892      	lsrs	r2, r2, #2
 80148da:	45e0      	cmp	r8, ip
 80148dc:	fb01 0012 	mls	r0, r1, r2, r0
 80148e0:	f43f af36 	beq.w	8014750 <uxr_read_framed_msg+0x164>
 80148e4:	f89a e002 	ldrb.w	lr, [sl, #2]
 80148e8:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 80148ec:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 80148f0:	d049      	beq.n	8014986 <uxr_read_framed_msg+0x39a>
 80148f2:	f08e 0e20 	eor.w	lr, lr, #32
 80148f6:	e704      	b.n	8014702 <uxr_read_framed_msg+0x116>
 80148f8:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80148fc:	f43f af2d 	beq.w	801475a <uxr_read_framed_msg+0x16e>
 8014900:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8014904:	d151      	bne.n	80149aa <uxr_read_framed_msg+0x3be>
 8014906:	2301      	movs	r3, #1
 8014908:	7023      	strb	r3, [r4, #0]
 801490a:	e684      	b.n	8014616 <uxr_read_framed_msg+0x2a>
 801490c:	4651      	mov	r1, sl
 801490e:	f8cd b000 	str.w	fp, [sp]
 8014912:	2301      	movs	r3, #1
 8014914:	9301      	str	r3, [sp, #4]
 8014916:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014918:	9103      	str	r1, [sp, #12]
 801491a:	4632      	mov	r2, r6
 801491c:	4620      	mov	r0, r4
 801491e:	f7ff fde1 	bl	80144e4 <uxr_framing_read_transport>
 8014922:	fab0 f080 	clz	r0, r0
 8014926:	9903      	ldr	r1, [sp, #12]
 8014928:	0940      	lsrs	r0, r0, #5
 801492a:	e671      	b.n	8014610 <uxr_read_framed_msg+0x24>
 801492c:	4651      	mov	r1, sl
 801492e:	f8cd b000 	str.w	fp, [sp]
 8014932:	2302      	movs	r3, #2
 8014934:	e7ee      	b.n	8014914 <uxr_read_framed_msg+0x328>
 8014936:	2304      	movs	r3, #4
 8014938:	9301      	str	r3, [sp, #4]
 801493a:	f8cd b000 	str.w	fp, [sp]
 801493e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014940:	4632      	mov	r2, r6
 8014942:	4651      	mov	r1, sl
 8014944:	4620      	mov	r0, r4
 8014946:	f7ff fdcd 	bl	80144e4 <uxr_framing_read_transport>
 801494a:	2800      	cmp	r0, #0
 801494c:	f47f ae63 	bne.w	8014616 <uxr_read_framed_msg+0x2a>
 8014950:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 8014954:	387e      	subs	r0, #126	@ 0x7e
 8014956:	4651      	mov	r1, sl
 8014958:	bf18      	it	ne
 801495a:	2001      	movne	r0, #1
 801495c:	e658      	b.n	8014610 <uxr_read_framed_msg+0x24>
 801495e:	bf00      	nop
 8014960:	30c30c31 	.word	0x30c30c31
 8014964:	08020e0c 	.word	0x08020e0c
 8014968:	2305      	movs	r3, #5
 801496a:	9301      	str	r3, [sp, #4]
 801496c:	f8cd b000 	str.w	fp, [sp]
 8014970:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014972:	f7ff fdb7 	bl	80144e4 <uxr_framing_read_transport>
 8014976:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 801497a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801497e:	429a      	cmp	r2, r3
 8014980:	f43f ae81 	beq.w	8014686 <uxr_read_framed_msg+0x9a>
 8014984:	e642      	b.n	801460c <uxr_read_framed_msg+0x20>
 8014986:	42bb      	cmp	r3, r7
 8014988:	f8dd a00c 	ldr.w	sl, [sp, #12]
 801498c:	f43f aee5 	beq.w	801475a <uxr_read_framed_msg+0x16e>
 8014990:	2301      	movs	r3, #1
 8014992:	7023      	strb	r3, [r4, #0]
 8014994:	e63f      	b.n	8014616 <uxr_read_framed_msg+0x2a>
 8014996:	4651      	mov	r1, sl
 8014998:	f8cd b000 	str.w	fp, [sp]
 801499c:	2303      	movs	r3, #3
 801499e:	e7b9      	b.n	8014914 <uxr_read_framed_msg+0x328>
 80149a0:	2305      	movs	r3, #5
 80149a2:	7023      	strb	r3, [r4, #0]
 80149a4:	e637      	b.n	8014616 <uxr_read_framed_msg+0x2a>
 80149a6:	f43f aed8 	beq.w	801475a <uxr_read_framed_msg+0x16e>
 80149aa:	1afb      	subs	r3, r7, r3
 80149ac:	3302      	adds	r3, #2
 80149ae:	e9cd b300 	strd	fp, r3, [sp]
 80149b2:	4651      	mov	r1, sl
 80149b4:	e7af      	b.n	8014916 <uxr_read_framed_msg+0x32a>
 80149b6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80149b8:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80149bc:	7013      	strb	r3, [r2, #0]
 80149be:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80149c0:	b005      	add	sp, #20
 80149c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149c6:	4287      	cmp	r7, r0
 80149c8:	d0a0      	beq.n	801490c <uxr_read_framed_msg+0x320>
 80149ca:	4423      	add	r3, r4
 80149cc:	3202      	adds	r2, #2
 80149ce:	7898      	ldrb	r0, [r3, #2]
 80149d0:	0853      	lsrs	r3, r2, #1
 80149d2:	fba1 e303 	umull	lr, r3, r1, r3
 80149d6:	089b      	lsrs	r3, r3, #2
 80149d8:	fb08 2213 	mls	r2, r8, r3, r2
 80149dc:	287e      	cmp	r0, #126	@ 0x7e
 80149de:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80149e2:	d064      	beq.n	8014aae <uxr_read_framed_msg+0x4c2>
 80149e4:	f080 0120 	eor.w	r1, r0, #32
 80149e8:	e642      	b.n	8014670 <uxr_read_framed_msg+0x84>
 80149ea:	45bc      	cmp	ip, r7
 80149ec:	d09e      	beq.n	801492c <uxr_read_framed_msg+0x340>
 80149ee:	4423      	add	r3, r4
 80149f0:	3202      	adds	r2, #2
 80149f2:	7898      	ldrb	r0, [r3, #2]
 80149f4:	0853      	lsrs	r3, r2, #1
 80149f6:	fba1 e303 	umull	lr, r3, r1, r3
 80149fa:	089b      	lsrs	r3, r3, #2
 80149fc:	fb08 2213 	mls	r2, r8, r3, r2
 8014a00:	287e      	cmp	r0, #126	@ 0x7e
 8014a02:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014a06:	d061      	beq.n	8014acc <uxr_read_framed_msg+0x4e0>
 8014a08:	f080 0020 	eor.w	r0, r0, #32
 8014a0c:	e65e      	b.n	80146cc <uxr_read_framed_msg+0xe0>
 8014a0e:	4567      	cmp	r7, ip
 8014a10:	f43f af7c 	beq.w	801490c <uxr_read_framed_msg+0x320>
 8014a14:	4423      	add	r3, r4
 8014a16:	3202      	adds	r2, #2
 8014a18:	7898      	ldrb	r0, [r3, #2]
 8014a1a:	0853      	lsrs	r3, r2, #1
 8014a1c:	fba1 e303 	umull	lr, r3, r1, r3
 8014a20:	089b      	lsrs	r3, r3, #2
 8014a22:	fb08 2213 	mls	r2, r8, r3, r2
 8014a26:	287e      	cmp	r0, #126	@ 0x7e
 8014a28:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014a2c:	d03f      	beq.n	8014aae <uxr_read_framed_msg+0x4c2>
 8014a2e:	f080 0020 	eor.w	r0, r0, #32
 8014a32:	e6b4      	b.n	801479e <uxr_read_framed_msg+0x1b2>
 8014a34:	4560      	cmp	r0, ip
 8014a36:	f43f af7e 	beq.w	8014936 <uxr_read_framed_msg+0x34a>
 8014a3a:	4423      	add	r3, r4
 8014a3c:	3202      	adds	r2, #2
 8014a3e:	7898      	ldrb	r0, [r3, #2]
 8014a40:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8014a44:	0853      	lsrs	r3, r2, #1
 8014a46:	fba1 e303 	umull	lr, r3, r1, r3
 8014a4a:	089b      	lsrs	r3, r3, #2
 8014a4c:	fb08 2213 	mls	r2, r8, r3, r2
 8014a50:	287e      	cmp	r0, #126	@ 0x7e
 8014a52:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014a56:	f43f af6e 	beq.w	8014936 <uxr_read_framed_msg+0x34a>
 8014a5a:	f080 0020 	eor.w	r0, r0, #32
 8014a5e:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8014a62:	e715      	b.n	8014890 <uxr_read_framed_msg+0x2a4>
 8014a64:	4567      	cmp	r7, ip
 8014a66:	f43f af61 	beq.w	801492c <uxr_read_framed_msg+0x340>
 8014a6a:	4423      	add	r3, r4
 8014a6c:	3202      	adds	r2, #2
 8014a6e:	7898      	ldrb	r0, [r3, #2]
 8014a70:	0853      	lsrs	r3, r2, #1
 8014a72:	fba1 e303 	umull	lr, r3, r1, r3
 8014a76:	089b      	lsrs	r3, r3, #2
 8014a78:	fb08 2213 	mls	r2, r8, r3, r2
 8014a7c:	287e      	cmp	r0, #126	@ 0x7e
 8014a7e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014a82:	d023      	beq.n	8014acc <uxr_read_framed_msg+0x4e0>
 8014a84:	f080 0020 	eor.w	r0, r0, #32
 8014a88:	e6b6      	b.n	80147f8 <uxr_read_framed_msg+0x20c>
 8014a8a:	45bc      	cmp	ip, r7
 8014a8c:	d083      	beq.n	8014996 <uxr_read_framed_msg+0x3aa>
 8014a8e:	4423      	add	r3, r4
 8014a90:	3202      	adds	r2, #2
 8014a92:	7898      	ldrb	r0, [r3, #2]
 8014a94:	0853      	lsrs	r3, r2, #1
 8014a96:	fba1 e303 	umull	lr, r3, r1, r3
 8014a9a:	089b      	lsrs	r3, r3, #2
 8014a9c:	fb08 2213 	mls	r2, r8, r3, r2
 8014aa0:	287e      	cmp	r0, #126	@ 0x7e
 8014aa2:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014aa6:	d01f      	beq.n	8014ae8 <uxr_read_framed_msg+0x4fc>
 8014aa8:	f080 0020 	eor.w	r0, r0, #32
 8014aac:	e6c7      	b.n	801483e <uxr_read_framed_msg+0x252>
 8014aae:	2701      	movs	r7, #1
 8014ab0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014ab2:	f8cd b000 	str.w	fp, [sp]
 8014ab6:	9701      	str	r7, [sp, #4]
 8014ab8:	4632      	mov	r2, r6
 8014aba:	4651      	mov	r1, sl
 8014abc:	4620      	mov	r0, r4
 8014abe:	f7ff fd11 	bl	80144e4 <uxr_framing_read_transport>
 8014ac2:	2800      	cmp	r0, #0
 8014ac4:	f47f ada7 	bne.w	8014616 <uxr_read_framed_msg+0x2a>
 8014ac8:	7027      	strb	r7, [r4, #0]
 8014aca:	e5a4      	b.n	8014616 <uxr_read_framed_msg+0x2a>
 8014acc:	f8cd b000 	str.w	fp, [sp]
 8014ad0:	2302      	movs	r3, #2
 8014ad2:	9301      	str	r3, [sp, #4]
 8014ad4:	4632      	mov	r2, r6
 8014ad6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014ad8:	4651      	mov	r1, sl
 8014ada:	4620      	mov	r0, r4
 8014adc:	f7ff fd02 	bl	80144e4 <uxr_framing_read_transport>
 8014ae0:	2800      	cmp	r0, #0
 8014ae2:	f47f ad98 	bne.w	8014616 <uxr_read_framed_msg+0x2a>
 8014ae6:	e70e      	b.n	8014906 <uxr_read_framed_msg+0x31a>
 8014ae8:	f8cd b000 	str.w	fp, [sp]
 8014aec:	2303      	movs	r3, #3
 8014aee:	e7f0      	b.n	8014ad2 <uxr_read_framed_msg+0x4e6>

08014af0 <uxr_stream_id>:
 8014af0:	2901      	cmp	r1, #1
 8014af2:	b082      	sub	sp, #8
 8014af4:	4603      	mov	r3, r0
 8014af6:	d011      	beq.n	8014b1c <uxr_stream_id+0x2c>
 8014af8:	2902      	cmp	r1, #2
 8014afa:	f04f 0c00 	mov.w	ip, #0
 8014afe:	d00a      	beq.n	8014b16 <uxr_stream_id+0x26>
 8014b00:	2000      	movs	r0, #0
 8014b02:	f36c 0007 	bfi	r0, ip, #0, #8
 8014b06:	f363 200f 	bfi	r0, r3, #8, #8
 8014b0a:	f361 4017 	bfi	r0, r1, #16, #8
 8014b0e:	f362 601f 	bfi	r0, r2, #24, #8
 8014b12:	b002      	add	sp, #8
 8014b14:	4770      	bx	lr
 8014b16:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8014b1a:	e7f1      	b.n	8014b00 <uxr_stream_id+0x10>
 8014b1c:	f100 0c01 	add.w	ip, r0, #1
 8014b20:	fa5f fc8c 	uxtb.w	ip, ip
 8014b24:	e7ec      	b.n	8014b00 <uxr_stream_id+0x10>
 8014b26:	bf00      	nop

08014b28 <uxr_stream_id_from_raw>:
 8014b28:	b082      	sub	sp, #8
 8014b2a:	4603      	mov	r3, r0
 8014b2c:	b130      	cbz	r0, 8014b3c <uxr_stream_id_from_raw+0x14>
 8014b2e:	0602      	lsls	r2, r0, #24
 8014b30:	d411      	bmi.n	8014b56 <uxr_stream_id_from_raw+0x2e>
 8014b32:	1e42      	subs	r2, r0, #1
 8014b34:	b2d2      	uxtb	r2, r2
 8014b36:	f04f 0c01 	mov.w	ip, #1
 8014b3a:	e001      	b.n	8014b40 <uxr_stream_id_from_raw+0x18>
 8014b3c:	4684      	mov	ip, r0
 8014b3e:	4602      	mov	r2, r0
 8014b40:	2000      	movs	r0, #0
 8014b42:	f363 0007 	bfi	r0, r3, #0, #8
 8014b46:	f362 200f 	bfi	r0, r2, #8, #8
 8014b4a:	f36c 4017 	bfi	r0, ip, #16, #8
 8014b4e:	f361 601f 	bfi	r0, r1, #24, #8
 8014b52:	b002      	add	sp, #8
 8014b54:	4770      	bx	lr
 8014b56:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8014b5a:	f04f 0c02 	mov.w	ip, #2
 8014b5e:	e7ef      	b.n	8014b40 <uxr_stream_id_from_raw+0x18>

08014b60 <uxr_init_stream_storage>:
 8014b60:	2300      	movs	r3, #0
 8014b62:	7403      	strb	r3, [r0, #16]
 8014b64:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8014b68:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8014b6c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8014b70:	4770      	bx	lr
 8014b72:	bf00      	nop

08014b74 <uxr_reset_stream_storage>:
 8014b74:	b570      	push	{r4, r5, r6, lr}
 8014b76:	7c03      	ldrb	r3, [r0, #16]
 8014b78:	4604      	mov	r4, r0
 8014b7a:	b153      	cbz	r3, 8014b92 <uxr_reset_stream_storage+0x1e>
 8014b7c:	4606      	mov	r6, r0
 8014b7e:	2500      	movs	r5, #0
 8014b80:	4630      	mov	r0, r6
 8014b82:	f006 fda1 	bl	801b6c8 <uxr_reset_output_best_effort_stream>
 8014b86:	7c23      	ldrb	r3, [r4, #16]
 8014b88:	3501      	adds	r5, #1
 8014b8a:	42ab      	cmp	r3, r5
 8014b8c:	f106 0610 	add.w	r6, r6, #16
 8014b90:	d8f6      	bhi.n	8014b80 <uxr_reset_stream_storage+0xc>
 8014b92:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8014b96:	b163      	cbz	r3, 8014bb2 <uxr_reset_stream_storage+0x3e>
 8014b98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014b9c:	2500      	movs	r5, #0
 8014b9e:	4630      	mov	r0, r6
 8014ba0:	f006 fba2 	bl	801b2e8 <uxr_reset_input_best_effort_stream>
 8014ba4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8014ba8:	3501      	adds	r5, #1
 8014baa:	42ab      	cmp	r3, r5
 8014bac:	f106 0602 	add.w	r6, r6, #2
 8014bb0:	d8f5      	bhi.n	8014b9e <uxr_reset_stream_storage+0x2a>
 8014bb2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8014bb6:	b163      	cbz	r3, 8014bd2 <uxr_reset_stream_storage+0x5e>
 8014bb8:	f104 0618 	add.w	r6, r4, #24
 8014bbc:	2500      	movs	r5, #0
 8014bbe:	4630      	mov	r0, r6
 8014bc0:	f006 fe2c 	bl	801b81c <uxr_reset_output_reliable_stream>
 8014bc4:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8014bc8:	3501      	adds	r5, #1
 8014bca:	42ab      	cmp	r3, r5
 8014bcc:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8014bd0:	d8f5      	bhi.n	8014bbe <uxr_reset_stream_storage+0x4a>
 8014bd2:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8014bd6:	b163      	cbz	r3, 8014bf2 <uxr_reset_stream_storage+0x7e>
 8014bd8:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8014bdc:	2500      	movs	r5, #0
 8014bde:	4630      	mov	r0, r6
 8014be0:	f006 fbf2 	bl	801b3c8 <uxr_reset_input_reliable_stream>
 8014be4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8014be8:	3501      	adds	r5, #1
 8014bea:	42ab      	cmp	r3, r5
 8014bec:	f106 0618 	add.w	r6, r6, #24
 8014bf0:	d8f5      	bhi.n	8014bde <uxr_reset_stream_storage+0x6a>
 8014bf2:	bd70      	pop	{r4, r5, r6, pc}

08014bf4 <uxr_add_output_best_effort_buffer>:
 8014bf4:	b510      	push	{r4, lr}
 8014bf6:	7c04      	ldrb	r4, [r0, #16]
 8014bf8:	f104 0c01 	add.w	ip, r4, #1
 8014bfc:	b082      	sub	sp, #8
 8014bfe:	f880 c010 	strb.w	ip, [r0, #16]
 8014c02:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8014c06:	f006 fd55 	bl	801b6b4 <uxr_init_output_best_effort_stream>
 8014c0a:	2201      	movs	r2, #1
 8014c0c:	4611      	mov	r1, r2
 8014c0e:	4620      	mov	r0, r4
 8014c10:	b002      	add	sp, #8
 8014c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c16:	f7ff bf6b 	b.w	8014af0 <uxr_stream_id>
 8014c1a:	bf00      	nop

08014c1c <uxr_add_output_reliable_buffer>:
 8014c1c:	b510      	push	{r4, lr}
 8014c1e:	b084      	sub	sp, #16
 8014c20:	4684      	mov	ip, r0
 8014c22:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8014c26:	9000      	str	r0, [sp, #0]
 8014c28:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8014c2c:	2028      	movs	r0, #40	@ 0x28
 8014c2e:	fb00 c004 	mla	r0, r0, r4, ip
 8014c32:	f104 0e01 	add.w	lr, r4, #1
 8014c36:	3018      	adds	r0, #24
 8014c38:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8014c3c:	f006 fdb6 	bl	801b7ac <uxr_init_output_reliable_stream>
 8014c40:	2201      	movs	r2, #1
 8014c42:	2102      	movs	r1, #2
 8014c44:	4620      	mov	r0, r4
 8014c46:	b004      	add	sp, #16
 8014c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c4c:	f7ff bf50 	b.w	8014af0 <uxr_stream_id>

08014c50 <uxr_add_input_best_effort_buffer>:
 8014c50:	b510      	push	{r4, lr}
 8014c52:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8014c56:	1c62      	adds	r2, r4, #1
 8014c58:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8014c5c:	b082      	sub	sp, #8
 8014c5e:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8014c62:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8014c66:	f006 fb3b 	bl	801b2e0 <uxr_init_input_best_effort_stream>
 8014c6a:	2200      	movs	r2, #0
 8014c6c:	2101      	movs	r1, #1
 8014c6e:	4620      	mov	r0, r4
 8014c70:	b002      	add	sp, #8
 8014c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c76:	f7ff bf3b 	b.w	8014af0 <uxr_stream_id>
 8014c7a:	bf00      	nop

08014c7c <uxr_add_input_reliable_buffer>:
 8014c7c:	b510      	push	{r4, lr}
 8014c7e:	b084      	sub	sp, #16
 8014c80:	4684      	mov	ip, r0
 8014c82:	9806      	ldr	r0, [sp, #24]
 8014c84:	9000      	str	r0, [sp, #0]
 8014c86:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8014c8a:	2018      	movs	r0, #24
 8014c8c:	fb00 c004 	mla	r0, r0, r4, ip
 8014c90:	f104 0e01 	add.w	lr, r4, #1
 8014c94:	3048      	adds	r0, #72	@ 0x48
 8014c96:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8014c9a:	f006 fb69 	bl	801b370 <uxr_init_input_reliable_stream>
 8014c9e:	2200      	movs	r2, #0
 8014ca0:	2102      	movs	r1, #2
 8014ca2:	4620      	mov	r0, r4
 8014ca4:	b004      	add	sp, #16
 8014ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014caa:	f7ff bf21 	b.w	8014af0 <uxr_stream_id>
 8014cae:	bf00      	nop

08014cb0 <uxr_get_output_best_effort_stream>:
 8014cb0:	7c03      	ldrb	r3, [r0, #16]
 8014cb2:	428b      	cmp	r3, r1
 8014cb4:	bf8c      	ite	hi
 8014cb6:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8014cba:	2000      	movls	r0, #0
 8014cbc:	4770      	bx	lr
 8014cbe:	bf00      	nop

08014cc0 <uxr_get_output_reliable_stream>:
 8014cc0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8014cc4:	428b      	cmp	r3, r1
 8014cc6:	bf83      	ittte	hi
 8014cc8:	2328      	movhi	r3, #40	@ 0x28
 8014cca:	fb03 0001 	mlahi	r0, r3, r1, r0
 8014cce:	3018      	addhi	r0, #24
 8014cd0:	2000      	movls	r0, #0
 8014cd2:	4770      	bx	lr

08014cd4 <uxr_get_input_best_effort_stream>:
 8014cd4:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8014cd8:	428b      	cmp	r3, r1
 8014cda:	bf86      	itte	hi
 8014cdc:	3121      	addhi	r1, #33	@ 0x21
 8014cde:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8014ce2:	2000      	movls	r0, #0
 8014ce4:	4770      	bx	lr
 8014ce6:	bf00      	nop

08014ce8 <uxr_get_input_reliable_stream>:
 8014ce8:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8014cec:	428b      	cmp	r3, r1
 8014cee:	bf83      	ittte	hi
 8014cf0:	2318      	movhi	r3, #24
 8014cf2:	fb03 0001 	mlahi	r0, r3, r1, r0
 8014cf6:	3048      	addhi	r0, #72	@ 0x48
 8014cf8:	2000      	movls	r0, #0
 8014cfa:	4770      	bx	lr

08014cfc <uxr_output_streams_confirmed>:
 8014cfc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8014d00:	b183      	cbz	r3, 8014d24 <uxr_output_streams_confirmed+0x28>
 8014d02:	b570      	push	{r4, r5, r6, lr}
 8014d04:	4606      	mov	r6, r0
 8014d06:	f100 0518 	add.w	r5, r0, #24
 8014d0a:	2400      	movs	r4, #0
 8014d0c:	e001      	b.n	8014d12 <uxr_output_streams_confirmed+0x16>
 8014d0e:	3528      	adds	r5, #40	@ 0x28
 8014d10:	b138      	cbz	r0, 8014d22 <uxr_output_streams_confirmed+0x26>
 8014d12:	4628      	mov	r0, r5
 8014d14:	f006 ffea 	bl	801bcec <uxr_is_output_up_to_date>
 8014d18:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8014d1c:	3401      	adds	r4, #1
 8014d1e:	42a3      	cmp	r3, r4
 8014d20:	d8f5      	bhi.n	8014d0e <uxr_output_streams_confirmed+0x12>
 8014d22:	bd70      	pop	{r4, r5, r6, pc}
 8014d24:	2001      	movs	r0, #1
 8014d26:	4770      	bx	lr

08014d28 <uxr_buffer_submessage_header>:
 8014d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d2a:	4604      	mov	r4, r0
 8014d2c:	460e      	mov	r6, r1
 8014d2e:	2104      	movs	r1, #4
 8014d30:	4615      	mov	r5, r2
 8014d32:	461f      	mov	r7, r3
 8014d34:	f7f9 f8b2 	bl	800de9c <ucdr_align_to>
 8014d38:	2301      	movs	r3, #1
 8014d3a:	7523      	strb	r3, [r4, #20]
 8014d3c:	f047 0201 	orr.w	r2, r7, #1
 8014d40:	462b      	mov	r3, r5
 8014d42:	4631      	mov	r1, r6
 8014d44:	4620      	mov	r0, r4
 8014d46:	f000 fa2b 	bl	80151a0 <uxr_serialize_submessage_header>
 8014d4a:	4620      	mov	r0, r4
 8014d4c:	f7f9 f8bc 	bl	800dec8 <ucdr_buffer_remaining>
 8014d50:	42a8      	cmp	r0, r5
 8014d52:	bf34      	ite	cc
 8014d54:	2000      	movcc	r0, #0
 8014d56:	2001      	movcs	r0, #1
 8014d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d5a:	bf00      	nop

08014d5c <uxr_read_submessage_header>:
 8014d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d60:	4604      	mov	r4, r0
 8014d62:	460d      	mov	r5, r1
 8014d64:	2104      	movs	r1, #4
 8014d66:	4616      	mov	r6, r2
 8014d68:	4698      	mov	r8, r3
 8014d6a:	f7f9 f897 	bl	800de9c <ucdr_align_to>
 8014d6e:	4620      	mov	r0, r4
 8014d70:	f7f9 f8aa 	bl	800dec8 <ucdr_buffer_remaining>
 8014d74:	2803      	cmp	r0, #3
 8014d76:	bf8c      	ite	hi
 8014d78:	2701      	movhi	r7, #1
 8014d7a:	2700      	movls	r7, #0
 8014d7c:	d802      	bhi.n	8014d84 <uxr_read_submessage_header+0x28>
 8014d7e:	4638      	mov	r0, r7
 8014d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d84:	4633      	mov	r3, r6
 8014d86:	4642      	mov	r2, r8
 8014d88:	4620      	mov	r0, r4
 8014d8a:	4629      	mov	r1, r5
 8014d8c:	f000 fa1a 	bl	80151c4 <uxr_deserialize_submessage_header>
 8014d90:	f898 3000 	ldrb.w	r3, [r8]
 8014d94:	f003 0201 	and.w	r2, r3, #1
 8014d98:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8014d9c:	f888 3000 	strb.w	r3, [r8]
 8014da0:	7522      	strb	r2, [r4, #20]
 8014da2:	4638      	mov	r0, r7
 8014da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014da8 <uxr_submessage_padding>:
 8014da8:	f010 0003 	ands.w	r0, r0, #3
 8014dac:	bf18      	it	ne
 8014dae:	f1c0 0004 	rsbne	r0, r0, #4
 8014db2:	4770      	bx	lr

08014db4 <uxr_millis>:
 8014db4:	b510      	push	{r4, lr}
 8014db6:	b084      	sub	sp, #16
 8014db8:	4669      	mov	r1, sp
 8014dba:	2001      	movs	r0, #1
 8014dbc:	f7ee fa94 	bl	80032e8 <clock_gettime>
 8014dc0:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8014dc4:	4b06      	ldr	r3, [pc, #24]	@ (8014de0 <uxr_millis+0x2c>)
 8014dc6:	fba0 0103 	umull	r0, r1, r0, r3
 8014dca:	1900      	adds	r0, r0, r4
 8014dcc:	fb03 1102 	mla	r1, r3, r2, r1
 8014dd0:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8014dd4:	4a03      	ldr	r2, [pc, #12]	@ (8014de4 <uxr_millis+0x30>)
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	f7eb ff46 	bl	8000c68 <__aeabi_ldivmod>
 8014ddc:	b004      	add	sp, #16
 8014dde:	bd10      	pop	{r4, pc}
 8014de0:	3b9aca00 	.word	0x3b9aca00
 8014de4:	000f4240 	.word	0x000f4240

08014de8 <uxr_nanos>:
 8014de8:	b510      	push	{r4, lr}
 8014dea:	b084      	sub	sp, #16
 8014dec:	4669      	mov	r1, sp
 8014dee:	2001      	movs	r0, #1
 8014df0:	f7ee fa7a 	bl	80032e8 <clock_gettime>
 8014df4:	4a06      	ldr	r2, [pc, #24]	@ (8014e10 <uxr_nanos+0x28>)
 8014df6:	9800      	ldr	r0, [sp, #0]
 8014df8:	9902      	ldr	r1, [sp, #8]
 8014dfa:	9c01      	ldr	r4, [sp, #4]
 8014dfc:	fba0 0302 	umull	r0, r3, r0, r2
 8014e00:	1840      	adds	r0, r0, r1
 8014e02:	fb02 3304 	mla	r3, r2, r4, r3
 8014e06:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8014e0a:	b004      	add	sp, #16
 8014e0c:	bd10      	pop	{r4, pc}
 8014e0e:	bf00      	nop
 8014e10:	3b9aca00 	.word	0x3b9aca00

08014e14 <on_full_output_buffer_fragmented>:
 8014e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e18:	460c      	mov	r4, r1
 8014e1a:	b08a      	sub	sp, #40	@ 0x28
 8014e1c:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8014e20:	4606      	mov	r6, r0
 8014e22:	f104 0008 	add.w	r0, r4, #8
 8014e26:	f7ff ff4b 	bl	8014cc0 <uxr_get_output_reliable_stream>
 8014e2a:	4605      	mov	r5, r0
 8014e2c:	f006 ff68 	bl	801bd00 <get_available_free_slots>
 8014e30:	b968      	cbnz	r0, 8014e4e <on_full_output_buffer_fragmented+0x3a>
 8014e32:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8014e36:	4620      	mov	r0, r4
 8014e38:	4798      	blx	r3
 8014e3a:	b918      	cbnz	r0, 8014e44 <on_full_output_buffer_fragmented+0x30>
 8014e3c:	2001      	movs	r0, #1
 8014e3e:	b00a      	add	sp, #40	@ 0x28
 8014e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e44:	4628      	mov	r0, r5
 8014e46:	f006 ff5b 	bl	801bd00 <get_available_free_slots>
 8014e4a:	2800      	cmp	r0, #0
 8014e4c:	d0f6      	beq.n	8014e3c <on_full_output_buffer_fragmented+0x28>
 8014e4e:	892a      	ldrh	r2, [r5, #8]
 8014e50:	686b      	ldr	r3, [r5, #4]
 8014e52:	fbb3 f8f2 	udiv	r8, r3, r2
 8014e56:	89eb      	ldrh	r3, [r5, #14]
 8014e58:	7b29      	ldrb	r1, [r5, #12]
 8014e5a:	fbb3 f0f2 	udiv	r0, r3, r2
 8014e5e:	fb02 3310 	mls	r3, r2, r0, r3
 8014e62:	f5c1 417f 	rsb	r1, r1, #65280	@ 0xff00
 8014e66:	b29b      	uxth	r3, r3
 8014e68:	fb08 f303 	mul.w	r3, r8, r3
 8014e6c:	31fc      	adds	r1, #252	@ 0xfc
 8014e6e:	f1a8 0804 	sub.w	r8, r8, #4
 8014e72:	4441      	add	r1, r8
 8014e74:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8014e78:	b28f      	uxth	r7, r1
 8014e7a:	6829      	ldr	r1, [r5, #0]
 8014e7c:	3304      	adds	r3, #4
 8014e7e:	1bd2      	subs	r2, r2, r7
 8014e80:	4419      	add	r1, r3
 8014e82:	f8c4 20c4 	str.w	r2, [r4, #196]	@ 0xc4
 8014e86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014e8a:	9300      	str	r3, [sp, #0]
 8014e8c:	4642      	mov	r2, r8
 8014e8e:	2300      	movs	r3, #0
 8014e90:	a802      	add	r0, sp, #8
 8014e92:	f7f8 ffd7 	bl	800de44 <ucdr_init_buffer_origin_offset>
 8014e96:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8014e9a:	f102 0308 	add.w	r3, r2, #8
 8014e9e:	4543      	cmp	r3, r8
 8014ea0:	d928      	bls.n	8014ef4 <on_full_output_buffer_fragmented+0xe0>
 8014ea2:	463a      	mov	r2, r7
 8014ea4:	2300      	movs	r3, #0
 8014ea6:	210d      	movs	r1, #13
 8014ea8:	a802      	add	r0, sp, #8
 8014eaa:	f7ff ff3d 	bl	8014d28 <uxr_buffer_submessage_header>
 8014eae:	8929      	ldrh	r1, [r5, #8]
 8014eb0:	89eb      	ldrh	r3, [r5, #14]
 8014eb2:	fbb3 f2f1 	udiv	r2, r3, r1
 8014eb6:	fb01 3312 	mls	r3, r1, r2, r3
 8014eba:	b29b      	uxth	r3, r3
 8014ebc:	686a      	ldr	r2, [r5, #4]
 8014ebe:	fbb2 f2f1 	udiv	r2, r2, r1
 8014ec2:	fb02 f303 	mul.w	r3, r2, r3
 8014ec6:	682a      	ldr	r2, [r5, #0]
 8014ec8:	f842 8003 	str.w	r8, [r2, r3]
 8014ecc:	89e8      	ldrh	r0, [r5, #14]
 8014ece:	2101      	movs	r1, #1
 8014ed0:	f006 ff34 	bl	801bd3c <uxr_seq_num_add>
 8014ed4:	9904      	ldr	r1, [sp, #16]
 8014ed6:	9a03      	ldr	r2, [sp, #12]
 8014ed8:	81e8      	strh	r0, [r5, #14]
 8014eda:	1a52      	subs	r2, r2, r1
 8014edc:	4630      	mov	r0, r6
 8014ede:	f7f8 ffc3 	bl	800de68 <ucdr_init_buffer>
 8014ee2:	4630      	mov	r0, r6
 8014ee4:	4910      	ldr	r1, [pc, #64]	@ (8014f28 <on_full_output_buffer_fragmented+0x114>)
 8014ee6:	4622      	mov	r2, r4
 8014ee8:	f7f8 ff92 	bl	800de10 <ucdr_set_on_full_buffer_callback>
 8014eec:	2000      	movs	r0, #0
 8014eee:	b00a      	add	sp, #40	@ 0x28
 8014ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ef4:	b292      	uxth	r2, r2
 8014ef6:	2302      	movs	r3, #2
 8014ef8:	210d      	movs	r1, #13
 8014efa:	a802      	add	r0, sp, #8
 8014efc:	f7ff ff14 	bl	8014d28 <uxr_buffer_submessage_header>
 8014f00:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8014f04:	8928      	ldrh	r0, [r5, #8]
 8014f06:	f103 0208 	add.w	r2, r3, #8
 8014f0a:	89eb      	ldrh	r3, [r5, #14]
 8014f0c:	fbb3 f1f0 	udiv	r1, r3, r0
 8014f10:	fb00 3311 	mls	r3, r0, r1, r3
 8014f14:	b29b      	uxth	r3, r3
 8014f16:	6869      	ldr	r1, [r5, #4]
 8014f18:	fbb1 f1f0 	udiv	r1, r1, r0
 8014f1c:	fb01 f303 	mul.w	r3, r1, r3
 8014f20:	6829      	ldr	r1, [r5, #0]
 8014f22:	50ca      	str	r2, [r1, r3]
 8014f24:	e7d2      	b.n	8014ecc <on_full_output_buffer_fragmented+0xb8>
 8014f26:	bf00      	nop
 8014f28:	08014e15 	.word	0x08014e15

08014f2c <uxr_prepare_output_stream>:
 8014f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f2e:	b087      	sub	sp, #28
 8014f30:	2707      	movs	r7, #7
 8014f32:	9202      	str	r2, [sp, #8]
 8014f34:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014f36:	2500      	movs	r5, #0
 8014f38:	3204      	adds	r2, #4
 8014f3a:	e9cd 7500 	strd	r7, r5, [sp]
 8014f3e:	461c      	mov	r4, r3
 8014f40:	4606      	mov	r6, r0
 8014f42:	f7ff f807 	bl	8013f54 <uxr_prepare_stream_to_write_submessage>
 8014f46:	f080 0201 	eor.w	r2, r0, #1
 8014f4a:	b2d2      	uxtb	r2, r2
 8014f4c:	75a2      	strb	r2, [r4, #22]
 8014f4e:	b112      	cbz	r2, 8014f56 <uxr_prepare_output_stream+0x2a>
 8014f50:	4628      	mov	r0, r5
 8014f52:	b007      	add	sp, #28
 8014f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f56:	aa05      	add	r2, sp, #20
 8014f58:	9902      	ldr	r1, [sp, #8]
 8014f5a:	4630      	mov	r0, r6
 8014f5c:	f7ff f934 	bl	80141c8 <uxr_init_base_object_request>
 8014f60:	a905      	add	r1, sp, #20
 8014f62:	4605      	mov	r5, r0
 8014f64:	4620      	mov	r0, r4
 8014f66:	f000 ffa7 	bl	8015eb8 <uxr_serialize_WRITE_DATA_Payload_Data>
 8014f6a:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8014f6e:	69a6      	ldr	r6, [r4, #24]
 8014f70:	69e7      	ldr	r7, [r4, #28]
 8014f72:	1a52      	subs	r2, r2, r1
 8014f74:	4620      	mov	r0, r4
 8014f76:	f7f8 ff77 	bl	800de68 <ucdr_init_buffer>
 8014f7a:	4620      	mov	r0, r4
 8014f7c:	463a      	mov	r2, r7
 8014f7e:	4631      	mov	r1, r6
 8014f80:	f7f8 ff46 	bl	800de10 <ucdr_set_on_full_buffer_callback>
 8014f84:	4628      	mov	r0, r5
 8014f86:	b007      	add	sp, #28
 8014f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f8a:	bf00      	nop

08014f8c <uxr_prepare_output_stream_fragmented>:
 8014f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f90:	b093      	sub	sp, #76	@ 0x4c
 8014f92:	4605      	mov	r5, r0
 8014f94:	9107      	str	r1, [sp, #28]
 8014f96:	3008      	adds	r0, #8
 8014f98:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8014f9c:	9303      	str	r3, [sp, #12]
 8014f9e:	9206      	str	r2, [sp, #24]
 8014fa0:	f7ff fe8e 	bl	8014cc0 <uxr_get_output_reliable_stream>
 8014fa4:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014fa8:	2b01      	cmp	r3, #1
 8014faa:	f000 8095 	beq.w	80150d8 <uxr_prepare_output_stream_fragmented+0x14c>
 8014fae:	4604      	mov	r4, r0
 8014fb0:	2800      	cmp	r0, #0
 8014fb2:	f000 8091 	beq.w	80150d8 <uxr_prepare_output_stream_fragmented+0x14c>
 8014fb6:	f006 fea3 	bl	801bd00 <get_available_free_slots>
 8014fba:	2800      	cmp	r0, #0
 8014fbc:	f000 8087 	beq.w	80150ce <uxr_prepare_output_stream_fragmented+0x142>
 8014fc0:	8922      	ldrh	r2, [r4, #8]
 8014fc2:	89e7      	ldrh	r7, [r4, #14]
 8014fc4:	fbb7 f3f2 	udiv	r3, r7, r2
 8014fc8:	fb02 7313 	mls	r3, r2, r3, r7
 8014fcc:	b29b      	uxth	r3, r3
 8014fce:	6861      	ldr	r1, [r4, #4]
 8014fd0:	fbb1 f1f2 	udiv	r1, r1, r2
 8014fd4:	6822      	ldr	r2, [r4, #0]
 8014fd6:	9105      	str	r1, [sp, #20]
 8014fd8:	fb01 f303 	mul.w	r3, r1, r3
 8014fdc:	3304      	adds	r3, #4
 8014fde:	eb02 0903 	add.w	r9, r2, r3
 8014fe2:	7b23      	ldrb	r3, [r4, #12]
 8014fe4:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8014fe8:	4543      	cmp	r3, r8
 8014fea:	f1a1 0b04 	sub.w	fp, r1, #4
 8014fee:	d37f      	bcc.n	80150f0 <uxr_prepare_output_stream_fragmented+0x164>
 8014ff0:	f1ab 0a04 	sub.w	sl, fp, #4
 8014ff4:	ebaa 0a03 	sub.w	sl, sl, r3
 8014ff8:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8014ffa:	f8cd 8000 	str.w	r8, [sp]
 8014ffe:	fa1f f38a 	uxth.w	r3, sl
 8015002:	9304      	str	r3, [sp, #16]
 8015004:	465a      	mov	r2, fp
 8015006:	2300      	movs	r3, #0
 8015008:	4649      	mov	r1, r9
 801500a:	a80a      	add	r0, sp, #40	@ 0x28
 801500c:	f7f8 ff1a 	bl	800de44 <ucdr_init_buffer_origin_offset>
 8015010:	f106 0a08 	add.w	sl, r6, #8
 8015014:	45da      	cmp	sl, fp
 8015016:	bf2c      	ite	cs
 8015018:	2300      	movcs	r3, #0
 801501a:	2301      	movcc	r3, #1
 801501c:	9a04      	ldr	r2, [sp, #16]
 801501e:	005b      	lsls	r3, r3, #1
 8015020:	210d      	movs	r1, #13
 8015022:	a80a      	add	r0, sp, #40	@ 0x28
 8015024:	f7ff fe80 	bl	8014d28 <uxr_buffer_submessage_header>
 8015028:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801502c:	fbb7 f2fc 	udiv	r2, r7, ip
 8015030:	fb0c 7212 	mls	r2, ip, r2, r7
 8015034:	b292      	uxth	r2, r2
 8015036:	6863      	ldr	r3, [r4, #4]
 8015038:	fbb3 f3fc 	udiv	r3, r3, ip
 801503c:	fb02 f303 	mul.w	r3, r2, r3
 8015040:	6822      	ldr	r2, [r4, #0]
 8015042:	2101      	movs	r1, #1
 8015044:	f842 b003 	str.w	fp, [r2, r3]
 8015048:	4638      	mov	r0, r7
 801504a:	f006 fe77 	bl	801bd3c <uxr_seq_num_add>
 801504e:	9b05      	ldr	r3, [sp, #20]
 8015050:	9e03      	ldr	r6, [sp, #12]
 8015052:	f1a3 0208 	sub.w	r2, r3, #8
 8015056:	f108 0104 	add.w	r1, r8, #4
 801505a:	4607      	mov	r7, r0
 801505c:	eba2 0208 	sub.w	r2, r2, r8
 8015060:	4449      	add	r1, r9
 8015062:	4630      	mov	r0, r6
 8015064:	f7f8 ff00 	bl	800de68 <ucdr_init_buffer>
 8015068:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801506a:	81e7      	strh	r7, [r4, #14]
 801506c:	1d1a      	adds	r2, r3, #4
 801506e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8015072:	bf28      	it	cs
 8015074:	2200      	movcs	r2, #0
 8015076:	2300      	movs	r3, #0
 8015078:	b292      	uxth	r2, r2
 801507a:	2107      	movs	r1, #7
 801507c:	4630      	mov	r0, r6
 801507e:	f7ff fe53 	bl	8014d28 <uxr_buffer_submessage_header>
 8015082:	9906      	ldr	r1, [sp, #24]
 8015084:	aa09      	add	r2, sp, #36	@ 0x24
 8015086:	4628      	mov	r0, r5
 8015088:	f7ff f89e 	bl	80141c8 <uxr_init_base_object_request>
 801508c:	4604      	mov	r4, r0
 801508e:	b320      	cbz	r0, 80150da <uxr_prepare_output_stream_fragmented+0x14e>
 8015090:	9e03      	ldr	r6, [sp, #12]
 8015092:	a909      	add	r1, sp, #36	@ 0x24
 8015094:	4630      	mov	r0, r6
 8015096:	f000 ff0f 	bl	8015eb8 <uxr_serialize_WRITE_DATA_Payload_Data>
 801509a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801509e:	4630      	mov	r0, r6
 80150a0:	1a52      	subs	r2, r2, r1
 80150a2:	f7f8 fee1 	bl	800de68 <ucdr_init_buffer>
 80150a6:	9b07      	ldr	r3, [sp, #28]
 80150a8:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 80150ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80150ae:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 80150b2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80150b4:	491a      	ldr	r1, [pc, #104]	@ (8015120 <uxr_prepare_output_stream_fragmented+0x194>)
 80150b6:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 80150ba:	4630      	mov	r0, r6
 80150bc:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80150c0:	462a      	mov	r2, r5
 80150c2:	f7f8 fea5 	bl	800de10 <ucdr_set_on_full_buffer_callback>
 80150c6:	4620      	mov	r0, r4
 80150c8:	b013      	add	sp, #76	@ 0x4c
 80150ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150ce:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80150d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80150d2:	4628      	mov	r0, r5
 80150d4:	4798      	blx	r3
 80150d6:	b920      	cbnz	r0, 80150e2 <uxr_prepare_output_stream_fragmented+0x156>
 80150d8:	2400      	movs	r4, #0
 80150da:	4620      	mov	r0, r4
 80150dc:	b013      	add	sp, #76	@ 0x4c
 80150de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150e2:	4620      	mov	r0, r4
 80150e4:	f006 fe0c 	bl	801bd00 <get_available_free_slots>
 80150e8:	2800      	cmp	r0, #0
 80150ea:	f47f af69 	bne.w	8014fc0 <uxr_prepare_output_stream_fragmented+0x34>
 80150ee:	e7f3      	b.n	80150d8 <uxr_prepare_output_stream_fragmented+0x14c>
 80150f0:	4638      	mov	r0, r7
 80150f2:	2101      	movs	r1, #1
 80150f4:	f006 fe22 	bl	801bd3c <uxr_seq_num_add>
 80150f8:	8921      	ldrh	r1, [r4, #8]
 80150fa:	fbb0 f2f1 	udiv	r2, r0, r1
 80150fe:	fb01 0212 	mls	r2, r1, r2, r0
 8015102:	b292      	uxth	r2, r2
 8015104:	6863      	ldr	r3, [r4, #4]
 8015106:	fbb3 f3f1 	udiv	r3, r3, r1
 801510a:	fb02 f303 	mul.w	r3, r2, r3
 801510e:	6822      	ldr	r2, [r4, #0]
 8015110:	3304      	adds	r3, #4
 8015112:	eb02 0903 	add.w	r9, r2, r3
 8015116:	4607      	mov	r7, r0
 8015118:	7b23      	ldrb	r3, [r4, #12]
 801511a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801511e:	e767      	b.n	8014ff0 <uxr_prepare_output_stream_fragmented+0x64>
 8015120:	08014e15 	.word	0x08014e15

08015124 <uxr_serialize_message_header>:
 8015124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015128:	4617      	mov	r7, r2
 801512a:	4604      	mov	r4, r0
 801512c:	461e      	mov	r6, r3
 801512e:	460d      	mov	r5, r1
 8015130:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8015134:	f7f7 fa52 	bl	800c5dc <ucdr_serialize_uint8_t>
 8015138:	4639      	mov	r1, r7
 801513a:	4620      	mov	r0, r4
 801513c:	f7f7 fa4e 	bl	800c5dc <ucdr_serialize_uint8_t>
 8015140:	4632      	mov	r2, r6
 8015142:	2101      	movs	r1, #1
 8015144:	4620      	mov	r0, r4
 8015146:	f7f7 faff 	bl	800c748 <ucdr_serialize_endian_uint16_t>
 801514a:	062b      	lsls	r3, r5, #24
 801514c:	d501      	bpl.n	8015152 <uxr_serialize_message_header+0x2e>
 801514e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015152:	4641      	mov	r1, r8
 8015154:	4620      	mov	r0, r4
 8015156:	2204      	movs	r2, #4
 8015158:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801515c:	f7fd ba3a 	b.w	80125d4 <ucdr_serialize_array_uint8_t>

08015160 <uxr_deserialize_message_header>:
 8015160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015164:	4617      	mov	r7, r2
 8015166:	4604      	mov	r4, r0
 8015168:	461e      	mov	r6, r3
 801516a:	460d      	mov	r5, r1
 801516c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8015170:	f7f7 fa4a 	bl	800c608 <ucdr_deserialize_uint8_t>
 8015174:	4639      	mov	r1, r7
 8015176:	4620      	mov	r0, r4
 8015178:	f7f7 fa46 	bl	800c608 <ucdr_deserialize_uint8_t>
 801517c:	4632      	mov	r2, r6
 801517e:	2101      	movs	r1, #1
 8015180:	4620      	mov	r0, r4
 8015182:	f7f7 fbd7 	bl	800c934 <ucdr_deserialize_endian_uint16_t>
 8015186:	f995 3000 	ldrsb.w	r3, [r5]
 801518a:	2b00      	cmp	r3, #0
 801518c:	da01      	bge.n	8015192 <uxr_deserialize_message_header+0x32>
 801518e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015192:	4641      	mov	r1, r8
 8015194:	4620      	mov	r0, r4
 8015196:	2204      	movs	r2, #4
 8015198:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801519c:	f7fd ba7e 	b.w	801269c <ucdr_deserialize_array_uint8_t>

080151a0 <uxr_serialize_submessage_header>:
 80151a0:	b570      	push	{r4, r5, r6, lr}
 80151a2:	4616      	mov	r6, r2
 80151a4:	4604      	mov	r4, r0
 80151a6:	461d      	mov	r5, r3
 80151a8:	f7f7 fa18 	bl	800c5dc <ucdr_serialize_uint8_t>
 80151ac:	4631      	mov	r1, r6
 80151ae:	4620      	mov	r0, r4
 80151b0:	f7f7 fa14 	bl	800c5dc <ucdr_serialize_uint8_t>
 80151b4:	462a      	mov	r2, r5
 80151b6:	4620      	mov	r0, r4
 80151b8:	2101      	movs	r1, #1
 80151ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80151be:	f7f7 bac3 	b.w	800c748 <ucdr_serialize_endian_uint16_t>
 80151c2:	bf00      	nop

080151c4 <uxr_deserialize_submessage_header>:
 80151c4:	b570      	push	{r4, r5, r6, lr}
 80151c6:	4616      	mov	r6, r2
 80151c8:	4604      	mov	r4, r0
 80151ca:	461d      	mov	r5, r3
 80151cc:	f7f7 fa1c 	bl	800c608 <ucdr_deserialize_uint8_t>
 80151d0:	4631      	mov	r1, r6
 80151d2:	4620      	mov	r0, r4
 80151d4:	f7f7 fa18 	bl	800c608 <ucdr_deserialize_uint8_t>
 80151d8:	462a      	mov	r2, r5
 80151da:	4620      	mov	r0, r4
 80151dc:	2101      	movs	r1, #1
 80151de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80151e2:	f7f7 bba7 	b.w	800c934 <ucdr_deserialize_endian_uint16_t>
 80151e6:	bf00      	nop

080151e8 <uxr_serialize_CLIENT_Representation>:
 80151e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80151ec:	2204      	movs	r2, #4
 80151ee:	460e      	mov	r6, r1
 80151f0:	4605      	mov	r5, r0
 80151f2:	f7fd f9ef 	bl	80125d4 <ucdr_serialize_array_uint8_t>
 80151f6:	2202      	movs	r2, #2
 80151f8:	1d31      	adds	r1, r6, #4
 80151fa:	4604      	mov	r4, r0
 80151fc:	4628      	mov	r0, r5
 80151fe:	f7fd f9e9 	bl	80125d4 <ucdr_serialize_array_uint8_t>
 8015202:	2202      	movs	r2, #2
 8015204:	4004      	ands	r4, r0
 8015206:	1db1      	adds	r1, r6, #6
 8015208:	4628      	mov	r0, r5
 801520a:	f7fd f9e3 	bl	80125d4 <ucdr_serialize_array_uint8_t>
 801520e:	b2e4      	uxtb	r4, r4
 8015210:	2204      	movs	r2, #4
 8015212:	4004      	ands	r4, r0
 8015214:	f106 0108 	add.w	r1, r6, #8
 8015218:	4628      	mov	r0, r5
 801521a:	f7fd f9db 	bl	80125d4 <ucdr_serialize_array_uint8_t>
 801521e:	7b31      	ldrb	r1, [r6, #12]
 8015220:	ea00 0804 	and.w	r8, r0, r4
 8015224:	4628      	mov	r0, r5
 8015226:	f7f7 f9d9 	bl	800c5dc <ucdr_serialize_uint8_t>
 801522a:	7b71      	ldrb	r1, [r6, #13]
 801522c:	ea08 0800 	and.w	r8, r8, r0
 8015230:	4628      	mov	r0, r5
 8015232:	f7f7 f9a5 	bl	800c580 <ucdr_serialize_bool>
 8015236:	7b73      	ldrb	r3, [r6, #13]
 8015238:	ea08 0800 	and.w	r8, r8, r0
 801523c:	b93b      	cbnz	r3, 801524e <uxr_serialize_CLIENT_Representation+0x66>
 801523e:	8bb1      	ldrh	r1, [r6, #28]
 8015240:	4628      	mov	r0, r5
 8015242:	f7f7 f9f7 	bl	800c634 <ucdr_serialize_uint16_t>
 8015246:	ea08 0000 	and.w	r0, r8, r0
 801524a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801524e:	6931      	ldr	r1, [r6, #16]
 8015250:	4628      	mov	r0, r5
 8015252:	f7f7 fbdf 	bl	800ca14 <ucdr_serialize_uint32_t>
 8015256:	6933      	ldr	r3, [r6, #16]
 8015258:	b1e3      	cbz	r3, 8015294 <uxr_serialize_CLIENT_Representation+0xac>
 801525a:	b1c0      	cbz	r0, 801528e <uxr_serialize_CLIENT_Representation+0xa6>
 801525c:	4637      	mov	r7, r6
 801525e:	f04f 0900 	mov.w	r9, #0
 8015262:	e001      	b.n	8015268 <uxr_serialize_CLIENT_Representation+0x80>
 8015264:	3708      	adds	r7, #8
 8015266:	b194      	cbz	r4, 801528e <uxr_serialize_CLIENT_Representation+0xa6>
 8015268:	6979      	ldr	r1, [r7, #20]
 801526a:	4628      	mov	r0, r5
 801526c:	f006 f822 	bl	801b2b4 <ucdr_serialize_string>
 8015270:	69b9      	ldr	r1, [r7, #24]
 8015272:	4604      	mov	r4, r0
 8015274:	4628      	mov	r0, r5
 8015276:	f006 f81d 	bl	801b2b4 <ucdr_serialize_string>
 801527a:	6933      	ldr	r3, [r6, #16]
 801527c:	f109 0901 	add.w	r9, r9, #1
 8015280:	4004      	ands	r4, r0
 8015282:	4599      	cmp	r9, r3
 8015284:	b2e4      	uxtb	r4, r4
 8015286:	d3ed      	bcc.n	8015264 <uxr_serialize_CLIENT_Representation+0x7c>
 8015288:	ea08 0804 	and.w	r8, r8, r4
 801528c:	e7d7      	b.n	801523e <uxr_serialize_CLIENT_Representation+0x56>
 801528e:	f04f 0800 	mov.w	r8, #0
 8015292:	e7d4      	b.n	801523e <uxr_serialize_CLIENT_Representation+0x56>
 8015294:	ea08 0800 	and.w	r8, r8, r0
 8015298:	e7d1      	b.n	801523e <uxr_serialize_CLIENT_Representation+0x56>
 801529a:	bf00      	nop

0801529c <uxr_deserialize_CLIENT_Representation>:
 801529c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80152a0:	2204      	movs	r2, #4
 80152a2:	460c      	mov	r4, r1
 80152a4:	4605      	mov	r5, r0
 80152a6:	f7fd f9f9 	bl	801269c <ucdr_deserialize_array_uint8_t>
 80152aa:	2202      	movs	r2, #2
 80152ac:	1d21      	adds	r1, r4, #4
 80152ae:	4606      	mov	r6, r0
 80152b0:	4628      	mov	r0, r5
 80152b2:	f7fd f9f3 	bl	801269c <ucdr_deserialize_array_uint8_t>
 80152b6:	2202      	movs	r2, #2
 80152b8:	4006      	ands	r6, r0
 80152ba:	1da1      	adds	r1, r4, #6
 80152bc:	4628      	mov	r0, r5
 80152be:	f7fd f9ed 	bl	801269c <ucdr_deserialize_array_uint8_t>
 80152c2:	b2f6      	uxtb	r6, r6
 80152c4:	2204      	movs	r2, #4
 80152c6:	4006      	ands	r6, r0
 80152c8:	f104 0108 	add.w	r1, r4, #8
 80152cc:	4628      	mov	r0, r5
 80152ce:	f7fd f9e5 	bl	801269c <ucdr_deserialize_array_uint8_t>
 80152d2:	f104 010c 	add.w	r1, r4, #12
 80152d6:	ea00 0706 	and.w	r7, r0, r6
 80152da:	4628      	mov	r0, r5
 80152dc:	f7f7 f994 	bl	800c608 <ucdr_deserialize_uint8_t>
 80152e0:	f104 010d 	add.w	r1, r4, #13
 80152e4:	4007      	ands	r7, r0
 80152e6:	4628      	mov	r0, r5
 80152e8:	f7f7 f960 	bl	800c5ac <ucdr_deserialize_bool>
 80152ec:	7b63      	ldrb	r3, [r4, #13]
 80152ee:	4007      	ands	r7, r0
 80152f0:	b93b      	cbnz	r3, 8015302 <uxr_deserialize_CLIENT_Representation+0x66>
 80152f2:	f104 011c 	add.w	r1, r4, #28
 80152f6:	4628      	mov	r0, r5
 80152f8:	f7f7 faa0 	bl	800c83c <ucdr_deserialize_uint16_t>
 80152fc:	4038      	ands	r0, r7
 80152fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015302:	f104 0110 	add.w	r1, r4, #16
 8015306:	4628      	mov	r0, r5
 8015308:	f7f7 fcae 	bl	800cc68 <ucdr_deserialize_uint32_t>
 801530c:	6923      	ldr	r3, [r4, #16]
 801530e:	2b01      	cmp	r3, #1
 8015310:	d903      	bls.n	801531a <uxr_deserialize_CLIENT_Representation+0x7e>
 8015312:	2301      	movs	r3, #1
 8015314:	75ab      	strb	r3, [r5, #22]
 8015316:	2700      	movs	r7, #0
 8015318:	e7eb      	b.n	80152f2 <uxr_deserialize_CLIENT_Representation+0x56>
 801531a:	b30b      	cbz	r3, 8015360 <uxr_deserialize_CLIENT_Representation+0xc4>
 801531c:	2800      	cmp	r0, #0
 801531e:	d0fa      	beq.n	8015316 <uxr_deserialize_CLIENT_Representation+0x7a>
 8015320:	46a0      	mov	r8, r4
 8015322:	f04f 0900 	mov.w	r9, #0
 8015326:	e003      	b.n	8015330 <uxr_deserialize_CLIENT_Representation+0x94>
 8015328:	f108 0808 	add.w	r8, r8, #8
 801532c:	2e00      	cmp	r6, #0
 801532e:	d0f2      	beq.n	8015316 <uxr_deserialize_CLIENT_Representation+0x7a>
 8015330:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015334:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015338:	4628      	mov	r0, r5
 801533a:	f005 ffc9 	bl	801b2d0 <ucdr_deserialize_string>
 801533e:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8015342:	4606      	mov	r6, r0
 8015344:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015348:	4628      	mov	r0, r5
 801534a:	f005 ffc1 	bl	801b2d0 <ucdr_deserialize_string>
 801534e:	6923      	ldr	r3, [r4, #16]
 8015350:	f109 0901 	add.w	r9, r9, #1
 8015354:	4006      	ands	r6, r0
 8015356:	4599      	cmp	r9, r3
 8015358:	b2f6      	uxtb	r6, r6
 801535a:	d3e5      	bcc.n	8015328 <uxr_deserialize_CLIENT_Representation+0x8c>
 801535c:	4037      	ands	r7, r6
 801535e:	e7c8      	b.n	80152f2 <uxr_deserialize_CLIENT_Representation+0x56>
 8015360:	4007      	ands	r7, r0
 8015362:	e7c6      	b.n	80152f2 <uxr_deserialize_CLIENT_Representation+0x56>

08015364 <uxr_serialize_AGENT_Representation>:
 8015364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015368:	2204      	movs	r2, #4
 801536a:	460f      	mov	r7, r1
 801536c:	4605      	mov	r5, r0
 801536e:	f7fd f931 	bl	80125d4 <ucdr_serialize_array_uint8_t>
 8015372:	2202      	movs	r2, #2
 8015374:	4604      	mov	r4, r0
 8015376:	1d39      	adds	r1, r7, #4
 8015378:	4628      	mov	r0, r5
 801537a:	f7fd f92b 	bl	80125d4 <ucdr_serialize_array_uint8_t>
 801537e:	4020      	ands	r0, r4
 8015380:	2202      	movs	r2, #2
 8015382:	b2c4      	uxtb	r4, r0
 8015384:	1db9      	adds	r1, r7, #6
 8015386:	4628      	mov	r0, r5
 8015388:	f7fd f924 	bl	80125d4 <ucdr_serialize_array_uint8_t>
 801538c:	7a39      	ldrb	r1, [r7, #8]
 801538e:	4004      	ands	r4, r0
 8015390:	4628      	mov	r0, r5
 8015392:	f7f7 f8f5 	bl	800c580 <ucdr_serialize_bool>
 8015396:	7a3b      	ldrb	r3, [r7, #8]
 8015398:	ea00 0804 	and.w	r8, r0, r4
 801539c:	b913      	cbnz	r3, 80153a4 <uxr_serialize_AGENT_Representation+0x40>
 801539e:	4640      	mov	r0, r8
 80153a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80153a4:	68f9      	ldr	r1, [r7, #12]
 80153a6:	4628      	mov	r0, r5
 80153a8:	f7f7 fb34 	bl	800ca14 <ucdr_serialize_uint32_t>
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	b303      	cbz	r3, 80153f2 <uxr_serialize_AGENT_Representation+0x8e>
 80153b0:	b1d0      	cbz	r0, 80153e8 <uxr_serialize_AGENT_Representation+0x84>
 80153b2:	463e      	mov	r6, r7
 80153b4:	f04f 0900 	mov.w	r9, #0
 80153b8:	e001      	b.n	80153be <uxr_serialize_AGENT_Representation+0x5a>
 80153ba:	3608      	adds	r6, #8
 80153bc:	b1a4      	cbz	r4, 80153e8 <uxr_serialize_AGENT_Representation+0x84>
 80153be:	6931      	ldr	r1, [r6, #16]
 80153c0:	4628      	mov	r0, r5
 80153c2:	f005 ff77 	bl	801b2b4 <ucdr_serialize_string>
 80153c6:	6971      	ldr	r1, [r6, #20]
 80153c8:	4604      	mov	r4, r0
 80153ca:	4628      	mov	r0, r5
 80153cc:	f005 ff72 	bl	801b2b4 <ucdr_serialize_string>
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	f109 0901 	add.w	r9, r9, #1
 80153d6:	4004      	ands	r4, r0
 80153d8:	4599      	cmp	r9, r3
 80153da:	b2e4      	uxtb	r4, r4
 80153dc:	d3ed      	bcc.n	80153ba <uxr_serialize_AGENT_Representation+0x56>
 80153de:	ea08 0804 	and.w	r8, r8, r4
 80153e2:	4640      	mov	r0, r8
 80153e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80153e8:	f04f 0800 	mov.w	r8, #0
 80153ec:	4640      	mov	r0, r8
 80153ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80153f2:	ea08 0800 	and.w	r8, r8, r0
 80153f6:	e7d2      	b.n	801539e <uxr_serialize_AGENT_Representation+0x3a>

080153f8 <uxr_serialize_DATAWRITER_Representation>:
 80153f8:	b570      	push	{r4, r5, r6, lr}
 80153fa:	460d      	mov	r5, r1
 80153fc:	7809      	ldrb	r1, [r1, #0]
 80153fe:	4606      	mov	r6, r0
 8015400:	f7f7 f8ec 	bl	800c5dc <ucdr_serialize_uint8_t>
 8015404:	4604      	mov	r4, r0
 8015406:	b130      	cbz	r0, 8015416 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8015408:	782b      	ldrb	r3, [r5, #0]
 801540a:	2b02      	cmp	r3, #2
 801540c:	d00c      	beq.n	8015428 <uxr_serialize_DATAWRITER_Representation+0x30>
 801540e:	2b03      	cmp	r3, #3
 8015410:	d010      	beq.n	8015434 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8015412:	2b01      	cmp	r3, #1
 8015414:	d008      	beq.n	8015428 <uxr_serialize_DATAWRITER_Representation+0x30>
 8015416:	2202      	movs	r2, #2
 8015418:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801541c:	4630      	mov	r0, r6
 801541e:	f7fd f8d9 	bl	80125d4 <ucdr_serialize_array_uint8_t>
 8015422:	4020      	ands	r0, r4
 8015424:	b2c0      	uxtb	r0, r0
 8015426:	bd70      	pop	{r4, r5, r6, pc}
 8015428:	6869      	ldr	r1, [r5, #4]
 801542a:	4630      	mov	r0, r6
 801542c:	f005 ff42 	bl	801b2b4 <ucdr_serialize_string>
 8015430:	4604      	mov	r4, r0
 8015432:	e7f0      	b.n	8015416 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8015434:	4629      	mov	r1, r5
 8015436:	4630      	mov	r0, r6
 8015438:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801543c:	3104      	adds	r1, #4
 801543e:	f7fd fa69 	bl	8012914 <ucdr_serialize_sequence_uint8_t>
 8015442:	4604      	mov	r4, r0
 8015444:	e7e7      	b.n	8015416 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8015446:	bf00      	nop

08015448 <uxr_serialize_ObjectVariant.part.0>:
 8015448:	b570      	push	{r4, r5, r6, lr}
 801544a:	780b      	ldrb	r3, [r1, #0]
 801544c:	3b01      	subs	r3, #1
 801544e:	460c      	mov	r4, r1
 8015450:	4605      	mov	r5, r0
 8015452:	2b0d      	cmp	r3, #13
 8015454:	d816      	bhi.n	8015484 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8015456:	e8df f003 	tbb	[pc, r3]
 801545a:	0733      	.short	0x0733
 801545c:	07071717 	.word	0x07071717
 8015460:	0c150707 	.word	0x0c150707
 8015464:	4c510c0c 	.word	0x4c510c0c
 8015468:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801546c:	3104      	adds	r1, #4
 801546e:	f7ff bfc3 	b.w	80153f8 <uxr_serialize_DATAWRITER_Representation>
 8015472:	7909      	ldrb	r1, [r1, #4]
 8015474:	f7f7 f8b2 	bl	800c5dc <ucdr_serialize_uint8_t>
 8015478:	b300      	cbz	r0, 80154bc <uxr_serialize_ObjectVariant.part.0+0x74>
 801547a:	7923      	ldrb	r3, [r4, #4]
 801547c:	2b01      	cmp	r3, #1
 801547e:	d042      	beq.n	8015506 <uxr_serialize_ObjectVariant.part.0+0xbe>
 8015480:	2b02      	cmp	r3, #2
 8015482:	d040      	beq.n	8015506 <uxr_serialize_ObjectVariant.part.0+0xbe>
 8015484:	2001      	movs	r0, #1
 8015486:	bd70      	pop	{r4, r5, r6, pc}
 8015488:	7909      	ldrb	r1, [r1, #4]
 801548a:	f7f7 f8a7 	bl	800c5dc <ucdr_serialize_uint8_t>
 801548e:	4606      	mov	r6, r0
 8015490:	b158      	cbz	r0, 80154aa <uxr_serialize_ObjectVariant.part.0+0x62>
 8015492:	7923      	ldrb	r3, [r4, #4]
 8015494:	2b02      	cmp	r3, #2
 8015496:	d03c      	beq.n	8015512 <uxr_serialize_ObjectVariant.part.0+0xca>
 8015498:	2b03      	cmp	r3, #3
 801549a:	d106      	bne.n	80154aa <uxr_serialize_ObjectVariant.part.0+0x62>
 801549c:	68a2      	ldr	r2, [r4, #8]
 801549e:	f104 010c 	add.w	r1, r4, #12
 80154a2:	4628      	mov	r0, r5
 80154a4:	f7fd fa36 	bl	8012914 <ucdr_serialize_sequence_uint8_t>
 80154a8:	4606      	mov	r6, r0
 80154aa:	2202      	movs	r2, #2
 80154ac:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80154b0:	4628      	mov	r0, r5
 80154b2:	f7fd f88f 	bl	80125d4 <ucdr_serialize_array_uint8_t>
 80154b6:	4030      	ands	r0, r6
 80154b8:	b2c0      	uxtb	r0, r0
 80154ba:	bd70      	pop	{r4, r5, r6, pc}
 80154bc:	2000      	movs	r0, #0
 80154be:	bd70      	pop	{r4, r5, r6, pc}
 80154c0:	7909      	ldrb	r1, [r1, #4]
 80154c2:	f7f7 f88b 	bl	800c5dc <ucdr_serialize_uint8_t>
 80154c6:	4606      	mov	r6, r0
 80154c8:	b158      	cbz	r0, 80154e2 <uxr_serialize_ObjectVariant.part.0+0x9a>
 80154ca:	7923      	ldrb	r3, [r4, #4]
 80154cc:	2b02      	cmp	r3, #2
 80154ce:	d003      	beq.n	80154d8 <uxr_serialize_ObjectVariant.part.0+0x90>
 80154d0:	2b03      	cmp	r3, #3
 80154d2:	d024      	beq.n	801551e <uxr_serialize_ObjectVariant.part.0+0xd6>
 80154d4:	2b01      	cmp	r3, #1
 80154d6:	d104      	bne.n	80154e2 <uxr_serialize_ObjectVariant.part.0+0x9a>
 80154d8:	68a1      	ldr	r1, [r4, #8]
 80154da:	4628      	mov	r0, r5
 80154dc:	f005 feea 	bl	801b2b4 <ucdr_serialize_string>
 80154e0:	4606      	mov	r6, r0
 80154e2:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80154e6:	4628      	mov	r0, r5
 80154e8:	f7f7 fda0 	bl	800d02c <ucdr_serialize_int16_t>
 80154ec:	4030      	ands	r0, r6
 80154ee:	b2c0      	uxtb	r0, r0
 80154f0:	bd70      	pop	{r4, r5, r6, pc}
 80154f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80154f6:	3104      	adds	r1, #4
 80154f8:	f7ff be76 	b.w	80151e8 <uxr_serialize_CLIENT_Representation>
 80154fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015500:	3104      	adds	r1, #4
 8015502:	f7ff bf2f 	b.w	8015364 <uxr_serialize_AGENT_Representation>
 8015506:	68a1      	ldr	r1, [r4, #8]
 8015508:	4628      	mov	r0, r5
 801550a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801550e:	f005 bed1 	b.w	801b2b4 <ucdr_serialize_string>
 8015512:	68a1      	ldr	r1, [r4, #8]
 8015514:	4628      	mov	r0, r5
 8015516:	f005 fecd 	bl	801b2b4 <ucdr_serialize_string>
 801551a:	4606      	mov	r6, r0
 801551c:	e7c5      	b.n	80154aa <uxr_serialize_ObjectVariant.part.0+0x62>
 801551e:	68a2      	ldr	r2, [r4, #8]
 8015520:	f104 010c 	add.w	r1, r4, #12
 8015524:	4628      	mov	r0, r5
 8015526:	f7fd f9f5 	bl	8012914 <ucdr_serialize_sequence_uint8_t>
 801552a:	4606      	mov	r6, r0
 801552c:	e7d9      	b.n	80154e2 <uxr_serialize_ObjectVariant.part.0+0x9a>
 801552e:	bf00      	nop

08015530 <uxr_deserialize_DATAWRITER_Representation>:
 8015530:	b570      	push	{r4, r5, r6, lr}
 8015532:	4606      	mov	r6, r0
 8015534:	460d      	mov	r5, r1
 8015536:	f7f7 f867 	bl	800c608 <ucdr_deserialize_uint8_t>
 801553a:	4604      	mov	r4, r0
 801553c:	b130      	cbz	r0, 801554c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801553e:	782b      	ldrb	r3, [r5, #0]
 8015540:	2b02      	cmp	r3, #2
 8015542:	d00c      	beq.n	801555e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8015544:	2b03      	cmp	r3, #3
 8015546:	d012      	beq.n	801556e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8015548:	2b01      	cmp	r3, #1
 801554a:	d008      	beq.n	801555e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801554c:	2202      	movs	r2, #2
 801554e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8015552:	4630      	mov	r0, r6
 8015554:	f7fd f8a2 	bl	801269c <ucdr_deserialize_array_uint8_t>
 8015558:	4020      	ands	r0, r4
 801555a:	b2c0      	uxtb	r0, r0
 801555c:	bd70      	pop	{r4, r5, r6, pc}
 801555e:	6869      	ldr	r1, [r5, #4]
 8015560:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015564:	4630      	mov	r0, r6
 8015566:	f005 feb3 	bl	801b2d0 <ucdr_deserialize_string>
 801556a:	4604      	mov	r4, r0
 801556c:	e7ee      	b.n	801554c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801556e:	1d2b      	adds	r3, r5, #4
 8015570:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015574:	f105 0108 	add.w	r1, r5, #8
 8015578:	4630      	mov	r0, r6
 801557a:	f7fd f9dd 	bl	8012938 <ucdr_deserialize_sequence_uint8_t>
 801557e:	4604      	mov	r4, r0
 8015580:	e7e4      	b.n	801554c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8015582:	bf00      	nop

08015584 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8015584:	b570      	push	{r4, r5, r6, lr}
 8015586:	460d      	mov	r5, r1
 8015588:	7809      	ldrb	r1, [r1, #0]
 801558a:	4606      	mov	r6, r0
 801558c:	f7f6 fff8 	bl	800c580 <ucdr_serialize_bool>
 8015590:	782b      	ldrb	r3, [r5, #0]
 8015592:	4604      	mov	r4, r0
 8015594:	b94b      	cbnz	r3, 80155aa <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8015596:	7a29      	ldrb	r1, [r5, #8]
 8015598:	4630      	mov	r0, r6
 801559a:	f7f6 fff1 	bl	800c580 <ucdr_serialize_bool>
 801559e:	7a2b      	ldrb	r3, [r5, #8]
 80155a0:	4004      	ands	r4, r0
 80155a2:	b2e4      	uxtb	r4, r4
 80155a4:	b943      	cbnz	r3, 80155b8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80155a6:	4620      	mov	r0, r4
 80155a8:	bd70      	pop	{r4, r5, r6, pc}
 80155aa:	6869      	ldr	r1, [r5, #4]
 80155ac:	4630      	mov	r0, r6
 80155ae:	f005 fe81 	bl	801b2b4 <ucdr_serialize_string>
 80155b2:	4004      	ands	r4, r0
 80155b4:	b2e4      	uxtb	r4, r4
 80155b6:	e7ee      	b.n	8015596 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80155b8:	68e9      	ldr	r1, [r5, #12]
 80155ba:	4630      	mov	r0, r6
 80155bc:	f005 fe7a 	bl	801b2b4 <ucdr_serialize_string>
 80155c0:	4004      	ands	r4, r0
 80155c2:	4620      	mov	r0, r4
 80155c4:	bd70      	pop	{r4, r5, r6, pc}
 80155c6:	bf00      	nop

080155c8 <uxr_serialize_OBJK_Topic_Binary>:
 80155c8:	b570      	push	{r4, r5, r6, lr}
 80155ca:	460d      	mov	r5, r1
 80155cc:	6809      	ldr	r1, [r1, #0]
 80155ce:	4606      	mov	r6, r0
 80155d0:	f005 fe70 	bl	801b2b4 <ucdr_serialize_string>
 80155d4:	7929      	ldrb	r1, [r5, #4]
 80155d6:	4604      	mov	r4, r0
 80155d8:	4630      	mov	r0, r6
 80155da:	f7f6 ffd1 	bl	800c580 <ucdr_serialize_bool>
 80155de:	792b      	ldrb	r3, [r5, #4]
 80155e0:	4004      	ands	r4, r0
 80155e2:	b2e4      	uxtb	r4, r4
 80155e4:	b943      	cbnz	r3, 80155f8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80155e6:	7b29      	ldrb	r1, [r5, #12]
 80155e8:	4630      	mov	r0, r6
 80155ea:	f7f6 ffc9 	bl	800c580 <ucdr_serialize_bool>
 80155ee:	7b2b      	ldrb	r3, [r5, #12]
 80155f0:	4004      	ands	r4, r0
 80155f2:	b93b      	cbnz	r3, 8015604 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80155f4:	4620      	mov	r0, r4
 80155f6:	bd70      	pop	{r4, r5, r6, pc}
 80155f8:	68a9      	ldr	r1, [r5, #8]
 80155fa:	4630      	mov	r0, r6
 80155fc:	f005 fe5a 	bl	801b2b4 <ucdr_serialize_string>
 8015600:	4004      	ands	r4, r0
 8015602:	e7f0      	b.n	80155e6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8015604:	6929      	ldr	r1, [r5, #16]
 8015606:	4630      	mov	r0, r6
 8015608:	f005 fe54 	bl	801b2b4 <ucdr_serialize_string>
 801560c:	4004      	ands	r4, r0
 801560e:	b2e4      	uxtb	r4, r4
 8015610:	4620      	mov	r0, r4
 8015612:	bd70      	pop	{r4, r5, r6, pc}

08015614 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8015614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015618:	460c      	mov	r4, r1
 801561a:	7809      	ldrb	r1, [r1, #0]
 801561c:	4606      	mov	r6, r0
 801561e:	f7f6 ffaf 	bl	800c580 <ucdr_serialize_bool>
 8015622:	7823      	ldrb	r3, [r4, #0]
 8015624:	4605      	mov	r5, r0
 8015626:	b96b      	cbnz	r3, 8015644 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8015628:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801562c:	4630      	mov	r0, r6
 801562e:	f7f6 ffa7 	bl	800c580 <ucdr_serialize_bool>
 8015632:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8015636:	4005      	ands	r5, r0
 8015638:	b2ed      	uxtb	r5, r5
 801563a:	2b00      	cmp	r3, #0
 801563c:	d16a      	bne.n	8015714 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x100>
 801563e:	4628      	mov	r0, r5
 8015640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015644:	6861      	ldr	r1, [r4, #4]
 8015646:	4630      	mov	r0, r6
 8015648:	f7f7 f9e4 	bl	800ca14 <ucdr_serialize_uint32_t>
 801564c:	6863      	ldr	r3, [r4, #4]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d06c      	beq.n	801572c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x118>
 8015652:	2800      	cmp	r0, #0
 8015654:	d068      	beq.n	8015728 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8015656:	68a1      	ldr	r1, [r4, #8]
 8015658:	4630      	mov	r0, r6
 801565a:	f005 fe2b 	bl	801b2b4 <ucdr_serialize_string>
 801565e:	6862      	ldr	r2, [r4, #4]
 8015660:	2a01      	cmp	r2, #1
 8015662:	d953      	bls.n	801570c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015664:	2800      	cmp	r0, #0
 8015666:	d05f      	beq.n	8015728 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8015668:	68e1      	ldr	r1, [r4, #12]
 801566a:	4630      	mov	r0, r6
 801566c:	f005 fe22 	bl	801b2b4 <ucdr_serialize_string>
 8015670:	6862      	ldr	r2, [r4, #4]
 8015672:	2a02      	cmp	r2, #2
 8015674:	d94a      	bls.n	801570c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015676:	2800      	cmp	r0, #0
 8015678:	d056      	beq.n	8015728 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 801567a:	6921      	ldr	r1, [r4, #16]
 801567c:	4630      	mov	r0, r6
 801567e:	f005 fe19 	bl	801b2b4 <ucdr_serialize_string>
 8015682:	6862      	ldr	r2, [r4, #4]
 8015684:	2a03      	cmp	r2, #3
 8015686:	d941      	bls.n	801570c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015688:	2800      	cmp	r0, #0
 801568a:	d04d      	beq.n	8015728 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 801568c:	6961      	ldr	r1, [r4, #20]
 801568e:	4630      	mov	r0, r6
 8015690:	f005 fe10 	bl	801b2b4 <ucdr_serialize_string>
 8015694:	6862      	ldr	r2, [r4, #4]
 8015696:	2a04      	cmp	r2, #4
 8015698:	d938      	bls.n	801570c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801569a:	2800      	cmp	r0, #0
 801569c:	d044      	beq.n	8015728 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 801569e:	69a1      	ldr	r1, [r4, #24]
 80156a0:	4630      	mov	r0, r6
 80156a2:	f005 fe07 	bl	801b2b4 <ucdr_serialize_string>
 80156a6:	6862      	ldr	r2, [r4, #4]
 80156a8:	2a05      	cmp	r2, #5
 80156aa:	d92f      	bls.n	801570c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80156ac:	2800      	cmp	r0, #0
 80156ae:	d03b      	beq.n	8015728 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80156b0:	69e1      	ldr	r1, [r4, #28]
 80156b2:	4630      	mov	r0, r6
 80156b4:	f005 fdfe 	bl	801b2b4 <ucdr_serialize_string>
 80156b8:	6862      	ldr	r2, [r4, #4]
 80156ba:	2a06      	cmp	r2, #6
 80156bc:	d926      	bls.n	801570c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80156be:	b398      	cbz	r0, 8015728 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80156c0:	6a21      	ldr	r1, [r4, #32]
 80156c2:	4630      	mov	r0, r6
 80156c4:	f005 fdf6 	bl	801b2b4 <ucdr_serialize_string>
 80156c8:	6862      	ldr	r2, [r4, #4]
 80156ca:	2a07      	cmp	r2, #7
 80156cc:	d91e      	bls.n	801570c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80156ce:	b358      	cbz	r0, 8015728 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80156d0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80156d2:	4630      	mov	r0, r6
 80156d4:	f005 fdee 	bl	801b2b4 <ucdr_serialize_string>
 80156d8:	6862      	ldr	r2, [r4, #4]
 80156da:	2a08      	cmp	r2, #8
 80156dc:	d916      	bls.n	801570c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80156de:	b318      	cbz	r0, 8015728 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80156e0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80156e2:	4630      	mov	r0, r6
 80156e4:	f005 fde6 	bl	801b2b4 <ucdr_serialize_string>
 80156e8:	6862      	ldr	r2, [r4, #4]
 80156ea:	2a09      	cmp	r2, #9
 80156ec:	d90e      	bls.n	801570c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80156ee:	b1d8      	cbz	r0, 8015728 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80156f0:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 80156f4:	2709      	movs	r7, #9
 80156f6:	e000      	b.n	80156fa <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80156f8:	b1b0      	cbz	r0, 8015728 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80156fa:	f858 1f04 	ldr.w	r1, [r8, #4]!
 80156fe:	4630      	mov	r0, r6
 8015700:	f005 fdd8 	bl	801b2b4 <ucdr_serialize_string>
 8015704:	6862      	ldr	r2, [r4, #4]
 8015706:	3701      	adds	r7, #1
 8015708:	4297      	cmp	r7, r2
 801570a:	d3f5      	bcc.n	80156f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801570c:	ea05 0300 	and.w	r3, r5, r0
 8015710:	b2dd      	uxtb	r5, r3
 8015712:	e789      	b.n	8015628 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8015714:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8015716:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801571a:	4630      	mov	r0, r6
 801571c:	f7fd f8fa 	bl	8012914 <ucdr_serialize_sequence_uint8_t>
 8015720:	4005      	ands	r5, r0
 8015722:	4628      	mov	r0, r5
 8015724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015728:	2500      	movs	r5, #0
 801572a:	e77d      	b.n	8015628 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801572c:	4028      	ands	r0, r5
 801572e:	b2c5      	uxtb	r5, r0
 8015730:	e77a      	b.n	8015628 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8015732:	bf00      	nop

08015734 <uxr_serialize_OBJK_Publisher_Binary>:
 8015734:	b570      	push	{r4, r5, r6, lr}
 8015736:	460d      	mov	r5, r1
 8015738:	7809      	ldrb	r1, [r1, #0]
 801573a:	4606      	mov	r6, r0
 801573c:	f7f6 ff20 	bl	800c580 <ucdr_serialize_bool>
 8015740:	782b      	ldrb	r3, [r5, #0]
 8015742:	4604      	mov	r4, r0
 8015744:	b94b      	cbnz	r3, 801575a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8015746:	7a29      	ldrb	r1, [r5, #8]
 8015748:	4630      	mov	r0, r6
 801574a:	f7f6 ff19 	bl	800c580 <ucdr_serialize_bool>
 801574e:	7a2b      	ldrb	r3, [r5, #8]
 8015750:	4004      	ands	r4, r0
 8015752:	b2e4      	uxtb	r4, r4
 8015754:	b943      	cbnz	r3, 8015768 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8015756:	4620      	mov	r0, r4
 8015758:	bd70      	pop	{r4, r5, r6, pc}
 801575a:	6869      	ldr	r1, [r5, #4]
 801575c:	4630      	mov	r0, r6
 801575e:	f005 fda9 	bl	801b2b4 <ucdr_serialize_string>
 8015762:	4004      	ands	r4, r0
 8015764:	b2e4      	uxtb	r4, r4
 8015766:	e7ee      	b.n	8015746 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8015768:	f105 010c 	add.w	r1, r5, #12
 801576c:	4630      	mov	r0, r6
 801576e:	f7ff ff51 	bl	8015614 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8015772:	4004      	ands	r4, r0
 8015774:	4620      	mov	r0, r4
 8015776:	bd70      	pop	{r4, r5, r6, pc}

08015778 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8015778:	b570      	push	{r4, r5, r6, lr}
 801577a:	460d      	mov	r5, r1
 801577c:	8809      	ldrh	r1, [r1, #0]
 801577e:	4606      	mov	r6, r0
 8015780:	f7f6 ff58 	bl	800c634 <ucdr_serialize_uint16_t>
 8015784:	78a9      	ldrb	r1, [r5, #2]
 8015786:	4604      	mov	r4, r0
 8015788:	4630      	mov	r0, r6
 801578a:	f7f6 fef9 	bl	800c580 <ucdr_serialize_bool>
 801578e:	78ab      	ldrb	r3, [r5, #2]
 8015790:	4004      	ands	r4, r0
 8015792:	b2e4      	uxtb	r4, r4
 8015794:	b9b3      	cbnz	r3, 80157c4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 8015796:	79a9      	ldrb	r1, [r5, #6]
 8015798:	4630      	mov	r0, r6
 801579a:	f7f6 fef1 	bl	800c580 <ucdr_serialize_bool>
 801579e:	79ab      	ldrb	r3, [r5, #6]
 80157a0:	4004      	ands	r4, r0
 80157a2:	bb33      	cbnz	r3, 80157f2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 80157a4:	7b29      	ldrb	r1, [r5, #12]
 80157a6:	4630      	mov	r0, r6
 80157a8:	f7f6 feea 	bl	800c580 <ucdr_serialize_bool>
 80157ac:	7b2b      	ldrb	r3, [r5, #12]
 80157ae:	4004      	ands	r4, r0
 80157b0:	b9c3      	cbnz	r3, 80157e4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 80157b2:	7d29      	ldrb	r1, [r5, #20]
 80157b4:	4630      	mov	r0, r6
 80157b6:	f7f6 fee3 	bl	800c580 <ucdr_serialize_bool>
 80157ba:	7d2b      	ldrb	r3, [r5, #20]
 80157bc:	4004      	ands	r4, r0
 80157be:	b93b      	cbnz	r3, 80157d0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 80157c0:	4620      	mov	r0, r4
 80157c2:	bd70      	pop	{r4, r5, r6, pc}
 80157c4:	88a9      	ldrh	r1, [r5, #4]
 80157c6:	4630      	mov	r0, r6
 80157c8:	f7f6 ff34 	bl	800c634 <ucdr_serialize_uint16_t>
 80157cc:	4004      	ands	r4, r0
 80157ce:	e7e2      	b.n	8015796 <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 80157d0:	69aa      	ldr	r2, [r5, #24]
 80157d2:	f105 011c 	add.w	r1, r5, #28
 80157d6:	4630      	mov	r0, r6
 80157d8:	f7fd f89c 	bl	8012914 <ucdr_serialize_sequence_uint8_t>
 80157dc:	4004      	ands	r4, r0
 80157de:	b2e4      	uxtb	r4, r4
 80157e0:	4620      	mov	r0, r4
 80157e2:	bd70      	pop	{r4, r5, r6, pc}
 80157e4:	6929      	ldr	r1, [r5, #16]
 80157e6:	4630      	mov	r0, r6
 80157e8:	f7f7 f914 	bl	800ca14 <ucdr_serialize_uint32_t>
 80157ec:	4004      	ands	r4, r0
 80157ee:	b2e4      	uxtb	r4, r4
 80157f0:	e7df      	b.n	80157b2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 80157f2:	68a9      	ldr	r1, [r5, #8]
 80157f4:	4630      	mov	r0, r6
 80157f6:	f7f7 f90d 	bl	800ca14 <ucdr_serialize_uint32_t>
 80157fa:	4004      	ands	r4, r0
 80157fc:	b2e4      	uxtb	r4, r4
 80157fe:	e7d1      	b.n	80157a4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

08015800 <uxr_serialize_OBJK_DataWriter_Binary>:
 8015800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015802:	2202      	movs	r2, #2
 8015804:	460d      	mov	r5, r1
 8015806:	4606      	mov	r6, r0
 8015808:	f7fc fee4 	bl	80125d4 <ucdr_serialize_array_uint8_t>
 801580c:	78a9      	ldrb	r1, [r5, #2]
 801580e:	4604      	mov	r4, r0
 8015810:	4630      	mov	r0, r6
 8015812:	f7f6 feb5 	bl	800c580 <ucdr_serialize_bool>
 8015816:	78ab      	ldrb	r3, [r5, #2]
 8015818:	4004      	ands	r4, r0
 801581a:	b2e4      	uxtb	r4, r4
 801581c:	b90b      	cbnz	r3, 8015822 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801581e:	4620      	mov	r0, r4
 8015820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015822:	f105 0108 	add.w	r1, r5, #8
 8015826:	4630      	mov	r0, r6
 8015828:	f7ff ffa6 	bl	8015778 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801582c:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8015830:	4607      	mov	r7, r0
 8015832:	4630      	mov	r0, r6
 8015834:	f7f6 fea4 	bl	800c580 <ucdr_serialize_bool>
 8015838:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801583c:	4007      	ands	r7, r0
 801583e:	b2ff      	uxtb	r7, r7
 8015840:	b913      	cbnz	r3, 8015848 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8015842:	403c      	ands	r4, r7
 8015844:	4620      	mov	r0, r4
 8015846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015848:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 801584c:	4630      	mov	r0, r6
 801584e:	f7f7 fb25 	bl	800ce9c <ucdr_serialize_uint64_t>
 8015852:	4007      	ands	r7, r0
 8015854:	e7f5      	b.n	8015842 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8015856:	bf00      	nop

08015858 <uxr_serialize_OBJK_Replier_Binary>:
 8015858:	b570      	push	{r4, r5, r6, lr}
 801585a:	460d      	mov	r5, r1
 801585c:	6809      	ldr	r1, [r1, #0]
 801585e:	4606      	mov	r6, r0
 8015860:	f005 fd28 	bl	801b2b4 <ucdr_serialize_string>
 8015864:	6869      	ldr	r1, [r5, #4]
 8015866:	4604      	mov	r4, r0
 8015868:	4630      	mov	r0, r6
 801586a:	f005 fd23 	bl	801b2b4 <ucdr_serialize_string>
 801586e:	68a9      	ldr	r1, [r5, #8]
 8015870:	4004      	ands	r4, r0
 8015872:	4630      	mov	r0, r6
 8015874:	f005 fd1e 	bl	801b2b4 <ucdr_serialize_string>
 8015878:	b2e4      	uxtb	r4, r4
 801587a:	4004      	ands	r4, r0
 801587c:	7b29      	ldrb	r1, [r5, #12]
 801587e:	4630      	mov	r0, r6
 8015880:	f7f6 fe7e 	bl	800c580 <ucdr_serialize_bool>
 8015884:	7b2b      	ldrb	r3, [r5, #12]
 8015886:	4004      	ands	r4, r0
 8015888:	b943      	cbnz	r3, 801589c <uxr_serialize_OBJK_Replier_Binary+0x44>
 801588a:	7d29      	ldrb	r1, [r5, #20]
 801588c:	4630      	mov	r0, r6
 801588e:	f7f6 fe77 	bl	800c580 <ucdr_serialize_bool>
 8015892:	7d2b      	ldrb	r3, [r5, #20]
 8015894:	4004      	ands	r4, r0
 8015896:	b93b      	cbnz	r3, 80158a8 <uxr_serialize_OBJK_Replier_Binary+0x50>
 8015898:	4620      	mov	r0, r4
 801589a:	bd70      	pop	{r4, r5, r6, pc}
 801589c:	6929      	ldr	r1, [r5, #16]
 801589e:	4630      	mov	r0, r6
 80158a0:	f005 fd08 	bl	801b2b4 <ucdr_serialize_string>
 80158a4:	4004      	ands	r4, r0
 80158a6:	e7f0      	b.n	801588a <uxr_serialize_OBJK_Replier_Binary+0x32>
 80158a8:	69a9      	ldr	r1, [r5, #24]
 80158aa:	4630      	mov	r0, r6
 80158ac:	f005 fd02 	bl	801b2b4 <ucdr_serialize_string>
 80158b0:	4004      	ands	r4, r0
 80158b2:	b2e4      	uxtb	r4, r4
 80158b4:	4620      	mov	r0, r4
 80158b6:	bd70      	pop	{r4, r5, r6, pc}

080158b8 <uxr_deserialize_ObjectVariant>:
 80158b8:	b570      	push	{r4, r5, r6, lr}
 80158ba:	4605      	mov	r5, r0
 80158bc:	460e      	mov	r6, r1
 80158be:	f7f6 fea3 	bl	800c608 <ucdr_deserialize_uint8_t>
 80158c2:	b168      	cbz	r0, 80158e0 <uxr_deserialize_ObjectVariant+0x28>
 80158c4:	7833      	ldrb	r3, [r6, #0]
 80158c6:	3b01      	subs	r3, #1
 80158c8:	4604      	mov	r4, r0
 80158ca:	2b0d      	cmp	r3, #13
 80158cc:	d809      	bhi.n	80158e2 <uxr_deserialize_ObjectVariant+0x2a>
 80158ce:	e8df f003 	tbb	[pc, r3]
 80158d2:	0a64      	.short	0x0a64
 80158d4:	0a0a2323 	.word	0x0a0a2323
 80158d8:	10080a0a 	.word	0x10080a0a
 80158dc:	5e411010 	.word	0x5e411010
 80158e0:	2400      	movs	r4, #0
 80158e2:	4620      	mov	r0, r4
 80158e4:	bd70      	pop	{r4, r5, r6, pc}
 80158e6:	1d31      	adds	r1, r6, #4
 80158e8:	4628      	mov	r0, r5
 80158ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80158ee:	f7ff be1f 	b.w	8015530 <uxr_deserialize_DATAWRITER_Representation>
 80158f2:	1d31      	adds	r1, r6, #4
 80158f4:	4628      	mov	r0, r5
 80158f6:	f7f6 fe87 	bl	800c608 <ucdr_deserialize_uint8_t>
 80158fa:	2800      	cmp	r0, #0
 80158fc:	d0f0      	beq.n	80158e0 <uxr_deserialize_ObjectVariant+0x28>
 80158fe:	7933      	ldrb	r3, [r6, #4]
 8015900:	2b01      	cmp	r3, #1
 8015902:	d001      	beq.n	8015908 <uxr_deserialize_ObjectVariant+0x50>
 8015904:	2b02      	cmp	r3, #2
 8015906:	d1ec      	bne.n	80158e2 <uxr_deserialize_ObjectVariant+0x2a>
 8015908:	68b1      	ldr	r1, [r6, #8]
 801590a:	4628      	mov	r0, r5
 801590c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015914:	f005 bcdc 	b.w	801b2d0 <ucdr_deserialize_string>
 8015918:	1d31      	adds	r1, r6, #4
 801591a:	4628      	mov	r0, r5
 801591c:	f7f6 fe74 	bl	800c608 <ucdr_deserialize_uint8_t>
 8015920:	4604      	mov	r4, r0
 8015922:	b170      	cbz	r0, 8015942 <uxr_deserialize_ObjectVariant+0x8a>
 8015924:	7933      	ldrb	r3, [r6, #4]
 8015926:	2b02      	cmp	r3, #2
 8015928:	d053      	beq.n	80159d2 <uxr_deserialize_ObjectVariant+0x11a>
 801592a:	2b03      	cmp	r3, #3
 801592c:	d109      	bne.n	8015942 <uxr_deserialize_ObjectVariant+0x8a>
 801592e:	f106 0308 	add.w	r3, r6, #8
 8015932:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015936:	f106 010c 	add.w	r1, r6, #12
 801593a:	4628      	mov	r0, r5
 801593c:	f7fc fffc 	bl	8012938 <ucdr_deserialize_sequence_uint8_t>
 8015940:	4604      	mov	r4, r0
 8015942:	2202      	movs	r2, #2
 8015944:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8015948:	4628      	mov	r0, r5
 801594a:	f7fc fea7 	bl	801269c <ucdr_deserialize_array_uint8_t>
 801594e:	4004      	ands	r4, r0
 8015950:	b2e4      	uxtb	r4, r4
 8015952:	e7c6      	b.n	80158e2 <uxr_deserialize_ObjectVariant+0x2a>
 8015954:	2204      	movs	r2, #4
 8015956:	18b1      	adds	r1, r6, r2
 8015958:	4628      	mov	r0, r5
 801595a:	f7fc fe9f 	bl	801269c <ucdr_deserialize_array_uint8_t>
 801595e:	2202      	movs	r2, #2
 8015960:	f106 0108 	add.w	r1, r6, #8
 8015964:	4604      	mov	r4, r0
 8015966:	4628      	mov	r0, r5
 8015968:	f7fc fe98 	bl	801269c <ucdr_deserialize_array_uint8_t>
 801596c:	2202      	movs	r2, #2
 801596e:	4004      	ands	r4, r0
 8015970:	f106 010a 	add.w	r1, r6, #10
 8015974:	4628      	mov	r0, r5
 8015976:	f7fc fe91 	bl	801269c <ucdr_deserialize_array_uint8_t>
 801597a:	b2e4      	uxtb	r4, r4
 801597c:	4603      	mov	r3, r0
 801597e:	f106 010c 	add.w	r1, r6, #12
 8015982:	4628      	mov	r0, r5
 8015984:	401c      	ands	r4, r3
 8015986:	f7f6 fe11 	bl	800c5ac <ucdr_deserialize_bool>
 801598a:	4004      	ands	r4, r0
 801598c:	e7a9      	b.n	80158e2 <uxr_deserialize_ObjectVariant+0x2a>
 801598e:	1d31      	adds	r1, r6, #4
 8015990:	4628      	mov	r0, r5
 8015992:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015996:	f7ff bc81 	b.w	801529c <uxr_deserialize_CLIENT_Representation>
 801599a:	1d31      	adds	r1, r6, #4
 801599c:	4628      	mov	r0, r5
 801599e:	f7f6 fe33 	bl	800c608 <ucdr_deserialize_uint8_t>
 80159a2:	4604      	mov	r4, r0
 80159a4:	b168      	cbz	r0, 80159c2 <uxr_deserialize_ObjectVariant+0x10a>
 80159a6:	7933      	ldrb	r3, [r6, #4]
 80159a8:	2b02      	cmp	r3, #2
 80159aa:	d003      	beq.n	80159b4 <uxr_deserialize_ObjectVariant+0xfc>
 80159ac:	2b03      	cmp	r3, #3
 80159ae:	d018      	beq.n	80159e2 <uxr_deserialize_ObjectVariant+0x12a>
 80159b0:	2b01      	cmp	r3, #1
 80159b2:	d106      	bne.n	80159c2 <uxr_deserialize_ObjectVariant+0x10a>
 80159b4:	68b1      	ldr	r1, [r6, #8]
 80159b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80159ba:	4628      	mov	r0, r5
 80159bc:	f005 fc88 	bl	801b2d0 <ucdr_deserialize_string>
 80159c0:	4604      	mov	r4, r0
 80159c2:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80159c6:	4628      	mov	r0, r5
 80159c8:	f7f7 fbba 	bl	800d140 <ucdr_deserialize_int16_t>
 80159cc:	4004      	ands	r4, r0
 80159ce:	b2e4      	uxtb	r4, r4
 80159d0:	e787      	b.n	80158e2 <uxr_deserialize_ObjectVariant+0x2a>
 80159d2:	68b1      	ldr	r1, [r6, #8]
 80159d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80159d8:	4628      	mov	r0, r5
 80159da:	f005 fc79 	bl	801b2d0 <ucdr_deserialize_string>
 80159de:	4604      	mov	r4, r0
 80159e0:	e7af      	b.n	8015942 <uxr_deserialize_ObjectVariant+0x8a>
 80159e2:	f106 0308 	add.w	r3, r6, #8
 80159e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80159ea:	f106 010c 	add.w	r1, r6, #12
 80159ee:	4628      	mov	r0, r5
 80159f0:	f7fc ffa2 	bl	8012938 <ucdr_deserialize_sequence_uint8_t>
 80159f4:	4604      	mov	r4, r0
 80159f6:	e7e4      	b.n	80159c2 <uxr_deserialize_ObjectVariant+0x10a>

080159f8 <uxr_deserialize_BaseObjectRequest>:
 80159f8:	b570      	push	{r4, r5, r6, lr}
 80159fa:	2202      	movs	r2, #2
 80159fc:	4605      	mov	r5, r0
 80159fe:	460e      	mov	r6, r1
 8015a00:	f7fc fe4c 	bl	801269c <ucdr_deserialize_array_uint8_t>
 8015a04:	2202      	movs	r2, #2
 8015a06:	4604      	mov	r4, r0
 8015a08:	18b1      	adds	r1, r6, r2
 8015a0a:	4628      	mov	r0, r5
 8015a0c:	f7fc fe46 	bl	801269c <ucdr_deserialize_array_uint8_t>
 8015a10:	4020      	ands	r0, r4
 8015a12:	b2c0      	uxtb	r0, r0
 8015a14:	bd70      	pop	{r4, r5, r6, pc}
 8015a16:	bf00      	nop

08015a18 <uxr_serialize_ActivityInfoVariant>:
 8015a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a1c:	460d      	mov	r5, r1
 8015a1e:	7809      	ldrb	r1, [r1, #0]
 8015a20:	4606      	mov	r6, r0
 8015a22:	f7f6 fddb 	bl	800c5dc <ucdr_serialize_uint8_t>
 8015a26:	b130      	cbz	r0, 8015a36 <uxr_serialize_ActivityInfoVariant+0x1e>
 8015a28:	782b      	ldrb	r3, [r5, #0]
 8015a2a:	2b06      	cmp	r3, #6
 8015a2c:	d014      	beq.n	8015a58 <uxr_serialize_ActivityInfoVariant+0x40>
 8015a2e:	2b0d      	cmp	r3, #13
 8015a30:	d019      	beq.n	8015a66 <uxr_serialize_ActivityInfoVariant+0x4e>
 8015a32:	2b05      	cmp	r3, #5
 8015a34:	d001      	beq.n	8015a3a <uxr_serialize_ActivityInfoVariant+0x22>
 8015a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a3a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8015a3e:	4630      	mov	r0, r6
 8015a40:	f7f7 faf4 	bl	800d02c <ucdr_serialize_int16_t>
 8015a44:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8015a48:	4604      	mov	r4, r0
 8015a4a:	4630      	mov	r0, r6
 8015a4c:	f7f7 fa26 	bl	800ce9c <ucdr_serialize_uint64_t>
 8015a50:	4020      	ands	r0, r4
 8015a52:	b2c0      	uxtb	r0, r0
 8015a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a58:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8015a5c:	4630      	mov	r0, r6
 8015a5e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a62:	f7f7 bae3 	b.w	800d02c <ucdr_serialize_int16_t>
 8015a66:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8015a6a:	4630      	mov	r0, r6
 8015a6c:	f7f7 fade 	bl	800d02c <ucdr_serialize_int16_t>
 8015a70:	68e9      	ldr	r1, [r5, #12]
 8015a72:	4681      	mov	r9, r0
 8015a74:	4630      	mov	r0, r6
 8015a76:	f7f6 ffcd 	bl	800ca14 <ucdr_serialize_uint32_t>
 8015a7a:	68eb      	ldr	r3, [r5, #12]
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d051      	beq.n	8015b24 <uxr_serialize_ActivityInfoVariant+0x10c>
 8015a80:	b1e8      	cbz	r0, 8015abe <uxr_serialize_ActivityInfoVariant+0xa6>
 8015a82:	f105 0714 	add.w	r7, r5, #20
 8015a86:	f04f 0800 	mov.w	r8, #0
 8015a8a:	f817 1c04 	ldrb.w	r1, [r7, #-4]
 8015a8e:	4630      	mov	r0, r6
 8015a90:	f7f6 fda4 	bl	800c5dc <ucdr_serialize_uint8_t>
 8015a94:	b198      	cbz	r0, 8015abe <uxr_serialize_ActivityInfoVariant+0xa6>
 8015a96:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8015a9a:	2b03      	cmp	r3, #3
 8015a9c:	d839      	bhi.n	8015b12 <uxr_serialize_ActivityInfoVariant+0xfa>
 8015a9e:	e8df f003 	tbb	[pc, r3]
 8015aa2:	1e2b      	.short	0x1e2b
 8015aa4:	0211      	.short	0x0211
 8015aa6:	6839      	ldr	r1, [r7, #0]
 8015aa8:	4630      	mov	r0, r6
 8015aaa:	f005 fc03 	bl	801b2b4 <ucdr_serialize_string>
 8015aae:	68eb      	ldr	r3, [r5, #12]
 8015ab0:	f108 0801 	add.w	r8, r8, #1
 8015ab4:	4598      	cmp	r8, r3
 8015ab6:	d231      	bcs.n	8015b1c <uxr_serialize_ActivityInfoVariant+0x104>
 8015ab8:	3718      	adds	r7, #24
 8015aba:	2800      	cmp	r0, #0
 8015abc:	d1e5      	bne.n	8015a8a <uxr_serialize_ActivityInfoVariant+0x72>
 8015abe:	2000      	movs	r0, #0
 8015ac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ac4:	2210      	movs	r2, #16
 8015ac6:	4639      	mov	r1, r7
 8015ac8:	4630      	mov	r0, r6
 8015aca:	f7fc fd83 	bl	80125d4 <ucdr_serialize_array_uint8_t>
 8015ace:	6939      	ldr	r1, [r7, #16]
 8015ad0:	4604      	mov	r4, r0
 8015ad2:	4630      	mov	r0, r6
 8015ad4:	f7f6 ff9e 	bl	800ca14 <ucdr_serialize_uint32_t>
 8015ad8:	4020      	ands	r0, r4
 8015ada:	b2c0      	uxtb	r0, r0
 8015adc:	e7e7      	b.n	8015aae <uxr_serialize_ActivityInfoVariant+0x96>
 8015ade:	2204      	movs	r2, #4
 8015ae0:	4639      	mov	r1, r7
 8015ae2:	4630      	mov	r0, r6
 8015ae4:	f7fc fd76 	bl	80125d4 <ucdr_serialize_array_uint8_t>
 8015ae8:	88b9      	ldrh	r1, [r7, #4]
 8015aea:	4604      	mov	r4, r0
 8015aec:	4630      	mov	r0, r6
 8015aee:	f7f6 fda1 	bl	800c634 <ucdr_serialize_uint16_t>
 8015af2:	4020      	ands	r0, r4
 8015af4:	b2c0      	uxtb	r0, r0
 8015af6:	e7da      	b.n	8015aae <uxr_serialize_ActivityInfoVariant+0x96>
 8015af8:	2202      	movs	r2, #2
 8015afa:	4639      	mov	r1, r7
 8015afc:	4630      	mov	r0, r6
 8015afe:	f7fc fd69 	bl	80125d4 <ucdr_serialize_array_uint8_t>
 8015b02:	78b9      	ldrb	r1, [r7, #2]
 8015b04:	4604      	mov	r4, r0
 8015b06:	4630      	mov	r0, r6
 8015b08:	f7f6 fd68 	bl	800c5dc <ucdr_serialize_uint8_t>
 8015b0c:	4020      	ands	r0, r4
 8015b0e:	b2c0      	uxtb	r0, r0
 8015b10:	e7cd      	b.n	8015aae <uxr_serialize_ActivityInfoVariant+0x96>
 8015b12:	68eb      	ldr	r3, [r5, #12]
 8015b14:	f108 0801 	add.w	r8, r8, #1
 8015b18:	4598      	cmp	r8, r3
 8015b1a:	d308      	bcc.n	8015b2e <uxr_serialize_ActivityInfoVariant+0x116>
 8015b1c:	ea09 0000 	and.w	r0, r9, r0
 8015b20:	b2c0      	uxtb	r0, r0
 8015b22:	e788      	b.n	8015a36 <uxr_serialize_ActivityInfoVariant+0x1e>
 8015b24:	ea09 0900 	and.w	r9, r9, r0
 8015b28:	fa5f f089 	uxtb.w	r0, r9
 8015b2c:	e783      	b.n	8015a36 <uxr_serialize_ActivityInfoVariant+0x1e>
 8015b2e:	3718      	adds	r7, #24
 8015b30:	e7ab      	b.n	8015a8a <uxr_serialize_ActivityInfoVariant+0x72>
 8015b32:	bf00      	nop

08015b34 <uxr_deserialize_BaseObjectReply>:
 8015b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b38:	2202      	movs	r2, #2
 8015b3a:	4606      	mov	r6, r0
 8015b3c:	460f      	mov	r7, r1
 8015b3e:	f7fc fdad 	bl	801269c <ucdr_deserialize_array_uint8_t>
 8015b42:	2202      	movs	r2, #2
 8015b44:	18b9      	adds	r1, r7, r2
 8015b46:	4605      	mov	r5, r0
 8015b48:	4630      	mov	r0, r6
 8015b4a:	f7fc fda7 	bl	801269c <ucdr_deserialize_array_uint8_t>
 8015b4e:	1d39      	adds	r1, r7, #4
 8015b50:	4680      	mov	r8, r0
 8015b52:	4630      	mov	r0, r6
 8015b54:	f7f6 fd58 	bl	800c608 <ucdr_deserialize_uint8_t>
 8015b58:	1d79      	adds	r1, r7, #5
 8015b5a:	4604      	mov	r4, r0
 8015b5c:	4630      	mov	r0, r6
 8015b5e:	f7f6 fd53 	bl	800c608 <ucdr_deserialize_uint8_t>
 8015b62:	ea05 0508 	and.w	r5, r5, r8
 8015b66:	402c      	ands	r4, r5
 8015b68:	4020      	ands	r0, r4
 8015b6a:	b2c0      	uxtb	r0, r0
 8015b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015b70 <uxr_serialize_ReadSpecification>:
 8015b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b74:	460d      	mov	r5, r1
 8015b76:	7809      	ldrb	r1, [r1, #0]
 8015b78:	4606      	mov	r6, r0
 8015b7a:	f7f6 fd2f 	bl	800c5dc <ucdr_serialize_uint8_t>
 8015b7e:	7869      	ldrb	r1, [r5, #1]
 8015b80:	4604      	mov	r4, r0
 8015b82:	4630      	mov	r0, r6
 8015b84:	f7f6 fd2a 	bl	800c5dc <ucdr_serialize_uint8_t>
 8015b88:	78a9      	ldrb	r1, [r5, #2]
 8015b8a:	4004      	ands	r4, r0
 8015b8c:	4630      	mov	r0, r6
 8015b8e:	f7f6 fcf7 	bl	800c580 <ucdr_serialize_bool>
 8015b92:	78ab      	ldrb	r3, [r5, #2]
 8015b94:	b2e4      	uxtb	r4, r4
 8015b96:	4004      	ands	r4, r0
 8015b98:	b94b      	cbnz	r3, 8015bae <uxr_serialize_ReadSpecification+0x3e>
 8015b9a:	7a29      	ldrb	r1, [r5, #8]
 8015b9c:	4630      	mov	r0, r6
 8015b9e:	f7f6 fcef 	bl	800c580 <ucdr_serialize_bool>
 8015ba2:	7a2b      	ldrb	r3, [r5, #8]
 8015ba4:	4004      	ands	r4, r0
 8015ba6:	b943      	cbnz	r3, 8015bba <uxr_serialize_ReadSpecification+0x4a>
 8015ba8:	4620      	mov	r0, r4
 8015baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015bae:	6869      	ldr	r1, [r5, #4]
 8015bb0:	4630      	mov	r0, r6
 8015bb2:	f005 fb7f 	bl	801b2b4 <ucdr_serialize_string>
 8015bb6:	4004      	ands	r4, r0
 8015bb8:	e7ef      	b.n	8015b9a <uxr_serialize_ReadSpecification+0x2a>
 8015bba:	8969      	ldrh	r1, [r5, #10]
 8015bbc:	4630      	mov	r0, r6
 8015bbe:	f7f6 fd39 	bl	800c634 <ucdr_serialize_uint16_t>
 8015bc2:	89a9      	ldrh	r1, [r5, #12]
 8015bc4:	4607      	mov	r7, r0
 8015bc6:	4630      	mov	r0, r6
 8015bc8:	f7f6 fd34 	bl	800c634 <ucdr_serialize_uint16_t>
 8015bcc:	89e9      	ldrh	r1, [r5, #14]
 8015bce:	4007      	ands	r7, r0
 8015bd0:	4630      	mov	r0, r6
 8015bd2:	f7f6 fd2f 	bl	800c634 <ucdr_serialize_uint16_t>
 8015bd6:	8a29      	ldrh	r1, [r5, #16]
 8015bd8:	4680      	mov	r8, r0
 8015bda:	4630      	mov	r0, r6
 8015bdc:	f7f6 fd2a 	bl	800c634 <ucdr_serialize_uint16_t>
 8015be0:	b2ff      	uxtb	r7, r7
 8015be2:	ea04 0507 	and.w	r5, r4, r7
 8015be6:	ea05 0508 	and.w	r5, r5, r8
 8015bea:	ea00 0405 	and.w	r4, r0, r5
 8015bee:	4620      	mov	r0, r4
 8015bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015bf4 <uxr_serialize_CREATE_CLIENT_Payload>:
 8015bf4:	f7ff baf8 	b.w	80151e8 <uxr_serialize_CLIENT_Representation>

08015bf8 <uxr_serialize_CREATE_Payload>:
 8015bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bfa:	2202      	movs	r2, #2
 8015bfc:	4606      	mov	r6, r0
 8015bfe:	460d      	mov	r5, r1
 8015c00:	f7fc fce8 	bl	80125d4 <ucdr_serialize_array_uint8_t>
 8015c04:	2202      	movs	r2, #2
 8015c06:	18a9      	adds	r1, r5, r2
 8015c08:	4604      	mov	r4, r0
 8015c0a:	4630      	mov	r0, r6
 8015c0c:	f7fc fce2 	bl	80125d4 <ucdr_serialize_array_uint8_t>
 8015c10:	7929      	ldrb	r1, [r5, #4]
 8015c12:	4607      	mov	r7, r0
 8015c14:	4630      	mov	r0, r6
 8015c16:	f7f6 fce1 	bl	800c5dc <ucdr_serialize_uint8_t>
 8015c1a:	b170      	cbz	r0, 8015c3a <uxr_serialize_CREATE_Payload+0x42>
 8015c1c:	792b      	ldrb	r3, [r5, #4]
 8015c1e:	403c      	ands	r4, r7
 8015c20:	3b01      	subs	r3, #1
 8015c22:	b2e4      	uxtb	r4, r4
 8015c24:	2b0d      	cmp	r3, #13
 8015c26:	d809      	bhi.n	8015c3c <uxr_serialize_CREATE_Payload+0x44>
 8015c28:	e8df f003 	tbb	[pc, r3]
 8015c2c:	23230a3e 	.word	0x23230a3e
 8015c30:	0a0a0a0a 	.word	0x0a0a0a0a
 8015c34:	12121208 	.word	0x12121208
 8015c38:	5f58      	.short	0x5f58
 8015c3a:	2400      	movs	r4, #0
 8015c3c:	4620      	mov	r0, r4
 8015c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c40:	f105 0108 	add.w	r1, r5, #8
 8015c44:	4630      	mov	r0, r6
 8015c46:	f7ff fbd7 	bl	80153f8 <uxr_serialize_DATAWRITER_Representation>
 8015c4a:	4004      	ands	r4, r0
 8015c4c:	4620      	mov	r0, r4
 8015c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c50:	7a29      	ldrb	r1, [r5, #8]
 8015c52:	4630      	mov	r0, r6
 8015c54:	f7f6 fcc2 	bl	800c5dc <ucdr_serialize_uint8_t>
 8015c58:	2800      	cmp	r0, #0
 8015c5a:	d0ee      	beq.n	8015c3a <uxr_serialize_CREATE_Payload+0x42>
 8015c5c:	7a2b      	ldrb	r3, [r5, #8]
 8015c5e:	2b01      	cmp	r3, #1
 8015c60:	d001      	beq.n	8015c66 <uxr_serialize_CREATE_Payload+0x6e>
 8015c62:	2b02      	cmp	r3, #2
 8015c64:	d1ea      	bne.n	8015c3c <uxr_serialize_CREATE_Payload+0x44>
 8015c66:	68e9      	ldr	r1, [r5, #12]
 8015c68:	4630      	mov	r0, r6
 8015c6a:	f005 fb23 	bl	801b2b4 <ucdr_serialize_string>
 8015c6e:	4004      	ands	r4, r0
 8015c70:	e7e4      	b.n	8015c3c <uxr_serialize_CREATE_Payload+0x44>
 8015c72:	7a29      	ldrb	r1, [r5, #8]
 8015c74:	4630      	mov	r0, r6
 8015c76:	f7f6 fcb1 	bl	800c5dc <ucdr_serialize_uint8_t>
 8015c7a:	4607      	mov	r7, r0
 8015c7c:	b158      	cbz	r0, 8015c96 <uxr_serialize_CREATE_Payload+0x9e>
 8015c7e:	7a2b      	ldrb	r3, [r5, #8]
 8015c80:	2b02      	cmp	r3, #2
 8015c82:	d039      	beq.n	8015cf8 <uxr_serialize_CREATE_Payload+0x100>
 8015c84:	2b03      	cmp	r3, #3
 8015c86:	d106      	bne.n	8015c96 <uxr_serialize_CREATE_Payload+0x9e>
 8015c88:	68ea      	ldr	r2, [r5, #12]
 8015c8a:	f105 0110 	add.w	r1, r5, #16
 8015c8e:	4630      	mov	r0, r6
 8015c90:	f7fc fe40 	bl	8012914 <ucdr_serialize_sequence_uint8_t>
 8015c94:	4607      	mov	r7, r0
 8015c96:	2202      	movs	r2, #2
 8015c98:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 8015c9c:	4630      	mov	r0, r6
 8015c9e:	f7fc fc99 	bl	80125d4 <ucdr_serialize_array_uint8_t>
 8015ca2:	4038      	ands	r0, r7
 8015ca4:	4004      	ands	r4, r0
 8015ca6:	e7c9      	b.n	8015c3c <uxr_serialize_CREATE_Payload+0x44>
 8015ca8:	7a29      	ldrb	r1, [r5, #8]
 8015caa:	4630      	mov	r0, r6
 8015cac:	f7f6 fc96 	bl	800c5dc <ucdr_serialize_uint8_t>
 8015cb0:	4607      	mov	r7, r0
 8015cb2:	b158      	cbz	r0, 8015ccc <uxr_serialize_CREATE_Payload+0xd4>
 8015cb4:	7a2b      	ldrb	r3, [r5, #8]
 8015cb6:	2b02      	cmp	r3, #2
 8015cb8:	d003      	beq.n	8015cc2 <uxr_serialize_CREATE_Payload+0xca>
 8015cba:	2b03      	cmp	r3, #3
 8015cbc:	d022      	beq.n	8015d04 <uxr_serialize_CREATE_Payload+0x10c>
 8015cbe:	2b01      	cmp	r3, #1
 8015cc0:	d104      	bne.n	8015ccc <uxr_serialize_CREATE_Payload+0xd4>
 8015cc2:	68e9      	ldr	r1, [r5, #12]
 8015cc4:	4630      	mov	r0, r6
 8015cc6:	f005 faf5 	bl	801b2b4 <ucdr_serialize_string>
 8015cca:	4607      	mov	r7, r0
 8015ccc:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 8015cd0:	4630      	mov	r0, r6
 8015cd2:	f7f7 f9ab 	bl	800d02c <ucdr_serialize_int16_t>
 8015cd6:	4038      	ands	r0, r7
 8015cd8:	4004      	ands	r4, r0
 8015cda:	e7af      	b.n	8015c3c <uxr_serialize_CREATE_Payload+0x44>
 8015cdc:	f105 0108 	add.w	r1, r5, #8
 8015ce0:	4630      	mov	r0, r6
 8015ce2:	f7ff fb3f 	bl	8015364 <uxr_serialize_AGENT_Representation>
 8015ce6:	4004      	ands	r4, r0
 8015ce8:	e7a8      	b.n	8015c3c <uxr_serialize_CREATE_Payload+0x44>
 8015cea:	f105 0108 	add.w	r1, r5, #8
 8015cee:	4630      	mov	r0, r6
 8015cf0:	f7ff fa7a 	bl	80151e8 <uxr_serialize_CLIENT_Representation>
 8015cf4:	4004      	ands	r4, r0
 8015cf6:	e7a1      	b.n	8015c3c <uxr_serialize_CREATE_Payload+0x44>
 8015cf8:	68e9      	ldr	r1, [r5, #12]
 8015cfa:	4630      	mov	r0, r6
 8015cfc:	f005 fada 	bl	801b2b4 <ucdr_serialize_string>
 8015d00:	4607      	mov	r7, r0
 8015d02:	e7c8      	b.n	8015c96 <uxr_serialize_CREATE_Payload+0x9e>
 8015d04:	68ea      	ldr	r2, [r5, #12]
 8015d06:	f105 0110 	add.w	r1, r5, #16
 8015d0a:	4630      	mov	r0, r6
 8015d0c:	f7fc fe02 	bl	8012914 <ucdr_serialize_sequence_uint8_t>
 8015d10:	4607      	mov	r7, r0
 8015d12:	e7db      	b.n	8015ccc <uxr_serialize_CREATE_Payload+0xd4>

08015d14 <uxr_deserialize_GET_INFO_Payload>:
 8015d14:	b570      	push	{r4, r5, r6, lr}
 8015d16:	2202      	movs	r2, #2
 8015d18:	4605      	mov	r5, r0
 8015d1a:	460e      	mov	r6, r1
 8015d1c:	f7fc fcbe 	bl	801269c <ucdr_deserialize_array_uint8_t>
 8015d20:	2202      	movs	r2, #2
 8015d22:	18b1      	adds	r1, r6, r2
 8015d24:	4604      	mov	r4, r0
 8015d26:	4628      	mov	r0, r5
 8015d28:	f7fc fcb8 	bl	801269c <ucdr_deserialize_array_uint8_t>
 8015d2c:	1d31      	adds	r1, r6, #4
 8015d2e:	4004      	ands	r4, r0
 8015d30:	4628      	mov	r0, r5
 8015d32:	f7f6 ff99 	bl	800cc68 <ucdr_deserialize_uint32_t>
 8015d36:	b2e4      	uxtb	r4, r4
 8015d38:	4020      	ands	r0, r4
 8015d3a:	bd70      	pop	{r4, r5, r6, pc}

08015d3c <uxr_serialize_DELETE_Payload>:
 8015d3c:	b570      	push	{r4, r5, r6, lr}
 8015d3e:	2202      	movs	r2, #2
 8015d40:	4605      	mov	r5, r0
 8015d42:	460e      	mov	r6, r1
 8015d44:	f7fc fc46 	bl	80125d4 <ucdr_serialize_array_uint8_t>
 8015d48:	2202      	movs	r2, #2
 8015d4a:	4604      	mov	r4, r0
 8015d4c:	18b1      	adds	r1, r6, r2
 8015d4e:	4628      	mov	r0, r5
 8015d50:	f7fc fc40 	bl	80125d4 <ucdr_serialize_array_uint8_t>
 8015d54:	4020      	ands	r0, r4
 8015d56:	b2c0      	uxtb	r0, r0
 8015d58:	bd70      	pop	{r4, r5, r6, pc}
 8015d5a:	bf00      	nop

08015d5c <uxr_deserialize_STATUS_AGENT_Payload>:
 8015d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d60:	4605      	mov	r5, r0
 8015d62:	460e      	mov	r6, r1
 8015d64:	f7f6 fc50 	bl	800c608 <ucdr_deserialize_uint8_t>
 8015d68:	1c71      	adds	r1, r6, #1
 8015d6a:	4604      	mov	r4, r0
 8015d6c:	4628      	mov	r0, r5
 8015d6e:	f7f6 fc4b 	bl	800c608 <ucdr_deserialize_uint8_t>
 8015d72:	2204      	movs	r2, #4
 8015d74:	18b1      	adds	r1, r6, r2
 8015d76:	4681      	mov	r9, r0
 8015d78:	4628      	mov	r0, r5
 8015d7a:	f7fc fc8f 	bl	801269c <ucdr_deserialize_array_uint8_t>
 8015d7e:	f106 0108 	add.w	r1, r6, #8
 8015d82:	4680      	mov	r8, r0
 8015d84:	2202      	movs	r2, #2
 8015d86:	4628      	mov	r0, r5
 8015d88:	f7fc fc88 	bl	801269c <ucdr_deserialize_array_uint8_t>
 8015d8c:	2202      	movs	r2, #2
 8015d8e:	f106 010a 	add.w	r1, r6, #10
 8015d92:	4607      	mov	r7, r0
 8015d94:	4628      	mov	r0, r5
 8015d96:	f7fc fc81 	bl	801269c <ucdr_deserialize_array_uint8_t>
 8015d9a:	ea04 0409 	and.w	r4, r4, r9
 8015d9e:	4603      	mov	r3, r0
 8015da0:	f106 010c 	add.w	r1, r6, #12
 8015da4:	4628      	mov	r0, r5
 8015da6:	b2e4      	uxtb	r4, r4
 8015da8:	461d      	mov	r5, r3
 8015daa:	ea04 0408 	and.w	r4, r4, r8
 8015dae:	f7f6 fbfd 	bl	800c5ac <ucdr_deserialize_bool>
 8015db2:	4027      	ands	r7, r4
 8015db4:	403d      	ands	r5, r7
 8015db6:	4028      	ands	r0, r5
 8015db8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08015dbc <uxr_deserialize_STATUS_Payload>:
 8015dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dc0:	2202      	movs	r2, #2
 8015dc2:	4606      	mov	r6, r0
 8015dc4:	460f      	mov	r7, r1
 8015dc6:	f7fc fc69 	bl	801269c <ucdr_deserialize_array_uint8_t>
 8015dca:	2202      	movs	r2, #2
 8015dcc:	18b9      	adds	r1, r7, r2
 8015dce:	4605      	mov	r5, r0
 8015dd0:	4630      	mov	r0, r6
 8015dd2:	f7fc fc63 	bl	801269c <ucdr_deserialize_array_uint8_t>
 8015dd6:	1d39      	adds	r1, r7, #4
 8015dd8:	4680      	mov	r8, r0
 8015dda:	4630      	mov	r0, r6
 8015ddc:	f7f6 fc14 	bl	800c608 <ucdr_deserialize_uint8_t>
 8015de0:	1d79      	adds	r1, r7, #5
 8015de2:	4604      	mov	r4, r0
 8015de4:	4630      	mov	r0, r6
 8015de6:	f7f6 fc0f 	bl	800c608 <ucdr_deserialize_uint8_t>
 8015dea:	ea05 0508 	and.w	r5, r5, r8
 8015dee:	402c      	ands	r4, r5
 8015df0:	4020      	ands	r0, r4
 8015df2:	b2c0      	uxtb	r0, r0
 8015df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015df8 <uxr_serialize_INFO_Payload>:
 8015df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dfc:	2202      	movs	r2, #2
 8015dfe:	460c      	mov	r4, r1
 8015e00:	4605      	mov	r5, r0
 8015e02:	f7fc fbe7 	bl	80125d4 <ucdr_serialize_array_uint8_t>
 8015e06:	2202      	movs	r2, #2
 8015e08:	18a1      	adds	r1, r4, r2
 8015e0a:	4680      	mov	r8, r0
 8015e0c:	4628      	mov	r0, r5
 8015e0e:	f7fc fbe1 	bl	80125d4 <ucdr_serialize_array_uint8_t>
 8015e12:	7921      	ldrb	r1, [r4, #4]
 8015e14:	4607      	mov	r7, r0
 8015e16:	4628      	mov	r0, r5
 8015e18:	f7f6 fbe0 	bl	800c5dc <ucdr_serialize_uint8_t>
 8015e1c:	7961      	ldrb	r1, [r4, #5]
 8015e1e:	4606      	mov	r6, r0
 8015e20:	4628      	mov	r0, r5
 8015e22:	f7f6 fbdb 	bl	800c5dc <ucdr_serialize_uint8_t>
 8015e26:	ea08 0807 	and.w	r8, r8, r7
 8015e2a:	ea06 0608 	and.w	r6, r6, r8
 8015e2e:	ea00 0706 	and.w	r7, r0, r6
 8015e32:	7a21      	ldrb	r1, [r4, #8]
 8015e34:	4628      	mov	r0, r5
 8015e36:	f7f6 fba3 	bl	800c580 <ucdr_serialize_bool>
 8015e3a:	7a23      	ldrb	r3, [r4, #8]
 8015e3c:	b2ff      	uxtb	r7, r7
 8015e3e:	4606      	mov	r6, r0
 8015e40:	b96b      	cbnz	r3, 8015e5e <uxr_serialize_INFO_Payload+0x66>
 8015e42:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8015e46:	4628      	mov	r0, r5
 8015e48:	f7f6 fb9a 	bl	800c580 <ucdr_serialize_bool>
 8015e4c:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8015e50:	4030      	ands	r0, r6
 8015e52:	b2c6      	uxtb	r6, r0
 8015e54:	b983      	cbnz	r3, 8015e78 <uxr_serialize_INFO_Payload+0x80>
 8015e56:	ea06 0007 	and.w	r0, r6, r7
 8015e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e5e:	7b21      	ldrb	r1, [r4, #12]
 8015e60:	4628      	mov	r0, r5
 8015e62:	f7f6 fbbb 	bl	800c5dc <ucdr_serialize_uint8_t>
 8015e66:	b188      	cbz	r0, 8015e8c <uxr_serialize_INFO_Payload+0x94>
 8015e68:	f104 010c 	add.w	r1, r4, #12
 8015e6c:	4628      	mov	r0, r5
 8015e6e:	f7ff faeb 	bl	8015448 <uxr_serialize_ObjectVariant.part.0>
 8015e72:	4030      	ands	r0, r6
 8015e74:	b2c6      	uxtb	r6, r0
 8015e76:	e7e4      	b.n	8015e42 <uxr_serialize_INFO_Payload+0x4a>
 8015e78:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8015e7c:	4628      	mov	r0, r5
 8015e7e:	f7ff fdcb 	bl	8015a18 <uxr_serialize_ActivityInfoVariant>
 8015e82:	4006      	ands	r6, r0
 8015e84:	ea06 0007 	and.w	r0, r6, r7
 8015e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e8c:	4606      	mov	r6, r0
 8015e8e:	e7d8      	b.n	8015e42 <uxr_serialize_INFO_Payload+0x4a>

08015e90 <uxr_serialize_READ_DATA_Payload>:
 8015e90:	b570      	push	{r4, r5, r6, lr}
 8015e92:	2202      	movs	r2, #2
 8015e94:	4605      	mov	r5, r0
 8015e96:	460e      	mov	r6, r1
 8015e98:	f7fc fb9c 	bl	80125d4 <ucdr_serialize_array_uint8_t>
 8015e9c:	2202      	movs	r2, #2
 8015e9e:	18b1      	adds	r1, r6, r2
 8015ea0:	4604      	mov	r4, r0
 8015ea2:	4628      	mov	r0, r5
 8015ea4:	f7fc fb96 	bl	80125d4 <ucdr_serialize_array_uint8_t>
 8015ea8:	1d31      	adds	r1, r6, #4
 8015eaa:	4004      	ands	r4, r0
 8015eac:	4628      	mov	r0, r5
 8015eae:	f7ff fe5f 	bl	8015b70 <uxr_serialize_ReadSpecification>
 8015eb2:	b2e4      	uxtb	r4, r4
 8015eb4:	4020      	ands	r0, r4
 8015eb6:	bd70      	pop	{r4, r5, r6, pc}

08015eb8 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8015eb8:	b570      	push	{r4, r5, r6, lr}
 8015eba:	2202      	movs	r2, #2
 8015ebc:	4605      	mov	r5, r0
 8015ebe:	460e      	mov	r6, r1
 8015ec0:	f7fc fb88 	bl	80125d4 <ucdr_serialize_array_uint8_t>
 8015ec4:	2202      	movs	r2, #2
 8015ec6:	4604      	mov	r4, r0
 8015ec8:	18b1      	adds	r1, r6, r2
 8015eca:	4628      	mov	r0, r5
 8015ecc:	f7fc fb82 	bl	80125d4 <ucdr_serialize_array_uint8_t>
 8015ed0:	4020      	ands	r0, r4
 8015ed2:	b2c0      	uxtb	r0, r0
 8015ed4:	bd70      	pop	{r4, r5, r6, pc}
 8015ed6:	bf00      	nop

08015ed8 <uxr_serialize_ACKNACK_Payload>:
 8015ed8:	b570      	push	{r4, r5, r6, lr}
 8015eda:	460c      	mov	r4, r1
 8015edc:	460e      	mov	r6, r1
 8015ede:	f834 1b02 	ldrh.w	r1, [r4], #2
 8015ee2:	4605      	mov	r5, r0
 8015ee4:	f7f6 fba6 	bl	800c634 <ucdr_serialize_uint16_t>
 8015ee8:	2202      	movs	r2, #2
 8015eea:	4621      	mov	r1, r4
 8015eec:	4604      	mov	r4, r0
 8015eee:	4628      	mov	r0, r5
 8015ef0:	f7fc fb70 	bl	80125d4 <ucdr_serialize_array_uint8_t>
 8015ef4:	7931      	ldrb	r1, [r6, #4]
 8015ef6:	4004      	ands	r4, r0
 8015ef8:	4628      	mov	r0, r5
 8015efa:	f7f6 fb6f 	bl	800c5dc <ucdr_serialize_uint8_t>
 8015efe:	b2e4      	uxtb	r4, r4
 8015f00:	4020      	ands	r0, r4
 8015f02:	bd70      	pop	{r4, r5, r6, pc}

08015f04 <uxr_deserialize_ACKNACK_Payload>:
 8015f04:	b570      	push	{r4, r5, r6, lr}
 8015f06:	4605      	mov	r5, r0
 8015f08:	460e      	mov	r6, r1
 8015f0a:	f7f6 fc97 	bl	800c83c <ucdr_deserialize_uint16_t>
 8015f0e:	2202      	movs	r2, #2
 8015f10:	18b1      	adds	r1, r6, r2
 8015f12:	4604      	mov	r4, r0
 8015f14:	4628      	mov	r0, r5
 8015f16:	f7fc fbc1 	bl	801269c <ucdr_deserialize_array_uint8_t>
 8015f1a:	1d31      	adds	r1, r6, #4
 8015f1c:	4004      	ands	r4, r0
 8015f1e:	4628      	mov	r0, r5
 8015f20:	f7f6 fb72 	bl	800c608 <ucdr_deserialize_uint8_t>
 8015f24:	b2e4      	uxtb	r4, r4
 8015f26:	4020      	ands	r0, r4
 8015f28:	bd70      	pop	{r4, r5, r6, pc}
 8015f2a:	bf00      	nop

08015f2c <uxr_serialize_HEARTBEAT_Payload>:
 8015f2c:	b570      	push	{r4, r5, r6, lr}
 8015f2e:	460d      	mov	r5, r1
 8015f30:	8809      	ldrh	r1, [r1, #0]
 8015f32:	4606      	mov	r6, r0
 8015f34:	f7f6 fb7e 	bl	800c634 <ucdr_serialize_uint16_t>
 8015f38:	8869      	ldrh	r1, [r5, #2]
 8015f3a:	4604      	mov	r4, r0
 8015f3c:	4630      	mov	r0, r6
 8015f3e:	f7f6 fb79 	bl	800c634 <ucdr_serialize_uint16_t>
 8015f42:	7929      	ldrb	r1, [r5, #4]
 8015f44:	4004      	ands	r4, r0
 8015f46:	4630      	mov	r0, r6
 8015f48:	f7f6 fb48 	bl	800c5dc <ucdr_serialize_uint8_t>
 8015f4c:	b2e4      	uxtb	r4, r4
 8015f4e:	4020      	ands	r0, r4
 8015f50:	bd70      	pop	{r4, r5, r6, pc}
 8015f52:	bf00      	nop

08015f54 <uxr_deserialize_HEARTBEAT_Payload>:
 8015f54:	b570      	push	{r4, r5, r6, lr}
 8015f56:	4605      	mov	r5, r0
 8015f58:	460e      	mov	r6, r1
 8015f5a:	f7f6 fc6f 	bl	800c83c <ucdr_deserialize_uint16_t>
 8015f5e:	1cb1      	adds	r1, r6, #2
 8015f60:	4604      	mov	r4, r0
 8015f62:	4628      	mov	r0, r5
 8015f64:	f7f6 fc6a 	bl	800c83c <ucdr_deserialize_uint16_t>
 8015f68:	1d31      	adds	r1, r6, #4
 8015f6a:	4004      	ands	r4, r0
 8015f6c:	4628      	mov	r0, r5
 8015f6e:	f7f6 fb4b 	bl	800c608 <ucdr_deserialize_uint8_t>
 8015f72:	b2e4      	uxtb	r4, r4
 8015f74:	4020      	ands	r0, r4
 8015f76:	bd70      	pop	{r4, r5, r6, pc}

08015f78 <uxr_serialize_TIMESTAMP_Payload>:
 8015f78:	b570      	push	{r4, r5, r6, lr}
 8015f7a:	460d      	mov	r5, r1
 8015f7c:	6809      	ldr	r1, [r1, #0]
 8015f7e:	4606      	mov	r6, r0
 8015f80:	f7f7 f95a 	bl	800d238 <ucdr_serialize_int32_t>
 8015f84:	6869      	ldr	r1, [r5, #4]
 8015f86:	4604      	mov	r4, r0
 8015f88:	4630      	mov	r0, r6
 8015f8a:	f7f6 fd43 	bl	800ca14 <ucdr_serialize_uint32_t>
 8015f8e:	4020      	ands	r0, r4
 8015f90:	b2c0      	uxtb	r0, r0
 8015f92:	bd70      	pop	{r4, r5, r6, pc}

08015f94 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8015f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f98:	4605      	mov	r5, r0
 8015f9a:	460e      	mov	r6, r1
 8015f9c:	f7f7 f9e6 	bl	800d36c <ucdr_deserialize_int32_t>
 8015fa0:	1d31      	adds	r1, r6, #4
 8015fa2:	4607      	mov	r7, r0
 8015fa4:	4628      	mov	r0, r5
 8015fa6:	f7f6 fe5f 	bl	800cc68 <ucdr_deserialize_uint32_t>
 8015faa:	f106 0108 	add.w	r1, r6, #8
 8015fae:	4680      	mov	r8, r0
 8015fb0:	4628      	mov	r0, r5
 8015fb2:	f7f7 f9db 	bl	800d36c <ucdr_deserialize_int32_t>
 8015fb6:	f106 010c 	add.w	r1, r6, #12
 8015fba:	4604      	mov	r4, r0
 8015fbc:	4628      	mov	r0, r5
 8015fbe:	f7f6 fe53 	bl	800cc68 <ucdr_deserialize_uint32_t>
 8015fc2:	ea07 0708 	and.w	r7, r7, r8
 8015fc6:	403c      	ands	r4, r7
 8015fc8:	f106 0110 	add.w	r1, r6, #16
 8015fcc:	4004      	ands	r4, r0
 8015fce:	4628      	mov	r0, r5
 8015fd0:	f7f7 f9cc 	bl	800d36c <ucdr_deserialize_int32_t>
 8015fd4:	f106 0114 	add.w	r1, r6, #20
 8015fd8:	4607      	mov	r7, r0
 8015fda:	4628      	mov	r0, r5
 8015fdc:	f7f6 fe44 	bl	800cc68 <ucdr_deserialize_uint32_t>
 8015fe0:	b2e4      	uxtb	r4, r4
 8015fe2:	403c      	ands	r4, r7
 8015fe4:	4020      	ands	r0, r4
 8015fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fea:	bf00      	nop

08015fec <uxr_serialize_SampleIdentity>:
 8015fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ff0:	220c      	movs	r2, #12
 8015ff2:	4604      	mov	r4, r0
 8015ff4:	460d      	mov	r5, r1
 8015ff6:	f7fc faed 	bl	80125d4 <ucdr_serialize_array_uint8_t>
 8015ffa:	2203      	movs	r2, #3
 8015ffc:	f105 010c 	add.w	r1, r5, #12
 8016000:	4680      	mov	r8, r0
 8016002:	4620      	mov	r0, r4
 8016004:	f7fc fae6 	bl	80125d4 <ucdr_serialize_array_uint8_t>
 8016008:	7be9      	ldrb	r1, [r5, #15]
 801600a:	4681      	mov	r9, r0
 801600c:	4620      	mov	r0, r4
 801600e:	f7f6 fae5 	bl	800c5dc <ucdr_serialize_uint8_t>
 8016012:	6929      	ldr	r1, [r5, #16]
 8016014:	4607      	mov	r7, r0
 8016016:	4620      	mov	r0, r4
 8016018:	f7f7 f90e 	bl	800d238 <ucdr_serialize_int32_t>
 801601c:	6969      	ldr	r1, [r5, #20]
 801601e:	4606      	mov	r6, r0
 8016020:	4620      	mov	r0, r4
 8016022:	f7f6 fcf7 	bl	800ca14 <ucdr_serialize_uint32_t>
 8016026:	ea08 0809 	and.w	r8, r8, r9
 801602a:	ea07 0708 	and.w	r7, r7, r8
 801602e:	403e      	ands	r6, r7
 8016030:	4030      	ands	r0, r6
 8016032:	b2c0      	uxtb	r0, r0
 8016034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016038 <uxr_deserialize_SampleIdentity>:
 8016038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801603c:	220c      	movs	r2, #12
 801603e:	4604      	mov	r4, r0
 8016040:	460d      	mov	r5, r1
 8016042:	f7fc fb2b 	bl	801269c <ucdr_deserialize_array_uint8_t>
 8016046:	2203      	movs	r2, #3
 8016048:	f105 010c 	add.w	r1, r5, #12
 801604c:	4680      	mov	r8, r0
 801604e:	4620      	mov	r0, r4
 8016050:	f7fc fb24 	bl	801269c <ucdr_deserialize_array_uint8_t>
 8016054:	f105 010f 	add.w	r1, r5, #15
 8016058:	4681      	mov	r9, r0
 801605a:	4620      	mov	r0, r4
 801605c:	f7f6 fad4 	bl	800c608 <ucdr_deserialize_uint8_t>
 8016060:	f105 0110 	add.w	r1, r5, #16
 8016064:	4607      	mov	r7, r0
 8016066:	4620      	mov	r0, r4
 8016068:	f7f7 f980 	bl	800d36c <ucdr_deserialize_int32_t>
 801606c:	f105 0114 	add.w	r1, r5, #20
 8016070:	4606      	mov	r6, r0
 8016072:	4620      	mov	r0, r4
 8016074:	f7f6 fdf8 	bl	800cc68 <ucdr_deserialize_uint32_t>
 8016078:	ea08 0809 	and.w	r8, r8, r9
 801607c:	ea07 0708 	and.w	r7, r7, r8
 8016080:	403e      	ands	r6, r7
 8016082:	4030      	ands	r0, r6
 8016084:	b2c0      	uxtb	r0, r0
 8016086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801608a:	bf00      	nop

0801608c <rcl_client_get_rmw_handle>:
 801608c:	b118      	cbz	r0, 8016096 <rcl_client_get_rmw_handle+0xa>
 801608e:	6800      	ldr	r0, [r0, #0]
 8016090:	b108      	cbz	r0, 8016096 <rcl_client_get_rmw_handle+0xa>
 8016092:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016096:	4770      	bx	lr

08016098 <rcl_send_request>:
 8016098:	2800      	cmp	r0, #0
 801609a:	d048      	beq.n	801612e <rcl_send_request+0x96>
 801609c:	b570      	push	{r4, r5, r6, lr}
 801609e:	4604      	mov	r4, r0
 80160a0:	6800      	ldr	r0, [r0, #0]
 80160a2:	b08a      	sub	sp, #40	@ 0x28
 80160a4:	b1c0      	cbz	r0, 80160d8 <rcl_send_request+0x40>
 80160a6:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 80160aa:	b1ab      	cbz	r3, 80160d8 <rcl_send_request+0x40>
 80160ac:	460e      	mov	r6, r1
 80160ae:	b1b9      	cbz	r1, 80160e0 <rcl_send_request+0x48>
 80160b0:	4615      	mov	r5, r2
 80160b2:	b1aa      	cbz	r2, 80160e0 <rcl_send_request+0x48>
 80160b4:	2105      	movs	r1, #5
 80160b6:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80160ba:	f003 f845 	bl	8019148 <__atomic_load_8>
 80160be:	6823      	ldr	r3, [r4, #0]
 80160c0:	e9c5 0100 	strd	r0, r1, [r5]
 80160c4:	462a      	mov	r2, r5
 80160c6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80160ca:	4631      	mov	r1, r6
 80160cc:	f003 ff96 	bl	8019ffc <rmw_send_request>
 80160d0:	b148      	cbz	r0, 80160e6 <rcl_send_request+0x4e>
 80160d2:	2001      	movs	r0, #1
 80160d4:	b00a      	add	sp, #40	@ 0x28
 80160d6:	bd70      	pop	{r4, r5, r6, pc}
 80160d8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80160dc:	b00a      	add	sp, #40	@ 0x28
 80160de:	bd70      	pop	{r4, r5, r6, pc}
 80160e0:	200b      	movs	r0, #11
 80160e2:	b00a      	add	sp, #40	@ 0x28
 80160e4:	bd70      	pop	{r4, r5, r6, pc}
 80160e6:	6820      	ldr	r0, [r4, #0]
 80160e8:	2305      	movs	r3, #5
 80160ea:	9300      	str	r3, [sp, #0]
 80160ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80160f0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80160f4:	f003 f894 	bl	8019220 <__atomic_exchange_8>
 80160f8:	6823      	ldr	r3, [r4, #0]
 80160fa:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 80160fe:	b1a2      	cbz	r2, 801612a <rcl_send_request+0x92>
 8016100:	a905      	add	r1, sp, #20
 8016102:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8016106:	f003 fedf 	bl	8019ec8 <rmw_get_gid_for_client>
 801610a:	4601      	mov	r1, r0
 801610c:	b990      	cbnz	r0, 8016134 <rcl_send_request+0x9c>
 801610e:	6822      	ldr	r2, [r4, #0]
 8016110:	ab06      	add	r3, sp, #24
 8016112:	f8d2 0118 	ldr.w	r0, [r2, #280]	@ 0x118
 8016116:	9302      	str	r3, [sp, #8]
 8016118:	e9d5 4500 	ldrd	r4, r5, [r5]
 801611c:	4632      	mov	r2, r6
 801611e:	e9cd 4500 	strd	r4, r5, [sp]
 8016122:	f000 ff49 	bl	8016fb8 <rcl_send_service_event_message>
 8016126:	2800      	cmp	r0, #0
 8016128:	d1d4      	bne.n	80160d4 <rcl_send_request+0x3c>
 801612a:	2000      	movs	r0, #0
 801612c:	e7d2      	b.n	80160d4 <rcl_send_request+0x3c>
 801612e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8016132:	4770      	bx	lr
 8016134:	f000 f87a 	bl	801622c <rcl_convert_rmw_ret_to_rcl_ret>
 8016138:	e7cc      	b.n	80160d4 <rcl_send_request+0x3c>
 801613a:	bf00      	nop
 801613c:	0000      	movs	r0, r0
	...

08016140 <rcl_take_response>:
 8016140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016142:	468e      	mov	lr, r1
 8016144:	460c      	mov	r4, r1
 8016146:	4617      	mov	r7, r2
 8016148:	4605      	mov	r5, r0
 801614a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801614e:	b095      	sub	sp, #84	@ 0x54
 8016150:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 8016154:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016158:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801615c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016160:	2d00      	cmp	r5, #0
 8016162:	d044      	beq.n	80161ee <rcl_take_response+0xae>
 8016164:	682b      	ldr	r3, [r5, #0]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d041      	beq.n	80161ee <rcl_take_response+0xae>
 801616a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801616e:	2800      	cmp	r0, #0
 8016170:	d03d      	beq.n	80161ee <rcl_take_response+0xae>
 8016172:	2f00      	cmp	r7, #0
 8016174:	d03e      	beq.n	80161f4 <rcl_take_response+0xb4>
 8016176:	ed9f 7b26 	vldr	d7, [pc, #152]	@ 8016210 <rcl_take_response+0xd0>
 801617a:	2300      	movs	r3, #0
 801617c:	f88d 3013 	strb.w	r3, [sp, #19]
 8016180:	463a      	mov	r2, r7
 8016182:	f10d 0313 	add.w	r3, sp, #19
 8016186:	a90a      	add	r1, sp, #40	@ 0x28
 8016188:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801618c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8016190:	f004 f834 	bl	801a1fc <rmw_take_response>
 8016194:	4606      	mov	r6, r0
 8016196:	bb78      	cbnz	r0, 80161f8 <rcl_take_response+0xb8>
 8016198:	f89d 3013 	ldrb.w	r3, [sp, #19]
 801619c:	b373      	cbz	r3, 80161fc <rcl_take_response+0xbc>
 801619e:	682b      	ldr	r3, [r5, #0]
 80161a0:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 80161a4:	b1aa      	cbz	r2, 80161d2 <rcl_take_response+0x92>
 80161a6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80161aa:	a905      	add	r1, sp, #20
 80161ac:	f003 fe8c 	bl	8019ec8 <rmw_get_gid_for_client>
 80161b0:	bb38      	cbnz	r0, 8016202 <rcl_take_response+0xc2>
 80161b2:	682b      	ldr	r3, [r5, #0]
 80161b4:	ed9d 7b12 	vldr	d7, [sp, #72]	@ 0x48
 80161b8:	f8d3 0118 	ldr.w	r0, [r3, #280]	@ 0x118
 80161bc:	ab06      	add	r3, sp, #24
 80161be:	ed8d 7b00 	vstr	d7, [sp]
 80161c2:	463a      	mov	r2, r7
 80161c4:	9302      	str	r3, [sp, #8]
 80161c6:	2103      	movs	r1, #3
 80161c8:	f000 fef6 	bl	8016fb8 <rcl_send_service_event_message>
 80161cc:	2800      	cmp	r0, #0
 80161ce:	bf18      	it	ne
 80161d0:	4606      	movne	r6, r0
 80161d2:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 80161d6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80161da:	46a4      	mov	ip, r4
 80161dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80161e0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80161e4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80161e8:	4630      	mov	r0, r6
 80161ea:	b015      	add	sp, #84	@ 0x54
 80161ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161ee:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 80161f2:	e7ee      	b.n	80161d2 <rcl_take_response+0x92>
 80161f4:	260b      	movs	r6, #11
 80161f6:	e7ec      	b.n	80161d2 <rcl_take_response+0x92>
 80161f8:	2601      	movs	r6, #1
 80161fa:	e7ea      	b.n	80161d2 <rcl_take_response+0x92>
 80161fc:	f240 16f5 	movw	r6, #501	@ 0x1f5
 8016200:	e7e7      	b.n	80161d2 <rcl_take_response+0x92>
 8016202:	f000 f813 	bl	801622c <rcl_convert_rmw_ret_to_rcl_ret>
 8016206:	4606      	mov	r6, r0
 8016208:	e7e3      	b.n	80161d2 <rcl_take_response+0x92>
 801620a:	bf00      	nop
 801620c:	f3af 8000 	nop.w
	...

08016218 <rcl_client_is_valid>:
 8016218:	b130      	cbz	r0, 8016228 <rcl_client_is_valid+0x10>
 801621a:	6800      	ldr	r0, [r0, #0]
 801621c:	b120      	cbz	r0, 8016228 <rcl_client_is_valid+0x10>
 801621e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016222:	3800      	subs	r0, #0
 8016224:	bf18      	it	ne
 8016226:	2001      	movne	r0, #1
 8016228:	4770      	bx	lr
 801622a:	bf00      	nop

0801622c <rcl_convert_rmw_ret_to_rcl_ret>:
 801622c:	280b      	cmp	r0, #11
 801622e:	dc0d      	bgt.n	801624c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8016230:	2800      	cmp	r0, #0
 8016232:	db09      	blt.n	8016248 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8016234:	280b      	cmp	r0, #11
 8016236:	d807      	bhi.n	8016248 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8016238:	e8df f000 	tbb	[pc, r0]
 801623c:	07060607 	.word	0x07060607
 8016240:	06060606 	.word	0x06060606
 8016244:	07070606 	.word	0x07070606
 8016248:	2001      	movs	r0, #1
 801624a:	4770      	bx	lr
 801624c:	28cb      	cmp	r0, #203	@ 0xcb
 801624e:	bf14      	ite	ne
 8016250:	2001      	movne	r0, #1
 8016252:	20cb      	moveq	r0, #203	@ 0xcb
 8016254:	4770      	bx	lr
 8016256:	bf00      	nop

08016258 <rcl_get_zero_initialized_context>:
 8016258:	4a03      	ldr	r2, [pc, #12]	@ (8016268 <rcl_get_zero_initialized_context+0x10>)
 801625a:	4603      	mov	r3, r0
 801625c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016260:	e883 0003 	stmia.w	r3, {r0, r1}
 8016264:	4618      	mov	r0, r3
 8016266:	4770      	bx	lr
 8016268:	0802100c 	.word	0x0802100c

0801626c <rcl_context_is_valid>:
 801626c:	b118      	cbz	r0, 8016276 <rcl_context_is_valid+0xa>
 801626e:	6840      	ldr	r0, [r0, #4]
 8016270:	3800      	subs	r0, #0
 8016272:	bf18      	it	ne
 8016274:	2001      	movne	r0, #1
 8016276:	4770      	bx	lr

08016278 <__cleanup_context>:
 8016278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801627c:	4606      	mov	r6, r0
 801627e:	6800      	ldr	r0, [r0, #0]
 8016280:	2300      	movs	r3, #0
 8016282:	6073      	str	r3, [r6, #4]
 8016284:	2800      	cmp	r0, #0
 8016286:	d042      	beq.n	801630e <__cleanup_context+0x96>
 8016288:	6943      	ldr	r3, [r0, #20]
 801628a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801628e:	6907      	ldr	r7, [r0, #16]
 8016290:	b39b      	cbz	r3, 80162fa <__cleanup_context+0x82>
 8016292:	3014      	adds	r0, #20
 8016294:	f7f7 feb6 	bl	800e004 <rcl_init_options_fini>
 8016298:	4680      	mov	r8, r0
 801629a:	2800      	cmp	r0, #0
 801629c:	d144      	bne.n	8016328 <__cleanup_context+0xb0>
 801629e:	6830      	ldr	r0, [r6, #0]
 80162a0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80162a2:	b123      	cbz	r3, 80162ae <__cleanup_context+0x36>
 80162a4:	3028      	adds	r0, #40	@ 0x28
 80162a6:	f7f9 fab7 	bl	800f818 <rmw_context_fini>
 80162aa:	bbb8      	cbnz	r0, 801631c <__cleanup_context+0xa4>
 80162ac:	6830      	ldr	r0, [r6, #0]
 80162ae:	6a03      	ldr	r3, [r0, #32]
 80162b0:	b1db      	cbz	r3, 80162ea <__cleanup_context+0x72>
 80162b2:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80162b6:	2a01      	cmp	r2, #1
 80162b8:	f17c 0100 	sbcs.w	r1, ip, #0
 80162bc:	db11      	blt.n	80162e2 <__cleanup_context+0x6a>
 80162be:	2400      	movs	r4, #0
 80162c0:	4625      	mov	r5, r4
 80162c2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80162c6:	4639      	mov	r1, r7
 80162c8:	b1c8      	cbz	r0, 80162fe <__cleanup_context+0x86>
 80162ca:	47c8      	blx	r9
 80162cc:	6833      	ldr	r3, [r6, #0]
 80162ce:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80162d2:	3401      	adds	r4, #1
 80162d4:	f145 0500 	adc.w	r5, r5, #0
 80162d8:	4294      	cmp	r4, r2
 80162da:	eb75 010c 	sbcs.w	r1, r5, ip
 80162de:	6a1b      	ldr	r3, [r3, #32]
 80162e0:	dbef      	blt.n	80162c2 <__cleanup_context+0x4a>
 80162e2:	4618      	mov	r0, r3
 80162e4:	4639      	mov	r1, r7
 80162e6:	47c8      	blx	r9
 80162e8:	6830      	ldr	r0, [r6, #0]
 80162ea:	4639      	mov	r1, r7
 80162ec:	47c8      	blx	r9
 80162ee:	2300      	movs	r3, #0
 80162f0:	e9c6 3300 	strd	r3, r3, [r6]
 80162f4:	4640      	mov	r0, r8
 80162f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80162fa:	4698      	mov	r8, r3
 80162fc:	e7d0      	b.n	80162a0 <__cleanup_context+0x28>
 80162fe:	3401      	adds	r4, #1
 8016300:	f145 0500 	adc.w	r5, r5, #0
 8016304:	4294      	cmp	r4, r2
 8016306:	eb75 010c 	sbcs.w	r1, r5, ip
 801630a:	dbda      	blt.n	80162c2 <__cleanup_context+0x4a>
 801630c:	e7e9      	b.n	80162e2 <__cleanup_context+0x6a>
 801630e:	4680      	mov	r8, r0
 8016310:	2300      	movs	r3, #0
 8016312:	e9c6 3300 	strd	r3, r3, [r6]
 8016316:	4640      	mov	r0, r8
 8016318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801631c:	f1b8 0f00 	cmp.w	r8, #0
 8016320:	d005      	beq.n	801632e <__cleanup_context+0xb6>
 8016322:	f7f8 ffbd 	bl	800f2a0 <rcutils_reset_error>
 8016326:	e7c1      	b.n	80162ac <__cleanup_context+0x34>
 8016328:	f7f8 ffba 	bl	800f2a0 <rcutils_reset_error>
 801632c:	e7b7      	b.n	801629e <__cleanup_context+0x26>
 801632e:	f7ff ff7d 	bl	801622c <rcl_convert_rmw_ret_to_rcl_ret>
 8016332:	4680      	mov	r8, r0
 8016334:	e7f5      	b.n	8016322 <__cleanup_context+0xaa>
 8016336:	bf00      	nop

08016338 <rcl_init>:
 8016338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801633c:	1e04      	subs	r4, r0, #0
 801633e:	b0a7      	sub	sp, #156	@ 0x9c
 8016340:	460d      	mov	r5, r1
 8016342:	4617      	mov	r7, r2
 8016344:	461e      	mov	r6, r3
 8016346:	dd13      	ble.n	8016370 <rcl_init+0x38>
 8016348:	b161      	cbz	r1, 8016364 <rcl_init+0x2c>
 801634a:	f1a1 0e04 	sub.w	lr, r1, #4
 801634e:	f04f 0c00 	mov.w	ip, #0
 8016352:	e001      	b.n	8016358 <rcl_init+0x20>
 8016354:	4564      	cmp	r4, ip
 8016356:	d00d      	beq.n	8016374 <rcl_init+0x3c>
 8016358:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 801635c:	f10c 0c01 	add.w	ip, ip, #1
 8016360:	2800      	cmp	r0, #0
 8016362:	d1f7      	bne.n	8016354 <rcl_init+0x1c>
 8016364:	f04f 080b 	mov.w	r8, #11
 8016368:	4640      	mov	r0, r8
 801636a:	b027      	add	sp, #156	@ 0x9c
 801636c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016370:	2900      	cmp	r1, #0
 8016372:	d1f7      	bne.n	8016364 <rcl_init+0x2c>
 8016374:	2f00      	cmp	r7, #0
 8016376:	d0f5      	beq.n	8016364 <rcl_init+0x2c>
 8016378:	683b      	ldr	r3, [r7, #0]
 801637a:	2b00      	cmp	r3, #0
 801637c:	d0f2      	beq.n	8016364 <rcl_init+0x2c>
 801637e:	469c      	mov	ip, r3
 8016380:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016384:	f10d 0e84 	add.w	lr, sp, #132	@ 0x84
 8016388:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801638c:	f8dc 3000 	ldr.w	r3, [ip]
 8016390:	f8ce 3000 	str.w	r3, [lr]
 8016394:	a821      	add	r0, sp, #132	@ 0x84
 8016396:	f7f8 ff5d 	bl	800f254 <rcutils_allocator_is_valid>
 801639a:	2800      	cmp	r0, #0
 801639c:	d0e2      	beq.n	8016364 <rcl_init+0x2c>
 801639e:	2e00      	cmp	r6, #0
 80163a0:	d0e0      	beq.n	8016364 <rcl_init+0x2c>
 80163a2:	6833      	ldr	r3, [r6, #0]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d176      	bne.n	8016496 <rcl_init+0x15e>
 80163a8:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	@ 0x90
 80163ac:	2198      	movs	r1, #152	@ 0x98
 80163ae:	2001      	movs	r0, #1
 80163b0:	4798      	blx	r3
 80163b2:	4680      	mov	r8, r0
 80163b4:	6030      	str	r0, [r6, #0]
 80163b6:	2800      	cmp	r0, #0
 80163b8:	f000 80cc 	beq.w	8016554 <rcl_init+0x21c>
 80163bc:	a802      	add	r0, sp, #8
 80163be:	f003 fa5f 	bl	8019880 <rmw_get_zero_initialized_context>
 80163c2:	a902      	add	r1, sp, #8
 80163c4:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 80163c8:	2270      	movs	r2, #112	@ 0x70
 80163ca:	f007 fb08 	bl	801d9de <memcpy>
 80163ce:	f10d 0e84 	add.w	lr, sp, #132	@ 0x84
 80163d2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80163d6:	f8d6 8000 	ldr.w	r8, [r6]
 80163da:	46c4      	mov	ip, r8
 80163dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80163e0:	f8de 3000 	ldr.w	r3, [lr]
 80163e4:	f8cc 3000 	str.w	r3, [ip]
 80163e8:	f108 0114 	add.w	r1, r8, #20
 80163ec:	4638      	mov	r0, r7
 80163ee:	f7f7 fe33 	bl	800e058 <rcl_init_options_copy>
 80163f2:	4680      	mov	r8, r0
 80163f4:	2800      	cmp	r0, #0
 80163f6:	d147      	bne.n	8016488 <rcl_init+0x150>
 80163f8:	f8d6 9000 	ldr.w	r9, [r6]
 80163fc:	ea4f 7ae4 	mov.w	sl, r4, asr #31
 8016400:	f8c9 0020 	str.w	r0, [r9, #32]
 8016404:	f8c9 4018 	str.w	r4, [r9, #24]
 8016408:	f8c9 a01c 	str.w	sl, [r9, #28]
 801640c:	2c00      	cmp	r4, #0
 801640e:	d04a      	beq.n	80164a6 <rcl_init+0x16e>
 8016410:	2d00      	cmp	r5, #0
 8016412:	d048      	beq.n	80164a6 <rcl_init+0x16e>
 8016414:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	@ 0x90
 8016418:	2104      	movs	r1, #4
 801641a:	4620      	mov	r0, r4
 801641c:	4798      	blx	r3
 801641e:	f8c9 0020 	str.w	r0, [r9, #32]
 8016422:	f8d6 9000 	ldr.w	r9, [r6]
 8016426:	f8d9 b020 	ldr.w	fp, [r9, #32]
 801642a:	f1bb 0f00 	cmp.w	fp, #0
 801642e:	d029      	beq.n	8016484 <rcl_init+0x14c>
 8016430:	2c01      	cmp	r4, #1
 8016432:	f17a 0300 	sbcs.w	r3, sl, #0
 8016436:	db36      	blt.n	80164a6 <rcl_init+0x16e>
 8016438:	f04f 0800 	mov.w	r8, #0
 801643c:	3d04      	subs	r5, #4
 801643e:	46c1      	mov	r9, r8
 8016440:	e00d      	b.n	801645e <rcl_init+0x126>
 8016442:	6829      	ldr	r1, [r5, #0]
 8016444:	f007 facb 	bl	801d9de <memcpy>
 8016448:	f118 0801 	adds.w	r8, r8, #1
 801644c:	f149 0900 	adc.w	r9, r9, #0
 8016450:	45ca      	cmp	sl, r9
 8016452:	bf08      	it	eq
 8016454:	4544      	cmpeq	r4, r8
 8016456:	d024      	beq.n	80164a2 <rcl_init+0x16a>
 8016458:	6833      	ldr	r3, [r6, #0]
 801645a:	f8d3 b020 	ldr.w	fp, [r3, #32]
 801645e:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8016462:	f7e9 ff3d 	bl	80002e0 <strlen>
 8016466:	1c42      	adds	r2, r0, #1
 8016468:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801646a:	9925      	ldr	r1, [sp, #148]	@ 0x94
 801646c:	9201      	str	r2, [sp, #4]
 801646e:	4610      	mov	r0, r2
 8016470:	4798      	blx	r3
 8016472:	6833      	ldr	r3, [r6, #0]
 8016474:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
 8016478:	6a1b      	ldr	r3, [r3, #32]
 801647a:	9a01      	ldr	r2, [sp, #4]
 801647c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8016480:	2800      	cmp	r0, #0
 8016482:	d1de      	bne.n	8016442 <rcl_init+0x10a>
 8016484:	f04f 080a 	mov.w	r8, #10
 8016488:	4630      	mov	r0, r6
 801648a:	f7ff fef5 	bl	8016278 <__cleanup_context>
 801648e:	4640      	mov	r0, r8
 8016490:	b027      	add	sp, #156	@ 0x9c
 8016492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016496:	f04f 0864 	mov.w	r8, #100	@ 0x64
 801649a:	4640      	mov	r0, r8
 801649c:	b027      	add	sp, #156	@ 0x9c
 801649e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164a2:	f8d6 9000 	ldr.w	r9, [r6]
 80164a6:	4a40      	ldr	r2, [pc, #256]	@ (80165a8 <rcl_init+0x270>)
 80164a8:	6813      	ldr	r3, [r2, #0]
 80164aa:	3301      	adds	r3, #1
 80164ac:	d04d      	beq.n	801654a <rcl_init+0x212>
 80164ae:	461d      	mov	r5, r3
 80164b0:	2000      	movs	r0, #0
 80164b2:	4619      	mov	r1, r3
 80164b4:	f8d9 4014 	ldr.w	r4, [r9, #20]
 80164b8:	6073      	str	r3, [r6, #4]
 80164ba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80164bc:	6011      	str	r1, [r2, #0]
 80164be:	3301      	adds	r3, #1
 80164c0:	e9c4 5006 	strd	r5, r0, [r4, #24]
 80164c4:	d05e      	beq.n	8016584 <rcl_init+0x24c>
 80164c6:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d045      	beq.n	801655a <rcl_init+0x222>
 80164ce:	683a      	ldr	r2, [r7, #0]
 80164d0:	2b01      	cmp	r3, #1
 80164d2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80164d6:	d04c      	beq.n	8016572 <rcl_init+0x23a>
 80164d8:	f104 0534 	add.w	r5, r4, #52	@ 0x34
 80164dc:	2a00      	cmp	r2, #0
 80164de:	d05c      	beq.n	801659a <rcl_init+0x262>
 80164e0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80164e2:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 80164e6:	b953      	cbnz	r3, 80164fe <rcl_init+0x1c6>
 80164e8:	2801      	cmp	r0, #1
 80164ea:	d008      	beq.n	80164fe <rcl_init+0x1c6>
 80164ec:	a921      	add	r1, sp, #132	@ 0x84
 80164ee:	4628      	mov	r0, r5
 80164f0:	f005 fc8e 	bl	801be10 <rcl_get_discovery_static_peers>
 80164f4:	4680      	mov	r8, r0
 80164f6:	2800      	cmp	r0, #0
 80164f8:	d1c6      	bne.n	8016488 <rcl_init+0x150>
 80164fa:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 80164fe:	f005 fc7d 	bl	801bdfc <rcl_automatic_discovery_range_to_string>
 8016502:	6833      	ldr	r3, [r6, #0]
 8016504:	695b      	ldr	r3, [r3, #20]
 8016506:	aa20      	add	r2, sp, #128	@ 0x80
 8016508:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 801650a:	a91f      	add	r1, sp, #124	@ 0x7c
 801650c:	f001 fa54 	bl	80179b8 <rcl_validate_enclave_name>
 8016510:	4680      	mov	r8, r0
 8016512:	2800      	cmp	r0, #0
 8016514:	d1b8      	bne.n	8016488 <rcl_init+0x150>
 8016516:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8016518:	bb8b      	cbnz	r3, 801657e <rcl_init+0x246>
 801651a:	6831      	ldr	r1, [r6, #0]
 801651c:	694b      	ldr	r3, [r1, #20]
 801651e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8016520:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8016524:	f000 fba6 	bl	8016c74 <rcl_get_security_options_from_environment>
 8016528:	4680      	mov	r8, r0
 801652a:	2800      	cmp	r0, #0
 801652c:	d1ac      	bne.n	8016488 <rcl_init+0x150>
 801652e:	6831      	ldr	r1, [r6, #0]
 8016530:	6948      	ldr	r0, [r1, #20]
 8016532:	3128      	adds	r1, #40	@ 0x28
 8016534:	3018      	adds	r0, #24
 8016536:	f7f9 f83b 	bl	800f5b0 <rmw_init>
 801653a:	4680      	mov	r8, r0
 801653c:	2800      	cmp	r0, #0
 801653e:	f43f af13 	beq.w	8016368 <rcl_init+0x30>
 8016542:	f7ff fe73 	bl	801622c <rcl_convert_rmw_ret_to_rcl_ret>
 8016546:	4680      	mov	r8, r0
 8016548:	e79e      	b.n	8016488 <rcl_init+0x150>
 801654a:	2101      	movs	r1, #1
 801654c:	4618      	mov	r0, r3
 801654e:	460d      	mov	r5, r1
 8016550:	460b      	mov	r3, r1
 8016552:	e7af      	b.n	80164b4 <rcl_init+0x17c>
 8016554:	f04f 080a 	mov.w	r8, #10
 8016558:	e706      	b.n	8016368 <rcl_init+0x30>
 801655a:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 801655e:	f000 f825 	bl	80165ac <rcl_get_localhost_only>
 8016562:	4680      	mov	r8, r0
 8016564:	2800      	cmp	r0, #0
 8016566:	d18f      	bne.n	8016488 <rcl_init+0x150>
 8016568:	6832      	ldr	r2, [r6, #0]
 801656a:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 801656e:	6954      	ldr	r4, [r2, #20]
 8016570:	e7ad      	b.n	80164ce <rcl_init+0x196>
 8016572:	2002      	movs	r0, #2
 8016574:	2300      	movs	r3, #0
 8016576:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
 801657a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801657c:	e7bf      	b.n	80164fe <rcl_init+0x1c6>
 801657e:	f04f 0801 	mov.w	r8, #1
 8016582:	e781      	b.n	8016488 <rcl_init+0x150>
 8016584:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8016588:	f005 fcac 	bl	801bee4 <rcl_get_default_domain_id>
 801658c:	4680      	mov	r8, r0
 801658e:	2800      	cmp	r0, #0
 8016590:	f47f af7a 	bne.w	8016488 <rcl_init+0x150>
 8016594:	6833      	ldr	r3, [r6, #0]
 8016596:	695c      	ldr	r4, [r3, #20]
 8016598:	e795      	b.n	80164c6 <rcl_init+0x18e>
 801659a:	4628      	mov	r0, r5
 801659c:	f005 fbec 	bl	801bd78 <rcl_get_automatic_discovery_range>
 80165a0:	4680      	mov	r8, r0
 80165a2:	2800      	cmp	r0, #0
 80165a4:	d09c      	beq.n	80164e0 <rcl_init+0x1a8>
 80165a6:	e76f      	b.n	8016488 <rcl_init+0x150>
 80165a8:	2000f140 	.word	0x2000f140

080165ac <rcl_get_localhost_only>:
 80165ac:	b510      	push	{r4, lr}
 80165ae:	b082      	sub	sp, #8
 80165b0:	2300      	movs	r3, #0
 80165b2:	9301      	str	r3, [sp, #4]
 80165b4:	b1b8      	cbz	r0, 80165e6 <rcl_get_localhost_only+0x3a>
 80165b6:	4604      	mov	r4, r0
 80165b8:	a901      	add	r1, sp, #4
 80165ba:	480c      	ldr	r0, [pc, #48]	@ (80165ec <rcl_get_localhost_only+0x40>)
 80165bc:	f002 fe6a 	bl	8019294 <rcutils_get_env>
 80165c0:	b110      	cbz	r0, 80165c8 <rcl_get_localhost_only+0x1c>
 80165c2:	2001      	movs	r0, #1
 80165c4:	b002      	add	sp, #8
 80165c6:	bd10      	pop	{r4, pc}
 80165c8:	9b01      	ldr	r3, [sp, #4]
 80165ca:	b10b      	cbz	r3, 80165d0 <rcl_get_localhost_only+0x24>
 80165cc:	781b      	ldrb	r3, [r3, #0]
 80165ce:	b923      	cbnz	r3, 80165da <rcl_get_localhost_only+0x2e>
 80165d0:	2300      	movs	r3, #0
 80165d2:	7023      	strb	r3, [r4, #0]
 80165d4:	2000      	movs	r0, #0
 80165d6:	b002      	add	sp, #8
 80165d8:	bd10      	pop	{r4, pc}
 80165da:	2b31      	cmp	r3, #49	@ 0x31
 80165dc:	bf14      	ite	ne
 80165de:	2302      	movne	r3, #2
 80165e0:	2301      	moveq	r3, #1
 80165e2:	7023      	strb	r3, [r4, #0]
 80165e4:	e7f6      	b.n	80165d4 <rcl_get_localhost_only+0x28>
 80165e6:	200b      	movs	r0, #11
 80165e8:	b002      	add	sp, #8
 80165ea:	bd10      	pop	{r4, pc}
 80165ec:	08021014 	.word	0x08021014

080165f0 <rcl_get_zero_initialized_node>:
 80165f0:	4a03      	ldr	r2, [pc, #12]	@ (8016600 <rcl_get_zero_initialized_node+0x10>)
 80165f2:	4603      	mov	r3, r0
 80165f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80165f8:	e883 0003 	stmia.w	r3, {r0, r1}
 80165fc:	4618      	mov	r0, r3
 80165fe:	4770      	bx	lr
 8016600:	0802104c 	.word	0x0802104c

08016604 <rcl_node_init>:
 8016604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016608:	b0ab      	sub	sp, #172	@ 0xac
 801660a:	4604      	mov	r4, r0
 801660c:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 801660e:	a825      	add	r0, sp, #148	@ 0x94
 8016610:	4689      	mov	r9, r1
 8016612:	4690      	mov	r8, r2
 8016614:	461f      	mov	r7, r3
 8016616:	f005 fecf 	bl	801c3b8 <rcl_guard_condition_get_default_options>
 801661a:	2d00      	cmp	r5, #0
 801661c:	f000 80d8 	beq.w	80167d0 <rcl_node_init+0x1cc>
 8016620:	4628      	mov	r0, r5
 8016622:	f7f8 fe17 	bl	800f254 <rcutils_allocator_is_valid>
 8016626:	2800      	cmp	r0, #0
 8016628:	f000 80d2 	beq.w	80167d0 <rcl_node_init+0x1cc>
 801662c:	f1b9 0f00 	cmp.w	r9, #0
 8016630:	f000 80ce 	beq.w	80167d0 <rcl_node_init+0x1cc>
 8016634:	f1b8 0f00 	cmp.w	r8, #0
 8016638:	f000 80ca 	beq.w	80167d0 <rcl_node_init+0x1cc>
 801663c:	2c00      	cmp	r4, #0
 801663e:	f000 80c7 	beq.w	80167d0 <rcl_node_init+0x1cc>
 8016642:	6866      	ldr	r6, [r4, #4]
 8016644:	2e00      	cmp	r6, #0
 8016646:	f040 80ca 	bne.w	80167de <rcl_node_init+0x1da>
 801664a:	2f00      	cmp	r7, #0
 801664c:	f000 80c0 	beq.w	80167d0 <rcl_node_init+0x1cc>
 8016650:	4638      	mov	r0, r7
 8016652:	f7ff fe0b 	bl	801626c <rcl_context_is_valid>
 8016656:	2800      	cmp	r0, #0
 8016658:	f000 80bf 	beq.w	80167da <rcl_node_init+0x1d6>
 801665c:	4632      	mov	r2, r6
 801665e:	a924      	add	r1, sp, #144	@ 0x90
 8016660:	4648      	mov	r0, r9
 8016662:	9624      	str	r6, [sp, #144]	@ 0x90
 8016664:	f003 fa88 	bl	8019b78 <rmw_validate_node_name>
 8016668:	4606      	mov	r6, r0
 801666a:	2800      	cmp	r0, #0
 801666c:	f040 80b1 	bne.w	80167d2 <rcl_node_init+0x1ce>
 8016670:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8016672:	2800      	cmp	r0, #0
 8016674:	f040 8104 	bne.w	8016880 <rcl_node_init+0x27c>
 8016678:	f898 3000 	ldrb.w	r3, [r8]
 801667c:	2b00      	cmp	r3, #0
 801667e:	f000 80f0 	beq.w	8016862 <rcl_node_init+0x25e>
 8016682:	2b2f      	cmp	r3, #47	@ 0x2f
 8016684:	f000 80b0 	beq.w	80167e8 <rcl_node_init+0x1e4>
 8016688:	4b85      	ldr	r3, [pc, #532]	@ (80168a0 <rcl_node_init+0x29c>)
 801668a:	f8cd 800c 	str.w	r8, [sp, #12]
 801668e:	9302      	str	r3, [sp, #8]
 8016690:	692b      	ldr	r3, [r5, #16]
 8016692:	9300      	str	r3, [sp, #0]
 8016694:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016698:	9301      	str	r3, [sp, #4]
 801669a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801669e:	f002 fe21 	bl	80192e4 <rcutils_format_string_limit>
 80166a2:	4680      	mov	r8, r0
 80166a4:	f1b8 0f00 	cmp.w	r8, #0
 80166a8:	f000 80e8 	beq.w	801687c <rcl_node_init+0x278>
 80166ac:	2200      	movs	r2, #0
 80166ae:	a924      	add	r1, sp, #144	@ 0x90
 80166b0:	4640      	mov	r0, r8
 80166b2:	9224      	str	r2, [sp, #144]	@ 0x90
 80166b4:	f003 fa42 	bl	8019b3c <rmw_validate_namespace>
 80166b8:	4606      	mov	r6, r0
 80166ba:	2800      	cmp	r0, #0
 80166bc:	f040 80a4 	bne.w	8016808 <rcl_node_init+0x204>
 80166c0:	9824      	ldr	r0, [sp, #144]	@ 0x90
 80166c2:	2800      	cmp	r0, #0
 80166c4:	f040 809d 	bne.w	8016802 <rcl_node_init+0x1fe>
 80166c8:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 80166cc:	2178      	movs	r1, #120	@ 0x78
 80166ce:	2001      	movs	r0, #1
 80166d0:	4798      	blx	r3
 80166d2:	4606      	mov	r6, r0
 80166d4:	6060      	str	r0, [r4, #4]
 80166d6:	2800      	cmp	r0, #0
 80166d8:	f000 80d6 	beq.w	8016888 <rcl_node_init+0x284>
 80166dc:	a80a      	add	r0, sp, #40	@ 0x28
 80166de:	f000 f92f 	bl	8016940 <rcl_node_get_default_options>
 80166e2:	a90a      	add	r1, sp, #40	@ 0x28
 80166e4:	4630      	mov	r0, r6
 80166e6:	2268      	movs	r2, #104	@ 0x68
 80166e8:	f007 f979 	bl	801d9de <memcpy>
 80166ec:	6861      	ldr	r1, [r4, #4]
 80166ee:	6027      	str	r7, [r4, #0]
 80166f0:	4628      	mov	r0, r5
 80166f2:	f000 f933 	bl	801695c <rcl_node_options_copy>
 80166f6:	4606      	mov	r6, r0
 80166f8:	2800      	cmp	r0, #0
 80166fa:	f040 8085 	bne.w	8016808 <rcl_node_init+0x204>
 80166fe:	4640      	mov	r0, r8
 8016700:	f7e9 fdee 	bl	80002e0 <strlen>
 8016704:	eb08 0300 	add.w	r3, r8, r0
 8016708:	6866      	ldr	r6, [r4, #4]
 801670a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801670e:	e9cd 8903 	strd	r8, r9, [sp, #12]
 8016712:	2b2f      	cmp	r3, #47	@ 0x2f
 8016714:	bf0c      	ite	eq
 8016716:	4b63      	ldreq	r3, [pc, #396]	@ (80168a4 <rcl_node_init+0x2a0>)
 8016718:	4b63      	ldrne	r3, [pc, #396]	@ (80168a8 <rcl_node_init+0x2a4>)
 801671a:	9302      	str	r3, [sp, #8]
 801671c:	692b      	ldr	r3, [r5, #16]
 801671e:	9300      	str	r3, [sp, #0]
 8016720:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016724:	9301      	str	r3, [sp, #4]
 8016726:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801672a:	f002 fddb 	bl	80192e4 <rcutils_format_string_limit>
 801672e:	6863      	ldr	r3, [r4, #4]
 8016730:	6770      	str	r0, [r6, #116]	@ 0x74
 8016732:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8016734:	2a00      	cmp	r2, #0
 8016736:	f000 80a9 	beq.w	801688c <rcl_node_init+0x288>
 801673a:	6822      	ldr	r2, [r4, #0]
 801673c:	9307      	str	r3, [sp, #28]
 801673e:	6810      	ldr	r0, [r2, #0]
 8016740:	4649      	mov	r1, r9
 8016742:	3028      	adds	r0, #40	@ 0x28
 8016744:	4642      	mov	r2, r8
 8016746:	f7f9 f915 	bl	800f974 <rmw_create_node>
 801674a:	9b07      	ldr	r3, [sp, #28]
 801674c:	6698      	str	r0, [r3, #104]	@ 0x68
 801674e:	6863      	ldr	r3, [r4, #4]
 8016750:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8016752:	2800      	cmp	r0, #0
 8016754:	f000 809d 	beq.w	8016892 <rcl_node_init+0x28e>
 8016758:	f7f9 f99e 	bl	800fa98 <rmw_node_get_graph_guard_condition>
 801675c:	4681      	mov	r9, r0
 801675e:	2800      	cmp	r0, #0
 8016760:	f000 809c 	beq.w	801689c <rcl_node_init+0x298>
 8016764:	682b      	ldr	r3, [r5, #0]
 8016766:	6929      	ldr	r1, [r5, #16]
 8016768:	6866      	ldr	r6, [r4, #4]
 801676a:	2008      	movs	r0, #8
 801676c:	4798      	blx	r3
 801676e:	6863      	ldr	r3, [r4, #4]
 8016770:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8016772:	f8d3 a06c 	ldr.w	sl, [r3, #108]	@ 0x6c
 8016776:	f1ba 0f00 	cmp.w	sl, #0
 801677a:	f000 808d 	beq.w	8016898 <rcl_node_init+0x294>
 801677e:	f10d 0b20 	add.w	fp, sp, #32
 8016782:	4658      	mov	r0, fp
 8016784:	f005 fd40 	bl	801c208 <rcl_get_zero_initialized_guard_condition>
 8016788:	e89b 0003 	ldmia.w	fp, {r0, r1}
 801678c:	6863      	ldr	r3, [r4, #4]
 801678e:	46ac      	mov	ip, r5
 8016790:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8016794:	e88a 0003 	stmia.w	sl, {r0, r1}
 8016798:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801679c:	ae25      	add	r6, sp, #148	@ 0x94
 801679e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80167a0:	f8dc 3000 	ldr.w	r3, [ip]
 80167a4:	6033      	str	r3, [r6, #0]
 80167a6:	ab2a      	add	r3, sp, #168	@ 0xa8
 80167a8:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80167ac:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80167b0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80167b2:	463a      	mov	r2, r7
 80167b4:	4649      	mov	r1, r9
 80167b6:	4670      	mov	r0, lr
 80167b8:	f005 fd7c 	bl	801c2b4 <rcl_guard_condition_init_from_rmw>
 80167bc:	4606      	mov	r6, r0
 80167be:	bb18      	cbnz	r0, 8016808 <rcl_node_init+0x204>
 80167c0:	686b      	ldr	r3, [r5, #4]
 80167c2:	6929      	ldr	r1, [r5, #16]
 80167c4:	4798      	blx	r3
 80167c6:	686b      	ldr	r3, [r5, #4]
 80167c8:	6929      	ldr	r1, [r5, #16]
 80167ca:	4640      	mov	r0, r8
 80167cc:	4798      	blx	r3
 80167ce:	e000      	b.n	80167d2 <rcl_node_init+0x1ce>
 80167d0:	260b      	movs	r6, #11
 80167d2:	4630      	mov	r0, r6
 80167d4:	b02b      	add	sp, #172	@ 0xac
 80167d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167da:	2665      	movs	r6, #101	@ 0x65
 80167dc:	e7f9      	b.n	80167d2 <rcl_node_init+0x1ce>
 80167de:	2664      	movs	r6, #100	@ 0x64
 80167e0:	4630      	mov	r0, r6
 80167e2:	b02b      	add	sp, #172	@ 0xac
 80167e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167e8:	f105 030c 	add.w	r3, r5, #12
 80167ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80167f0:	e88d 0003 	stmia.w	sp, {r0, r1}
 80167f4:	4640      	mov	r0, r8
 80167f6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80167fa:	f002 fe91 	bl	8019520 <rcutils_strdup>
 80167fe:	4680      	mov	r8, r0
 8016800:	e750      	b.n	80166a4 <rcl_node_init+0xa0>
 8016802:	f003 f9ad 	bl	8019b60 <rmw_namespace_validation_result_string>
 8016806:	26ca      	movs	r6, #202	@ 0xca
 8016808:	6863      	ldr	r3, [r4, #4]
 801680a:	b1f3      	cbz	r3, 801684a <rcl_node_init+0x246>
 801680c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801680e:	b138      	cbz	r0, 8016820 <rcl_node_init+0x21c>
 8016810:	f005 fdb0 	bl	801c374 <rcl_guard_condition_fini>
 8016814:	6863      	ldr	r3, [r4, #4]
 8016816:	6929      	ldr	r1, [r5, #16]
 8016818:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801681a:	686b      	ldr	r3, [r5, #4]
 801681c:	4798      	blx	r3
 801681e:	6863      	ldr	r3, [r4, #4]
 8016820:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8016822:	b110      	cbz	r0, 801682a <rcl_node_init+0x226>
 8016824:	f7f9 f8bc 	bl	800f9a0 <rmw_destroy_node>
 8016828:	6863      	ldr	r3, [r4, #4]
 801682a:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801682c:	6929      	ldr	r1, [r5, #16]
 801682e:	686b      	ldr	r3, [r5, #4]
 8016830:	4798      	blx	r3
 8016832:	6863      	ldr	r3, [r4, #4]
 8016834:	6929      	ldr	r1, [r5, #16]
 8016836:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8016838:	686b      	ldr	r3, [r5, #4]
 801683a:	4798      	blx	r3
 801683c:	6860      	ldr	r0, [r4, #4]
 801683e:	f000 f8ab 	bl	8016998 <rcl_node_options_fini>
 8016842:	686b      	ldr	r3, [r5, #4]
 8016844:	6929      	ldr	r1, [r5, #16]
 8016846:	6860      	ldr	r0, [r4, #4]
 8016848:	4798      	blx	r3
 801684a:	686b      	ldr	r3, [r5, #4]
 801684c:	6929      	ldr	r1, [r5, #16]
 801684e:	2000      	movs	r0, #0
 8016850:	4798      	blx	r3
 8016852:	686b      	ldr	r3, [r5, #4]
 8016854:	6929      	ldr	r1, [r5, #16]
 8016856:	4640      	mov	r0, r8
 8016858:	4798      	blx	r3
 801685a:	2300      	movs	r3, #0
 801685c:	e9c4 3300 	strd	r3, r3, [r4]
 8016860:	e7b7      	b.n	80167d2 <rcl_node_init+0x1ce>
 8016862:	f105 030c 	add.w	r3, r5, #12
 8016866:	e893 0003 	ldmia.w	r3, {r0, r1}
 801686a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801686e:	480f      	ldr	r0, [pc, #60]	@ (80168ac <rcl_node_init+0x2a8>)
 8016870:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8016874:	f002 fe54 	bl	8019520 <rcutils_strdup>
 8016878:	4680      	mov	r8, r0
 801687a:	e713      	b.n	80166a4 <rcl_node_init+0xa0>
 801687c:	260a      	movs	r6, #10
 801687e:	e7a8      	b.n	80167d2 <rcl_node_init+0x1ce>
 8016880:	f003 f9c6 	bl	8019c10 <rmw_node_name_validation_result_string>
 8016884:	26c9      	movs	r6, #201	@ 0xc9
 8016886:	e7a4      	b.n	80167d2 <rcl_node_init+0x1ce>
 8016888:	260a      	movs	r6, #10
 801688a:	e7de      	b.n	801684a <rcl_node_init+0x246>
 801688c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801688e:	260a      	movs	r6, #10
 8016890:	e7bd      	b.n	801680e <rcl_node_init+0x20a>
 8016892:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8016894:	2601      	movs	r6, #1
 8016896:	e7ba      	b.n	801680e <rcl_node_init+0x20a>
 8016898:	260a      	movs	r6, #10
 801689a:	e7c1      	b.n	8016820 <rcl_node_init+0x21c>
 801689c:	2601      	movs	r6, #1
 801689e:	e7b3      	b.n	8016808 <rcl_node_init+0x204>
 80168a0:	0802102c 	.word	0x0802102c
 80168a4:	08020354 	.word	0x08020354
 80168a8:	08020330 	.word	0x08020330
 80168ac:	0802032c 	.word	0x0802032c

080168b0 <rcl_node_is_valid>:
 80168b0:	b130      	cbz	r0, 80168c0 <rcl_node_is_valid+0x10>
 80168b2:	6843      	ldr	r3, [r0, #4]
 80168b4:	b123      	cbz	r3, 80168c0 <rcl_node_is_valid+0x10>
 80168b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80168b8:	b113      	cbz	r3, 80168c0 <rcl_node_is_valid+0x10>
 80168ba:	6800      	ldr	r0, [r0, #0]
 80168bc:	f7ff bcd6 	b.w	801626c <rcl_context_is_valid>
 80168c0:	2000      	movs	r0, #0
 80168c2:	4770      	bx	lr

080168c4 <rcl_node_get_name>:
 80168c4:	b120      	cbz	r0, 80168d0 <rcl_node_get_name+0xc>
 80168c6:	6840      	ldr	r0, [r0, #4]
 80168c8:	b110      	cbz	r0, 80168d0 <rcl_node_get_name+0xc>
 80168ca:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80168cc:	b100      	cbz	r0, 80168d0 <rcl_node_get_name+0xc>
 80168ce:	6880      	ldr	r0, [r0, #8]
 80168d0:	4770      	bx	lr
 80168d2:	bf00      	nop

080168d4 <rcl_node_get_namespace>:
 80168d4:	b120      	cbz	r0, 80168e0 <rcl_node_get_namespace+0xc>
 80168d6:	6840      	ldr	r0, [r0, #4]
 80168d8:	b110      	cbz	r0, 80168e0 <rcl_node_get_namespace+0xc>
 80168da:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80168dc:	b100      	cbz	r0, 80168e0 <rcl_node_get_namespace+0xc>
 80168de:	68c0      	ldr	r0, [r0, #12]
 80168e0:	4770      	bx	lr
 80168e2:	bf00      	nop

080168e4 <rcl_node_get_options>:
 80168e4:	b128      	cbz	r0, 80168f2 <rcl_node_get_options+0xe>
 80168e6:	6840      	ldr	r0, [r0, #4]
 80168e8:	b118      	cbz	r0, 80168f2 <rcl_node_get_options+0xe>
 80168ea:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	bf08      	it	eq
 80168f0:	2000      	moveq	r0, #0
 80168f2:	4770      	bx	lr

080168f4 <rcl_node_get_rmw_handle>:
 80168f4:	b110      	cbz	r0, 80168fc <rcl_node_get_rmw_handle+0x8>
 80168f6:	6840      	ldr	r0, [r0, #4]
 80168f8:	b100      	cbz	r0, 80168fc <rcl_node_get_rmw_handle+0x8>
 80168fa:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80168fc:	4770      	bx	lr
 80168fe:	bf00      	nop

08016900 <rcl_get_disable_loaned_message>:
 8016900:	b510      	push	{r4, lr}
 8016902:	b082      	sub	sp, #8
 8016904:	2300      	movs	r3, #0
 8016906:	9301      	str	r3, [sp, #4]
 8016908:	b1a0      	cbz	r0, 8016934 <rcl_get_disable_loaned_message+0x34>
 801690a:	4604      	mov	r4, r0
 801690c:	a901      	add	r1, sp, #4
 801690e:	480b      	ldr	r0, [pc, #44]	@ (801693c <rcl_get_disable_loaned_message+0x3c>)
 8016910:	f002 fcc0 	bl	8019294 <rcutils_get_env>
 8016914:	b110      	cbz	r0, 801691c <rcl_get_disable_loaned_message+0x1c>
 8016916:	2001      	movs	r0, #1
 8016918:	b002      	add	sp, #8
 801691a:	bd10      	pop	{r4, pc}
 801691c:	9a01      	ldr	r2, [sp, #4]
 801691e:	7813      	ldrb	r3, [r2, #0]
 8016920:	3b31      	subs	r3, #49	@ 0x31
 8016922:	bf08      	it	eq
 8016924:	7853      	ldrbeq	r3, [r2, #1]
 8016926:	fab3 f383 	clz	r3, r3
 801692a:	095b      	lsrs	r3, r3, #5
 801692c:	2000      	movs	r0, #0
 801692e:	7023      	strb	r3, [r4, #0]
 8016930:	b002      	add	sp, #8
 8016932:	bd10      	pop	{r4, pc}
 8016934:	200b      	movs	r0, #11
 8016936:	b002      	add	sp, #8
 8016938:	bd10      	pop	{r4, pc}
 801693a:	bf00      	nop
 801693c:	08021030 	.word	0x08021030

08016940 <rcl_node_get_default_options>:
 8016940:	b510      	push	{r4, lr}
 8016942:	2253      	movs	r2, #83	@ 0x53
 8016944:	4604      	mov	r4, r0
 8016946:	2100      	movs	r1, #0
 8016948:	3015      	adds	r0, #21
 801694a:	f006 ff6d 	bl	801d828 <memset>
 801694e:	4620      	mov	r0, r4
 8016950:	f7f8 fc54 	bl	800f1fc <rcutils_get_default_allocator>
 8016954:	2301      	movs	r3, #1
 8016956:	7523      	strb	r3, [r4, #20]
 8016958:	4620      	mov	r0, r4
 801695a:	bd10      	pop	{r4, pc}

0801695c <rcl_node_options_copy>:
 801695c:	b1d0      	cbz	r0, 8016994 <rcl_node_options_copy+0x38>
 801695e:	b570      	push	{r4, r5, r6, lr}
 8016960:	460c      	mov	r4, r1
 8016962:	b1a9      	cbz	r1, 8016990 <rcl_node_options_copy+0x34>
 8016964:	4288      	cmp	r0, r1
 8016966:	4684      	mov	ip, r0
 8016968:	d012      	beq.n	8016990 <rcl_node_options_copy+0x34>
 801696a:	4605      	mov	r5, r0
 801696c:	8a86      	ldrh	r6, [r0, #20]
 801696e:	468e      	mov	lr, r1
 8016970:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016972:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016976:	682b      	ldr	r3, [r5, #0]
 8016978:	f8ce 3000 	str.w	r3, [lr]
 801697c:	f10c 0118 	add.w	r1, ip, #24
 8016980:	2250      	movs	r2, #80	@ 0x50
 8016982:	82a6      	strh	r6, [r4, #20]
 8016984:	f104 0018 	add.w	r0, r4, #24
 8016988:	f007 f829 	bl	801d9de <memcpy>
 801698c:	2000      	movs	r0, #0
 801698e:	bd70      	pop	{r4, r5, r6, pc}
 8016990:	200b      	movs	r0, #11
 8016992:	bd70      	pop	{r4, r5, r6, pc}
 8016994:	200b      	movs	r0, #11
 8016996:	4770      	bx	lr

08016998 <rcl_node_options_fini>:
 8016998:	b1c0      	cbz	r0, 80169cc <rcl_node_options_fini+0x34>
 801699a:	b500      	push	{lr}
 801699c:	4684      	mov	ip, r0
 801699e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80169a2:	b087      	sub	sp, #28
 80169a4:	f10d 0e04 	add.w	lr, sp, #4
 80169a8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80169ac:	f8dc 3000 	ldr.w	r3, [ip]
 80169b0:	f8ce 3000 	str.w	r3, [lr]
 80169b4:	a801      	add	r0, sp, #4
 80169b6:	f7f8 fc4d 	bl	800f254 <rcutils_allocator_is_valid>
 80169ba:	b118      	cbz	r0, 80169c4 <rcl_node_options_fini+0x2c>
 80169bc:	2000      	movs	r0, #0
 80169be:	b007      	add	sp, #28
 80169c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80169c4:	200b      	movs	r0, #11
 80169c6:	b007      	add	sp, #28
 80169c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80169cc:	200b      	movs	r0, #11
 80169ce:	4770      	bx	lr

080169d0 <rcl_node_resolve_name>:
 80169d0:	b082      	sub	sp, #8
 80169d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169d6:	b091      	sub	sp, #68	@ 0x44
 80169d8:	ac1a      	add	r4, sp, #104	@ 0x68
 80169da:	e884 000c 	stmia.w	r4, {r2, r3}
 80169de:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80169e2:	2800      	cmp	r0, #0
 80169e4:	d03a      	beq.n	8016a5c <rcl_node_resolve_name+0x8c>
 80169e6:	460c      	mov	r4, r1
 80169e8:	4605      	mov	r5, r0
 80169ea:	f7ff ff7b 	bl	80168e4 <rcl_node_get_options>
 80169ee:	b370      	cbz	r0, 8016a4e <rcl_node_resolve_name+0x7e>
 80169f0:	4628      	mov	r0, r5
 80169f2:	f7ff ff67 	bl	80168c4 <rcl_node_get_name>
 80169f6:	4681      	mov	r9, r0
 80169f8:	4628      	mov	r0, r5
 80169fa:	f7ff ff6b 	bl	80168d4 <rcl_node_get_namespace>
 80169fe:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8016a02:	4607      	mov	r7, r0
 8016a04:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016a08:	ad0b      	add	r5, sp, #44	@ 0x2c
 8016a0a:	46ac      	mov	ip, r5
 8016a0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a10:	f8de 3000 	ldr.w	r3, [lr]
 8016a14:	f8cc 3000 	str.w	r3, [ip]
 8016a18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8016a1a:	b1fb      	cbz	r3, 8016a5c <rcl_node_resolve_name+0x8c>
 8016a1c:	468a      	mov	sl, r1
 8016a1e:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8016a22:	f002 fddd 	bl	80195e0 <rcutils_get_zero_initialized_string_map>
 8016a26:	ab10      	add	r3, sp, #64	@ 0x40
 8016a28:	9008      	str	r0, [sp, #32]
 8016a2a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8016a2e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016a32:	2100      	movs	r1, #0
 8016a34:	e895 000c 	ldmia.w	r5, {r2, r3}
 8016a38:	a808      	add	r0, sp, #32
 8016a3a:	f002 fe2b 	bl	8019694 <rcutils_string_map_init>
 8016a3e:	4606      	mov	r6, r0
 8016a40:	b170      	cbz	r0, 8016a60 <rcl_node_resolve_name+0x90>
 8016a42:	f7f8 fc15 	bl	800f270 <rcutils_get_error_string>
 8016a46:	f7f8 fc2b 	bl	800f2a0 <rcutils_reset_error>
 8016a4a:	2e0a      	cmp	r6, #10
 8016a4c:	d000      	beq.n	8016a50 <rcl_node_resolve_name+0x80>
 8016a4e:	2601      	movs	r6, #1
 8016a50:	4630      	mov	r0, r6
 8016a52:	b011      	add	sp, #68	@ 0x44
 8016a54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a58:	b002      	add	sp, #8
 8016a5a:	4770      	bx	lr
 8016a5c:	260b      	movs	r6, #11
 8016a5e:	e7f7      	b.n	8016a50 <rcl_node_resolve_name+0x80>
 8016a60:	9009      	str	r0, [sp, #36]	@ 0x24
 8016a62:	9007      	str	r0, [sp, #28]
 8016a64:	a808      	add	r0, sp, #32
 8016a66:	f005 fbc9 	bl	801c1fc <rcl_get_default_topic_name_substitutions>
 8016a6a:	4606      	mov	r6, r0
 8016a6c:	b1b0      	cbz	r0, 8016a9c <rcl_node_resolve_name+0xcc>
 8016a6e:	280a      	cmp	r0, #10
 8016a70:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8016a74:	d000      	beq.n	8016a78 <rcl_node_resolve_name+0xa8>
 8016a76:	2601      	movs	r6, #1
 8016a78:	a808      	add	r0, sp, #32
 8016a7a:	f002 fe49 	bl	8019710 <rcutils_string_map_fini>
 8016a7e:	2800      	cmp	r0, #0
 8016a80:	d132      	bne.n	8016ae8 <rcl_node_resolve_name+0x118>
 8016a82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016a84:	4659      	mov	r1, fp
 8016a86:	47d0      	blx	sl
 8016a88:	4659      	mov	r1, fp
 8016a8a:	4648      	mov	r0, r9
 8016a8c:	47d0      	blx	sl
 8016a8e:	f1b8 0f00 	cmp.w	r8, #0
 8016a92:	d0dd      	beq.n	8016a50 <rcl_node_resolve_name+0x80>
 8016a94:	2e67      	cmp	r6, #103	@ 0x67
 8016a96:	bf08      	it	eq
 8016a98:	2668      	moveq	r6, #104	@ 0x68
 8016a9a:	e7d9      	b.n	8016a50 <rcl_node_resolve_name+0x80>
 8016a9c:	ab09      	add	r3, sp, #36	@ 0x24
 8016a9e:	9305      	str	r3, [sp, #20]
 8016aa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016aa2:	46ec      	mov	ip, sp
 8016aa4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016aa8:	682b      	ldr	r3, [r5, #0]
 8016aaa:	f8cc 3000 	str.w	r3, [ip]
 8016aae:	463a      	mov	r2, r7
 8016ab0:	4649      	mov	r1, r9
 8016ab2:	4620      	mov	r0, r4
 8016ab4:	ab08      	add	r3, sp, #32
 8016ab6:	f005 fa43 	bl	801bf40 <rcl_expand_topic_name>
 8016aba:	4606      	mov	r6, r0
 8016abc:	b9c8      	cbnz	r0, 8016af2 <rcl_node_resolve_name+0x122>
 8016abe:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8016ac2:	9009      	str	r0, [sp, #36]	@ 0x24
 8016ac4:	4602      	mov	r2, r0
 8016ac6:	a90a      	add	r1, sp, #40	@ 0x28
 8016ac8:	4648      	mov	r0, r9
 8016aca:	f002 ff7f 	bl	80199cc <rmw_validate_full_topic_name>
 8016ace:	b998      	cbnz	r0, 8016af8 <rcl_node_resolve_name+0x128>
 8016ad0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8016ad2:	bb14      	cbnz	r4, 8016b1a <rcl_node_resolve_name+0x14a>
 8016ad4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8016ad6:	a808      	add	r0, sp, #32
 8016ad8:	f8c3 9000 	str.w	r9, [r3]
 8016adc:	f002 fe18 	bl	8019710 <rcutils_string_map_fini>
 8016ae0:	4606      	mov	r6, r0
 8016ae2:	b978      	cbnz	r0, 8016b04 <rcl_node_resolve_name+0x134>
 8016ae4:	4681      	mov	r9, r0
 8016ae6:	e7cc      	b.n	8016a82 <rcl_node_resolve_name+0xb2>
 8016ae8:	f7f8 fbc2 	bl	800f270 <rcutils_get_error_string>
 8016aec:	f7f8 fbd8 	bl	800f2a0 <rcutils_reset_error>
 8016af0:	e7c7      	b.n	8016a82 <rcl_node_resolve_name+0xb2>
 8016af2:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8016af6:	e7bf      	b.n	8016a78 <rcl_node_resolve_name+0xa8>
 8016af8:	f7f8 fbba 	bl	800f270 <rcutils_get_error_string>
 8016afc:	2601      	movs	r6, #1
 8016afe:	f7f8 fbcf 	bl	800f2a0 <rcutils_reset_error>
 8016b02:	e7b9      	b.n	8016a78 <rcl_node_resolve_name+0xa8>
 8016b04:	f7f8 fbb4 	bl	800f270 <rcutils_get_error_string>
 8016b08:	f7f8 fbca 	bl	800f2a0 <rcutils_reset_error>
 8016b0c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016b0e:	4659      	mov	r1, fp
 8016b10:	47d0      	blx	sl
 8016b12:	4659      	mov	r1, fp
 8016b14:	4620      	mov	r0, r4
 8016b16:	47d0      	blx	sl
 8016b18:	e799      	b.n	8016a4e <rcl_node_resolve_name+0x7e>
 8016b1a:	2667      	movs	r6, #103	@ 0x67
 8016b1c:	e7ac      	b.n	8016a78 <rcl_node_resolve_name+0xa8>
 8016b1e:	bf00      	nop

08016b20 <exact_match_lookup>:
 8016b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b22:	f102 0708 	add.w	r7, r2, #8
 8016b26:	460b      	mov	r3, r1
 8016b28:	4614      	mov	r4, r2
 8016b2a:	4606      	mov	r6, r0
 8016b2c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8016b30:	b085      	sub	sp, #20
 8016b32:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016b36:	4618      	mov	r0, r3
 8016b38:	4918      	ldr	r1, [pc, #96]	@ (8016b9c <exact_match_lookup+0x7c>)
 8016b3a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8016b3e:	f002 fbc3 	bl	80192c8 <rcutils_join_path>
 8016b42:	7833      	ldrb	r3, [r6, #0]
 8016b44:	2b2f      	cmp	r3, #47	@ 0x2f
 8016b46:	4605      	mov	r5, r0
 8016b48:	d022      	beq.n	8016b90 <exact_match_lookup+0x70>
 8016b4a:	f104 030c 	add.w	r3, r4, #12
 8016b4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016b52:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016b56:	1c70      	adds	r0, r6, #1
 8016b58:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016b5c:	f002 fbba 	bl	80192d4 <rcutils_to_native_path>
 8016b60:	4606      	mov	r6, r0
 8016b62:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8016b66:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016b6a:	4631      	mov	r1, r6
 8016b6c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8016b70:	4628      	mov	r0, r5
 8016b72:	f002 fba9 	bl	80192c8 <rcutils_join_path>
 8016b76:	6863      	ldr	r3, [r4, #4]
 8016b78:	6921      	ldr	r1, [r4, #16]
 8016b7a:	4607      	mov	r7, r0
 8016b7c:	4630      	mov	r0, r6
 8016b7e:	4798      	blx	r3
 8016b80:	4628      	mov	r0, r5
 8016b82:	6863      	ldr	r3, [r4, #4]
 8016b84:	6921      	ldr	r1, [r4, #16]
 8016b86:	4798      	blx	r3
 8016b88:	463d      	mov	r5, r7
 8016b8a:	4628      	mov	r0, r5
 8016b8c:	b005      	add	sp, #20
 8016b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b90:	7873      	ldrb	r3, [r6, #1]
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d1d9      	bne.n	8016b4a <exact_match_lookup+0x2a>
 8016b96:	4628      	mov	r0, r5
 8016b98:	b005      	add	sp, #20
 8016b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b9c:	08021090 	.word	0x08021090

08016ba0 <rcl_get_secure_root>:
 8016ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ba4:	b085      	sub	sp, #20
 8016ba6:	b168      	cbz	r0, 8016bc4 <rcl_get_secure_root+0x24>
 8016ba8:	4607      	mov	r7, r0
 8016baa:	4608      	mov	r0, r1
 8016bac:	460c      	mov	r4, r1
 8016bae:	f7f8 fb51 	bl	800f254 <rcutils_allocator_is_valid>
 8016bb2:	b138      	cbz	r0, 8016bc4 <rcl_get_secure_root+0x24>
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	482d      	ldr	r0, [pc, #180]	@ (8016c6c <rcl_get_secure_root+0xcc>)
 8016bb8:	9303      	str	r3, [sp, #12]
 8016bba:	a903      	add	r1, sp, #12
 8016bbc:	f002 fb6a 	bl	8019294 <rcutils_get_env>
 8016bc0:	4605      	mov	r5, r0
 8016bc2:	b120      	cbz	r0, 8016bce <rcl_get_secure_root+0x2e>
 8016bc4:	2500      	movs	r5, #0
 8016bc6:	4628      	mov	r0, r5
 8016bc8:	b005      	add	sp, #20
 8016bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016bce:	9b03      	ldr	r3, [sp, #12]
 8016bd0:	781a      	ldrb	r2, [r3, #0]
 8016bd2:	2a00      	cmp	r2, #0
 8016bd4:	d0f6      	beq.n	8016bc4 <rcl_get_secure_root+0x24>
 8016bd6:	f104 090c 	add.w	r9, r4, #12
 8016bda:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016bde:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016be2:	4618      	mov	r0, r3
 8016be4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016be8:	f002 fc9a 	bl	8019520 <rcutils_strdup>
 8016bec:	4680      	mov	r8, r0
 8016bee:	2800      	cmp	r0, #0
 8016bf0:	d0e8      	beq.n	8016bc4 <rcl_get_secure_root+0x24>
 8016bf2:	481f      	ldr	r0, [pc, #124]	@ (8016c70 <rcl_get_secure_root+0xd0>)
 8016bf4:	9503      	str	r5, [sp, #12]
 8016bf6:	a903      	add	r1, sp, #12
 8016bf8:	f002 fb4c 	bl	8019294 <rcutils_get_env>
 8016bfc:	b160      	cbz	r0, 8016c18 <rcl_get_secure_root+0x78>
 8016bfe:	2600      	movs	r6, #0
 8016c00:	6863      	ldr	r3, [r4, #4]
 8016c02:	6921      	ldr	r1, [r4, #16]
 8016c04:	4630      	mov	r0, r6
 8016c06:	4798      	blx	r3
 8016c08:	4640      	mov	r0, r8
 8016c0a:	6863      	ldr	r3, [r4, #4]
 8016c0c:	6921      	ldr	r1, [r4, #16]
 8016c0e:	4798      	blx	r3
 8016c10:	4628      	mov	r0, r5
 8016c12:	b005      	add	sp, #20
 8016c14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c18:	9b03      	ldr	r3, [sp, #12]
 8016c1a:	781e      	ldrb	r6, [r3, #0]
 8016c1c:	b1f6      	cbz	r6, 8016c5c <rcl_get_secure_root+0xbc>
 8016c1e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016c22:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016c26:	4618      	mov	r0, r3
 8016c28:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016c2c:	f002 fc78 	bl	8019520 <rcutils_strdup>
 8016c30:	4606      	mov	r6, r0
 8016c32:	2800      	cmp	r0, #0
 8016c34:	d0e3      	beq.n	8016bfe <rcl_get_secure_root+0x5e>
 8016c36:	4622      	mov	r2, r4
 8016c38:	4641      	mov	r1, r8
 8016c3a:	f7ff ff71 	bl	8016b20 <exact_match_lookup>
 8016c3e:	4605      	mov	r5, r0
 8016c40:	2d00      	cmp	r5, #0
 8016c42:	d0dd      	beq.n	8016c00 <rcl_get_secure_root+0x60>
 8016c44:	4628      	mov	r0, r5
 8016c46:	f002 fb3d 	bl	80192c4 <rcutils_is_directory>
 8016c4a:	4607      	mov	r7, r0
 8016c4c:	2800      	cmp	r0, #0
 8016c4e:	d1d7      	bne.n	8016c00 <rcl_get_secure_root+0x60>
 8016c50:	4628      	mov	r0, r5
 8016c52:	6863      	ldr	r3, [r4, #4]
 8016c54:	6921      	ldr	r1, [r4, #16]
 8016c56:	4798      	blx	r3
 8016c58:	463d      	mov	r5, r7
 8016c5a:	e7d1      	b.n	8016c00 <rcl_get_secure_root+0x60>
 8016c5c:	4622      	mov	r2, r4
 8016c5e:	4638      	mov	r0, r7
 8016c60:	4641      	mov	r1, r8
 8016c62:	f7ff ff5d 	bl	8016b20 <exact_match_lookup>
 8016c66:	4605      	mov	r5, r0
 8016c68:	e7ea      	b.n	8016c40 <rcl_get_secure_root+0xa0>
 8016c6a:	bf00      	nop
 8016c6c:	0802109c 	.word	0x0802109c
 8016c70:	080210b4 	.word	0x080210b4

08016c74 <rcl_get_security_options_from_environment>:
 8016c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c76:	b083      	sub	sp, #12
 8016c78:	2300      	movs	r3, #0
 8016c7a:	4605      	mov	r5, r0
 8016c7c:	460e      	mov	r6, r1
 8016c7e:	481a      	ldr	r0, [pc, #104]	@ (8016ce8 <rcl_get_security_options_from_environment+0x74>)
 8016c80:	9301      	str	r3, [sp, #4]
 8016c82:	a901      	add	r1, sp, #4
 8016c84:	4617      	mov	r7, r2
 8016c86:	f002 fb05 	bl	8019294 <rcutils_get_env>
 8016c8a:	b110      	cbz	r0, 8016c92 <rcl_get_security_options_from_environment+0x1e>
 8016c8c:	2001      	movs	r0, #1
 8016c8e:	b003      	add	sp, #12
 8016c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c92:	4604      	mov	r4, r0
 8016c94:	4915      	ldr	r1, [pc, #84]	@ (8016cec <rcl_get_security_options_from_environment+0x78>)
 8016c96:	9801      	ldr	r0, [sp, #4]
 8016c98:	f7e9 fac2 	bl	8000220 <strcmp>
 8016c9c:	b9b0      	cbnz	r0, 8016ccc <rcl_get_security_options_from_environment+0x58>
 8016c9e:	9001      	str	r0, [sp, #4]
 8016ca0:	b1c7      	cbz	r7, 8016cd4 <rcl_get_security_options_from_environment+0x60>
 8016ca2:	4813      	ldr	r0, [pc, #76]	@ (8016cf0 <rcl_get_security_options_from_environment+0x7c>)
 8016ca4:	a901      	add	r1, sp, #4
 8016ca6:	f002 faf5 	bl	8019294 <rcutils_get_env>
 8016caa:	2800      	cmp	r0, #0
 8016cac:	d1ee      	bne.n	8016c8c <rcl_get_security_options_from_environment+0x18>
 8016cae:	4911      	ldr	r1, [pc, #68]	@ (8016cf4 <rcl_get_security_options_from_environment+0x80>)
 8016cb0:	9801      	ldr	r0, [sp, #4]
 8016cb2:	f7e9 fab5 	bl	8000220 <strcmp>
 8016cb6:	fab0 f080 	clz	r0, r0
 8016cba:	0940      	lsrs	r0, r0, #5
 8016cbc:	7038      	strb	r0, [r7, #0]
 8016cbe:	4631      	mov	r1, r6
 8016cc0:	4628      	mov	r0, r5
 8016cc2:	f7ff ff6d 	bl	8016ba0 <rcl_get_secure_root>
 8016cc6:	b138      	cbz	r0, 8016cd8 <rcl_get_security_options_from_environment+0x64>
 8016cc8:	6078      	str	r0, [r7, #4]
 8016cca:	e000      	b.n	8016cce <rcl_get_security_options_from_environment+0x5a>
 8016ccc:	703c      	strb	r4, [r7, #0]
 8016cce:	2000      	movs	r0, #0
 8016cd0:	b003      	add	sp, #12
 8016cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016cd4:	200b      	movs	r0, #11
 8016cd6:	e7da      	b.n	8016c8e <rcl_get_security_options_from_environment+0x1a>
 8016cd8:	7838      	ldrb	r0, [r7, #0]
 8016cda:	f1a0 0001 	sub.w	r0, r0, #1
 8016cde:	fab0 f080 	clz	r0, r0
 8016ce2:	0940      	lsrs	r0, r0, #5
 8016ce4:	e7d3      	b.n	8016c8e <rcl_get_security_options_from_environment+0x1a>
 8016ce6:	bf00      	nop
 8016ce8:	08021054 	.word	0x08021054
 8016cec:	08021068 	.word	0x08021068
 8016cf0:	08021070 	.word	0x08021070
 8016cf4:	08021088 	.word	0x08021088

08016cf8 <rcl_get_zero_initialized_service>:
 8016cf8:	4b01      	ldr	r3, [pc, #4]	@ (8016d00 <rcl_get_zero_initialized_service+0x8>)
 8016cfa:	6818      	ldr	r0, [r3, #0]
 8016cfc:	4770      	bx	lr
 8016cfe:	bf00      	nop
 8016d00:	080210d4 	.word	0x080210d4

08016d04 <rcl_service_init>:
 8016d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d08:	b086      	sub	sp, #24
 8016d0a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8016d0c:	2d00      	cmp	r5, #0
 8016d0e:	d049      	beq.n	8016da4 <rcl_service_init+0xa0>
 8016d10:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8016d14:	4604      	mov	r4, r0
 8016d16:	4648      	mov	r0, r9
 8016d18:	4688      	mov	r8, r1
 8016d1a:	4617      	mov	r7, r2
 8016d1c:	461e      	mov	r6, r3
 8016d1e:	f7f8 fa99 	bl	800f254 <rcutils_allocator_is_valid>
 8016d22:	2800      	cmp	r0, #0
 8016d24:	d03e      	beq.n	8016da4 <rcl_service_init+0xa0>
 8016d26:	2c00      	cmp	r4, #0
 8016d28:	d03c      	beq.n	8016da4 <rcl_service_init+0xa0>
 8016d2a:	4640      	mov	r0, r8
 8016d2c:	f7ff fdc0 	bl	80168b0 <rcl_node_is_valid>
 8016d30:	2800      	cmp	r0, #0
 8016d32:	d041      	beq.n	8016db8 <rcl_service_init+0xb4>
 8016d34:	2f00      	cmp	r7, #0
 8016d36:	d035      	beq.n	8016da4 <rcl_service_init+0xa0>
 8016d38:	2e00      	cmp	r6, #0
 8016d3a:	d033      	beq.n	8016da4 <rcl_service_init+0xa0>
 8016d3c:	f8d4 a000 	ldr.w	sl, [r4]
 8016d40:	f1ba 0f00 	cmp.w	sl, #0
 8016d44:	d133      	bne.n	8016dae <rcl_service_init+0xaa>
 8016d46:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 8016d4a:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8016d4e:	2001      	movs	r0, #1
 8016d50:	4798      	blx	r3
 8016d52:	6020      	str	r0, [r4, #0]
 8016d54:	2800      	cmp	r0, #0
 8016d56:	d075      	beq.n	8016e44 <rcl_service_init+0x140>
 8016d58:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8016d5c:	2201      	movs	r2, #1
 8016d5e:	f8cd a010 	str.w	sl, [sp, #16]
 8016d62:	9005      	str	r0, [sp, #20]
 8016d64:	9203      	str	r2, [sp, #12]
 8016d66:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 8016d6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016d6e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016d72:	4631      	mov	r1, r6
 8016d74:	e899 000c 	ldmia.w	r9, {r2, r3}
 8016d78:	4640      	mov	r0, r8
 8016d7a:	f7ff fe29 	bl	80169d0 <rcl_node_resolve_name>
 8016d7e:	4606      	mov	r6, r0
 8016d80:	b1f8      	cbz	r0, 8016dc2 <rcl_service_init+0xbe>
 8016d82:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 8016d86:	2b01      	cmp	r3, #1
 8016d88:	6820      	ldr	r0, [r4, #0]
 8016d8a:	d943      	bls.n	8016e14 <rcl_service_init+0x110>
 8016d8c:	2e0a      	cmp	r6, #10
 8016d8e:	bf18      	it	ne
 8016d90:	2601      	movne	r6, #1
 8016d92:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8016d94:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8016d96:	4798      	blx	r3
 8016d98:	2300      	movs	r3, #0
 8016d9a:	4630      	mov	r0, r6
 8016d9c:	6023      	str	r3, [r4, #0]
 8016d9e:	b006      	add	sp, #24
 8016da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016da4:	260b      	movs	r6, #11
 8016da6:	4630      	mov	r0, r6
 8016da8:	b006      	add	sp, #24
 8016daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dae:	2664      	movs	r6, #100	@ 0x64
 8016db0:	4630      	mov	r0, r6
 8016db2:	b006      	add	sp, #24
 8016db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016db8:	26c8      	movs	r6, #200	@ 0xc8
 8016dba:	4630      	mov	r0, r6
 8016dbc:	b006      	add	sp, #24
 8016dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dc2:	4640      	mov	r0, r8
 8016dc4:	f7ff fd96 	bl	80168f4 <rcl_node_get_rmw_handle>
 8016dc8:	6826      	ldr	r6, [r4, #0]
 8016dca:	4639      	mov	r1, r7
 8016dcc:	f8d6 2110 	ldr.w	r2, [r6, #272]	@ 0x110
 8016dd0:	462b      	mov	r3, r5
 8016dd2:	f7f9 f807 	bl	800fde4 <rmw_create_service>
 8016dd6:	6821      	ldr	r1, [r4, #0]
 8016dd8:	f8c6 0108 	str.w	r0, [r6, #264]	@ 0x108
 8016ddc:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 8016de0:	b390      	cbz	r0, 8016e48 <rcl_service_init+0x144>
 8016de2:	3168      	adds	r1, #104	@ 0x68
 8016de4:	f7f9 f922 	bl	801002c <rmw_service_request_subscription_get_actual_qos>
 8016de8:	b9b0      	cbnz	r0, 8016e18 <rcl_service_init+0x114>
 8016dea:	6823      	ldr	r3, [r4, #0]
 8016dec:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8016df0:	f103 01b8 	add.w	r1, r3, #184	@ 0xb8
 8016df4:	f7f9 f90c 	bl	8010010 <rmw_service_response_publisher_get_actual_qos>
 8016df8:	4606      	mov	r6, r0
 8016dfa:	b968      	cbnz	r0, 8016e18 <rcl_service_init+0x114>
 8016dfc:	6820      	ldr	r0, [r4, #0]
 8016dfe:	f895 3048 	ldrb.w	r3, [r5, #72]	@ 0x48
 8016e02:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 8016e06:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 8016e0a:	2268      	movs	r2, #104	@ 0x68
 8016e0c:	4629      	mov	r1, r5
 8016e0e:	f006 fde6 	bl	801d9de <memcpy>
 8016e12:	e7c8      	b.n	8016da6 <rcl_service_init+0xa2>
 8016e14:	2668      	movs	r6, #104	@ 0x68
 8016e16:	e7bc      	b.n	8016d92 <rcl_service_init+0x8e>
 8016e18:	f7ff fa08 	bl	801622c <rcl_convert_rmw_ret_to_rcl_ret>
 8016e1c:	4606      	mov	r6, r0
 8016e1e:	4640      	mov	r0, r8
 8016e20:	f7ff fd68 	bl	80168f4 <rcl_node_get_rmw_handle>
 8016e24:	6823      	ldr	r3, [r4, #0]
 8016e26:	f8d3 1108 	ldr.w	r1, [r3, #264]	@ 0x108
 8016e2a:	f7f9 f8ad 	bl	800ff88 <rmw_destroy_service>
 8016e2e:	6821      	ldr	r1, [r4, #0]
 8016e30:	f8d1 0110 	ldr.w	r0, [r1, #272]	@ 0x110
 8016e34:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8016e36:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8016e38:	4798      	blx	r3
 8016e3a:	6820      	ldr	r0, [r4, #0]
 8016e3c:	2300      	movs	r3, #0
 8016e3e:	f8c0 3110 	str.w	r3, [r0, #272]	@ 0x110
 8016e42:	e7a6      	b.n	8016d92 <rcl_service_init+0x8e>
 8016e44:	260a      	movs	r6, #10
 8016e46:	e7ae      	b.n	8016da6 <rcl_service_init+0xa2>
 8016e48:	2601      	movs	r6, #1
 8016e4a:	e7f1      	b.n	8016e30 <rcl_service_init+0x12c>

08016e4c <rcl_service_get_default_options>:
 8016e4c:	b530      	push	{r4, r5, lr}
 8016e4e:	4d0f      	ldr	r5, [pc, #60]	@ (8016e8c <rcl_service_get_default_options+0x40>)
 8016e50:	490f      	ldr	r1, [pc, #60]	@ (8016e90 <rcl_service_get_default_options+0x44>)
 8016e52:	b087      	sub	sp, #28
 8016e54:	4604      	mov	r4, r0
 8016e56:	2250      	movs	r2, #80	@ 0x50
 8016e58:	4628      	mov	r0, r5
 8016e5a:	f006 fdc0 	bl	801d9de <memcpy>
 8016e5e:	4668      	mov	r0, sp
 8016e60:	f7f8 f9cc 	bl	800f1fc <rcutils_get_default_allocator>
 8016e64:	46ec      	mov	ip, sp
 8016e66:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016e6a:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8016e6e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016e72:	2268      	movs	r2, #104	@ 0x68
 8016e74:	f8dc 3000 	ldr.w	r3, [ip]
 8016e78:	f8ce 3000 	str.w	r3, [lr]
 8016e7c:	4629      	mov	r1, r5
 8016e7e:	4620      	mov	r0, r4
 8016e80:	f006 fdad 	bl	801d9de <memcpy>
 8016e84:	4620      	mov	r0, r4
 8016e86:	b007      	add	sp, #28
 8016e88:	bd30      	pop	{r4, r5, pc}
 8016e8a:	bf00      	nop
 8016e8c:	2000f148 	.word	0x2000f148
 8016e90:	080210d8 	.word	0x080210d8

08016e94 <rcl_service_get_rmw_handle>:
 8016e94:	b118      	cbz	r0, 8016e9e <rcl_service_get_rmw_handle+0xa>
 8016e96:	6800      	ldr	r0, [r0, #0]
 8016e98:	b108      	cbz	r0, 8016e9e <rcl_service_get_rmw_handle+0xa>
 8016e9a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016e9e:	4770      	bx	lr

08016ea0 <rcl_take_request>:
 8016ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ea2:	468e      	mov	lr, r1
 8016ea4:	460c      	mov	r4, r1
 8016ea6:	4617      	mov	r7, r2
 8016ea8:	4605      	mov	r5, r0
 8016eaa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016eae:	b091      	sub	sp, #68	@ 0x44
 8016eb0:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8016eb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016eb8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016ebc:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016ec0:	b30d      	cbz	r5, 8016f06 <rcl_take_request+0x66>
 8016ec2:	682b      	ldr	r3, [r5, #0]
 8016ec4:	b1fb      	cbz	r3, 8016f06 <rcl_take_request+0x66>
 8016ec6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8016eca:	b1e0      	cbz	r0, 8016f06 <rcl_take_request+0x66>
 8016ecc:	b397      	cbz	r7, 8016f34 <rcl_take_request+0x94>
 8016ece:	2300      	movs	r3, #0
 8016ed0:	f88d 3017 	strb.w	r3, [sp, #23]
 8016ed4:	463a      	mov	r2, r7
 8016ed6:	f10d 0317 	add.w	r3, sp, #23
 8016eda:	a906      	add	r1, sp, #24
 8016edc:	f003 f8d6 	bl	801a08c <rmw_take_request>
 8016ee0:	4606      	mov	r6, r0
 8016ee2:	b198      	cbz	r0, 8016f0c <rcl_take_request+0x6c>
 8016ee4:	280a      	cmp	r0, #10
 8016ee6:	bf18      	it	ne
 8016ee8:	2601      	movne	r6, #1
 8016eea:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8016eee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016ef2:	46a6      	mov	lr, r4
 8016ef4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016ef8:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8016efc:	e88e 0003 	stmia.w	lr, {r0, r1}
 8016f00:	4630      	mov	r0, r6
 8016f02:	b011      	add	sp, #68	@ 0x44
 8016f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f06:	f44f 7616 	mov.w	r6, #600	@ 0x258
 8016f0a:	e7ee      	b.n	8016eea <rcl_take_request+0x4a>
 8016f0c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8016f10:	b193      	cbz	r3, 8016f38 <rcl_take_request+0x98>
 8016f12:	682b      	ldr	r3, [r5, #0]
 8016f14:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
 8016f18:	2800      	cmp	r0, #0
 8016f1a:	d0e6      	beq.n	8016eea <rcl_take_request+0x4a>
 8016f1c:	463a      	mov	r2, r7
 8016f1e:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	@ 0x38
 8016f22:	ab0a      	add	r3, sp, #40	@ 0x28
 8016f24:	e9cd 6700 	strd	r6, r7, [sp]
 8016f28:	9302      	str	r3, [sp, #8]
 8016f2a:	2101      	movs	r1, #1
 8016f2c:	f000 f844 	bl	8016fb8 <rcl_send_service_event_message>
 8016f30:	4606      	mov	r6, r0
 8016f32:	e7da      	b.n	8016eea <rcl_take_request+0x4a>
 8016f34:	260b      	movs	r6, #11
 8016f36:	e7d8      	b.n	8016eea <rcl_take_request+0x4a>
 8016f38:	f240 2659 	movw	r6, #601	@ 0x259
 8016f3c:	e7d5      	b.n	8016eea <rcl_take_request+0x4a>
 8016f3e:	bf00      	nop

08016f40 <rcl_send_response>:
 8016f40:	b350      	cbz	r0, 8016f98 <rcl_send_response+0x58>
 8016f42:	b570      	push	{r4, r5, r6, lr}
 8016f44:	6803      	ldr	r3, [r0, #0]
 8016f46:	b084      	sub	sp, #16
 8016f48:	4604      	mov	r4, r0
 8016f4a:	b1cb      	cbz	r3, 8016f80 <rcl_send_response+0x40>
 8016f4c:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8016f50:	b1b0      	cbz	r0, 8016f80 <rcl_send_response+0x40>
 8016f52:	460e      	mov	r6, r1
 8016f54:	b1e9      	cbz	r1, 8016f92 <rcl_send_response+0x52>
 8016f56:	4615      	mov	r5, r2
 8016f58:	b1da      	cbz	r2, 8016f92 <rcl_send_response+0x52>
 8016f5a:	f003 f8f5 	bl	801a148 <rmw_send_response>
 8016f5e:	b998      	cbnz	r0, 8016f88 <rcl_send_response+0x48>
 8016f60:	6823      	ldr	r3, [r4, #0]
 8016f62:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8016f66:	b16b      	cbz	r3, 8016f84 <rcl_send_response+0x44>
 8016f68:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 8016f6c:	462a      	mov	r2, r5
 8016f6e:	e9cd 0100 	strd	r0, r1, [sp]
 8016f72:	9602      	str	r6, [sp, #8]
 8016f74:	2102      	movs	r1, #2
 8016f76:	4618      	mov	r0, r3
 8016f78:	f000 f81e 	bl	8016fb8 <rcl_send_service_event_message>
 8016f7c:	b004      	add	sp, #16
 8016f7e:	bd70      	pop	{r4, r5, r6, pc}
 8016f80:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8016f84:	b004      	add	sp, #16
 8016f86:	bd70      	pop	{r4, r5, r6, pc}
 8016f88:	2802      	cmp	r0, #2
 8016f8a:	bf18      	it	ne
 8016f8c:	2001      	movne	r0, #1
 8016f8e:	b004      	add	sp, #16
 8016f90:	bd70      	pop	{r4, r5, r6, pc}
 8016f92:	200b      	movs	r0, #11
 8016f94:	b004      	add	sp, #16
 8016f96:	bd70      	pop	{r4, r5, r6, pc}
 8016f98:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8016f9c:	4770      	bx	lr
 8016f9e:	bf00      	nop

08016fa0 <rcl_service_is_valid>:
 8016fa0:	b130      	cbz	r0, 8016fb0 <rcl_service_is_valid+0x10>
 8016fa2:	6800      	ldr	r0, [r0, #0]
 8016fa4:	b120      	cbz	r0, 8016fb0 <rcl_service_is_valid+0x10>
 8016fa6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016faa:	3800      	subs	r0, #0
 8016fac:	bf18      	it	ne
 8016fae:	2001      	movne	r0, #1
 8016fb0:	4770      	bx	lr
 8016fb2:	bf00      	nop
 8016fb4:	0000      	movs	r0, r0
	...

08016fb8 <rcl_send_service_event_message>:
 8016fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fba:	b093      	sub	sp, #76	@ 0x4c
 8016fbc:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8016fbe:	b17a      	cbz	r2, 8016fe0 <rcl_send_service_event_message+0x28>
 8016fc0:	b176      	cbz	r6, 8016fe0 <rcl_send_service_event_message+0x28>
 8016fc2:	4604      	mov	r4, r0
 8016fc4:	b150      	cbz	r0, 8016fdc <rcl_send_service_event_message+0x24>
 8016fc6:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8016fca:	b13b      	cbz	r3, 8016fdc <rcl_send_service_event_message+0x24>
 8016fcc:	68c0      	ldr	r0, [r0, #12]
 8016fce:	460f      	mov	r7, r1
 8016fd0:	4615      	mov	r5, r2
 8016fd2:	f000 f8fb 	bl	80171cc <rcl_clock_valid>
 8016fd6:	b108      	cbz	r0, 8016fdc <rcl_send_service_event_message+0x24>
 8016fd8:	7a23      	ldrb	r3, [r4, #8]
 8016fda:	b92b      	cbnz	r3, 8016fe8 <rcl_send_service_event_message+0x30>
 8016fdc:	2501      	movs	r5, #1
 8016fde:	e000      	b.n	8016fe2 <rcl_send_service_event_message+0x2a>
 8016fe0:	250b      	movs	r5, #11
 8016fe2:	4628      	mov	r0, r5
 8016fe4:	b013      	add	sp, #76	@ 0x4c
 8016fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fe8:	f104 0e60 	add.w	lr, r4, #96	@ 0x60
 8016fec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016ff0:	f10d 0c0c 	add.w	ip, sp, #12
 8016ff4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016ff8:	f8de 3000 	ldr.w	r3, [lr]
 8016ffc:	f8cc 3000 	str.w	r3, [ip]
 8017000:	a803      	add	r0, sp, #12
 8017002:	f7f8 f927 	bl	800f254 <rcutils_allocator_is_valid>
 8017006:	2800      	cmp	r0, #0
 8017008:	d0ea      	beq.n	8016fe0 <rcl_send_service_event_message+0x28>
 801700a:	6820      	ldr	r0, [r4, #0]
 801700c:	f7f7 f984 	bl	800e318 <rcl_publisher_is_valid>
 8017010:	2800      	cmp	r0, #0
 8017012:	d045      	beq.n	80170a0 <rcl_send_service_event_message+0xe8>
 8017014:	4669      	mov	r1, sp
 8017016:	68e0      	ldr	r0, [r4, #12]
 8017018:	f000 f950 	bl	80172bc <rcl_clock_get_now>
 801701c:	4601      	mov	r1, r0
 801701e:	2800      	cmp	r0, #0
 8017020:	d13b      	bne.n	801709a <rcl_send_service_event_message+0xe2>
 8017022:	2220      	movs	r2, #32
 8017024:	eb0d 0002 	add.w	r0, sp, r2
 8017028:	f006 fbfe 	bl	801d828 <memset>
 801702c:	a324      	add	r3, pc, #144	@ (adr r3, 80170c0 <rcl_send_service_event_message+0x108>)
 801702e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017032:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017036:	f88d 7020 	strb.w	r7, [sp, #32]
 801703a:	f7e9 fe15 	bl	8000c68 <__aeabi_ldivmod>
 801703e:	e9cd 0209 	strd	r0, r2, [sp, #36]	@ 0x24
 8017042:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	@ 0x60
 8017046:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801704a:	7a23      	ldrb	r3, [r4, #8]
 801704c:	6830      	ldr	r0, [r6, #0]
 801704e:	6871      	ldr	r1, [r6, #4]
 8017050:	68b2      	ldr	r2, [r6, #8]
 8017052:	2b01      	cmp	r3, #1
 8017054:	68f3      	ldr	r3, [r6, #12]
 8017056:	bf08      	it	eq
 8017058:	2500      	moveq	r5, #0
 801705a:	ae0b      	add	r6, sp, #44	@ 0x2c
 801705c:	2f01      	cmp	r7, #1
 801705e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8017060:	d821      	bhi.n	80170a6 <rcl_send_service_event_message+0xee>
 8017062:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8017066:	462a      	mov	r2, r5
 8017068:	a808      	add	r0, sp, #32
 801706a:	699d      	ldr	r5, [r3, #24]
 801706c:	a903      	add	r1, sp, #12
 801706e:	2300      	movs	r3, #0
 8017070:	47a8      	blx	r5
 8017072:	4606      	mov	r6, r0
 8017074:	2e00      	cmp	r6, #0
 8017076:	d0b1      	beq.n	8016fdc <rcl_send_service_event_message+0x24>
 8017078:	4631      	mov	r1, r6
 801707a:	6820      	ldr	r0, [r4, #0]
 801707c:	2200      	movs	r2, #0
 801707e:	f7f7 f927 	bl	800e2d0 <rcl_publish>
 8017082:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8017086:	4605      	mov	r5, r0
 8017088:	69db      	ldr	r3, [r3, #28]
 801708a:	a903      	add	r1, sp, #12
 801708c:	4630      	mov	r0, r6
 801708e:	4798      	blx	r3
 8017090:	2d00      	cmp	r5, #0
 8017092:	d0a6      	beq.n	8016fe2 <rcl_send_service_event_message+0x2a>
 8017094:	f7f8 f904 	bl	800f2a0 <rcutils_reset_error>
 8017098:	e7a3      	b.n	8016fe2 <rcl_send_service_event_message+0x2a>
 801709a:	f7f8 f901 	bl	800f2a0 <rcutils_reset_error>
 801709e:	e79d      	b.n	8016fdc <rcl_send_service_event_message+0x24>
 80170a0:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 80170a4:	e79d      	b.n	8016fe2 <rcl_send_service_event_message+0x2a>
 80170a6:	1eb9      	subs	r1, r7, #2
 80170a8:	2901      	cmp	r1, #1
 80170aa:	d8f6      	bhi.n	801709a <rcl_send_service_event_message+0xe2>
 80170ac:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80170b0:	462b      	mov	r3, r5
 80170b2:	a808      	add	r0, sp, #32
 80170b4:	6995      	ldr	r5, [r2, #24]
 80170b6:	a903      	add	r1, sp, #12
 80170b8:	2200      	movs	r2, #0
 80170ba:	47a8      	blx	r5
 80170bc:	4606      	mov	r6, r0
 80170be:	e7d9      	b.n	8017074 <rcl_send_service_event_message+0xbc>
 80170c0:	3b9aca00 	.word	0x3b9aca00
 80170c4:	00000000 	.word	0x00000000

080170c8 <rcl_take>:
 80170c8:	2800      	cmp	r0, #0
 80170ca:	d04b      	beq.n	8017164 <rcl_take+0x9c>
 80170cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170d0:	4615      	mov	r5, r2
 80170d2:	6802      	ldr	r2, [r0, #0]
 80170d4:	b0a0      	sub	sp, #128	@ 0x80
 80170d6:	4604      	mov	r4, r0
 80170d8:	2a00      	cmp	r2, #0
 80170da:	d03b      	beq.n	8017154 <rcl_take+0x8c>
 80170dc:	461f      	mov	r7, r3
 80170de:	f8d2 30c8 	ldr.w	r3, [r2, #200]	@ 0xc8
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d036      	beq.n	8017154 <rcl_take+0x8c>
 80170e6:	460e      	mov	r6, r1
 80170e8:	2900      	cmp	r1, #0
 80170ea:	d039      	beq.n	8017160 <rcl_take+0x98>
 80170ec:	2d00      	cmp	r5, #0
 80170ee:	d03d      	beq.n	801716c <rcl_take+0xa4>
 80170f0:	a802      	add	r0, sp, #8
 80170f2:	f002 fc63 	bl	80199bc <rmw_get_zero_initialized_message_info>
 80170f6:	6823      	ldr	r3, [r4, #0]
 80170f8:	f10d 0c08 	add.w	ip, sp, #8
 80170fc:	f8d3 40c8 	ldr.w	r4, [r3, #200]	@ 0xc8
 8017100:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017104:	46ae      	mov	lr, r5
 8017106:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801710a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801710e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017112:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017116:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801711a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801711e:	462b      	mov	r3, r5
 8017120:	e88e 0003 	stmia.w	lr, {r0, r1}
 8017124:	f04f 0800 	mov.w	r8, #0
 8017128:	f10d 0247 	add.w	r2, sp, #71	@ 0x47
 801712c:	4631      	mov	r1, r6
 801712e:	4620      	mov	r0, r4
 8017130:	f88d 8047 	strb.w	r8, [sp, #71]	@ 0x47
 8017134:	9700      	str	r7, [sp, #0]
 8017136:	f003 f8ab 	bl	801a290 <rmw_take_with_info>
 801713a:	4603      	mov	r3, r0
 801713c:	b9c0      	cbnz	r0, 8017170 <rcl_take+0xa8>
 801713e:	f89d 1047 	ldrb.w	r1, [sp, #71]	@ 0x47
 8017142:	f240 1291 	movw	r2, #401	@ 0x191
 8017146:	2900      	cmp	r1, #0
 8017148:	bf08      	it	eq
 801714a:	4613      	moveq	r3, r2
 801714c:	4618      	mov	r0, r3
 801714e:	b020      	add	sp, #128	@ 0x80
 8017150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017154:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8017158:	4618      	mov	r0, r3
 801715a:	b020      	add	sp, #128	@ 0x80
 801715c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017160:	230b      	movs	r3, #11
 8017162:	e7f3      	b.n	801714c <rcl_take+0x84>
 8017164:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8017168:	4618      	mov	r0, r3
 801716a:	4770      	bx	lr
 801716c:	ad12      	add	r5, sp, #72	@ 0x48
 801716e:	e7bf      	b.n	80170f0 <rcl_take+0x28>
 8017170:	f7ff f85c 	bl	801622c <rcl_convert_rmw_ret_to_rcl_ret>
 8017174:	4603      	mov	r3, r0
 8017176:	e7e9      	b.n	801714c <rcl_take+0x84>

08017178 <rcl_subscription_get_rmw_handle>:
 8017178:	b118      	cbz	r0, 8017182 <rcl_subscription_get_rmw_handle+0xa>
 801717a:	6800      	ldr	r0, [r0, #0]
 801717c:	b108      	cbz	r0, 8017182 <rcl_subscription_get_rmw_handle+0xa>
 801717e:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 8017182:	4770      	bx	lr

08017184 <rcl_subscription_is_valid>:
 8017184:	b130      	cbz	r0, 8017194 <rcl_subscription_is_valid+0x10>
 8017186:	6800      	ldr	r0, [r0, #0]
 8017188:	b120      	cbz	r0, 8017194 <rcl_subscription_is_valid+0x10>
 801718a:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 801718e:	3800      	subs	r0, #0
 8017190:	bf18      	it	ne
 8017192:	2001      	movne	r0, #1
 8017194:	4770      	bx	lr
 8017196:	bf00      	nop

08017198 <rcl_get_system_time>:
 8017198:	4608      	mov	r0, r1
 801719a:	f7f8 b89d 	b.w	800f2d8 <rcutils_system_time_now>
 801719e:	bf00      	nop

080171a0 <rcl_get_steady_time>:
 80171a0:	4608      	mov	r0, r1
 80171a2:	f7f8 b8c3 	b.w	800f32c <rcutils_steady_time_now>
 80171a6:	bf00      	nop

080171a8 <rcl_get_ros_time>:
 80171a8:	7a03      	ldrb	r3, [r0, #8]
 80171aa:	b510      	push	{r4, lr}
 80171ac:	460c      	mov	r4, r1
 80171ae:	b143      	cbz	r3, 80171c2 <rcl_get_ros_time+0x1a>
 80171b0:	2105      	movs	r1, #5
 80171b2:	f001 ffc9 	bl	8019148 <__atomic_load_8>
 80171b6:	4602      	mov	r2, r0
 80171b8:	460b      	mov	r3, r1
 80171ba:	e9c4 2300 	strd	r2, r3, [r4]
 80171be:	2000      	movs	r0, #0
 80171c0:	bd10      	pop	{r4, pc}
 80171c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80171c6:	4608      	mov	r0, r1
 80171c8:	f7f8 b886 	b.w	800f2d8 <rcutils_system_time_now>

080171cc <rcl_clock_valid>:
 80171cc:	b138      	cbz	r0, 80171de <rcl_clock_valid+0x12>
 80171ce:	7803      	ldrb	r3, [r0, #0]
 80171d0:	b123      	cbz	r3, 80171dc <rcl_clock_valid+0x10>
 80171d2:	68c0      	ldr	r0, [r0, #12]
 80171d4:	3800      	subs	r0, #0
 80171d6:	bf18      	it	ne
 80171d8:	2001      	movne	r0, #1
 80171da:	4770      	bx	lr
 80171dc:	4618      	mov	r0, r3
 80171de:	4770      	bx	lr

080171e0 <rcl_clock_init>:
 80171e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171e2:	4605      	mov	r5, r0
 80171e4:	4610      	mov	r0, r2
 80171e6:	4614      	mov	r4, r2
 80171e8:	460e      	mov	r6, r1
 80171ea:	f7f8 f833 	bl	800f254 <rcutils_allocator_is_valid>
 80171ee:	b128      	cbz	r0, 80171fc <rcl_clock_init+0x1c>
 80171f0:	2d03      	cmp	r5, #3
 80171f2:	d803      	bhi.n	80171fc <rcl_clock_init+0x1c>
 80171f4:	e8df f005 	tbb	[pc, r5]
 80171f8:	044c291a 	.word	0x044c291a
 80171fc:	200b      	movs	r0, #11
 80171fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017200:	2e00      	cmp	r6, #0
 8017202:	d0fb      	beq.n	80171fc <rcl_clock_init+0x1c>
 8017204:	2c00      	cmp	r4, #0
 8017206:	d0f9      	beq.n	80171fc <rcl_clock_init+0x1c>
 8017208:	2300      	movs	r3, #0
 801720a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801720e:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 80172b4 <rcl_clock_init+0xd4>
 8017212:	6133      	str	r3, [r6, #16]
 8017214:	f106 0514 	add.w	r5, r6, #20
 8017218:	2703      	movs	r7, #3
 801721a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801721c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801721e:	6823      	ldr	r3, [r4, #0]
 8017220:	602b      	str	r3, [r5, #0]
 8017222:	f8c6 c00c 	str.w	ip, [r6, #12]
 8017226:	7037      	strb	r7, [r6, #0]
 8017228:	2000      	movs	r0, #0
 801722a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801722c:	2e00      	cmp	r6, #0
 801722e:	d0e5      	beq.n	80171fc <rcl_clock_init+0x1c>
 8017230:	2300      	movs	r3, #0
 8017232:	7033      	strb	r3, [r6, #0]
 8017234:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8017238:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801723c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801723e:	f106 0514 	add.w	r5, r6, #20
 8017242:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017244:	6823      	ldr	r3, [r4, #0]
 8017246:	602b      	str	r3, [r5, #0]
 8017248:	e7ee      	b.n	8017228 <rcl_clock_init+0x48>
 801724a:	2e00      	cmp	r6, #0
 801724c:	d0d6      	beq.n	80171fc <rcl_clock_init+0x1c>
 801724e:	2c00      	cmp	r4, #0
 8017250:	d0d4      	beq.n	80171fc <rcl_clock_init+0x1c>
 8017252:	2700      	movs	r7, #0
 8017254:	7037      	strb	r7, [r6, #0]
 8017256:	46a4      	mov	ip, r4
 8017258:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801725c:	f106 0514 	add.w	r5, r6, #20
 8017260:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8017264:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8017268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801726a:	f8dc 3000 	ldr.w	r3, [ip]
 801726e:	602b      	str	r3, [r5, #0]
 8017270:	6921      	ldr	r1, [r4, #16]
 8017272:	6823      	ldr	r3, [r4, #0]
 8017274:	2010      	movs	r0, #16
 8017276:	4798      	blx	r3
 8017278:	6130      	str	r0, [r6, #16]
 801727a:	b1b8      	cbz	r0, 80172ac <rcl_clock_init+0xcc>
 801727c:	2200      	movs	r2, #0
 801727e:	2300      	movs	r3, #0
 8017280:	e9c0 2300 	strd	r2, r3, [r0]
 8017284:	4a0a      	ldr	r2, [pc, #40]	@ (80172b0 <rcl_clock_init+0xd0>)
 8017286:	7207      	strb	r7, [r0, #8]
 8017288:	2301      	movs	r3, #1
 801728a:	60f2      	str	r2, [r6, #12]
 801728c:	7033      	strb	r3, [r6, #0]
 801728e:	e7cb      	b.n	8017228 <rcl_clock_init+0x48>
 8017290:	2e00      	cmp	r6, #0
 8017292:	d0b3      	beq.n	80171fc <rcl_clock_init+0x1c>
 8017294:	2c00      	cmp	r4, #0
 8017296:	d0b1      	beq.n	80171fc <rcl_clock_init+0x1c>
 8017298:	2300      	movs	r3, #0
 801729a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801729e:	f8df c018 	ldr.w	ip, [pc, #24]	@ 80172b8 <rcl_clock_init+0xd8>
 80172a2:	6133      	str	r3, [r6, #16]
 80172a4:	f106 0514 	add.w	r5, r6, #20
 80172a8:	2702      	movs	r7, #2
 80172aa:	e7b6      	b.n	801721a <rcl_clock_init+0x3a>
 80172ac:	200a      	movs	r0, #10
 80172ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172b0:	080171a9 	.word	0x080171a9
 80172b4:	080171a1 	.word	0x080171a1
 80172b8:	08017199 	.word	0x08017199

080172bc <rcl_clock_get_now>:
 80172bc:	b140      	cbz	r0, 80172d0 <rcl_clock_get_now+0x14>
 80172be:	b139      	cbz	r1, 80172d0 <rcl_clock_get_now+0x14>
 80172c0:	7803      	ldrb	r3, [r0, #0]
 80172c2:	b11b      	cbz	r3, 80172cc <rcl_clock_get_now+0x10>
 80172c4:	68c3      	ldr	r3, [r0, #12]
 80172c6:	b10b      	cbz	r3, 80172cc <rcl_clock_get_now+0x10>
 80172c8:	6900      	ldr	r0, [r0, #16]
 80172ca:	4718      	bx	r3
 80172cc:	2001      	movs	r0, #1
 80172ce:	4770      	bx	lr
 80172d0:	200b      	movs	r0, #11
 80172d2:	4770      	bx	lr

080172d4 <rcl_is_enabled_ros_time_override>:
 80172d4:	b158      	cbz	r0, 80172ee <rcl_is_enabled_ros_time_override+0x1a>
 80172d6:	b151      	cbz	r1, 80172ee <rcl_is_enabled_ros_time_override+0x1a>
 80172d8:	7803      	ldrb	r3, [r0, #0]
 80172da:	2b01      	cmp	r3, #1
 80172dc:	d105      	bne.n	80172ea <rcl_is_enabled_ros_time_override+0x16>
 80172de:	6902      	ldr	r2, [r0, #16]
 80172e0:	b11a      	cbz	r2, 80172ea <rcl_is_enabled_ros_time_override+0x16>
 80172e2:	7a13      	ldrb	r3, [r2, #8]
 80172e4:	700b      	strb	r3, [r1, #0]
 80172e6:	2000      	movs	r0, #0
 80172e8:	4770      	bx	lr
 80172ea:	2001      	movs	r0, #1
 80172ec:	4770      	bx	lr
 80172ee:	200b      	movs	r0, #11
 80172f0:	4770      	bx	lr
 80172f2:	bf00      	nop

080172f4 <rcl_clock_add_jump_callback>:
 80172f4:	b082      	sub	sp, #8
 80172f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172fa:	a906      	add	r1, sp, #24
 80172fc:	e881 000c 	stmia.w	r1, {r2, r3}
 8017300:	e9dd 760c 	ldrd	r7, r6, [sp, #48]	@ 0x30
 8017304:	b320      	cbz	r0, 8017350 <rcl_clock_add_jump_callback+0x5c>
 8017306:	4605      	mov	r5, r0
 8017308:	3014      	adds	r0, #20
 801730a:	f7f7 ffa3 	bl	800f254 <rcutils_allocator_is_valid>
 801730e:	b1f8      	cbz	r0, 8017350 <rcl_clock_add_jump_callback+0x5c>
 8017310:	b1f7      	cbz	r7, 8017350 <rcl_clock_add_jump_callback+0x5c>
 8017312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017314:	2b00      	cmp	r3, #0
 8017316:	db1b      	blt.n	8017350 <rcl_clock_add_jump_callback+0x5c>
 8017318:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801731c:	2a01      	cmp	r2, #1
 801731e:	f173 0300 	sbcs.w	r3, r3, #0
 8017322:	da15      	bge.n	8017350 <rcl_clock_add_jump_callback+0x5c>
 8017324:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
 8017328:	2c00      	cmp	r4, #0
 801732a:	d042      	beq.n	80173b2 <rcl_clock_add_jump_callback+0xbe>
 801732c:	4603      	mov	r3, r0
 801732e:	2200      	movs	r2, #0
 8017330:	e003      	b.n	801733a <rcl_clock_add_jump_callback+0x46>
 8017332:	4294      	cmp	r4, r2
 8017334:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8017338:	d011      	beq.n	801735e <rcl_clock_add_jump_callback+0x6a>
 801733a:	6819      	ldr	r1, [r3, #0]
 801733c:	42b9      	cmp	r1, r7
 801733e:	f102 0201 	add.w	r2, r2, #1
 8017342:	d1f6      	bne.n	8017332 <rcl_clock_add_jump_callback+0x3e>
 8017344:	6a19      	ldr	r1, [r3, #32]
 8017346:	42b1      	cmp	r1, r6
 8017348:	d1f3      	bne.n	8017332 <rcl_clock_add_jump_callback+0x3e>
 801734a:	f04f 0e01 	mov.w	lr, #1
 801734e:	e001      	b.n	8017354 <rcl_clock_add_jump_callback+0x60>
 8017350:	f04f 0e0b 	mov.w	lr, #11
 8017354:	4670      	mov	r0, lr
 8017356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801735a:	b002      	add	sp, #8
 801735c:	4770      	bx	lr
 801735e:	3401      	adds	r4, #1
 8017360:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8017364:	00e1      	lsls	r1, r4, #3
 8017366:	69eb      	ldr	r3, [r5, #28]
 8017368:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801736a:	4798      	blx	r3
 801736c:	b1f0      	cbz	r0, 80173ac <rcl_clock_add_jump_callback+0xb8>
 801736e:	68ab      	ldr	r3, [r5, #8]
 8017370:	6068      	str	r0, [r5, #4]
 8017372:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8017376:	f10d 0c18 	add.w	ip, sp, #24
 801737a:	f840 7032 	str.w	r7, [r0, r2, lsl #3]
 801737e:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
 8017382:	f103 0801 	add.w	r8, r3, #1
 8017386:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801738a:	f104 0708 	add.w	r7, r4, #8
 801738e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8017390:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8017394:	f04f 0e00 	mov.w	lr, #0
 8017398:	e887 0003 	stmia.w	r7, {r0, r1}
 801739c:	6226      	str	r6, [r4, #32]
 801739e:	4670      	mov	r0, lr
 80173a0:	f8c5 8008 	str.w	r8, [r5, #8]
 80173a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80173a8:	b002      	add	sp, #8
 80173aa:	4770      	bx	lr
 80173ac:	f04f 0e0a 	mov.w	lr, #10
 80173b0:	e7d0      	b.n	8017354 <rcl_clock_add_jump_callback+0x60>
 80173b2:	2128      	movs	r1, #40	@ 0x28
 80173b4:	e7d7      	b.n	8017366 <rcl_clock_add_jump_callback+0x72>
 80173b6:	bf00      	nop

080173b8 <rcl_clock_remove_jump_callback>:
 80173b8:	2800      	cmp	r0, #0
 80173ba:	d05a      	beq.n	8017472 <rcl_clock_remove_jump_callback+0xba>
 80173bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80173c0:	4605      	mov	r5, r0
 80173c2:	3014      	adds	r0, #20
 80173c4:	460f      	mov	r7, r1
 80173c6:	4692      	mov	sl, r2
 80173c8:	f7f7 ff44 	bl	800f254 <rcutils_allocator_is_valid>
 80173cc:	2800      	cmp	r0, #0
 80173ce:	d03f      	beq.n	8017450 <rcl_clock_remove_jump_callback+0x98>
 80173d0:	2f00      	cmp	r7, #0
 80173d2:	d03d      	beq.n	8017450 <rcl_clock_remove_jump_callback+0x98>
 80173d4:	f8d5 8008 	ldr.w	r8, [r5, #8]
 80173d8:	f1b8 0f00 	cmp.w	r8, #0
 80173dc:	d00c      	beq.n	80173f8 <rcl_clock_remove_jump_callback+0x40>
 80173de:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80173e2:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 80173e6:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 80173ea:	464c      	mov	r4, r9
 80173ec:	6823      	ldr	r3, [r4, #0]
 80173ee:	42bb      	cmp	r3, r7
 80173f0:	d005      	beq.n	80173fe <rcl_clock_remove_jump_callback+0x46>
 80173f2:	3428      	adds	r4, #40	@ 0x28
 80173f4:	42b4      	cmp	r4, r6
 80173f6:	d1f9      	bne.n	80173ec <rcl_clock_remove_jump_callback+0x34>
 80173f8:	2001      	movs	r0, #1
 80173fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173fe:	6a23      	ldr	r3, [r4, #32]
 8017400:	3428      	adds	r4, #40	@ 0x28
 8017402:	42b4      	cmp	r4, r6
 8017404:	d02c      	beq.n	8017460 <rcl_clock_remove_jump_callback+0xa8>
 8017406:	4553      	cmp	r3, sl
 8017408:	d1f0      	bne.n	80173ec <rcl_clock_remove_jump_callback+0x34>
 801740a:	46a6      	mov	lr, r4
 801740c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017410:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8017414:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017418:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801741c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017420:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8017424:	3428      	adds	r4, #40	@ 0x28
 8017426:	42a6      	cmp	r6, r4
 8017428:	e88c 0003 	stmia.w	ip, {r0, r1}
 801742c:	d1ed      	bne.n	801740a <rcl_clock_remove_jump_callback+0x52>
 801742e:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 8017432:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8017434:	60ac      	str	r4, [r5, #8]
 8017436:	b174      	cbz	r4, 8017456 <rcl_clock_remove_jump_callback+0x9e>
 8017438:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801743c:	00e1      	lsls	r1, r4, #3
 801743e:	69eb      	ldr	r3, [r5, #28]
 8017440:	4648      	mov	r0, r9
 8017442:	4798      	blx	r3
 8017444:	4604      	mov	r4, r0
 8017446:	b1b0      	cbz	r0, 8017476 <rcl_clock_remove_jump_callback+0xbe>
 8017448:	606c      	str	r4, [r5, #4]
 801744a:	2000      	movs	r0, #0
 801744c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017450:	200b      	movs	r0, #11
 8017452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017456:	69ab      	ldr	r3, [r5, #24]
 8017458:	4611      	mov	r1, r2
 801745a:	4648      	mov	r0, r9
 801745c:	4798      	blx	r3
 801745e:	e7f3      	b.n	8017448 <rcl_clock_remove_jump_callback+0x90>
 8017460:	4553      	cmp	r3, sl
 8017462:	d1c9      	bne.n	80173f8 <rcl_clock_remove_jump_callback+0x40>
 8017464:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 8017468:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801746a:	60ac      	str	r4, [r5, #8]
 801746c:	2c00      	cmp	r4, #0
 801746e:	d1e3      	bne.n	8017438 <rcl_clock_remove_jump_callback+0x80>
 8017470:	e7f1      	b.n	8017456 <rcl_clock_remove_jump_callback+0x9e>
 8017472:	200b      	movs	r0, #11
 8017474:	4770      	bx	lr
 8017476:	200a      	movs	r0, #10
 8017478:	e7eb      	b.n	8017452 <rcl_clock_remove_jump_callback+0x9a>
 801747a:	bf00      	nop

0801747c <_rcl_timer_time_jump>:
 801747c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017480:	4605      	mov	r5, r0
 8017482:	b084      	sub	sp, #16
 8017484:	4614      	mov	r4, r2
 8017486:	b131      	cbz	r1, 8017496 <_rcl_timer_time_jump+0x1a>
 8017488:	7803      	ldrb	r3, [r0, #0]
 801748a:	3b02      	subs	r3, #2
 801748c:	2b01      	cmp	r3, #1
 801748e:	d93f      	bls.n	8017510 <_rcl_timer_time_jump+0x94>
 8017490:	b004      	add	sp, #16
 8017492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017496:	6813      	ldr	r3, [r2, #0]
 8017498:	a902      	add	r1, sp, #8
 801749a:	6818      	ldr	r0, [r3, #0]
 801749c:	f7ff ff0e 	bl	80172bc <rcl_clock_get_now>
 80174a0:	2800      	cmp	r0, #0
 80174a2:	d1f5      	bne.n	8017490 <_rcl_timer_time_jump+0x14>
 80174a4:	6820      	ldr	r0, [r4, #0]
 80174a6:	2105      	movs	r1, #5
 80174a8:	3020      	adds	r0, #32
 80174aa:	f001 fe4d 	bl	8019148 <__atomic_load_8>
 80174ae:	6823      	ldr	r3, [r4, #0]
 80174b0:	4681      	mov	r9, r0
 80174b2:	460f      	mov	r7, r1
 80174b4:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80174b8:	2105      	movs	r1, #5
 80174ba:	f001 fe45 	bl	8019148 <__atomic_load_8>
 80174be:	4680      	mov	r8, r0
 80174c0:	6820      	ldr	r0, [r4, #0]
 80174c2:	460e      	mov	r6, r1
 80174c4:	3018      	adds	r0, #24
 80174c6:	2105      	movs	r1, #5
 80174c8:	f001 fe3e 	bl	8019148 <__atomic_load_8>
 80174cc:	782b      	ldrb	r3, [r5, #0]
 80174ce:	3b02      	subs	r3, #2
 80174d0:	2b01      	cmp	r3, #1
 80174d2:	460d      	mov	r5, r1
 80174d4:	4682      	mov	sl, r0
 80174d6:	d939      	bls.n	801754c <_rcl_timer_time_jump+0xd0>
 80174d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80174dc:	4542      	cmp	r2, r8
 80174de:	eb73 0606 	sbcs.w	r6, r3, r6
 80174e2:	da61      	bge.n	80175a8 <_rcl_timer_time_jump+0x12c>
 80174e4:	454a      	cmp	r2, r9
 80174e6:	eb73 0707 	sbcs.w	r7, r3, r7
 80174ea:	dad1      	bge.n	8017490 <_rcl_timer_time_jump+0x14>
 80174ec:	1882      	adds	r2, r0, r2
 80174ee:	6820      	ldr	r0, [r4, #0]
 80174f0:	f04f 0505 	mov.w	r5, #5
 80174f4:	eb43 0301 	adc.w	r3, r3, r1
 80174f8:	9500      	str	r5, [sp, #0]
 80174fa:	3028      	adds	r0, #40	@ 0x28
 80174fc:	f001 fe5a 	bl	80191b4 <__atomic_store_8>
 8017500:	6820      	ldr	r0, [r4, #0]
 8017502:	9500      	str	r5, [sp, #0]
 8017504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017508:	3020      	adds	r0, #32
 801750a:	f001 fe53 	bl	80191b4 <__atomic_store_8>
 801750e:	e7bf      	b.n	8017490 <_rcl_timer_time_jump+0x14>
 8017510:	6813      	ldr	r3, [r2, #0]
 8017512:	a902      	add	r1, sp, #8
 8017514:	6818      	ldr	r0, [r3, #0]
 8017516:	f7ff fed1 	bl	80172bc <rcl_clock_get_now>
 801751a:	2800      	cmp	r0, #0
 801751c:	d1b8      	bne.n	8017490 <_rcl_timer_time_jump+0x14>
 801751e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8017522:	4313      	orrs	r3, r2
 8017524:	d0b4      	beq.n	8017490 <_rcl_timer_time_jump+0x14>
 8017526:	6820      	ldr	r0, [r4, #0]
 8017528:	2105      	movs	r1, #5
 801752a:	3028      	adds	r0, #40	@ 0x28
 801752c:	f001 fe0c 	bl	8019148 <__atomic_load_8>
 8017530:	9d02      	ldr	r5, [sp, #8]
 8017532:	9b03      	ldr	r3, [sp, #12]
 8017534:	4602      	mov	r2, r0
 8017536:	6820      	ldr	r0, [r4, #0]
 8017538:	1b52      	subs	r2, r2, r5
 801753a:	f04f 0405 	mov.w	r4, #5
 801753e:	9400      	str	r4, [sp, #0]
 8017540:	eb61 0303 	sbc.w	r3, r1, r3
 8017544:	3030      	adds	r0, #48	@ 0x30
 8017546:	f001 fe35 	bl	80191b4 <__atomic_store_8>
 801754a:	e7a1      	b.n	8017490 <_rcl_timer_time_jump+0x14>
 801754c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8017550:	4313      	orrs	r3, r2
 8017552:	d09d      	beq.n	8017490 <_rcl_timer_time_jump+0x14>
 8017554:	6820      	ldr	r0, [r4, #0]
 8017556:	f04f 0805 	mov.w	r8, #5
 801755a:	2300      	movs	r3, #0
 801755c:	f8cd 8000 	str.w	r8, [sp]
 8017560:	3030      	adds	r0, #48	@ 0x30
 8017562:	2200      	movs	r2, #0
 8017564:	f001 fe5c 	bl	8019220 <__atomic_exchange_8>
 8017568:	ea51 0300 	orrs.w	r3, r1, r0
 801756c:	4606      	mov	r6, r0
 801756e:	460f      	mov	r7, r1
 8017570:	d08e      	beq.n	8017490 <_rcl_timer_time_jump+0x14>
 8017572:	9a02      	ldr	r2, [sp, #8]
 8017574:	9b03      	ldr	r3, [sp, #12]
 8017576:	f8cd 8000 	str.w	r8, [sp]
 801757a:	1a12      	subs	r2, r2, r0
 801757c:	6820      	ldr	r0, [r4, #0]
 801757e:	eb63 0301 	sbc.w	r3, r3, r1
 8017582:	eb12 020a 	adds.w	r2, r2, sl
 8017586:	eb43 0305 	adc.w	r3, r3, r5
 801758a:	3028      	adds	r0, #40	@ 0x28
 801758c:	f001 fe12 	bl	80191b4 <__atomic_store_8>
 8017590:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017594:	f8cd 8000 	str.w	r8, [sp]
 8017598:	6820      	ldr	r0, [r4, #0]
 801759a:	1b92      	subs	r2, r2, r6
 801759c:	eb63 0307 	sbc.w	r3, r3, r7
 80175a0:	3020      	adds	r0, #32
 80175a2:	f001 fe07 	bl	80191b4 <__atomic_store_8>
 80175a6:	e773      	b.n	8017490 <_rcl_timer_time_jump+0x14>
 80175a8:	6820      	ldr	r0, [r4, #0]
 80175aa:	3008      	adds	r0, #8
 80175ac:	f004 ff20 	bl	801c3f0 <rcl_trigger_guard_condition>
 80175b0:	e76e      	b.n	8017490 <_rcl_timer_time_jump+0x14>
 80175b2:	bf00      	nop

080175b4 <rcl_get_zero_initialized_timer>:
 80175b4:	4b01      	ldr	r3, [pc, #4]	@ (80175bc <rcl_get_zero_initialized_timer+0x8>)
 80175b6:	6818      	ldr	r0, [r3, #0]
 80175b8:	4770      	bx	lr
 80175ba:	bf00      	nop
 80175bc:	08021128 	.word	0x08021128

080175c0 <rcl_timer_init2>:
 80175c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80175c4:	b0ae      	sub	sp, #184	@ 0xb8
 80175c6:	4604      	mov	r4, r0
 80175c8:	a839      	add	r0, sp, #228	@ 0xe4
 80175ca:	f89d 80f8 	ldrb.w	r8, [sp, #248]	@ 0xf8
 80175ce:	460d      	mov	r5, r1
 80175d0:	4691      	mov	r9, r2
 80175d2:	f7f7 fe3f 	bl	800f254 <rcutils_allocator_is_valid>
 80175d6:	2800      	cmp	r0, #0
 80175d8:	d06a      	beq.n	80176b0 <rcl_timer_init2+0xf0>
 80175da:	2c00      	cmp	r4, #0
 80175dc:	d068      	beq.n	80176b0 <rcl_timer_init2+0xf0>
 80175de:	2d00      	cmp	r5, #0
 80175e0:	d066      	beq.n	80176b0 <rcl_timer_init2+0xf0>
 80175e2:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	db63      	blt.n	80176b0 <rcl_timer_init2+0xf0>
 80175e8:	6823      	ldr	r3, [r4, #0]
 80175ea:	b123      	cbz	r3, 80175f6 <rcl_timer_init2+0x36>
 80175ec:	2664      	movs	r6, #100	@ 0x64
 80175ee:	4630      	mov	r0, r6
 80175f0:	b02e      	add	sp, #184	@ 0xb8
 80175f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175f6:	a908      	add	r1, sp, #32
 80175f8:	4628      	mov	r0, r5
 80175fa:	f7ff fe5f 	bl	80172bc <rcl_clock_get_now>
 80175fe:	4606      	mov	r6, r0
 8017600:	2800      	cmp	r0, #0
 8017602:	d1f4      	bne.n	80175ee <rcl_timer_init2+0x2e>
 8017604:	ae06      	add	r6, sp, #24
 8017606:	4630      	mov	r0, r6
 8017608:	e9cd 5916 	strd	r5, r9, [sp, #88]	@ 0x58
 801760c:	f004 fdfc 	bl	801c208 <rcl_get_zero_initialized_guard_condition>
 8017610:	e896 0003 	ldmia.w	r6, {r0, r1}
 8017614:	f10d 0a60 	add.w	sl, sp, #96	@ 0x60
 8017618:	ae0b      	add	r6, sp, #44	@ 0x2c
 801761a:	e88a 0003 	stmia.w	sl, {r0, r1}
 801761e:	4630      	mov	r0, r6
 8017620:	f004 feca 	bl	801c3b8 <rcl_guard_condition_get_default_options>
 8017624:	ab0d      	add	r3, sp, #52	@ 0x34
 8017626:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801762a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801762e:	4649      	mov	r1, r9
 8017630:	e896 000c 	ldmia.w	r6, {r2, r3}
 8017634:	4650      	mov	r0, sl
 8017636:	f004 fdf1 	bl	801c21c <rcl_guard_condition_init>
 801763a:	4606      	mov	r6, r0
 801763c:	2800      	cmp	r0, #0
 801763e:	d1d6      	bne.n	80175ee <rcl_timer_init2+0x2e>
 8017640:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8017642:	781b      	ldrb	r3, [r3, #0]
 8017644:	2b01      	cmp	r3, #1
 8017646:	d038      	beq.n	80176ba <rcl_timer_init2+0xfa>
 8017648:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 801764a:	931a      	str	r3, [sp, #104]	@ 0x68
 801764c:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	@ 0xd8
 8017650:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8017654:	2300      	movs	r3, #0
 8017656:	e9cd 332a 	strd	r3, r3, [sp, #168]	@ 0xa8
 801765a:	932c      	str	r3, [sp, #176]	@ 0xb0
 801765c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017660:	9f36      	ldr	r7, [sp, #216]	@ 0xd8
 8017662:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8017718 <rcl_timer_init2+0x158>
 8017666:	19d0      	adds	r0, r2, r7
 8017668:	9f37      	ldr	r7, [sp, #220]	@ 0xdc
 801766a:	f10d 0ce4 	add.w	ip, sp, #228	@ 0xe4
 801766e:	eb43 0107 	adc.w	r1, r3, r7
 8017672:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8017676:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 801767a:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 801767e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017682:	f10d 0e94 	add.w	lr, sp, #148	@ 0x94
 8017686:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801768a:	f8dc 3000 	ldr.w	r3, [ip]
 801768e:	f8ce 3000 	str.w	r3, [lr]
 8017692:	f088 0801 	eor.w	r8, r8, #1
 8017696:	4619      	mov	r1, r3
 8017698:	f88d 8090 	strb.w	r8, [sp, #144]	@ 0x90
 801769c:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 801769e:	2060      	movs	r0, #96	@ 0x60
 80176a0:	4798      	blx	r3
 80176a2:	6020      	str	r0, [r4, #0]
 80176a4:	b358      	cbz	r0, 80176fe <rcl_timer_init2+0x13e>
 80176a6:	2260      	movs	r2, #96	@ 0x60
 80176a8:	a916      	add	r1, sp, #88	@ 0x58
 80176aa:	f006 f998 	bl	801d9de <memcpy>
 80176ae:	e79e      	b.n	80175ee <rcl_timer_init2+0x2e>
 80176b0:	260b      	movs	r6, #11
 80176b2:	4630      	mov	r0, r6
 80176b4:	b02e      	add	sp, #184	@ 0xb8
 80176b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176ba:	2001      	movs	r0, #1
 80176bc:	2100      	movs	r1, #0
 80176be:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 80176c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80176c6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80176ca:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 80176ce:	4a14      	ldr	r2, [pc, #80]	@ (8017720 <rcl_timer_init2+0x160>)
 80176d0:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80176d4:	9405      	str	r4, [sp, #20]
 80176d6:	9204      	str	r2, [sp, #16]
 80176d8:	ab12      	add	r3, sp, #72	@ 0x48
 80176da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80176dc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80176e0:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80176e4:	e89c 000c 	ldmia.w	ip, {r2, r3}
 80176e8:	4628      	mov	r0, r5
 80176ea:	f7ff fe03 	bl	80172f4 <rcl_clock_add_jump_callback>
 80176ee:	4681      	mov	r9, r0
 80176f0:	2800      	cmp	r0, #0
 80176f2:	d0a9      	beq.n	8017648 <rcl_timer_init2+0x88>
 80176f4:	4650      	mov	r0, sl
 80176f6:	f004 fe3d 	bl	801c374 <rcl_guard_condition_fini>
 80176fa:	464e      	mov	r6, r9
 80176fc:	e777      	b.n	80175ee <rcl_timer_init2+0x2e>
 80176fe:	4650      	mov	r0, sl
 8017700:	f004 fe38 	bl	801c374 <rcl_guard_condition_fini>
 8017704:	4906      	ldr	r1, [pc, #24]	@ (8017720 <rcl_timer_init2+0x160>)
 8017706:	4622      	mov	r2, r4
 8017708:	4628      	mov	r0, r5
 801770a:	f7ff fe55 	bl	80173b8 <rcl_clock_remove_jump_callback>
 801770e:	260a      	movs	r6, #10
 8017710:	e76d      	b.n	80175ee <rcl_timer_init2+0x2e>
 8017712:	bf00      	nop
 8017714:	f3af 8000 	nop.w
	...
 8017720:	0801747d 	.word	0x0801747d

08017724 <rcl_timer_clock>:
 8017724:	b130      	cbz	r0, 8017734 <rcl_timer_clock+0x10>
 8017726:	b129      	cbz	r1, 8017734 <rcl_timer_clock+0x10>
 8017728:	6803      	ldr	r3, [r0, #0]
 801772a:	b12b      	cbz	r3, 8017738 <rcl_timer_clock+0x14>
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	600b      	str	r3, [r1, #0]
 8017730:	2000      	movs	r0, #0
 8017732:	4770      	bx	lr
 8017734:	200b      	movs	r0, #11
 8017736:	4770      	bx	lr
 8017738:	f44f 7048 	mov.w	r0, #800	@ 0x320
 801773c:	4770      	bx	lr
 801773e:	bf00      	nop

08017740 <rcl_timer_call>:
 8017740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017744:	b087      	sub	sp, #28
 8017746:	2800      	cmp	r0, #0
 8017748:	d067      	beq.n	801781a <rcl_timer_call+0xda>
 801774a:	6803      	ldr	r3, [r0, #0]
 801774c:	4604      	mov	r4, r0
 801774e:	2b00      	cmp	r3, #0
 8017750:	d068      	beq.n	8017824 <rcl_timer_call+0xe4>
 8017752:	f3bf 8f5b 	dmb	ish
 8017756:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801775a:	f3bf 8f5b 	dmb	ish
 801775e:	2b00      	cmp	r3, #0
 8017760:	d150      	bne.n	8017804 <rcl_timer_call+0xc4>
 8017762:	6803      	ldr	r3, [r0, #0]
 8017764:	a904      	add	r1, sp, #16
 8017766:	6818      	ldr	r0, [r3, #0]
 8017768:	f7ff fda8 	bl	80172bc <rcl_clock_get_now>
 801776c:	4605      	mov	r5, r0
 801776e:	2800      	cmp	r0, #0
 8017770:	d144      	bne.n	80177fc <rcl_timer_call+0xbc>
 8017772:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017776:	2b00      	cmp	r3, #0
 8017778:	db4a      	blt.n	8017810 <rcl_timer_call+0xd0>
 801777a:	6820      	ldr	r0, [r4, #0]
 801777c:	f04f 0a05 	mov.w	sl, #5
 8017780:	f8cd a000 	str.w	sl, [sp]
 8017784:	3020      	adds	r0, #32
 8017786:	f001 fd4b 	bl	8019220 <__atomic_exchange_8>
 801778a:	6823      	ldr	r3, [r4, #0]
 801778c:	f3bf 8f5b 	dmb	ish
 8017790:	4680      	mov	r8, r0
 8017792:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8017796:	f3bf 8f5b 	dmb	ish
 801779a:	6820      	ldr	r0, [r4, #0]
 801779c:	4689      	mov	r9, r1
 801779e:	3028      	adds	r0, #40	@ 0x28
 80177a0:	4651      	mov	r1, sl
 80177a2:	f001 fcd1 	bl	8019148 <__atomic_load_8>
 80177a6:	4606      	mov	r6, r0
 80177a8:	6820      	ldr	r0, [r4, #0]
 80177aa:	460f      	mov	r7, r1
 80177ac:	3018      	adds	r0, #24
 80177ae:	4651      	mov	r1, sl
 80177b0:	f001 fcca 	bl	8019148 <__atomic_load_8>
 80177b4:	1836      	adds	r6, r6, r0
 80177b6:	eb41 0707 	adc.w	r7, r1, r7
 80177ba:	4602      	mov	r2, r0
 80177bc:	460b      	mov	r3, r1
 80177be:	4682      	mov	sl, r0
 80177c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80177c4:	42b0      	cmp	r0, r6
 80177c6:	eb71 0c07 	sbcs.w	ip, r1, r7
 80177ca:	db04      	blt.n	80177d6 <rcl_timer_call+0x96>
 80177cc:	ea53 0c02 	orrs.w	ip, r3, r2
 80177d0:	d12b      	bne.n	801782a <rcl_timer_call+0xea>
 80177d2:	4606      	mov	r6, r0
 80177d4:	460f      	mov	r7, r1
 80177d6:	6820      	ldr	r0, [r4, #0]
 80177d8:	2105      	movs	r1, #5
 80177da:	4632      	mov	r2, r6
 80177dc:	463b      	mov	r3, r7
 80177de:	3028      	adds	r0, #40	@ 0x28
 80177e0:	9100      	str	r1, [sp, #0]
 80177e2:	f001 fce7 	bl	80191b4 <__atomic_store_8>
 80177e6:	f1bb 0f00 	cmp.w	fp, #0
 80177ea:	d007      	beq.n	80177fc <rcl_timer_call+0xbc>
 80177ec:	9a04      	ldr	r2, [sp, #16]
 80177ee:	9b05      	ldr	r3, [sp, #20]
 80177f0:	ebb2 0208 	subs.w	r2, r2, r8
 80177f4:	4620      	mov	r0, r4
 80177f6:	eb63 0309 	sbc.w	r3, r3, r9
 80177fa:	47d8      	blx	fp
 80177fc:	4628      	mov	r0, r5
 80177fe:	b007      	add	sp, #28
 8017800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017804:	f240 3521 	movw	r5, #801	@ 0x321
 8017808:	4628      	mov	r0, r5
 801780a:	b007      	add	sp, #28
 801780c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017810:	2501      	movs	r5, #1
 8017812:	4628      	mov	r0, r5
 8017814:	b007      	add	sp, #28
 8017816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801781a:	250b      	movs	r5, #11
 801781c:	4628      	mov	r0, r5
 801781e:	b007      	add	sp, #28
 8017820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017824:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8017828:	e7e8      	b.n	80177fc <rcl_timer_call+0xbc>
 801782a:	1b80      	subs	r0, r0, r6
 801782c:	eb61 0107 	sbc.w	r1, r1, r7
 8017830:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8017834:	f7e9 fa18 	bl	8000c68 <__aeabi_ldivmod>
 8017838:	9b02      	ldr	r3, [sp, #8]
 801783a:	3001      	adds	r0, #1
 801783c:	f141 0100 	adc.w	r1, r1, #0
 8017840:	fb00 f303 	mul.w	r3, r0, r3
 8017844:	fb01 330a 	mla	r3, r1, sl, r3
 8017848:	fba0 0a0a 	umull	r0, sl, r0, sl
 801784c:	1830      	adds	r0, r6, r0
 801784e:	4453      	add	r3, sl
 8017850:	eb43 0707 	adc.w	r7, r3, r7
 8017854:	4606      	mov	r6, r0
 8017856:	e7be      	b.n	80177d6 <rcl_timer_call+0x96>

08017858 <rcl_timer_is_ready>:
 8017858:	b398      	cbz	r0, 80178c2 <rcl_timer_is_ready+0x6a>
 801785a:	b530      	push	{r4, r5, lr}
 801785c:	6803      	ldr	r3, [r0, #0]
 801785e:	b083      	sub	sp, #12
 8017860:	4604      	mov	r4, r0
 8017862:	b383      	cbz	r3, 80178c6 <rcl_timer_is_ready+0x6e>
 8017864:	460d      	mov	r5, r1
 8017866:	b349      	cbz	r1, 80178bc <rcl_timer_is_ready+0x64>
 8017868:	f3bf 8f5b 	dmb	ish
 801786c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8017870:	f3bf 8f5b 	dmb	ish
 8017874:	b9fb      	cbnz	r3, 80178b6 <rcl_timer_is_ready+0x5e>
 8017876:	6803      	ldr	r3, [r0, #0]
 8017878:	4669      	mov	r1, sp
 801787a:	6818      	ldr	r0, [r3, #0]
 801787c:	f7ff fd1e 	bl	80172bc <rcl_clock_get_now>
 8017880:	b128      	cbz	r0, 801788e <rcl_timer_is_ready+0x36>
 8017882:	f240 3321 	movw	r3, #801	@ 0x321
 8017886:	4298      	cmp	r0, r3
 8017888:	d015      	beq.n	80178b6 <rcl_timer_is_ready+0x5e>
 801788a:	b003      	add	sp, #12
 801788c:	bd30      	pop	{r4, r5, pc}
 801788e:	6820      	ldr	r0, [r4, #0]
 8017890:	2105      	movs	r1, #5
 8017892:	3028      	adds	r0, #40	@ 0x28
 8017894:	f001 fc58 	bl	8019148 <__atomic_load_8>
 8017898:	e9dd 3200 	ldrd	r3, r2, [sp]
 801789c:	1ac0      	subs	r0, r0, r3
 801789e:	eb61 0102 	sbc.w	r1, r1, r2
 80178a2:	2801      	cmp	r0, #1
 80178a4:	f171 0100 	sbcs.w	r1, r1, #0
 80178a8:	bfb4      	ite	lt
 80178aa:	2301      	movlt	r3, #1
 80178ac:	2300      	movge	r3, #0
 80178ae:	702b      	strb	r3, [r5, #0]
 80178b0:	2000      	movs	r0, #0
 80178b2:	b003      	add	sp, #12
 80178b4:	bd30      	pop	{r4, r5, pc}
 80178b6:	2300      	movs	r3, #0
 80178b8:	702b      	strb	r3, [r5, #0]
 80178ba:	e7f9      	b.n	80178b0 <rcl_timer_is_ready+0x58>
 80178bc:	200b      	movs	r0, #11
 80178be:	b003      	add	sp, #12
 80178c0:	bd30      	pop	{r4, r5, pc}
 80178c2:	200b      	movs	r0, #11
 80178c4:	4770      	bx	lr
 80178c6:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80178ca:	e7de      	b.n	801788a <rcl_timer_is_ready+0x32>

080178cc <rcl_timer_get_next_call_time>:
 80178cc:	b1d8      	cbz	r0, 8017906 <rcl_timer_get_next_call_time+0x3a>
 80178ce:	b538      	push	{r3, r4, r5, lr}
 80178d0:	6803      	ldr	r3, [r0, #0]
 80178d2:	b1d3      	cbz	r3, 801790a <rcl_timer_get_next_call_time+0x3e>
 80178d4:	460c      	mov	r4, r1
 80178d6:	b1a1      	cbz	r1, 8017902 <rcl_timer_get_next_call_time+0x36>
 80178d8:	f3bf 8f5b 	dmb	ish
 80178dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80178e0:	f3bf 8f5b 	dmb	ish
 80178e4:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 80178e8:	b943      	cbnz	r3, 80178fc <rcl_timer_get_next_call_time+0x30>
 80178ea:	6800      	ldr	r0, [r0, #0]
 80178ec:	2105      	movs	r1, #5
 80178ee:	3028      	adds	r0, #40	@ 0x28
 80178f0:	f001 fc2a 	bl	8019148 <__atomic_load_8>
 80178f4:	e9c4 0100 	strd	r0, r1, [r4]
 80178f8:	4628      	mov	r0, r5
 80178fa:	bd38      	pop	{r3, r4, r5, pc}
 80178fc:	f240 3021 	movw	r0, #801	@ 0x321
 8017900:	bd38      	pop	{r3, r4, r5, pc}
 8017902:	200b      	movs	r0, #11
 8017904:	bd38      	pop	{r3, r4, r5, pc}
 8017906:	200b      	movs	r0, #11
 8017908:	4770      	bx	lr
 801790a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 801790e:	bd38      	pop	{r3, r4, r5, pc}

08017910 <rcl_timer_get_guard_condition>:
 8017910:	b130      	cbz	r0, 8017920 <rcl_timer_get_guard_condition+0x10>
 8017912:	6800      	ldr	r0, [r0, #0]
 8017914:	b120      	cbz	r0, 8017920 <rcl_timer_get_guard_condition+0x10>
 8017916:	68c3      	ldr	r3, [r0, #12]
 8017918:	b10b      	cbz	r3, 801791e <rcl_timer_get_guard_condition+0xe>
 801791a:	3008      	adds	r0, #8
 801791c:	4770      	bx	lr
 801791e:	4618      	mov	r0, r3
 8017920:	4770      	bx	lr
 8017922:	bf00      	nop

08017924 <rcl_validate_enclave_name_with_size>:
 8017924:	2800      	cmp	r0, #0
 8017926:	d037      	beq.n	8017998 <rcl_validate_enclave_name_with_size+0x74>
 8017928:	b570      	push	{r4, r5, r6, lr}
 801792a:	4614      	mov	r4, r2
 801792c:	b0c2      	sub	sp, #264	@ 0x108
 801792e:	b342      	cbz	r2, 8017982 <rcl_validate_enclave_name_with_size+0x5e>
 8017930:	461e      	mov	r6, r3
 8017932:	466a      	mov	r2, sp
 8017934:	ab01      	add	r3, sp, #4
 8017936:	460d      	mov	r5, r1
 8017938:	f002 f8c0 	bl	8019abc <rmw_validate_namespace_with_size>
 801793c:	4684      	mov	ip, r0
 801793e:	bb28      	cbnz	r0, 801798c <rcl_validate_enclave_name_with_size+0x68>
 8017940:	9b00      	ldr	r3, [sp, #0]
 8017942:	b923      	cbnz	r3, 801794e <rcl_validate_enclave_name_with_size+0x2a>
 8017944:	2300      	movs	r3, #0
 8017946:	6023      	str	r3, [r4, #0]
 8017948:	4660      	mov	r0, ip
 801794a:	b042      	add	sp, #264	@ 0x108
 801794c:	bd70      	pop	{r4, r5, r6, pc}
 801794e:	2b07      	cmp	r3, #7
 8017950:	d00f      	beq.n	8017972 <rcl_validate_enclave_name_with_size+0x4e>
 8017952:	1e5a      	subs	r2, r3, #1
 8017954:	2a05      	cmp	r2, #5
 8017956:	d823      	bhi.n	80179a0 <rcl_validate_enclave_name_with_size+0x7c>
 8017958:	e8df f002 	tbb	[pc, r2]
 801795c:	03030303 	.word	0x03030303
 8017960:	0303      	.short	0x0303
 8017962:	6023      	str	r3, [r4, #0]
 8017964:	2e00      	cmp	r6, #0
 8017966:	d0ef      	beq.n	8017948 <rcl_validate_enclave_name_with_size+0x24>
 8017968:	9b01      	ldr	r3, [sp, #4]
 801796a:	6033      	str	r3, [r6, #0]
 801796c:	4660      	mov	r0, ip
 801796e:	b042      	add	sp, #264	@ 0x108
 8017970:	bd70      	pop	{r4, r5, r6, pc}
 8017972:	2dff      	cmp	r5, #255	@ 0xff
 8017974:	d9e6      	bls.n	8017944 <rcl_validate_enclave_name_with_size+0x20>
 8017976:	6023      	str	r3, [r4, #0]
 8017978:	2e00      	cmp	r6, #0
 801797a:	d0e5      	beq.n	8017948 <rcl_validate_enclave_name_with_size+0x24>
 801797c:	23fe      	movs	r3, #254	@ 0xfe
 801797e:	6033      	str	r3, [r6, #0]
 8017980:	e7e2      	b.n	8017948 <rcl_validate_enclave_name_with_size+0x24>
 8017982:	f04f 0c0b 	mov.w	ip, #11
 8017986:	4660      	mov	r0, ip
 8017988:	b042      	add	sp, #264	@ 0x108
 801798a:	bd70      	pop	{r4, r5, r6, pc}
 801798c:	f7fe fc4e 	bl	801622c <rcl_convert_rmw_ret_to_rcl_ret>
 8017990:	4684      	mov	ip, r0
 8017992:	4660      	mov	r0, ip
 8017994:	b042      	add	sp, #264	@ 0x108
 8017996:	bd70      	pop	{r4, r5, r6, pc}
 8017998:	f04f 0c0b 	mov.w	ip, #11
 801799c:	4660      	mov	r0, ip
 801799e:	4770      	bx	lr
 80179a0:	4a04      	ldr	r2, [pc, #16]	@ (80179b4 <rcl_validate_enclave_name_with_size+0x90>)
 80179a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80179a6:	a802      	add	r0, sp, #8
 80179a8:	f001 fd8e 	bl	80194c8 <rcutils_snprintf>
 80179ac:	f04f 0c01 	mov.w	ip, #1
 80179b0:	e7ca      	b.n	8017948 <rcl_validate_enclave_name_with_size+0x24>
 80179b2:	bf00      	nop
 80179b4:	0802112c 	.word	0x0802112c

080179b8 <rcl_validate_enclave_name>:
 80179b8:	b168      	cbz	r0, 80179d6 <rcl_validate_enclave_name+0x1e>
 80179ba:	b570      	push	{r4, r5, r6, lr}
 80179bc:	460d      	mov	r5, r1
 80179be:	4616      	mov	r6, r2
 80179c0:	4604      	mov	r4, r0
 80179c2:	f7e8 fc8d 	bl	80002e0 <strlen>
 80179c6:	4633      	mov	r3, r6
 80179c8:	4601      	mov	r1, r0
 80179ca:	462a      	mov	r2, r5
 80179cc:	4620      	mov	r0, r4
 80179ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80179d2:	f7ff bfa7 	b.w	8017924 <rcl_validate_enclave_name_with_size>
 80179d6:	200b      	movs	r0, #11
 80179d8:	4770      	bx	lr
 80179da:	bf00      	nop

080179dc <rcl_get_zero_initialized_wait_set>:
 80179dc:	b510      	push	{r4, lr}
 80179de:	4c08      	ldr	r4, [pc, #32]	@ (8017a00 <rcl_get_zero_initialized_wait_set+0x24>)
 80179e0:	4686      	mov	lr, r0
 80179e2:	4684      	mov	ip, r0
 80179e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80179e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80179ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80179ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80179f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80179f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80179f6:	6823      	ldr	r3, [r4, #0]
 80179f8:	f8cc 3000 	str.w	r3, [ip]
 80179fc:	4670      	mov	r0, lr
 80179fe:	bd10      	pop	{r4, pc}
 8017a00:	0802118c 	.word	0x0802118c

08017a04 <rcl_wait_set_is_valid>:
 8017a04:	b118      	cbz	r0, 8017a0e <rcl_wait_set_is_valid+0xa>
 8017a06:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8017a08:	3800      	subs	r0, #0
 8017a0a:	bf18      	it	ne
 8017a0c:	2001      	movne	r0, #1
 8017a0e:	4770      	bx	lr

08017a10 <rcl_wait_set_fini>:
 8017a10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017a14:	b083      	sub	sp, #12
 8017a16:	2800      	cmp	r0, #0
 8017a18:	f000 8098 	beq.w	8017b4c <rcl_wait_set_fini+0x13c>
 8017a1c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8017a1e:	4605      	mov	r5, r0
 8017a20:	2e00      	cmp	r6, #0
 8017a22:	f000 808f 	beq.w	8017b44 <rcl_wait_set_fini+0x134>
 8017a26:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8017a28:	f002 fe10 	bl	801a64c <rmw_destroy_wait_set>
 8017a2c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017a2e:	1e06      	subs	r6, r0, #0
 8017a30:	bf18      	it	ne
 8017a32:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8017a36:	2c00      	cmp	r4, #0
 8017a38:	f000 8084 	beq.w	8017b44 <rcl_wait_set_fini+0x134>
 8017a3c:	6828      	ldr	r0, [r5, #0]
 8017a3e:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 8017a42:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017a46:	2700      	movs	r7, #0
 8017a48:	606f      	str	r7, [r5, #4]
 8017a4a:	6027      	str	r7, [r4, #0]
 8017a4c:	b118      	cbz	r0, 8017a56 <rcl_wait_set_fini+0x46>
 8017a4e:	4649      	mov	r1, r9
 8017a50:	47c0      	blx	r8
 8017a52:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017a54:	602f      	str	r7, [r5, #0]
 8017a56:	68a0      	ldr	r0, [r4, #8]
 8017a58:	b128      	cbz	r0, 8017a66 <rcl_wait_set_fini+0x56>
 8017a5a:	4649      	mov	r1, r9
 8017a5c:	47c0      	blx	r8
 8017a5e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017a60:	2300      	movs	r3, #0
 8017a62:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8017a66:	68a8      	ldr	r0, [r5, #8]
 8017a68:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8017a6a:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8017a6c:	f04f 0800 	mov.w	r8, #0
 8017a70:	f8c5 800c 	str.w	r8, [r5, #12]
 8017a74:	f8c4 800c 	str.w	r8, [r4, #12]
 8017a78:	b128      	cbz	r0, 8017a86 <rcl_wait_set_fini+0x76>
 8017a7a:	47b8      	blx	r7
 8017a7c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017a7e:	f8c5 8008 	str.w	r8, [r5, #8]
 8017a82:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8017a84:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8017a86:	6960      	ldr	r0, [r4, #20]
 8017a88:	f04f 0800 	mov.w	r8, #0
 8017a8c:	f8c4 8010 	str.w	r8, [r4, #16]
 8017a90:	b128      	cbz	r0, 8017a9e <rcl_wait_set_fini+0x8e>
 8017a92:	47b8      	blx	r7
 8017a94:	f8c4 8014 	str.w	r8, [r4, #20]
 8017a98:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017a9a:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8017a9c:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8017a9e:	6928      	ldr	r0, [r5, #16]
 8017aa0:	f04f 0800 	mov.w	r8, #0
 8017aa4:	f8c5 8014 	str.w	r8, [r5, #20]
 8017aa8:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
 8017aac:	b128      	cbz	r0, 8017aba <rcl_wait_set_fini+0xaa>
 8017aae:	47b8      	blx	r7
 8017ab0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017ab2:	f8c5 8010 	str.w	r8, [r5, #16]
 8017ab6:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8017ab8:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8017aba:	69a8      	ldr	r0, [r5, #24]
 8017abc:	f04f 0800 	mov.w	r8, #0
 8017ac0:	f8c5 801c 	str.w	r8, [r5, #28]
 8017ac4:	f8c4 8018 	str.w	r8, [r4, #24]
 8017ac8:	b128      	cbz	r0, 8017ad6 <rcl_wait_set_fini+0xc6>
 8017aca:	9101      	str	r1, [sp, #4]
 8017acc:	47b8      	blx	r7
 8017ace:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017ad0:	9901      	ldr	r1, [sp, #4]
 8017ad2:	f8c5 8018 	str.w	r8, [r5, #24]
 8017ad6:	6a20      	ldr	r0, [r4, #32]
 8017ad8:	b120      	cbz	r0, 8017ae4 <rcl_wait_set_fini+0xd4>
 8017ada:	47b8      	blx	r7
 8017adc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017ade:	2300      	movs	r3, #0
 8017ae0:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8017ae4:	6a28      	ldr	r0, [r5, #32]
 8017ae6:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 8017aea:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017aee:	2700      	movs	r7, #0
 8017af0:	626f      	str	r7, [r5, #36]	@ 0x24
 8017af2:	6267      	str	r7, [r4, #36]	@ 0x24
 8017af4:	b118      	cbz	r0, 8017afe <rcl_wait_set_fini+0xee>
 8017af6:	4649      	mov	r1, r9
 8017af8:	47c0      	blx	r8
 8017afa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017afc:	622f      	str	r7, [r5, #32]
 8017afe:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8017b00:	b128      	cbz	r0, 8017b0e <rcl_wait_set_fini+0xfe>
 8017b02:	4649      	mov	r1, r9
 8017b04:	47c0      	blx	r8
 8017b06:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017b08:	2300      	movs	r3, #0
 8017b0a:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8017b0e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8017b10:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 8017b14:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017b18:	2700      	movs	r7, #0
 8017b1a:	62ef      	str	r7, [r5, #44]	@ 0x2c
 8017b1c:	6327      	str	r7, [r4, #48]	@ 0x30
 8017b1e:	b118      	cbz	r0, 8017b28 <rcl_wait_set_fini+0x118>
 8017b20:	4649      	mov	r1, r9
 8017b22:	47c0      	blx	r8
 8017b24:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017b26:	62af      	str	r7, [r5, #40]	@ 0x28
 8017b28:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8017b2a:	b128      	cbz	r0, 8017b38 <rcl_wait_set_fini+0x128>
 8017b2c:	4649      	mov	r1, r9
 8017b2e:	47c0      	blx	r8
 8017b30:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017b32:	2300      	movs	r3, #0
 8017b34:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8017b38:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8017b3a:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8017b3c:	4620      	mov	r0, r4
 8017b3e:	4798      	blx	r3
 8017b40:	2300      	movs	r3, #0
 8017b42:	632b      	str	r3, [r5, #48]	@ 0x30
 8017b44:	4630      	mov	r0, r6
 8017b46:	b003      	add	sp, #12
 8017b48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b4c:	260b      	movs	r6, #11
 8017b4e:	4630      	mov	r0, r6
 8017b50:	b003      	add	sp, #12
 8017b52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b56:	bf00      	nop

08017b58 <rcl_wait_set_add_subscription>:
 8017b58:	b318      	cbz	r0, 8017ba2 <rcl_wait_set_add_subscription+0x4a>
 8017b5a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017b5c:	b570      	push	{r4, r5, r6, lr}
 8017b5e:	4604      	mov	r4, r0
 8017b60:	b30b      	cbz	r3, 8017ba6 <rcl_wait_set_add_subscription+0x4e>
 8017b62:	b319      	cbz	r1, 8017bac <rcl_wait_set_add_subscription+0x54>
 8017b64:	681d      	ldr	r5, [r3, #0]
 8017b66:	6840      	ldr	r0, [r0, #4]
 8017b68:	4285      	cmp	r5, r0
 8017b6a:	d217      	bcs.n	8017b9c <rcl_wait_set_add_subscription+0x44>
 8017b6c:	6820      	ldr	r0, [r4, #0]
 8017b6e:	1c6e      	adds	r6, r5, #1
 8017b70:	601e      	str	r6, [r3, #0]
 8017b72:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8017b76:	b102      	cbz	r2, 8017b7a <rcl_wait_set_add_subscription+0x22>
 8017b78:	6015      	str	r5, [r2, #0]
 8017b7a:	4608      	mov	r0, r1
 8017b7c:	f7ff fafc 	bl	8017178 <rcl_subscription_get_rmw_handle>
 8017b80:	b150      	cbz	r0, 8017b98 <rcl_wait_set_add_subscription+0x40>
 8017b82:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017b84:	6842      	ldr	r2, [r0, #4]
 8017b86:	689b      	ldr	r3, [r3, #8]
 8017b88:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017b8c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017b8e:	6853      	ldr	r3, [r2, #4]
 8017b90:	3301      	adds	r3, #1
 8017b92:	2000      	movs	r0, #0
 8017b94:	6053      	str	r3, [r2, #4]
 8017b96:	bd70      	pop	{r4, r5, r6, pc}
 8017b98:	2001      	movs	r0, #1
 8017b9a:	bd70      	pop	{r4, r5, r6, pc}
 8017b9c:	f240 3086 	movw	r0, #902	@ 0x386
 8017ba0:	bd70      	pop	{r4, r5, r6, pc}
 8017ba2:	200b      	movs	r0, #11
 8017ba4:	4770      	bx	lr
 8017ba6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017baa:	bd70      	pop	{r4, r5, r6, pc}
 8017bac:	200b      	movs	r0, #11
 8017bae:	bd70      	pop	{r4, r5, r6, pc}

08017bb0 <rcl_wait_set_clear>:
 8017bb0:	2800      	cmp	r0, #0
 8017bb2:	d074      	beq.n	8017c9e <rcl_wait_set_clear+0xee>
 8017bb4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017bb6:	b510      	push	{r4, lr}
 8017bb8:	4604      	mov	r4, r0
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d071      	beq.n	8017ca2 <rcl_wait_set_clear+0xf2>
 8017bbe:	6800      	ldr	r0, [r0, #0]
 8017bc0:	b138      	cbz	r0, 8017bd2 <rcl_wait_set_clear+0x22>
 8017bc2:	6862      	ldr	r2, [r4, #4]
 8017bc4:	2100      	movs	r1, #0
 8017bc6:	0092      	lsls	r2, r2, #2
 8017bc8:	f005 fe2e 	bl	801d828 <memset>
 8017bcc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017bce:	2200      	movs	r2, #0
 8017bd0:	601a      	str	r2, [r3, #0]
 8017bd2:	68a0      	ldr	r0, [r4, #8]
 8017bd4:	b138      	cbz	r0, 8017be6 <rcl_wait_set_clear+0x36>
 8017bd6:	68e2      	ldr	r2, [r4, #12]
 8017bd8:	2100      	movs	r1, #0
 8017bda:	0092      	lsls	r2, r2, #2
 8017bdc:	f005 fe24 	bl	801d828 <memset>
 8017be0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017be2:	2200      	movs	r2, #0
 8017be4:	60da      	str	r2, [r3, #12]
 8017be6:	69a0      	ldr	r0, [r4, #24]
 8017be8:	b138      	cbz	r0, 8017bfa <rcl_wait_set_clear+0x4a>
 8017bea:	69e2      	ldr	r2, [r4, #28]
 8017bec:	2100      	movs	r1, #0
 8017bee:	0092      	lsls	r2, r2, #2
 8017bf0:	f005 fe1a 	bl	801d828 <memset>
 8017bf4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017bf6:	2200      	movs	r2, #0
 8017bf8:	619a      	str	r2, [r3, #24]
 8017bfa:	6a20      	ldr	r0, [r4, #32]
 8017bfc:	b138      	cbz	r0, 8017c0e <rcl_wait_set_clear+0x5e>
 8017bfe:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8017c00:	2100      	movs	r1, #0
 8017c02:	0092      	lsls	r2, r2, #2
 8017c04:	f005 fe10 	bl	801d828 <memset>
 8017c08:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017c0a:	2200      	movs	r2, #0
 8017c0c:	625a      	str	r2, [r3, #36]	@ 0x24
 8017c0e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8017c10:	b138      	cbz	r0, 8017c22 <rcl_wait_set_clear+0x72>
 8017c12:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8017c14:	2100      	movs	r1, #0
 8017c16:	0092      	lsls	r2, r2, #2
 8017c18:	f005 fe06 	bl	801d828 <memset>
 8017c1c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017c1e:	2200      	movs	r2, #0
 8017c20:	631a      	str	r2, [r3, #48]	@ 0x30
 8017c22:	6920      	ldr	r0, [r4, #16]
 8017c24:	b138      	cbz	r0, 8017c36 <rcl_wait_set_clear+0x86>
 8017c26:	6962      	ldr	r2, [r4, #20]
 8017c28:	2100      	movs	r1, #0
 8017c2a:	0092      	lsls	r2, r2, #2
 8017c2c:	f005 fdfc 	bl	801d828 <memset>
 8017c30:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017c32:	2200      	movs	r2, #0
 8017c34:	641a      	str	r2, [r3, #64]	@ 0x40
 8017c36:	6898      	ldr	r0, [r3, #8]
 8017c38:	b138      	cbz	r0, 8017c4a <rcl_wait_set_clear+0x9a>
 8017c3a:	685a      	ldr	r2, [r3, #4]
 8017c3c:	2100      	movs	r1, #0
 8017c3e:	0092      	lsls	r2, r2, #2
 8017c40:	f005 fdf2 	bl	801d828 <memset>
 8017c44:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017c46:	2200      	movs	r2, #0
 8017c48:	605a      	str	r2, [r3, #4]
 8017c4a:	6958      	ldr	r0, [r3, #20]
 8017c4c:	b138      	cbz	r0, 8017c5e <rcl_wait_set_clear+0xae>
 8017c4e:	691a      	ldr	r2, [r3, #16]
 8017c50:	2100      	movs	r1, #0
 8017c52:	0092      	lsls	r2, r2, #2
 8017c54:	f005 fde8 	bl	801d828 <memset>
 8017c58:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017c5a:	2200      	movs	r2, #0
 8017c5c:	611a      	str	r2, [r3, #16]
 8017c5e:	6a18      	ldr	r0, [r3, #32]
 8017c60:	b138      	cbz	r0, 8017c72 <rcl_wait_set_clear+0xc2>
 8017c62:	69da      	ldr	r2, [r3, #28]
 8017c64:	2100      	movs	r1, #0
 8017c66:	0092      	lsls	r2, r2, #2
 8017c68:	f005 fdde 	bl	801d828 <memset>
 8017c6c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017c6e:	2200      	movs	r2, #0
 8017c70:	61da      	str	r2, [r3, #28]
 8017c72:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8017c74:	b138      	cbz	r0, 8017c86 <rcl_wait_set_clear+0xd6>
 8017c76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8017c78:	2100      	movs	r1, #0
 8017c7a:	0092      	lsls	r2, r2, #2
 8017c7c:	f005 fdd4 	bl	801d828 <memset>
 8017c80:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017c82:	2200      	movs	r2, #0
 8017c84:	629a      	str	r2, [r3, #40]	@ 0x28
 8017c86:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8017c88:	b138      	cbz	r0, 8017c9a <rcl_wait_set_clear+0xea>
 8017c8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017c8c:	2100      	movs	r1, #0
 8017c8e:	0092      	lsls	r2, r2, #2
 8017c90:	f005 fdca 	bl	801d828 <memset>
 8017c94:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017c96:	2200      	movs	r2, #0
 8017c98:	635a      	str	r2, [r3, #52]	@ 0x34
 8017c9a:	2000      	movs	r0, #0
 8017c9c:	bd10      	pop	{r4, pc}
 8017c9e:	200b      	movs	r0, #11
 8017ca0:	4770      	bx	lr
 8017ca2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017ca6:	bd10      	pop	{r4, pc}

08017ca8 <rcl_wait_set_resize>:
 8017ca8:	2800      	cmp	r0, #0
 8017caa:	f000 81a1 	beq.w	8017ff0 <rcl_wait_set_resize+0x348>
 8017cae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cb2:	f8d0 a030 	ldr.w	sl, [r0, #48]	@ 0x30
 8017cb6:	b083      	sub	sp, #12
 8017cb8:	4604      	mov	r4, r0
 8017cba:	f1ba 0f00 	cmp.w	sl, #0
 8017cbe:	f000 8199 	beq.w	8017ff4 <rcl_wait_set_resize+0x34c>
 8017cc2:	f04f 0800 	mov.w	r8, #0
 8017cc6:	f8da 9058 	ldr.w	r9, [sl, #88]	@ 0x58
 8017cca:	461e      	mov	r6, r3
 8017ccc:	460f      	mov	r7, r1
 8017cce:	e9da b313 	ldrd	fp, r3, [sl, #76]	@ 0x4c
 8017cd2:	4615      	mov	r5, r2
 8017cd4:	f8c0 8004 	str.w	r8, [r0, #4]
 8017cd8:	6800      	ldr	r0, [r0, #0]
 8017cda:	f8ca 8000 	str.w	r8, [sl]
 8017cde:	2900      	cmp	r1, #0
 8017ce0:	f000 80cf 	beq.w	8017e82 <rcl_wait_set_resize+0x1da>
 8017ce4:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8017ce8:	464a      	mov	r2, r9
 8017cea:	4651      	mov	r1, sl
 8017cec:	9301      	str	r3, [sp, #4]
 8017cee:	4798      	blx	r3
 8017cf0:	9b01      	ldr	r3, [sp, #4]
 8017cf2:	6020      	str	r0, [r4, #0]
 8017cf4:	2800      	cmp	r0, #0
 8017cf6:	f000 8109 	beq.w	8017f0c <rcl_wait_set_resize+0x264>
 8017cfa:	4652      	mov	r2, sl
 8017cfc:	4641      	mov	r1, r8
 8017cfe:	9301      	str	r3, [sp, #4]
 8017d00:	f005 fd92 	bl	801d828 <memset>
 8017d04:	6067      	str	r7, [r4, #4]
 8017d06:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 8017d08:	9b01      	ldr	r3, [sp, #4]
 8017d0a:	68b8      	ldr	r0, [r7, #8]
 8017d0c:	f8c7 8004 	str.w	r8, [r7, #4]
 8017d10:	464a      	mov	r2, r9
 8017d12:	4651      	mov	r1, sl
 8017d14:	4798      	blx	r3
 8017d16:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017d18:	60b8      	str	r0, [r7, #8]
 8017d1a:	689f      	ldr	r7, [r3, #8]
 8017d1c:	2f00      	cmp	r7, #0
 8017d1e:	f000 80f0 	beq.w	8017f02 <rcl_wait_set_resize+0x25a>
 8017d22:	4652      	mov	r2, sl
 8017d24:	4641      	mov	r1, r8
 8017d26:	4638      	mov	r0, r7
 8017d28:	f005 fd7e 	bl	801d828 <memset>
 8017d2c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8017d30:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8017d34:	68a0      	ldr	r0, [r4, #8]
 8017d36:	2700      	movs	r7, #0
 8017d38:	e9da 2313 	ldrd	r2, r3, [sl, #76]	@ 0x4c
 8017d3c:	60e7      	str	r7, [r4, #12]
 8017d3e:	f8ca 700c 	str.w	r7, [sl, #12]
 8017d42:	2d00      	cmp	r5, #0
 8017d44:	f040 80b0 	bne.w	8017ea8 <rcl_wait_set_resize+0x200>
 8017d48:	b130      	cbz	r0, 8017d58 <rcl_wait_set_resize+0xb0>
 8017d4a:	4641      	mov	r1, r8
 8017d4c:	4790      	blx	r2
 8017d4e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8017d52:	60a5      	str	r5, [r4, #8]
 8017d54:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8017d58:	f8da 0014 	ldr.w	r0, [sl, #20]
 8017d5c:	2700      	movs	r7, #0
 8017d5e:	19ad      	adds	r5, r5, r6
 8017d60:	f8ca 7010 	str.w	r7, [sl, #16]
 8017d64:	f040 80b8 	bne.w	8017ed8 <rcl_wait_set_resize+0x230>
 8017d68:	b148      	cbz	r0, 8017d7e <rcl_wait_set_resize+0xd6>
 8017d6a:	f8da 304c 	ldr.w	r3, [sl, #76]	@ 0x4c
 8017d6e:	4641      	mov	r1, r8
 8017d70:	4798      	blx	r3
 8017d72:	f8ca 5014 	str.w	r5, [sl, #20]
 8017d76:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8017d7a:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8017d7e:	6920      	ldr	r0, [r4, #16]
 8017d80:	2500      	movs	r5, #0
 8017d82:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8017d86:	6165      	str	r5, [r4, #20]
 8017d88:	f8ca 5040 	str.w	r5, [sl, #64]	@ 0x40
 8017d8c:	2e00      	cmp	r6, #0
 8017d8e:	f040 80c1 	bne.w	8017f14 <rcl_wait_set_resize+0x26c>
 8017d92:	b140      	cbz	r0, 8017da6 <rcl_wait_set_resize+0xfe>
 8017d94:	4641      	mov	r1, r8
 8017d96:	47c8      	blx	r9
 8017d98:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8017d9c:	6126      	str	r6, [r4, #16]
 8017d9e:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8017da2:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8017da6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017da8:	69a0      	ldr	r0, [r4, #24]
 8017daa:	2500      	movs	r5, #0
 8017dac:	61e5      	str	r5, [r4, #28]
 8017dae:	f8ca 5018 	str.w	r5, [sl, #24]
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	f040 80c2 	bne.w	8017f3c <rcl_wait_set_resize+0x294>
 8017db8:	b128      	cbz	r0, 8017dc6 <rcl_wait_set_resize+0x11e>
 8017dba:	4641      	mov	r1, r8
 8017dbc:	47c8      	blx	r9
 8017dbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017dc0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8017dc4:	61a3      	str	r3, [r4, #24]
 8017dc6:	f8da 0020 	ldr.w	r0, [sl, #32]
 8017dca:	b130      	cbz	r0, 8017dda <rcl_wait_set_resize+0x132>
 8017dcc:	4641      	mov	r1, r8
 8017dce:	47c8      	blx	r9
 8017dd0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8017dd4:	2300      	movs	r3, #0
 8017dd6:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8017dda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017ddc:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8017de0:	6a20      	ldr	r0, [r4, #32]
 8017de2:	2500      	movs	r5, #0
 8017de4:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 8017de8:	6265      	str	r5, [r4, #36]	@ 0x24
 8017dea:	f8ca 5024 	str.w	r5, [sl, #36]	@ 0x24
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	f000 80c8 	beq.w	8017f84 <rcl_wait_set_resize+0x2dc>
 8017df4:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8017df8:	4632      	mov	r2, r6
 8017dfa:	4649      	mov	r1, r9
 8017dfc:	47c0      	blx	r8
 8017dfe:	6220      	str	r0, [r4, #32]
 8017e00:	2800      	cmp	r0, #0
 8017e02:	f000 8083 	beq.w	8017f0c <rcl_wait_set_resize+0x264>
 8017e06:	464a      	mov	r2, r9
 8017e08:	4629      	mov	r1, r5
 8017e0a:	f005 fd0d 	bl	801d828 <memset>
 8017e0e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8017e12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017e14:	6263      	str	r3, [r4, #36]	@ 0x24
 8017e16:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 8017e1a:	f8ca 5028 	str.w	r5, [sl, #40]	@ 0x28
 8017e1e:	4632      	mov	r2, r6
 8017e20:	4649      	mov	r1, r9
 8017e22:	47c0      	blx	r8
 8017e24:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017e26:	f8ca 002c 	str.w	r0, [sl, #44]	@ 0x2c
 8017e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	f000 80fb 	beq.w	8018028 <rcl_wait_set_resize+0x380>
 8017e32:	464a      	mov	r2, r9
 8017e34:	4629      	mov	r1, r5
 8017e36:	4618      	mov	r0, r3
 8017e38:	f005 fcf6 	bl	801d828 <memset>
 8017e3c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8017e40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017e42:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8017e46:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8017e48:	2500      	movs	r5, #0
 8017e4a:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 8017e4e:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8017e50:	f8ca 5030 	str.w	r5, [sl, #48]	@ 0x30
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	f040 80a9 	bne.w	8017fac <rcl_wait_set_resize+0x304>
 8017e5a:	b128      	cbz	r0, 8017e68 <rcl_wait_set_resize+0x1c0>
 8017e5c:	4631      	mov	r1, r6
 8017e5e:	47b8      	blx	r7
 8017e60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017e62:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8017e66:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017e68:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8017e6c:	b128      	cbz	r0, 8017e7a <rcl_wait_set_resize+0x1d2>
 8017e6e:	4631      	mov	r1, r6
 8017e70:	47b8      	blx	r7
 8017e72:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017e74:	2200      	movs	r2, #0
 8017e76:	e9c3 220d 	strd	r2, r2, [r3, #52]	@ 0x34
 8017e7a:	2000      	movs	r0, #0
 8017e7c:	b003      	add	sp, #12
 8017e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e82:	b120      	cbz	r0, 8017e8e <rcl_wait_set_resize+0x1e6>
 8017e84:	4649      	mov	r1, r9
 8017e86:	47d8      	blx	fp
 8017e88:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8017e8c:	6027      	str	r7, [r4, #0]
 8017e8e:	f8da 0008 	ldr.w	r0, [sl, #8]
 8017e92:	2800      	cmp	r0, #0
 8017e94:	f43f af4c 	beq.w	8017d30 <rcl_wait_set_resize+0x88>
 8017e98:	4649      	mov	r1, r9
 8017e9a:	47d8      	blx	fp
 8017e9c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8017ea0:	2300      	movs	r3, #0
 8017ea2:	e9ca 3301 	strd	r3, r3, [sl, #4]
 8017ea6:	e743      	b.n	8017d30 <rcl_wait_set_resize+0x88>
 8017ea8:	4642      	mov	r2, r8
 8017eaa:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8017eae:	4641      	mov	r1, r8
 8017eb0:	4798      	blx	r3
 8017eb2:	60a0      	str	r0, [r4, #8]
 8017eb4:	b350      	cbz	r0, 8017f0c <rcl_wait_set_resize+0x264>
 8017eb6:	4642      	mov	r2, r8
 8017eb8:	4639      	mov	r1, r7
 8017eba:	f005 fcb5 	bl	801d828 <memset>
 8017ebe:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8017ec2:	60e5      	str	r5, [r4, #12]
 8017ec4:	2700      	movs	r7, #0
 8017ec6:	19ad      	adds	r5, r5, r6
 8017ec8:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8017ecc:	f8da 0014 	ldr.w	r0, [sl, #20]
 8017ed0:	f8ca 7010 	str.w	r7, [sl, #16]
 8017ed4:	f43f af48 	beq.w	8017d68 <rcl_wait_set_resize+0xc0>
 8017ed8:	00ad      	lsls	r5, r5, #2
 8017eda:	4642      	mov	r2, r8
 8017edc:	f8da 3050 	ldr.w	r3, [sl, #80]	@ 0x50
 8017ee0:	4629      	mov	r1, r5
 8017ee2:	4798      	blx	r3
 8017ee4:	4680      	mov	r8, r0
 8017ee6:	f8ca 0014 	str.w	r0, [sl, #20]
 8017eea:	2800      	cmp	r0, #0
 8017eec:	f000 8085 	beq.w	8017ffa <rcl_wait_set_resize+0x352>
 8017ef0:	462a      	mov	r2, r5
 8017ef2:	4639      	mov	r1, r7
 8017ef4:	f005 fc98 	bl	801d828 <memset>
 8017ef8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8017efc:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8017f00:	e73d      	b.n	8017d7e <rcl_wait_set_resize+0xd6>
 8017f02:	6820      	ldr	r0, [r4, #0]
 8017f04:	4649      	mov	r1, r9
 8017f06:	47d8      	blx	fp
 8017f08:	e9c4 7700 	strd	r7, r7, [r4]
 8017f0c:	200a      	movs	r0, #10
 8017f0e:	b003      	add	sp, #12
 8017f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f14:	4642      	mov	r2, r8
 8017f16:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8017f1a:	4641      	mov	r1, r8
 8017f1c:	47b8      	blx	r7
 8017f1e:	6120      	str	r0, [r4, #16]
 8017f20:	2800      	cmp	r0, #0
 8017f22:	d0f3      	beq.n	8017f0c <rcl_wait_set_resize+0x264>
 8017f24:	4642      	mov	r2, r8
 8017f26:	4629      	mov	r1, r5
 8017f28:	f005 fc7e 	bl	801d828 <memset>
 8017f2c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8017f30:	6166      	str	r6, [r4, #20]
 8017f32:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8017f36:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8017f3a:	e734      	b.n	8017da6 <rcl_wait_set_resize+0xfe>
 8017f3c:	009e      	lsls	r6, r3, #2
 8017f3e:	4642      	mov	r2, r8
 8017f40:	4631      	mov	r1, r6
 8017f42:	47b8      	blx	r7
 8017f44:	61a0      	str	r0, [r4, #24]
 8017f46:	2800      	cmp	r0, #0
 8017f48:	d0e0      	beq.n	8017f0c <rcl_wait_set_resize+0x264>
 8017f4a:	4632      	mov	r2, r6
 8017f4c:	4629      	mov	r1, r5
 8017f4e:	f005 fc6b 	bl	801d828 <memset>
 8017f52:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8017f56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017f58:	61e3      	str	r3, [r4, #28]
 8017f5a:	f8da 0020 	ldr.w	r0, [sl, #32]
 8017f5e:	f8ca 501c 	str.w	r5, [sl, #28]
 8017f62:	4642      	mov	r2, r8
 8017f64:	4631      	mov	r1, r6
 8017f66:	47b8      	blx	r7
 8017f68:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017f6a:	f8ca 0020 	str.w	r0, [sl, #32]
 8017f6e:	6a1f      	ldr	r7, [r3, #32]
 8017f70:	2f00      	cmp	r7, #0
 8017f72:	d053      	beq.n	801801c <rcl_wait_set_resize+0x374>
 8017f74:	4632      	mov	r2, r6
 8017f76:	4629      	mov	r1, r5
 8017f78:	4638      	mov	r0, r7
 8017f7a:	f005 fc55 	bl	801d828 <memset>
 8017f7e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8017f82:	e72a      	b.n	8017dda <rcl_wait_set_resize+0x132>
 8017f84:	b128      	cbz	r0, 8017f92 <rcl_wait_set_resize+0x2ea>
 8017f86:	4631      	mov	r1, r6
 8017f88:	47b8      	blx	r7
 8017f8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017f8c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8017f90:	6223      	str	r3, [r4, #32]
 8017f92:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 8017f96:	2800      	cmp	r0, #0
 8017f98:	f43f af52 	beq.w	8017e40 <rcl_wait_set_resize+0x198>
 8017f9c:	4631      	mov	r1, r6
 8017f9e:	47b8      	blx	r7
 8017fa0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8017fa4:	2300      	movs	r3, #0
 8017fa6:	e9ca 330a 	strd	r3, r3, [sl, #40]	@ 0x28
 8017faa:	e749      	b.n	8017e40 <rcl_wait_set_resize+0x198>
 8017fac:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8017fb0:	4632      	mov	r2, r6
 8017fb2:	4649      	mov	r1, r9
 8017fb4:	47c0      	blx	r8
 8017fb6:	62a0      	str	r0, [r4, #40]	@ 0x28
 8017fb8:	2800      	cmp	r0, #0
 8017fba:	d0a7      	beq.n	8017f0c <rcl_wait_set_resize+0x264>
 8017fbc:	464a      	mov	r2, r9
 8017fbe:	4629      	mov	r1, r5
 8017fc0:	f005 fc32 	bl	801d828 <memset>
 8017fc4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8017fc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017fca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017fcc:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8017fd0:	f8ca 5034 	str.w	r5, [sl, #52]	@ 0x34
 8017fd4:	4632      	mov	r2, r6
 8017fd6:	4649      	mov	r1, r9
 8017fd8:	47c0      	blx	r8
 8017fda:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017fdc:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8017fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017fe2:	b34b      	cbz	r3, 8018038 <rcl_wait_set_resize+0x390>
 8017fe4:	464a      	mov	r2, r9
 8017fe6:	4629      	mov	r1, r5
 8017fe8:	4618      	mov	r0, r3
 8017fea:	f005 fc1d 	bl	801d828 <memset>
 8017fee:	e744      	b.n	8017e7a <rcl_wait_set_resize+0x1d2>
 8017ff0:	200b      	movs	r0, #11
 8017ff2:	4770      	bx	lr
 8017ff4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017ff8:	e789      	b.n	8017f0e <rcl_wait_set_resize+0x266>
 8017ffa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017ffc:	68a0      	ldr	r0, [r4, #8]
 8017ffe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018000:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8018002:	4790      	blx	r2
 8018004:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018006:	6920      	ldr	r0, [r4, #16]
 8018008:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801800a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801800c:	f8c4 800c 	str.w	r8, [r4, #12]
 8018010:	f8c4 8008 	str.w	r8, [r4, #8]
 8018014:	4790      	blx	r2
 8018016:	e9c4 8804 	strd	r8, r8, [r4, #16]
 801801a:	e777      	b.n	8017f0c <rcl_wait_set_resize+0x264>
 801801c:	69a0      	ldr	r0, [r4, #24]
 801801e:	4641      	mov	r1, r8
 8018020:	47c8      	blx	r9
 8018022:	e9c4 7706 	strd	r7, r7, [r4, #24]
 8018026:	e771      	b.n	8017f0c <rcl_wait_set_resize+0x264>
 8018028:	6a20      	ldr	r0, [r4, #32]
 801802a:	9301      	str	r3, [sp, #4]
 801802c:	4631      	mov	r1, r6
 801802e:	47b8      	blx	r7
 8018030:	9b01      	ldr	r3, [sp, #4]
 8018032:	e9c4 3308 	strd	r3, r3, [r4, #32]
 8018036:	e769      	b.n	8017f0c <rcl_wait_set_resize+0x264>
 8018038:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801803a:	9301      	str	r3, [sp, #4]
 801803c:	4631      	mov	r1, r6
 801803e:	47b8      	blx	r7
 8018040:	9b01      	ldr	r3, [sp, #4]
 8018042:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8018046:	e761      	b.n	8017f0c <rcl_wait_set_resize+0x264>

08018048 <rcl_wait_set_init>:
 8018048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801804c:	b084      	sub	sp, #16
 801804e:	4604      	mov	r4, r0
 8018050:	a810      	add	r0, sp, #64	@ 0x40
 8018052:	460d      	mov	r5, r1
 8018054:	4690      	mov	r8, r2
 8018056:	461f      	mov	r7, r3
 8018058:	f7f7 f8fc 	bl	800f254 <rcutils_allocator_is_valid>
 801805c:	2800      	cmp	r0, #0
 801805e:	d06c      	beq.n	801813a <rcl_wait_set_init+0xf2>
 8018060:	2c00      	cmp	r4, #0
 8018062:	d06a      	beq.n	801813a <rcl_wait_set_init+0xf2>
 8018064:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8018066:	b126      	cbz	r6, 8018072 <rcl_wait_set_init+0x2a>
 8018068:	2564      	movs	r5, #100	@ 0x64
 801806a:	4628      	mov	r0, r5
 801806c:	b004      	add	sp, #16
 801806e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018072:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018074:	2b00      	cmp	r3, #0
 8018076:	d060      	beq.n	801813a <rcl_wait_set_init+0xf2>
 8018078:	4618      	mov	r0, r3
 801807a:	f7fe f8f7 	bl	801626c <rcl_context_is_valid>
 801807e:	2800      	cmp	r0, #0
 8018080:	d060      	beq.n	8018144 <rcl_wait_set_init+0xfc>
 8018082:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018084:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8018086:	205c      	movs	r0, #92	@ 0x5c
 8018088:	4798      	blx	r3
 801808a:	6320      	str	r0, [r4, #48]	@ 0x30
 801808c:	2800      	cmp	r0, #0
 801808e:	d063      	beq.n	8018158 <rcl_wait_set_init+0x110>
 8018090:	4631      	mov	r1, r6
 8018092:	225c      	movs	r2, #92	@ 0x5c
 8018094:	f005 fbc8 	bl	801d828 <memset>
 8018098:	f8d4 9030 	ldr.w	r9, [r4, #48]	@ 0x30
 801809c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801809e:	f8c9 3044 	str.w	r3, [r9, #68]	@ 0x44
 80180a2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 80180a6:	eb03 0e02 	add.w	lr, r3, r2
 80180aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80180ac:	449e      	add	lr, r3
 80180ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80180b0:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80180b4:	f8d3 a000 	ldr.w	sl, [r3]
 80180b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80180bc:	e9c9 6601 	strd	r6, r6, [r9, #4]
 80180c0:	e9c9 6604 	strd	r6, r6, [r9, #16]
 80180c4:	e9c9 6607 	strd	r6, r6, [r9, #28]
 80180c8:	e9c9 660a 	strd	r6, r6, [r9, #40]	@ 0x28
 80180cc:	e9c9 660d 	strd	r6, r6, [r9, #52]	@ 0x34
 80180d0:	f109 0648 	add.w	r6, r9, #72	@ 0x48
 80180d4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80180d6:	44c6      	add	lr, r8
 80180d8:	f8dc 3000 	ldr.w	r3, [ip]
 80180dc:	6033      	str	r3, [r6, #0]
 80180de:	eb0e 0145 	add.w	r1, lr, r5, lsl #1
 80180e2:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 80180e6:	f002 faa7 	bl	801a638 <rmw_create_wait_set>
 80180ea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80180ec:	f8c9 003c 	str.w	r0, [r9, #60]	@ 0x3c
 80180f0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80180f2:	b348      	cbz	r0, 8018148 <rcl_wait_set_init+0x100>
 80180f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80180f6:	9302      	str	r3, [sp, #8]
 80180f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80180fa:	9301      	str	r3, [sp, #4]
 80180fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80180fe:	9300      	str	r3, [sp, #0]
 8018100:	4629      	mov	r1, r5
 8018102:	463b      	mov	r3, r7
 8018104:	4642      	mov	r2, r8
 8018106:	4620      	mov	r0, r4
 8018108:	f7ff fdce 	bl	8017ca8 <rcl_wait_set_resize>
 801810c:	4605      	mov	r5, r0
 801810e:	2800      	cmp	r0, #0
 8018110:	d0ab      	beq.n	801806a <rcl_wait_set_init+0x22>
 8018112:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018114:	bb13      	cbnz	r3, 801815c <rcl_wait_set_init+0x114>
 8018116:	2600      	movs	r6, #0
 8018118:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801811c:	9600      	str	r6, [sp, #0]
 801811e:	4633      	mov	r3, r6
 8018120:	4632      	mov	r2, r6
 8018122:	4631      	mov	r1, r6
 8018124:	4620      	mov	r0, r4
 8018126:	f7ff fdbf 	bl	8017ca8 <rcl_wait_set_resize>
 801812a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801812c:	2800      	cmp	r0, #0
 801812e:	d09c      	beq.n	801806a <rcl_wait_set_init+0x22>
 8018130:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8018132:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8018134:	4798      	blx	r3
 8018136:	6326      	str	r6, [r4, #48]	@ 0x30
 8018138:	e797      	b.n	801806a <rcl_wait_set_init+0x22>
 801813a:	250b      	movs	r5, #11
 801813c:	4628      	mov	r0, r5
 801813e:	b004      	add	sp, #16
 8018140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018144:	2565      	movs	r5, #101	@ 0x65
 8018146:	e790      	b.n	801806a <rcl_wait_set_init+0x22>
 8018148:	2501      	movs	r5, #1
 801814a:	f002 fa7f 	bl	801a64c <rmw_destroy_wait_set>
 801814e:	2800      	cmp	r0, #0
 8018150:	bf18      	it	ne
 8018152:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8018156:	e7de      	b.n	8018116 <rcl_wait_set_init+0xce>
 8018158:	250a      	movs	r5, #10
 801815a:	e786      	b.n	801806a <rcl_wait_set_init+0x22>
 801815c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801815e:	e7f4      	b.n	801814a <rcl_wait_set_init+0x102>

08018160 <rcl_wait_set_add_guard_condition>:
 8018160:	b318      	cbz	r0, 80181aa <rcl_wait_set_add_guard_condition+0x4a>
 8018162:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018164:	b570      	push	{r4, r5, r6, lr}
 8018166:	4604      	mov	r4, r0
 8018168:	b30b      	cbz	r3, 80181ae <rcl_wait_set_add_guard_condition+0x4e>
 801816a:	b319      	cbz	r1, 80181b4 <rcl_wait_set_add_guard_condition+0x54>
 801816c:	68dd      	ldr	r5, [r3, #12]
 801816e:	68c0      	ldr	r0, [r0, #12]
 8018170:	4285      	cmp	r5, r0
 8018172:	d217      	bcs.n	80181a4 <rcl_wait_set_add_guard_condition+0x44>
 8018174:	68a0      	ldr	r0, [r4, #8]
 8018176:	1c6e      	adds	r6, r5, #1
 8018178:	60de      	str	r6, [r3, #12]
 801817a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801817e:	b102      	cbz	r2, 8018182 <rcl_wait_set_add_guard_condition+0x22>
 8018180:	6015      	str	r5, [r2, #0]
 8018182:	4608      	mov	r0, r1
 8018184:	f004 f944 	bl	801c410 <rcl_guard_condition_get_rmw_handle>
 8018188:	b150      	cbz	r0, 80181a0 <rcl_wait_set_add_guard_condition+0x40>
 801818a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801818c:	6842      	ldr	r2, [r0, #4]
 801818e:	695b      	ldr	r3, [r3, #20]
 8018190:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018194:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018196:	6913      	ldr	r3, [r2, #16]
 8018198:	3301      	adds	r3, #1
 801819a:	2000      	movs	r0, #0
 801819c:	6113      	str	r3, [r2, #16]
 801819e:	bd70      	pop	{r4, r5, r6, pc}
 80181a0:	2001      	movs	r0, #1
 80181a2:	bd70      	pop	{r4, r5, r6, pc}
 80181a4:	f240 3086 	movw	r0, #902	@ 0x386
 80181a8:	bd70      	pop	{r4, r5, r6, pc}
 80181aa:	200b      	movs	r0, #11
 80181ac:	4770      	bx	lr
 80181ae:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80181b2:	bd70      	pop	{r4, r5, r6, pc}
 80181b4:	200b      	movs	r0, #11
 80181b6:	bd70      	pop	{r4, r5, r6, pc}

080181b8 <rcl_wait_set_add_timer>:
 80181b8:	b328      	cbz	r0, 8018206 <rcl_wait_set_add_timer+0x4e>
 80181ba:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80181bc:	b570      	push	{r4, r5, r6, lr}
 80181be:	4604      	mov	r4, r0
 80181c0:	b31b      	cbz	r3, 801820a <rcl_wait_set_add_timer+0x52>
 80181c2:	b329      	cbz	r1, 8018210 <rcl_wait_set_add_timer+0x58>
 80181c4:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80181c6:	6965      	ldr	r5, [r4, #20]
 80181c8:	42a8      	cmp	r0, r5
 80181ca:	d219      	bcs.n	8018200 <rcl_wait_set_add_timer+0x48>
 80181cc:	6925      	ldr	r5, [r4, #16]
 80181ce:	1c46      	adds	r6, r0, #1
 80181d0:	641e      	str	r6, [r3, #64]	@ 0x40
 80181d2:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80181d6:	b102      	cbz	r2, 80181da <rcl_wait_set_add_timer+0x22>
 80181d8:	6010      	str	r0, [r2, #0]
 80181da:	4608      	mov	r0, r1
 80181dc:	f7ff fb98 	bl	8017910 <rcl_timer_get_guard_condition>
 80181e0:	b160      	cbz	r0, 80181fc <rcl_wait_set_add_timer+0x44>
 80181e2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80181e4:	68e3      	ldr	r3, [r4, #12]
 80181e6:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80181e8:	3b01      	subs	r3, #1
 80181ea:	441d      	add	r5, r3
 80181ec:	f004 f910 	bl	801c410 <rcl_guard_condition_get_rmw_handle>
 80181f0:	b180      	cbz	r0, 8018214 <rcl_wait_set_add_timer+0x5c>
 80181f2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80181f4:	6842      	ldr	r2, [r0, #4]
 80181f6:	695b      	ldr	r3, [r3, #20]
 80181f8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80181fc:	2000      	movs	r0, #0
 80181fe:	bd70      	pop	{r4, r5, r6, pc}
 8018200:	f240 3086 	movw	r0, #902	@ 0x386
 8018204:	bd70      	pop	{r4, r5, r6, pc}
 8018206:	200b      	movs	r0, #11
 8018208:	4770      	bx	lr
 801820a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801820e:	bd70      	pop	{r4, r5, r6, pc}
 8018210:	200b      	movs	r0, #11
 8018212:	bd70      	pop	{r4, r5, r6, pc}
 8018214:	2001      	movs	r0, #1
 8018216:	bd70      	pop	{r4, r5, r6, pc}

08018218 <rcl_wait_set_add_client>:
 8018218:	b318      	cbz	r0, 8018262 <rcl_wait_set_add_client+0x4a>
 801821a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801821c:	b570      	push	{r4, r5, r6, lr}
 801821e:	4604      	mov	r4, r0
 8018220:	b30b      	cbz	r3, 8018266 <rcl_wait_set_add_client+0x4e>
 8018222:	b319      	cbz	r1, 801826c <rcl_wait_set_add_client+0x54>
 8018224:	699d      	ldr	r5, [r3, #24]
 8018226:	69c0      	ldr	r0, [r0, #28]
 8018228:	4285      	cmp	r5, r0
 801822a:	d217      	bcs.n	801825c <rcl_wait_set_add_client+0x44>
 801822c:	69a0      	ldr	r0, [r4, #24]
 801822e:	1c6e      	adds	r6, r5, #1
 8018230:	619e      	str	r6, [r3, #24]
 8018232:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8018236:	b102      	cbz	r2, 801823a <rcl_wait_set_add_client+0x22>
 8018238:	6015      	str	r5, [r2, #0]
 801823a:	4608      	mov	r0, r1
 801823c:	f7fd ff26 	bl	801608c <rcl_client_get_rmw_handle>
 8018240:	b150      	cbz	r0, 8018258 <rcl_wait_set_add_client+0x40>
 8018242:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018244:	6842      	ldr	r2, [r0, #4]
 8018246:	6a1b      	ldr	r3, [r3, #32]
 8018248:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801824c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801824e:	69d3      	ldr	r3, [r2, #28]
 8018250:	3301      	adds	r3, #1
 8018252:	2000      	movs	r0, #0
 8018254:	61d3      	str	r3, [r2, #28]
 8018256:	bd70      	pop	{r4, r5, r6, pc}
 8018258:	2001      	movs	r0, #1
 801825a:	bd70      	pop	{r4, r5, r6, pc}
 801825c:	f240 3086 	movw	r0, #902	@ 0x386
 8018260:	bd70      	pop	{r4, r5, r6, pc}
 8018262:	200b      	movs	r0, #11
 8018264:	4770      	bx	lr
 8018266:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801826a:	bd70      	pop	{r4, r5, r6, pc}
 801826c:	200b      	movs	r0, #11
 801826e:	bd70      	pop	{r4, r5, r6, pc}

08018270 <rcl_wait_set_add_service>:
 8018270:	b318      	cbz	r0, 80182ba <rcl_wait_set_add_service+0x4a>
 8018272:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018274:	b570      	push	{r4, r5, r6, lr}
 8018276:	4604      	mov	r4, r0
 8018278:	b30b      	cbz	r3, 80182be <rcl_wait_set_add_service+0x4e>
 801827a:	b319      	cbz	r1, 80182c4 <rcl_wait_set_add_service+0x54>
 801827c:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801827e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8018280:	4285      	cmp	r5, r0
 8018282:	d217      	bcs.n	80182b4 <rcl_wait_set_add_service+0x44>
 8018284:	6a20      	ldr	r0, [r4, #32]
 8018286:	1c6e      	adds	r6, r5, #1
 8018288:	625e      	str	r6, [r3, #36]	@ 0x24
 801828a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801828e:	b102      	cbz	r2, 8018292 <rcl_wait_set_add_service+0x22>
 8018290:	6015      	str	r5, [r2, #0]
 8018292:	4608      	mov	r0, r1
 8018294:	f7fe fdfe 	bl	8016e94 <rcl_service_get_rmw_handle>
 8018298:	b150      	cbz	r0, 80182b0 <rcl_wait_set_add_service+0x40>
 801829a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801829c:	6842      	ldr	r2, [r0, #4]
 801829e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80182a0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80182a4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80182a6:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80182a8:	3301      	adds	r3, #1
 80182aa:	2000      	movs	r0, #0
 80182ac:	6293      	str	r3, [r2, #40]	@ 0x28
 80182ae:	bd70      	pop	{r4, r5, r6, pc}
 80182b0:	2001      	movs	r0, #1
 80182b2:	bd70      	pop	{r4, r5, r6, pc}
 80182b4:	f240 3086 	movw	r0, #902	@ 0x386
 80182b8:	bd70      	pop	{r4, r5, r6, pc}
 80182ba:	200b      	movs	r0, #11
 80182bc:	4770      	bx	lr
 80182be:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80182c2:	bd70      	pop	{r4, r5, r6, pc}
 80182c4:	200b      	movs	r0, #11
 80182c6:	bd70      	pop	{r4, r5, r6, pc}

080182c8 <rcl_wait>:
 80182c8:	2800      	cmp	r0, #0
 80182ca:	f000 81d4 	beq.w	8018676 <rcl_wait+0x3ae>
 80182ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182d2:	ed2d 8b02 	vpush	{d8}
 80182d6:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 80182d8:	b099      	sub	sp, #100	@ 0x64
 80182da:	4604      	mov	r4, r0
 80182dc:	2d00      	cmp	r5, #0
 80182de:	f000 8178 	beq.w	80185d2 <rcl_wait+0x30a>
 80182e2:	461f      	mov	r7, r3
 80182e4:	6843      	ldr	r3, [r0, #4]
 80182e6:	4690      	mov	r8, r2
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	f000 809b 	beq.w	8018424 <rcl_wait+0x15c>
 80182ee:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 80182f0:	2e00      	cmp	r6, #0
 80182f2:	f000 80b2 	beq.w	801845a <rcl_wait+0x192>
 80182f6:	2100      	movs	r1, #0
 80182f8:	468c      	mov	ip, r1
 80182fa:	460a      	mov	r2, r1
 80182fc:	46a6      	mov	lr, r4
 80182fe:	f8de 3010 	ldr.w	r3, [lr, #16]
 8018302:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018306:	b173      	cbz	r3, 8018326 <rcl_wait+0x5e>
 8018308:	f8de 300c 	ldr.w	r3, [lr, #12]
 801830c:	6968      	ldr	r0, [r5, #20]
 801830e:	440b      	add	r3, r1
 8018310:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8018314:	b13c      	cbz	r4, 8018326 <rcl_wait+0x5e>
 8018316:	692b      	ldr	r3, [r5, #16]
 8018318:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 801831c:	3301      	adds	r3, #1
 801831e:	612b      	str	r3, [r5, #16]
 8018320:	f8de 5030 	ldr.w	r5, [lr, #48]	@ 0x30
 8018324:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 8018326:	3101      	adds	r1, #1
 8018328:	f14c 0c00 	adc.w	ip, ip, #0
 801832c:	42b1      	cmp	r1, r6
 801832e:	f17c 0300 	sbcs.w	r3, ip, #0
 8018332:	d3e4      	bcc.n	80182fe <rcl_wait+0x36>
 8018334:	ed9f 8baa 	vldr	d8, [pc, #680]	@ 80185e0 <rcl_wait+0x318>
 8018338:	ea58 0307 	orrs.w	r3, r8, r7
 801833c:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
 8018340:	e9cd 220e 	strd	r2, r2, [sp, #56]	@ 0x38
 8018344:	ed8d 8b12 	vstr	d8, [sp, #72]	@ 0x48
 8018348:	ed8d 8b14 	vstr	d8, [sp, #80]	@ 0x50
 801834c:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 8018350:	4674      	mov	r4, lr
 8018352:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8018356:	f000 8094 	beq.w	8018482 <rcl_wait+0x1ba>
 801835a:	2e00      	cmp	r6, #0
 801835c:	f000 8145 	beq.w	80185ea <rcl_wait+0x322>
 8018360:	2500      	movs	r5, #0
 8018362:	46bb      	mov	fp, r7
 8018364:	e02c      	b.n	80183c0 <rcl_wait+0xf8>
 8018366:	6923      	ldr	r3, [r4, #16]
 8018368:	f853 0009 	ldr.w	r0, [r3, r9]
 801836c:	a908      	add	r1, sp, #32
 801836e:	ed8d 8b08 	vstr	d8, [sp, #32]
 8018372:	f7ff faab 	bl	80178cc <rcl_timer_get_next_call_time>
 8018376:	f240 3321 	movw	r3, #801	@ 0x321
 801837a:	4298      	cmp	r0, r3
 801837c:	f000 80bb 	beq.w	80184f6 <rcl_wait+0x22e>
 8018380:	2800      	cmp	r0, #0
 8018382:	d165      	bne.n	8018450 <rcl_wait+0x188>
 8018384:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
 8018388:	7830      	ldrb	r0, [r6, #0]
 801838a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801838c:	ab18      	add	r3, sp, #96	@ 0x60
 801838e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8018392:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8018396:	9205      	str	r2, [sp, #20]
 8018398:	f853 2c20 	ldr.w	r2, [r3, #-32]
 801839c:	4297      	cmp	r7, r2
 801839e:	9a05      	ldr	r2, [sp, #20]
 80183a0:	eb71 0202 	sbcs.w	r2, r1, r2
 80183a4:	da06      	bge.n	80183b4 <rcl_wait+0xec>
 80183a6:	e943 7108 	strd	r7, r1, [r3, #-32]
 80183aa:	ab18      	add	r3, sp, #96	@ 0x60
 80183ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80183b0:	f840 6c30 	str.w	r6, [r0, #-48]
 80183b4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80183b6:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 80183b8:	3501      	adds	r5, #1
 80183ba:	42b5      	cmp	r5, r6
 80183bc:	f080 8114 	bcs.w	80185e8 <rcl_wait+0x320>
 80183c0:	6923      	ldr	r3, [r4, #16]
 80183c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80183c6:	ea4f 0985 	mov.w	r9, r5, lsl #2
 80183ca:	2800      	cmp	r0, #0
 80183cc:	d0f4      	beq.n	80183b8 <rcl_wait+0xf0>
 80183ce:	a907      	add	r1, sp, #28
 80183d0:	f7ff f9a8 	bl	8017724 <rcl_timer_clock>
 80183d4:	4603      	mov	r3, r0
 80183d6:	2800      	cmp	r0, #0
 80183d8:	f040 8141 	bne.w	801865e <rcl_wait+0x396>
 80183dc:	9807      	ldr	r0, [sp, #28]
 80183de:	7802      	ldrb	r2, [r0, #0]
 80183e0:	2a01      	cmp	r2, #1
 80183e2:	d1c0      	bne.n	8018366 <rcl_wait+0x9e>
 80183e4:	f10d 011b 	add.w	r1, sp, #27
 80183e8:	f88d 301b 	strb.w	r3, [sp, #27]
 80183ec:	f7fe ff72 	bl	80172d4 <rcl_is_enabled_ros_time_override>
 80183f0:	4602      	mov	r2, r0
 80183f2:	2800      	cmp	r0, #0
 80183f4:	f040 8133 	bne.w	801865e <rcl_wait+0x396>
 80183f8:	6923      	ldr	r3, [r4, #16]
 80183fa:	f89d 101b 	ldrb.w	r1, [sp, #27]
 80183fe:	f853 0009 	ldr.w	r0, [r3, r9]
 8018402:	2900      	cmp	r1, #0
 8018404:	d0b0      	beq.n	8018368 <rcl_wait+0xa0>
 8018406:	ae08      	add	r6, sp, #32
 8018408:	4631      	mov	r1, r6
 801840a:	f88d 2020 	strb.w	r2, [sp, #32]
 801840e:	f7ff fa23 	bl	8017858 <rcl_timer_is_ready>
 8018412:	2800      	cmp	r0, #0
 8018414:	f040 8123 	bne.w	801865e <rcl_wait+0x396>
 8018418:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801841c:	2b00      	cmp	r3, #0
 801841e:	d0c9      	beq.n	80183b4 <rcl_wait+0xec>
 8018420:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8018422:	e02f      	b.n	8018484 <rcl_wait+0x1bc>
 8018424:	68c3      	ldr	r3, [r0, #12]
 8018426:	2b00      	cmp	r3, #0
 8018428:	f47f af61 	bne.w	80182ee <rcl_wait+0x26>
 801842c:	6943      	ldr	r3, [r0, #20]
 801842e:	2b00      	cmp	r3, #0
 8018430:	f47f af5d 	bne.w	80182ee <rcl_wait+0x26>
 8018434:	69c3      	ldr	r3, [r0, #28]
 8018436:	2b00      	cmp	r3, #0
 8018438:	f47f af59 	bne.w	80182ee <rcl_wait+0x26>
 801843c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801843e:	2b00      	cmp	r3, #0
 8018440:	f47f af55 	bne.w	80182ee <rcl_wait+0x26>
 8018444:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8018446:	2b00      	cmp	r3, #0
 8018448:	f47f af51 	bne.w	80182ee <rcl_wait+0x26>
 801844c:	f240 3085 	movw	r0, #901	@ 0x385
 8018450:	b019      	add	sp, #100	@ 0x64
 8018452:	ecbd 8b02 	vpop	{d8}
 8018456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801845a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801845e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018462:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8018466:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 801846a:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 801846e:	ea58 0307 	orrs.w	r3, r8, r7
 8018472:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
 8018476:	e9cd 660e 	strd	r6, r6, [sp, #56]	@ 0x38
 801847a:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 801847e:	f040 80b4 	bne.w	80185ea <rcl_wait+0x322>
 8018482:	ae08      	add	r6, sp, #32
 8018484:	2200      	movs	r2, #0
 8018486:	2300      	movs	r3, #0
 8018488:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801848c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8018490:	9602      	str	r6, [sp, #8]
 8018492:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8018494:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8018498:	e9cd 3200 	strd	r3, r2, [sp]
 801849c:	f105 0110 	add.w	r1, r5, #16
 80184a0:	f105 031c 	add.w	r3, r5, #28
 80184a4:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 80184a8:	1d28      	adds	r0, r5, #4
 80184aa:	f001 ff43 	bl	801a334 <rmw_wait>
 80184ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80184b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80184b2:	4680      	mov	r8, r0
 80184b4:	b332      	cbz	r2, 8018504 <rcl_wait+0x23c>
 80184b6:	2500      	movs	r5, #0
 80184b8:	462f      	mov	r7, r5
 80184ba:	462e      	mov	r6, r5
 80184bc:	e007      	b.n	80184ce <rcl_wait+0x206>
 80184be:	6922      	ldr	r2, [r4, #16]
 80184c0:	f842 3009 	str.w	r3, [r2, r9]
 80184c4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80184c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80184c8:	3501      	adds	r5, #1
 80184ca:	4295      	cmp	r5, r2
 80184cc:	d21b      	bcs.n	8018506 <rcl_wait+0x23e>
 80184ce:	6920      	ldr	r0, [r4, #16]
 80184d0:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80184d4:	a907      	add	r1, sp, #28
 80184d6:	ea4f 0985 	mov.w	r9, r5, lsl #2
 80184da:	2800      	cmp	r0, #0
 80184dc:	d0f4      	beq.n	80184c8 <rcl_wait+0x200>
 80184de:	f88d 601c 	strb.w	r6, [sp, #28]
 80184e2:	f7ff f9b9 	bl	8017858 <rcl_timer_is_ready>
 80184e6:	2800      	cmp	r0, #0
 80184e8:	d1b2      	bne.n	8018450 <rcl_wait+0x188>
 80184ea:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d0e5      	beq.n	80184be <rcl_wait+0x1f6>
 80184f2:	461f      	mov	r7, r3
 80184f4:	e7e6      	b.n	80184c4 <rcl_wait+0x1fc>
 80184f6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80184f8:	6923      	ldr	r3, [r4, #16]
 80184fa:	6c16      	ldr	r6, [r2, #64]	@ 0x40
 80184fc:	2200      	movs	r2, #0
 80184fe:	f843 2009 	str.w	r2, [r3, r9]
 8018502:	e759      	b.n	80183b8 <rcl_wait+0xf0>
 8018504:	4617      	mov	r7, r2
 8018506:	f038 0002 	bics.w	r0, r8, #2
 801850a:	f040 80a8 	bne.w	801865e <rcl_wait+0x396>
 801850e:	6866      	ldr	r6, [r4, #4]
 8018510:	4602      	mov	r2, r0
 8018512:	b91e      	cbnz	r6, 801851c <rcl_wait+0x254>
 8018514:	e00d      	b.n	8018532 <rcl_wait+0x26a>
 8018516:	3201      	adds	r2, #1
 8018518:	4296      	cmp	r6, r2
 801851a:	d00a      	beq.n	8018532 <rcl_wait+0x26a>
 801851c:	6899      	ldr	r1, [r3, #8]
 801851e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018522:	2900      	cmp	r1, #0
 8018524:	d1f7      	bne.n	8018516 <rcl_wait+0x24e>
 8018526:	6825      	ldr	r5, [r4, #0]
 8018528:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801852c:	3201      	adds	r2, #1
 801852e:	4296      	cmp	r6, r2
 8018530:	d1f4      	bne.n	801851c <rcl_wait+0x254>
 8018532:	68e6      	ldr	r6, [r4, #12]
 8018534:	2200      	movs	r2, #0
 8018536:	b91e      	cbnz	r6, 8018540 <rcl_wait+0x278>
 8018538:	e00d      	b.n	8018556 <rcl_wait+0x28e>
 801853a:	3201      	adds	r2, #1
 801853c:	42b2      	cmp	r2, r6
 801853e:	d00a      	beq.n	8018556 <rcl_wait+0x28e>
 8018540:	6959      	ldr	r1, [r3, #20]
 8018542:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018546:	2900      	cmp	r1, #0
 8018548:	d1f7      	bne.n	801853a <rcl_wait+0x272>
 801854a:	68a5      	ldr	r5, [r4, #8]
 801854c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8018550:	3201      	adds	r2, #1
 8018552:	42b2      	cmp	r2, r6
 8018554:	d1f4      	bne.n	8018540 <rcl_wait+0x278>
 8018556:	69e6      	ldr	r6, [r4, #28]
 8018558:	2200      	movs	r2, #0
 801855a:	b91e      	cbnz	r6, 8018564 <rcl_wait+0x29c>
 801855c:	e00d      	b.n	801857a <rcl_wait+0x2b2>
 801855e:	3201      	adds	r2, #1
 8018560:	4296      	cmp	r6, r2
 8018562:	d00a      	beq.n	801857a <rcl_wait+0x2b2>
 8018564:	6a19      	ldr	r1, [r3, #32]
 8018566:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801856a:	2900      	cmp	r1, #0
 801856c:	d1f7      	bne.n	801855e <rcl_wait+0x296>
 801856e:	69a5      	ldr	r5, [r4, #24]
 8018570:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8018574:	3201      	adds	r2, #1
 8018576:	4296      	cmp	r6, r2
 8018578:	d1f4      	bne.n	8018564 <rcl_wait+0x29c>
 801857a:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 801857c:	2200      	movs	r2, #0
 801857e:	b91e      	cbnz	r6, 8018588 <rcl_wait+0x2c0>
 8018580:	e00d      	b.n	801859e <rcl_wait+0x2d6>
 8018582:	3201      	adds	r2, #1
 8018584:	42b2      	cmp	r2, r6
 8018586:	d00a      	beq.n	801859e <rcl_wait+0x2d6>
 8018588:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801858a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801858e:	2900      	cmp	r1, #0
 8018590:	d1f7      	bne.n	8018582 <rcl_wait+0x2ba>
 8018592:	6a25      	ldr	r5, [r4, #32]
 8018594:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8018598:	3201      	adds	r2, #1
 801859a:	42b2      	cmp	r2, r6
 801859c:	d1f4      	bne.n	8018588 <rcl_wait+0x2c0>
 801859e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80185a0:	2200      	movs	r2, #0
 80185a2:	b91e      	cbnz	r6, 80185ac <rcl_wait+0x2e4>
 80185a4:	e00d      	b.n	80185c2 <rcl_wait+0x2fa>
 80185a6:	3201      	adds	r2, #1
 80185a8:	42b2      	cmp	r2, r6
 80185aa:	d00a      	beq.n	80185c2 <rcl_wait+0x2fa>
 80185ac:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80185ae:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80185b2:	2900      	cmp	r1, #0
 80185b4:	d1f7      	bne.n	80185a6 <rcl_wait+0x2de>
 80185b6:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80185b8:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80185bc:	3201      	adds	r2, #1
 80185be:	42b2      	cmp	r2, r6
 80185c0:	d1f4      	bne.n	80185ac <rcl_wait+0x2e4>
 80185c2:	f1b8 0f02 	cmp.w	r8, #2
 80185c6:	f47f af43 	bne.w	8018450 <rcl_wait+0x188>
 80185ca:	f087 0701 	eor.w	r7, r7, #1
 80185ce:	0078      	lsls	r0, r7, #1
 80185d0:	e73e      	b.n	8018450 <rcl_wait+0x188>
 80185d2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80185d6:	b019      	add	sp, #100	@ 0x64
 80185d8:	ecbd 8b02 	vpop	{d8}
 80185dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185e0:	ffffffff 	.word	0xffffffff
 80185e4:	7fffffff 	.word	0x7fffffff
 80185e8:	465f      	mov	r7, fp
 80185ea:	f1b8 0f01 	cmp.w	r8, #1
 80185ee:	f177 0300 	sbcs.w	r3, r7, #0
 80185f2:	db3a      	blt.n	801866a <rcl_wait+0x3a2>
 80185f4:	2601      	movs	r6, #1
 80185f6:	ad10      	add	r5, sp, #64	@ 0x40
 80185f8:	f10d 0958 	add.w	r9, sp, #88	@ 0x58
 80185fc:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 8018600:	a908      	add	r1, sp, #32
 8018602:	b1a0      	cbz	r0, 801862e <rcl_wait+0x366>
 8018604:	f7fe fe5a 	bl	80172bc <rcl_clock_get_now>
 8018608:	2800      	cmp	r0, #0
 801860a:	f47f af21 	bne.w	8018450 <rcl_wait+0x188>
 801860e:	9a08      	ldr	r2, [sp, #32]
 8018610:	68ab      	ldr	r3, [r5, #8]
 8018612:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018614:	1a9b      	subs	r3, r3, r2
 8018616:	68ea      	ldr	r2, [r5, #12]
 8018618:	eb62 0201 	sbc.w	r2, r2, r1
 801861c:	4598      	cmp	r8, r3
 801861e:	eb77 0102 	sbcs.w	r1, r7, r2
 8018622:	bfba      	itte	lt
 8018624:	4643      	movlt	r3, r8
 8018626:	463a      	movlt	r2, r7
 8018628:	2601      	movge	r6, #1
 801862a:	4698      	mov	r8, r3
 801862c:	4617      	mov	r7, r2
 801862e:	3508      	adds	r5, #8
 8018630:	45a9      	cmp	r9, r5
 8018632:	d1e3      	bne.n	80185fc <rcl_wait+0x334>
 8018634:	2f00      	cmp	r7, #0
 8018636:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8018638:	bfab      	itete	ge
 801863a:	4640      	movge	r0, r8
 801863c:	2000      	movlt	r0, #0
 801863e:	4639      	movge	r1, r7
 8018640:	2100      	movlt	r1, #0
 8018642:	2e00      	cmp	r6, #0
 8018644:	f43f af24 	beq.w	8018490 <rcl_wait+0x1c8>
 8018648:	a30d      	add	r3, pc, #52	@ (adr r3, 8018680 <rcl_wait+0x3b8>)
 801864a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801864e:	f7e8 fb0b 	bl	8000c68 <__aeabi_ldivmod>
 8018652:	ae08      	add	r6, sp, #32
 8018654:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018658:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801865c:	e718      	b.n	8018490 <rcl_wait+0x1c8>
 801865e:	2001      	movs	r0, #1
 8018660:	b019      	add	sp, #100	@ 0x64
 8018662:	ecbd 8b02 	vpop	{d8}
 8018666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801866a:	2600      	movs	r6, #0
 801866c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8018670:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8018674:	e7bf      	b.n	80185f6 <rcl_wait+0x32e>
 8018676:	200b      	movs	r0, #11
 8018678:	4770      	bx	lr
 801867a:	bf00      	nop
 801867c:	f3af 8000 	nop.w
 8018680:	3b9aca00 	.word	0x3b9aca00
 8018684:	00000000 	.word	0x00000000

08018688 <rcl_action_take_goal_response>:
 8018688:	b3b0      	cbz	r0, 80186f8 <rcl_action_take_goal_response+0x70>
 801868a:	b570      	push	{r4, r5, r6, lr}
 801868c:	4604      	mov	r4, r0
 801868e:	6800      	ldr	r0, [r0, #0]
 8018690:	b368      	cbz	r0, 80186ee <rcl_action_take_goal_response+0x66>
 8018692:	460d      	mov	r5, r1
 8018694:	4616      	mov	r6, r2
 8018696:	f7fd fdbf 	bl	8016218 <rcl_client_is_valid>
 801869a:	b330      	cbz	r0, 80186ea <rcl_action_take_goal_response+0x62>
 801869c:	6820      	ldr	r0, [r4, #0]
 801869e:	3004      	adds	r0, #4
 80186a0:	f7fd fdba 	bl	8016218 <rcl_client_is_valid>
 80186a4:	b308      	cbz	r0, 80186ea <rcl_action_take_goal_response+0x62>
 80186a6:	6820      	ldr	r0, [r4, #0]
 80186a8:	3008      	adds	r0, #8
 80186aa:	f7fd fdb5 	bl	8016218 <rcl_client_is_valid>
 80186ae:	b1e0      	cbz	r0, 80186ea <rcl_action_take_goal_response+0x62>
 80186b0:	6820      	ldr	r0, [r4, #0]
 80186b2:	300c      	adds	r0, #12
 80186b4:	f7fe fd66 	bl	8017184 <rcl_subscription_is_valid>
 80186b8:	b1b8      	cbz	r0, 80186ea <rcl_action_take_goal_response+0x62>
 80186ba:	6820      	ldr	r0, [r4, #0]
 80186bc:	3010      	adds	r0, #16
 80186be:	f7fe fd61 	bl	8017184 <rcl_subscription_is_valid>
 80186c2:	b190      	cbz	r0, 80186ea <rcl_action_take_goal_response+0x62>
 80186c4:	b1b5      	cbz	r5, 80186f4 <rcl_action_take_goal_response+0x6c>
 80186c6:	b1ae      	cbz	r6, 80186f4 <rcl_action_take_goal_response+0x6c>
 80186c8:	6820      	ldr	r0, [r4, #0]
 80186ca:	4632      	mov	r2, r6
 80186cc:	4629      	mov	r1, r5
 80186ce:	f7fd fd37 	bl	8016140 <rcl_take_response>
 80186d2:	b148      	cbz	r0, 80186e8 <rcl_action_take_goal_response+0x60>
 80186d4:	280a      	cmp	r0, #10
 80186d6:	d007      	beq.n	80186e8 <rcl_action_take_goal_response+0x60>
 80186d8:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80186dc:	f640 0337 	movw	r3, #2103	@ 0x837
 80186e0:	4290      	cmp	r0, r2
 80186e2:	bf0c      	ite	eq
 80186e4:	4618      	moveq	r0, r3
 80186e6:	2001      	movne	r0, #1
 80186e8:	bd70      	pop	{r4, r5, r6, pc}
 80186ea:	f7f6 fdd9 	bl	800f2a0 <rcutils_reset_error>
 80186ee:	f640 0036 	movw	r0, #2102	@ 0x836
 80186f2:	bd70      	pop	{r4, r5, r6, pc}
 80186f4:	200b      	movs	r0, #11
 80186f6:	bd70      	pop	{r4, r5, r6, pc}
 80186f8:	f640 0036 	movw	r0, #2102	@ 0x836
 80186fc:	4770      	bx	lr
 80186fe:	bf00      	nop

08018700 <rcl_action_send_result_request>:
 8018700:	b378      	cbz	r0, 8018762 <rcl_action_send_result_request+0x62>
 8018702:	b570      	push	{r4, r5, r6, lr}
 8018704:	4604      	mov	r4, r0
 8018706:	6800      	ldr	r0, [r0, #0]
 8018708:	b330      	cbz	r0, 8018758 <rcl_action_send_result_request+0x58>
 801870a:	460d      	mov	r5, r1
 801870c:	4616      	mov	r6, r2
 801870e:	f7fd fd83 	bl	8016218 <rcl_client_is_valid>
 8018712:	b1f8      	cbz	r0, 8018754 <rcl_action_send_result_request+0x54>
 8018714:	6820      	ldr	r0, [r4, #0]
 8018716:	3004      	adds	r0, #4
 8018718:	f7fd fd7e 	bl	8016218 <rcl_client_is_valid>
 801871c:	b1d0      	cbz	r0, 8018754 <rcl_action_send_result_request+0x54>
 801871e:	6820      	ldr	r0, [r4, #0]
 8018720:	3008      	adds	r0, #8
 8018722:	f7fd fd79 	bl	8016218 <rcl_client_is_valid>
 8018726:	b1a8      	cbz	r0, 8018754 <rcl_action_send_result_request+0x54>
 8018728:	6820      	ldr	r0, [r4, #0]
 801872a:	300c      	adds	r0, #12
 801872c:	f7fe fd2a 	bl	8017184 <rcl_subscription_is_valid>
 8018730:	b180      	cbz	r0, 8018754 <rcl_action_send_result_request+0x54>
 8018732:	6820      	ldr	r0, [r4, #0]
 8018734:	3010      	adds	r0, #16
 8018736:	f7fe fd25 	bl	8017184 <rcl_subscription_is_valid>
 801873a:	b158      	cbz	r0, 8018754 <rcl_action_send_result_request+0x54>
 801873c:	b17d      	cbz	r5, 801875e <rcl_action_send_result_request+0x5e>
 801873e:	b176      	cbz	r6, 801875e <rcl_action_send_result_request+0x5e>
 8018740:	6820      	ldr	r0, [r4, #0]
 8018742:	4632      	mov	r2, r6
 8018744:	4629      	mov	r1, r5
 8018746:	3008      	adds	r0, #8
 8018748:	f7fd fca6 	bl	8016098 <rcl_send_request>
 801874c:	3800      	subs	r0, #0
 801874e:	bf18      	it	ne
 8018750:	2001      	movne	r0, #1
 8018752:	bd70      	pop	{r4, r5, r6, pc}
 8018754:	f7f6 fda4 	bl	800f2a0 <rcutils_reset_error>
 8018758:	f640 0036 	movw	r0, #2102	@ 0x836
 801875c:	bd70      	pop	{r4, r5, r6, pc}
 801875e:	200b      	movs	r0, #11
 8018760:	bd70      	pop	{r4, r5, r6, pc}
 8018762:	f640 0036 	movw	r0, #2102	@ 0x836
 8018766:	4770      	bx	lr

08018768 <rcl_action_take_result_response>:
 8018768:	2800      	cmp	r0, #0
 801876a:	d037      	beq.n	80187dc <rcl_action_take_result_response+0x74>
 801876c:	b570      	push	{r4, r5, r6, lr}
 801876e:	4604      	mov	r4, r0
 8018770:	6800      	ldr	r0, [r0, #0]
 8018772:	b370      	cbz	r0, 80187d2 <rcl_action_take_result_response+0x6a>
 8018774:	460d      	mov	r5, r1
 8018776:	4616      	mov	r6, r2
 8018778:	f7fd fd4e 	bl	8016218 <rcl_client_is_valid>
 801877c:	b338      	cbz	r0, 80187ce <rcl_action_take_result_response+0x66>
 801877e:	6820      	ldr	r0, [r4, #0]
 8018780:	3004      	adds	r0, #4
 8018782:	f7fd fd49 	bl	8016218 <rcl_client_is_valid>
 8018786:	b310      	cbz	r0, 80187ce <rcl_action_take_result_response+0x66>
 8018788:	6820      	ldr	r0, [r4, #0]
 801878a:	3008      	adds	r0, #8
 801878c:	f7fd fd44 	bl	8016218 <rcl_client_is_valid>
 8018790:	b1e8      	cbz	r0, 80187ce <rcl_action_take_result_response+0x66>
 8018792:	6820      	ldr	r0, [r4, #0]
 8018794:	300c      	adds	r0, #12
 8018796:	f7fe fcf5 	bl	8017184 <rcl_subscription_is_valid>
 801879a:	b1c0      	cbz	r0, 80187ce <rcl_action_take_result_response+0x66>
 801879c:	6820      	ldr	r0, [r4, #0]
 801879e:	3010      	adds	r0, #16
 80187a0:	f7fe fcf0 	bl	8017184 <rcl_subscription_is_valid>
 80187a4:	b198      	cbz	r0, 80187ce <rcl_action_take_result_response+0x66>
 80187a6:	b1bd      	cbz	r5, 80187d8 <rcl_action_take_result_response+0x70>
 80187a8:	b1b6      	cbz	r6, 80187d8 <rcl_action_take_result_response+0x70>
 80187aa:	6820      	ldr	r0, [r4, #0]
 80187ac:	4632      	mov	r2, r6
 80187ae:	4629      	mov	r1, r5
 80187b0:	3008      	adds	r0, #8
 80187b2:	f7fd fcc5 	bl	8016140 <rcl_take_response>
 80187b6:	b148      	cbz	r0, 80187cc <rcl_action_take_result_response+0x64>
 80187b8:	280a      	cmp	r0, #10
 80187ba:	d007      	beq.n	80187cc <rcl_action_take_result_response+0x64>
 80187bc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80187c0:	f640 0337 	movw	r3, #2103	@ 0x837
 80187c4:	4290      	cmp	r0, r2
 80187c6:	bf0c      	ite	eq
 80187c8:	4618      	moveq	r0, r3
 80187ca:	2001      	movne	r0, #1
 80187cc:	bd70      	pop	{r4, r5, r6, pc}
 80187ce:	f7f6 fd67 	bl	800f2a0 <rcutils_reset_error>
 80187d2:	f640 0036 	movw	r0, #2102	@ 0x836
 80187d6:	bd70      	pop	{r4, r5, r6, pc}
 80187d8:	200b      	movs	r0, #11
 80187da:	bd70      	pop	{r4, r5, r6, pc}
 80187dc:	f640 0036 	movw	r0, #2102	@ 0x836
 80187e0:	4770      	bx	lr
 80187e2:	bf00      	nop

080187e4 <rcl_action_take_cancel_response>:
 80187e4:	2800      	cmp	r0, #0
 80187e6:	d037      	beq.n	8018858 <rcl_action_take_cancel_response+0x74>
 80187e8:	b570      	push	{r4, r5, r6, lr}
 80187ea:	4604      	mov	r4, r0
 80187ec:	6800      	ldr	r0, [r0, #0]
 80187ee:	b370      	cbz	r0, 801884e <rcl_action_take_cancel_response+0x6a>
 80187f0:	460d      	mov	r5, r1
 80187f2:	4616      	mov	r6, r2
 80187f4:	f7fd fd10 	bl	8016218 <rcl_client_is_valid>
 80187f8:	b338      	cbz	r0, 801884a <rcl_action_take_cancel_response+0x66>
 80187fa:	6820      	ldr	r0, [r4, #0]
 80187fc:	3004      	adds	r0, #4
 80187fe:	f7fd fd0b 	bl	8016218 <rcl_client_is_valid>
 8018802:	b310      	cbz	r0, 801884a <rcl_action_take_cancel_response+0x66>
 8018804:	6820      	ldr	r0, [r4, #0]
 8018806:	3008      	adds	r0, #8
 8018808:	f7fd fd06 	bl	8016218 <rcl_client_is_valid>
 801880c:	b1e8      	cbz	r0, 801884a <rcl_action_take_cancel_response+0x66>
 801880e:	6820      	ldr	r0, [r4, #0]
 8018810:	300c      	adds	r0, #12
 8018812:	f7fe fcb7 	bl	8017184 <rcl_subscription_is_valid>
 8018816:	b1c0      	cbz	r0, 801884a <rcl_action_take_cancel_response+0x66>
 8018818:	6820      	ldr	r0, [r4, #0]
 801881a:	3010      	adds	r0, #16
 801881c:	f7fe fcb2 	bl	8017184 <rcl_subscription_is_valid>
 8018820:	b198      	cbz	r0, 801884a <rcl_action_take_cancel_response+0x66>
 8018822:	b1bd      	cbz	r5, 8018854 <rcl_action_take_cancel_response+0x70>
 8018824:	b1b6      	cbz	r6, 8018854 <rcl_action_take_cancel_response+0x70>
 8018826:	6820      	ldr	r0, [r4, #0]
 8018828:	4632      	mov	r2, r6
 801882a:	4629      	mov	r1, r5
 801882c:	3004      	adds	r0, #4
 801882e:	f7fd fc87 	bl	8016140 <rcl_take_response>
 8018832:	b148      	cbz	r0, 8018848 <rcl_action_take_cancel_response+0x64>
 8018834:	280a      	cmp	r0, #10
 8018836:	d007      	beq.n	8018848 <rcl_action_take_cancel_response+0x64>
 8018838:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801883c:	f640 0337 	movw	r3, #2103	@ 0x837
 8018840:	4290      	cmp	r0, r2
 8018842:	bf0c      	ite	eq
 8018844:	4618      	moveq	r0, r3
 8018846:	2001      	movne	r0, #1
 8018848:	bd70      	pop	{r4, r5, r6, pc}
 801884a:	f7f6 fd29 	bl	800f2a0 <rcutils_reset_error>
 801884e:	f640 0036 	movw	r0, #2102	@ 0x836
 8018852:	bd70      	pop	{r4, r5, r6, pc}
 8018854:	200b      	movs	r0, #11
 8018856:	bd70      	pop	{r4, r5, r6, pc}
 8018858:	f640 0036 	movw	r0, #2102	@ 0x836
 801885c:	4770      	bx	lr
 801885e:	bf00      	nop

08018860 <rcl_action_take_feedback>:
 8018860:	2800      	cmp	r0, #0
 8018862:	d037      	beq.n	80188d4 <rcl_action_take_feedback+0x74>
 8018864:	b530      	push	{r4, r5, lr}
 8018866:	4604      	mov	r4, r0
 8018868:	6800      	ldr	r0, [r0, #0]
 801886a:	b08f      	sub	sp, #60	@ 0x3c
 801886c:	b358      	cbz	r0, 80188c6 <rcl_action_take_feedback+0x66>
 801886e:	460d      	mov	r5, r1
 8018870:	f7fd fcd2 	bl	8016218 <rcl_client_is_valid>
 8018874:	b328      	cbz	r0, 80188c2 <rcl_action_take_feedback+0x62>
 8018876:	6820      	ldr	r0, [r4, #0]
 8018878:	3004      	adds	r0, #4
 801887a:	f7fd fccd 	bl	8016218 <rcl_client_is_valid>
 801887e:	b300      	cbz	r0, 80188c2 <rcl_action_take_feedback+0x62>
 8018880:	6820      	ldr	r0, [r4, #0]
 8018882:	3008      	adds	r0, #8
 8018884:	f7fd fcc8 	bl	8016218 <rcl_client_is_valid>
 8018888:	b1d8      	cbz	r0, 80188c2 <rcl_action_take_feedback+0x62>
 801888a:	6820      	ldr	r0, [r4, #0]
 801888c:	300c      	adds	r0, #12
 801888e:	f7fe fc79 	bl	8017184 <rcl_subscription_is_valid>
 8018892:	b1b0      	cbz	r0, 80188c2 <rcl_action_take_feedback+0x62>
 8018894:	6820      	ldr	r0, [r4, #0]
 8018896:	3010      	adds	r0, #16
 8018898:	f7fe fc74 	bl	8017184 <rcl_subscription_is_valid>
 801889c:	b188      	cbz	r0, 80188c2 <rcl_action_take_feedback+0x62>
 801889e:	b1b5      	cbz	r5, 80188ce <rcl_action_take_feedback+0x6e>
 80188a0:	6820      	ldr	r0, [r4, #0]
 80188a2:	2300      	movs	r3, #0
 80188a4:	466a      	mov	r2, sp
 80188a6:	4629      	mov	r1, r5
 80188a8:	300c      	adds	r0, #12
 80188aa:	f7fe fc0d 	bl	80170c8 <rcl_take>
 80188ae:	b160      	cbz	r0, 80188ca <rcl_action_take_feedback+0x6a>
 80188b0:	f240 1391 	movw	r3, #401	@ 0x191
 80188b4:	4298      	cmp	r0, r3
 80188b6:	d010      	beq.n	80188da <rcl_action_take_feedback+0x7a>
 80188b8:	280a      	cmp	r0, #10
 80188ba:	bf18      	it	ne
 80188bc:	2001      	movne	r0, #1
 80188be:	b00f      	add	sp, #60	@ 0x3c
 80188c0:	bd30      	pop	{r4, r5, pc}
 80188c2:	f7f6 fced 	bl	800f2a0 <rcutils_reset_error>
 80188c6:	f640 0036 	movw	r0, #2102	@ 0x836
 80188ca:	b00f      	add	sp, #60	@ 0x3c
 80188cc:	bd30      	pop	{r4, r5, pc}
 80188ce:	200b      	movs	r0, #11
 80188d0:	b00f      	add	sp, #60	@ 0x3c
 80188d2:	bd30      	pop	{r4, r5, pc}
 80188d4:	f640 0036 	movw	r0, #2102	@ 0x836
 80188d8:	4770      	bx	lr
 80188da:	f640 0037 	movw	r0, #2103	@ 0x837
 80188de:	e7f4      	b.n	80188ca <rcl_action_take_feedback+0x6a>

080188e0 <rcl_action_wait_set_add_action_client>:
 80188e0:	2800      	cmp	r0, #0
 80188e2:	d045      	beq.n	8018970 <rcl_action_wait_set_add_action_client+0x90>
 80188e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188e6:	460c      	mov	r4, r1
 80188e8:	2900      	cmp	r1, #0
 80188ea:	d03e      	beq.n	801896a <rcl_action_wait_set_add_action_client+0x8a>
 80188ec:	4605      	mov	r5, r0
 80188ee:	6808      	ldr	r0, [r1, #0]
 80188f0:	2800      	cmp	r0, #0
 80188f2:	d03a      	beq.n	801896a <rcl_action_wait_set_add_action_client+0x8a>
 80188f4:	4617      	mov	r7, r2
 80188f6:	461e      	mov	r6, r3
 80188f8:	f7fd fc8e 	bl	8016218 <rcl_client_is_valid>
 80188fc:	b398      	cbz	r0, 8018966 <rcl_action_wait_set_add_action_client+0x86>
 80188fe:	6820      	ldr	r0, [r4, #0]
 8018900:	3004      	adds	r0, #4
 8018902:	f7fd fc89 	bl	8016218 <rcl_client_is_valid>
 8018906:	b370      	cbz	r0, 8018966 <rcl_action_wait_set_add_action_client+0x86>
 8018908:	6820      	ldr	r0, [r4, #0]
 801890a:	3008      	adds	r0, #8
 801890c:	f7fd fc84 	bl	8016218 <rcl_client_is_valid>
 8018910:	b348      	cbz	r0, 8018966 <rcl_action_wait_set_add_action_client+0x86>
 8018912:	6820      	ldr	r0, [r4, #0]
 8018914:	300c      	adds	r0, #12
 8018916:	f7fe fc35 	bl	8017184 <rcl_subscription_is_valid>
 801891a:	b320      	cbz	r0, 8018966 <rcl_action_wait_set_add_action_client+0x86>
 801891c:	6820      	ldr	r0, [r4, #0]
 801891e:	3010      	adds	r0, #16
 8018920:	f7fe fc30 	bl	8017184 <rcl_subscription_is_valid>
 8018924:	b1f8      	cbz	r0, 8018966 <rcl_action_wait_set_add_action_client+0x86>
 8018926:	6821      	ldr	r1, [r4, #0]
 8018928:	4628      	mov	r0, r5
 801892a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801892e:	f7ff fc73 	bl	8018218 <rcl_wait_set_add_client>
 8018932:	b9b8      	cbnz	r0, 8018964 <rcl_action_wait_set_add_action_client+0x84>
 8018934:	6821      	ldr	r1, [r4, #0]
 8018936:	4628      	mov	r0, r5
 8018938:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801893c:	3104      	adds	r1, #4
 801893e:	f7ff fc6b 	bl	8018218 <rcl_wait_set_add_client>
 8018942:	b978      	cbnz	r0, 8018964 <rcl_action_wait_set_add_action_client+0x84>
 8018944:	6821      	ldr	r1, [r4, #0]
 8018946:	4628      	mov	r0, r5
 8018948:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801894c:	3108      	adds	r1, #8
 801894e:	f7ff fc63 	bl	8018218 <rcl_wait_set_add_client>
 8018952:	b938      	cbnz	r0, 8018964 <rcl_action_wait_set_add_action_client+0x84>
 8018954:	6821      	ldr	r1, [r4, #0]
 8018956:	4628      	mov	r0, r5
 8018958:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801895c:	310c      	adds	r1, #12
 801895e:	f7ff f8fb 	bl	8017b58 <rcl_wait_set_add_subscription>
 8018962:	b140      	cbz	r0, 8018976 <rcl_action_wait_set_add_action_client+0x96>
 8018964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018966:	f7f6 fc9b 	bl	800f2a0 <rcutils_reset_error>
 801896a:	f640 0036 	movw	r0, #2102	@ 0x836
 801896e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018970:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018974:	4770      	bx	lr
 8018976:	6821      	ldr	r1, [r4, #0]
 8018978:	4628      	mov	r0, r5
 801897a:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801897e:	3110      	adds	r1, #16
 8018980:	f7ff f8ea 	bl	8017b58 <rcl_wait_set_add_subscription>
 8018984:	2800      	cmp	r0, #0
 8018986:	d1ed      	bne.n	8018964 <rcl_action_wait_set_add_action_client+0x84>
 8018988:	b11f      	cbz	r7, 8018992 <rcl_action_wait_set_add_action_client+0xb2>
 801898a:	6823      	ldr	r3, [r4, #0]
 801898c:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8018990:	603b      	str	r3, [r7, #0]
 8018992:	2e00      	cmp	r6, #0
 8018994:	d0e6      	beq.n	8018964 <rcl_action_wait_set_add_action_client+0x84>
 8018996:	6823      	ldr	r3, [r4, #0]
 8018998:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801899c:	6033      	str	r3, [r6, #0]
 801899e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080189a0 <rcl_action_client_wait_set_get_entities_ready>:
 80189a0:	2800      	cmp	r0, #0
 80189a2:	f000 8089 	beq.w	8018ab8 <rcl_action_client_wait_set_get_entities_ready+0x118>
 80189a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189aa:	460c      	mov	r4, r1
 80189ac:	2900      	cmp	r1, #0
 80189ae:	d079      	beq.n	8018aa4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 80189b0:	4605      	mov	r5, r0
 80189b2:	6808      	ldr	r0, [r1, #0]
 80189b4:	2800      	cmp	r0, #0
 80189b6:	d075      	beq.n	8018aa4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 80189b8:	4616      	mov	r6, r2
 80189ba:	461f      	mov	r7, r3
 80189bc:	f7fd fc2c 	bl	8016218 <rcl_client_is_valid>
 80189c0:	2800      	cmp	r0, #0
 80189c2:	d06d      	beq.n	8018aa0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80189c4:	6820      	ldr	r0, [r4, #0]
 80189c6:	3004      	adds	r0, #4
 80189c8:	f7fd fc26 	bl	8016218 <rcl_client_is_valid>
 80189cc:	2800      	cmp	r0, #0
 80189ce:	d067      	beq.n	8018aa0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80189d0:	6820      	ldr	r0, [r4, #0]
 80189d2:	3008      	adds	r0, #8
 80189d4:	f7fd fc20 	bl	8016218 <rcl_client_is_valid>
 80189d8:	2800      	cmp	r0, #0
 80189da:	d061      	beq.n	8018aa0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80189dc:	6820      	ldr	r0, [r4, #0]
 80189de:	300c      	adds	r0, #12
 80189e0:	f7fe fbd0 	bl	8017184 <rcl_subscription_is_valid>
 80189e4:	2800      	cmp	r0, #0
 80189e6:	d05b      	beq.n	8018aa0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80189e8:	6820      	ldr	r0, [r4, #0]
 80189ea:	3010      	adds	r0, #16
 80189ec:	f7fe fbca 	bl	8017184 <rcl_subscription_is_valid>
 80189f0:	2800      	cmp	r0, #0
 80189f2:	d055      	beq.n	8018aa0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80189f4:	2e00      	cmp	r6, #0
 80189f6:	d05c      	beq.n	8018ab2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 80189f8:	2f00      	cmp	r7, #0
 80189fa:	d05a      	beq.n	8018ab2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 80189fc:	9b06      	ldr	r3, [sp, #24]
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d057      	beq.n	8018ab2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 8018a02:	9b07      	ldr	r3, [sp, #28]
 8018a04:	2b00      	cmp	r3, #0
 8018a06:	d054      	beq.n	8018ab2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 8018a08:	9b08      	ldr	r3, [sp, #32]
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	d051      	beq.n	8018ab2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 8018a0e:	6823      	ldr	r3, [r4, #0]
 8018a10:	686a      	ldr	r2, [r5, #4]
 8018a12:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8018a16:	428a      	cmp	r2, r1
 8018a18:	d948      	bls.n	8018aac <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8018a1a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8018a1e:	4282      	cmp	r2, r0
 8018a20:	d944      	bls.n	8018aac <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8018a22:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8018a26:	69ea      	ldr	r2, [r5, #28]
 8018a28:	42a2      	cmp	r2, r4
 8018a2a:	d93f      	bls.n	8018aac <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8018a2c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8018a30:	4562      	cmp	r2, ip
 8018a32:	d93b      	bls.n	8018aac <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8018a34:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8018a38:	4572      	cmp	r2, lr
 8018a3a:	d937      	bls.n	8018aac <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8018a3c:	69aa      	ldr	r2, [r5, #24]
 8018a3e:	682d      	ldr	r5, [r5, #0]
 8018a40:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8018a44:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8018a48:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8018a4c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8018a50:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8018a54:	f103 0c0c 	add.w	ip, r3, #12
 8018a58:	eba5 050c 	sub.w	r5, r5, ip
 8018a5c:	fab5 f585 	clz	r5, r5
 8018a60:	096d      	lsrs	r5, r5, #5
 8018a62:	7035      	strb	r5, [r6, #0]
 8018a64:	f103 0510 	add.w	r5, r3, #16
 8018a68:	1b64      	subs	r4, r4, r5
 8018a6a:	fab4 f484 	clz	r4, r4
 8018a6e:	0964      	lsrs	r4, r4, #5
 8018a70:	703c      	strb	r4, [r7, #0]
 8018a72:	eba3 0008 	sub.w	r0, r3, r8
 8018a76:	1d1c      	adds	r4, r3, #4
 8018a78:	3308      	adds	r3, #8
 8018a7a:	1ad3      	subs	r3, r2, r3
 8018a7c:	fab0 f080 	clz	r0, r0
 8018a80:	9a06      	ldr	r2, [sp, #24]
 8018a82:	0940      	lsrs	r0, r0, #5
 8018a84:	1b09      	subs	r1, r1, r4
 8018a86:	7010      	strb	r0, [r2, #0]
 8018a88:	fab1 f181 	clz	r1, r1
 8018a8c:	9a07      	ldr	r2, [sp, #28]
 8018a8e:	0949      	lsrs	r1, r1, #5
 8018a90:	7011      	strb	r1, [r2, #0]
 8018a92:	fab3 f383 	clz	r3, r3
 8018a96:	9a08      	ldr	r2, [sp, #32]
 8018a98:	095b      	lsrs	r3, r3, #5
 8018a9a:	2000      	movs	r0, #0
 8018a9c:	7013      	strb	r3, [r2, #0]
 8018a9e:	e003      	b.n	8018aa8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8018aa0:	f7f6 fbfe 	bl	800f2a0 <rcutils_reset_error>
 8018aa4:	f640 0036 	movw	r0, #2102	@ 0x836
 8018aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018aac:	2001      	movs	r0, #1
 8018aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ab2:	200b      	movs	r0, #11
 8018ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ab8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018abc:	4770      	bx	lr
 8018abe:	bf00      	nop

08018ac0 <rcl_action_take_goal_request>:
 8018ac0:	b3b0      	cbz	r0, 8018b30 <rcl_action_take_goal_request+0x70>
 8018ac2:	b570      	push	{r4, r5, r6, lr}
 8018ac4:	4604      	mov	r4, r0
 8018ac6:	6800      	ldr	r0, [r0, #0]
 8018ac8:	b368      	cbz	r0, 8018b26 <rcl_action_take_goal_request+0x66>
 8018aca:	460d      	mov	r5, r1
 8018acc:	4616      	mov	r6, r2
 8018ace:	f7fe fa67 	bl	8016fa0 <rcl_service_is_valid>
 8018ad2:	b330      	cbz	r0, 8018b22 <rcl_action_take_goal_request+0x62>
 8018ad4:	6820      	ldr	r0, [r4, #0]
 8018ad6:	3004      	adds	r0, #4
 8018ad8:	f7fe fa62 	bl	8016fa0 <rcl_service_is_valid>
 8018adc:	b308      	cbz	r0, 8018b22 <rcl_action_take_goal_request+0x62>
 8018ade:	6820      	ldr	r0, [r4, #0]
 8018ae0:	3008      	adds	r0, #8
 8018ae2:	f7fe fa5d 	bl	8016fa0 <rcl_service_is_valid>
 8018ae6:	b1e0      	cbz	r0, 8018b22 <rcl_action_take_goal_request+0x62>
 8018ae8:	6820      	ldr	r0, [r4, #0]
 8018aea:	300c      	adds	r0, #12
 8018aec:	f7f5 fc14 	bl	800e318 <rcl_publisher_is_valid>
 8018af0:	b1b8      	cbz	r0, 8018b22 <rcl_action_take_goal_request+0x62>
 8018af2:	6820      	ldr	r0, [r4, #0]
 8018af4:	3010      	adds	r0, #16
 8018af6:	f7f5 fc0f 	bl	800e318 <rcl_publisher_is_valid>
 8018afa:	b190      	cbz	r0, 8018b22 <rcl_action_take_goal_request+0x62>
 8018afc:	b1b5      	cbz	r5, 8018b2c <rcl_action_take_goal_request+0x6c>
 8018afe:	b1ae      	cbz	r6, 8018b2c <rcl_action_take_goal_request+0x6c>
 8018b00:	6820      	ldr	r0, [r4, #0]
 8018b02:	4632      	mov	r2, r6
 8018b04:	4629      	mov	r1, r5
 8018b06:	f7fe f9cb 	bl	8016ea0 <rcl_take_request>
 8018b0a:	b148      	cbz	r0, 8018b20 <rcl_action_take_goal_request+0x60>
 8018b0c:	280a      	cmp	r0, #10
 8018b0e:	d007      	beq.n	8018b20 <rcl_action_take_goal_request+0x60>
 8018b10:	f240 2259 	movw	r2, #601	@ 0x259
 8018b14:	f640 0399 	movw	r3, #2201	@ 0x899
 8018b18:	4290      	cmp	r0, r2
 8018b1a:	bf0c      	ite	eq
 8018b1c:	4618      	moveq	r0, r3
 8018b1e:	2001      	movne	r0, #1
 8018b20:	bd70      	pop	{r4, r5, r6, pc}
 8018b22:	f7f6 fbbd 	bl	800f2a0 <rcutils_reset_error>
 8018b26:	f640 0098 	movw	r0, #2200	@ 0x898
 8018b2a:	bd70      	pop	{r4, r5, r6, pc}
 8018b2c:	200b      	movs	r0, #11
 8018b2e:	bd70      	pop	{r4, r5, r6, pc}
 8018b30:	f640 0098 	movw	r0, #2200	@ 0x898
 8018b34:	4770      	bx	lr
 8018b36:	bf00      	nop

08018b38 <rcl_action_send_goal_response>:
 8018b38:	b378      	cbz	r0, 8018b9a <rcl_action_send_goal_response+0x62>
 8018b3a:	b570      	push	{r4, r5, r6, lr}
 8018b3c:	4604      	mov	r4, r0
 8018b3e:	6800      	ldr	r0, [r0, #0]
 8018b40:	b330      	cbz	r0, 8018b90 <rcl_action_send_goal_response+0x58>
 8018b42:	460d      	mov	r5, r1
 8018b44:	4616      	mov	r6, r2
 8018b46:	f7fe fa2b 	bl	8016fa0 <rcl_service_is_valid>
 8018b4a:	b1f8      	cbz	r0, 8018b8c <rcl_action_send_goal_response+0x54>
 8018b4c:	6820      	ldr	r0, [r4, #0]
 8018b4e:	3004      	adds	r0, #4
 8018b50:	f7fe fa26 	bl	8016fa0 <rcl_service_is_valid>
 8018b54:	b1d0      	cbz	r0, 8018b8c <rcl_action_send_goal_response+0x54>
 8018b56:	6820      	ldr	r0, [r4, #0]
 8018b58:	3008      	adds	r0, #8
 8018b5a:	f7fe fa21 	bl	8016fa0 <rcl_service_is_valid>
 8018b5e:	b1a8      	cbz	r0, 8018b8c <rcl_action_send_goal_response+0x54>
 8018b60:	6820      	ldr	r0, [r4, #0]
 8018b62:	300c      	adds	r0, #12
 8018b64:	f7f5 fbd8 	bl	800e318 <rcl_publisher_is_valid>
 8018b68:	b180      	cbz	r0, 8018b8c <rcl_action_send_goal_response+0x54>
 8018b6a:	6820      	ldr	r0, [r4, #0]
 8018b6c:	3010      	adds	r0, #16
 8018b6e:	f7f5 fbd3 	bl	800e318 <rcl_publisher_is_valid>
 8018b72:	b158      	cbz	r0, 8018b8c <rcl_action_send_goal_response+0x54>
 8018b74:	b17d      	cbz	r5, 8018b96 <rcl_action_send_goal_response+0x5e>
 8018b76:	b176      	cbz	r6, 8018b96 <rcl_action_send_goal_response+0x5e>
 8018b78:	6820      	ldr	r0, [r4, #0]
 8018b7a:	4632      	mov	r2, r6
 8018b7c:	4629      	mov	r1, r5
 8018b7e:	f7fe f9df 	bl	8016f40 <rcl_send_response>
 8018b82:	b110      	cbz	r0, 8018b8a <rcl_action_send_goal_response+0x52>
 8018b84:	2802      	cmp	r0, #2
 8018b86:	bf18      	it	ne
 8018b88:	2001      	movne	r0, #1
 8018b8a:	bd70      	pop	{r4, r5, r6, pc}
 8018b8c:	f7f6 fb88 	bl	800f2a0 <rcutils_reset_error>
 8018b90:	f640 0098 	movw	r0, #2200	@ 0x898
 8018b94:	bd70      	pop	{r4, r5, r6, pc}
 8018b96:	200b      	movs	r0, #11
 8018b98:	bd70      	pop	{r4, r5, r6, pc}
 8018b9a:	f640 0098 	movw	r0, #2200	@ 0x898
 8018b9e:	4770      	bx	lr

08018ba0 <rcl_action_take_result_request>:
 8018ba0:	2800      	cmp	r0, #0
 8018ba2:	d037      	beq.n	8018c14 <rcl_action_take_result_request+0x74>
 8018ba4:	b570      	push	{r4, r5, r6, lr}
 8018ba6:	4604      	mov	r4, r0
 8018ba8:	6800      	ldr	r0, [r0, #0]
 8018baa:	b370      	cbz	r0, 8018c0a <rcl_action_take_result_request+0x6a>
 8018bac:	460d      	mov	r5, r1
 8018bae:	4616      	mov	r6, r2
 8018bb0:	f7fe f9f6 	bl	8016fa0 <rcl_service_is_valid>
 8018bb4:	b338      	cbz	r0, 8018c06 <rcl_action_take_result_request+0x66>
 8018bb6:	6820      	ldr	r0, [r4, #0]
 8018bb8:	3004      	adds	r0, #4
 8018bba:	f7fe f9f1 	bl	8016fa0 <rcl_service_is_valid>
 8018bbe:	b310      	cbz	r0, 8018c06 <rcl_action_take_result_request+0x66>
 8018bc0:	6820      	ldr	r0, [r4, #0]
 8018bc2:	3008      	adds	r0, #8
 8018bc4:	f7fe f9ec 	bl	8016fa0 <rcl_service_is_valid>
 8018bc8:	b1e8      	cbz	r0, 8018c06 <rcl_action_take_result_request+0x66>
 8018bca:	6820      	ldr	r0, [r4, #0]
 8018bcc:	300c      	adds	r0, #12
 8018bce:	f7f5 fba3 	bl	800e318 <rcl_publisher_is_valid>
 8018bd2:	b1c0      	cbz	r0, 8018c06 <rcl_action_take_result_request+0x66>
 8018bd4:	6820      	ldr	r0, [r4, #0]
 8018bd6:	3010      	adds	r0, #16
 8018bd8:	f7f5 fb9e 	bl	800e318 <rcl_publisher_is_valid>
 8018bdc:	b198      	cbz	r0, 8018c06 <rcl_action_take_result_request+0x66>
 8018bde:	b1bd      	cbz	r5, 8018c10 <rcl_action_take_result_request+0x70>
 8018be0:	b1b6      	cbz	r6, 8018c10 <rcl_action_take_result_request+0x70>
 8018be2:	6820      	ldr	r0, [r4, #0]
 8018be4:	4632      	mov	r2, r6
 8018be6:	4629      	mov	r1, r5
 8018be8:	3008      	adds	r0, #8
 8018bea:	f7fe f959 	bl	8016ea0 <rcl_take_request>
 8018bee:	b148      	cbz	r0, 8018c04 <rcl_action_take_result_request+0x64>
 8018bf0:	280a      	cmp	r0, #10
 8018bf2:	d007      	beq.n	8018c04 <rcl_action_take_result_request+0x64>
 8018bf4:	f240 2259 	movw	r2, #601	@ 0x259
 8018bf8:	f640 0399 	movw	r3, #2201	@ 0x899
 8018bfc:	4290      	cmp	r0, r2
 8018bfe:	bf0c      	ite	eq
 8018c00:	4618      	moveq	r0, r3
 8018c02:	2001      	movne	r0, #1
 8018c04:	bd70      	pop	{r4, r5, r6, pc}
 8018c06:	f7f6 fb4b 	bl	800f2a0 <rcutils_reset_error>
 8018c0a:	f640 0098 	movw	r0, #2200	@ 0x898
 8018c0e:	bd70      	pop	{r4, r5, r6, pc}
 8018c10:	200b      	movs	r0, #11
 8018c12:	bd70      	pop	{r4, r5, r6, pc}
 8018c14:	f640 0098 	movw	r0, #2200	@ 0x898
 8018c18:	4770      	bx	lr
 8018c1a:	bf00      	nop

08018c1c <rcl_action_take_cancel_request>:
 8018c1c:	2800      	cmp	r0, #0
 8018c1e:	d037      	beq.n	8018c90 <rcl_action_take_cancel_request+0x74>
 8018c20:	b570      	push	{r4, r5, r6, lr}
 8018c22:	4604      	mov	r4, r0
 8018c24:	6800      	ldr	r0, [r0, #0]
 8018c26:	b370      	cbz	r0, 8018c86 <rcl_action_take_cancel_request+0x6a>
 8018c28:	460d      	mov	r5, r1
 8018c2a:	4616      	mov	r6, r2
 8018c2c:	f7fe f9b8 	bl	8016fa0 <rcl_service_is_valid>
 8018c30:	b338      	cbz	r0, 8018c82 <rcl_action_take_cancel_request+0x66>
 8018c32:	6820      	ldr	r0, [r4, #0]
 8018c34:	3004      	adds	r0, #4
 8018c36:	f7fe f9b3 	bl	8016fa0 <rcl_service_is_valid>
 8018c3a:	b310      	cbz	r0, 8018c82 <rcl_action_take_cancel_request+0x66>
 8018c3c:	6820      	ldr	r0, [r4, #0]
 8018c3e:	3008      	adds	r0, #8
 8018c40:	f7fe f9ae 	bl	8016fa0 <rcl_service_is_valid>
 8018c44:	b1e8      	cbz	r0, 8018c82 <rcl_action_take_cancel_request+0x66>
 8018c46:	6820      	ldr	r0, [r4, #0]
 8018c48:	300c      	adds	r0, #12
 8018c4a:	f7f5 fb65 	bl	800e318 <rcl_publisher_is_valid>
 8018c4e:	b1c0      	cbz	r0, 8018c82 <rcl_action_take_cancel_request+0x66>
 8018c50:	6820      	ldr	r0, [r4, #0]
 8018c52:	3010      	adds	r0, #16
 8018c54:	f7f5 fb60 	bl	800e318 <rcl_publisher_is_valid>
 8018c58:	b198      	cbz	r0, 8018c82 <rcl_action_take_cancel_request+0x66>
 8018c5a:	b1bd      	cbz	r5, 8018c8c <rcl_action_take_cancel_request+0x70>
 8018c5c:	b1b6      	cbz	r6, 8018c8c <rcl_action_take_cancel_request+0x70>
 8018c5e:	6820      	ldr	r0, [r4, #0]
 8018c60:	4632      	mov	r2, r6
 8018c62:	4629      	mov	r1, r5
 8018c64:	3004      	adds	r0, #4
 8018c66:	f7fe f91b 	bl	8016ea0 <rcl_take_request>
 8018c6a:	b148      	cbz	r0, 8018c80 <rcl_action_take_cancel_request+0x64>
 8018c6c:	280a      	cmp	r0, #10
 8018c6e:	d007      	beq.n	8018c80 <rcl_action_take_cancel_request+0x64>
 8018c70:	f240 2259 	movw	r2, #601	@ 0x259
 8018c74:	f640 0399 	movw	r3, #2201	@ 0x899
 8018c78:	4290      	cmp	r0, r2
 8018c7a:	bf0c      	ite	eq
 8018c7c:	4618      	moveq	r0, r3
 8018c7e:	2001      	movne	r0, #1
 8018c80:	bd70      	pop	{r4, r5, r6, pc}
 8018c82:	f7f6 fb0d 	bl	800f2a0 <rcutils_reset_error>
 8018c86:	f640 0098 	movw	r0, #2200	@ 0x898
 8018c8a:	bd70      	pop	{r4, r5, r6, pc}
 8018c8c:	200b      	movs	r0, #11
 8018c8e:	bd70      	pop	{r4, r5, r6, pc}
 8018c90:	f640 0098 	movw	r0, #2200	@ 0x898
 8018c94:	4770      	bx	lr
 8018c96:	bf00      	nop

08018c98 <rcl_action_send_cancel_response>:
 8018c98:	b380      	cbz	r0, 8018cfc <rcl_action_send_cancel_response+0x64>
 8018c9a:	b570      	push	{r4, r5, r6, lr}
 8018c9c:	4604      	mov	r4, r0
 8018c9e:	6800      	ldr	r0, [r0, #0]
 8018ca0:	b338      	cbz	r0, 8018cf2 <rcl_action_send_cancel_response+0x5a>
 8018ca2:	460d      	mov	r5, r1
 8018ca4:	4616      	mov	r6, r2
 8018ca6:	f7fe f97b 	bl	8016fa0 <rcl_service_is_valid>
 8018caa:	b300      	cbz	r0, 8018cee <rcl_action_send_cancel_response+0x56>
 8018cac:	6820      	ldr	r0, [r4, #0]
 8018cae:	3004      	adds	r0, #4
 8018cb0:	f7fe f976 	bl	8016fa0 <rcl_service_is_valid>
 8018cb4:	b1d8      	cbz	r0, 8018cee <rcl_action_send_cancel_response+0x56>
 8018cb6:	6820      	ldr	r0, [r4, #0]
 8018cb8:	3008      	adds	r0, #8
 8018cba:	f7fe f971 	bl	8016fa0 <rcl_service_is_valid>
 8018cbe:	b1b0      	cbz	r0, 8018cee <rcl_action_send_cancel_response+0x56>
 8018cc0:	6820      	ldr	r0, [r4, #0]
 8018cc2:	300c      	adds	r0, #12
 8018cc4:	f7f5 fb28 	bl	800e318 <rcl_publisher_is_valid>
 8018cc8:	b188      	cbz	r0, 8018cee <rcl_action_send_cancel_response+0x56>
 8018cca:	6820      	ldr	r0, [r4, #0]
 8018ccc:	3010      	adds	r0, #16
 8018cce:	f7f5 fb23 	bl	800e318 <rcl_publisher_is_valid>
 8018cd2:	b160      	cbz	r0, 8018cee <rcl_action_send_cancel_response+0x56>
 8018cd4:	b185      	cbz	r5, 8018cf8 <rcl_action_send_cancel_response+0x60>
 8018cd6:	b17e      	cbz	r6, 8018cf8 <rcl_action_send_cancel_response+0x60>
 8018cd8:	6820      	ldr	r0, [r4, #0]
 8018cda:	4632      	mov	r2, r6
 8018cdc:	4629      	mov	r1, r5
 8018cde:	3004      	adds	r0, #4
 8018ce0:	f7fe f92e 	bl	8016f40 <rcl_send_response>
 8018ce4:	b110      	cbz	r0, 8018cec <rcl_action_send_cancel_response+0x54>
 8018ce6:	2802      	cmp	r0, #2
 8018ce8:	bf18      	it	ne
 8018cea:	2001      	movne	r0, #1
 8018cec:	bd70      	pop	{r4, r5, r6, pc}
 8018cee:	f7f6 fad7 	bl	800f2a0 <rcutils_reset_error>
 8018cf2:	f640 0098 	movw	r0, #2200	@ 0x898
 8018cf6:	bd70      	pop	{r4, r5, r6, pc}
 8018cf8:	200b      	movs	r0, #11
 8018cfa:	bd70      	pop	{r4, r5, r6, pc}
 8018cfc:	f640 0098 	movw	r0, #2200	@ 0x898
 8018d00:	4770      	bx	lr
 8018d02:	bf00      	nop

08018d04 <rcl_action_wait_set_add_action_server>:
 8018d04:	2800      	cmp	r0, #0
 8018d06:	d04d      	beq.n	8018da4 <rcl_action_wait_set_add_action_server+0xa0>
 8018d08:	b570      	push	{r4, r5, r6, lr}
 8018d0a:	460c      	mov	r4, r1
 8018d0c:	b159      	cbz	r1, 8018d26 <rcl_action_wait_set_add_action_server+0x22>
 8018d0e:	4605      	mov	r5, r0
 8018d10:	6808      	ldr	r0, [r1, #0]
 8018d12:	b140      	cbz	r0, 8018d26 <rcl_action_wait_set_add_action_server+0x22>
 8018d14:	4616      	mov	r6, r2
 8018d16:	f7fe f943 	bl	8016fa0 <rcl_service_is_valid>
 8018d1a:	b120      	cbz	r0, 8018d26 <rcl_action_wait_set_add_action_server+0x22>
 8018d1c:	6820      	ldr	r0, [r4, #0]
 8018d1e:	3004      	adds	r0, #4
 8018d20:	f7fe f93e 	bl	8016fa0 <rcl_service_is_valid>
 8018d24:	b910      	cbnz	r0, 8018d2c <rcl_action_wait_set_add_action_server+0x28>
 8018d26:	f640 0098 	movw	r0, #2200	@ 0x898
 8018d2a:	bd70      	pop	{r4, r5, r6, pc}
 8018d2c:	6820      	ldr	r0, [r4, #0]
 8018d2e:	3008      	adds	r0, #8
 8018d30:	f7fe f936 	bl	8016fa0 <rcl_service_is_valid>
 8018d34:	2800      	cmp	r0, #0
 8018d36:	d0f6      	beq.n	8018d26 <rcl_action_wait_set_add_action_server+0x22>
 8018d38:	6820      	ldr	r0, [r4, #0]
 8018d3a:	300c      	adds	r0, #12
 8018d3c:	f7f5 fb04 	bl	800e348 <rcl_publisher_is_valid_except_context>
 8018d40:	2800      	cmp	r0, #0
 8018d42:	d0f0      	beq.n	8018d26 <rcl_action_wait_set_add_action_server+0x22>
 8018d44:	6820      	ldr	r0, [r4, #0]
 8018d46:	3010      	adds	r0, #16
 8018d48:	f7f5 fafe 	bl	800e348 <rcl_publisher_is_valid_except_context>
 8018d4c:	2800      	cmp	r0, #0
 8018d4e:	d0ea      	beq.n	8018d26 <rcl_action_wait_set_add_action_server+0x22>
 8018d50:	6821      	ldr	r1, [r4, #0]
 8018d52:	4628      	mov	r0, r5
 8018d54:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8018d58:	f7ff fa8a 	bl	8018270 <rcl_wait_set_add_service>
 8018d5c:	2800      	cmp	r0, #0
 8018d5e:	d1e4      	bne.n	8018d2a <rcl_action_wait_set_add_action_server+0x26>
 8018d60:	6821      	ldr	r1, [r4, #0]
 8018d62:	4628      	mov	r0, r5
 8018d64:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8018d68:	3104      	adds	r1, #4
 8018d6a:	f7ff fa81 	bl	8018270 <rcl_wait_set_add_service>
 8018d6e:	2800      	cmp	r0, #0
 8018d70:	d1db      	bne.n	8018d2a <rcl_action_wait_set_add_action_server+0x26>
 8018d72:	6821      	ldr	r1, [r4, #0]
 8018d74:	4628      	mov	r0, r5
 8018d76:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8018d7a:	3108      	adds	r1, #8
 8018d7c:	f7ff fa78 	bl	8018270 <rcl_wait_set_add_service>
 8018d80:	2800      	cmp	r0, #0
 8018d82:	d1d2      	bne.n	8018d2a <rcl_action_wait_set_add_action_server+0x26>
 8018d84:	6821      	ldr	r1, [r4, #0]
 8018d86:	4628      	mov	r0, r5
 8018d88:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8018d8c:	3114      	adds	r1, #20
 8018d8e:	f7ff fa13 	bl	80181b8 <rcl_wait_set_add_timer>
 8018d92:	2800      	cmp	r0, #0
 8018d94:	d1c9      	bne.n	8018d2a <rcl_action_wait_set_add_action_server+0x26>
 8018d96:	2e00      	cmp	r6, #0
 8018d98:	d0c7      	beq.n	8018d2a <rcl_action_wait_set_add_action_server+0x26>
 8018d9a:	6823      	ldr	r3, [r4, #0]
 8018d9c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8018da0:	6033      	str	r3, [r6, #0]
 8018da2:	bd70      	pop	{r4, r5, r6, pc}
 8018da4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018da8:	4770      	bx	lr
 8018daa:	bf00      	nop

08018dac <rcl_action_server_wait_set_get_entities_ready>:
 8018dac:	2800      	cmp	r0, #0
 8018dae:	d05a      	beq.n	8018e66 <rcl_action_server_wait_set_get_entities_ready+0xba>
 8018db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018db2:	460c      	mov	r4, r1
 8018db4:	b161      	cbz	r1, 8018dd0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8018db6:	4605      	mov	r5, r0
 8018db8:	6808      	ldr	r0, [r1, #0]
 8018dba:	b148      	cbz	r0, 8018dd0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8018dbc:	4616      	mov	r6, r2
 8018dbe:	461f      	mov	r7, r3
 8018dc0:	f7fe f8ee 	bl	8016fa0 <rcl_service_is_valid>
 8018dc4:	b120      	cbz	r0, 8018dd0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8018dc6:	6820      	ldr	r0, [r4, #0]
 8018dc8:	3004      	adds	r0, #4
 8018dca:	f7fe f8e9 	bl	8016fa0 <rcl_service_is_valid>
 8018dce:	b910      	cbnz	r0, 8018dd6 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8018dd0:	f640 0098 	movw	r0, #2200	@ 0x898
 8018dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018dd6:	6820      	ldr	r0, [r4, #0]
 8018dd8:	3008      	adds	r0, #8
 8018dda:	f7fe f8e1 	bl	8016fa0 <rcl_service_is_valid>
 8018dde:	2800      	cmp	r0, #0
 8018de0:	d0f6      	beq.n	8018dd0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8018de2:	6820      	ldr	r0, [r4, #0]
 8018de4:	300c      	adds	r0, #12
 8018de6:	f7f5 faaf 	bl	800e348 <rcl_publisher_is_valid_except_context>
 8018dea:	2800      	cmp	r0, #0
 8018dec:	d0f0      	beq.n	8018dd0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8018dee:	6820      	ldr	r0, [r4, #0]
 8018df0:	3010      	adds	r0, #16
 8018df2:	f7f5 faa9 	bl	800e348 <rcl_publisher_is_valid_except_context>
 8018df6:	2800      	cmp	r0, #0
 8018df8:	d0ea      	beq.n	8018dd0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8018dfa:	b3be      	cbz	r6, 8018e6c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8018dfc:	b3b7      	cbz	r7, 8018e6c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8018dfe:	9b06      	ldr	r3, [sp, #24]
 8018e00:	b3a3      	cbz	r3, 8018e6c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8018e02:	9b07      	ldr	r3, [sp, #28]
 8018e04:	b393      	cbz	r3, 8018e6c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8018e06:	6821      	ldr	r1, [r4, #0]
 8018e08:	692a      	ldr	r2, [r5, #16]
 8018e0a:	6a2c      	ldr	r4, [r5, #32]
 8018e0c:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8018e10:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8018e14:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8018e18:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8018e1c:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8018e20:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8018e24:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8018e28:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8018e2c:	1a64      	subs	r4, r4, r1
 8018e2e:	fab4 f484 	clz	r4, r4
 8018e32:	0964      	lsrs	r4, r4, #5
 8018e34:	7034      	strb	r4, [r6, #0]
 8018e36:	1d0c      	adds	r4, r1, #4
 8018e38:	1b1b      	subs	r3, r3, r4
 8018e3a:	fab3 f383 	clz	r3, r3
 8018e3e:	095b      	lsrs	r3, r3, #5
 8018e40:	f101 0408 	add.w	r4, r1, #8
 8018e44:	703b      	strb	r3, [r7, #0]
 8018e46:	f101 0314 	add.w	r3, r1, #20
 8018e4a:	1b01      	subs	r1, r0, r4
 8018e4c:	1ad3      	subs	r3, r2, r3
 8018e4e:	fab1 f181 	clz	r1, r1
 8018e52:	9a06      	ldr	r2, [sp, #24]
 8018e54:	0949      	lsrs	r1, r1, #5
 8018e56:	7011      	strb	r1, [r2, #0]
 8018e58:	fab3 f383 	clz	r3, r3
 8018e5c:	9a07      	ldr	r2, [sp, #28]
 8018e5e:	095b      	lsrs	r3, r3, #5
 8018e60:	2000      	movs	r0, #0
 8018e62:	7013      	strb	r3, [r2, #0]
 8018e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018e66:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018e6a:	4770      	bx	lr
 8018e6c:	200b      	movs	r0, #11
 8018e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018e70 <_execute_event_handler>:
 8018e70:	2002      	movs	r0, #2
 8018e72:	4770      	bx	lr

08018e74 <_cancel_goal_event_handler>:
 8018e74:	2003      	movs	r0, #3
 8018e76:	4770      	bx	lr

08018e78 <_succeed_event_handler>:
 8018e78:	2004      	movs	r0, #4
 8018e7a:	4770      	bx	lr

08018e7c <_abort_event_handler>:
 8018e7c:	2006      	movs	r0, #6
 8018e7e:	4770      	bx	lr

08018e80 <_canceled_event_handler>:
 8018e80:	2005      	movs	r0, #5
 8018e82:	4770      	bx	lr

08018e84 <rcl_action_transition_goal_state>:
 8018e84:	fa5f fc80 	uxtb.w	ip, r0
 8018e88:	f1bc 0f06 	cmp.w	ip, #6
 8018e8c:	d80c      	bhi.n	8018ea8 <rcl_action_transition_goal_state+0x24>
 8018e8e:	2904      	cmp	r1, #4
 8018e90:	d80a      	bhi.n	8018ea8 <rcl_action_transition_goal_state+0x24>
 8018e92:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8018e96:	b410      	push	{r4}
 8018e98:	440b      	add	r3, r1
 8018e9a:	4c06      	ldr	r4, [pc, #24]	@ (8018eb4 <rcl_action_transition_goal_state+0x30>)
 8018e9c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8018ea0:	b123      	cbz	r3, 8018eac <rcl_action_transition_goal_state+0x28>
 8018ea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ea6:	4718      	bx	r3
 8018ea8:	2000      	movs	r0, #0
 8018eaa:	4770      	bx	lr
 8018eac:	2000      	movs	r0, #0
 8018eae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018eb2:	4770      	bx	lr
 8018eb4:	080211c0 	.word	0x080211c0

08018eb8 <rcl_action_get_zero_initialized_cancel_response>:
 8018eb8:	b510      	push	{r4, lr}
 8018eba:	4c07      	ldr	r4, [pc, #28]	@ (8018ed8 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8018ebc:	4686      	mov	lr, r0
 8018ebe:	4684      	mov	ip, r0
 8018ec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018ec2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018ec8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018ecc:	6823      	ldr	r3, [r4, #0]
 8018ece:	f8cc 3000 	str.w	r3, [ip]
 8018ed2:	4670      	mov	r0, lr
 8018ed4:	bd10      	pop	{r4, pc}
 8018ed6:	bf00      	nop
 8018ed8:	0802124c 	.word	0x0802124c

08018edc <rclc_action_send_result_request>:
 8018edc:	b1d0      	cbz	r0, 8018f14 <rclc_action_send_result_request+0x38>
 8018ede:	b500      	push	{lr}
 8018ee0:	4684      	mov	ip, r0
 8018ee2:	b087      	sub	sp, #28
 8018ee4:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8018ee8:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8018eec:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8018ef0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8018ef4:	f10d 0e08 	add.w	lr, sp, #8
 8018ef8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018efc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8018f00:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8018f04:	a902      	add	r1, sp, #8
 8018f06:	3010      	adds	r0, #16
 8018f08:	f7ff fbfa 	bl	8018700 <rcl_action_send_result_request>
 8018f0c:	b920      	cbnz	r0, 8018f18 <rclc_action_send_result_request+0x3c>
 8018f0e:	b007      	add	sp, #28
 8018f10:	f85d fb04 	ldr.w	pc, [sp], #4
 8018f14:	200b      	movs	r0, #11
 8018f16:	4770      	bx	lr
 8018f18:	9001      	str	r0, [sp, #4]
 8018f1a:	f7f6 f9c1 	bl	800f2a0 <rcutils_reset_error>
 8018f1e:	9801      	ldr	r0, [sp, #4]
 8018f20:	b007      	add	sp, #28
 8018f22:	f85d fb04 	ldr.w	pc, [sp], #4
 8018f26:	bf00      	nop

08018f28 <rclc_action_take_goal_handle>:
 8018f28:	4603      	mov	r3, r0
 8018f2a:	b158      	cbz	r0, 8018f44 <rclc_action_take_goal_handle+0x1c>
 8018f2c:	6880      	ldr	r0, [r0, #8]
 8018f2e:	b148      	cbz	r0, 8018f44 <rclc_action_take_goal_handle+0x1c>
 8018f30:	6801      	ldr	r1, [r0, #0]
 8018f32:	6099      	str	r1, [r3, #8]
 8018f34:	2200      	movs	r2, #0
 8018f36:	7202      	strb	r2, [r0, #8]
 8018f38:	68d9      	ldr	r1, [r3, #12]
 8018f3a:	6001      	str	r1, [r0, #0]
 8018f3c:	6202      	str	r2, [r0, #32]
 8018f3e:	8482      	strh	r2, [r0, #36]	@ 0x24
 8018f40:	60d8      	str	r0, [r3, #12]
 8018f42:	4770      	bx	lr
 8018f44:	4770      	bx	lr
 8018f46:	bf00      	nop

08018f48 <rclc_action_remove_used_goal_handle>:
 8018f48:	b180      	cbz	r0, 8018f6c <rclc_action_remove_used_goal_handle+0x24>
 8018f4a:	b179      	cbz	r1, 8018f6c <rclc_action_remove_used_goal_handle+0x24>
 8018f4c:	68c3      	ldr	r3, [r0, #12]
 8018f4e:	4299      	cmp	r1, r3
 8018f50:	d00d      	beq.n	8018f6e <rclc_action_remove_used_goal_handle+0x26>
 8018f52:	b12b      	cbz	r3, 8018f60 <rclc_action_remove_used_goal_handle+0x18>
 8018f54:	681a      	ldr	r2, [r3, #0]
 8018f56:	4291      	cmp	r1, r2
 8018f58:	d003      	beq.n	8018f62 <rclc_action_remove_used_goal_handle+0x1a>
 8018f5a:	4613      	mov	r3, r2
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	d1f9      	bne.n	8018f54 <rclc_action_remove_used_goal_handle+0xc>
 8018f60:	4770      	bx	lr
 8018f62:	680a      	ldr	r2, [r1, #0]
 8018f64:	601a      	str	r2, [r3, #0]
 8018f66:	6883      	ldr	r3, [r0, #8]
 8018f68:	600b      	str	r3, [r1, #0]
 8018f6a:	6081      	str	r1, [r0, #8]
 8018f6c:	4770      	bx	lr
 8018f6e:	680b      	ldr	r3, [r1, #0]
 8018f70:	60c3      	str	r3, [r0, #12]
 8018f72:	e7f8      	b.n	8018f66 <rclc_action_remove_used_goal_handle+0x1e>

08018f74 <rclc_action_find_goal_handle_by_uuid>:
 8018f74:	b538      	push	{r3, r4, r5, lr}
 8018f76:	b180      	cbz	r0, 8018f9a <rclc_action_find_goal_handle_by_uuid+0x26>
 8018f78:	460d      	mov	r5, r1
 8018f7a:	b181      	cbz	r1, 8018f9e <rclc_action_find_goal_handle_by_uuid+0x2a>
 8018f7c:	68c4      	ldr	r4, [r0, #12]
 8018f7e:	b914      	cbnz	r4, 8018f86 <rclc_action_find_goal_handle_by_uuid+0x12>
 8018f80:	e009      	b.n	8018f96 <rclc_action_find_goal_handle_by_uuid+0x22>
 8018f82:	6824      	ldr	r4, [r4, #0]
 8018f84:	b13c      	cbz	r4, 8018f96 <rclc_action_find_goal_handle_by_uuid+0x22>
 8018f86:	2210      	movs	r2, #16
 8018f88:	4629      	mov	r1, r5
 8018f8a:	f104 0009 	add.w	r0, r4, #9
 8018f8e:	f004 fc21 	bl	801d7d4 <memcmp>
 8018f92:	2800      	cmp	r0, #0
 8018f94:	d1f5      	bne.n	8018f82 <rclc_action_find_goal_handle_by_uuid+0xe>
 8018f96:	4620      	mov	r0, r4
 8018f98:	bd38      	pop	{r3, r4, r5, pc}
 8018f9a:	4604      	mov	r4, r0
 8018f9c:	e7fb      	b.n	8018f96 <rclc_action_find_goal_handle_by_uuid+0x22>
 8018f9e:	460c      	mov	r4, r1
 8018fa0:	e7f9      	b.n	8018f96 <rclc_action_find_goal_handle_by_uuid+0x22>
 8018fa2:	bf00      	nop

08018fa4 <rclc_action_find_first_handle_by_status>:
 8018fa4:	b140      	cbz	r0, 8018fb8 <rclc_action_find_first_handle_by_status+0x14>
 8018fa6:	68c0      	ldr	r0, [r0, #12]
 8018fa8:	b910      	cbnz	r0, 8018fb0 <rclc_action_find_first_handle_by_status+0xc>
 8018faa:	e005      	b.n	8018fb8 <rclc_action_find_first_handle_by_status+0x14>
 8018fac:	6800      	ldr	r0, [r0, #0]
 8018fae:	b118      	cbz	r0, 8018fb8 <rclc_action_find_first_handle_by_status+0x14>
 8018fb0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8018fb4:	428b      	cmp	r3, r1
 8018fb6:	d1f9      	bne.n	8018fac <rclc_action_find_first_handle_by_status+0x8>
 8018fb8:	4770      	bx	lr
 8018fba:	bf00      	nop

08018fbc <rclc_action_find_first_terminated_handle>:
 8018fbc:	b140      	cbz	r0, 8018fd0 <rclc_action_find_first_terminated_handle+0x14>
 8018fbe:	68c0      	ldr	r0, [r0, #12]
 8018fc0:	b910      	cbnz	r0, 8018fc8 <rclc_action_find_first_terminated_handle+0xc>
 8018fc2:	e005      	b.n	8018fd0 <rclc_action_find_first_terminated_handle+0x14>
 8018fc4:	6800      	ldr	r0, [r0, #0]
 8018fc6:	b118      	cbz	r0, 8018fd0 <rclc_action_find_first_terminated_handle+0x14>
 8018fc8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8018fcc:	2b03      	cmp	r3, #3
 8018fce:	ddf9      	ble.n	8018fc4 <rclc_action_find_first_terminated_handle+0x8>
 8018fd0:	4770      	bx	lr
 8018fd2:	bf00      	nop

08018fd4 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8018fd4:	b170      	cbz	r0, 8018ff4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8018fd6:	68c0      	ldr	r0, [r0, #12]
 8018fd8:	b160      	cbz	r0, 8018ff4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8018fda:	b410      	push	{r4}
 8018fdc:	e001      	b.n	8018fe2 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8018fde:	6800      	ldr	r0, [r0, #0]
 8018fe0:	b128      	cbz	r0, 8018fee <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8018fe2:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8018fe6:	4299      	cmp	r1, r3
 8018fe8:	bf08      	it	eq
 8018fea:	4294      	cmpeq	r4, r2
 8018fec:	d1f7      	bne.n	8018fde <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8018fee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ff2:	4770      	bx	lr
 8018ff4:	4770      	bx	lr
 8018ff6:	bf00      	nop

08018ff8 <rclc_action_find_handle_by_result_request_sequence_number>:
 8018ff8:	b170      	cbz	r0, 8019018 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8018ffa:	68c0      	ldr	r0, [r0, #12]
 8018ffc:	b160      	cbz	r0, 8019018 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8018ffe:	b410      	push	{r4}
 8019000:	e001      	b.n	8019006 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8019002:	6800      	ldr	r0, [r0, #0]
 8019004:	b128      	cbz	r0, 8019012 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8019006:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801900a:	4299      	cmp	r1, r3
 801900c:	bf08      	it	eq
 801900e:	4294      	cmpeq	r4, r2
 8019010:	d1f7      	bne.n	8019002 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8019012:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019016:	4770      	bx	lr
 8019018:	4770      	bx	lr
 801901a:	bf00      	nop

0801901c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801901c:	b170      	cbz	r0, 801903c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801901e:	68c0      	ldr	r0, [r0, #12]
 8019020:	b160      	cbz	r0, 801903c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8019022:	b410      	push	{r4}
 8019024:	e001      	b.n	801902a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8019026:	6800      	ldr	r0, [r0, #0]
 8019028:	b128      	cbz	r0, 8019036 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801902a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801902e:	4299      	cmp	r1, r3
 8019030:	bf08      	it	eq
 8019032:	4294      	cmpeq	r4, r2
 8019034:	d1f7      	bne.n	8019026 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8019036:	f85d 4b04 	ldr.w	r4, [sp], #4
 801903a:	4770      	bx	lr
 801903c:	4770      	bx	lr
 801903e:	bf00      	nop

08019040 <rclc_action_find_first_handle_with_goal_response>:
 8019040:	b140      	cbz	r0, 8019054 <rclc_action_find_first_handle_with_goal_response+0x14>
 8019042:	68c0      	ldr	r0, [r0, #12]
 8019044:	b910      	cbnz	r0, 801904c <rclc_action_find_first_handle_with_goal_response+0xc>
 8019046:	e005      	b.n	8019054 <rclc_action_find_first_handle_with_goal_response+0x14>
 8019048:	6800      	ldr	r0, [r0, #0]
 801904a:	b118      	cbz	r0, 8019054 <rclc_action_find_first_handle_with_goal_response+0x14>
 801904c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8019050:	2b00      	cmp	r3, #0
 8019052:	d0f9      	beq.n	8019048 <rclc_action_find_first_handle_with_goal_response+0x8>
 8019054:	4770      	bx	lr
 8019056:	bf00      	nop

08019058 <rclc_action_find_first_handle_with_result_response>:
 8019058:	b140      	cbz	r0, 801906c <rclc_action_find_first_handle_with_result_response+0x14>
 801905a:	68c0      	ldr	r0, [r0, #12]
 801905c:	b910      	cbnz	r0, 8019064 <rclc_action_find_first_handle_with_result_response+0xc>
 801905e:	e005      	b.n	801906c <rclc_action_find_first_handle_with_result_response+0x14>
 8019060:	6800      	ldr	r0, [r0, #0]
 8019062:	b118      	cbz	r0, 801906c <rclc_action_find_first_handle_with_result_response+0x14>
 8019064:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8019068:	2b00      	cmp	r3, #0
 801906a:	d0f9      	beq.n	8019060 <rclc_action_find_first_handle_with_result_response+0x8>
 801906c:	4770      	bx	lr
 801906e:	bf00      	nop

08019070 <rclc_action_server_response_goal_request>:
 8019070:	b198      	cbz	r0, 801909a <rclc_action_server_response_goal_request+0x2a>
 8019072:	b510      	push	{r4, lr}
 8019074:	6844      	ldr	r4, [r0, #4]
 8019076:	b086      	sub	sp, #24
 8019078:	2200      	movs	r2, #0
 801907a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801907e:	460b      	mov	r3, r1
 8019080:	9205      	str	r2, [sp, #20]
 8019082:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8019086:	aa03      	add	r2, sp, #12
 8019088:	f104 0010 	add.w	r0, r4, #16
 801908c:	f88d 300c 	strb.w	r3, [sp, #12]
 8019090:	f7ff fd52 	bl	8018b38 <rcl_action_send_goal_response>
 8019094:	b918      	cbnz	r0, 801909e <rclc_action_server_response_goal_request+0x2e>
 8019096:	b006      	add	sp, #24
 8019098:	bd10      	pop	{r4, pc}
 801909a:	200b      	movs	r0, #11
 801909c:	4770      	bx	lr
 801909e:	9001      	str	r0, [sp, #4]
 80190a0:	f7f6 f8fe 	bl	800f2a0 <rcutils_reset_error>
 80190a4:	9801      	ldr	r0, [sp, #4]
 80190a6:	b006      	add	sp, #24
 80190a8:	bd10      	pop	{r4, pc}
 80190aa:	bf00      	nop
 80190ac:	0000      	movs	r0, r0
	...

080190b0 <rclc_action_server_goal_cancel_accept>:
 80190b0:	b310      	cbz	r0, 80190f8 <rclc_action_server_goal_cancel_accept+0x48>
 80190b2:	b510      	push	{r4, lr}
 80190b4:	b090      	sub	sp, #64	@ 0x40
 80190b6:	4604      	mov	r4, r0
 80190b8:	a806      	add	r0, sp, #24
 80190ba:	f7ff fefd 	bl	8018eb8 <rcl_action_get_zero_initialized_cancel_response>
 80190be:	2300      	movs	r3, #0
 80190c0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80190c4:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80190c8:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80190cc:	f88d 3018 	strb.w	r3, [sp, #24]
 80190d0:	f8d4 3015 	ldr.w	r3, [r4, #21]
 80190d4:	f8cd d01c 	str.w	sp, [sp, #28]
 80190d8:	46ec      	mov	ip, sp
 80190da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80190de:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8019100 <rclc_action_server_goal_cancel_accept+0x50>
 80190e2:	6860      	ldr	r0, [r4, #4]
 80190e4:	aa06      	add	r2, sp, #24
 80190e6:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 80190ea:	3010      	adds	r0, #16
 80190ec:	ed8d 7b08 	vstr	d7, [sp, #32]
 80190f0:	f7ff fdd2 	bl	8018c98 <rcl_action_send_cancel_response>
 80190f4:	b010      	add	sp, #64	@ 0x40
 80190f6:	bd10      	pop	{r4, pc}
 80190f8:	200b      	movs	r0, #11
 80190fa:	4770      	bx	lr
 80190fc:	f3af 8000 	nop.w
 8019100:	00000001 	.word	0x00000001
 8019104:	00000001 	.word	0x00000001

08019108 <rclc_action_server_goal_cancel_reject>:
 8019108:	b082      	sub	sp, #8
 801910a:	b530      	push	{r4, r5, lr}
 801910c:	b08b      	sub	sp, #44	@ 0x2c
 801910e:	ac0e      	add	r4, sp, #56	@ 0x38
 8019110:	e884 000c 	stmia.w	r4, {r2, r3}
 8019114:	b188      	cbz	r0, 801913a <rclc_action_server_goal_cancel_reject+0x32>
 8019116:	4604      	mov	r4, r0
 8019118:	a801      	add	r0, sp, #4
 801911a:	460d      	mov	r5, r1
 801911c:	f7ff fecc 	bl	8018eb8 <rcl_action_get_zero_initialized_cancel_response>
 8019120:	aa01      	add	r2, sp, #4
 8019122:	a90e      	add	r1, sp, #56	@ 0x38
 8019124:	f104 0010 	add.w	r0, r4, #16
 8019128:	f88d 5004 	strb.w	r5, [sp, #4]
 801912c:	f7ff fdb4 	bl	8018c98 <rcl_action_send_cancel_response>
 8019130:	b00b      	add	sp, #44	@ 0x2c
 8019132:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019136:	b002      	add	sp, #8
 8019138:	4770      	bx	lr
 801913a:	200b      	movs	r0, #11
 801913c:	b00b      	add	sp, #44	@ 0x2c
 801913e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019142:	b002      	add	sp, #8
 8019144:	4770      	bx	lr
 8019146:	bf00      	nop

08019148 <__atomic_load_8>:
 8019148:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801914c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8019150:	4a15      	ldr	r2, [pc, #84]	@ (80191a8 <__atomic_load_8+0x60>)
 8019152:	4b16      	ldr	r3, [pc, #88]	@ (80191ac <__atomic_load_8+0x64>)
 8019154:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8019158:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801915c:	fb02 f101 	mul.w	r1, r2, r1
 8019160:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8019164:	fba3 2301 	umull	r2, r3, r3, r1
 8019168:	091b      	lsrs	r3, r3, #4
 801916a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801916e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8019172:	b4f0      	push	{r4, r5, r6, r7}
 8019174:	4d0e      	ldr	r5, [pc, #56]	@ (80191b0 <__atomic_load_8+0x68>)
 8019176:	1ac9      	subs	r1, r1, r3
 8019178:	194a      	adds	r2, r1, r5
 801917a:	f04f 0c01 	mov.w	ip, #1
 801917e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8019182:	e8c2 cf44 	strexb	r4, ip, [r2]
 8019186:	2c00      	cmp	r4, #0
 8019188:	d1f9      	bne.n	801917e <__atomic_load_8+0x36>
 801918a:	f3bf 8f5b 	dmb	ish
 801918e:	b2dc      	uxtb	r4, r3
 8019190:	2c00      	cmp	r4, #0
 8019192:	d1f4      	bne.n	801917e <__atomic_load_8+0x36>
 8019194:	e9d0 6700 	ldrd	r6, r7, [r0]
 8019198:	f3bf 8f5b 	dmb	ish
 801919c:	546b      	strb	r3, [r5, r1]
 801919e:	4630      	mov	r0, r6
 80191a0:	4639      	mov	r1, r7
 80191a2:	bcf0      	pop	{r4, r5, r6, r7}
 80191a4:	4770      	bx	lr
 80191a6:	bf00      	nop
 80191a8:	27d4eb2d 	.word	0x27d4eb2d
 80191ac:	b21642c9 	.word	0xb21642c9
 80191b0:	2000f1b0 	.word	0x2000f1b0

080191b4 <__atomic_store_8>:
 80191b4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80191b8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80191bc:	b570      	push	{r4, r5, r6, lr}
 80191be:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80191c2:	4c14      	ldr	r4, [pc, #80]	@ (8019214 <__atomic_store_8+0x60>)
 80191c4:	4e14      	ldr	r6, [pc, #80]	@ (8019218 <__atomic_store_8+0x64>)
 80191c6:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80191ca:	fb04 f101 	mul.w	r1, r4, r1
 80191ce:	4c13      	ldr	r4, [pc, #76]	@ (801921c <__atomic_store_8+0x68>)
 80191d0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80191d4:	fba4 5401 	umull	r5, r4, r4, r1
 80191d8:	0924      	lsrs	r4, r4, #4
 80191da:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80191de:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 80191e2:	eba1 0e04 	sub.w	lr, r1, r4
 80191e6:	f04f 0501 	mov.w	r5, #1
 80191ea:	eb0e 0c06 	add.w	ip, lr, r6
 80191ee:	e8dc 1f4f 	ldrexb	r1, [ip]
 80191f2:	e8cc 5f44 	strexb	r4, r5, [ip]
 80191f6:	2c00      	cmp	r4, #0
 80191f8:	d1f9      	bne.n	80191ee <__atomic_store_8+0x3a>
 80191fa:	f3bf 8f5b 	dmb	ish
 80191fe:	b2cc      	uxtb	r4, r1
 8019200:	2c00      	cmp	r4, #0
 8019202:	d1f4      	bne.n	80191ee <__atomic_store_8+0x3a>
 8019204:	e9c0 2300 	strd	r2, r3, [r0]
 8019208:	f3bf 8f5b 	dmb	ish
 801920c:	f806 100e 	strb.w	r1, [r6, lr]
 8019210:	bd70      	pop	{r4, r5, r6, pc}
 8019212:	bf00      	nop
 8019214:	27d4eb2d 	.word	0x27d4eb2d
 8019218:	2000f1b0 	.word	0x2000f1b0
 801921c:	b21642c9 	.word	0xb21642c9

08019220 <__atomic_exchange_8>:
 8019220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019222:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8019226:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 801922a:	4917      	ldr	r1, [pc, #92]	@ (8019288 <__atomic_exchange_8+0x68>)
 801922c:	4f17      	ldr	r7, [pc, #92]	@ (801928c <__atomic_exchange_8+0x6c>)
 801922e:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8019232:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8019236:	fb01 fe0e 	mul.w	lr, r1, lr
 801923a:	4915      	ldr	r1, [pc, #84]	@ (8019290 <__atomic_exchange_8+0x70>)
 801923c:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8019240:	4606      	mov	r6, r0
 8019242:	fba1 010e 	umull	r0, r1, r1, lr
 8019246:	0909      	lsrs	r1, r1, #4
 8019248:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 801924c:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8019250:	ebae 0e01 	sub.w	lr, lr, r1
 8019254:	f04f 0501 	mov.w	r5, #1
 8019258:	eb0e 0107 	add.w	r1, lr, r7
 801925c:	e8d1 cf4f 	ldrexb	ip, [r1]
 8019260:	e8c1 5f40 	strexb	r0, r5, [r1]
 8019264:	2800      	cmp	r0, #0
 8019266:	d1f9      	bne.n	801925c <__atomic_exchange_8+0x3c>
 8019268:	f3bf 8f5b 	dmb	ish
 801926c:	fa5f f48c 	uxtb.w	r4, ip
 8019270:	2c00      	cmp	r4, #0
 8019272:	d1f3      	bne.n	801925c <__atomic_exchange_8+0x3c>
 8019274:	e9d6 0100 	ldrd	r0, r1, [r6]
 8019278:	e9c6 2300 	strd	r2, r3, [r6]
 801927c:	f3bf 8f5b 	dmb	ish
 8019280:	f807 c00e 	strb.w	ip, [r7, lr]
 8019284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019286:	bf00      	nop
 8019288:	27d4eb2d 	.word	0x27d4eb2d
 801928c:	2000f1b0 	.word	0x2000f1b0
 8019290:	b21642c9 	.word	0xb21642c9

08019294 <rcutils_get_env>:
 8019294:	b150      	cbz	r0, 80192ac <rcutils_get_env+0x18>
 8019296:	b510      	push	{r4, lr}
 8019298:	460c      	mov	r4, r1
 801929a:	b909      	cbnz	r1, 80192a0 <rcutils_get_env+0xc>
 801929c:	4806      	ldr	r0, [pc, #24]	@ (80192b8 <rcutils_get_env+0x24>)
 801929e:	bd10      	pop	{r4, pc}
 80192a0:	f003 fe06 	bl	801ceb0 <getenv>
 80192a4:	b120      	cbz	r0, 80192b0 <rcutils_get_env+0x1c>
 80192a6:	6020      	str	r0, [r4, #0]
 80192a8:	2000      	movs	r0, #0
 80192aa:	bd10      	pop	{r4, pc}
 80192ac:	4803      	ldr	r0, [pc, #12]	@ (80192bc <rcutils_get_env+0x28>)
 80192ae:	4770      	bx	lr
 80192b0:	4b03      	ldr	r3, [pc, #12]	@ (80192c0 <rcutils_get_env+0x2c>)
 80192b2:	6023      	str	r3, [r4, #0]
 80192b4:	e7f8      	b.n	80192a8 <rcutils_get_env+0x14>
 80192b6:	bf00      	nop
 80192b8:	0802128c 	.word	0x0802128c
 80192bc:	08021270 	.word	0x08021270
 80192c0:	080203c4 	.word	0x080203c4

080192c4 <rcutils_is_directory>:
 80192c4:	2000      	movs	r0, #0
 80192c6:	4770      	bx	lr

080192c8 <rcutils_join_path>:
 80192c8:	b082      	sub	sp, #8
 80192ca:	e88d 000c 	stmia.w	sp, {r2, r3}
 80192ce:	2000      	movs	r0, #0
 80192d0:	b002      	add	sp, #8
 80192d2:	4770      	bx	lr

080192d4 <rcutils_to_native_path>:
 80192d4:	b084      	sub	sp, #16
 80192d6:	a801      	add	r0, sp, #4
 80192d8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80192dc:	b004      	add	sp, #16
 80192de:	2000      	movs	r0, #0
 80192e0:	4770      	bx	lr
 80192e2:	bf00      	nop

080192e4 <rcutils_format_string_limit>:
 80192e4:	b40f      	push	{r0, r1, r2, r3}
 80192e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80192e8:	b083      	sub	sp, #12
 80192ea:	ac08      	add	r4, sp, #32
 80192ec:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80192ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80192f2:	b376      	cbz	r6, 8019352 <rcutils_format_string_limit+0x6e>
 80192f4:	4620      	mov	r0, r4
 80192f6:	f7f5 ffad 	bl	800f254 <rcutils_allocator_is_valid>
 80192fa:	b350      	cbz	r0, 8019352 <rcutils_format_string_limit+0x6e>
 80192fc:	2100      	movs	r1, #0
 80192fe:	ab0f      	add	r3, sp, #60	@ 0x3c
 8019300:	4632      	mov	r2, r6
 8019302:	4608      	mov	r0, r1
 8019304:	e9cd 3300 	strd	r3, r3, [sp]
 8019308:	f000 f8f8 	bl	80194fc <rcutils_vsnprintf>
 801930c:	1c43      	adds	r3, r0, #1
 801930e:	4605      	mov	r5, r0
 8019310:	d01f      	beq.n	8019352 <rcutils_format_string_limit+0x6e>
 8019312:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019314:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019316:	1c47      	adds	r7, r0, #1
 8019318:	429f      	cmp	r7, r3
 801931a:	bf84      	itt	hi
 801931c:	461f      	movhi	r7, r3
 801931e:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8019322:	4638      	mov	r0, r7
 8019324:	9b08      	ldr	r3, [sp, #32]
 8019326:	4798      	blx	r3
 8019328:	4604      	mov	r4, r0
 801932a:	b190      	cbz	r0, 8019352 <rcutils_format_string_limit+0x6e>
 801932c:	9b01      	ldr	r3, [sp, #4]
 801932e:	4632      	mov	r2, r6
 8019330:	4639      	mov	r1, r7
 8019332:	f000 f8e3 	bl	80194fc <rcutils_vsnprintf>
 8019336:	2800      	cmp	r0, #0
 8019338:	db07      	blt.n	801934a <rcutils_format_string_limit+0x66>
 801933a:	2300      	movs	r3, #0
 801933c:	5563      	strb	r3, [r4, r5]
 801933e:	4620      	mov	r0, r4
 8019340:	b003      	add	sp, #12
 8019342:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019346:	b004      	add	sp, #16
 8019348:	4770      	bx	lr
 801934a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801934c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801934e:	4620      	mov	r0, r4
 8019350:	4798      	blx	r3
 8019352:	2400      	movs	r4, #0
 8019354:	e7f3      	b.n	801933e <rcutils_format_string_limit+0x5a>
 8019356:	bf00      	nop

08019358 <rcutils_repl_str>:
 8019358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801935c:	4699      	mov	r9, r3
 801935e:	b089      	sub	sp, #36	@ 0x24
 8019360:	4603      	mov	r3, r0
 8019362:	4648      	mov	r0, r9
 8019364:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8019368:	4698      	mov	r8, r3
 801936a:	9300      	str	r3, [sp, #0]
 801936c:	460c      	mov	r4, r1
 801936e:	f7f5 ff71 	bl	800f254 <rcutils_allocator_is_valid>
 8019372:	2800      	cmp	r0, #0
 8019374:	f000 80a3 	beq.w	80194be <rcutils_repl_str+0x166>
 8019378:	4620      	mov	r0, r4
 801937a:	f7e6 ffb1 	bl	80002e0 <strlen>
 801937e:	f04f 0a00 	mov.w	sl, #0
 8019382:	f8d9 b010 	ldr.w	fp, [r9, #16]
 8019386:	9001      	str	r0, [sp, #4]
 8019388:	4657      	mov	r7, sl
 801938a:	4655      	mov	r5, sl
 801938c:	2610      	movs	r6, #16
 801938e:	e01e      	b.n	80193ce <rcutils_repl_str+0x76>
 8019390:	3501      	adds	r5, #1
 8019392:	45aa      	cmp	sl, r5
 8019394:	d212      	bcs.n	80193bc <rcutils_repl_str+0x64>
 8019396:	44b2      	add	sl, r6
 8019398:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801939c:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80193a0:	4798      	blx	r3
 80193a2:	2800      	cmp	r0, #0
 80193a4:	f000 8088 	beq.w	80194b8 <rcutils_repl_str+0x160>
 80193a8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80193ac:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
 80193b0:	f8d9 b010 	ldr.w	fp, [r9, #16]
 80193b4:	4607      	mov	r7, r0
 80193b6:	bf28      	it	cs
 80193b8:	f44f 1680 	movcs.w	r6, #1048576	@ 0x100000
 80193bc:	9a00      	ldr	r2, [sp, #0]
 80193be:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 80193c2:	1aa2      	subs	r2, r4, r2
 80193c4:	f843 2c04 	str.w	r2, [r3, #-4]
 80193c8:	9b01      	ldr	r3, [sp, #4]
 80193ca:	eb04 0803 	add.w	r8, r4, r3
 80193ce:	9902      	ldr	r1, [sp, #8]
 80193d0:	4640      	mov	r0, r8
 80193d2:	f004 fa63 	bl	801d89c <strstr>
 80193d6:	4604      	mov	r4, r0
 80193d8:	465a      	mov	r2, fp
 80193da:	4638      	mov	r0, r7
 80193dc:	2c00      	cmp	r4, #0
 80193de:	d1d7      	bne.n	8019390 <rcutils_repl_str+0x38>
 80193e0:	4640      	mov	r0, r8
 80193e2:	f7e6 ff7d 	bl	80002e0 <strlen>
 80193e6:	9b00      	ldr	r3, [sp, #0]
 80193e8:	eba8 0803 	sub.w	r8, r8, r3
 80193ec:	eb08 0300 	add.w	r3, r8, r0
 80193f0:	9304      	str	r3, [sp, #16]
 80193f2:	f8d9 8000 	ldr.w	r8, [r9]
 80193f6:	2d00      	cmp	r5, #0
 80193f8:	d03f      	beq.n	801947a <rcutils_repl_str+0x122>
 80193fa:	9803      	ldr	r0, [sp, #12]
 80193fc:	f7e6 ff70 	bl	80002e0 <strlen>
 8019400:	4606      	mov	r6, r0
 8019402:	9801      	ldr	r0, [sp, #4]
 8019404:	9a04      	ldr	r2, [sp, #16]
 8019406:	1a33      	subs	r3, r6, r0
 8019408:	fb05 2a03 	mla	sl, r5, r3, r2
 801940c:	4659      	mov	r1, fp
 801940e:	f10a 0001 	add.w	r0, sl, #1
 8019412:	47c0      	blx	r8
 8019414:	4683      	mov	fp, r0
 8019416:	2800      	cmp	r0, #0
 8019418:	d04e      	beq.n	80194b8 <rcutils_repl_str+0x160>
 801941a:	683a      	ldr	r2, [r7, #0]
 801941c:	9900      	ldr	r1, [sp, #0]
 801941e:	f004 fade 	bl	801d9de <memcpy>
 8019422:	683b      	ldr	r3, [r7, #0]
 8019424:	9706      	str	r7, [sp, #24]
 8019426:	1e6a      	subs	r2, r5, #1
 8019428:	445b      	add	r3, fp
 801942a:	46a8      	mov	r8, r5
 801942c:	9202      	str	r2, [sp, #8]
 801942e:	4625      	mov	r5, r4
 8019430:	f8cd 901c 	str.w	r9, [sp, #28]
 8019434:	461c      	mov	r4, r3
 8019436:	9903      	ldr	r1, [sp, #12]
 8019438:	4632      	mov	r2, r6
 801943a:	4620      	mov	r0, r4
 801943c:	f004 facf 	bl	801d9de <memcpy>
 8019440:	9b01      	ldr	r3, [sp, #4]
 8019442:	f857 2b04 	ldr.w	r2, [r7], #4
 8019446:	eb02 0c03 	add.w	ip, r2, r3
 801944a:	9b00      	ldr	r3, [sp, #0]
 801944c:	eb03 010c 	add.w	r1, r3, ip
 8019450:	9b02      	ldr	r3, [sp, #8]
 8019452:	4434      	add	r4, r6
 8019454:	429d      	cmp	r5, r3
 8019456:	4620      	mov	r0, r4
 8019458:	d022      	beq.n	80194a0 <rcutils_repl_str+0x148>
 801945a:	683a      	ldr	r2, [r7, #0]
 801945c:	eba2 090c 	sub.w	r9, r2, ip
 8019460:	464a      	mov	r2, r9
 8019462:	3501      	adds	r5, #1
 8019464:	f004 fabb 	bl	801d9de <memcpy>
 8019468:	45a8      	cmp	r8, r5
 801946a:	444c      	add	r4, r9
 801946c:	d1e3      	bne.n	8019436 <rcutils_repl_str+0xde>
 801946e:	2300      	movs	r3, #0
 8019470:	e9dd 7906 	ldrd	r7, r9, [sp, #24]
 8019474:	f80b 300a 	strb.w	r3, [fp, sl]
 8019478:	e008      	b.n	801948c <rcutils_repl_str+0x134>
 801947a:	4618      	mov	r0, r3
 801947c:	4659      	mov	r1, fp
 801947e:	3001      	adds	r0, #1
 8019480:	47c0      	blx	r8
 8019482:	4683      	mov	fp, r0
 8019484:	b110      	cbz	r0, 801948c <rcutils_repl_str+0x134>
 8019486:	9900      	ldr	r1, [sp, #0]
 8019488:	f004 faa1 	bl	801d9ce <strcpy>
 801948c:	4638      	mov	r0, r7
 801948e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8019492:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8019496:	4798      	blx	r3
 8019498:	4658      	mov	r0, fp
 801949a:	b009      	add	sp, #36	@ 0x24
 801949c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194a0:	9b04      	ldr	r3, [sp, #16]
 80194a2:	eba3 020c 	sub.w	r2, r3, ip
 80194a6:	9205      	str	r2, [sp, #20]
 80194a8:	3501      	adds	r5, #1
 80194aa:	f004 fa98 	bl	801d9de <memcpy>
 80194ae:	9a05      	ldr	r2, [sp, #20]
 80194b0:	45a8      	cmp	r8, r5
 80194b2:	4414      	add	r4, r2
 80194b4:	d1bf      	bne.n	8019436 <rcutils_repl_str+0xde>
 80194b6:	e7da      	b.n	801946e <rcutils_repl_str+0x116>
 80194b8:	f04f 0b00 	mov.w	fp, #0
 80194bc:	e7e6      	b.n	801948c <rcutils_repl_str+0x134>
 80194be:	4683      	mov	fp, r0
 80194c0:	4658      	mov	r0, fp
 80194c2:	b009      	add	sp, #36	@ 0x24
 80194c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080194c8 <rcutils_snprintf>:
 80194c8:	b40c      	push	{r2, r3}
 80194ca:	b530      	push	{r4, r5, lr}
 80194cc:	b083      	sub	sp, #12
 80194ce:	ab06      	add	r3, sp, #24
 80194d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80194d4:	9301      	str	r3, [sp, #4]
 80194d6:	b152      	cbz	r2, 80194ee <rcutils_snprintf+0x26>
 80194d8:	b138      	cbz	r0, 80194ea <rcutils_snprintf+0x22>
 80194da:	b141      	cbz	r1, 80194ee <rcutils_snprintf+0x26>
 80194dc:	f004 f8d8 	bl	801d690 <vsniprintf>
 80194e0:	b003      	add	sp, #12
 80194e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80194e6:	b002      	add	sp, #8
 80194e8:	4770      	bx	lr
 80194ea:	2900      	cmp	r1, #0
 80194ec:	d0f6      	beq.n	80194dc <rcutils_snprintf+0x14>
 80194ee:	f004 fa41 	bl	801d974 <__errno>
 80194f2:	2316      	movs	r3, #22
 80194f4:	6003      	str	r3, [r0, #0]
 80194f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80194fa:	e7f1      	b.n	80194e0 <rcutils_snprintf+0x18>

080194fc <rcutils_vsnprintf>:
 80194fc:	b570      	push	{r4, r5, r6, lr}
 80194fe:	b13a      	cbz	r2, 8019510 <rcutils_vsnprintf+0x14>
 8019500:	b120      	cbz	r0, 801950c <rcutils_vsnprintf+0x10>
 8019502:	b129      	cbz	r1, 8019510 <rcutils_vsnprintf+0x14>
 8019504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019508:	f004 b8c2 	b.w	801d690 <vsniprintf>
 801950c:	2900      	cmp	r1, #0
 801950e:	d0f9      	beq.n	8019504 <rcutils_vsnprintf+0x8>
 8019510:	f004 fa30 	bl	801d974 <__errno>
 8019514:	2316      	movs	r3, #22
 8019516:	6003      	str	r3, [r0, #0]
 8019518:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801951c:	bd70      	pop	{r4, r5, r6, pc}
 801951e:	bf00      	nop

08019520 <rcutils_strdup>:
 8019520:	b084      	sub	sp, #16
 8019522:	b570      	push	{r4, r5, r6, lr}
 8019524:	b086      	sub	sp, #24
 8019526:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 801952a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801952e:	4604      	mov	r4, r0
 8019530:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019534:	f10d 0e04 	add.w	lr, sp, #4
 8019538:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801953c:	f8dc 3000 	ldr.w	r3, [ip]
 8019540:	f8ce 3000 	str.w	r3, [lr]
 8019544:	b304      	cbz	r4, 8019588 <rcutils_strdup+0x68>
 8019546:	a801      	add	r0, sp, #4
 8019548:	f7f5 fe84 	bl	800f254 <rcutils_allocator_is_valid>
 801954c:	b1e0      	cbz	r0, 8019588 <rcutils_strdup+0x68>
 801954e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019552:	2100      	movs	r1, #0
 8019554:	4620      	mov	r0, r4
 8019556:	f7e6 fe73 	bl	8000240 <memchr>
 801955a:	b190      	cbz	r0, 8019582 <rcutils_strdup+0x62>
 801955c:	1b06      	subs	r6, r0, r4
 801955e:	1c70      	adds	r0, r6, #1
 8019560:	9b01      	ldr	r3, [sp, #4]
 8019562:	9905      	ldr	r1, [sp, #20]
 8019564:	4798      	blx	r3
 8019566:	4605      	mov	r5, r0
 8019568:	b128      	cbz	r0, 8019576 <rcutils_strdup+0x56>
 801956a:	4632      	mov	r2, r6
 801956c:	4621      	mov	r1, r4
 801956e:	f004 fa36 	bl	801d9de <memcpy>
 8019572:	2300      	movs	r3, #0
 8019574:	55ab      	strb	r3, [r5, r6]
 8019576:	4628      	mov	r0, r5
 8019578:	b006      	add	sp, #24
 801957a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801957e:	b004      	add	sp, #16
 8019580:	4770      	bx	lr
 8019582:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8019586:	e7eb      	b.n	8019560 <rcutils_strdup+0x40>
 8019588:	2500      	movs	r5, #0
 801958a:	e7f4      	b.n	8019576 <rcutils_strdup+0x56>

0801958c <rcutils_strndup>:
 801958c:	b082      	sub	sp, #8
 801958e:	b570      	push	{r4, r5, r6, lr}
 8019590:	ac04      	add	r4, sp, #16
 8019592:	e884 000c 	stmia.w	r4, {r2, r3}
 8019596:	b1e8      	cbz	r0, 80195d4 <rcutils_strndup+0x48>
 8019598:	4605      	mov	r5, r0
 801959a:	a804      	add	r0, sp, #16
 801959c:	460c      	mov	r4, r1
 801959e:	f7f5 fe59 	bl	800f254 <rcutils_allocator_is_valid>
 80195a2:	b1b8      	cbz	r0, 80195d4 <rcutils_strndup+0x48>
 80195a4:	4622      	mov	r2, r4
 80195a6:	2100      	movs	r1, #0
 80195a8:	4628      	mov	r0, r5
 80195aa:	f7e6 fe49 	bl	8000240 <memchr>
 80195ae:	b100      	cbz	r0, 80195b2 <rcutils_strndup+0x26>
 80195b0:	1b44      	subs	r4, r0, r5
 80195b2:	9b04      	ldr	r3, [sp, #16]
 80195b4:	9908      	ldr	r1, [sp, #32]
 80195b6:	1c60      	adds	r0, r4, #1
 80195b8:	4798      	blx	r3
 80195ba:	4606      	mov	r6, r0
 80195bc:	b128      	cbz	r0, 80195ca <rcutils_strndup+0x3e>
 80195be:	4622      	mov	r2, r4
 80195c0:	4629      	mov	r1, r5
 80195c2:	f004 fa0c 	bl	801d9de <memcpy>
 80195c6:	2300      	movs	r3, #0
 80195c8:	5533      	strb	r3, [r6, r4]
 80195ca:	4630      	mov	r0, r6
 80195cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80195d0:	b002      	add	sp, #8
 80195d2:	4770      	bx	lr
 80195d4:	2600      	movs	r6, #0
 80195d6:	4630      	mov	r0, r6
 80195d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80195dc:	b002      	add	sp, #8
 80195de:	4770      	bx	lr

080195e0 <rcutils_get_zero_initialized_string_map>:
 80195e0:	4b01      	ldr	r3, [pc, #4]	@ (80195e8 <rcutils_get_zero_initialized_string_map+0x8>)
 80195e2:	2000      	movs	r0, #0
 80195e4:	6018      	str	r0, [r3, #0]
 80195e6:	4770      	bx	lr
 80195e8:	2000f1c8 	.word	0x2000f1c8

080195ec <rcutils_string_map_reserve>:
 80195ec:	2800      	cmp	r0, #0
 80195ee:	d04e      	beq.n	801968e <rcutils_string_map_reserve+0xa2>
 80195f0:	b530      	push	{r4, r5, lr}
 80195f2:	6803      	ldr	r3, [r0, #0]
 80195f4:	b087      	sub	sp, #28
 80195f6:	4604      	mov	r4, r0
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d043      	beq.n	8019684 <rcutils_string_map_reserve+0x98>
 80195fc:	f103 0c0c 	add.w	ip, r3, #12
 8019600:	460d      	mov	r5, r1
 8019602:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019606:	f10d 0e04 	add.w	lr, sp, #4
 801960a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801960e:	f8dc 3000 	ldr.w	r3, [ip]
 8019612:	f8ce 3000 	str.w	r3, [lr]
 8019616:	a801      	add	r0, sp, #4
 8019618:	f7f5 fe1c 	bl	800f254 <rcutils_allocator_is_valid>
 801961c:	b308      	cbz	r0, 8019662 <rcutils_string_map_reserve+0x76>
 801961e:	6823      	ldr	r3, [r4, #0]
 8019620:	6899      	ldr	r1, [r3, #8]
 8019622:	42a9      	cmp	r1, r5
 8019624:	d829      	bhi.n	801967a <rcutils_string_map_reserve+0x8e>
 8019626:	685a      	ldr	r2, [r3, #4]
 8019628:	42aa      	cmp	r2, r5
 801962a:	d024      	beq.n	8019676 <rcutils_string_map_reserve+0x8a>
 801962c:	b1e5      	cbz	r5, 8019668 <rcutils_string_map_reserve+0x7c>
 801962e:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
 8019632:	d22a      	bcs.n	801968a <rcutils_string_map_reserve+0x9e>
 8019634:	6818      	ldr	r0, [r3, #0]
 8019636:	9a05      	ldr	r2, [sp, #20]
 8019638:	9b03      	ldr	r3, [sp, #12]
 801963a:	00e9      	lsls	r1, r5, #3
 801963c:	4798      	blx	r3
 801963e:	b320      	cbz	r0, 801968a <rcutils_string_map_reserve+0x9e>
 8019640:	6824      	ldr	r4, [r4, #0]
 8019642:	6861      	ldr	r1, [r4, #4]
 8019644:	6020      	str	r0, [r4, #0]
 8019646:	42a9      	cmp	r1, r5
 8019648:	d214      	bcs.n	8019674 <rcutils_string_map_reserve+0x88>
 801964a:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 801964e:	1a69      	subs	r1, r5, r1
 8019650:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8019654:	2200      	movs	r2, #0
 8019656:	e9c3 2200 	strd	r2, r2, [r3]
 801965a:	3308      	adds	r3, #8
 801965c:	428b      	cmp	r3, r1
 801965e:	d1fa      	bne.n	8019656 <rcutils_string_map_reserve+0x6a>
 8019660:	e008      	b.n	8019674 <rcutils_string_map_reserve+0x88>
 8019662:	200b      	movs	r0, #11
 8019664:	b007      	add	sp, #28
 8019666:	bd30      	pop	{r4, r5, pc}
 8019668:	9a02      	ldr	r2, [sp, #8]
 801966a:	9905      	ldr	r1, [sp, #20]
 801966c:	6818      	ldr	r0, [r3, #0]
 801966e:	4790      	blx	r2
 8019670:	6824      	ldr	r4, [r4, #0]
 8019672:	6025      	str	r5, [r4, #0]
 8019674:	6065      	str	r5, [r4, #4]
 8019676:	2000      	movs	r0, #0
 8019678:	e7f4      	b.n	8019664 <rcutils_string_map_reserve+0x78>
 801967a:	4620      	mov	r0, r4
 801967c:	f7ff ffb6 	bl	80195ec <rcutils_string_map_reserve>
 8019680:	b007      	add	sp, #28
 8019682:	bd30      	pop	{r4, r5, pc}
 8019684:	201f      	movs	r0, #31
 8019686:	b007      	add	sp, #28
 8019688:	bd30      	pop	{r4, r5, pc}
 801968a:	200a      	movs	r0, #10
 801968c:	e7ea      	b.n	8019664 <rcutils_string_map_reserve+0x78>
 801968e:	200b      	movs	r0, #11
 8019690:	4770      	bx	lr
 8019692:	bf00      	nop

08019694 <rcutils_string_map_init>:
 8019694:	b082      	sub	sp, #8
 8019696:	b570      	push	{r4, r5, r6, lr}
 8019698:	ac04      	add	r4, sp, #16
 801969a:	e884 000c 	stmia.w	r4, {r2, r3}
 801969e:	b378      	cbz	r0, 8019700 <rcutils_string_map_init+0x6c>
 80196a0:	6806      	ldr	r6, [r0, #0]
 80196a2:	4604      	mov	r4, r0
 80196a4:	b12e      	cbz	r6, 80196b2 <rcutils_string_map_init+0x1e>
 80196a6:	251e      	movs	r5, #30
 80196a8:	4628      	mov	r0, r5
 80196aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80196ae:	b002      	add	sp, #8
 80196b0:	4770      	bx	lr
 80196b2:	a804      	add	r0, sp, #16
 80196b4:	460d      	mov	r5, r1
 80196b6:	f7f5 fdcd 	bl	800f254 <rcutils_allocator_is_valid>
 80196ba:	b308      	cbz	r0, 8019700 <rcutils_string_map_init+0x6c>
 80196bc:	9b04      	ldr	r3, [sp, #16]
 80196be:	9908      	ldr	r1, [sp, #32]
 80196c0:	2020      	movs	r0, #32
 80196c2:	4798      	blx	r3
 80196c4:	6020      	str	r0, [r4, #0]
 80196c6:	b308      	cbz	r0, 801970c <rcutils_string_map_init+0x78>
 80196c8:	f10d 0e10 	add.w	lr, sp, #16
 80196cc:	e9c0 6600 	strd	r6, r6, [r0]
 80196d0:	6086      	str	r6, [r0, #8]
 80196d2:	f100 0c0c 	add.w	ip, r0, #12
 80196d6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80196da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80196de:	f8de 3000 	ldr.w	r3, [lr]
 80196e2:	f8cc 3000 	str.w	r3, [ip]
 80196e6:	4629      	mov	r1, r5
 80196e8:	4620      	mov	r0, r4
 80196ea:	f7ff ff7f 	bl	80195ec <rcutils_string_map_reserve>
 80196ee:	4605      	mov	r5, r0
 80196f0:	2800      	cmp	r0, #0
 80196f2:	d0d9      	beq.n	80196a8 <rcutils_string_map_init+0x14>
 80196f4:	9b05      	ldr	r3, [sp, #20]
 80196f6:	9908      	ldr	r1, [sp, #32]
 80196f8:	6820      	ldr	r0, [r4, #0]
 80196fa:	4798      	blx	r3
 80196fc:	6026      	str	r6, [r4, #0]
 80196fe:	e7d3      	b.n	80196a8 <rcutils_string_map_init+0x14>
 8019700:	250b      	movs	r5, #11
 8019702:	4628      	mov	r0, r5
 8019704:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019708:	b002      	add	sp, #8
 801970a:	4770      	bx	lr
 801970c:	250a      	movs	r5, #10
 801970e:	e7cb      	b.n	80196a8 <rcutils_string_map_init+0x14>

08019710 <rcutils_string_map_fini>:
 8019710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019714:	b086      	sub	sp, #24
 8019716:	2800      	cmp	r0, #0
 8019718:	d04f      	beq.n	80197ba <rcutils_string_map_fini+0xaa>
 801971a:	6805      	ldr	r5, [r0, #0]
 801971c:	4606      	mov	r6, r0
 801971e:	2d00      	cmp	r5, #0
 8019720:	d046      	beq.n	80197b0 <rcutils_string_map_fini+0xa0>
 8019722:	686b      	ldr	r3, [r5, #4]
 8019724:	b353      	cbz	r3, 801977c <rcutils_string_map_fini+0x6c>
 8019726:	2400      	movs	r4, #0
 8019728:	682a      	ldr	r2, [r5, #0]
 801972a:	4627      	mov	r7, r4
 801972c:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 8019730:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8019734:	b1f8      	cbz	r0, 8019776 <rcutils_string_map_fini+0x66>
 8019736:	f8d5 a01c 	ldr.w	sl, [r5, #28]
 801973a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801973e:	4651      	mov	r1, sl
 8019740:	47c8      	blx	r9
 8019742:	682b      	ldr	r3, [r5, #0]
 8019744:	eb03 0208 	add.w	r2, r3, r8
 8019748:	f843 7034 	str.w	r7, [r3, r4, lsl #3]
 801974c:	6850      	ldr	r0, [r2, #4]
 801974e:	4651      	mov	r1, sl
 8019750:	47c8      	blx	r9
 8019752:	682a      	ldr	r2, [r5, #0]
 8019754:	68ab      	ldr	r3, [r5, #8]
 8019756:	4442      	add	r2, r8
 8019758:	3b01      	subs	r3, #1
 801975a:	6057      	str	r7, [r2, #4]
 801975c:	60ab      	str	r3, [r5, #8]
 801975e:	6835      	ldr	r5, [r6, #0]
 8019760:	686b      	ldr	r3, [r5, #4]
 8019762:	3401      	adds	r4, #1
 8019764:	429c      	cmp	r4, r3
 8019766:	d209      	bcs.n	801977c <rcutils_string_map_fini+0x6c>
 8019768:	682a      	ldr	r2, [r5, #0]
 801976a:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 801976e:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8019772:	2800      	cmp	r0, #0
 8019774:	d1df      	bne.n	8019736 <rcutils_string_map_fini+0x26>
 8019776:	3401      	adds	r4, #1
 8019778:	42a3      	cmp	r3, r4
 801977a:	d8d7      	bhi.n	801972c <rcutils_string_map_fini+0x1c>
 801977c:	2100      	movs	r1, #0
 801977e:	4630      	mov	r0, r6
 8019780:	f7ff ff34 	bl	80195ec <rcutils_string_map_reserve>
 8019784:	4604      	mov	r4, r0
 8019786:	b118      	cbz	r0, 8019790 <rcutils_string_map_fini+0x80>
 8019788:	4620      	mov	r0, r4
 801978a:	b006      	add	sp, #24
 801978c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019790:	6835      	ldr	r5, [r6, #0]
 8019792:	350c      	adds	r5, #12
 8019794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019796:	af01      	add	r7, sp, #4
 8019798:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801979a:	682b      	ldr	r3, [r5, #0]
 801979c:	603b      	str	r3, [r7, #0]
 801979e:	a801      	add	r0, sp, #4
 80197a0:	f7f5 fd58 	bl	800f254 <rcutils_allocator_is_valid>
 80197a4:	b148      	cbz	r0, 80197ba <rcutils_string_map_fini+0xaa>
 80197a6:	9b02      	ldr	r3, [sp, #8]
 80197a8:	9905      	ldr	r1, [sp, #20]
 80197aa:	6830      	ldr	r0, [r6, #0]
 80197ac:	4798      	blx	r3
 80197ae:	6034      	str	r4, [r6, #0]
 80197b0:	2400      	movs	r4, #0
 80197b2:	4620      	mov	r0, r4
 80197b4:	b006      	add	sp, #24
 80197b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197ba:	240b      	movs	r4, #11
 80197bc:	4620      	mov	r0, r4
 80197be:	b006      	add	sp, #24
 80197c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080197c4 <rcutils_string_map_getn>:
 80197c4:	b338      	cbz	r0, 8019816 <rcutils_string_map_getn+0x52>
 80197c6:	6800      	ldr	r0, [r0, #0]
 80197c8:	b328      	cbz	r0, 8019816 <rcutils_string_map_getn+0x52>
 80197ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80197ce:	460e      	mov	r6, r1
 80197d0:	b1c1      	cbz	r1, 8019804 <rcutils_string_map_getn+0x40>
 80197d2:	e9d0 9800 	ldrd	r9, r8, [r0]
 80197d6:	f1b8 0f00 	cmp.w	r8, #0
 80197da:	d013      	beq.n	8019804 <rcutils_string_map_getn+0x40>
 80197dc:	4617      	mov	r7, r2
 80197de:	2400      	movs	r4, #0
 80197e0:	f859 5034 	ldr.w	r5, [r9, r4, lsl #3]
 80197e4:	4628      	mov	r0, r5
 80197e6:	b155      	cbz	r5, 80197fe <rcutils_string_map_getn+0x3a>
 80197e8:	f7e6 fd7a 	bl	80002e0 <strlen>
 80197ec:	42b8      	cmp	r0, r7
 80197ee:	4602      	mov	r2, r0
 80197f0:	4629      	mov	r1, r5
 80197f2:	bf38      	it	cc
 80197f4:	463a      	movcc	r2, r7
 80197f6:	4630      	mov	r0, r6
 80197f8:	f004 f82b 	bl	801d852 <strncmp>
 80197fc:	b128      	cbz	r0, 801980a <rcutils_string_map_getn+0x46>
 80197fe:	3401      	adds	r4, #1
 8019800:	45a0      	cmp	r8, r4
 8019802:	d1ed      	bne.n	80197e0 <rcutils_string_map_getn+0x1c>
 8019804:	2000      	movs	r0, #0
 8019806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801980a:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
 801980e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8019812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019816:	4770      	bx	lr

08019818 <rmw_get_zero_initialized_discovery_options>:
 8019818:	b510      	push	{r4, lr}
 801981a:	2220      	movs	r2, #32
 801981c:	4604      	mov	r4, r0
 801981e:	2100      	movs	r1, #0
 8019820:	f004 f802 	bl	801d828 <memset>
 8019824:	4620      	mov	r0, r4
 8019826:	bd10      	pop	{r4, pc}

08019828 <rmw_discovery_options_init>:
 8019828:	b328      	cbz	r0, 8019876 <rmw_discovery_options_init+0x4e>
 801982a:	b570      	push	{r4, r5, r6, lr}
 801982c:	4604      	mov	r4, r0
 801982e:	4610      	mov	r0, r2
 8019830:	460e      	mov	r6, r1
 8019832:	4615      	mov	r5, r2
 8019834:	f7f5 fd0e 	bl	800f254 <rcutils_allocator_is_valid>
 8019838:	b1d8      	cbz	r0, 8019872 <rmw_discovery_options_init+0x4a>
 801983a:	68a3      	ldr	r3, [r4, #8]
 801983c:	b9cb      	cbnz	r3, 8019872 <rmw_discovery_options_init+0x4a>
 801983e:	6863      	ldr	r3, [r4, #4]
 8019840:	b9bb      	cbnz	r3, 8019872 <rmw_discovery_options_init+0x4a>
 8019842:	7823      	ldrb	r3, [r4, #0]
 8019844:	b90b      	cbnz	r3, 801984a <rmw_discovery_options_init+0x22>
 8019846:	2302      	movs	r3, #2
 8019848:	7023      	strb	r3, [r4, #0]
 801984a:	b186      	cbz	r6, 801986e <rmw_discovery_options_init+0x46>
 801984c:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8019850:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8019854:	4630      	mov	r0, r6
 8019856:	4798      	blx	r3
 8019858:	6060      	str	r0, [r4, #4]
 801985a:	b170      	cbz	r0, 801987a <rmw_discovery_options_init+0x52>
 801985c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801985e:	f104 0c0c 	add.w	ip, r4, #12
 8019862:	60a6      	str	r6, [r4, #8]
 8019864:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019868:	682b      	ldr	r3, [r5, #0]
 801986a:	f8cc 3000 	str.w	r3, [ip]
 801986e:	2000      	movs	r0, #0
 8019870:	bd70      	pop	{r4, r5, r6, pc}
 8019872:	200b      	movs	r0, #11
 8019874:	bd70      	pop	{r4, r5, r6, pc}
 8019876:	200b      	movs	r0, #11
 8019878:	4770      	bx	lr
 801987a:	200a      	movs	r0, #10
 801987c:	bd70      	pop	{r4, r5, r6, pc}
 801987e:	bf00      	nop

08019880 <rmw_get_zero_initialized_context>:
 8019880:	b530      	push	{r4, r5, lr}
 8019882:	b097      	sub	sp, #92	@ 0x5c
 8019884:	4604      	mov	r4, r0
 8019886:	4668      	mov	r0, sp
 8019888:	f7f5 fd7a 	bl	800f380 <rmw_get_zero_initialized_init_options>
 801988c:	2300      	movs	r3, #0
 801988e:	2200      	movs	r2, #0
 8019890:	e9c4 2300 	strd	r2, r3, [r4]
 8019894:	2500      	movs	r5, #0
 8019896:	4669      	mov	r1, sp
 8019898:	2258      	movs	r2, #88	@ 0x58
 801989a:	f104 0010 	add.w	r0, r4, #16
 801989e:	60a5      	str	r5, [r4, #8]
 80198a0:	f004 f89d 	bl	801d9de <memcpy>
 80198a4:	4620      	mov	r0, r4
 80198a6:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
 80198aa:	b017      	add	sp, #92	@ 0x5c
 80198ac:	bd30      	pop	{r4, r5, pc}
 80198ae:	bf00      	nop

080198b0 <rmw_time_equal>:
 80198b0:	b570      	push	{r4, r5, r6, lr}
 80198b2:	b084      	sub	sp, #16
 80198b4:	ac04      	add	r4, sp, #16
 80198b6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80198ba:	4925      	ldr	r1, [pc, #148]	@ (8019950 <rmw_time_equal+0xa0>)
 80198bc:	9c01      	ldr	r4, [sp, #4]
 80198be:	2202      	movs	r2, #2
 80198c0:	4281      	cmp	r1, r0
 80198c2:	41a2      	sbcs	r2, r4
 80198c4:	d333      	bcc.n	801992e <rmw_time_equal+0x7e>
 80198c6:	4603      	mov	r3, r0
 80198c8:	4822      	ldr	r0, [pc, #136]	@ (8019954 <rmw_time_equal+0xa4>)
 80198ca:	e9dd 1502 	ldrd	r1, r5, [sp, #8]
 80198ce:	fba3 3200 	umull	r3, r2, r3, r0
 80198d2:	fb00 2204 	mla	r2, r0, r4, r2
 80198d6:	43de      	mvns	r6, r3
 80198d8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80198dc:	1a84      	subs	r4, r0, r2
 80198de:	428e      	cmp	r6, r1
 80198e0:	41ac      	sbcs	r4, r5
 80198e2:	d332      	bcc.n	801994a <rmw_time_equal+0x9a>
 80198e4:	eb11 0e03 	adds.w	lr, r1, r3
 80198e8:	eb42 0005 	adc.w	r0, r2, r5
 80198ec:	9b08      	ldr	r3, [sp, #32]
 80198ee:	4918      	ldr	r1, [pc, #96]	@ (8019950 <rmw_time_equal+0xa0>)
 80198f0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80198f2:	2202      	movs	r2, #2
 80198f4:	4299      	cmp	r1, r3
 80198f6:	41aa      	sbcs	r2, r5
 80198f8:	d31e      	bcc.n	8019938 <rmw_time_equal+0x88>
 80198fa:	4c16      	ldr	r4, [pc, #88]	@ (8019954 <rmw_time_equal+0xa4>)
 80198fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80198fe:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8019900:	fba3 3104 	umull	r3, r1, r3, r4
 8019904:	fb04 1105 	mla	r1, r4, r5, r1
 8019908:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 801990c:	43dd      	mvns	r5, r3
 801990e:	ebac 0401 	sub.w	r4, ip, r1
 8019912:	4295      	cmp	r5, r2
 8019914:	41b4      	sbcs	r4, r6
 8019916:	d314      	bcc.n	8019942 <rmw_time_equal+0x92>
 8019918:	18d2      	adds	r2, r2, r3
 801991a:	eb41 0306 	adc.w	r3, r1, r6
 801991e:	4283      	cmp	r3, r0
 8019920:	bf08      	it	eq
 8019922:	4572      	cmpeq	r2, lr
 8019924:	bf0c      	ite	eq
 8019926:	2001      	moveq	r0, #1
 8019928:	2000      	movne	r0, #0
 801992a:	b004      	add	sp, #16
 801992c:	bd70      	pop	{r4, r5, r6, pc}
 801992e:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8019932:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8019936:	e7d9      	b.n	80198ec <rmw_time_equal+0x3c>
 8019938:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801993c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8019940:	e7ed      	b.n	801991e <rmw_time_equal+0x6e>
 8019942:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019946:	4663      	mov	r3, ip
 8019948:	e7e9      	b.n	801991e <rmw_time_equal+0x6e>
 801994a:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 801994e:	e7cd      	b.n	80198ec <rmw_time_equal+0x3c>
 8019950:	25c17d04 	.word	0x25c17d04
 8019954:	3b9aca00 	.word	0x3b9aca00

08019958 <rmw_time_total_nsec>:
 8019958:	b430      	push	{r4, r5}
 801995a:	b084      	sub	sp, #16
 801995c:	ac04      	add	r4, sp, #16
 801995e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8019962:	4914      	ldr	r1, [pc, #80]	@ (80199b4 <rmw_time_total_nsec+0x5c>)
 8019964:	9c01      	ldr	r4, [sp, #4]
 8019966:	2202      	movs	r2, #2
 8019968:	4281      	cmp	r1, r0
 801996a:	41a2      	sbcs	r2, r4
 801996c:	d315      	bcc.n	801999a <rmw_time_total_nsec+0x42>
 801996e:	4912      	ldr	r1, [pc, #72]	@ (80199b8 <rmw_time_total_nsec+0x60>)
 8019970:	4603      	mov	r3, r0
 8019972:	e9dd 0502 	ldrd	r0, r5, [sp, #8]
 8019976:	fba3 3201 	umull	r3, r2, r3, r1
 801997a:	fb01 2204 	mla	r2, r1, r4, r2
 801997e:	ea6f 0c03 	mvn.w	ip, r3
 8019982:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019986:	1a8c      	subs	r4, r1, r2
 8019988:	4584      	cmp	ip, r0
 801998a:	41ac      	sbcs	r4, r5
 801998c:	d30c      	bcc.n	80199a8 <rmw_time_total_nsec+0x50>
 801998e:	1818      	adds	r0, r3, r0
 8019990:	eb42 0105 	adc.w	r1, r2, r5
 8019994:	b004      	add	sp, #16
 8019996:	bc30      	pop	{r4, r5}
 8019998:	4770      	bx	lr
 801999a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801999e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80199a2:	b004      	add	sp, #16
 80199a4:	bc30      	pop	{r4, r5}
 80199a6:	4770      	bx	lr
 80199a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80199ac:	b004      	add	sp, #16
 80199ae:	bc30      	pop	{r4, r5}
 80199b0:	4770      	bx	lr
 80199b2:	bf00      	nop
 80199b4:	25c17d04 	.word	0x25c17d04
 80199b8:	3b9aca00 	.word	0x3b9aca00

080199bc <rmw_get_zero_initialized_message_info>:
 80199bc:	b510      	push	{r4, lr}
 80199be:	2238      	movs	r2, #56	@ 0x38
 80199c0:	4604      	mov	r4, r0
 80199c2:	2100      	movs	r1, #0
 80199c4:	f003 ff30 	bl	801d828 <memset>
 80199c8:	4620      	mov	r0, r4
 80199ca:	bd10      	pop	{r4, pc}

080199cc <rmw_validate_full_topic_name>:
 80199cc:	2800      	cmp	r0, #0
 80199ce:	d049      	beq.n	8019a64 <rmw_validate_full_topic_name+0x98>
 80199d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199d4:	460e      	mov	r6, r1
 80199d6:	2900      	cmp	r1, #0
 80199d8:	d056      	beq.n	8019a88 <rmw_validate_full_topic_name+0xbc>
 80199da:	4615      	mov	r5, r2
 80199dc:	4604      	mov	r4, r0
 80199de:	f7e6 fc7f 	bl	80002e0 <strlen>
 80199e2:	b150      	cbz	r0, 80199fa <rmw_validate_full_topic_name+0x2e>
 80199e4:	7823      	ldrb	r3, [r4, #0]
 80199e6:	2b2f      	cmp	r3, #47	@ 0x2f
 80199e8:	d00c      	beq.n	8019a04 <rmw_validate_full_topic_name+0x38>
 80199ea:	2302      	movs	r3, #2
 80199ec:	6033      	str	r3, [r6, #0]
 80199ee:	b10d      	cbz	r5, 80199f4 <rmw_validate_full_topic_name+0x28>
 80199f0:	2300      	movs	r3, #0
 80199f2:	602b      	str	r3, [r5, #0]
 80199f4:	2000      	movs	r0, #0
 80199f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80199fa:	2301      	movs	r3, #1
 80199fc:	6033      	str	r3, [r6, #0]
 80199fe:	2d00      	cmp	r5, #0
 8019a00:	d1f6      	bne.n	80199f0 <rmw_validate_full_topic_name+0x24>
 8019a02:	e7f7      	b.n	80199f4 <rmw_validate_full_topic_name+0x28>
 8019a04:	1e47      	subs	r7, r0, #1
 8019a06:	5de3      	ldrb	r3, [r4, r7]
 8019a08:	2b2f      	cmp	r3, #47	@ 0x2f
 8019a0a:	d03f      	beq.n	8019a8c <rmw_validate_full_topic_name+0xc0>
 8019a0c:	1e63      	subs	r3, r4, #1
 8019a0e:	4621      	mov	r1, r4
 8019a10:	eb03 0e00 	add.w	lr, r3, r0
 8019a14:	469c      	mov	ip, r3
 8019a16:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8019a1a:	2a5f      	cmp	r2, #95	@ 0x5f
 8019a1c:	d006      	beq.n	8019a2c <rmw_validate_full_topic_name+0x60>
 8019a1e:	d823      	bhi.n	8019a68 <rmw_validate_full_topic_name+0x9c>
 8019a20:	2a39      	cmp	r2, #57	@ 0x39
 8019a22:	f1a2 0841 	sub.w	r8, r2, #65	@ 0x41
 8019a26:	d82b      	bhi.n	8019a80 <rmw_validate_full_topic_name+0xb4>
 8019a28:	2a2e      	cmp	r2, #46	@ 0x2e
 8019a2a:	d920      	bls.n	8019a6e <rmw_validate_full_topic_name+0xa2>
 8019a2c:	4573      	cmp	r3, lr
 8019a2e:	d1f1      	bne.n	8019a14 <rmw_validate_full_topic_name+0x48>
 8019a30:	4c21      	ldr	r4, [pc, #132]	@ (8019ab8 <rmw_validate_full_topic_name+0xec>)
 8019a32:	2300      	movs	r3, #0
 8019a34:	e003      	b.n	8019a3e <rmw_validate_full_topic_name+0x72>
 8019a36:	4298      	cmp	r0, r3
 8019a38:	f101 0101 	add.w	r1, r1, #1
 8019a3c:	d02c      	beq.n	8019a98 <rmw_validate_full_topic_name+0xcc>
 8019a3e:	429f      	cmp	r7, r3
 8019a40:	f103 0301 	add.w	r3, r3, #1
 8019a44:	d0f7      	beq.n	8019a36 <rmw_validate_full_topic_name+0x6a>
 8019a46:	780a      	ldrb	r2, [r1, #0]
 8019a48:	2a2f      	cmp	r2, #47	@ 0x2f
 8019a4a:	d1f4      	bne.n	8019a36 <rmw_validate_full_topic_name+0x6a>
 8019a4c:	784a      	ldrb	r2, [r1, #1]
 8019a4e:	2a2f      	cmp	r2, #47	@ 0x2f
 8019a50:	d02d      	beq.n	8019aae <rmw_validate_full_topic_name+0xe2>
 8019a52:	5ca2      	ldrb	r2, [r4, r2]
 8019a54:	0752      	lsls	r2, r2, #29
 8019a56:	d5ee      	bpl.n	8019a36 <rmw_validate_full_topic_name+0x6a>
 8019a58:	2206      	movs	r2, #6
 8019a5a:	6032      	str	r2, [r6, #0]
 8019a5c:	2d00      	cmp	r5, #0
 8019a5e:	d0c9      	beq.n	80199f4 <rmw_validate_full_topic_name+0x28>
 8019a60:	602b      	str	r3, [r5, #0]
 8019a62:	e7c7      	b.n	80199f4 <rmw_validate_full_topic_name+0x28>
 8019a64:	200b      	movs	r0, #11
 8019a66:	4770      	bx	lr
 8019a68:	3a61      	subs	r2, #97	@ 0x61
 8019a6a:	2a19      	cmp	r2, #25
 8019a6c:	d9de      	bls.n	8019a2c <rmw_validate_full_topic_name+0x60>
 8019a6e:	2304      	movs	r3, #4
 8019a70:	6033      	str	r3, [r6, #0]
 8019a72:	2d00      	cmp	r5, #0
 8019a74:	d0be      	beq.n	80199f4 <rmw_validate_full_topic_name+0x28>
 8019a76:	f1c4 0401 	rsb	r4, r4, #1
 8019a7a:	4464      	add	r4, ip
 8019a7c:	602c      	str	r4, [r5, #0]
 8019a7e:	e7b9      	b.n	80199f4 <rmw_validate_full_topic_name+0x28>
 8019a80:	f1b8 0f19 	cmp.w	r8, #25
 8019a84:	d9d2      	bls.n	8019a2c <rmw_validate_full_topic_name+0x60>
 8019a86:	e7f2      	b.n	8019a6e <rmw_validate_full_topic_name+0xa2>
 8019a88:	200b      	movs	r0, #11
 8019a8a:	e7b4      	b.n	80199f6 <rmw_validate_full_topic_name+0x2a>
 8019a8c:	2303      	movs	r3, #3
 8019a8e:	6033      	str	r3, [r6, #0]
 8019a90:	2d00      	cmp	r5, #0
 8019a92:	d0af      	beq.n	80199f4 <rmw_validate_full_topic_name+0x28>
 8019a94:	602f      	str	r7, [r5, #0]
 8019a96:	e7ad      	b.n	80199f4 <rmw_validate_full_topic_name+0x28>
 8019a98:	28f7      	cmp	r0, #247	@ 0xf7
 8019a9a:	d802      	bhi.n	8019aa2 <rmw_validate_full_topic_name+0xd6>
 8019a9c:	2300      	movs	r3, #0
 8019a9e:	6033      	str	r3, [r6, #0]
 8019aa0:	e7a8      	b.n	80199f4 <rmw_validate_full_topic_name+0x28>
 8019aa2:	2307      	movs	r3, #7
 8019aa4:	6033      	str	r3, [r6, #0]
 8019aa6:	2d00      	cmp	r5, #0
 8019aa8:	d0a4      	beq.n	80199f4 <rmw_validate_full_topic_name+0x28>
 8019aaa:	23f6      	movs	r3, #246	@ 0xf6
 8019aac:	e7d8      	b.n	8019a60 <rmw_validate_full_topic_name+0x94>
 8019aae:	2205      	movs	r2, #5
 8019ab0:	6032      	str	r2, [r6, #0]
 8019ab2:	2d00      	cmp	r5, #0
 8019ab4:	d1d4      	bne.n	8019a60 <rmw_validate_full_topic_name+0x94>
 8019ab6:	e79d      	b.n	80199f4 <rmw_validate_full_topic_name+0x28>
 8019ab8:	08021ab8 	.word	0x08021ab8

08019abc <rmw_validate_namespace_with_size>:
 8019abc:	2800      	cmp	r0, #0
 8019abe:	d031      	beq.n	8019b24 <rmw_validate_namespace_with_size+0x68>
 8019ac0:	b570      	push	{r4, r5, r6, lr}
 8019ac2:	4614      	mov	r4, r2
 8019ac4:	b0c2      	sub	sp, #264	@ 0x108
 8019ac6:	b1ba      	cbz	r2, 8019af8 <rmw_validate_namespace_with_size+0x3c>
 8019ac8:	2901      	cmp	r1, #1
 8019aca:	460e      	mov	r6, r1
 8019acc:	461d      	mov	r5, r3
 8019ace:	d102      	bne.n	8019ad6 <rmw_validate_namespace_with_size+0x1a>
 8019ad0:	7803      	ldrb	r3, [r0, #0]
 8019ad2:	2b2f      	cmp	r3, #47	@ 0x2f
 8019ad4:	d015      	beq.n	8019b02 <rmw_validate_namespace_with_size+0x46>
 8019ad6:	aa01      	add	r2, sp, #4
 8019ad8:	4669      	mov	r1, sp
 8019ada:	f7ff ff77 	bl	80199cc <rmw_validate_full_topic_name>
 8019ade:	b960      	cbnz	r0, 8019afa <rmw_validate_namespace_with_size+0x3e>
 8019ae0:	9b00      	ldr	r3, [sp, #0]
 8019ae2:	b163      	cbz	r3, 8019afe <rmw_validate_namespace_with_size+0x42>
 8019ae4:	2b07      	cmp	r3, #7
 8019ae6:	d00a      	beq.n	8019afe <rmw_validate_namespace_with_size+0x42>
 8019ae8:	1e5a      	subs	r2, r3, #1
 8019aea:	2a05      	cmp	r2, #5
 8019aec:	d81c      	bhi.n	8019b28 <rmw_validate_namespace_with_size+0x6c>
 8019aee:	e8df f002 	tbb	[pc, r2]
 8019af2:	0c0c      	.short	0x0c0c
 8019af4:	0c0c0c0c 	.word	0x0c0c0c0c
 8019af8:	200b      	movs	r0, #11
 8019afa:	b042      	add	sp, #264	@ 0x108
 8019afc:	bd70      	pop	{r4, r5, r6, pc}
 8019afe:	2ef5      	cmp	r6, #245	@ 0xf5
 8019b00:	d809      	bhi.n	8019b16 <rmw_validate_namespace_with_size+0x5a>
 8019b02:	2300      	movs	r3, #0
 8019b04:	6023      	str	r3, [r4, #0]
 8019b06:	2000      	movs	r0, #0
 8019b08:	e7f7      	b.n	8019afa <rmw_validate_namespace_with_size+0x3e>
 8019b0a:	6023      	str	r3, [r4, #0]
 8019b0c:	2d00      	cmp	r5, #0
 8019b0e:	d0fa      	beq.n	8019b06 <rmw_validate_namespace_with_size+0x4a>
 8019b10:	9b01      	ldr	r3, [sp, #4]
 8019b12:	602b      	str	r3, [r5, #0]
 8019b14:	e7f7      	b.n	8019b06 <rmw_validate_namespace_with_size+0x4a>
 8019b16:	2307      	movs	r3, #7
 8019b18:	6023      	str	r3, [r4, #0]
 8019b1a:	2d00      	cmp	r5, #0
 8019b1c:	d0f3      	beq.n	8019b06 <rmw_validate_namespace_with_size+0x4a>
 8019b1e:	23f4      	movs	r3, #244	@ 0xf4
 8019b20:	602b      	str	r3, [r5, #0]
 8019b22:	e7f0      	b.n	8019b06 <rmw_validate_namespace_with_size+0x4a>
 8019b24:	200b      	movs	r0, #11
 8019b26:	4770      	bx	lr
 8019b28:	4a03      	ldr	r2, [pc, #12]	@ (8019b38 <rmw_validate_namespace_with_size+0x7c>)
 8019b2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8019b2e:	a802      	add	r0, sp, #8
 8019b30:	f7ff fcca 	bl	80194c8 <rcutils_snprintf>
 8019b34:	2001      	movs	r0, #1
 8019b36:	e7e0      	b.n	8019afa <rmw_validate_namespace_with_size+0x3e>
 8019b38:	080212a8 	.word	0x080212a8

08019b3c <rmw_validate_namespace>:
 8019b3c:	b168      	cbz	r0, 8019b5a <rmw_validate_namespace+0x1e>
 8019b3e:	b570      	push	{r4, r5, r6, lr}
 8019b40:	460d      	mov	r5, r1
 8019b42:	4616      	mov	r6, r2
 8019b44:	4604      	mov	r4, r0
 8019b46:	f7e6 fbcb 	bl	80002e0 <strlen>
 8019b4a:	4633      	mov	r3, r6
 8019b4c:	4601      	mov	r1, r0
 8019b4e:	462a      	mov	r2, r5
 8019b50:	4620      	mov	r0, r4
 8019b52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019b56:	f7ff bfb1 	b.w	8019abc <rmw_validate_namespace_with_size>
 8019b5a:	200b      	movs	r0, #11
 8019b5c:	4770      	bx	lr
 8019b5e:	bf00      	nop

08019b60 <rmw_namespace_validation_result_string>:
 8019b60:	2807      	cmp	r0, #7
 8019b62:	bf9a      	itte	ls
 8019b64:	4b02      	ldrls	r3, [pc, #8]	@ (8019b70 <rmw_namespace_validation_result_string+0x10>)
 8019b66:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8019b6a:	4802      	ldrhi	r0, [pc, #8]	@ (8019b74 <rmw_namespace_validation_result_string+0x14>)
 8019b6c:	4770      	bx	lr
 8019b6e:	bf00      	nop
 8019b70:	080214a0 	.word	0x080214a0
 8019b74:	080212f8 	.word	0x080212f8

08019b78 <rmw_validate_node_name>:
 8019b78:	2800      	cmp	r0, #0
 8019b7a:	d037      	beq.n	8019bec <rmw_validate_node_name+0x74>
 8019b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b7e:	460e      	mov	r6, r1
 8019b80:	2900      	cmp	r1, #0
 8019b82:	d035      	beq.n	8019bf0 <rmw_validate_node_name+0x78>
 8019b84:	4617      	mov	r7, r2
 8019b86:	4604      	mov	r4, r0
 8019b88:	f7e6 fbaa 	bl	80002e0 <strlen>
 8019b8c:	b1d8      	cbz	r0, 8019bc6 <rmw_validate_node_name+0x4e>
 8019b8e:	1e63      	subs	r3, r4, #1
 8019b90:	1819      	adds	r1, r3, r0
 8019b92:	461a      	mov	r2, r3
 8019b94:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8019b98:	f1ae 0530 	sub.w	r5, lr, #48	@ 0x30
 8019b9c:	f02e 0c20 	bic.w	ip, lr, #32
 8019ba0:	2d09      	cmp	r5, #9
 8019ba2:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8019ba6:	d915      	bls.n	8019bd4 <rmw_validate_node_name+0x5c>
 8019ba8:	f1bc 0f19 	cmp.w	ip, #25
 8019bac:	d912      	bls.n	8019bd4 <rmw_validate_node_name+0x5c>
 8019bae:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8019bb2:	d00f      	beq.n	8019bd4 <rmw_validate_node_name+0x5c>
 8019bb4:	2302      	movs	r3, #2
 8019bb6:	6033      	str	r3, [r6, #0]
 8019bb8:	b11f      	cbz	r7, 8019bc2 <rmw_validate_node_name+0x4a>
 8019bba:	f1c4 0401 	rsb	r4, r4, #1
 8019bbe:	4414      	add	r4, r2
 8019bc0:	603c      	str	r4, [r7, #0]
 8019bc2:	2000      	movs	r0, #0
 8019bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019bc6:	2301      	movs	r3, #1
 8019bc8:	6033      	str	r3, [r6, #0]
 8019bca:	2f00      	cmp	r7, #0
 8019bcc:	d0f9      	beq.n	8019bc2 <rmw_validate_node_name+0x4a>
 8019bce:	2300      	movs	r3, #0
 8019bd0:	603b      	str	r3, [r7, #0]
 8019bd2:	e7f6      	b.n	8019bc2 <rmw_validate_node_name+0x4a>
 8019bd4:	4299      	cmp	r1, r3
 8019bd6:	d1dc      	bne.n	8019b92 <rmw_validate_node_name+0x1a>
 8019bd8:	7823      	ldrb	r3, [r4, #0]
 8019bda:	4a0c      	ldr	r2, [pc, #48]	@ (8019c0c <rmw_validate_node_name+0x94>)
 8019bdc:	5cd3      	ldrb	r3, [r2, r3]
 8019bde:	f013 0304 	ands.w	r3, r3, #4
 8019be2:	d10e      	bne.n	8019c02 <rmw_validate_node_name+0x8a>
 8019be4:	28ff      	cmp	r0, #255	@ 0xff
 8019be6:	d805      	bhi.n	8019bf4 <rmw_validate_node_name+0x7c>
 8019be8:	6033      	str	r3, [r6, #0]
 8019bea:	e7ea      	b.n	8019bc2 <rmw_validate_node_name+0x4a>
 8019bec:	200b      	movs	r0, #11
 8019bee:	4770      	bx	lr
 8019bf0:	200b      	movs	r0, #11
 8019bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019bf4:	2304      	movs	r3, #4
 8019bf6:	6033      	str	r3, [r6, #0]
 8019bf8:	2f00      	cmp	r7, #0
 8019bfa:	d0e2      	beq.n	8019bc2 <rmw_validate_node_name+0x4a>
 8019bfc:	23fe      	movs	r3, #254	@ 0xfe
 8019bfe:	603b      	str	r3, [r7, #0]
 8019c00:	e7df      	b.n	8019bc2 <rmw_validate_node_name+0x4a>
 8019c02:	2303      	movs	r3, #3
 8019c04:	6033      	str	r3, [r6, #0]
 8019c06:	2f00      	cmp	r7, #0
 8019c08:	d1e1      	bne.n	8019bce <rmw_validate_node_name+0x56>
 8019c0a:	e7da      	b.n	8019bc2 <rmw_validate_node_name+0x4a>
 8019c0c:	08021ab8 	.word	0x08021ab8

08019c10 <rmw_node_name_validation_result_string>:
 8019c10:	2804      	cmp	r0, #4
 8019c12:	bf9a      	itte	ls
 8019c14:	4b02      	ldrls	r3, [pc, #8]	@ (8019c20 <rmw_node_name_validation_result_string+0x10>)
 8019c16:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8019c1a:	4802      	ldrhi	r0, [pc, #8]	@ (8019c24 <rmw_node_name_validation_result_string+0x14>)
 8019c1c:	4770      	bx	lr
 8019c1e:	bf00      	nop
 8019c20:	080215ac 	.word	0x080215ac
 8019c24:	080214c0 	.word	0x080214c0

08019c28 <on_status>:
 8019c28:	b082      	sub	sp, #8
 8019c2a:	b002      	add	sp, #8
 8019c2c:	4770      	bx	lr
 8019c2e:	bf00      	nop

08019c30 <on_topic>:
 8019c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c34:	4a22      	ldr	r2, [pc, #136]	@ (8019cc0 <on_topic+0x90>)
 8019c36:	b094      	sub	sp, #80	@ 0x50
 8019c38:	6812      	ldr	r2, [r2, #0]
 8019c3a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8019c3c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8019c40:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8019c44:	b3c2      	cbz	r2, 8019cb8 <on_topic+0x88>
 8019c46:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8019c4a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8019c4e:	e001      	b.n	8019c54 <on_topic+0x24>
 8019c50:	6852      	ldr	r2, [r2, #4]
 8019c52:	b38a      	cbz	r2, 8019cb8 <on_topic+0x88>
 8019c54:	6894      	ldr	r4, [r2, #8]
 8019c56:	8aa3      	ldrh	r3, [r4, #20]
 8019c58:	428b      	cmp	r3, r1
 8019c5a:	d1f9      	bne.n	8019c50 <on_topic+0x20>
 8019c5c:	7da3      	ldrb	r3, [r4, #22]
 8019c5e:	4283      	cmp	r3, r0
 8019c60:	d1f6      	bne.n	8019c50 <on_topic+0x20>
 8019c62:	2248      	movs	r2, #72	@ 0x48
 8019c64:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8019c68:	4668      	mov	r0, sp
 8019c6a:	f003 feb8 	bl	801d9de <memcpy>
 8019c6e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8019c72:	cb0c      	ldmia	r3, {r2, r3}
 8019c74:	4620      	mov	r0, r4
 8019c76:	f7f6 fc6f 	bl	8010558 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019c7a:	4607      	mov	r7, r0
 8019c7c:	b1e0      	cbz	r0, 8019cb8 <on_topic+0x88>
 8019c7e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8019c82:	4632      	mov	r2, r6
 8019c84:	4628      	mov	r0, r5
 8019c86:	f108 0110 	add.w	r1, r8, #16
 8019c8a:	f7f8 fd07 	bl	801269c <ucdr_deserialize_array_uint8_t>
 8019c8e:	b930      	cbnz	r0, 8019c9e <on_topic+0x6e>
 8019c90:	480c      	ldr	r0, [pc, #48]	@ (8019cc4 <on_topic+0x94>)
 8019c92:	4639      	mov	r1, r7
 8019c94:	b014      	add	sp, #80	@ 0x50
 8019c96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019c9a:	f000 b8bd 	b.w	8019e18 <put_memory>
 8019c9e:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8019ca2:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8019ca6:	f7f6 fa55 	bl	8010154 <rmw_uros_epoch_nanos>
 8019caa:	2305      	movs	r3, #5
 8019cac:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8019cb0:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019cb4:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8019cb8:	b014      	add	sp, #80	@ 0x50
 8019cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019cbe:	bf00      	nop
 8019cc0:	2000ce10 	.word	0x2000ce10
 8019cc4:	2000c4d0 	.word	0x2000c4d0

08019cc8 <on_request>:
 8019cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ccc:	4823      	ldr	r0, [pc, #140]	@ (8019d5c <on_request+0x94>)
 8019cce:	b094      	sub	sp, #80	@ 0x50
 8019cd0:	6800      	ldr	r0, [r0, #0]
 8019cd2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8019cd4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8019cd8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8019cda:	2800      	cmp	r0, #0
 8019cdc:	d03b      	beq.n	8019d56 <on_request+0x8e>
 8019cde:	461d      	mov	r5, r3
 8019ce0:	e001      	b.n	8019ce6 <on_request+0x1e>
 8019ce2:	6840      	ldr	r0, [r0, #4]
 8019ce4:	b3b8      	cbz	r0, 8019d56 <on_request+0x8e>
 8019ce6:	6884      	ldr	r4, [r0, #8]
 8019ce8:	8b21      	ldrh	r1, [r4, #24]
 8019cea:	4291      	cmp	r1, r2
 8019cec:	d1f9      	bne.n	8019ce2 <on_request+0x1a>
 8019cee:	2248      	movs	r2, #72	@ 0x48
 8019cf0:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8019cf4:	4668      	mov	r0, sp
 8019cf6:	f003 fe72 	bl	801d9de <memcpy>
 8019cfa:	f104 0320 	add.w	r3, r4, #32
 8019cfe:	cb0c      	ldmia	r3, {r2, r3}
 8019d00:	4620      	mov	r0, r4
 8019d02:	f7f6 fc29 	bl	8010558 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019d06:	4680      	mov	r8, r0
 8019d08:	b328      	cbz	r0, 8019d56 <on_request+0x8e>
 8019d0a:	4638      	mov	r0, r7
 8019d0c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8019d10:	4632      	mov	r2, r6
 8019d12:	f107 0110 	add.w	r1, r7, #16
 8019d16:	f7f8 fcc1 	bl	801269c <ucdr_deserialize_array_uint8_t>
 8019d1a:	b930      	cbnz	r0, 8019d2a <on_request+0x62>
 8019d1c:	4810      	ldr	r0, [pc, #64]	@ (8019d60 <on_request+0x98>)
 8019d1e:	4641      	mov	r1, r8
 8019d20:	b014      	add	sp, #80	@ 0x50
 8019d22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019d26:	f000 b877 	b.w	8019e18 <put_memory>
 8019d2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019d2c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8019d30:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8019d34:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8019d38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019d3c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019d40:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019d44:	f7f6 fa06 	bl	8010154 <rmw_uros_epoch_nanos>
 8019d48:	2303      	movs	r3, #3
 8019d4a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8019d4e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019d52:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8019d56:	b014      	add	sp, #80	@ 0x50
 8019d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d5c:	2000c9c8 	.word	0x2000c9c8
 8019d60:	2000c4d0 	.word	0x2000c4d0

08019d64 <on_reply>:
 8019d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d68:	4821      	ldr	r0, [pc, #132]	@ (8019df0 <on_reply+0x8c>)
 8019d6a:	b094      	sub	sp, #80	@ 0x50
 8019d6c:	6800      	ldr	r0, [r0, #0]
 8019d6e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8019d70:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8019d74:	9113      	str	r1, [sp, #76]	@ 0x4c
 8019d76:	b3b8      	cbz	r0, 8019de8 <on_reply+0x84>
 8019d78:	461d      	mov	r5, r3
 8019d7a:	e001      	b.n	8019d80 <on_reply+0x1c>
 8019d7c:	6840      	ldr	r0, [r0, #4]
 8019d7e:	b398      	cbz	r0, 8019de8 <on_reply+0x84>
 8019d80:	6884      	ldr	r4, [r0, #8]
 8019d82:	8b21      	ldrh	r1, [r4, #24]
 8019d84:	4291      	cmp	r1, r2
 8019d86:	d1f9      	bne.n	8019d7c <on_reply+0x18>
 8019d88:	2248      	movs	r2, #72	@ 0x48
 8019d8a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8019d8e:	4668      	mov	r0, sp
 8019d90:	f003 fe25 	bl	801d9de <memcpy>
 8019d94:	f104 0320 	add.w	r3, r4, #32
 8019d98:	cb0c      	ldmia	r3, {r2, r3}
 8019d9a:	4620      	mov	r0, r4
 8019d9c:	f7f6 fbdc 	bl	8010558 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019da0:	4680      	mov	r8, r0
 8019da2:	b308      	cbz	r0, 8019de8 <on_reply+0x84>
 8019da4:	4638      	mov	r0, r7
 8019da6:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8019daa:	4632      	mov	r2, r6
 8019dac:	f107 0110 	add.w	r1, r7, #16
 8019db0:	f7f8 fc74 	bl	801269c <ucdr_deserialize_array_uint8_t>
 8019db4:	b930      	cbnz	r0, 8019dc4 <on_reply+0x60>
 8019db6:	480f      	ldr	r0, [pc, #60]	@ (8019df4 <on_reply+0x90>)
 8019db8:	4641      	mov	r1, r8
 8019dba:	b014      	add	sp, #80	@ 0x50
 8019dbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019dc0:	f000 b82a 	b.w	8019e18 <put_memory>
 8019dc4:	2200      	movs	r2, #0
 8019dc6:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8019dca:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8019dce:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8019dd2:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8019dd6:	f7f6 f9bd 	bl	8010154 <rmw_uros_epoch_nanos>
 8019dda:	2304      	movs	r3, #4
 8019ddc:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8019de0:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019de4:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8019de8:	b014      	add	sp, #80	@ 0x50
 8019dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019dee:	bf00      	nop
 8019df0:	2000c828 	.word	0x2000c828
 8019df4:	2000c4d0 	.word	0x2000c4d0

08019df8 <get_memory>:
 8019df8:	4603      	mov	r3, r0
 8019dfa:	6840      	ldr	r0, [r0, #4]
 8019dfc:	b158      	cbz	r0, 8019e16 <get_memory+0x1e>
 8019dfe:	6842      	ldr	r2, [r0, #4]
 8019e00:	605a      	str	r2, [r3, #4]
 8019e02:	b10a      	cbz	r2, 8019e08 <get_memory+0x10>
 8019e04:	2100      	movs	r1, #0
 8019e06:	6011      	str	r1, [r2, #0]
 8019e08:	681a      	ldr	r2, [r3, #0]
 8019e0a:	6042      	str	r2, [r0, #4]
 8019e0c:	b102      	cbz	r2, 8019e10 <get_memory+0x18>
 8019e0e:	6010      	str	r0, [r2, #0]
 8019e10:	2200      	movs	r2, #0
 8019e12:	6002      	str	r2, [r0, #0]
 8019e14:	6018      	str	r0, [r3, #0]
 8019e16:	4770      	bx	lr

08019e18 <put_memory>:
 8019e18:	680b      	ldr	r3, [r1, #0]
 8019e1a:	b10b      	cbz	r3, 8019e20 <put_memory+0x8>
 8019e1c:	684a      	ldr	r2, [r1, #4]
 8019e1e:	605a      	str	r2, [r3, #4]
 8019e20:	684a      	ldr	r2, [r1, #4]
 8019e22:	b102      	cbz	r2, 8019e26 <put_memory+0xe>
 8019e24:	6013      	str	r3, [r2, #0]
 8019e26:	6803      	ldr	r3, [r0, #0]
 8019e28:	428b      	cmp	r3, r1
 8019e2a:	6843      	ldr	r3, [r0, #4]
 8019e2c:	bf08      	it	eq
 8019e2e:	6002      	streq	r2, [r0, #0]
 8019e30:	604b      	str	r3, [r1, #4]
 8019e32:	b103      	cbz	r3, 8019e36 <put_memory+0x1e>
 8019e34:	6019      	str	r1, [r3, #0]
 8019e36:	2300      	movs	r3, #0
 8019e38:	600b      	str	r3, [r1, #0]
 8019e3a:	6041      	str	r1, [r0, #4]
 8019e3c:	4770      	bx	lr
 8019e3e:	bf00      	nop

08019e40 <rmw_destroy_client>:
 8019e40:	b570      	push	{r4, r5, r6, lr}
 8019e42:	b128      	cbz	r0, 8019e50 <rmw_destroy_client+0x10>
 8019e44:	4604      	mov	r4, r0
 8019e46:	6800      	ldr	r0, [r0, #0]
 8019e48:	460d      	mov	r5, r1
 8019e4a:	f7f6 fda3 	bl	8010994 <is_uxrce_rmw_identifier_valid>
 8019e4e:	b910      	cbnz	r0, 8019e56 <rmw_destroy_client+0x16>
 8019e50:	2401      	movs	r4, #1
 8019e52:	4620      	mov	r0, r4
 8019e54:	bd70      	pop	{r4, r5, r6, pc}
 8019e56:	6863      	ldr	r3, [r4, #4]
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	d0f9      	beq.n	8019e50 <rmw_destroy_client+0x10>
 8019e5c:	2d00      	cmp	r5, #0
 8019e5e:	d0f7      	beq.n	8019e50 <rmw_destroy_client+0x10>
 8019e60:	6828      	ldr	r0, [r5, #0]
 8019e62:	f7f6 fd97 	bl	8010994 <is_uxrce_rmw_identifier_valid>
 8019e66:	2800      	cmp	r0, #0
 8019e68:	d0f2      	beq.n	8019e50 <rmw_destroy_client+0x10>
 8019e6a:	686e      	ldr	r6, [r5, #4]
 8019e6c:	2e00      	cmp	r6, #0
 8019e6e:	d0ef      	beq.n	8019e50 <rmw_destroy_client+0x10>
 8019e70:	6864      	ldr	r4, [r4, #4]
 8019e72:	6932      	ldr	r2, [r6, #16]
 8019e74:	6920      	ldr	r0, [r4, #16]
 8019e76:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019e7a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019e7e:	6819      	ldr	r1, [r3, #0]
 8019e80:	f7f9 f81a 	bl	8012eb8 <uxr_buffer_cancel_data>
 8019e84:	4602      	mov	r2, r0
 8019e86:	6920      	ldr	r0, [r4, #16]
 8019e88:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8019e8c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8019e90:	f7f6 fc60 	bl	8010754 <run_xrce_session>
 8019e94:	6920      	ldr	r0, [r4, #16]
 8019e96:	6932      	ldr	r2, [r6, #16]
 8019e98:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019e9c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019ea0:	6819      	ldr	r1, [r3, #0]
 8019ea2:	f7f8 fd65 	bl	8012970 <uxr_buffer_delete_entity>
 8019ea6:	4602      	mov	r2, r0
 8019ea8:	6920      	ldr	r0, [r4, #16]
 8019eaa:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8019eae:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8019eb2:	f7f6 fc4f 	bl	8010754 <run_xrce_session>
 8019eb6:	f080 0401 	eor.w	r4, r0, #1
 8019eba:	b2e4      	uxtb	r4, r4
 8019ebc:	4628      	mov	r0, r5
 8019ebe:	0064      	lsls	r4, r4, #1
 8019ec0:	f7f6 fb28 	bl	8010514 <rmw_uxrce_fini_client_memory>
 8019ec4:	e7c5      	b.n	8019e52 <rmw_destroy_client+0x12>
 8019ec6:	bf00      	nop

08019ec8 <rmw_get_gid_for_client>:
 8019ec8:	b1a8      	cbz	r0, 8019ef6 <rmw_get_gid_for_client+0x2e>
 8019eca:	b538      	push	{r3, r4, r5, lr}
 8019ecc:	460c      	mov	r4, r1
 8019ece:	b1a1      	cbz	r1, 8019efa <rmw_get_gid_for_client+0x32>
 8019ed0:	4605      	mov	r5, r0
 8019ed2:	6800      	ldr	r0, [r0, #0]
 8019ed4:	b120      	cbz	r0, 8019ee0 <rmw_get_gid_for_client+0x18>
 8019ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8019f00 <rmw_get_gid_for_client+0x38>)
 8019ed8:	6819      	ldr	r1, [r3, #0]
 8019eda:	f7e6 f9a1 	bl	8000220 <strcmp>
 8019ede:	b940      	cbnz	r0, 8019ef2 <rmw_get_gid_for_client+0x2a>
 8019ee0:	686b      	ldr	r3, [r5, #4]
 8019ee2:	2000      	movs	r0, #0
 8019ee4:	6060      	str	r0, [r4, #4]
 8019ee6:	60a0      	str	r0, [r4, #8]
 8019ee8:	60e0      	str	r0, [r4, #12]
 8019eea:	6120      	str	r0, [r4, #16]
 8019eec:	691b      	ldr	r3, [r3, #16]
 8019eee:	6063      	str	r3, [r4, #4]
 8019ef0:	bd38      	pop	{r3, r4, r5, pc}
 8019ef2:	200c      	movs	r0, #12
 8019ef4:	bd38      	pop	{r3, r4, r5, pc}
 8019ef6:	200b      	movs	r0, #11
 8019ef8:	4770      	bx	lr
 8019efa:	200b      	movs	r0, #11
 8019efc:	bd38      	pop	{r3, r4, r5, pc}
 8019efe:	bf00      	nop
 8019f00:	080215d8 	.word	0x080215d8

08019f04 <rmw_get_implementation_identifier>:
 8019f04:	4b01      	ldr	r3, [pc, #4]	@ (8019f0c <rmw_get_implementation_identifier+0x8>)
 8019f06:	6818      	ldr	r0, [r3, #0]
 8019f08:	4770      	bx	lr
 8019f0a:	bf00      	nop
 8019f0c:	080215d8 	.word	0x080215d8

08019f10 <create_topic>:
 8019f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f14:	4604      	mov	r4, r0
 8019f16:	b084      	sub	sp, #16
 8019f18:	4824      	ldr	r0, [pc, #144]	@ (8019fac <create_topic+0x9c>)
 8019f1a:	460f      	mov	r7, r1
 8019f1c:	4616      	mov	r6, r2
 8019f1e:	f7ff ff6b 	bl	8019df8 <get_memory>
 8019f22:	2800      	cmp	r0, #0
 8019f24:	d03c      	beq.n	8019fa0 <create_topic+0x90>
 8019f26:	6923      	ldr	r3, [r4, #16]
 8019f28:	6885      	ldr	r5, [r0, #8]
 8019f2a:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8019fb4 <create_topic+0xa4>
 8019f2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019f32:	e9c5 6405 	strd	r6, r4, [r5, #20]
 8019f36:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8019f3a:	1c42      	adds	r2, r0, #1
 8019f3c:	2102      	movs	r1, #2
 8019f3e:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8019f42:	f7f8 ff53 	bl	8012dec <uxr_object_id>
 8019f46:	223c      	movs	r2, #60	@ 0x3c
 8019f48:	6128      	str	r0, [r5, #16]
 8019f4a:	4641      	mov	r1, r8
 8019f4c:	4638      	mov	r0, r7
 8019f4e:	f7f6 fd07 	bl	8010960 <generate_topic_name>
 8019f52:	b310      	cbz	r0, 8019f9a <create_topic+0x8a>
 8019f54:	4f16      	ldr	r7, [pc, #88]	@ (8019fb0 <create_topic+0xa0>)
 8019f56:	4630      	mov	r0, r6
 8019f58:	2264      	movs	r2, #100	@ 0x64
 8019f5a:	4639      	mov	r1, r7
 8019f5c:	f7f6 fcd0 	bl	8010900 <generate_type_name>
 8019f60:	b1d8      	cbz	r0, 8019f9a <create_topic+0x8a>
 8019f62:	6920      	ldr	r0, [r4, #16]
 8019f64:	2306      	movs	r3, #6
 8019f66:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8019f6a:	f8cd 8000 	str.w	r8, [sp]
 8019f6e:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8019f72:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019f76:	6811      	ldr	r1, [r2, #0]
 8019f78:	6963      	ldr	r3, [r4, #20]
 8019f7a:	692a      	ldr	r2, [r5, #16]
 8019f7c:	f7f8 fd74 	bl	8012a68 <uxr_buffer_create_topic_bin>
 8019f80:	4602      	mov	r2, r0
 8019f82:	6920      	ldr	r0, [r4, #16]
 8019f84:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8019f88:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8019f8c:	f7f6 fbe2 	bl	8010754 <run_xrce_session>
 8019f90:	b118      	cbz	r0, 8019f9a <create_topic+0x8a>
 8019f92:	4628      	mov	r0, r5
 8019f94:	b004      	add	sp, #16
 8019f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f9a:	4628      	mov	r0, r5
 8019f9c:	f7f6 fad0 	bl	8010540 <rmw_uxrce_fini_topic_memory>
 8019fa0:	2500      	movs	r5, #0
 8019fa2:	4628      	mov	r0, r5
 8019fa4:	b004      	add	sp, #16
 8019fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019faa:	bf00      	nop
 8019fac:	2000c684 	.word	0x2000c684
 8019fb0:	2000f1cc 	.word	0x2000f1cc
 8019fb4:	2000f230 	.word	0x2000f230

08019fb8 <destroy_topic>:
 8019fb8:	b538      	push	{r3, r4, r5, lr}
 8019fba:	6984      	ldr	r4, [r0, #24]
 8019fbc:	b1d4      	cbz	r4, 8019ff4 <destroy_topic+0x3c>
 8019fbe:	4605      	mov	r5, r0
 8019fc0:	6920      	ldr	r0, [r4, #16]
 8019fc2:	692a      	ldr	r2, [r5, #16]
 8019fc4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019fc8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019fcc:	6819      	ldr	r1, [r3, #0]
 8019fce:	f7f8 fccf 	bl	8012970 <uxr_buffer_delete_entity>
 8019fd2:	4602      	mov	r2, r0
 8019fd4:	6920      	ldr	r0, [r4, #16]
 8019fd6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8019fda:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8019fde:	f7f6 fbb9 	bl	8010754 <run_xrce_session>
 8019fe2:	f080 0401 	eor.w	r4, r0, #1
 8019fe6:	b2e4      	uxtb	r4, r4
 8019fe8:	4628      	mov	r0, r5
 8019fea:	0064      	lsls	r4, r4, #1
 8019fec:	f7f6 faa8 	bl	8010540 <rmw_uxrce_fini_topic_memory>
 8019ff0:	4620      	mov	r0, r4
 8019ff2:	bd38      	pop	{r3, r4, r5, pc}
 8019ff4:	2401      	movs	r4, #1
 8019ff6:	4620      	mov	r0, r4
 8019ff8:	bd38      	pop	{r3, r4, r5, pc}
 8019ffa:	bf00      	nop

08019ffc <rmw_send_request>:
 8019ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a000:	4604      	mov	r4, r0
 801a002:	6800      	ldr	r0, [r0, #0]
 801a004:	b08a      	sub	sp, #40	@ 0x28
 801a006:	460e      	mov	r6, r1
 801a008:	4615      	mov	r5, r2
 801a00a:	b128      	cbz	r0, 801a018 <rmw_send_request+0x1c>
 801a00c:	4b1e      	ldr	r3, [pc, #120]	@ (801a088 <rmw_send_request+0x8c>)
 801a00e:	6819      	ldr	r1, [r3, #0]
 801a010:	f7e6 f906 	bl	8000220 <strcmp>
 801a014:	2800      	cmp	r0, #0
 801a016:	d133      	bne.n	801a080 <rmw_send_request+0x84>
 801a018:	6864      	ldr	r4, [r4, #4]
 801a01a:	6963      	ldr	r3, [r4, #20]
 801a01c:	6fa7      	ldr	r7, [r4, #120]	@ 0x78
 801a01e:	689b      	ldr	r3, [r3, #8]
 801a020:	4798      	blx	r3
 801a022:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801a026:	4630      	mov	r0, r6
 801a028:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801a02c:	4798      	blx	r3
 801a02e:	693b      	ldr	r3, [r7, #16]
 801a030:	9000      	str	r0, [sp, #0]
 801a032:	6922      	ldr	r2, [r4, #16]
 801a034:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801a036:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801a03a:	ab02      	add	r3, sp, #8
 801a03c:	f7fa ff76 	bl	8014f2c <uxr_prepare_output_stream>
 801a040:	2300      	movs	r3, #0
 801a042:	6028      	str	r0, [r5, #0]
 801a044:	606b      	str	r3, [r5, #4]
 801a046:	b190      	cbz	r0, 801a06e <rmw_send_request+0x72>
 801a048:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a04c:	a902      	add	r1, sp, #8
 801a04e:	4630      	mov	r0, r6
 801a050:	4798      	blx	r3
 801a052:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801a056:	6938      	ldr	r0, [r7, #16]
 801a058:	2b01      	cmp	r3, #1
 801a05a:	d00c      	beq.n	801a076 <rmw_send_request+0x7a>
 801a05c:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801a05e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a062:	f7f9 fccf 	bl	8013a04 <uxr_run_session_until_confirm_delivery>
 801a066:	2000      	movs	r0, #0
 801a068:	b00a      	add	sp, #40	@ 0x28
 801a06a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a06e:	2001      	movs	r0, #1
 801a070:	b00a      	add	sp, #40	@ 0x28
 801a072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a076:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a07a:	f7f9 f92b 	bl	80132d4 <uxr_flash_output_streams>
 801a07e:	e7f2      	b.n	801a066 <rmw_send_request+0x6a>
 801a080:	200c      	movs	r0, #12
 801a082:	b00a      	add	sp, #40	@ 0x28
 801a084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a088:	080215d8 	.word	0x080215d8

0801a08c <rmw_take_request>:
 801a08c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a090:	4605      	mov	r5, r0
 801a092:	6800      	ldr	r0, [r0, #0]
 801a094:	b089      	sub	sp, #36	@ 0x24
 801a096:	460c      	mov	r4, r1
 801a098:	4690      	mov	r8, r2
 801a09a:	461e      	mov	r6, r3
 801a09c:	b128      	cbz	r0, 801a0aa <rmw_take_request+0x1e>
 801a09e:	4b28      	ldr	r3, [pc, #160]	@ (801a140 <rmw_take_request+0xb4>)
 801a0a0:	6819      	ldr	r1, [r3, #0]
 801a0a2:	f7e6 f8bd 	bl	8000220 <strcmp>
 801a0a6:	2800      	cmp	r0, #0
 801a0a8:	d146      	bne.n	801a138 <rmw_take_request+0xac>
 801a0aa:	b10e      	cbz	r6, 801a0b0 <rmw_take_request+0x24>
 801a0ac:	2300      	movs	r3, #0
 801a0ae:	7033      	strb	r3, [r6, #0]
 801a0b0:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801a0b4:	f7f6 fad0 	bl	8010658 <rmw_uxrce_clean_expired_static_input_buffer>
 801a0b8:	4648      	mov	r0, r9
 801a0ba:	f7f6 faa5 	bl	8010608 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a0be:	4607      	mov	r7, r0
 801a0c0:	b3b0      	cbz	r0, 801a130 <rmw_take_request+0xa4>
 801a0c2:	6885      	ldr	r5, [r0, #8]
 801a0c4:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 801a0c8:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 801a0cc:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801a0d0:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801a0d4:	7423      	strb	r3, [r4, #16]
 801a0d6:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801a0da:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 801a0de:	74e2      	strb	r2, [r4, #19]
 801a0e0:	f8a4 3011 	strh.w	r3, [r4, #17]
 801a0e4:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 801a0e8:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 801a0ec:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 801a0f0:	61e1      	str	r1, [r4, #28]
 801a0f2:	6162      	str	r2, [r4, #20]
 801a0f4:	61a3      	str	r3, [r4, #24]
 801a0f6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801a0fa:	689b      	ldr	r3, [r3, #8]
 801a0fc:	4798      	blx	r3
 801a0fe:	6844      	ldr	r4, [r0, #4]
 801a100:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801a104:	f105 0110 	add.w	r1, r5, #16
 801a108:	4668      	mov	r0, sp
 801a10a:	f7f3 fead 	bl	800de68 <ucdr_init_buffer>
 801a10e:	68e3      	ldr	r3, [r4, #12]
 801a110:	4641      	mov	r1, r8
 801a112:	4668      	mov	r0, sp
 801a114:	4798      	blx	r3
 801a116:	4639      	mov	r1, r7
 801a118:	4604      	mov	r4, r0
 801a11a:	480a      	ldr	r0, [pc, #40]	@ (801a144 <rmw_take_request+0xb8>)
 801a11c:	f7ff fe7c 	bl	8019e18 <put_memory>
 801a120:	b106      	cbz	r6, 801a124 <rmw_take_request+0x98>
 801a122:	7034      	strb	r4, [r6, #0]
 801a124:	f084 0001 	eor.w	r0, r4, #1
 801a128:	b2c0      	uxtb	r0, r0
 801a12a:	b009      	add	sp, #36	@ 0x24
 801a12c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a130:	2001      	movs	r0, #1
 801a132:	b009      	add	sp, #36	@ 0x24
 801a134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a138:	200c      	movs	r0, #12
 801a13a:	b009      	add	sp, #36	@ 0x24
 801a13c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a140:	080215d8 	.word	0x080215d8
 801a144:	2000c4d0 	.word	0x2000c4d0

0801a148 <rmw_send_response>:
 801a148:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a14a:	4605      	mov	r5, r0
 801a14c:	6800      	ldr	r0, [r0, #0]
 801a14e:	b091      	sub	sp, #68	@ 0x44
 801a150:	460c      	mov	r4, r1
 801a152:	4616      	mov	r6, r2
 801a154:	b128      	cbz	r0, 801a162 <rmw_send_response+0x1a>
 801a156:	4b28      	ldr	r3, [pc, #160]	@ (801a1f8 <rmw_send_response+0xb0>)
 801a158:	6819      	ldr	r1, [r3, #0]
 801a15a:	f7e6 f861 	bl	8000220 <strcmp>
 801a15e:	2800      	cmp	r0, #0
 801a160:	d141      	bne.n	801a1e6 <rmw_send_response+0x9e>
 801a162:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801a166:	9306      	str	r3, [sp, #24]
 801a168:	4623      	mov	r3, r4
 801a16a:	9207      	str	r2, [sp, #28]
 801a16c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a170:	686d      	ldr	r5, [r5, #4]
 801a172:	789b      	ldrb	r3, [r3, #2]
 801a174:	68a1      	ldr	r1, [r4, #8]
 801a176:	f88d 2017 	strb.w	r2, [sp, #23]
 801a17a:	f88d 3016 	strb.w	r3, [sp, #22]
 801a17e:	68e2      	ldr	r2, [r4, #12]
 801a180:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801a184:	6860      	ldr	r0, [r4, #4]
 801a186:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a18a:	ab02      	add	r3, sp, #8
 801a18c:	c307      	stmia	r3!, {r0, r1, r2}
 801a18e:	696b      	ldr	r3, [r5, #20]
 801a190:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801a192:	68db      	ldr	r3, [r3, #12]
 801a194:	4798      	blx	r3
 801a196:	6844      	ldr	r4, [r0, #4]
 801a198:	4630      	mov	r0, r6
 801a19a:	6923      	ldr	r3, [r4, #16]
 801a19c:	4798      	blx	r3
 801a19e:	f100 0318 	add.w	r3, r0, #24
 801a1a2:	6938      	ldr	r0, [r7, #16]
 801a1a4:	9300      	str	r3, [sp, #0]
 801a1a6:	692a      	ldr	r2, [r5, #16]
 801a1a8:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801a1aa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a1ae:	ab08      	add	r3, sp, #32
 801a1b0:	f7fa febc 	bl	8014f2c <uxr_prepare_output_stream>
 801a1b4:	b910      	cbnz	r0, 801a1bc <rmw_send_response+0x74>
 801a1b6:	2001      	movs	r0, #1
 801a1b8:	b011      	add	sp, #68	@ 0x44
 801a1ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a1bc:	a902      	add	r1, sp, #8
 801a1be:	a808      	add	r0, sp, #32
 801a1c0:	f7fb ff14 	bl	8015fec <uxr_serialize_SampleIdentity>
 801a1c4:	68a3      	ldr	r3, [r4, #8]
 801a1c6:	a908      	add	r1, sp, #32
 801a1c8:	4630      	mov	r0, r6
 801a1ca:	4798      	blx	r3
 801a1cc:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 801a1d0:	6938      	ldr	r0, [r7, #16]
 801a1d2:	2b01      	cmp	r3, #1
 801a1d4:	d00a      	beq.n	801a1ec <rmw_send_response+0xa4>
 801a1d6:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 801a1d8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a1dc:	f7f9 fc12 	bl	8013a04 <uxr_run_session_until_confirm_delivery>
 801a1e0:	2000      	movs	r0, #0
 801a1e2:	b011      	add	sp, #68	@ 0x44
 801a1e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a1e6:	200c      	movs	r0, #12
 801a1e8:	b011      	add	sp, #68	@ 0x44
 801a1ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a1ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a1f0:	f7f9 f870 	bl	80132d4 <uxr_flash_output_streams>
 801a1f4:	e7f4      	b.n	801a1e0 <rmw_send_response+0x98>
 801a1f6:	bf00      	nop
 801a1f8:	080215d8 	.word	0x080215d8

0801a1fc <rmw_take_response>:
 801a1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a200:	4604      	mov	r4, r0
 801a202:	6800      	ldr	r0, [r0, #0]
 801a204:	b088      	sub	sp, #32
 801a206:	4688      	mov	r8, r1
 801a208:	4617      	mov	r7, r2
 801a20a:	461d      	mov	r5, r3
 801a20c:	b120      	cbz	r0, 801a218 <rmw_take_response+0x1c>
 801a20e:	4b1e      	ldr	r3, [pc, #120]	@ (801a288 <rmw_take_response+0x8c>)
 801a210:	6819      	ldr	r1, [r3, #0]
 801a212:	f7e6 f805 	bl	8000220 <strcmp>
 801a216:	bb78      	cbnz	r0, 801a278 <rmw_take_response+0x7c>
 801a218:	b10d      	cbz	r5, 801a21e <rmw_take_response+0x22>
 801a21a:	2300      	movs	r3, #0
 801a21c:	702b      	strb	r3, [r5, #0]
 801a21e:	6864      	ldr	r4, [r4, #4]
 801a220:	f7f6 fa1a 	bl	8010658 <rmw_uxrce_clean_expired_static_input_buffer>
 801a224:	4620      	mov	r0, r4
 801a226:	f7f6 f9ef 	bl	8010608 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a22a:	4606      	mov	r6, r0
 801a22c:	b340      	cbz	r0, 801a280 <rmw_take_response+0x84>
 801a22e:	6963      	ldr	r3, [r4, #20]
 801a230:	6884      	ldr	r4, [r0, #8]
 801a232:	68db      	ldr	r3, [r3, #12]
 801a234:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 801a238:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801a23c:	e9c8 0108 	strd	r0, r1, [r8, #32]
 801a240:	4798      	blx	r3
 801a242:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801a246:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 801a24a:	f104 0110 	add.w	r1, r4, #16
 801a24e:	4668      	mov	r0, sp
 801a250:	f7f3 fe0a 	bl	800de68 <ucdr_init_buffer>
 801a254:	4639      	mov	r1, r7
 801a256:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801a25a:	4668      	mov	r0, sp
 801a25c:	4798      	blx	r3
 801a25e:	4631      	mov	r1, r6
 801a260:	4604      	mov	r4, r0
 801a262:	480a      	ldr	r0, [pc, #40]	@ (801a28c <rmw_take_response+0x90>)
 801a264:	f7ff fdd8 	bl	8019e18 <put_memory>
 801a268:	b105      	cbz	r5, 801a26c <rmw_take_response+0x70>
 801a26a:	702c      	strb	r4, [r5, #0]
 801a26c:	f084 0001 	eor.w	r0, r4, #1
 801a270:	b2c0      	uxtb	r0, r0
 801a272:	b008      	add	sp, #32
 801a274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a278:	200c      	movs	r0, #12
 801a27a:	b008      	add	sp, #32
 801a27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a280:	2001      	movs	r0, #1
 801a282:	b008      	add	sp, #32
 801a284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a288:	080215d8 	.word	0x080215d8
 801a28c:	2000c4d0 	.word	0x2000c4d0

0801a290 <rmw_take_with_info>:
 801a290:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a292:	4604      	mov	r4, r0
 801a294:	6800      	ldr	r0, [r0, #0]
 801a296:	b089      	sub	sp, #36	@ 0x24
 801a298:	460f      	mov	r7, r1
 801a29a:	4615      	mov	r5, r2
 801a29c:	b128      	cbz	r0, 801a2aa <rmw_take_with_info+0x1a>
 801a29e:	4b23      	ldr	r3, [pc, #140]	@ (801a32c <rmw_take_with_info+0x9c>)
 801a2a0:	6819      	ldr	r1, [r3, #0]
 801a2a2:	f7e5 ffbd 	bl	8000220 <strcmp>
 801a2a6:	2800      	cmp	r0, #0
 801a2a8:	d13d      	bne.n	801a326 <rmw_take_with_info+0x96>
 801a2aa:	6864      	ldr	r4, [r4, #4]
 801a2ac:	b1fd      	cbz	r5, 801a2ee <rmw_take_with_info+0x5e>
 801a2ae:	2300      	movs	r3, #0
 801a2b0:	702b      	strb	r3, [r5, #0]
 801a2b2:	f7f6 f9d1 	bl	8010658 <rmw_uxrce_clean_expired_static_input_buffer>
 801a2b6:	4620      	mov	r0, r4
 801a2b8:	f7f6 f9a6 	bl	8010608 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a2bc:	4606      	mov	r6, r0
 801a2be:	b1e8      	cbz	r0, 801a2fc <rmw_take_with_info+0x6c>
 801a2c0:	6881      	ldr	r1, [r0, #8]
 801a2c2:	4668      	mov	r0, sp
 801a2c4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801a2c8:	3110      	adds	r1, #16
 801a2ca:	f7f3 fdcd 	bl	800de68 <ucdr_init_buffer>
 801a2ce:	69a3      	ldr	r3, [r4, #24]
 801a2d0:	4639      	mov	r1, r7
 801a2d2:	68db      	ldr	r3, [r3, #12]
 801a2d4:	4668      	mov	r0, sp
 801a2d6:	4798      	blx	r3
 801a2d8:	4631      	mov	r1, r6
 801a2da:	4604      	mov	r4, r0
 801a2dc:	4814      	ldr	r0, [pc, #80]	@ (801a330 <rmw_take_with_info+0xa0>)
 801a2de:	f7ff fd9b 	bl	8019e18 <put_memory>
 801a2e2:	702c      	strb	r4, [r5, #0]
 801a2e4:	f084 0001 	eor.w	r0, r4, #1
 801a2e8:	b2c0      	uxtb	r0, r0
 801a2ea:	b009      	add	sp, #36	@ 0x24
 801a2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a2ee:	f7f6 f9b3 	bl	8010658 <rmw_uxrce_clean_expired_static_input_buffer>
 801a2f2:	4620      	mov	r0, r4
 801a2f4:	f7f6 f988 	bl	8010608 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a2f8:	4605      	mov	r5, r0
 801a2fa:	b910      	cbnz	r0, 801a302 <rmw_take_with_info+0x72>
 801a2fc:	2001      	movs	r0, #1
 801a2fe:	b009      	add	sp, #36	@ 0x24
 801a300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a302:	68a9      	ldr	r1, [r5, #8]
 801a304:	4668      	mov	r0, sp
 801a306:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801a30a:	3110      	adds	r1, #16
 801a30c:	f7f3 fdac 	bl	800de68 <ucdr_init_buffer>
 801a310:	69a3      	ldr	r3, [r4, #24]
 801a312:	4639      	mov	r1, r7
 801a314:	68db      	ldr	r3, [r3, #12]
 801a316:	4668      	mov	r0, sp
 801a318:	4798      	blx	r3
 801a31a:	4629      	mov	r1, r5
 801a31c:	4604      	mov	r4, r0
 801a31e:	4804      	ldr	r0, [pc, #16]	@ (801a330 <rmw_take_with_info+0xa0>)
 801a320:	f7ff fd7a 	bl	8019e18 <put_memory>
 801a324:	e7de      	b.n	801a2e4 <rmw_take_with_info+0x54>
 801a326:	200c      	movs	r0, #12
 801a328:	b009      	add	sp, #36	@ 0x24
 801a32a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a32c:	080215d8 	.word	0x080215d8
 801a330:	2000c4d0 	.word	0x2000c4d0

0801a334 <rmw_wait>:
 801a334:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a338:	b089      	sub	sp, #36	@ 0x24
 801a33a:	4607      	mov	r7, r0
 801a33c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801a33e:	460e      	mov	r6, r1
 801a340:	4698      	mov	r8, r3
 801a342:	4691      	mov	r9, r2
 801a344:	2a00      	cmp	r2, #0
 801a346:	f000 811e 	beq.w	801a586 <rmw_wait+0x252>
 801a34a:	2c00      	cmp	r4, #0
 801a34c:	f000 80ef 	beq.w	801a52e <rmw_wait+0x1fa>
 801a350:	4bb5      	ldr	r3, [pc, #724]	@ (801a628 <rmw_wait+0x2f4>)
 801a352:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a354:	ad04      	add	r5, sp, #16
 801a356:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801a35a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801a35e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801a362:	f7ff faa5 	bl	80198b0 <rmw_time_equal>
 801a366:	2800      	cmp	r0, #0
 801a368:	f000 811b 	beq.w	801a5a2 <rmw_wait+0x26e>
 801a36c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801a370:	f7f6 f972 	bl	8010658 <rmw_uxrce_clean_expired_static_input_buffer>
 801a374:	4bad      	ldr	r3, [pc, #692]	@ (801a62c <rmw_wait+0x2f8>)
 801a376:	681c      	ldr	r4, [r3, #0]
 801a378:	b14c      	cbz	r4, 801a38e <rmw_wait+0x5a>
 801a37a:	4623      	mov	r3, r4
 801a37c:	2100      	movs	r1, #0
 801a37e:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801a382:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a386:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801a38a:	2b00      	cmp	r3, #0
 801a38c:	d1f7      	bne.n	801a37e <rmw_wait+0x4a>
 801a38e:	f1b9 0f00 	cmp.w	r9, #0
 801a392:	d011      	beq.n	801a3b8 <rmw_wait+0x84>
 801a394:	f8d9 1000 	ldr.w	r1, [r9]
 801a398:	b171      	cbz	r1, 801a3b8 <rmw_wait+0x84>
 801a39a:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801a39e:	2300      	movs	r3, #0
 801a3a0:	2001      	movs	r0, #1
 801a3a2:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801a3a6:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801a3a8:	6912      	ldr	r2, [r2, #16]
 801a3aa:	3301      	adds	r3, #1
 801a3ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a3b0:	4299      	cmp	r1, r3
 801a3b2:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801a3b6:	d1f4      	bne.n	801a3a2 <rmw_wait+0x6e>
 801a3b8:	f1b8 0f00 	cmp.w	r8, #0
 801a3bc:	f000 8109 	beq.w	801a5d2 <rmw_wait+0x29e>
 801a3c0:	f8d8 1000 	ldr.w	r1, [r8]
 801a3c4:	2900      	cmp	r1, #0
 801a3c6:	f000 8116 	beq.w	801a5f6 <rmw_wait+0x2c2>
 801a3ca:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801a3ce:	2300      	movs	r3, #0
 801a3d0:	2001      	movs	r0, #1
 801a3d2:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801a3d6:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801a3d8:	6912      	ldr	r2, [r2, #16]
 801a3da:	3301      	adds	r3, #1
 801a3dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a3e0:	4299      	cmp	r1, r3
 801a3e2:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801a3e6:	d1f4      	bne.n	801a3d2 <rmw_wait+0x9e>
 801a3e8:	2f00      	cmp	r7, #0
 801a3ea:	f000 8114 	beq.w	801a616 <rmw_wait+0x2e2>
 801a3ee:	6839      	ldr	r1, [r7, #0]
 801a3f0:	b171      	cbz	r1, 801a410 <rmw_wait+0xdc>
 801a3f2:	f8d7 c004 	ldr.w	ip, [r7, #4]
 801a3f6:	2300      	movs	r3, #0
 801a3f8:	2001      	movs	r0, #1
 801a3fa:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801a3fe:	6a12      	ldr	r2, [r2, #32]
 801a400:	6912      	ldr	r2, [r2, #16]
 801a402:	3301      	adds	r3, #1
 801a404:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a408:	4299      	cmp	r1, r3
 801a40a:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801a40e:	d1f4      	bne.n	801a3fa <rmw_wait+0xc6>
 801a410:	b344      	cbz	r4, 801a464 <rmw_wait+0x130>
 801a412:	4622      	mov	r2, r4
 801a414:	2300      	movs	r3, #0
 801a416:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801a41a:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 801a41e:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801a422:	440b      	add	r3, r1
 801a424:	b2db      	uxtb	r3, r3
 801a426:	2a00      	cmp	r2, #0
 801a428:	d1f5      	bne.n	801a416 <rmw_wait+0xe2>
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	d075      	beq.n	801a51a <rmw_wait+0x1e6>
 801a42e:	1c6a      	adds	r2, r5, #1
 801a430:	d00d      	beq.n	801a44e <rmw_wait+0x11a>
 801a432:	ee07 5a90 	vmov	s15, r5
 801a436:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801a43a:	ee07 3a90 	vmov	s15, r3
 801a43e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801a446:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801a44a:	ee17 5a90 	vmov	r5, s15
 801a44e:	68a0      	ldr	r0, [r4, #8]
 801a450:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801a454:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801a458:	2b00      	cmp	r3, #0
 801a45a:	f040 808a 	bne.w	801a572 <rmw_wait+0x23e>
 801a45e:	6864      	ldr	r4, [r4, #4]
 801a460:	2c00      	cmp	r4, #0
 801a462:	d1f4      	bne.n	801a44e <rmw_wait+0x11a>
 801a464:	f1b9 0f00 	cmp.w	r9, #0
 801a468:	f000 80c3 	beq.w	801a5f2 <rmw_wait+0x2be>
 801a46c:	f8d9 5000 	ldr.w	r5, [r9]
 801a470:	b185      	cbz	r5, 801a494 <rmw_wait+0x160>
 801a472:	2400      	movs	r4, #0
 801a474:	4625      	mov	r5, r4
 801a476:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801a47a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a47e:	f7f6 f8c3 	bl	8010608 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a482:	2800      	cmp	r0, #0
 801a484:	d06d      	beq.n	801a562 <rmw_wait+0x22e>
 801a486:	f8d9 3000 	ldr.w	r3, [r9]
 801a48a:	3401      	adds	r4, #1
 801a48c:	42a3      	cmp	r3, r4
 801a48e:	f04f 0501 	mov.w	r5, #1
 801a492:	d8f0      	bhi.n	801a476 <rmw_wait+0x142>
 801a494:	f1b8 0f00 	cmp.w	r8, #0
 801a498:	d012      	beq.n	801a4c0 <rmw_wait+0x18c>
 801a49a:	f8d8 1000 	ldr.w	r1, [r8]
 801a49e:	2400      	movs	r4, #0
 801a4a0:	b171      	cbz	r1, 801a4c0 <rmw_wait+0x18c>
 801a4a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801a4a6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a4aa:	f7f6 f8ad 	bl	8010608 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a4ae:	2800      	cmp	r0, #0
 801a4b0:	d047      	beq.n	801a542 <rmw_wait+0x20e>
 801a4b2:	f8d8 3000 	ldr.w	r3, [r8]
 801a4b6:	3401      	adds	r4, #1
 801a4b8:	42a3      	cmp	r3, r4
 801a4ba:	f04f 0501 	mov.w	r5, #1
 801a4be:	d8f0      	bhi.n	801a4a2 <rmw_wait+0x16e>
 801a4c0:	b17f      	cbz	r7, 801a4e2 <rmw_wait+0x1ae>
 801a4c2:	683b      	ldr	r3, [r7, #0]
 801a4c4:	2400      	movs	r4, #0
 801a4c6:	b163      	cbz	r3, 801a4e2 <rmw_wait+0x1ae>
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a4ce:	f7f6 f89b 	bl	8010608 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a4d2:	2800      	cmp	r0, #0
 801a4d4:	d03d      	beq.n	801a552 <rmw_wait+0x21e>
 801a4d6:	683b      	ldr	r3, [r7, #0]
 801a4d8:	3401      	adds	r4, #1
 801a4da:	42a3      	cmp	r3, r4
 801a4dc:	f04f 0501 	mov.w	r5, #1
 801a4e0:	d8f2      	bhi.n	801a4c8 <rmw_wait+0x194>
 801a4e2:	b1a6      	cbz	r6, 801a50e <rmw_wait+0x1da>
 801a4e4:	6834      	ldr	r4, [r6, #0]
 801a4e6:	b194      	cbz	r4, 801a50e <rmw_wait+0x1da>
 801a4e8:	2300      	movs	r3, #0
 801a4ea:	461f      	mov	r7, r3
 801a4ec:	e004      	b.n	801a4f8 <rmw_wait+0x1c4>
 801a4ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801a4f2:	3301      	adds	r3, #1
 801a4f4:	429c      	cmp	r4, r3
 801a4f6:	d00a      	beq.n	801a50e <rmw_wait+0x1da>
 801a4f8:	6870      	ldr	r0, [r6, #4]
 801a4fa:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801a4fe:	7c0a      	ldrb	r2, [r1, #16]
 801a500:	2a00      	cmp	r2, #0
 801a502:	d0f4      	beq.n	801a4ee <rmw_wait+0x1ba>
 801a504:	3301      	adds	r3, #1
 801a506:	429c      	cmp	r4, r3
 801a508:	740f      	strb	r7, [r1, #16]
 801a50a:	4615      	mov	r5, r2
 801a50c:	d1f4      	bne.n	801a4f8 <rmw_wait+0x1c4>
 801a50e:	f085 0001 	eor.w	r0, r5, #1
 801a512:	0040      	lsls	r0, r0, #1
 801a514:	b009      	add	sp, #36	@ 0x24
 801a516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a51a:	68a0      	ldr	r0, [r4, #8]
 801a51c:	2100      	movs	r1, #0
 801a51e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a522:	f7f9 fa35 	bl	8013990 <uxr_run_session_timeout>
 801a526:	6864      	ldr	r4, [r4, #4]
 801a528:	2c00      	cmp	r4, #0
 801a52a:	d1f6      	bne.n	801a51a <rmw_wait+0x1e6>
 801a52c:	e79a      	b.n	801a464 <rmw_wait+0x130>
 801a52e:	f7f6 f893 	bl	8010658 <rmw_uxrce_clean_expired_static_input_buffer>
 801a532:	4b3e      	ldr	r3, [pc, #248]	@ (801a62c <rmw_wait+0x2f8>)
 801a534:	681c      	ldr	r4, [r3, #0]
 801a536:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801a53a:	2c00      	cmp	r4, #0
 801a53c:	f47f af1d 	bne.w	801a37a <rmw_wait+0x46>
 801a540:	e728      	b.n	801a394 <rmw_wait+0x60>
 801a542:	e9d8 3200 	ldrd	r3, r2, [r8]
 801a546:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801a54a:	3401      	adds	r4, #1
 801a54c:	429c      	cmp	r4, r3
 801a54e:	d3a8      	bcc.n	801a4a2 <rmw_wait+0x16e>
 801a550:	e7b6      	b.n	801a4c0 <rmw_wait+0x18c>
 801a552:	e9d7 3200 	ldrd	r3, r2, [r7]
 801a556:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801a55a:	3401      	adds	r4, #1
 801a55c:	42a3      	cmp	r3, r4
 801a55e:	d8b3      	bhi.n	801a4c8 <rmw_wait+0x194>
 801a560:	e7bf      	b.n	801a4e2 <rmw_wait+0x1ae>
 801a562:	e9d9 3200 	ldrd	r3, r2, [r9]
 801a566:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801a56a:	3401      	adds	r4, #1
 801a56c:	42a3      	cmp	r3, r4
 801a56e:	d882      	bhi.n	801a476 <rmw_wait+0x142>
 801a570:	e790      	b.n	801a494 <rmw_wait+0x160>
 801a572:	4629      	mov	r1, r5
 801a574:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a578:	f7f9 fa24 	bl	80139c4 <uxr_run_session_until_data>
 801a57c:	6864      	ldr	r4, [r4, #4]
 801a57e:	2c00      	cmp	r4, #0
 801a580:	f47f af65 	bne.w	801a44e <rmw_wait+0x11a>
 801a584:	e76e      	b.n	801a464 <rmw_wait+0x130>
 801a586:	b1f3      	cbz	r3, 801a5c6 <rmw_wait+0x292>
 801a588:	2c00      	cmp	r4, #0
 801a58a:	f47f aee1 	bne.w	801a350 <rmw_wait+0x1c>
 801a58e:	f7f6 f863 	bl	8010658 <rmw_uxrce_clean_expired_static_input_buffer>
 801a592:	4b26      	ldr	r3, [pc, #152]	@ (801a62c <rmw_wait+0x2f8>)
 801a594:	681c      	ldr	r4, [r3, #0]
 801a596:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801a59a:	2c00      	cmp	r4, #0
 801a59c:	f47f aeed 	bne.w	801a37a <rmw_wait+0x46>
 801a5a0:	e70a      	b.n	801a3b8 <rmw_wait+0x84>
 801a5a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801a5a6:	f7ff f9d7 	bl	8019958 <rmw_time_total_nsec>
 801a5aa:	4a21      	ldr	r2, [pc, #132]	@ (801a630 <rmw_wait+0x2fc>)
 801a5ac:	2300      	movs	r3, #0
 801a5ae:	f7e6 fbab 	bl	8000d08 <__aeabi_uldivmod>
 801a5b2:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801a5b6:	f171 0100 	sbcs.w	r1, r1, #0
 801a5ba:	4605      	mov	r5, r0
 801a5bc:	f6ff aed8 	blt.w	801a370 <rmw_wait+0x3c>
 801a5c0:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 801a5c4:	e6d4      	b.n	801a370 <rmw_wait+0x3c>
 801a5c6:	2800      	cmp	r0, #0
 801a5c8:	d1de      	bne.n	801a588 <rmw_wait+0x254>
 801a5ca:	2900      	cmp	r1, #0
 801a5cc:	d1dc      	bne.n	801a588 <rmw_wait+0x254>
 801a5ce:	4608      	mov	r0, r1
 801a5d0:	e7a0      	b.n	801a514 <rmw_wait+0x1e0>
 801a5d2:	2f00      	cmp	r7, #0
 801a5d4:	f47f af0b 	bne.w	801a3ee <rmw_wait+0xba>
 801a5d8:	2c00      	cmp	r4, #0
 801a5da:	f47f af1a 	bne.w	801a412 <rmw_wait+0xde>
 801a5de:	f1b9 0f00 	cmp.w	r9, #0
 801a5e2:	d027      	beq.n	801a634 <rmw_wait+0x300>
 801a5e4:	f8d9 3000 	ldr.w	r3, [r9]
 801a5e8:	4625      	mov	r5, r4
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	f47f af41 	bne.w	801a472 <rmw_wait+0x13e>
 801a5f0:	e777      	b.n	801a4e2 <rmw_wait+0x1ae>
 801a5f2:	464d      	mov	r5, r9
 801a5f4:	e74e      	b.n	801a494 <rmw_wait+0x160>
 801a5f6:	2f00      	cmp	r7, #0
 801a5f8:	f47f aef9 	bne.w	801a3ee <rmw_wait+0xba>
 801a5fc:	2c00      	cmp	r4, #0
 801a5fe:	f47f af08 	bne.w	801a412 <rmw_wait+0xde>
 801a602:	f1b9 0f00 	cmp.w	r9, #0
 801a606:	d015      	beq.n	801a634 <rmw_wait+0x300>
 801a608:	f8d9 3000 	ldr.w	r3, [r9]
 801a60c:	2b00      	cmp	r3, #0
 801a60e:	f47f af30 	bne.w	801a472 <rmw_wait+0x13e>
 801a612:	2500      	movs	r5, #0
 801a614:	e743      	b.n	801a49e <rmw_wait+0x16a>
 801a616:	2c00      	cmp	r4, #0
 801a618:	f47f aefb 	bne.w	801a412 <rmw_wait+0xde>
 801a61c:	f1b9 0f00 	cmp.w	r9, #0
 801a620:	f47f af24 	bne.w	801a46c <rmw_wait+0x138>
 801a624:	e7f5      	b.n	801a612 <rmw_wait+0x2de>
 801a626:	bf00      	nop
 801a628:	0801f9d8 	.word	0x0801f9d8
 801a62c:	2000ed00 	.word	0x2000ed00
 801a630:	000f4240 	.word	0x000f4240
 801a634:	464d      	mov	r5, r9
 801a636:	e754      	b.n	801a4e2 <rmw_wait+0x1ae>

0801a638 <rmw_create_wait_set>:
 801a638:	b508      	push	{r3, lr}
 801a63a:	4803      	ldr	r0, [pc, #12]	@ (801a648 <rmw_create_wait_set+0x10>)
 801a63c:	f7ff fbdc 	bl	8019df8 <get_memory>
 801a640:	b108      	cbz	r0, 801a646 <rmw_create_wait_set+0xe>
 801a642:	6880      	ldr	r0, [r0, #8]
 801a644:	3010      	adds	r0, #16
 801a646:	bd08      	pop	{r3, pc}
 801a648:	2000a328 	.word	0x2000a328

0801a64c <rmw_destroy_wait_set>:
 801a64c:	b508      	push	{r3, lr}
 801a64e:	4b08      	ldr	r3, [pc, #32]	@ (801a670 <rmw_destroy_wait_set+0x24>)
 801a650:	6819      	ldr	r1, [r3, #0]
 801a652:	b911      	cbnz	r1, 801a65a <rmw_destroy_wait_set+0xe>
 801a654:	e00a      	b.n	801a66c <rmw_destroy_wait_set+0x20>
 801a656:	6849      	ldr	r1, [r1, #4]
 801a658:	b141      	cbz	r1, 801a66c <rmw_destroy_wait_set+0x20>
 801a65a:	688b      	ldr	r3, [r1, #8]
 801a65c:	3310      	adds	r3, #16
 801a65e:	4298      	cmp	r0, r3
 801a660:	d1f9      	bne.n	801a656 <rmw_destroy_wait_set+0xa>
 801a662:	4803      	ldr	r0, [pc, #12]	@ (801a670 <rmw_destroy_wait_set+0x24>)
 801a664:	f7ff fbd8 	bl	8019e18 <put_memory>
 801a668:	2000      	movs	r0, #0
 801a66a:	bd08      	pop	{r3, pc}
 801a66c:	2001      	movs	r0, #1
 801a66e:	bd08      	pop	{r3, pc}
 801a670:	2000a328 	.word	0x2000a328

0801a674 <sensor_msgs__msg__Imu__get_type_hash>:
 801a674:	4800      	ldr	r0, [pc, #0]	@ (801a678 <sensor_msgs__msg__Imu__get_type_hash+0x4>)
 801a676:	4770      	bx	lr
 801a678:	200019ac 	.word	0x200019ac

0801a67c <sensor_msgs__msg__Imu__get_type_description>:
 801a67c:	b570      	push	{r4, r5, r6, lr}
 801a67e:	4e15      	ldr	r6, [pc, #84]	@ (801a6d4 <sensor_msgs__msg__Imu__get_type_description+0x58>)
 801a680:	7835      	ldrb	r5, [r6, #0]
 801a682:	b10d      	cbz	r5, 801a688 <sensor_msgs__msg__Imu__get_type_description+0xc>
 801a684:	4814      	ldr	r0, [pc, #80]	@ (801a6d8 <sensor_msgs__msg__Imu__get_type_description+0x5c>)
 801a686:	bd70      	pop	{r4, r5, r6, pc}
 801a688:	4628      	mov	r0, r5
 801a68a:	f000 fd79 	bl	801b180 <builtin_interfaces__msg__Time__get_type_description>
 801a68e:	300c      	adds	r0, #12
 801a690:	c807      	ldmia	r0, {r0, r1, r2}
 801a692:	4c12      	ldr	r4, [pc, #72]	@ (801a6dc <sensor_msgs__msg__Imu__get_type_description+0x60>)
 801a694:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801a698:	4628      	mov	r0, r5
 801a69a:	f000 fdb1 	bl	801b200 <geometry_msgs__msg__Quaternion__get_type_description>
 801a69e:	300c      	adds	r0, #12
 801a6a0:	c807      	ldmia	r0, {r0, r1, r2}
 801a6a2:	f104 0318 	add.w	r3, r4, #24
 801a6a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801a6aa:	4628      	mov	r0, r5
 801a6ac:	f7f7 f978 	bl	80119a0 <geometry_msgs__msg__Vector3__get_type_description>
 801a6b0:	300c      	adds	r0, #12
 801a6b2:	c807      	ldmia	r0, {r0, r1, r2}
 801a6b4:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801a6b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801a6bc:	4628      	mov	r0, r5
 801a6be:	f000 f965 	bl	801a98c <std_msgs__msg__Header__get_type_description>
 801a6c2:	300c      	adds	r0, #12
 801a6c4:	c807      	ldmia	r0, {r0, r1, r2}
 801a6c6:	3448      	adds	r4, #72	@ 0x48
 801a6c8:	2301      	movs	r3, #1
 801a6ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801a6ce:	7033      	strb	r3, [r6, #0]
 801a6d0:	4801      	ldr	r0, [pc, #4]	@ (801a6d8 <sensor_msgs__msg__Imu__get_type_description+0x5c>)
 801a6d2:	bd70      	pop	{r4, r5, r6, pc}
 801a6d4:	2000f321 	.word	0x2000f321
 801a6d8:	0802160c 	.word	0x0802160c
 801a6dc:	20001e9c 	.word	0x20001e9c

0801a6e0 <sensor_msgs__msg__Imu__get_individual_type_description_source>:
 801a6e0:	4800      	ldr	r0, [pc, #0]	@ (801a6e4 <sensor_msgs__msg__Imu__get_individual_type_description_source+0x4>)
 801a6e2:	4770      	bx	lr
 801a6e4:	080215e8 	.word	0x080215e8

0801a6e8 <sensor_msgs__msg__Imu__get_type_description_sources>:
 801a6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6ea:	4d26      	ldr	r5, [pc, #152]	@ (801a784 <sensor_msgs__msg__Imu__get_type_description_sources+0x9c>)
 801a6ec:	782f      	ldrb	r7, [r5, #0]
 801a6ee:	b10f      	cbz	r7, 801a6f4 <sensor_msgs__msg__Imu__get_type_description_sources+0xc>
 801a6f0:	4825      	ldr	r0, [pc, #148]	@ (801a788 <sensor_msgs__msg__Imu__get_type_description_sources+0xa0>)
 801a6f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a6f4:	4e25      	ldr	r6, [pc, #148]	@ (801a78c <sensor_msgs__msg__Imu__get_type_description_sources+0xa4>)
 801a6f6:	4c26      	ldr	r4, [pc, #152]	@ (801a790 <sensor_msgs__msg__Imu__get_type_description_sources+0xa8>)
 801a6f8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801a6fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a6fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801a6fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a700:	6833      	ldr	r3, [r6, #0]
 801a702:	4626      	mov	r6, r4
 801a704:	4638      	mov	r0, r7
 801a706:	f846 3b04 	str.w	r3, [r6], #4
 801a70a:	f000 fd45 	bl	801b198 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801a70e:	4684      	mov	ip, r0
 801a710:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a714:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801a716:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a71a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801a71c:	4638      	mov	r0, r7
 801a71e:	f8dc 3000 	ldr.w	r3, [ip]
 801a722:	6033      	str	r3, [r6, #0]
 801a724:	f000 fd78 	bl	801b218 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 801a728:	4684      	mov	ip, r0
 801a72a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a72e:	f104 0628 	add.w	r6, r4, #40	@ 0x28
 801a732:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801a734:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a738:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801a73a:	4638      	mov	r0, r7
 801a73c:	f8dc 3000 	ldr.w	r3, [ip]
 801a740:	6033      	str	r3, [r6, #0]
 801a742:	f7f7 f939 	bl	80119b8 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 801a746:	4684      	mov	ip, r0
 801a748:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a74c:	f104 064c 	add.w	r6, r4, #76	@ 0x4c
 801a750:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801a752:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a756:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801a758:	4638      	mov	r0, r7
 801a75a:	f8dc 3000 	ldr.w	r3, [ip]
 801a75e:	6033      	str	r3, [r6, #0]
 801a760:	f000 f92c 	bl	801a9bc <std_msgs__msg__Header__get_individual_type_description_source>
 801a764:	2301      	movs	r3, #1
 801a766:	4684      	mov	ip, r0
 801a768:	702b      	strb	r3, [r5, #0]
 801a76a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a76e:	3470      	adds	r4, #112	@ 0x70
 801a770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a772:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a778:	f8dc 3000 	ldr.w	r3, [ip]
 801a77c:	4802      	ldr	r0, [pc, #8]	@ (801a788 <sensor_msgs__msg__Imu__get_type_description_sources+0xa0>)
 801a77e:	6023      	str	r3, [r4, #0]
 801a780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a782:	bf00      	nop
 801a784:	2000f320 	.word	0x2000f320
 801a788:	080215dc 	.word	0x080215dc
 801a78c:	080215e8 	.word	0x080215e8
 801a790:	2000f26c 	.word	0x2000f26c

0801a794 <sensor_msgs__msg__Imu__init>:
 801a794:	b3d8      	cbz	r0, 801a80e <sensor_msgs__msg__Imu__init+0x7a>
 801a796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a798:	4604      	mov	r4, r0
 801a79a:	f000 f93b 	bl	801aa14 <std_msgs__msg__Header__init>
 801a79e:	b190      	cbz	r0, 801a7c6 <sensor_msgs__msg__Imu__init+0x32>
 801a7a0:	f104 0518 	add.w	r5, r4, #24
 801a7a4:	4628      	mov	r0, r5
 801a7a6:	f000 fd57 	bl	801b258 <geometry_msgs__msg__Quaternion__init>
 801a7aa:	b358      	cbz	r0, 801a804 <sensor_msgs__msg__Imu__init+0x70>
 801a7ac:	f104 0680 	add.w	r6, r4, #128	@ 0x80
 801a7b0:	4630      	mov	r0, r6
 801a7b2:	f7f7 f921 	bl	80119f8 <geometry_msgs__msg__Vector3__init>
 801a7b6:	b1b8      	cbz	r0, 801a7e8 <sensor_msgs__msg__Imu__init+0x54>
 801a7b8:	f104 07e0 	add.w	r7, r4, #224	@ 0xe0
 801a7bc:	4638      	mov	r0, r7
 801a7be:	f7f7 f91b 	bl	80119f8 <geometry_msgs__msg__Vector3__init>
 801a7c2:	b330      	cbz	r0, 801a812 <sensor_msgs__msg__Imu__init+0x7e>
 801a7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7c6:	4620      	mov	r0, r4
 801a7c8:	f000 f944 	bl	801aa54 <std_msgs__msg__Header__fini>
 801a7cc:	f104 0018 	add.w	r0, r4, #24
 801a7d0:	f000 fd56 	bl	801b280 <geometry_msgs__msg__Quaternion__fini>
 801a7d4:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801a7d8:	f7f7 f912 	bl	8011a00 <geometry_msgs__msg__Vector3__fini>
 801a7dc:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 801a7e0:	f7f7 f90e 	bl	8011a00 <geometry_msgs__msg__Vector3__fini>
 801a7e4:	2000      	movs	r0, #0
 801a7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7e8:	4620      	mov	r0, r4
 801a7ea:	f000 f933 	bl	801aa54 <std_msgs__msg__Header__fini>
 801a7ee:	4628      	mov	r0, r5
 801a7f0:	f000 fd46 	bl	801b280 <geometry_msgs__msg__Quaternion__fini>
 801a7f4:	4630      	mov	r0, r6
 801a7f6:	f7f7 f903 	bl	8011a00 <geometry_msgs__msg__Vector3__fini>
 801a7fa:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 801a7fe:	f7f7 f8ff 	bl	8011a00 <geometry_msgs__msg__Vector3__fini>
 801a802:	e7ef      	b.n	801a7e4 <sensor_msgs__msg__Imu__init+0x50>
 801a804:	4620      	mov	r0, r4
 801a806:	f000 f925 	bl	801aa54 <std_msgs__msg__Header__fini>
 801a80a:	4628      	mov	r0, r5
 801a80c:	e7e0      	b.n	801a7d0 <sensor_msgs__msg__Imu__init+0x3c>
 801a80e:	2000      	movs	r0, #0
 801a810:	4770      	bx	lr
 801a812:	4620      	mov	r0, r4
 801a814:	f000 f91e 	bl	801aa54 <std_msgs__msg__Header__fini>
 801a818:	4628      	mov	r0, r5
 801a81a:	f000 fd31 	bl	801b280 <geometry_msgs__msg__Quaternion__fini>
 801a81e:	4630      	mov	r0, r6
 801a820:	f7f7 f8ee 	bl	8011a00 <geometry_msgs__msg__Vector3__fini>
 801a824:	4638      	mov	r0, r7
 801a826:	f7f7 f8eb 	bl	8011a00 <geometry_msgs__msg__Vector3__fini>
 801a82a:	e7db      	b.n	801a7e4 <sensor_msgs__msg__Imu__init+0x50>

0801a82c <sensor_msgs__msg__Imu__fini>:
 801a82c:	b188      	cbz	r0, 801a852 <sensor_msgs__msg__Imu__fini+0x26>
 801a82e:	b510      	push	{r4, lr}
 801a830:	4604      	mov	r4, r0
 801a832:	f000 f90f 	bl	801aa54 <std_msgs__msg__Header__fini>
 801a836:	f104 0018 	add.w	r0, r4, #24
 801a83a:	f000 fd21 	bl	801b280 <geometry_msgs__msg__Quaternion__fini>
 801a83e:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801a842:	f7f7 f8dd 	bl	8011a00 <geometry_msgs__msg__Vector3__fini>
 801a846:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 801a84a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a84e:	f7f7 b8d7 	b.w	8011a00 <geometry_msgs__msg__Vector3__fini>
 801a852:	4770      	bx	lr

0801a854 <sensor_msgs__msg__Imu__copy>:
 801a854:	b570      	push	{r4, r5, r6, lr}
 801a856:	b128      	cbz	r0, 801a864 <sensor_msgs__msg__Imu__copy+0x10>
 801a858:	460d      	mov	r5, r1
 801a85a:	b119      	cbz	r1, 801a864 <sensor_msgs__msg__Imu__copy+0x10>
 801a85c:	4604      	mov	r4, r0
 801a85e:	f000 f905 	bl	801aa6c <std_msgs__msg__Header__copy>
 801a862:	b910      	cbnz	r0, 801a86a <sensor_msgs__msg__Imu__copy+0x16>
 801a864:	2600      	movs	r6, #0
 801a866:	4630      	mov	r0, r6
 801a868:	bd70      	pop	{r4, r5, r6, pc}
 801a86a:	f105 0118 	add.w	r1, r5, #24
 801a86e:	f104 0018 	add.w	r0, r4, #24
 801a872:	f000 fd07 	bl	801b284 <geometry_msgs__msg__Quaternion__copy>
 801a876:	2800      	cmp	r0, #0
 801a878:	d0f4      	beq.n	801a864 <sensor_msgs__msg__Imu__copy+0x10>
 801a87a:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 801a87e:	2248      	movs	r2, #72	@ 0x48
 801a880:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 801a884:	f002 ffb6 	bl	801d7f4 <memmove>
 801a888:	f105 0180 	add.w	r1, r5, #128	@ 0x80
 801a88c:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801a890:	f7f7 f8b8 	bl	8011a04 <geometry_msgs__msg__Vector3__copy>
 801a894:	2800      	cmp	r0, #0
 801a896:	d0e5      	beq.n	801a864 <sensor_msgs__msg__Imu__copy+0x10>
 801a898:	2248      	movs	r2, #72	@ 0x48
 801a89a:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 801a89e:	f105 0098 	add.w	r0, r5, #152	@ 0x98
 801a8a2:	f002 ffa7 	bl	801d7f4 <memmove>
 801a8a6:	f105 01e0 	add.w	r1, r5, #224	@ 0xe0
 801a8aa:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 801a8ae:	f7f7 f8a9 	bl	8011a04 <geometry_msgs__msg__Vector3__copy>
 801a8b2:	4606      	mov	r6, r0
 801a8b4:	2800      	cmp	r0, #0
 801a8b6:	d0d5      	beq.n	801a864 <sensor_msgs__msg__Imu__copy+0x10>
 801a8b8:	2248      	movs	r2, #72	@ 0x48
 801a8ba:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 801a8be:	f105 00f8 	add.w	r0, r5, #248	@ 0xf8
 801a8c2:	f002 ff97 	bl	801d7f4 <memmove>
 801a8c6:	e7ce      	b.n	801a866 <sensor_msgs__msg__Imu__copy+0x12>

0801a8c8 <service_msgs__msg__ServiceEventInfo__get_type_hash>:
 801a8c8:	4800      	ldr	r0, [pc, #0]	@ (801a8cc <service_msgs__msg__ServiceEventInfo__get_type_hash+0x4>)
 801a8ca:	4770      	bx	lr
 801a8cc:	200021f8 	.word	0x200021f8

0801a8d0 <service_msgs__msg__ServiceEventInfo__get_type_description>:
 801a8d0:	b510      	push	{r4, lr}
 801a8d2:	4c08      	ldr	r4, [pc, #32]	@ (801a8f4 <service_msgs__msg__ServiceEventInfo__get_type_description+0x24>)
 801a8d4:	7820      	ldrb	r0, [r4, #0]
 801a8d6:	b108      	cbz	r0, 801a8dc <service_msgs__msg__ServiceEventInfo__get_type_description+0xc>
 801a8d8:	4807      	ldr	r0, [pc, #28]	@ (801a8f8 <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 801a8da:	bd10      	pop	{r4, pc}
 801a8dc:	f000 fc50 	bl	801b180 <builtin_interfaces__msg__Time__get_type_description>
 801a8e0:	300c      	adds	r0, #12
 801a8e2:	c807      	ldmia	r0, {r0, r1, r2}
 801a8e4:	4b05      	ldr	r3, [pc, #20]	@ (801a8fc <service_msgs__msg__ServiceEventInfo__get_type_description+0x2c>)
 801a8e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801a8ea:	2301      	movs	r3, #1
 801a8ec:	4802      	ldr	r0, [pc, #8]	@ (801a8f8 <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 801a8ee:	7023      	strb	r3, [r4, #0]
 801a8f0:	bd10      	pop	{r4, pc}
 801a8f2:	bf00      	nop
 801a8f4:	2000f36d 	.word	0x2000f36d
 801a8f8:	08021660 	.word	0x08021660
 801a8fc:	200024e0 	.word	0x200024e0

0801a900 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>:
 801a900:	4800      	ldr	r0, [pc, #0]	@ (801a904 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source+0x4>)
 801a902:	4770      	bx	lr
 801a904:	0802163c 	.word	0x0802163c

0801a908 <service_msgs__msg__ServiceEventInfo__get_type_description_sources>:
 801a908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a90a:	4e0f      	ldr	r6, [pc, #60]	@ (801a948 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x40>)
 801a90c:	7837      	ldrb	r7, [r6, #0]
 801a90e:	b10f      	cbz	r7, 801a914 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0xc>
 801a910:	480e      	ldr	r0, [pc, #56]	@ (801a94c <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 801a912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a914:	4d0e      	ldr	r5, [pc, #56]	@ (801a950 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x48>)
 801a916:	4c0f      	ldr	r4, [pc, #60]	@ (801a954 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x4c>)
 801a918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a91a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a91c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a91e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a920:	682b      	ldr	r3, [r5, #0]
 801a922:	f844 3b04 	str.w	r3, [r4], #4
 801a926:	4638      	mov	r0, r7
 801a928:	f000 fc36 	bl	801b198 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801a92c:	2301      	movs	r3, #1
 801a92e:	4684      	mov	ip, r0
 801a930:	7033      	strb	r3, [r6, #0]
 801a932:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a938:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a93c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a93e:	f8dc 3000 	ldr.w	r3, [ip]
 801a942:	4802      	ldr	r0, [pc, #8]	@ (801a94c <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 801a944:	6023      	str	r3, [r4, #0]
 801a946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a948:	2000f36c 	.word	0x2000f36c
 801a94c:	08021630 	.word	0x08021630
 801a950:	0802163c 	.word	0x0802163c
 801a954:	2000f324 	.word	0x2000f324

0801a958 <service_msgs__msg__ServiceEventInfo__init>:
 801a958:	b158      	cbz	r0, 801a972 <service_msgs__msg__ServiceEventInfo__init+0x1a>
 801a95a:	b510      	push	{r4, lr}
 801a95c:	1d04      	adds	r4, r0, #4
 801a95e:	4620      	mov	r0, r4
 801a960:	f000 fc3a 	bl	801b1d8 <builtin_interfaces__msg__Time__init>
 801a964:	b100      	cbz	r0, 801a968 <service_msgs__msg__ServiceEventInfo__init+0x10>
 801a966:	bd10      	pop	{r4, pc}
 801a968:	4620      	mov	r0, r4
 801a96a:	f000 fc39 	bl	801b1e0 <builtin_interfaces__msg__Time__fini>
 801a96e:	2000      	movs	r0, #0
 801a970:	bd10      	pop	{r4, pc}
 801a972:	2000      	movs	r0, #0
 801a974:	4770      	bx	lr
 801a976:	bf00      	nop

0801a978 <service_msgs__msg__ServiceEventInfo__fini>:
 801a978:	b110      	cbz	r0, 801a980 <service_msgs__msg__ServiceEventInfo__fini+0x8>
 801a97a:	3004      	adds	r0, #4
 801a97c:	f000 bc30 	b.w	801b1e0 <builtin_interfaces__msg__Time__fini>
 801a980:	4770      	bx	lr
 801a982:	bf00      	nop

0801a984 <std_msgs__msg__Header__get_type_hash>:
 801a984:	4800      	ldr	r0, [pc, #0]	@ (801a988 <std_msgs__msg__Header__get_type_hash+0x4>)
 801a986:	4770      	bx	lr
 801a988:	20002680 	.word	0x20002680

0801a98c <std_msgs__msg__Header__get_type_description>:
 801a98c:	b510      	push	{r4, lr}
 801a98e:	4c08      	ldr	r4, [pc, #32]	@ (801a9b0 <std_msgs__msg__Header__get_type_description+0x24>)
 801a990:	7820      	ldrb	r0, [r4, #0]
 801a992:	b108      	cbz	r0, 801a998 <std_msgs__msg__Header__get_type_description+0xc>
 801a994:	4807      	ldr	r0, [pc, #28]	@ (801a9b4 <std_msgs__msg__Header__get_type_description+0x28>)
 801a996:	bd10      	pop	{r4, pc}
 801a998:	f000 fbf2 	bl	801b180 <builtin_interfaces__msg__Time__get_type_description>
 801a99c:	300c      	adds	r0, #12
 801a99e:	c807      	ldmia	r0, {r0, r1, r2}
 801a9a0:	4b05      	ldr	r3, [pc, #20]	@ (801a9b8 <std_msgs__msg__Header__get_type_description+0x2c>)
 801a9a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801a9a6:	2301      	movs	r3, #1
 801a9a8:	4802      	ldr	r0, [pc, #8]	@ (801a9b4 <std_msgs__msg__Header__get_type_description+0x28>)
 801a9aa:	7023      	strb	r3, [r4, #0]
 801a9ac:	bd10      	pop	{r4, pc}
 801a9ae:	bf00      	nop
 801a9b0:	2000f3b9 	.word	0x2000f3b9
 801a9b4:	080216b4 	.word	0x080216b4
 801a9b8:	200027f8 	.word	0x200027f8

0801a9bc <std_msgs__msg__Header__get_individual_type_description_source>:
 801a9bc:	4800      	ldr	r0, [pc, #0]	@ (801a9c0 <std_msgs__msg__Header__get_individual_type_description_source+0x4>)
 801a9be:	4770      	bx	lr
 801a9c0:	08021690 	.word	0x08021690

0801a9c4 <std_msgs__msg__Header__get_type_description_sources>:
 801a9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9c6:	4e0f      	ldr	r6, [pc, #60]	@ (801aa04 <std_msgs__msg__Header__get_type_description_sources+0x40>)
 801a9c8:	7837      	ldrb	r7, [r6, #0]
 801a9ca:	b10f      	cbz	r7, 801a9d0 <std_msgs__msg__Header__get_type_description_sources+0xc>
 801a9cc:	480e      	ldr	r0, [pc, #56]	@ (801aa08 <std_msgs__msg__Header__get_type_description_sources+0x44>)
 801a9ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a9d0:	4d0e      	ldr	r5, [pc, #56]	@ (801aa0c <std_msgs__msg__Header__get_type_description_sources+0x48>)
 801a9d2:	4c0f      	ldr	r4, [pc, #60]	@ (801aa10 <std_msgs__msg__Header__get_type_description_sources+0x4c>)
 801a9d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a9d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a9d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a9da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a9dc:	682b      	ldr	r3, [r5, #0]
 801a9de:	f844 3b04 	str.w	r3, [r4], #4
 801a9e2:	4638      	mov	r0, r7
 801a9e4:	f000 fbd8 	bl	801b198 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801a9e8:	2301      	movs	r3, #1
 801a9ea:	4684      	mov	ip, r0
 801a9ec:	7033      	strb	r3, [r6, #0]
 801a9ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a9f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a9f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a9f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a9fa:	f8dc 3000 	ldr.w	r3, [ip]
 801a9fe:	4802      	ldr	r0, [pc, #8]	@ (801aa08 <std_msgs__msg__Header__get_type_description_sources+0x44>)
 801aa00:	6023      	str	r3, [r4, #0]
 801aa02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa04:	2000f3b8 	.word	0x2000f3b8
 801aa08:	08021684 	.word	0x08021684
 801aa0c:	08021690 	.word	0x08021690
 801aa10:	2000f370 	.word	0x2000f370

0801aa14 <std_msgs__msg__Header__init>:
 801aa14:	b1d8      	cbz	r0, 801aa4e <std_msgs__msg__Header__init+0x3a>
 801aa16:	b538      	push	{r3, r4, r5, lr}
 801aa18:	4604      	mov	r4, r0
 801aa1a:	f000 fbdd 	bl	801b1d8 <builtin_interfaces__msg__Time__init>
 801aa1e:	b130      	cbz	r0, 801aa2e <std_msgs__msg__Header__init+0x1a>
 801aa20:	f104 0508 	add.w	r5, r4, #8
 801aa24:	4628      	mov	r0, r5
 801aa26:	f7f5 ffdb 	bl	80109e0 <rosidl_runtime_c__String__init>
 801aa2a:	b148      	cbz	r0, 801aa40 <std_msgs__msg__Header__init+0x2c>
 801aa2c:	bd38      	pop	{r3, r4, r5, pc}
 801aa2e:	4620      	mov	r0, r4
 801aa30:	f000 fbd6 	bl	801b1e0 <builtin_interfaces__msg__Time__fini>
 801aa34:	f104 0008 	add.w	r0, r4, #8
 801aa38:	f7f5 ffec 	bl	8010a14 <rosidl_runtime_c__String__fini>
 801aa3c:	2000      	movs	r0, #0
 801aa3e:	bd38      	pop	{r3, r4, r5, pc}
 801aa40:	4620      	mov	r0, r4
 801aa42:	f000 fbcd 	bl	801b1e0 <builtin_interfaces__msg__Time__fini>
 801aa46:	4628      	mov	r0, r5
 801aa48:	f7f5 ffe4 	bl	8010a14 <rosidl_runtime_c__String__fini>
 801aa4c:	e7f6      	b.n	801aa3c <std_msgs__msg__Header__init+0x28>
 801aa4e:	2000      	movs	r0, #0
 801aa50:	4770      	bx	lr
 801aa52:	bf00      	nop

0801aa54 <std_msgs__msg__Header__fini>:
 801aa54:	b148      	cbz	r0, 801aa6a <std_msgs__msg__Header__fini+0x16>
 801aa56:	b510      	push	{r4, lr}
 801aa58:	4604      	mov	r4, r0
 801aa5a:	f000 fbc1 	bl	801b1e0 <builtin_interfaces__msg__Time__fini>
 801aa5e:	f104 0008 	add.w	r0, r4, #8
 801aa62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aa66:	f7f5 bfd5 	b.w	8010a14 <rosidl_runtime_c__String__fini>
 801aa6a:	4770      	bx	lr

0801aa6c <std_msgs__msg__Header__copy>:
 801aa6c:	b180      	cbz	r0, 801aa90 <std_msgs__msg__Header__copy+0x24>
 801aa6e:	b538      	push	{r3, r4, r5, lr}
 801aa70:	460d      	mov	r5, r1
 801aa72:	b119      	cbz	r1, 801aa7c <std_msgs__msg__Header__copy+0x10>
 801aa74:	4604      	mov	r4, r0
 801aa76:	f000 fbb5 	bl	801b1e4 <builtin_interfaces__msg__Time__copy>
 801aa7a:	b908      	cbnz	r0, 801aa80 <std_msgs__msg__Header__copy+0x14>
 801aa7c:	2000      	movs	r0, #0
 801aa7e:	bd38      	pop	{r3, r4, r5, pc}
 801aa80:	f105 0108 	add.w	r1, r5, #8
 801aa84:	f104 0008 	add.w	r0, r4, #8
 801aa88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801aa8c:	f7f6 b838 	b.w	8010b00 <rosidl_runtime_c__String__copy>
 801aa90:	2000      	movs	r0, #0
 801aa92:	4770      	bx	lr

0801aa94 <std_srvs__srv__Trigger_Event__get_type_description.part.0>:
 801aa94:	b510      	push	{r4, lr}
 801aa96:	2000      	movs	r0, #0
 801aa98:	f000 fb72 	bl	801b180 <builtin_interfaces__msg__Time__get_type_description>
 801aa9c:	300c      	adds	r0, #12
 801aa9e:	c807      	ldmia	r0, {r0, r1, r2}
 801aaa0:	4c11      	ldr	r4, [pc, #68]	@ (801aae8 <std_srvs__srv__Trigger_Event__get_type_description.part.0+0x54>)
 801aaa2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801aaa6:	2000      	movs	r0, #0
 801aaa8:	f7ff ff12 	bl	801a8d0 <service_msgs__msg__ServiceEventInfo__get_type_description>
 801aaac:	300c      	adds	r0, #12
 801aaae:	c807      	ldmia	r0, {r0, r1, r2}
 801aab0:	4b0e      	ldr	r3, [pc, #56]	@ (801aaec <std_srvs__srv__Trigger_Event__get_type_description.part.0+0x58>)
 801aab2:	3418      	adds	r4, #24
 801aab4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801aab8:	781a      	ldrb	r2, [r3, #0]
 801aaba:	b90a      	cbnz	r2, 801aac0 <std_srvs__srv__Trigger_Event__get_type_description.part.0+0x2c>
 801aabc:	2201      	movs	r2, #1
 801aabe:	701a      	strb	r2, [r3, #0]
 801aac0:	4b0b      	ldr	r3, [pc, #44]	@ (801aaf0 <std_srvs__srv__Trigger_Event__get_type_description.part.0+0x5c>)
 801aac2:	4c0c      	ldr	r4, [pc, #48]	@ (801aaf4 <std_srvs__srv__Trigger_Event__get_type_description.part.0+0x60>)
 801aac4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801aac8:	4b0b      	ldr	r3, [pc, #44]	@ (801aaf8 <std_srvs__srv__Trigger_Event__get_type_description.part.0+0x64>)
 801aaca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801aace:	7823      	ldrb	r3, [r4, #0]
 801aad0:	b90b      	cbnz	r3, 801aad6 <std_srvs__srv__Trigger_Event__get_type_description.part.0+0x42>
 801aad2:	2301      	movs	r3, #1
 801aad4:	7023      	strb	r3, [r4, #0]
 801aad6:	4a09      	ldr	r2, [pc, #36]	@ (801aafc <std_srvs__srv__Trigger_Event__get_type_description.part.0+0x68>)
 801aad8:	4b09      	ldr	r3, [pc, #36]	@ (801ab00 <std_srvs__srv__Trigger_Event__get_type_description.part.0+0x6c>)
 801aada:	4c0a      	ldr	r4, [pc, #40]	@ (801ab04 <std_srvs__srv__Trigger_Event__get_type_description.part.0+0x70>)
 801aadc:	ca07      	ldmia	r2, {r0, r1, r2}
 801aade:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801aae2:	2301      	movs	r3, #1
 801aae4:	7023      	strb	r3, [r4, #0]
 801aae6:	bd10      	pop	{r4, pc}
 801aae8:	20002a04 	.word	0x20002a04
 801aaec:	2000f59f 	.word	0x2000f59f
 801aaf0:	080217ec 	.word	0x080217ec
 801aaf4:	2000f59e 	.word	0x2000f59e
 801aaf8:	20002a34 	.word	0x20002a34
 801aafc:	080217c8 	.word	0x080217c8
 801ab00:	20002a4c 	.word	0x20002a4c
 801ab04:	2000f59d 	.word	0x2000f59d

0801ab08 <std_srvs__srv__Trigger__get_type_hash>:
 801ab08:	4800      	ldr	r0, [pc, #0]	@ (801ab0c <std_srvs__srv__Trigger__get_type_hash+0x4>)
 801ab0a:	4770      	bx	lr
 801ab0c:	20002948 	.word	0x20002948

0801ab10 <std_srvs__srv__Trigger_Request__get_type_hash>:
 801ab10:	4800      	ldr	r0, [pc, #0]	@ (801ab14 <std_srvs__srv__Trigger_Request__get_type_hash+0x4>)
 801ab12:	4770      	bx	lr
 801ab14:	20002924 	.word	0x20002924

0801ab18 <std_srvs__srv__Trigger_Response__get_type_hash>:
 801ab18:	4800      	ldr	r0, [pc, #0]	@ (801ab1c <std_srvs__srv__Trigger_Response__get_type_hash+0x4>)
 801ab1a:	4770      	bx	lr
 801ab1c:	20002900 	.word	0x20002900

0801ab20 <std_srvs__srv__Trigger_Event__get_type_hash>:
 801ab20:	4800      	ldr	r0, [pc, #0]	@ (801ab24 <std_srvs__srv__Trigger_Event__get_type_hash+0x4>)
 801ab22:	4770      	bx	lr
 801ab24:	200028dc 	.word	0x200028dc

0801ab28 <std_srvs__srv__Trigger__get_type_description>:
 801ab28:	b570      	push	{r4, r5, r6, lr}
 801ab2a:	4e1d      	ldr	r6, [pc, #116]	@ (801aba0 <std_srvs__srv__Trigger__get_type_description+0x78>)
 801ab2c:	7835      	ldrb	r5, [r6, #0]
 801ab2e:	b10d      	cbz	r5, 801ab34 <std_srvs__srv__Trigger__get_type_description+0xc>
 801ab30:	481c      	ldr	r0, [pc, #112]	@ (801aba4 <std_srvs__srv__Trigger__get_type_description+0x7c>)
 801ab32:	bd70      	pop	{r4, r5, r6, pc}
 801ab34:	4628      	mov	r0, r5
 801ab36:	f000 fb23 	bl	801b180 <builtin_interfaces__msg__Time__get_type_description>
 801ab3a:	300c      	adds	r0, #12
 801ab3c:	c807      	ldmia	r0, {r0, r1, r2}
 801ab3e:	4c1a      	ldr	r4, [pc, #104]	@ (801aba8 <std_srvs__srv__Trigger__get_type_description+0x80>)
 801ab40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801ab44:	4628      	mov	r0, r5
 801ab46:	f7ff fec3 	bl	801a8d0 <service_msgs__msg__ServiceEventInfo__get_type_description>
 801ab4a:	300c      	adds	r0, #12
 801ab4c:	c807      	ldmia	r0, {r0, r1, r2}
 801ab4e:	4b17      	ldr	r3, [pc, #92]	@ (801abac <std_srvs__srv__Trigger__get_type_description+0x84>)
 801ab50:	781b      	ldrb	r3, [r3, #0]
 801ab52:	3418      	adds	r4, #24
 801ab54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801ab58:	b1f3      	cbz	r3, 801ab98 <std_srvs__srv__Trigger__get_type_description+0x70>
 801ab5a:	4b15      	ldr	r3, [pc, #84]	@ (801abb0 <std_srvs__srv__Trigger__get_type_description+0x88>)
 801ab5c:	4c15      	ldr	r4, [pc, #84]	@ (801abb4 <std_srvs__srv__Trigger__get_type_description+0x8c>)
 801ab5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ab62:	4b15      	ldr	r3, [pc, #84]	@ (801abb8 <std_srvs__srv__Trigger__get_type_description+0x90>)
 801ab64:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801ab68:	7823      	ldrb	r3, [r4, #0]
 801ab6a:	b90b      	cbnz	r3, 801ab70 <std_srvs__srv__Trigger__get_type_description+0x48>
 801ab6c:	2301      	movs	r3, #1
 801ab6e:	7023      	strb	r3, [r4, #0]
 801ab70:	4b12      	ldr	r3, [pc, #72]	@ (801abbc <std_srvs__srv__Trigger__get_type_description+0x94>)
 801ab72:	4c13      	ldr	r4, [pc, #76]	@ (801abc0 <std_srvs__srv__Trigger__get_type_description+0x98>)
 801ab74:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ab78:	4b12      	ldr	r3, [pc, #72]	@ (801abc4 <std_srvs__srv__Trigger__get_type_description+0x9c>)
 801ab7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801ab7e:	7823      	ldrb	r3, [r4, #0]
 801ab80:	b90b      	cbnz	r3, 801ab86 <std_srvs__srv__Trigger__get_type_description+0x5e>
 801ab82:	2301      	movs	r3, #1
 801ab84:	7023      	strb	r3, [r4, #0]
 801ab86:	4a10      	ldr	r2, [pc, #64]	@ (801abc8 <std_srvs__srv__Trigger__get_type_description+0xa0>)
 801ab88:	4b10      	ldr	r3, [pc, #64]	@ (801abcc <std_srvs__srv__Trigger__get_type_description+0xa4>)
 801ab8a:	ca07      	ldmia	r2, {r0, r1, r2}
 801ab8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801ab90:	2301      	movs	r3, #1
 801ab92:	4804      	ldr	r0, [pc, #16]	@ (801aba4 <std_srvs__srv__Trigger__get_type_description+0x7c>)
 801ab94:	7033      	strb	r3, [r6, #0]
 801ab96:	bd70      	pop	{r4, r5, r6, pc}
 801ab98:	f7ff ff7c 	bl	801aa94 <std_srvs__srv__Trigger_Event__get_type_description.part.0>
 801ab9c:	e7dd      	b.n	801ab5a <std_srvs__srv__Trigger__get_type_description+0x32>
 801ab9e:	bf00      	nop
 801aba0:	2000f5a0 	.word	0x2000f5a0
 801aba4:	08021804 	.word	0x08021804
 801aba8:	20002c68 	.word	0x20002c68
 801abac:	2000f59d 	.word	0x2000f59d
 801abb0:	080217a4 	.word	0x080217a4
 801abb4:	2000f59f 	.word	0x2000f59f
 801abb8:	20002c98 	.word	0x20002c98
 801abbc:	080217ec 	.word	0x080217ec
 801abc0:	2000f59e 	.word	0x2000f59e
 801abc4:	20002cb0 	.word	0x20002cb0
 801abc8:	080217c8 	.word	0x080217c8
 801abcc:	20002cc8 	.word	0x20002cc8

0801abd0 <std_srvs__srv__Trigger_Request__get_type_description>:
 801abd0:	4b03      	ldr	r3, [pc, #12]	@ (801abe0 <std_srvs__srv__Trigger_Request__get_type_description+0x10>)
 801abd2:	781a      	ldrb	r2, [r3, #0]
 801abd4:	b90a      	cbnz	r2, 801abda <std_srvs__srv__Trigger_Request__get_type_description+0xa>
 801abd6:	2201      	movs	r2, #1
 801abd8:	701a      	strb	r2, [r3, #0]
 801abda:	4802      	ldr	r0, [pc, #8]	@ (801abe4 <std_srvs__srv__Trigger_Request__get_type_description+0x14>)
 801abdc:	4770      	bx	lr
 801abde:	bf00      	nop
 801abe0:	2000f59f 	.word	0x2000f59f
 801abe4:	080217e0 	.word	0x080217e0

0801abe8 <std_srvs__srv__Trigger_Response__get_type_description>:
 801abe8:	4b03      	ldr	r3, [pc, #12]	@ (801abf8 <std_srvs__srv__Trigger_Response__get_type_description+0x10>)
 801abea:	781a      	ldrb	r2, [r3, #0]
 801abec:	b90a      	cbnz	r2, 801abf2 <std_srvs__srv__Trigger_Response__get_type_description+0xa>
 801abee:	2201      	movs	r2, #1
 801abf0:	701a      	strb	r2, [r3, #0]
 801abf2:	4802      	ldr	r0, [pc, #8]	@ (801abfc <std_srvs__srv__Trigger_Response__get_type_description+0x14>)
 801abf4:	4770      	bx	lr
 801abf6:	bf00      	nop
 801abf8:	2000f59e 	.word	0x2000f59e
 801abfc:	080217bc 	.word	0x080217bc

0801ac00 <std_srvs__srv__Trigger_Event__get_type_description>:
 801ac00:	b508      	push	{r3, lr}
 801ac02:	4b04      	ldr	r3, [pc, #16]	@ (801ac14 <std_srvs__srv__Trigger_Event__get_type_description+0x14>)
 801ac04:	781b      	ldrb	r3, [r3, #0]
 801ac06:	b10b      	cbz	r3, 801ac0c <std_srvs__srv__Trigger_Event__get_type_description+0xc>
 801ac08:	4803      	ldr	r0, [pc, #12]	@ (801ac18 <std_srvs__srv__Trigger_Event__get_type_description+0x18>)
 801ac0a:	bd08      	pop	{r3, pc}
 801ac0c:	f7ff ff42 	bl	801aa94 <std_srvs__srv__Trigger_Event__get_type_description.part.0>
 801ac10:	4801      	ldr	r0, [pc, #4]	@ (801ac18 <std_srvs__srv__Trigger_Event__get_type_description+0x18>)
 801ac12:	bd08      	pop	{r3, pc}
 801ac14:	2000f59d 	.word	0x2000f59d
 801ac18:	08021798 	.word	0x08021798

0801ac1c <std_srvs__srv__Trigger__get_type_description_sources>:
 801ac1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac20:	4e2c      	ldr	r6, [pc, #176]	@ (801acd4 <std_srvs__srv__Trigger__get_type_description_sources+0xb8>)
 801ac22:	7837      	ldrb	r7, [r6, #0]
 801ac24:	b117      	cbz	r7, 801ac2c <std_srvs__srv__Trigger__get_type_description_sources+0x10>
 801ac26:	482c      	ldr	r0, [pc, #176]	@ (801acd8 <std_srvs__srv__Trigger__get_type_description_sources+0xbc>)
 801ac28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac2c:	4d2b      	ldr	r5, [pc, #172]	@ (801acdc <std_srvs__srv__Trigger__get_type_description_sources+0xc0>)
 801ac2e:	4c2c      	ldr	r4, [pc, #176]	@ (801ace0 <std_srvs__srv__Trigger__get_type_description_sources+0xc4>)
 801ac30:	f8df 90b8 	ldr.w	r9, [pc, #184]	@ 801acec <std_srvs__srv__Trigger__get_type_description_sources+0xd0>
 801ac34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ac36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ac38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ac3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ac3c:	682b      	ldr	r3, [r5, #0]
 801ac3e:	4625      	mov	r5, r4
 801ac40:	4638      	mov	r0, r7
 801ac42:	f845 3b04 	str.w	r3, [r5], #4
 801ac46:	f000 faa7 	bl	801b198 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801ac4a:	4684      	mov	ip, r0
 801ac4c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ac50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ac52:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ac56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ac58:	4638      	mov	r0, r7
 801ac5a:	f8dc 3000 	ldr.w	r3, [ip]
 801ac5e:	602b      	str	r3, [r5, #0]
 801ac60:	f7ff fe4e 	bl	801a900 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 801ac64:	4684      	mov	ip, r0
 801ac66:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ac6a:	f104 0a28 	add.w	sl, r4, #40	@ 0x28
 801ac6e:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 801ac72:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ac76:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 801ac7a:	f8dc 3000 	ldr.w	r3, [ip]
 801ac7e:	f8ca 3000 	str.w	r3, [sl]
 801ac82:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 801ac86:	f104 084c 	add.w	r8, r4, #76	@ 0x4c
 801ac8a:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 801ac8e:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 801ac92:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 801ac96:	4f13      	ldr	r7, [pc, #76]	@ (801ace4 <std_srvs__srv__Trigger__get_type_description_sources+0xc8>)
 801ac98:	f8d9 3000 	ldr.w	r3, [r9]
 801ac9c:	f8c8 3000 	str.w	r3, [r8]
 801aca0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801aca2:	f104 0e70 	add.w	lr, r4, #112	@ 0x70
 801aca6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801acaa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801acac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801acb0:	4d0d      	ldr	r5, [pc, #52]	@ (801ace8 <std_srvs__srv__Trigger__get_type_description_sources+0xcc>)
 801acb2:	683b      	ldr	r3, [r7, #0]
 801acb4:	f8ce 3000 	str.w	r3, [lr]
 801acb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801acba:	3494      	adds	r4, #148	@ 0x94
 801acbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801acbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801acc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801acc2:	f04f 0b01 	mov.w	fp, #1
 801acc6:	682b      	ldr	r3, [r5, #0]
 801acc8:	4803      	ldr	r0, [pc, #12]	@ (801acd8 <std_srvs__srv__Trigger__get_type_description_sources+0xbc>)
 801acca:	f886 b000 	strb.w	fp, [r6]
 801acce:	6023      	str	r3, [r4, #0]
 801acd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acd4:	2000f59c 	.word	0x2000f59c
 801acd8:	080216fc 	.word	0x080216fc
 801acdc:	08021774 	.word	0x08021774
 801ace0:	2000f4c4 	.word	0x2000f4c4
 801ace4:	08021750 	.word	0x08021750
 801ace8:	0802172c 	.word	0x0802172c
 801acec:	08021708 	.word	0x08021708

0801acf0 <std_srvs__srv__Trigger_Request__get_type_description_sources>:
 801acf0:	4b09      	ldr	r3, [pc, #36]	@ (801ad18 <std_srvs__srv__Trigger_Request__get_type_description_sources+0x28>)
 801acf2:	781a      	ldrb	r2, [r3, #0]
 801acf4:	b96a      	cbnz	r2, 801ad12 <std_srvs__srv__Trigger_Request__get_type_description_sources+0x22>
 801acf6:	b430      	push	{r4, r5}
 801acf8:	4d08      	ldr	r5, [pc, #32]	@ (801ad1c <std_srvs__srv__Trigger_Request__get_type_description_sources+0x2c>)
 801acfa:	4c09      	ldr	r4, [pc, #36]	@ (801ad20 <std_srvs__srv__Trigger_Request__get_type_description_sources+0x30>)
 801acfc:	2201      	movs	r2, #1
 801acfe:	701a      	strb	r2, [r3, #0]
 801ad00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ad02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ad04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ad06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ad08:	682b      	ldr	r3, [r5, #0]
 801ad0a:	4806      	ldr	r0, [pc, #24]	@ (801ad24 <std_srvs__srv__Trigger_Request__get_type_description_sources+0x34>)
 801ad0c:	6023      	str	r3, [r4, #0]
 801ad0e:	bc30      	pop	{r4, r5}
 801ad10:	4770      	bx	lr
 801ad12:	4804      	ldr	r0, [pc, #16]	@ (801ad24 <std_srvs__srv__Trigger_Request__get_type_description_sources+0x34>)
 801ad14:	4770      	bx	lr
 801ad16:	bf00      	nop
 801ad18:	2000f4c0 	.word	0x2000f4c0
 801ad1c:	08021750 	.word	0x08021750
 801ad20:	2000f49c 	.word	0x2000f49c
 801ad24:	080216f0 	.word	0x080216f0

0801ad28 <std_srvs__srv__Trigger_Response__get_type_description_sources>:
 801ad28:	4b09      	ldr	r3, [pc, #36]	@ (801ad50 <std_srvs__srv__Trigger_Response__get_type_description_sources+0x28>)
 801ad2a:	781a      	ldrb	r2, [r3, #0]
 801ad2c:	b96a      	cbnz	r2, 801ad4a <std_srvs__srv__Trigger_Response__get_type_description_sources+0x22>
 801ad2e:	b430      	push	{r4, r5}
 801ad30:	4d08      	ldr	r5, [pc, #32]	@ (801ad54 <std_srvs__srv__Trigger_Response__get_type_description_sources+0x2c>)
 801ad32:	4c09      	ldr	r4, [pc, #36]	@ (801ad58 <std_srvs__srv__Trigger_Response__get_type_description_sources+0x30>)
 801ad34:	2201      	movs	r2, #1
 801ad36:	701a      	strb	r2, [r3, #0]
 801ad38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ad3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ad3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ad3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ad40:	682b      	ldr	r3, [r5, #0]
 801ad42:	4806      	ldr	r0, [pc, #24]	@ (801ad5c <std_srvs__srv__Trigger_Response__get_type_description_sources+0x34>)
 801ad44:	6023      	str	r3, [r4, #0]
 801ad46:	bc30      	pop	{r4, r5}
 801ad48:	4770      	bx	lr
 801ad4a:	4804      	ldr	r0, [pc, #16]	@ (801ad5c <std_srvs__srv__Trigger_Response__get_type_description_sources+0x34>)
 801ad4c:	4770      	bx	lr
 801ad4e:	bf00      	nop
 801ad50:	2000f498 	.word	0x2000f498
 801ad54:	0802172c 	.word	0x0802172c
 801ad58:	2000f474 	.word	0x2000f474
 801ad5c:	080216e4 	.word	0x080216e4

0801ad60 <std_srvs__srv__Trigger_Event__get_type_description_sources>:
 801ad60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad64:	4e24      	ldr	r6, [pc, #144]	@ (801adf8 <std_srvs__srv__Trigger_Event__get_type_description_sources+0x98>)
 801ad66:	7837      	ldrb	r7, [r6, #0]
 801ad68:	b117      	cbz	r7, 801ad70 <std_srvs__srv__Trigger_Event__get_type_description_sources+0x10>
 801ad6a:	4824      	ldr	r0, [pc, #144]	@ (801adfc <std_srvs__srv__Trigger_Event__get_type_description_sources+0x9c>)
 801ad6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ad70:	4d23      	ldr	r5, [pc, #140]	@ (801ae00 <std_srvs__srv__Trigger_Event__get_type_description_sources+0xa0>)
 801ad72:	4c24      	ldr	r4, [pc, #144]	@ (801ae04 <std_srvs__srv__Trigger_Event__get_type_description_sources+0xa4>)
 801ad74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ad76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ad78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ad7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ad7c:	682b      	ldr	r3, [r5, #0]
 801ad7e:	4625      	mov	r5, r4
 801ad80:	4638      	mov	r0, r7
 801ad82:	f845 3b04 	str.w	r3, [r5], #4
 801ad86:	f000 fa07 	bl	801b198 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801ad8a:	4684      	mov	ip, r0
 801ad8c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ad90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ad92:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ad96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ad98:	4638      	mov	r0, r7
 801ad9a:	f8dc 3000 	ldr.w	r3, [ip]
 801ad9e:	602b      	str	r3, [r5, #0]
 801ada0:	f7ff fdae 	bl	801a900 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 801ada4:	4684      	mov	ip, r0
 801ada6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801adaa:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 801adae:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 801adb2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801adb6:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 801adba:	4f13      	ldr	r7, [pc, #76]	@ (801ae08 <std_srvs__srv__Trigger_Event__get_type_description_sources+0xa8>)
 801adbc:	f8dc 3000 	ldr.w	r3, [ip]
 801adc0:	f8c8 3000 	str.w	r3, [r8]
 801adc4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801adc6:	f104 0e4c 	add.w	lr, r4, #76	@ 0x4c
 801adca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801adce:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801add0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801add4:	4d0d      	ldr	r5, [pc, #52]	@ (801ae0c <std_srvs__srv__Trigger_Event__get_type_description_sources+0xac>)
 801add6:	683b      	ldr	r3, [r7, #0]
 801add8:	f8ce 3000 	str.w	r3, [lr]
 801addc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801adde:	3470      	adds	r4, #112	@ 0x70
 801ade0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ade2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ade4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ade6:	f04f 0901 	mov.w	r9, #1
 801adea:	682b      	ldr	r3, [r5, #0]
 801adec:	4803      	ldr	r0, [pc, #12]	@ (801adfc <std_srvs__srv__Trigger_Event__get_type_description_sources+0x9c>)
 801adee:	f886 9000 	strb.w	r9, [r6]
 801adf2:	6023      	str	r3, [r4, #0]
 801adf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801adf8:	2000f470 	.word	0x2000f470
 801adfc:	080216d8 	.word	0x080216d8
 801ae00:	08021708 	.word	0x08021708
 801ae04:	2000f3bc 	.word	0x2000f3bc
 801ae08:	08021750 	.word	0x08021750
 801ae0c:	0802172c 	.word	0x0802172c

0801ae10 <std_srvs__srv__Trigger_Event__fini.part.0>:
 801ae10:	b530      	push	{r4, r5, lr}
 801ae12:	4605      	mov	r5, r0
 801ae14:	b087      	sub	sp, #28
 801ae16:	f7ff fdaf 	bl	801a978 <service_msgs__msg__ServiceEventInfo__fini>
 801ae1a:	a801      	add	r0, sp, #4
 801ae1c:	f7f4 f9ee 	bl	800f1fc <rcutils_get_default_allocator>
 801ae20:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801ae22:	b130      	cbz	r0, 801ae32 <std_srvs__srv__Trigger_Event__fini.part.0+0x22>
 801ae24:	9b02      	ldr	r3, [sp, #8]
 801ae26:	9905      	ldr	r1, [sp, #20]
 801ae28:	4798      	blx	r3
 801ae2a:	2300      	movs	r3, #0
 801ae2c:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801ae30:	632b      	str	r3, [r5, #48]	@ 0x30
 801ae32:	a801      	add	r0, sp, #4
 801ae34:	f7f4 f9e2 	bl	800f1fc <rcutils_get_default_allocator>
 801ae38:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801ae3a:	b1b3      	cbz	r3, 801ae6a <std_srvs__srv__Trigger_Event__fini.part.0+0x5a>
 801ae3c:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 801ae3e:	b162      	cbz	r2, 801ae5a <std_srvs__srv__Trigger_Event__fini.part.0+0x4a>
 801ae40:	2400      	movs	r4, #0
 801ae42:	eb13 1004 	adds.w	r0, r3, r4, lsl #4
 801ae46:	f100 0004 	add.w	r0, r0, #4
 801ae4a:	d010      	beq.n	801ae6e <std_srvs__srv__Trigger_Event__fini.part.0+0x5e>
 801ae4c:	f7f5 fde2 	bl	8010a14 <rosidl_runtime_c__String__fini>
 801ae50:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 801ae52:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801ae54:	3401      	adds	r4, #1
 801ae56:	4294      	cmp	r4, r2
 801ae58:	d3f3      	bcc.n	801ae42 <std_srvs__srv__Trigger_Event__fini.part.0+0x32>
 801ae5a:	4618      	mov	r0, r3
 801ae5c:	9a02      	ldr	r2, [sp, #8]
 801ae5e:	9905      	ldr	r1, [sp, #20]
 801ae60:	4790      	blx	r2
 801ae62:	2300      	movs	r3, #0
 801ae64:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801ae68:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801ae6a:	b007      	add	sp, #28
 801ae6c:	bd30      	pop	{r4, r5, pc}
 801ae6e:	3401      	adds	r4, #1
 801ae70:	4294      	cmp	r4, r2
 801ae72:	d3e6      	bcc.n	801ae42 <std_srvs__srv__Trigger_Event__fini.part.0+0x32>
 801ae74:	e7f1      	b.n	801ae5a <std_srvs__srv__Trigger_Event__fini.part.0+0x4a>
 801ae76:	bf00      	nop

0801ae78 <std_srvs__srv__Trigger_Request__init>:
 801ae78:	3800      	subs	r0, #0
 801ae7a:	bf18      	it	ne
 801ae7c:	2001      	movne	r0, #1
 801ae7e:	4770      	bx	lr

0801ae80 <std_srvs__srv__Trigger_Request__fini>:
 801ae80:	4770      	bx	lr
 801ae82:	bf00      	nop

0801ae84 <std_srvs__srv__Trigger_Request__copy>:
 801ae84:	b128      	cbz	r0, 801ae92 <std_srvs__srv__Trigger_Request__copy+0xe>
 801ae86:	b119      	cbz	r1, 801ae90 <std_srvs__srv__Trigger_Request__copy+0xc>
 801ae88:	7803      	ldrb	r3, [r0, #0]
 801ae8a:	700b      	strb	r3, [r1, #0]
 801ae8c:	2001      	movs	r0, #1
 801ae8e:	4770      	bx	lr
 801ae90:	4608      	mov	r0, r1
 801ae92:	4770      	bx	lr

0801ae94 <std_srvs__srv__Trigger_Request__Sequence__init>:
 801ae94:	b1c0      	cbz	r0, 801aec8 <std_srvs__srv__Trigger_Request__Sequence__init+0x34>
 801ae96:	b530      	push	{r4, r5, lr}
 801ae98:	b087      	sub	sp, #28
 801ae9a:	460d      	mov	r5, r1
 801ae9c:	4604      	mov	r4, r0
 801ae9e:	a801      	add	r0, sp, #4
 801aea0:	f7f4 f9ac 	bl	800f1fc <rcutils_get_default_allocator>
 801aea4:	9a05      	ldr	r2, [sp, #20]
 801aea6:	b935      	cbnz	r5, 801aeb6 <std_srvs__srv__Trigger_Request__Sequence__init+0x22>
 801aea8:	4628      	mov	r0, r5
 801aeaa:	e9c4 0500 	strd	r0, r5, [r4]
 801aeae:	2001      	movs	r0, #1
 801aeb0:	60a5      	str	r5, [r4, #8]
 801aeb2:	b007      	add	sp, #28
 801aeb4:	bd30      	pop	{r4, r5, pc}
 801aeb6:	9b04      	ldr	r3, [sp, #16]
 801aeb8:	2101      	movs	r1, #1
 801aeba:	4628      	mov	r0, r5
 801aebc:	4798      	blx	r3
 801aebe:	2800      	cmp	r0, #0
 801aec0:	d1f3      	bne.n	801aeaa <std_srvs__srv__Trigger_Request__Sequence__init+0x16>
 801aec2:	2000      	movs	r0, #0
 801aec4:	b007      	add	sp, #28
 801aec6:	bd30      	pop	{r4, r5, pc}
 801aec8:	2000      	movs	r0, #0
 801aeca:	4770      	bx	lr

0801aecc <std_srvs__srv__Trigger_Request__Sequence__fini>:
 801aecc:	b180      	cbz	r0, 801aef0 <std_srvs__srv__Trigger_Request__Sequence__fini+0x24>
 801aece:	b510      	push	{r4, lr}
 801aed0:	4604      	mov	r4, r0
 801aed2:	b086      	sub	sp, #24
 801aed4:	a801      	add	r0, sp, #4
 801aed6:	f7f4 f991 	bl	800f1fc <rcutils_get_default_allocator>
 801aeda:	6820      	ldr	r0, [r4, #0]
 801aedc:	b130      	cbz	r0, 801aeec <std_srvs__srv__Trigger_Request__Sequence__fini+0x20>
 801aede:	9b02      	ldr	r3, [sp, #8]
 801aee0:	9905      	ldr	r1, [sp, #20]
 801aee2:	4798      	blx	r3
 801aee4:	2300      	movs	r3, #0
 801aee6:	e9c4 3300 	strd	r3, r3, [r4]
 801aeea:	60a3      	str	r3, [r4, #8]
 801aeec:	b006      	add	sp, #24
 801aeee:	bd10      	pop	{r4, pc}
 801aef0:	4770      	bx	lr
 801aef2:	bf00      	nop

0801aef4 <std_srvs__srv__Trigger_Response__init>:
 801aef4:	b158      	cbz	r0, 801af0e <std_srvs__srv__Trigger_Response__init+0x1a>
 801aef6:	b510      	push	{r4, lr}
 801aef8:	1d04      	adds	r4, r0, #4
 801aefa:	4620      	mov	r0, r4
 801aefc:	f7f5 fd70 	bl	80109e0 <rosidl_runtime_c__String__init>
 801af00:	b100      	cbz	r0, 801af04 <std_srvs__srv__Trigger_Response__init+0x10>
 801af02:	bd10      	pop	{r4, pc}
 801af04:	4620      	mov	r0, r4
 801af06:	f7f5 fd85 	bl	8010a14 <rosidl_runtime_c__String__fini>
 801af0a:	2000      	movs	r0, #0
 801af0c:	bd10      	pop	{r4, pc}
 801af0e:	2000      	movs	r0, #0
 801af10:	4770      	bx	lr
 801af12:	bf00      	nop

0801af14 <std_srvs__srv__Trigger_Response__fini>:
 801af14:	b110      	cbz	r0, 801af1c <std_srvs__srv__Trigger_Response__fini+0x8>
 801af16:	3004      	adds	r0, #4
 801af18:	f7f5 bd7c 	b.w	8010a14 <rosidl_runtime_c__String__fini>
 801af1c:	4770      	bx	lr
 801af1e:	bf00      	nop

0801af20 <std_srvs__srv__Trigger_Response__copy>:
 801af20:	b130      	cbz	r0, 801af30 <std_srvs__srv__Trigger_Response__copy+0x10>
 801af22:	b129      	cbz	r1, 801af30 <std_srvs__srv__Trigger_Response__copy+0x10>
 801af24:	f810 3b04 	ldrb.w	r3, [r0], #4
 801af28:	f801 3b04 	strb.w	r3, [r1], #4
 801af2c:	f7f5 bde8 	b.w	8010b00 <rosidl_runtime_c__String__copy>
 801af30:	2000      	movs	r0, #0
 801af32:	4770      	bx	lr

0801af34 <std_srvs__srv__Trigger_Response__Sequence__init>:
 801af34:	2800      	cmp	r0, #0
 801af36:	d03c      	beq.n	801afb2 <std_srvs__srv__Trigger_Response__Sequence__init+0x7e>
 801af38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801af3c:	b087      	sub	sp, #28
 801af3e:	460d      	mov	r5, r1
 801af40:	4607      	mov	r7, r0
 801af42:	a801      	add	r0, sp, #4
 801af44:	f7f4 f95a 	bl	800f1fc <rcutils_get_default_allocator>
 801af48:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801af4c:	b34d      	cbz	r5, 801afa2 <std_srvs__srv__Trigger_Response__Sequence__init+0x6e>
 801af4e:	9b04      	ldr	r3, [sp, #16]
 801af50:	464a      	mov	r2, r9
 801af52:	2110      	movs	r1, #16
 801af54:	4628      	mov	r0, r5
 801af56:	4798      	blx	r3
 801af58:	4680      	mov	r8, r0
 801af5a:	b300      	cbz	r0, 801af9e <std_srvs__srv__Trigger_Response__Sequence__init+0x6a>
 801af5c:	1d06      	adds	r6, r0, #4
 801af5e:	2400      	movs	r4, #0
 801af60:	e004      	b.n	801af6c <std_srvs__srv__Trigger_Response__Sequence__init+0x38>
 801af62:	3401      	adds	r4, #1
 801af64:	42a5      	cmp	r5, r4
 801af66:	f106 0610 	add.w	r6, r6, #16
 801af6a:	d01b      	beq.n	801afa4 <std_srvs__srv__Trigger_Response__Sequence__init+0x70>
 801af6c:	4630      	mov	r0, r6
 801af6e:	f7f5 fd37 	bl	80109e0 <rosidl_runtime_c__String__init>
 801af72:	2800      	cmp	r0, #0
 801af74:	d1f5      	bne.n	801af62 <std_srvs__srv__Trigger_Response__Sequence__init+0x2e>
 801af76:	4630      	mov	r0, r6
 801af78:	f7f5 fd4c 	bl	8010a14 <rosidl_runtime_c__String__fini>
 801af7c:	42a5      	cmp	r5, r4
 801af7e:	d911      	bls.n	801afa4 <std_srvs__srv__Trigger_Response__Sequence__init+0x70>
 801af80:	b14c      	cbz	r4, 801af96 <std_srvs__srv__Trigger_Response__Sequence__init+0x62>
 801af82:	eb08 1504 	add.w	r5, r8, r4, lsl #4
 801af86:	3d0c      	subs	r5, #12
 801af88:	4628      	mov	r0, r5
 801af8a:	f7f5 fd43 	bl	8010a14 <rosidl_runtime_c__String__fini>
 801af8e:	3c01      	subs	r4, #1
 801af90:	f1a5 0510 	sub.w	r5, r5, #16
 801af94:	d1f8      	bne.n	801af88 <std_srvs__srv__Trigger_Response__Sequence__init+0x54>
 801af96:	9b02      	ldr	r3, [sp, #8]
 801af98:	4649      	mov	r1, r9
 801af9a:	4640      	mov	r0, r8
 801af9c:	4798      	blx	r3
 801af9e:	2000      	movs	r0, #0
 801afa0:	e004      	b.n	801afac <std_srvs__srv__Trigger_Response__Sequence__init+0x78>
 801afa2:	46a8      	mov	r8, r5
 801afa4:	e9c7 8500 	strd	r8, r5, [r7]
 801afa8:	60bd      	str	r5, [r7, #8]
 801afaa:	2001      	movs	r0, #1
 801afac:	b007      	add	sp, #28
 801afae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801afb2:	2000      	movs	r0, #0
 801afb4:	4770      	bx	lr
 801afb6:	bf00      	nop

0801afb8 <std_srvs__srv__Trigger_Response__Sequence__fini>:
 801afb8:	b320      	cbz	r0, 801b004 <std_srvs__srv__Trigger_Response__Sequence__fini+0x4c>
 801afba:	b530      	push	{r4, r5, lr}
 801afbc:	4605      	mov	r5, r0
 801afbe:	b087      	sub	sp, #28
 801afc0:	a801      	add	r0, sp, #4
 801afc2:	f7f4 f91b 	bl	800f1fc <rcutils_get_default_allocator>
 801afc6:	682b      	ldr	r3, [r5, #0]
 801afc8:	b1b3      	cbz	r3, 801aff8 <std_srvs__srv__Trigger_Response__Sequence__fini+0x40>
 801afca:	68aa      	ldr	r2, [r5, #8]
 801afcc:	b162      	cbz	r2, 801afe8 <std_srvs__srv__Trigger_Response__Sequence__fini+0x30>
 801afce:	2400      	movs	r4, #0
 801afd0:	eb13 1004 	adds.w	r0, r3, r4, lsl #4
 801afd4:	f100 0004 	add.w	r0, r0, #4
 801afd8:	d010      	beq.n	801affc <std_srvs__srv__Trigger_Response__Sequence__fini+0x44>
 801afda:	f7f5 fd1b 	bl	8010a14 <rosidl_runtime_c__String__fini>
 801afde:	68aa      	ldr	r2, [r5, #8]
 801afe0:	682b      	ldr	r3, [r5, #0]
 801afe2:	3401      	adds	r4, #1
 801afe4:	4294      	cmp	r4, r2
 801afe6:	d3f3      	bcc.n	801afd0 <std_srvs__srv__Trigger_Response__Sequence__fini+0x18>
 801afe8:	4618      	mov	r0, r3
 801afea:	9a02      	ldr	r2, [sp, #8]
 801afec:	9905      	ldr	r1, [sp, #20]
 801afee:	4790      	blx	r2
 801aff0:	2300      	movs	r3, #0
 801aff2:	e9c5 3300 	strd	r3, r3, [r5]
 801aff6:	60ab      	str	r3, [r5, #8]
 801aff8:	b007      	add	sp, #28
 801affa:	bd30      	pop	{r4, r5, pc}
 801affc:	3401      	adds	r4, #1
 801affe:	4294      	cmp	r4, r2
 801b000:	d3e6      	bcc.n	801afd0 <std_srvs__srv__Trigger_Response__Sequence__fini+0x18>
 801b002:	e7f1      	b.n	801afe8 <std_srvs__srv__Trigger_Response__Sequence__fini+0x30>
 801b004:	4770      	bx	lr
 801b006:	bf00      	nop

0801b008 <std_srvs__srv__Trigger_Event__init>:
 801b008:	b570      	push	{r4, r5, r6, lr}
 801b00a:	b086      	sub	sp, #24
 801b00c:	b1b8      	cbz	r0, 801b03e <std_srvs__srv__Trigger_Event__init+0x36>
 801b00e:	4604      	mov	r4, r0
 801b010:	f7ff fca2 	bl	801a958 <service_msgs__msg__ServiceEventInfo__init>
 801b014:	4605      	mov	r5, r0
 801b016:	b178      	cbz	r0, 801b038 <std_srvs__srv__Trigger_Event__init+0x30>
 801b018:	2600      	movs	r6, #0
 801b01a:	4668      	mov	r0, sp
 801b01c:	f7f4 f8ee 	bl	800f1fc <rcutils_get_default_allocator>
 801b020:	4668      	mov	r0, sp
 801b022:	e9c4 660a 	strd	r6, r6, [r4, #40]	@ 0x28
 801b026:	6326      	str	r6, [r4, #48]	@ 0x30
 801b028:	f7f4 f8e8 	bl	800f1fc <rcutils_get_default_allocator>
 801b02c:	4628      	mov	r0, r5
 801b02e:	e9c4 660d 	strd	r6, r6, [r4, #52]	@ 0x34
 801b032:	63e6      	str	r6, [r4, #60]	@ 0x3c
 801b034:	b006      	add	sp, #24
 801b036:	bd70      	pop	{r4, r5, r6, pc}
 801b038:	4620      	mov	r0, r4
 801b03a:	f7ff fee9 	bl	801ae10 <std_srvs__srv__Trigger_Event__fini.part.0>
 801b03e:	2500      	movs	r5, #0
 801b040:	4628      	mov	r0, r5
 801b042:	b006      	add	sp, #24
 801b044:	bd70      	pop	{r4, r5, r6, pc}
 801b046:	bf00      	nop

0801b048 <std_srvs__srv__Trigger_Event__fini>:
 801b048:	2800      	cmp	r0, #0
 801b04a:	d032      	beq.n	801b0b2 <std_srvs__srv__Trigger_Event__fini+0x6a>
 801b04c:	b530      	push	{r4, r5, lr}
 801b04e:	4605      	mov	r5, r0
 801b050:	b087      	sub	sp, #28
 801b052:	f7ff fc91 	bl	801a978 <service_msgs__msg__ServiceEventInfo__fini>
 801b056:	a801      	add	r0, sp, #4
 801b058:	f7f4 f8d0 	bl	800f1fc <rcutils_get_default_allocator>
 801b05c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801b05e:	b130      	cbz	r0, 801b06e <std_srvs__srv__Trigger_Event__fini+0x26>
 801b060:	9b02      	ldr	r3, [sp, #8]
 801b062:	9905      	ldr	r1, [sp, #20]
 801b064:	4798      	blx	r3
 801b066:	2300      	movs	r3, #0
 801b068:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801b06c:	632b      	str	r3, [r5, #48]	@ 0x30
 801b06e:	a801      	add	r0, sp, #4
 801b070:	f7f4 f8c4 	bl	800f1fc <rcutils_get_default_allocator>
 801b074:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801b076:	b1b3      	cbz	r3, 801b0a6 <std_srvs__srv__Trigger_Event__fini+0x5e>
 801b078:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 801b07a:	b162      	cbz	r2, 801b096 <std_srvs__srv__Trigger_Event__fini+0x4e>
 801b07c:	2400      	movs	r4, #0
 801b07e:	eb13 1004 	adds.w	r0, r3, r4, lsl #4
 801b082:	f100 0004 	add.w	r0, r0, #4
 801b086:	d010      	beq.n	801b0aa <std_srvs__srv__Trigger_Event__fini+0x62>
 801b088:	f7f5 fcc4 	bl	8010a14 <rosidl_runtime_c__String__fini>
 801b08c:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 801b08e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801b090:	3401      	adds	r4, #1
 801b092:	4294      	cmp	r4, r2
 801b094:	d3f3      	bcc.n	801b07e <std_srvs__srv__Trigger_Event__fini+0x36>
 801b096:	4618      	mov	r0, r3
 801b098:	9a02      	ldr	r2, [sp, #8]
 801b09a:	9905      	ldr	r1, [sp, #20]
 801b09c:	4790      	blx	r2
 801b09e:	2300      	movs	r3, #0
 801b0a0:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801b0a4:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801b0a6:	b007      	add	sp, #28
 801b0a8:	bd30      	pop	{r4, r5, pc}
 801b0aa:	3401      	adds	r4, #1
 801b0ac:	4294      	cmp	r4, r2
 801b0ae:	d3e6      	bcc.n	801b07e <std_srvs__srv__Trigger_Event__fini+0x36>
 801b0b0:	e7f1      	b.n	801b096 <std_srvs__srv__Trigger_Event__fini+0x4e>
 801b0b2:	4770      	bx	lr

0801b0b4 <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__Trigger>:
 801b0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b0b8:	2900      	cmp	r1, #0
 801b0ba:	d03e      	beq.n	801b13a <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__Trigger+0x86>
 801b0bc:	4605      	mov	r5, r0
 801b0be:	2800      	cmp	r0, #0
 801b0c0:	d03b      	beq.n	801b13a <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__Trigger+0x86>
 801b0c2:	4698      	mov	r8, r3
 801b0c4:	460e      	mov	r6, r1
 801b0c6:	680b      	ldr	r3, [r1, #0]
 801b0c8:	6909      	ldr	r1, [r1, #16]
 801b0ca:	2040      	movs	r0, #64	@ 0x40
 801b0cc:	4617      	mov	r7, r2
 801b0ce:	4798      	blx	r3
 801b0d0:	4604      	mov	r4, r0
 801b0d2:	f7ff ff99 	bl	801b008 <std_srvs__srv__Trigger_Event__init>
 801b0d6:	b360      	cbz	r0, 801b132 <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__Trigger+0x7e>
 801b0d8:	782b      	ldrb	r3, [r5, #0]
 801b0da:	7023      	strb	r3, [r4, #0]
 801b0dc:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 801b0e0:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 801b0e4:	e9c4 2301 	strd	r2, r3, [r4, #4]
 801b0e8:	e9c4 0108 	strd	r0, r1, [r4, #32]
 801b0ec:	68e9      	ldr	r1, [r5, #12]
 801b0ee:	692a      	ldr	r2, [r5, #16]
 801b0f0:	696b      	ldr	r3, [r5, #20]
 801b0f2:	69a8      	ldr	r0, [r5, #24]
 801b0f4:	61a0      	str	r0, [r4, #24]
 801b0f6:	60e1      	str	r1, [r4, #12]
 801b0f8:	6122      	str	r2, [r4, #16]
 801b0fa:	6163      	str	r3, [r4, #20]
 801b0fc:	b14f      	cbz	r7, 801b112 <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__Trigger+0x5e>
 801b0fe:	2101      	movs	r1, #1
 801b100:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801b104:	f7ff fec6 	bl	801ae94 <std_srvs__srv__Trigger_Request__Sequence__init>
 801b108:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801b10a:	4638      	mov	r0, r7
 801b10c:	f7ff feba 	bl	801ae84 <std_srvs__srv__Trigger_Request__copy>
 801b110:	b178      	cbz	r0, 801b132 <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__Trigger+0x7e>
 801b112:	f1b8 0f00 	cmp.w	r8, #0
 801b116:	d009      	beq.n	801b12c <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__Trigger+0x78>
 801b118:	2101      	movs	r1, #1
 801b11a:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 801b11e:	f7ff ff09 	bl	801af34 <std_srvs__srv__Trigger_Response__Sequence__init>
 801b122:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b124:	4640      	mov	r0, r8
 801b126:	f7ff fefb 	bl	801af20 <std_srvs__srv__Trigger_Response__copy>
 801b12a:	b110      	cbz	r0, 801b132 <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__Trigger+0x7e>
 801b12c:	4620      	mov	r0, r4
 801b12e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b132:	6873      	ldr	r3, [r6, #4]
 801b134:	6931      	ldr	r1, [r6, #16]
 801b136:	4620      	mov	r0, r4
 801b138:	4798      	blx	r3
 801b13a:	2400      	movs	r4, #0
 801b13c:	4620      	mov	r0, r4
 801b13e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b142:	bf00      	nop

0801b144 <rosidl_typesupport_c__destroy_service_event_message__std_srvs__srv__Trigger>:
 801b144:	b538      	push	{r3, r4, r5, lr}
 801b146:	460d      	mov	r5, r1
 801b148:	b199      	cbz	r1, 801b172 <rosidl_typesupport_c__destroy_service_event_message__std_srvs__srv__Trigger+0x2e>
 801b14a:	4604      	mov	r4, r0
 801b14c:	b180      	cbz	r0, 801b170 <rosidl_typesupport_c__destroy_service_event_message__std_srvs__srv__Trigger+0x2c>
 801b14e:	f7ff ff7b 	bl	801b048 <std_srvs__srv__Trigger_Event__fini>
 801b152:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801b154:	b110      	cbz	r0, 801b15c <rosidl_typesupport_c__destroy_service_event_message__std_srvs__srv__Trigger+0x18>
 801b156:	686b      	ldr	r3, [r5, #4]
 801b158:	6929      	ldr	r1, [r5, #16]
 801b15a:	4798      	blx	r3
 801b15c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 801b15e:	b110      	cbz	r0, 801b166 <rosidl_typesupport_c__destroy_service_event_message__std_srvs__srv__Trigger+0x22>
 801b160:	686b      	ldr	r3, [r5, #4]
 801b162:	6929      	ldr	r1, [r5, #16]
 801b164:	4798      	blx	r3
 801b166:	4620      	mov	r0, r4
 801b168:	686b      	ldr	r3, [r5, #4]
 801b16a:	6929      	ldr	r1, [r5, #16]
 801b16c:	4798      	blx	r3
 801b16e:	2001      	movs	r0, #1
 801b170:	bd38      	pop	{r3, r4, r5, pc}
 801b172:	4608      	mov	r0, r1
 801b174:	bd38      	pop	{r3, r4, r5, pc}
 801b176:	bf00      	nop

0801b178 <builtin_interfaces__msg__Time__get_type_hash>:
 801b178:	4800      	ldr	r0, [pc, #0]	@ (801b17c <builtin_interfaces__msg__Time__get_type_hash+0x4>)
 801b17a:	4770      	bx	lr
 801b17c:	20002e98 	.word	0x20002e98

0801b180 <builtin_interfaces__msg__Time__get_type_description>:
 801b180:	4b03      	ldr	r3, [pc, #12]	@ (801b190 <builtin_interfaces__msg__Time__get_type_description+0x10>)
 801b182:	781a      	ldrb	r2, [r3, #0]
 801b184:	b90a      	cbnz	r2, 801b18a <builtin_interfaces__msg__Time__get_type_description+0xa>
 801b186:	2201      	movs	r2, #1
 801b188:	701a      	strb	r2, [r3, #0]
 801b18a:	4802      	ldr	r0, [pc, #8]	@ (801b194 <builtin_interfaces__msg__Time__get_type_description+0x14>)
 801b18c:	4770      	bx	lr
 801b18e:	bf00      	nop
 801b190:	2000f5c9 	.word	0x2000f5c9
 801b194:	08021858 	.word	0x08021858

0801b198 <builtin_interfaces__msg__Time__get_individual_type_description_source>:
 801b198:	4800      	ldr	r0, [pc, #0]	@ (801b19c <builtin_interfaces__msg__Time__get_individual_type_description_source+0x4>)
 801b19a:	4770      	bx	lr
 801b19c:	08021834 	.word	0x08021834

0801b1a0 <builtin_interfaces__msg__Time__get_type_description_sources>:
 801b1a0:	4b09      	ldr	r3, [pc, #36]	@ (801b1c8 <builtin_interfaces__msg__Time__get_type_description_sources+0x28>)
 801b1a2:	781a      	ldrb	r2, [r3, #0]
 801b1a4:	b96a      	cbnz	r2, 801b1c2 <builtin_interfaces__msg__Time__get_type_description_sources+0x22>
 801b1a6:	b430      	push	{r4, r5}
 801b1a8:	4d08      	ldr	r5, [pc, #32]	@ (801b1cc <builtin_interfaces__msg__Time__get_type_description_sources+0x2c>)
 801b1aa:	4c09      	ldr	r4, [pc, #36]	@ (801b1d0 <builtin_interfaces__msg__Time__get_type_description_sources+0x30>)
 801b1ac:	2201      	movs	r2, #1
 801b1ae:	701a      	strb	r2, [r3, #0]
 801b1b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b1b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b1b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b1b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b1b8:	682b      	ldr	r3, [r5, #0]
 801b1ba:	4806      	ldr	r0, [pc, #24]	@ (801b1d4 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 801b1bc:	6023      	str	r3, [r4, #0]
 801b1be:	bc30      	pop	{r4, r5}
 801b1c0:	4770      	bx	lr
 801b1c2:	4804      	ldr	r0, [pc, #16]	@ (801b1d4 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 801b1c4:	4770      	bx	lr
 801b1c6:	bf00      	nop
 801b1c8:	2000f5c8 	.word	0x2000f5c8
 801b1cc:	08021834 	.word	0x08021834
 801b1d0:	2000f5a4 	.word	0x2000f5a4
 801b1d4:	08021828 	.word	0x08021828

0801b1d8 <builtin_interfaces__msg__Time__init>:
 801b1d8:	3800      	subs	r0, #0
 801b1da:	bf18      	it	ne
 801b1dc:	2001      	movne	r0, #1
 801b1de:	4770      	bx	lr

0801b1e0 <builtin_interfaces__msg__Time__fini>:
 801b1e0:	4770      	bx	lr
 801b1e2:	bf00      	nop

0801b1e4 <builtin_interfaces__msg__Time__copy>:
 801b1e4:	b138      	cbz	r0, 801b1f6 <builtin_interfaces__msg__Time__copy+0x12>
 801b1e6:	b129      	cbz	r1, 801b1f4 <builtin_interfaces__msg__Time__copy+0x10>
 801b1e8:	e9d0 2300 	ldrd	r2, r3, [r0]
 801b1ec:	2001      	movs	r0, #1
 801b1ee:	e9c1 2300 	strd	r2, r3, [r1]
 801b1f2:	4770      	bx	lr
 801b1f4:	4608      	mov	r0, r1
 801b1f6:	4770      	bx	lr

0801b1f8 <geometry_msgs__msg__Quaternion__get_type_hash>:
 801b1f8:	4800      	ldr	r0, [pc, #0]	@ (801b1fc <geometry_msgs__msg__Quaternion__get_type_hash+0x4>)
 801b1fa:	4770      	bx	lr
 801b1fc:	20003070 	.word	0x20003070

0801b200 <geometry_msgs__msg__Quaternion__get_type_description>:
 801b200:	4b03      	ldr	r3, [pc, #12]	@ (801b210 <geometry_msgs__msg__Quaternion__get_type_description+0x10>)
 801b202:	781a      	ldrb	r2, [r3, #0]
 801b204:	b90a      	cbnz	r2, 801b20a <geometry_msgs__msg__Quaternion__get_type_description+0xa>
 801b206:	2201      	movs	r2, #1
 801b208:	701a      	strb	r2, [r3, #0]
 801b20a:	4802      	ldr	r0, [pc, #8]	@ (801b214 <geometry_msgs__msg__Quaternion__get_type_description+0x14>)
 801b20c:	4770      	bx	lr
 801b20e:	bf00      	nop
 801b210:	2000f5f1 	.word	0x2000f5f1
 801b214:	080218ac 	.word	0x080218ac

0801b218 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>:
 801b218:	4800      	ldr	r0, [pc, #0]	@ (801b21c <geometry_msgs__msg__Quaternion__get_individual_type_description_source+0x4>)
 801b21a:	4770      	bx	lr
 801b21c:	08021888 	.word	0x08021888

0801b220 <geometry_msgs__msg__Quaternion__get_type_description_sources>:
 801b220:	4b09      	ldr	r3, [pc, #36]	@ (801b248 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x28>)
 801b222:	781a      	ldrb	r2, [r3, #0]
 801b224:	b96a      	cbnz	r2, 801b242 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x22>
 801b226:	b430      	push	{r4, r5}
 801b228:	4d08      	ldr	r5, [pc, #32]	@ (801b24c <geometry_msgs__msg__Quaternion__get_type_description_sources+0x2c>)
 801b22a:	4c09      	ldr	r4, [pc, #36]	@ (801b250 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x30>)
 801b22c:	2201      	movs	r2, #1
 801b22e:	701a      	strb	r2, [r3, #0]
 801b230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b238:	682b      	ldr	r3, [r5, #0]
 801b23a:	4806      	ldr	r0, [pc, #24]	@ (801b254 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x34>)
 801b23c:	6023      	str	r3, [r4, #0]
 801b23e:	bc30      	pop	{r4, r5}
 801b240:	4770      	bx	lr
 801b242:	4804      	ldr	r0, [pc, #16]	@ (801b254 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x34>)
 801b244:	4770      	bx	lr
 801b246:	bf00      	nop
 801b248:	2000f5f0 	.word	0x2000f5f0
 801b24c:	08021888 	.word	0x08021888
 801b250:	2000f5cc 	.word	0x2000f5cc
 801b254:	0802187c 	.word	0x0802187c

0801b258 <geometry_msgs__msg__Quaternion__init>:
 801b258:	b160      	cbz	r0, 801b274 <geometry_msgs__msg__Quaternion__init+0x1c>
 801b25a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801b278 <geometry_msgs__msg__Quaternion__init+0x20>
 801b25e:	2200      	movs	r2, #0
 801b260:	2300      	movs	r3, #0
 801b262:	e9c0 2300 	strd	r2, r3, [r0]
 801b266:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801b26a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801b26e:	ed80 7b06 	vstr	d7, [r0, #24]
 801b272:	2001      	movs	r0, #1
 801b274:	4770      	bx	lr
 801b276:	bf00      	nop
 801b278:	00000000 	.word	0x00000000
 801b27c:	3ff00000 	.word	0x3ff00000

0801b280 <geometry_msgs__msg__Quaternion__fini>:
 801b280:	4770      	bx	lr
 801b282:	bf00      	nop

0801b284 <geometry_msgs__msg__Quaternion__copy>:
 801b284:	4603      	mov	r3, r0
 801b286:	b190      	cbz	r0, 801b2ae <geometry_msgs__msg__Quaternion__copy+0x2a>
 801b288:	b191      	cbz	r1, 801b2b0 <geometry_msgs__msg__Quaternion__copy+0x2c>
 801b28a:	ed90 7b00 	vldr	d7, [r0]
 801b28e:	ed81 7b00 	vstr	d7, [r1]
 801b292:	ed93 7b02 	vldr	d7, [r3, #8]
 801b296:	ed81 7b02 	vstr	d7, [r1, #8]
 801b29a:	ed93 7b04 	vldr	d7, [r3, #16]
 801b29e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801b2a2:	ed81 7b04 	vstr	d7, [r1, #16]
 801b2a6:	e9c1 2306 	strd	r2, r3, [r1, #24]
 801b2aa:	2001      	movs	r0, #1
 801b2ac:	4770      	bx	lr
 801b2ae:	4770      	bx	lr
 801b2b0:	4608      	mov	r0, r1
 801b2b2:	4770      	bx	lr

0801b2b4 <ucdr_serialize_string>:
 801b2b4:	b538      	push	{r3, r4, r5, lr}
 801b2b6:	4605      	mov	r5, r0
 801b2b8:	4608      	mov	r0, r1
 801b2ba:	460c      	mov	r4, r1
 801b2bc:	f7e5 f810 	bl	80002e0 <strlen>
 801b2c0:	4621      	mov	r1, r4
 801b2c2:	1c42      	adds	r2, r0, #1
 801b2c4:	4628      	mov	r0, r5
 801b2c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b2ca:	f7f7 baf5 	b.w	80128b8 <ucdr_serialize_sequence_char>
 801b2ce:	bf00      	nop

0801b2d0 <ucdr_deserialize_string>:
 801b2d0:	b500      	push	{lr}
 801b2d2:	b083      	sub	sp, #12
 801b2d4:	ab01      	add	r3, sp, #4
 801b2d6:	f7f7 fb01 	bl	80128dc <ucdr_deserialize_sequence_char>
 801b2da:	b003      	add	sp, #12
 801b2dc:	f85d fb04 	ldr.w	pc, [sp], #4

0801b2e0 <uxr_init_input_best_effort_stream>:
 801b2e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b2e4:	8003      	strh	r3, [r0, #0]
 801b2e6:	4770      	bx	lr

0801b2e8 <uxr_reset_input_best_effort_stream>:
 801b2e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b2ec:	8003      	strh	r3, [r0, #0]
 801b2ee:	4770      	bx	lr

0801b2f0 <uxr_receive_best_effort_message>:
 801b2f0:	b538      	push	{r3, r4, r5, lr}
 801b2f2:	4604      	mov	r4, r0
 801b2f4:	8800      	ldrh	r0, [r0, #0]
 801b2f6:	460d      	mov	r5, r1
 801b2f8:	f000 fd28 	bl	801bd4c <uxr_seq_num_cmp>
 801b2fc:	4603      	mov	r3, r0
 801b2fe:	2b00      	cmp	r3, #0
 801b300:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 801b304:	bfb8      	it	lt
 801b306:	8025      	strhlt	r5, [r4, #0]
 801b308:	bd38      	pop	{r3, r4, r5, pc}
 801b30a:	bf00      	nop

0801b30c <on_full_input_buffer>:
 801b30c:	b570      	push	{r4, r5, r6, lr}
 801b30e:	4605      	mov	r5, r0
 801b310:	460c      	mov	r4, r1
 801b312:	682b      	ldr	r3, [r5, #0]
 801b314:	6809      	ldr	r1, [r1, #0]
 801b316:	8920      	ldrh	r0, [r4, #8]
 801b318:	6862      	ldr	r2, [r4, #4]
 801b31a:	fbb2 f2f0 	udiv	r2, r2, r0
 801b31e:	1a5b      	subs	r3, r3, r1
 801b320:	fbb3 f3f2 	udiv	r3, r3, r2
 801b324:	3301      	adds	r3, #1
 801b326:	b29b      	uxth	r3, r3
 801b328:	fbb3 f6f0 	udiv	r6, r3, r0
 801b32c:	fb00 3316 	mls	r3, r0, r6, r3
 801b330:	b29b      	uxth	r3, r3
 801b332:	fb02 f303 	mul.w	r3, r2, r3
 801b336:	1d18      	adds	r0, r3, #4
 801b338:	4408      	add	r0, r1
 801b33a:	7d26      	ldrb	r6, [r4, #20]
 801b33c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801b340:	b116      	cbz	r6, 801b348 <on_full_input_buffer+0x3c>
 801b342:	2600      	movs	r6, #0
 801b344:	f840 6c04 	str.w	r6, [r0, #-4]
 801b348:	2a03      	cmp	r2, #3
 801b34a:	d801      	bhi.n	801b350 <on_full_input_buffer+0x44>
 801b34c:	2001      	movs	r0, #1
 801b34e:	bd70      	pop	{r4, r5, r6, pc}
 801b350:	3308      	adds	r3, #8
 801b352:	4419      	add	r1, r3
 801b354:	4628      	mov	r0, r5
 801b356:	692b      	ldr	r3, [r5, #16]
 801b358:	3a04      	subs	r2, #4
 801b35a:	f7f2 fd7d 	bl	800de58 <ucdr_init_buffer_origin>
 801b35e:	4628      	mov	r0, r5
 801b360:	4902      	ldr	r1, [pc, #8]	@ (801b36c <on_full_input_buffer+0x60>)
 801b362:	4622      	mov	r2, r4
 801b364:	f7f2 fd54 	bl	800de10 <ucdr_set_on_full_buffer_callback>
 801b368:	2000      	movs	r0, #0
 801b36a:	bd70      	pop	{r4, r5, r6, pc}
 801b36c:	0801b30d 	.word	0x0801b30d

0801b370 <uxr_init_input_reliable_stream>:
 801b370:	b500      	push	{lr}
 801b372:	e9c0 1200 	strd	r1, r2, [r0]
 801b376:	f04f 0e00 	mov.w	lr, #0
 801b37a:	9a01      	ldr	r2, [sp, #4]
 801b37c:	8103      	strh	r3, [r0, #8]
 801b37e:	6102      	str	r2, [r0, #16]
 801b380:	f880 e014 	strb.w	lr, [r0, #20]
 801b384:	b1d3      	cbz	r3, 801b3bc <uxr_init_input_reliable_stream+0x4c>
 801b386:	f8c1 e000 	str.w	lr, [r1]
 801b38a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801b38e:	f1bc 0f01 	cmp.w	ip, #1
 801b392:	d913      	bls.n	801b3bc <uxr_init_input_reliable_stream+0x4c>
 801b394:	2301      	movs	r3, #1
 801b396:	fbb3 f1fc 	udiv	r1, r3, ip
 801b39a:	fb0c 3111 	mls	r1, ip, r1, r3
 801b39e:	b289      	uxth	r1, r1
 801b3a0:	6842      	ldr	r2, [r0, #4]
 801b3a2:	fbb2 f2fc 	udiv	r2, r2, ip
 801b3a6:	fb01 f202 	mul.w	r2, r1, r2
 801b3aa:	6801      	ldr	r1, [r0, #0]
 801b3ac:	f841 e002 	str.w	lr, [r1, r2]
 801b3b0:	3301      	adds	r3, #1
 801b3b2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801b3b6:	b29b      	uxth	r3, r3
 801b3b8:	459c      	cmp	ip, r3
 801b3ba:	d8ec      	bhi.n	801b396 <uxr_init_input_reliable_stream+0x26>
 801b3bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b3c0:	60c3      	str	r3, [r0, #12]
 801b3c2:	f85d fb04 	ldr.w	pc, [sp], #4
 801b3c6:	bf00      	nop

0801b3c8 <uxr_reset_input_reliable_stream>:
 801b3c8:	8901      	ldrh	r1, [r0, #8]
 801b3ca:	b1e9      	cbz	r1, 801b408 <uxr_reset_input_reliable_stream+0x40>
 801b3cc:	f04f 0c00 	mov.w	ip, #0
 801b3d0:	b500      	push	{lr}
 801b3d2:	4663      	mov	r3, ip
 801b3d4:	46e6      	mov	lr, ip
 801b3d6:	fbb3 f2f1 	udiv	r2, r3, r1
 801b3da:	fb01 3312 	mls	r3, r1, r2, r3
 801b3de:	b29b      	uxth	r3, r3
 801b3e0:	6842      	ldr	r2, [r0, #4]
 801b3e2:	fbb2 f2f1 	udiv	r2, r2, r1
 801b3e6:	fb03 f202 	mul.w	r2, r3, r2
 801b3ea:	6803      	ldr	r3, [r0, #0]
 801b3ec:	f843 e002 	str.w	lr, [r3, r2]
 801b3f0:	f10c 0c01 	add.w	ip, ip, #1
 801b3f4:	8901      	ldrh	r1, [r0, #8]
 801b3f6:	fa1f f38c 	uxth.w	r3, ip
 801b3fa:	4299      	cmp	r1, r3
 801b3fc:	d8eb      	bhi.n	801b3d6 <uxr_reset_input_reliable_stream+0xe>
 801b3fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b402:	60c3      	str	r3, [r0, #12]
 801b404:	f85d fb04 	ldr.w	pc, [sp], #4
 801b408:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b40c:	60c3      	str	r3, [r0, #12]
 801b40e:	4770      	bx	lr

0801b410 <uxr_receive_reliable_message>:
 801b410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b414:	4604      	mov	r4, r0
 801b416:	460d      	mov	r5, r1
 801b418:	8901      	ldrh	r1, [r0, #8]
 801b41a:	8980      	ldrh	r0, [r0, #12]
 801b41c:	4690      	mov	r8, r2
 801b41e:	461f      	mov	r7, r3
 801b420:	f000 fc8c 	bl	801bd3c <uxr_seq_num_add>
 801b424:	4629      	mov	r1, r5
 801b426:	4606      	mov	r6, r0
 801b428:	89a0      	ldrh	r0, [r4, #12]
 801b42a:	f000 fc8f 	bl	801bd4c <uxr_seq_num_cmp>
 801b42e:	2800      	cmp	r0, #0
 801b430:	db0a      	blt.n	801b448 <uxr_receive_reliable_message+0x38>
 801b432:	2600      	movs	r6, #0
 801b434:	89e0      	ldrh	r0, [r4, #14]
 801b436:	4629      	mov	r1, r5
 801b438:	f000 fc88 	bl	801bd4c <uxr_seq_num_cmp>
 801b43c:	2800      	cmp	r0, #0
 801b43e:	bfb8      	it	lt
 801b440:	81e5      	strhlt	r5, [r4, #14]
 801b442:	4630      	mov	r0, r6
 801b444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b448:	4630      	mov	r0, r6
 801b44a:	4629      	mov	r1, r5
 801b44c:	f000 fc7e 	bl	801bd4c <uxr_seq_num_cmp>
 801b450:	2800      	cmp	r0, #0
 801b452:	dbee      	blt.n	801b432 <uxr_receive_reliable_message+0x22>
 801b454:	6923      	ldr	r3, [r4, #16]
 801b456:	4640      	mov	r0, r8
 801b458:	4798      	blx	r3
 801b45a:	2101      	movs	r1, #1
 801b45c:	4606      	mov	r6, r0
 801b45e:	89a0      	ldrh	r0, [r4, #12]
 801b460:	f000 fc6c 	bl	801bd3c <uxr_seq_num_add>
 801b464:	b90e      	cbnz	r6, 801b46a <uxr_receive_reliable_message+0x5a>
 801b466:	4285      	cmp	r5, r0
 801b468:	d046      	beq.n	801b4f8 <uxr_receive_reliable_message+0xe8>
 801b46a:	8921      	ldrh	r1, [r4, #8]
 801b46c:	fbb5 f2f1 	udiv	r2, r5, r1
 801b470:	fb01 5212 	mls	r2, r1, r2, r5
 801b474:	b292      	uxth	r2, r2
 801b476:	6863      	ldr	r3, [r4, #4]
 801b478:	6820      	ldr	r0, [r4, #0]
 801b47a:	fbb3 f3f1 	udiv	r3, r3, r1
 801b47e:	fb02 f303 	mul.w	r3, r2, r3
 801b482:	3304      	adds	r3, #4
 801b484:	4418      	add	r0, r3
 801b486:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	d1d1      	bne.n	801b432 <uxr_receive_reliable_message+0x22>
 801b48e:	4641      	mov	r1, r8
 801b490:	463a      	mov	r2, r7
 801b492:	f002 faa4 	bl	801d9de <memcpy>
 801b496:	8921      	ldrh	r1, [r4, #8]
 801b498:	fbb5 f2f1 	udiv	r2, r5, r1
 801b49c:	fb01 5212 	mls	r2, r1, r2, r5
 801b4a0:	b292      	uxth	r2, r2
 801b4a2:	6863      	ldr	r3, [r4, #4]
 801b4a4:	fbb3 f3f1 	udiv	r3, r3, r1
 801b4a8:	fb02 f303 	mul.w	r3, r2, r3
 801b4ac:	6822      	ldr	r2, [r4, #0]
 801b4ae:	50d7      	str	r7, [r2, r3]
 801b4b0:	9a06      	ldr	r2, [sp, #24]
 801b4b2:	2301      	movs	r3, #1
 801b4b4:	7013      	strb	r3, [r2, #0]
 801b4b6:	2e00      	cmp	r6, #0
 801b4b8:	d0bb      	beq.n	801b432 <uxr_receive_reliable_message+0x22>
 801b4ba:	89a6      	ldrh	r6, [r4, #12]
 801b4bc:	2101      	movs	r1, #1
 801b4be:	4630      	mov	r0, r6
 801b4c0:	f000 fc3c 	bl	801bd3c <uxr_seq_num_add>
 801b4c4:	8921      	ldrh	r1, [r4, #8]
 801b4c6:	fbb0 f2f1 	udiv	r2, r0, r1
 801b4ca:	fb01 0212 	mls	r2, r1, r2, r0
 801b4ce:	b292      	uxth	r2, r2
 801b4d0:	6863      	ldr	r3, [r4, #4]
 801b4d2:	fbb3 f3f1 	udiv	r3, r3, r1
 801b4d6:	4606      	mov	r6, r0
 801b4d8:	fb02 f303 	mul.w	r3, r2, r3
 801b4dc:	6820      	ldr	r0, [r4, #0]
 801b4de:	3304      	adds	r3, #4
 801b4e0:	4418      	add	r0, r3
 801b4e2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b4e6:	2b00      	cmp	r3, #0
 801b4e8:	d0a3      	beq.n	801b432 <uxr_receive_reliable_message+0x22>
 801b4ea:	6923      	ldr	r3, [r4, #16]
 801b4ec:	4798      	blx	r3
 801b4ee:	2802      	cmp	r0, #2
 801b4f0:	d005      	beq.n	801b4fe <uxr_receive_reliable_message+0xee>
 801b4f2:	2801      	cmp	r0, #1
 801b4f4:	d0e2      	beq.n	801b4bc <uxr_receive_reliable_message+0xac>
 801b4f6:	e79c      	b.n	801b432 <uxr_receive_reliable_message+0x22>
 801b4f8:	9b06      	ldr	r3, [sp, #24]
 801b4fa:	81a5      	strh	r5, [r4, #12]
 801b4fc:	701e      	strb	r6, [r3, #0]
 801b4fe:	2601      	movs	r6, #1
 801b500:	e798      	b.n	801b434 <uxr_receive_reliable_message+0x24>
 801b502:	bf00      	nop

0801b504 <uxr_next_input_reliable_buffer_available>:
 801b504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b508:	4604      	mov	r4, r0
 801b50a:	460f      	mov	r7, r1
 801b50c:	8980      	ldrh	r0, [r0, #12]
 801b50e:	2101      	movs	r1, #1
 801b510:	4690      	mov	r8, r2
 801b512:	f000 fc13 	bl	801bd3c <uxr_seq_num_add>
 801b516:	8921      	ldrh	r1, [r4, #8]
 801b518:	fbb0 f2f1 	udiv	r2, r0, r1
 801b51c:	fb01 0212 	mls	r2, r1, r2, r0
 801b520:	b292      	uxth	r2, r2
 801b522:	6863      	ldr	r3, [r4, #4]
 801b524:	6826      	ldr	r6, [r4, #0]
 801b526:	fbb3 f3f1 	udiv	r3, r3, r1
 801b52a:	fb02 f303 	mul.w	r3, r2, r3
 801b52e:	3304      	adds	r3, #4
 801b530:	441e      	add	r6, r3
 801b532:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801b536:	f1b9 0f00 	cmp.w	r9, #0
 801b53a:	d023      	beq.n	801b584 <uxr_next_input_reliable_buffer_available+0x80>
 801b53c:	6923      	ldr	r3, [r4, #16]
 801b53e:	4605      	mov	r5, r0
 801b540:	4630      	mov	r0, r6
 801b542:	4798      	blx	r3
 801b544:	4682      	mov	sl, r0
 801b546:	b300      	cbz	r0, 801b58a <uxr_next_input_reliable_buffer_available+0x86>
 801b548:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801b54c:	2101      	movs	r1, #1
 801b54e:	4650      	mov	r0, sl
 801b550:	f000 fbf4 	bl	801bd3c <uxr_seq_num_add>
 801b554:	8921      	ldrh	r1, [r4, #8]
 801b556:	fbb0 f2f1 	udiv	r2, r0, r1
 801b55a:	4682      	mov	sl, r0
 801b55c:	fb01 0212 	mls	r2, r1, r2, r0
 801b560:	e9d4 0300 	ldrd	r0, r3, [r4]
 801b564:	b292      	uxth	r2, r2
 801b566:	fbb3 f3f1 	udiv	r3, r3, r1
 801b56a:	fb02 f303 	mul.w	r3, r2, r3
 801b56e:	3304      	adds	r3, #4
 801b570:	4418      	add	r0, r3
 801b572:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b576:	b12b      	cbz	r3, 801b584 <uxr_next_input_reliable_buffer_available+0x80>
 801b578:	6923      	ldr	r3, [r4, #16]
 801b57a:	4798      	blx	r3
 801b57c:	2802      	cmp	r0, #2
 801b57e:	d01b      	beq.n	801b5b8 <uxr_next_input_reliable_buffer_available+0xb4>
 801b580:	2801      	cmp	r0, #1
 801b582:	d0e3      	beq.n	801b54c <uxr_next_input_reliable_buffer_available+0x48>
 801b584:	2000      	movs	r0, #0
 801b586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b58a:	464a      	mov	r2, r9
 801b58c:	4631      	mov	r1, r6
 801b58e:	4638      	mov	r0, r7
 801b590:	f7f2 fc6a 	bl	800de68 <ucdr_init_buffer>
 801b594:	8921      	ldrh	r1, [r4, #8]
 801b596:	fbb5 f2f1 	udiv	r2, r5, r1
 801b59a:	fb01 5212 	mls	r2, r1, r2, r5
 801b59e:	b292      	uxth	r2, r2
 801b5a0:	6863      	ldr	r3, [r4, #4]
 801b5a2:	fbb3 f3f1 	udiv	r3, r3, r1
 801b5a6:	fb02 f303 	mul.w	r3, r2, r3
 801b5aa:	6822      	ldr	r2, [r4, #0]
 801b5ac:	f842 a003 	str.w	sl, [r2, r3]
 801b5b0:	81a5      	strh	r5, [r4, #12]
 801b5b2:	2001      	movs	r0, #1
 801b5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b5b8:	eb06 0108 	add.w	r1, r6, r8
 801b5bc:	8926      	ldrh	r6, [r4, #8]
 801b5be:	fbb5 f0f6 	udiv	r0, r5, r6
 801b5c2:	fb06 5010 	mls	r0, r6, r0, r5
 801b5c6:	b280      	uxth	r0, r0
 801b5c8:	6863      	ldr	r3, [r4, #4]
 801b5ca:	fbb3 f3f6 	udiv	r3, r3, r6
 801b5ce:	fb00 f303 	mul.w	r3, r0, r3
 801b5d2:	6820      	ldr	r0, [r4, #0]
 801b5d4:	2500      	movs	r5, #0
 801b5d6:	50c5      	str	r5, [r0, r3]
 801b5d8:	eba9 0208 	sub.w	r2, r9, r8
 801b5dc:	4638      	mov	r0, r7
 801b5de:	f7f2 fc43 	bl	800de68 <ucdr_init_buffer>
 801b5e2:	4903      	ldr	r1, [pc, #12]	@ (801b5f0 <uxr_next_input_reliable_buffer_available+0xec>)
 801b5e4:	4622      	mov	r2, r4
 801b5e6:	4638      	mov	r0, r7
 801b5e8:	f7f2 fc12 	bl	800de10 <ucdr_set_on_full_buffer_callback>
 801b5ec:	4655      	mov	r5, sl
 801b5ee:	e7df      	b.n	801b5b0 <uxr_next_input_reliable_buffer_available+0xac>
 801b5f0:	0801b30d 	.word	0x0801b30d

0801b5f4 <uxr_process_heartbeat>:
 801b5f4:	b538      	push	{r3, r4, r5, lr}
 801b5f6:	4611      	mov	r1, r2
 801b5f8:	4604      	mov	r4, r0
 801b5fa:	89c0      	ldrh	r0, [r0, #14]
 801b5fc:	4615      	mov	r5, r2
 801b5fe:	f000 fba5 	bl	801bd4c <uxr_seq_num_cmp>
 801b602:	2800      	cmp	r0, #0
 801b604:	bfb8      	it	lt
 801b606:	81e5      	strhlt	r5, [r4, #14]
 801b608:	bd38      	pop	{r3, r4, r5, pc}
 801b60a:	bf00      	nop

0801b60c <uxr_compute_acknack>:
 801b60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b610:	8903      	ldrh	r3, [r0, #8]
 801b612:	8985      	ldrh	r5, [r0, #12]
 801b614:	4604      	mov	r4, r0
 801b616:	460e      	mov	r6, r1
 801b618:	2b00      	cmp	r3, #0
 801b61a:	d048      	beq.n	801b6ae <uxr_compute_acknack+0xa2>
 801b61c:	4628      	mov	r0, r5
 801b61e:	2701      	movs	r7, #1
 801b620:	e003      	b.n	801b62a <uxr_compute_acknack+0x1e>
 801b622:	4567      	cmp	r7, ip
 801b624:	d243      	bcs.n	801b6ae <uxr_compute_acknack+0xa2>
 801b626:	89a0      	ldrh	r0, [r4, #12]
 801b628:	3701      	adds	r7, #1
 801b62a:	b2b9      	uxth	r1, r7
 801b62c:	f000 fb86 	bl	801bd3c <uxr_seq_num_add>
 801b630:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801b634:	fbb0 f2fc 	udiv	r2, r0, ip
 801b638:	e9d4 1300 	ldrd	r1, r3, [r4]
 801b63c:	fb0c 0212 	mls	r2, ip, r2, r0
 801b640:	b292      	uxth	r2, r2
 801b642:	fbb3 f3fc 	udiv	r3, r3, ip
 801b646:	fb02 f303 	mul.w	r3, r2, r3
 801b64a:	58cb      	ldr	r3, [r1, r3]
 801b64c:	2b00      	cmp	r3, #0
 801b64e:	d1e8      	bne.n	801b622 <uxr_compute_acknack+0x16>
 801b650:	8030      	strh	r0, [r6, #0]
 801b652:	2101      	movs	r1, #1
 801b654:	89e5      	ldrh	r5, [r4, #14]
 801b656:	f000 fb75 	bl	801bd44 <uxr_seq_num_sub>
 801b65a:	4601      	mov	r1, r0
 801b65c:	4628      	mov	r0, r5
 801b65e:	f000 fb71 	bl	801bd44 <uxr_seq_num_sub>
 801b662:	4605      	mov	r5, r0
 801b664:	4607      	mov	r7, r0
 801b666:	b1f8      	cbz	r0, 801b6a8 <uxr_compute_acknack+0x9c>
 801b668:	f04f 0900 	mov.w	r9, #0
 801b66c:	464d      	mov	r5, r9
 801b66e:	f04f 0801 	mov.w	r8, #1
 801b672:	fa1f f189 	uxth.w	r1, r9
 801b676:	8830      	ldrh	r0, [r6, #0]
 801b678:	f000 fb60 	bl	801bd3c <uxr_seq_num_add>
 801b67c:	8921      	ldrh	r1, [r4, #8]
 801b67e:	fbb0 f3f1 	udiv	r3, r0, r1
 801b682:	fb03 0011 	mls	r0, r3, r1, r0
 801b686:	e9d4 2300 	ldrd	r2, r3, [r4]
 801b68a:	b280      	uxth	r0, r0
 801b68c:	fbb3 f3f1 	udiv	r3, r3, r1
 801b690:	fb00 f303 	mul.w	r3, r0, r3
 801b694:	fa08 f109 	lsl.w	r1, r8, r9
 801b698:	58d3      	ldr	r3, [r2, r3]
 801b69a:	f109 0901 	add.w	r9, r9, #1
 801b69e:	b90b      	cbnz	r3, 801b6a4 <uxr_compute_acknack+0x98>
 801b6a0:	4329      	orrs	r1, r5
 801b6a2:	b28d      	uxth	r5, r1
 801b6a4:	454f      	cmp	r7, r9
 801b6a6:	d1e4      	bne.n	801b672 <uxr_compute_acknack+0x66>
 801b6a8:	4628      	mov	r0, r5
 801b6aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b6ae:	4628      	mov	r0, r5
 801b6b0:	e7ce      	b.n	801b650 <uxr_compute_acknack+0x44>
 801b6b2:	bf00      	nop

0801b6b4 <uxr_init_output_best_effort_stream>:
 801b6b4:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801b6b8:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801b6bc:	6001      	str	r1, [r0, #0]
 801b6be:	7303      	strb	r3, [r0, #12]
 801b6c0:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801b6c4:	4770      	bx	lr
 801b6c6:	bf00      	nop

0801b6c8 <uxr_reset_output_best_effort_stream>:
 801b6c8:	7b02      	ldrb	r2, [r0, #12]
 801b6ca:	6042      	str	r2, [r0, #4]
 801b6cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b6d0:	81c3      	strh	r3, [r0, #14]
 801b6d2:	4770      	bx	lr

0801b6d4 <uxr_prepare_best_effort_buffer_to_write>:
 801b6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b6d6:	4604      	mov	r4, r0
 801b6d8:	b083      	sub	sp, #12
 801b6da:	6840      	ldr	r0, [r0, #4]
 801b6dc:	460d      	mov	r5, r1
 801b6de:	4616      	mov	r6, r2
 801b6e0:	f7f9 fb62 	bl	8014da8 <uxr_submessage_padding>
 801b6e4:	6863      	ldr	r3, [r4, #4]
 801b6e6:	4418      	add	r0, r3
 801b6e8:	68a3      	ldr	r3, [r4, #8]
 801b6ea:	1942      	adds	r2, r0, r5
 801b6ec:	4293      	cmp	r3, r2
 801b6ee:	bf2c      	ite	cs
 801b6f0:	2701      	movcs	r7, #1
 801b6f2:	2700      	movcc	r7, #0
 801b6f4:	d202      	bcs.n	801b6fc <uxr_prepare_best_effort_buffer_to_write+0x28>
 801b6f6:	4638      	mov	r0, r7
 801b6f8:	b003      	add	sp, #12
 801b6fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b6fc:	9000      	str	r0, [sp, #0]
 801b6fe:	6821      	ldr	r1, [r4, #0]
 801b700:	4630      	mov	r0, r6
 801b702:	2300      	movs	r3, #0
 801b704:	f7f2 fb9e 	bl	800de44 <ucdr_init_buffer_origin_offset>
 801b708:	6863      	ldr	r3, [r4, #4]
 801b70a:	4638      	mov	r0, r7
 801b70c:	442b      	add	r3, r5
 801b70e:	6063      	str	r3, [r4, #4]
 801b710:	b003      	add	sp, #12
 801b712:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b714 <uxr_prepare_best_effort_buffer_to_send>:
 801b714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b718:	4604      	mov	r4, r0
 801b71a:	461d      	mov	r5, r3
 801b71c:	6840      	ldr	r0, [r0, #4]
 801b71e:	7b23      	ldrb	r3, [r4, #12]
 801b720:	4298      	cmp	r0, r3
 801b722:	bf8c      	ite	hi
 801b724:	2601      	movhi	r6, #1
 801b726:	2600      	movls	r6, #0
 801b728:	d802      	bhi.n	801b730 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801b72a:	4630      	mov	r0, r6
 801b72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b730:	4688      	mov	r8, r1
 801b732:	89e0      	ldrh	r0, [r4, #14]
 801b734:	2101      	movs	r1, #1
 801b736:	4617      	mov	r7, r2
 801b738:	f000 fb00 	bl	801bd3c <uxr_seq_num_add>
 801b73c:	6823      	ldr	r3, [r4, #0]
 801b73e:	81e0      	strh	r0, [r4, #14]
 801b740:	8028      	strh	r0, [r5, #0]
 801b742:	f8c8 3000 	str.w	r3, [r8]
 801b746:	6863      	ldr	r3, [r4, #4]
 801b748:	603b      	str	r3, [r7, #0]
 801b74a:	7b23      	ldrb	r3, [r4, #12]
 801b74c:	6063      	str	r3, [r4, #4]
 801b74e:	4630      	mov	r0, r6
 801b750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b754 <on_full_output_buffer>:
 801b754:	b538      	push	{r3, r4, r5, lr}
 801b756:	460c      	mov	r4, r1
 801b758:	6803      	ldr	r3, [r0, #0]
 801b75a:	6809      	ldr	r1, [r1, #0]
 801b75c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801b760:	6862      	ldr	r2, [r4, #4]
 801b762:	fbb2 f2fc 	udiv	r2, r2, ip
 801b766:	1a5b      	subs	r3, r3, r1
 801b768:	fbb3 f3f2 	udiv	r3, r3, r2
 801b76c:	3301      	adds	r3, #1
 801b76e:	b29b      	uxth	r3, r3
 801b770:	fbb3 fefc 	udiv	lr, r3, ip
 801b774:	fb0c 331e 	mls	r3, ip, lr, r3
 801b778:	b29b      	uxth	r3, r3
 801b77a:	fb02 f303 	mul.w	r3, r2, r3
 801b77e:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801b782:	58ca      	ldr	r2, [r1, r3]
 801b784:	4463      	add	r3, ip
 801b786:	eba2 020c 	sub.w	r2, r2, ip
 801b78a:	3308      	adds	r3, #8
 801b78c:	4605      	mov	r5, r0
 801b78e:	4419      	add	r1, r3
 801b790:	3a04      	subs	r2, #4
 801b792:	6903      	ldr	r3, [r0, #16]
 801b794:	f7f2 fb60 	bl	800de58 <ucdr_init_buffer_origin>
 801b798:	4628      	mov	r0, r5
 801b79a:	4903      	ldr	r1, [pc, #12]	@ (801b7a8 <on_full_output_buffer+0x54>)
 801b79c:	4622      	mov	r2, r4
 801b79e:	f7f2 fb37 	bl	800de10 <ucdr_set_on_full_buffer_callback>
 801b7a2:	2000      	movs	r0, #0
 801b7a4:	bd38      	pop	{r3, r4, r5, pc}
 801b7a6:	bf00      	nop
 801b7a8:	0801b755 	.word	0x0801b755

0801b7ac <uxr_init_output_reliable_stream>:
 801b7ac:	b410      	push	{r4}
 801b7ae:	f89d c004 	ldrb.w	ip, [sp, #4]
 801b7b2:	8103      	strh	r3, [r0, #8]
 801b7b4:	e9c0 1200 	strd	r1, r2, [r0]
 801b7b8:	f880 c00c 	strb.w	ip, [r0, #12]
 801b7bc:	b1d3      	cbz	r3, 801b7f4 <uxr_init_output_reliable_stream+0x48>
 801b7be:	f8c1 c000 	str.w	ip, [r1]
 801b7c2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801b7c6:	f1bc 0f01 	cmp.w	ip, #1
 801b7ca:	d913      	bls.n	801b7f4 <uxr_init_output_reliable_stream+0x48>
 801b7cc:	2301      	movs	r3, #1
 801b7ce:	fbb3 f1fc 	udiv	r1, r3, ip
 801b7d2:	fb0c 3111 	mls	r1, ip, r1, r3
 801b7d6:	b289      	uxth	r1, r1
 801b7d8:	6842      	ldr	r2, [r0, #4]
 801b7da:	6804      	ldr	r4, [r0, #0]
 801b7dc:	fbb2 f2fc 	udiv	r2, r2, ip
 801b7e0:	fb01 f202 	mul.w	r2, r1, r2
 801b7e4:	7b01      	ldrb	r1, [r0, #12]
 801b7e6:	50a1      	str	r1, [r4, r2]
 801b7e8:	3301      	adds	r3, #1
 801b7ea:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801b7ee:	b29b      	uxth	r3, r3
 801b7f0:	459c      	cmp	ip, r3
 801b7f2:	d8ec      	bhi.n	801b7ce <uxr_init_output_reliable_stream+0x22>
 801b7f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b7f8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801b7fc:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801b800:	4905      	ldr	r1, [pc, #20]	@ (801b818 <uxr_init_output_reliable_stream+0x6c>)
 801b802:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b806:	f8c0 100e 	str.w	r1, [r0, #14]
 801b80a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b80e:	2300      	movs	r3, #0
 801b810:	8242      	strh	r2, [r0, #18]
 801b812:	8403      	strh	r3, [r0, #32]
 801b814:	4770      	bx	lr
 801b816:	bf00      	nop
 801b818:	ffff0000 	.word	0xffff0000

0801b81c <uxr_reset_output_reliable_stream>:
 801b81c:	8901      	ldrh	r1, [r0, #8]
 801b81e:	b1b1      	cbz	r1, 801b84e <uxr_reset_output_reliable_stream+0x32>
 801b820:	f04f 0c00 	mov.w	ip, #0
 801b824:	4663      	mov	r3, ip
 801b826:	fbb3 f2f1 	udiv	r2, r3, r1
 801b82a:	fb01 3312 	mls	r3, r1, r2, r3
 801b82e:	b29b      	uxth	r3, r3
 801b830:	6842      	ldr	r2, [r0, #4]
 801b832:	fbb2 f2f1 	udiv	r2, r2, r1
 801b836:	6801      	ldr	r1, [r0, #0]
 801b838:	fb03 f202 	mul.w	r2, r3, r2
 801b83c:	7b03      	ldrb	r3, [r0, #12]
 801b83e:	508b      	str	r3, [r1, r2]
 801b840:	f10c 0c01 	add.w	ip, ip, #1
 801b844:	8901      	ldrh	r1, [r0, #8]
 801b846:	fa1f f38c 	uxth.w	r3, ip
 801b84a:	4299      	cmp	r1, r3
 801b84c:	d8eb      	bhi.n	801b826 <uxr_reset_output_reliable_stream+0xa>
 801b84e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b852:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801b856:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801b85a:	4904      	ldr	r1, [pc, #16]	@ (801b86c <uxr_reset_output_reliable_stream+0x50>)
 801b85c:	f8c0 100e 	str.w	r1, [r0, #14]
 801b860:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b864:	2300      	movs	r3, #0
 801b866:	8242      	strh	r2, [r0, #18]
 801b868:	8403      	strh	r3, [r0, #32]
 801b86a:	4770      	bx	lr
 801b86c:	ffff0000 	.word	0xffff0000

0801b870 <uxr_prepare_reliable_buffer_to_write>:
 801b870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b874:	4604      	mov	r4, r0
 801b876:	b091      	sub	sp, #68	@ 0x44
 801b878:	8900      	ldrh	r0, [r0, #8]
 801b87a:	89e7      	ldrh	r7, [r4, #14]
 801b87c:	6823      	ldr	r3, [r4, #0]
 801b87e:	9204      	str	r2, [sp, #16]
 801b880:	fbb7 f2f0 	udiv	r2, r7, r0
 801b884:	fb00 7212 	mls	r2, r0, r2, r7
 801b888:	b292      	uxth	r2, r2
 801b88a:	6865      	ldr	r5, [r4, #4]
 801b88c:	fbb5 f5f0 	udiv	r5, r5, r0
 801b890:	fb05 3202 	mla	r2, r5, r2, r3
 801b894:	3204      	adds	r2, #4
 801b896:	f852 ac04 	ldr.w	sl, [r2, #-4]
 801b89a:	f894 b00c 	ldrb.w	fp, [r4, #12]
 801b89e:	9203      	str	r2, [sp, #12]
 801b8a0:	4688      	mov	r8, r1
 801b8a2:	f1a5 0904 	sub.w	r9, r5, #4
 801b8a6:	2800      	cmp	r0, #0
 801b8a8:	f000 8143 	beq.w	801bb32 <uxr_prepare_reliable_buffer_to_write+0x2c2>
 801b8ac:	2100      	movs	r1, #0
 801b8ae:	460e      	mov	r6, r1
 801b8b0:	b28a      	uxth	r2, r1
 801b8b2:	fbb2 fcf0 	udiv	ip, r2, r0
 801b8b6:	fb00 221c 	mls	r2, r0, ip, r2
 801b8ba:	b292      	uxth	r2, r2
 801b8bc:	fb05 f202 	mul.w	r2, r5, r2
 801b8c0:	3101      	adds	r1, #1
 801b8c2:	589a      	ldr	r2, [r3, r2]
 801b8c4:	455a      	cmp	r2, fp
 801b8c6:	bf04      	itt	eq
 801b8c8:	3601      	addeq	r6, #1
 801b8ca:	b2b6      	uxtheq	r6, r6
 801b8cc:	4281      	cmp	r1, r0
 801b8ce:	d1ef      	bne.n	801b8b0 <uxr_prepare_reliable_buffer_to_write+0x40>
 801b8d0:	4650      	mov	r0, sl
 801b8d2:	2104      	movs	r1, #4
 801b8d4:	9605      	str	r6, [sp, #20]
 801b8d6:	f7f2 facb 	bl	800de70 <ucdr_alignment>
 801b8da:	4482      	add	sl, r0
 801b8dc:	eb0a 0208 	add.w	r2, sl, r8
 801b8e0:	454a      	cmp	r2, r9
 801b8e2:	f240 80ca 	bls.w	801ba7a <uxr_prepare_reliable_buffer_to_write+0x20a>
 801b8e6:	7b22      	ldrb	r2, [r4, #12]
 801b8e8:	4442      	add	r2, r8
 801b8ea:	454a      	cmp	r2, r9
 801b8ec:	f240 80b2 	bls.w	801ba54 <uxr_prepare_reliable_buffer_to_write+0x1e4>
 801b8f0:	f5cb 427f 	rsb	r2, fp, #65280	@ 0xff00
 801b8f4:	32fc      	adds	r2, #252	@ 0xfc
 801b8f6:	fa1f f389 	uxth.w	r3, r9
 801b8fa:	441a      	add	r2, r3
 801b8fc:	b292      	uxth	r2, r2
 801b8fe:	fb06 fb02 	mul.w	fp, r6, r2
 801b902:	45c3      	cmp	fp, r8
 801b904:	9205      	str	r2, [sp, #20]
 801b906:	9206      	str	r2, [sp, #24]
 801b908:	f0c0 80b3 	bcc.w	801ba72 <uxr_prepare_reliable_buffer_to_write+0x202>
 801b90c:	f10a 0204 	add.w	r2, sl, #4
 801b910:	454a      	cmp	r2, r9
 801b912:	f080 80db 	bcs.w	801bacc <uxr_prepare_reliable_buffer_to_write+0x25c>
 801b916:	f1a3 0b04 	sub.w	fp, r3, #4
 801b91a:	ebab 0b0a 	sub.w	fp, fp, sl
 801b91e:	9b05      	ldr	r3, [sp, #20]
 801b920:	fa1f fb8b 	uxth.w	fp, fp
 801b924:	eba8 080b 	sub.w	r8, r8, fp
 801b928:	fbb8 fcf3 	udiv	ip, r8, r3
 801b92c:	fb03 831c 	mls	r3, r3, ip, r8
 801b930:	fa1f fc8c 	uxth.w	ip, ip
 801b934:	2b00      	cmp	r3, #0
 801b936:	f040 80c1 	bne.w	801babc <uxr_prepare_reliable_buffer_to_write+0x24c>
 801b93a:	45b4      	cmp	ip, r6
 801b93c:	f200 8099 	bhi.w	801ba72 <uxr_prepare_reliable_buffer_to_write+0x202>
 801b940:	f10d 0820 	add.w	r8, sp, #32
 801b944:	f1bc 0f00 	cmp.w	ip, #0
 801b948:	d040      	beq.n	801b9cc <uxr_prepare_reliable_buffer_to_write+0x15c>
 801b94a:	f8cd a01c 	str.w	sl, [sp, #28]
 801b94e:	2600      	movs	r6, #0
 801b950:	f8dd a014 	ldr.w	sl, [sp, #20]
 801b954:	9505      	str	r5, [sp, #20]
 801b956:	f10d 0820 	add.w	r8, sp, #32
 801b95a:	4665      	mov	r5, ip
 801b95c:	e000      	b.n	801b960 <uxr_prepare_reliable_buffer_to_write+0xf0>
 801b95e:	46d3      	mov	fp, sl
 801b960:	8921      	ldrh	r1, [r4, #8]
 801b962:	fbb7 f2f1 	udiv	r2, r7, r1
 801b966:	fb01 7212 	mls	r2, r1, r2, r7
 801b96a:	b292      	uxth	r2, r2
 801b96c:	6863      	ldr	r3, [r4, #4]
 801b96e:	fbb3 f3f1 	udiv	r3, r3, r1
 801b972:	6821      	ldr	r1, [r4, #0]
 801b974:	fb02 f303 	mul.w	r3, r2, r3
 801b978:	3304      	adds	r3, #4
 801b97a:	4419      	add	r1, r3
 801b97c:	4640      	mov	r0, r8
 801b97e:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801b982:	9200      	str	r2, [sp, #0]
 801b984:	2300      	movs	r3, #0
 801b986:	464a      	mov	r2, r9
 801b988:	f7f2 fa5c 	bl	800de44 <ucdr_init_buffer_origin_offset>
 801b98c:	465a      	mov	r2, fp
 801b98e:	2300      	movs	r3, #0
 801b990:	210d      	movs	r1, #13
 801b992:	4640      	mov	r0, r8
 801b994:	f7f9 f9c8 	bl	8014d28 <uxr_buffer_submessage_header>
 801b998:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801b99c:	fbb7 f2fc 	udiv	r2, r7, ip
 801b9a0:	fb0c 7212 	mls	r2, ip, r2, r7
 801b9a4:	b292      	uxth	r2, r2
 801b9a6:	6863      	ldr	r3, [r4, #4]
 801b9a8:	fbb3 f3fc 	udiv	r3, r3, ip
 801b9ac:	fb02 f303 	mul.w	r3, r2, r3
 801b9b0:	6822      	ldr	r2, [r4, #0]
 801b9b2:	4638      	mov	r0, r7
 801b9b4:	f842 9003 	str.w	r9, [r2, r3]
 801b9b8:	2101      	movs	r1, #1
 801b9ba:	f000 f9bf 	bl	801bd3c <uxr_seq_num_add>
 801b9be:	3601      	adds	r6, #1
 801b9c0:	42ae      	cmp	r6, r5
 801b9c2:	4607      	mov	r7, r0
 801b9c4:	d1cb      	bne.n	801b95e <uxr_prepare_reliable_buffer_to_write+0xee>
 801b9c6:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801b9ca:	9d05      	ldr	r5, [sp, #20]
 801b9cc:	8920      	ldrh	r0, [r4, #8]
 801b9ce:	fbb7 f1f0 	udiv	r1, r7, r0
 801b9d2:	fb00 7111 	mls	r1, r0, r1, r7
 801b9d6:	b289      	uxth	r1, r1
 801b9d8:	6863      	ldr	r3, [r4, #4]
 801b9da:	fbb3 f3f0 	udiv	r3, r3, r0
 801b9de:	fb01 f303 	mul.w	r3, r1, r3
 801b9e2:	6821      	ldr	r1, [r4, #0]
 801b9e4:	3304      	adds	r3, #4
 801b9e6:	4419      	add	r1, r3
 801b9e8:	464a      	mov	r2, r9
 801b9ea:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801b9ee:	9000      	str	r0, [sp, #0]
 801b9f0:	2300      	movs	r3, #0
 801b9f2:	4640      	mov	r0, r8
 801b9f4:	f7f2 fa26 	bl	800de44 <ucdr_init_buffer_origin_offset>
 801b9f8:	4640      	mov	r0, r8
 801b9fa:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801b9fe:	2302      	movs	r3, #2
 801ba00:	fa1f f288 	uxth.w	r2, r8
 801ba04:	210d      	movs	r1, #13
 801ba06:	f7f9 f98f 	bl	8014d28 <uxr_buffer_submessage_header>
 801ba0a:	8926      	ldrh	r6, [r4, #8]
 801ba0c:	9b03      	ldr	r3, [sp, #12]
 801ba0e:	7b20      	ldrb	r0, [r4, #12]
 801ba10:	f1a5 0208 	sub.w	r2, r5, #8
 801ba14:	f10a 0104 	add.w	r1, sl, #4
 801ba18:	fbb7 f5f6 	udiv	r5, r7, r6
 801ba1c:	fb06 7515 	mls	r5, r6, r5, r7
 801ba20:	440b      	add	r3, r1
 801ba22:	b2ad      	uxth	r5, r5
 801ba24:	4619      	mov	r1, r3
 801ba26:	3004      	adds	r0, #4
 801ba28:	6863      	ldr	r3, [r4, #4]
 801ba2a:	fbb3 f3f6 	udiv	r3, r3, r6
 801ba2e:	fb05 f303 	mul.w	r3, r5, r3
 801ba32:	6825      	ldr	r5, [r4, #0]
 801ba34:	4440      	add	r0, r8
 801ba36:	50e8      	str	r0, [r5, r3]
 801ba38:	9d04      	ldr	r5, [sp, #16]
 801ba3a:	eba2 020a 	sub.w	r2, r2, sl
 801ba3e:	4628      	mov	r0, r5
 801ba40:	f7f2 fa12 	bl	800de68 <ucdr_init_buffer>
 801ba44:	493c      	ldr	r1, [pc, #240]	@ (801bb38 <uxr_prepare_reliable_buffer_to_write+0x2c8>)
 801ba46:	4622      	mov	r2, r4
 801ba48:	4628      	mov	r0, r5
 801ba4a:	f7f2 f9e1 	bl	800de10 <ucdr_set_on_full_buffer_callback>
 801ba4e:	81e7      	strh	r7, [r4, #14]
 801ba50:	2001      	movs	r0, #1
 801ba52:	e00f      	b.n	801ba74 <uxr_prepare_reliable_buffer_to_write+0x204>
 801ba54:	2101      	movs	r1, #1
 801ba56:	89e0      	ldrh	r0, [r4, #14]
 801ba58:	f000 f970 	bl	801bd3c <uxr_seq_num_add>
 801ba5c:	8921      	ldrh	r1, [r4, #8]
 801ba5e:	4605      	mov	r5, r0
 801ba60:	8a60      	ldrh	r0, [r4, #18]
 801ba62:	f000 f96b 	bl	801bd3c <uxr_seq_num_add>
 801ba66:	4601      	mov	r1, r0
 801ba68:	4628      	mov	r0, r5
 801ba6a:	f000 f96f 	bl	801bd4c <uxr_seq_num_cmp>
 801ba6e:	2800      	cmp	r0, #0
 801ba70:	dd45      	ble.n	801bafe <uxr_prepare_reliable_buffer_to_write+0x28e>
 801ba72:	2000      	movs	r0, #0
 801ba74:	b011      	add	sp, #68	@ 0x44
 801ba76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba7a:	8921      	ldrh	r1, [r4, #8]
 801ba7c:	8a60      	ldrh	r0, [r4, #18]
 801ba7e:	9205      	str	r2, [sp, #20]
 801ba80:	f000 f95c 	bl	801bd3c <uxr_seq_num_add>
 801ba84:	4601      	mov	r1, r0
 801ba86:	4638      	mov	r0, r7
 801ba88:	f000 f960 	bl	801bd4c <uxr_seq_num_cmp>
 801ba8c:	2800      	cmp	r0, #0
 801ba8e:	9a05      	ldr	r2, [sp, #20]
 801ba90:	dcef      	bgt.n	801ba72 <uxr_prepare_reliable_buffer_to_write+0x202>
 801ba92:	8926      	ldrh	r6, [r4, #8]
 801ba94:	fbb7 f5f6 	udiv	r5, r7, r6
 801ba98:	fb06 7515 	mls	r5, r6, r5, r7
 801ba9c:	b2ad      	uxth	r5, r5
 801ba9e:	6863      	ldr	r3, [r4, #4]
 801baa0:	6824      	ldr	r4, [r4, #0]
 801baa2:	fbb3 f3f6 	udiv	r3, r3, r6
 801baa6:	fb05 f303 	mul.w	r3, r5, r3
 801baaa:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801baae:	50e2      	str	r2, [r4, r3]
 801bab0:	2300      	movs	r3, #0
 801bab2:	f8cd a000 	str.w	sl, [sp]
 801bab6:	f7f2 f9c5 	bl	800de44 <ucdr_init_buffer_origin_offset>
 801baba:	e7c9      	b.n	801ba50 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 801babc:	f10c 0c01 	add.w	ip, ip, #1
 801bac0:	fa1f fc8c 	uxth.w	ip, ip
 801bac4:	45b4      	cmp	ip, r6
 801bac6:	9306      	str	r3, [sp, #24]
 801bac8:	d8d3      	bhi.n	801ba72 <uxr_prepare_reliable_buffer_to_write+0x202>
 801baca:	e739      	b.n	801b940 <uxr_prepare_reliable_buffer_to_write+0xd0>
 801bacc:	4638      	mov	r0, r7
 801bace:	2101      	movs	r1, #1
 801bad0:	9307      	str	r3, [sp, #28]
 801bad2:	f000 f933 	bl	801bd3c <uxr_seq_num_add>
 801bad6:	8921      	ldrh	r1, [r4, #8]
 801bad8:	6862      	ldr	r2, [r4, #4]
 801bada:	4607      	mov	r7, r0
 801badc:	fbb0 f0f1 	udiv	r0, r0, r1
 801bae0:	fb01 7010 	mls	r0, r1, r0, r7
 801bae4:	b280      	uxth	r0, r0
 801bae6:	fbb2 f1f1 	udiv	r1, r2, r1
 801baea:	6822      	ldr	r2, [r4, #0]
 801baec:	fb00 f101 	mul.w	r1, r0, r1
 801baf0:	3104      	adds	r1, #4
 801baf2:	1853      	adds	r3, r2, r1
 801baf4:	9303      	str	r3, [sp, #12]
 801baf6:	f853 ac04 	ldr.w	sl, [r3, #-4]
 801bafa:	9b07      	ldr	r3, [sp, #28]
 801bafc:	e70b      	b.n	801b916 <uxr_prepare_reliable_buffer_to_write+0xa6>
 801bafe:	8921      	ldrh	r1, [r4, #8]
 801bb00:	fbb5 f2f1 	udiv	r2, r5, r1
 801bb04:	fb01 5212 	mls	r2, r1, r2, r5
 801bb08:	b292      	uxth	r2, r2
 801bb0a:	6863      	ldr	r3, [r4, #4]
 801bb0c:	fbb3 f3f1 	udiv	r3, r3, r1
 801bb10:	6821      	ldr	r1, [r4, #0]
 801bb12:	9804      	ldr	r0, [sp, #16]
 801bb14:	fb02 f303 	mul.w	r3, r2, r3
 801bb18:	3304      	adds	r3, #4
 801bb1a:	7b22      	ldrb	r2, [r4, #12]
 801bb1c:	4419      	add	r1, r3
 801bb1e:	4442      	add	r2, r8
 801bb20:	f841 2c04 	str.w	r2, [r1, #-4]
 801bb24:	7b23      	ldrb	r3, [r4, #12]
 801bb26:	9300      	str	r3, [sp, #0]
 801bb28:	2300      	movs	r3, #0
 801bb2a:	f7f2 f98b 	bl	800de44 <ucdr_init_buffer_origin_offset>
 801bb2e:	81e5      	strh	r5, [r4, #14]
 801bb30:	e78e      	b.n	801ba50 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 801bb32:	4606      	mov	r6, r0
 801bb34:	e6cc      	b.n	801b8d0 <uxr_prepare_reliable_buffer_to_write+0x60>
 801bb36:	bf00      	nop
 801bb38:	0801b755 	.word	0x0801b755

0801bb3c <uxr_prepare_next_reliable_buffer_to_send>:
 801bb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb3e:	4604      	mov	r4, r0
 801bb40:	460f      	mov	r7, r1
 801bb42:	8a00      	ldrh	r0, [r0, #16]
 801bb44:	2101      	movs	r1, #1
 801bb46:	4615      	mov	r5, r2
 801bb48:	461e      	mov	r6, r3
 801bb4a:	f000 f8f7 	bl	801bd3c <uxr_seq_num_add>
 801bb4e:	8030      	strh	r0, [r6, #0]
 801bb50:	8922      	ldrh	r2, [r4, #8]
 801bb52:	fbb0 f3f2 	udiv	r3, r0, r2
 801bb56:	fb02 0c13 	mls	ip, r2, r3, r0
 801bb5a:	fa1f fc8c 	uxth.w	ip, ip
 801bb5e:	6863      	ldr	r3, [r4, #4]
 801bb60:	fbb3 f3f2 	udiv	r3, r3, r2
 801bb64:	fb0c fc03 	mul.w	ip, ip, r3
 801bb68:	6823      	ldr	r3, [r4, #0]
 801bb6a:	89e1      	ldrh	r1, [r4, #14]
 801bb6c:	f10c 0c04 	add.w	ip, ip, #4
 801bb70:	4463      	add	r3, ip
 801bb72:	603b      	str	r3, [r7, #0]
 801bb74:	6823      	ldr	r3, [r4, #0]
 801bb76:	4463      	add	r3, ip
 801bb78:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801bb7c:	602b      	str	r3, [r5, #0]
 801bb7e:	f000 f8e5 	bl	801bd4c <uxr_seq_num_cmp>
 801bb82:	2800      	cmp	r0, #0
 801bb84:	dd01      	ble.n	801bb8a <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801bb86:	2000      	movs	r0, #0
 801bb88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bb8a:	7b23      	ldrb	r3, [r4, #12]
 801bb8c:	682a      	ldr	r2, [r5, #0]
 801bb8e:	429a      	cmp	r2, r3
 801bb90:	d9f9      	bls.n	801bb86 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801bb92:	8a61      	ldrh	r1, [r4, #18]
 801bb94:	8a20      	ldrh	r0, [r4, #16]
 801bb96:	f000 f8d5 	bl	801bd44 <uxr_seq_num_sub>
 801bb9a:	8923      	ldrh	r3, [r4, #8]
 801bb9c:	4283      	cmp	r3, r0
 801bb9e:	d0f2      	beq.n	801bb86 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801bba0:	8830      	ldrh	r0, [r6, #0]
 801bba2:	89e3      	ldrh	r3, [r4, #14]
 801bba4:	8220      	strh	r0, [r4, #16]
 801bba6:	4298      	cmp	r0, r3
 801bba8:	d001      	beq.n	801bbae <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801bbaa:	2001      	movs	r0, #1
 801bbac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bbae:	2101      	movs	r1, #1
 801bbb0:	f000 f8c4 	bl	801bd3c <uxr_seq_num_add>
 801bbb4:	81e0      	strh	r0, [r4, #14]
 801bbb6:	e7f8      	b.n	801bbaa <uxr_prepare_next_reliable_buffer_to_send+0x6e>

0801bbb8 <uxr_update_output_stream_heartbeat_timestamp>:
 801bbb8:	b570      	push	{r4, r5, r6, lr}
 801bbba:	8a01      	ldrh	r1, [r0, #16]
 801bbbc:	4604      	mov	r4, r0
 801bbbe:	8a40      	ldrh	r0, [r0, #18]
 801bbc0:	4615      	mov	r5, r2
 801bbc2:	461e      	mov	r6, r3
 801bbc4:	f000 f8c2 	bl	801bd4c <uxr_seq_num_cmp>
 801bbc8:	2800      	cmp	r0, #0
 801bbca:	db07      	blt.n	801bbdc <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801bbcc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801bbd0:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 801bbd4:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801bbd8:	2000      	movs	r0, #0
 801bbda:	bd70      	pop	{r4, r5, r6, pc}
 801bbdc:	f894 3020 	ldrb.w	r3, [r4, #32]
 801bbe0:	b953      	cbnz	r3, 801bbf8 <uxr_update_output_stream_heartbeat_timestamp+0x40>
 801bbe2:	2301      	movs	r3, #1
 801bbe4:	f884 3020 	strb.w	r3, [r4, #32]
 801bbe8:	3564      	adds	r5, #100	@ 0x64
 801bbea:	f04f 0000 	mov.w	r0, #0
 801bbee:	f146 0600 	adc.w	r6, r6, #0
 801bbf2:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801bbf6:	bd70      	pop	{r4, r5, r6, pc}
 801bbf8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801bbfc:	428d      	cmp	r5, r1
 801bbfe:	eb76 0202 	sbcs.w	r2, r6, r2
 801bc02:	dbf1      	blt.n	801bbe8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801bc04:	3301      	adds	r3, #1
 801bc06:	3564      	adds	r5, #100	@ 0x64
 801bc08:	f884 3020 	strb.w	r3, [r4, #32]
 801bc0c:	f04f 0001 	mov.w	r0, #1
 801bc10:	f146 0600 	adc.w	r6, r6, #0
 801bc14:	e7ed      	b.n	801bbf2 <uxr_update_output_stream_heartbeat_timestamp+0x3a>
 801bc16:	bf00      	nop

0801bc18 <uxr_begin_output_nack_buffer_it>:
 801bc18:	8a40      	ldrh	r0, [r0, #18]
 801bc1a:	4770      	bx	lr

0801bc1c <uxr_next_reliable_nack_buffer_to_send>:
 801bc1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc20:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801bc24:	f1b8 0f00 	cmp.w	r8, #0
 801bc28:	d104      	bne.n	801bc34 <uxr_next_reliable_nack_buffer_to_send+0x18>
 801bc2a:	f04f 0800 	mov.w	r8, #0
 801bc2e:	4640      	mov	r0, r8
 801bc30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc34:	4604      	mov	r4, r0
 801bc36:	460e      	mov	r6, r1
 801bc38:	8818      	ldrh	r0, [r3, #0]
 801bc3a:	4617      	mov	r7, r2
 801bc3c:	461d      	mov	r5, r3
 801bc3e:	e019      	b.n	801bc74 <uxr_next_reliable_nack_buffer_to_send+0x58>
 801bc40:	8921      	ldrh	r1, [r4, #8]
 801bc42:	8828      	ldrh	r0, [r5, #0]
 801bc44:	fbb0 fcf1 	udiv	ip, r0, r1
 801bc48:	e9d4 3200 	ldrd	r3, r2, [r4]
 801bc4c:	fb01 0c1c 	mls	ip, r1, ip, r0
 801bc50:	fa1f fc8c 	uxth.w	ip, ip
 801bc54:	fbb2 f2f1 	udiv	r2, r2, r1
 801bc58:	fb02 fc0c 	mul.w	ip, r2, ip
 801bc5c:	f10c 0c04 	add.w	ip, ip, #4
 801bc60:	4463      	add	r3, ip
 801bc62:	6033      	str	r3, [r6, #0]
 801bc64:	6823      	ldr	r3, [r4, #0]
 801bc66:	4463      	add	r3, ip
 801bc68:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801bc6c:	603b      	str	r3, [r7, #0]
 801bc6e:	7b22      	ldrb	r2, [r4, #12]
 801bc70:	429a      	cmp	r2, r3
 801bc72:	d1dc      	bne.n	801bc2e <uxr_next_reliable_nack_buffer_to_send+0x12>
 801bc74:	2101      	movs	r1, #1
 801bc76:	f000 f861 	bl	801bd3c <uxr_seq_num_add>
 801bc7a:	8028      	strh	r0, [r5, #0]
 801bc7c:	8a21      	ldrh	r1, [r4, #16]
 801bc7e:	f000 f865 	bl	801bd4c <uxr_seq_num_cmp>
 801bc82:	2800      	cmp	r0, #0
 801bc84:	dddc      	ble.n	801bc40 <uxr_next_reliable_nack_buffer_to_send+0x24>
 801bc86:	2300      	movs	r3, #0
 801bc88:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 801bc8c:	e7cd      	b.n	801bc2a <uxr_next_reliable_nack_buffer_to_send+0xe>
 801bc8e:	bf00      	nop

0801bc90 <uxr_process_acknack>:
 801bc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc92:	4604      	mov	r4, r0
 801bc94:	460e      	mov	r6, r1
 801bc96:	4610      	mov	r0, r2
 801bc98:	2101      	movs	r1, #1
 801bc9a:	f000 f853 	bl	801bd44 <uxr_seq_num_sub>
 801bc9e:	8a61      	ldrh	r1, [r4, #18]
 801bca0:	f000 f850 	bl	801bd44 <uxr_seq_num_sub>
 801bca4:	b1c0      	cbz	r0, 801bcd8 <uxr_process_acknack+0x48>
 801bca6:	4605      	mov	r5, r0
 801bca8:	2700      	movs	r7, #0
 801bcaa:	2101      	movs	r1, #1
 801bcac:	8a60      	ldrh	r0, [r4, #18]
 801bcae:	f000 f845 	bl	801bd3c <uxr_seq_num_add>
 801bcb2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801bcb6:	fbb0 f1fc 	udiv	r1, r0, ip
 801bcba:	e9d4 2300 	ldrd	r2, r3, [r4]
 801bcbe:	fb0c 0111 	mls	r1, ip, r1, r0
 801bcc2:	b289      	uxth	r1, r1
 801bcc4:	3701      	adds	r7, #1
 801bcc6:	fbb3 f3fc 	udiv	r3, r3, ip
 801bcca:	fb01 f303 	mul.w	r3, r1, r3
 801bcce:	42bd      	cmp	r5, r7
 801bcd0:	7b21      	ldrb	r1, [r4, #12]
 801bcd2:	8260      	strh	r0, [r4, #18]
 801bcd4:	50d1      	str	r1, [r2, r3]
 801bcd6:	d1e8      	bne.n	801bcaa <uxr_process_acknack+0x1a>
 801bcd8:	3e00      	subs	r6, #0
 801bcda:	f04f 0300 	mov.w	r3, #0
 801bcde:	bf18      	it	ne
 801bce0:	2601      	movne	r6, #1
 801bce2:	f884 3020 	strb.w	r3, [r4, #32]
 801bce6:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801bcea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801bcec <uxr_is_output_up_to_date>:
 801bcec:	8a01      	ldrh	r1, [r0, #16]
 801bcee:	8a40      	ldrh	r0, [r0, #18]
 801bcf0:	b508      	push	{r3, lr}
 801bcf2:	f000 f82b 	bl	801bd4c <uxr_seq_num_cmp>
 801bcf6:	fab0 f080 	clz	r0, r0
 801bcfa:	0940      	lsrs	r0, r0, #5
 801bcfc:	bd08      	pop	{r3, pc}
 801bcfe:	bf00      	nop

0801bd00 <get_available_free_slots>:
 801bd00:	8901      	ldrh	r1, [r0, #8]
 801bd02:	b1c1      	cbz	r1, 801bd36 <get_available_free_slots+0x36>
 801bd04:	b530      	push	{r4, r5, lr}
 801bd06:	2200      	movs	r2, #0
 801bd08:	6843      	ldr	r3, [r0, #4]
 801bd0a:	6805      	ldr	r5, [r0, #0]
 801bd0c:	7b04      	ldrb	r4, [r0, #12]
 801bd0e:	fbb3 fef1 	udiv	lr, r3, r1
 801bd12:	4610      	mov	r0, r2
 801bd14:	b293      	uxth	r3, r2
 801bd16:	fbb3 fcf1 	udiv	ip, r3, r1
 801bd1a:	fb01 331c 	mls	r3, r1, ip, r3
 801bd1e:	b29b      	uxth	r3, r3
 801bd20:	fb0e f303 	mul.w	r3, lr, r3
 801bd24:	3201      	adds	r2, #1
 801bd26:	58eb      	ldr	r3, [r5, r3]
 801bd28:	429c      	cmp	r4, r3
 801bd2a:	bf04      	itt	eq
 801bd2c:	3001      	addeq	r0, #1
 801bd2e:	b280      	uxtheq	r0, r0
 801bd30:	4291      	cmp	r1, r2
 801bd32:	d1ef      	bne.n	801bd14 <get_available_free_slots+0x14>
 801bd34:	bd30      	pop	{r4, r5, pc}
 801bd36:	4608      	mov	r0, r1
 801bd38:	4770      	bx	lr
 801bd3a:	bf00      	nop

0801bd3c <uxr_seq_num_add>:
 801bd3c:	4408      	add	r0, r1
 801bd3e:	b280      	uxth	r0, r0
 801bd40:	4770      	bx	lr
 801bd42:	bf00      	nop

0801bd44 <uxr_seq_num_sub>:
 801bd44:	1a40      	subs	r0, r0, r1
 801bd46:	b280      	uxth	r0, r0
 801bd48:	4770      	bx	lr
 801bd4a:	bf00      	nop

0801bd4c <uxr_seq_num_cmp>:
 801bd4c:	4288      	cmp	r0, r1
 801bd4e:	d010      	beq.n	801bd72 <uxr_seq_num_cmp+0x26>
 801bd50:	d207      	bcs.n	801bd62 <uxr_seq_num_cmp+0x16>
 801bd52:	1a09      	subs	r1, r1, r0
 801bd54:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 801bd58:	bfb4      	ite	lt
 801bd5a:	f04f 30ff 	movlt.w	r0, #4294967295	@ 0xffffffff
 801bd5e:	2001      	movge	r0, #1
 801bd60:	4770      	bx	lr
 801bd62:	1a41      	subs	r1, r0, r1
 801bd64:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 801bd68:	bfcc      	ite	gt
 801bd6a:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801bd6e:	2001      	movle	r0, #1
 801bd70:	4770      	bx	lr
 801bd72:	2000      	movs	r0, #0
 801bd74:	4770      	bx	lr
 801bd76:	bf00      	nop

0801bd78 <rcl_get_automatic_discovery_range>:
 801bd78:	b530      	push	{r4, r5, lr}
 801bd7a:	b083      	sub	sp, #12
 801bd7c:	2300      	movs	r3, #0
 801bd7e:	9301      	str	r3, [sp, #4]
 801bd80:	b1c0      	cbz	r0, 801bdb4 <rcl_get_automatic_discovery_range+0x3c>
 801bd82:	4604      	mov	r4, r0
 801bd84:	a901      	add	r1, sp, #4
 801bd86:	4818      	ldr	r0, [pc, #96]	@ (801bde8 <rcl_get_automatic_discovery_range+0x70>)
 801bd88:	f7fd fa84 	bl	8019294 <rcutils_get_env>
 801bd8c:	b110      	cbz	r0, 801bd94 <rcl_get_automatic_discovery_range+0x1c>
 801bd8e:	2001      	movs	r0, #1
 801bd90:	b003      	add	sp, #12
 801bd92:	bd30      	pop	{r4, r5, pc}
 801bd94:	9d01      	ldr	r5, [sp, #4]
 801bd96:	782b      	ldrb	r3, [r5, #0]
 801bd98:	b923      	cbnz	r3, 801bda4 <rcl_get_automatic_discovery_range+0x2c>
 801bd9a:	2303      	movs	r3, #3
 801bd9c:	7023      	strb	r3, [r4, #0]
 801bd9e:	2000      	movs	r0, #0
 801bda0:	b003      	add	sp, #12
 801bda2:	bd30      	pop	{r4, r5, pc}
 801bda4:	4911      	ldr	r1, [pc, #68]	@ (801bdec <rcl_get_automatic_discovery_range+0x74>)
 801bda6:	4628      	mov	r0, r5
 801bda8:	f7e4 fa3a 	bl	8000220 <strcmp>
 801bdac:	b928      	cbnz	r0, 801bdba <rcl_get_automatic_discovery_range+0x42>
 801bdae:	2301      	movs	r3, #1
 801bdb0:	7023      	strb	r3, [r4, #0]
 801bdb2:	e7f4      	b.n	801bd9e <rcl_get_automatic_discovery_range+0x26>
 801bdb4:	200b      	movs	r0, #11
 801bdb6:	b003      	add	sp, #12
 801bdb8:	bd30      	pop	{r4, r5, pc}
 801bdba:	490d      	ldr	r1, [pc, #52]	@ (801bdf0 <rcl_get_automatic_discovery_range+0x78>)
 801bdbc:	4628      	mov	r0, r5
 801bdbe:	f7e4 fa2f 	bl	8000220 <strcmp>
 801bdc2:	b168      	cbz	r0, 801bde0 <rcl_get_automatic_discovery_range+0x68>
 801bdc4:	490b      	ldr	r1, [pc, #44]	@ (801bdf4 <rcl_get_automatic_discovery_range+0x7c>)
 801bdc6:	4628      	mov	r0, r5
 801bdc8:	f7e4 fa2a 	bl	8000220 <strcmp>
 801bdcc:	2800      	cmp	r0, #0
 801bdce:	d0e4      	beq.n	801bd9a <rcl_get_automatic_discovery_range+0x22>
 801bdd0:	4909      	ldr	r1, [pc, #36]	@ (801bdf8 <rcl_get_automatic_discovery_range+0x80>)
 801bdd2:	4628      	mov	r0, r5
 801bdd4:	f7e4 fa24 	bl	8000220 <strcmp>
 801bdd8:	b910      	cbnz	r0, 801bde0 <rcl_get_automatic_discovery_range+0x68>
 801bdda:	2304      	movs	r3, #4
 801bddc:	7023      	strb	r3, [r4, #0]
 801bdde:	e7de      	b.n	801bd9e <rcl_get_automatic_discovery_range+0x26>
 801bde0:	2302      	movs	r3, #2
 801bde2:	7023      	strb	r3, [r4, #0]
 801bde4:	e7db      	b.n	801bd9e <rcl_get_automatic_discovery_range+0x26>
 801bde6:	bf00      	nop
 801bde8:	080218d0 	.word	0x080218d0
 801bdec:	080218f0 	.word	0x080218f0
 801bdf0:	080218f4 	.word	0x080218f4
 801bdf4:	08021900 	.word	0x08021900
 801bdf8:	08021908 	.word	0x08021908

0801bdfc <rcl_automatic_discovery_range_to_string>:
 801bdfc:	2804      	cmp	r0, #4
 801bdfe:	bf9a      	itte	ls
 801be00:	4b02      	ldrls	r3, [pc, #8]	@ (801be0c <rcl_automatic_discovery_range_to_string+0x10>)
 801be02:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801be06:	2000      	movhi	r0, #0
 801be08:	4770      	bx	lr
 801be0a:	bf00      	nop
 801be0c:	080219f8 	.word	0x080219f8

0801be10 <rcl_get_discovery_static_peers>:
 801be10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be14:	b08c      	sub	sp, #48	@ 0x30
 801be16:	2300      	movs	r3, #0
 801be18:	9304      	str	r3, [sp, #16]
 801be1a:	2800      	cmp	r0, #0
 801be1c:	d04e      	beq.n	801bebc <rcl_get_discovery_static_peers+0xac>
 801be1e:	460d      	mov	r5, r1
 801be20:	2900      	cmp	r1, #0
 801be22:	d04b      	beq.n	801bebc <rcl_get_discovery_static_peers+0xac>
 801be24:	4604      	mov	r4, r0
 801be26:	a904      	add	r1, sp, #16
 801be28:	482d      	ldr	r0, [pc, #180]	@ (801bee0 <rcl_get_discovery_static_peers+0xd0>)
 801be2a:	f7fd fa33 	bl	8019294 <rcutils_get_env>
 801be2e:	b118      	cbz	r0, 801be38 <rcl_get_discovery_static_peers+0x28>
 801be30:	2001      	movs	r0, #1
 801be32:	b00c      	add	sp, #48	@ 0x30
 801be34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801be38:	9b04      	ldr	r3, [sp, #16]
 801be3a:	2b00      	cmp	r3, #0
 801be3c:	d0f8      	beq.n	801be30 <rcl_get_discovery_static_peers+0x20>
 801be3e:	af05      	add	r7, sp, #20
 801be40:	4638      	mov	r0, r7
 801be42:	f000 fc8f 	bl	801c764 <rcutils_get_zero_initialized_string_array>
 801be46:	f105 0308 	add.w	r3, r5, #8
 801be4a:	9703      	str	r7, [sp, #12]
 801be4c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801be50:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801be54:	9804      	ldr	r0, [sp, #16]
 801be56:	e895 000c 	ldmia.w	r5, {r2, r3}
 801be5a:	213b      	movs	r1, #59	@ 0x3b
 801be5c:	f000 fbd0 	bl	801c600 <rcutils_split>
 801be60:	2800      	cmp	r0, #0
 801be62:	d1e5      	bne.n	801be30 <rcl_get_discovery_static_peers+0x20>
 801be64:	9905      	ldr	r1, [sp, #20]
 801be66:	462a      	mov	r2, r5
 801be68:	4620      	mov	r0, r4
 801be6a:	f7fd fcdd 	bl	8019828 <rmw_discovery_options_init>
 801be6e:	4606      	mov	r6, r0
 801be70:	bb90      	cbnz	r0, 801bed8 <rcl_get_discovery_static_peers+0xc8>
 801be72:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801be76:	f1b9 0f00 	cmp.w	r9, #0
 801be7a:	d026      	beq.n	801beca <rcl_get_discovery_static_peers+0xba>
 801be7c:	f8dd a018 	ldr.w	sl, [sp, #24]
 801be80:	4680      	mov	r8, r0
 801be82:	f85a 5026 	ldr.w	r5, [sl, r6, lsl #2]
 801be86:	4628      	mov	r0, r5
 801be88:	f7e4 fa2a 	bl	80002e0 <strlen>
 801be8c:	28ff      	cmp	r0, #255	@ 0xff
 801be8e:	4629      	mov	r1, r5
 801be90:	ea4f 2506 	mov.w	r5, r6, lsl #8
 801be94:	d816      	bhi.n	801bec4 <rcl_get_discovery_static_peers+0xb4>
 801be96:	6860      	ldr	r0, [r4, #4]
 801be98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801be9c:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 801bea0:	f001 fce9 	bl	801d876 <strncpy>
 801bea4:	6863      	ldr	r3, [r4, #4]
 801bea6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801beaa:	3601      	adds	r6, #1
 801beac:	442b      	add	r3, r5
 801beae:	454e      	cmp	r6, r9
 801beb0:	f883 80ff 	strb.w	r8, [r3, #255]	@ 0xff
 801beb4:	d209      	bcs.n	801beca <rcl_get_discovery_static_peers+0xba>
 801beb6:	f8dd a018 	ldr.w	sl, [sp, #24]
 801beba:	e7e2      	b.n	801be82 <rcl_get_discovery_static_peers+0x72>
 801bebc:	200b      	movs	r0, #11
 801bebe:	b00c      	add	sp, #48	@ 0x30
 801bec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bec4:	3601      	adds	r6, #1
 801bec6:	454e      	cmp	r6, r9
 801bec8:	d3db      	bcc.n	801be82 <rcl_get_discovery_static_peers+0x72>
 801beca:	4638      	mov	r0, r7
 801becc:	f000 fc8a 	bl	801c7e4 <rcutils_string_array_fini>
 801bed0:	3800      	subs	r0, #0
 801bed2:	bf18      	it	ne
 801bed4:	2001      	movne	r0, #1
 801bed6:	e7ac      	b.n	801be32 <rcl_get_discovery_static_peers+0x22>
 801bed8:	f7fa f9a8 	bl	801622c <rcl_convert_rmw_ret_to_rcl_ret>
 801bedc:	e7a9      	b.n	801be32 <rcl_get_discovery_static_peers+0x22>
 801bede:	bf00      	nop
 801bee0:	08021918 	.word	0x08021918

0801bee4 <rcl_get_default_domain_id>:
 801bee4:	b530      	push	{r4, r5, lr}
 801bee6:	b083      	sub	sp, #12
 801bee8:	2300      	movs	r3, #0
 801beea:	9300      	str	r3, [sp, #0]
 801beec:	b1f0      	cbz	r0, 801bf2c <rcl_get_default_domain_id+0x48>
 801beee:	4604      	mov	r4, r0
 801bef0:	4669      	mov	r1, sp
 801bef2:	4812      	ldr	r0, [pc, #72]	@ (801bf3c <rcl_get_default_domain_id+0x58>)
 801bef4:	f7fd f9ce 	bl	8019294 <rcutils_get_env>
 801bef8:	4602      	mov	r2, r0
 801befa:	b108      	cbz	r0, 801bf00 <rcl_get_default_domain_id+0x1c>
 801befc:	2001      	movs	r0, #1
 801befe:	e004      	b.n	801bf0a <rcl_get_default_domain_id+0x26>
 801bf00:	9800      	ldr	r0, [sp, #0]
 801bf02:	b108      	cbz	r0, 801bf08 <rcl_get_default_domain_id+0x24>
 801bf04:	7803      	ldrb	r3, [r0, #0]
 801bf06:	b913      	cbnz	r3, 801bf0e <rcl_get_default_domain_id+0x2a>
 801bf08:	2000      	movs	r0, #0
 801bf0a:	b003      	add	sp, #12
 801bf0c:	bd30      	pop	{r4, r5, pc}
 801bf0e:	a901      	add	r1, sp, #4
 801bf10:	9201      	str	r2, [sp, #4]
 801bf12:	f001 f9e3 	bl	801d2dc <strtoul>
 801bf16:	4605      	mov	r5, r0
 801bf18:	b158      	cbz	r0, 801bf32 <rcl_get_default_domain_id+0x4e>
 801bf1a:	1c43      	adds	r3, r0, #1
 801bf1c:	d104      	bne.n	801bf28 <rcl_get_default_domain_id+0x44>
 801bf1e:	f001 fd29 	bl	801d974 <__errno>
 801bf22:	6803      	ldr	r3, [r0, #0]
 801bf24:	2b22      	cmp	r3, #34	@ 0x22
 801bf26:	d0e9      	beq.n	801befc <rcl_get_default_domain_id+0x18>
 801bf28:	6025      	str	r5, [r4, #0]
 801bf2a:	e7ed      	b.n	801bf08 <rcl_get_default_domain_id+0x24>
 801bf2c:	200b      	movs	r0, #11
 801bf2e:	b003      	add	sp, #12
 801bf30:	bd30      	pop	{r4, r5, pc}
 801bf32:	9b01      	ldr	r3, [sp, #4]
 801bf34:	781b      	ldrb	r3, [r3, #0]
 801bf36:	2b00      	cmp	r3, #0
 801bf38:	d0f6      	beq.n	801bf28 <rcl_get_default_domain_id+0x44>
 801bf3a:	e7df      	b.n	801befc <rcl_get_default_domain_id+0x18>
 801bf3c:	08021a0c 	.word	0x08021a0c

0801bf40 <rcl_expand_topic_name>:
 801bf40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf44:	b08b      	sub	sp, #44	@ 0x2c
 801bf46:	9306      	str	r3, [sp, #24]
 801bf48:	2800      	cmp	r0, #0
 801bf4a:	f000 80ad 	beq.w	801c0a8 <rcl_expand_topic_name+0x168>
 801bf4e:	460e      	mov	r6, r1
 801bf50:	2900      	cmp	r1, #0
 801bf52:	f000 80a9 	beq.w	801c0a8 <rcl_expand_topic_name+0x168>
 801bf56:	4617      	mov	r7, r2
 801bf58:	2a00      	cmp	r2, #0
 801bf5a:	f000 80a5 	beq.w	801c0a8 <rcl_expand_topic_name+0x168>
 801bf5e:	2b00      	cmp	r3, #0
 801bf60:	f000 80a2 	beq.w	801c0a8 <rcl_expand_topic_name+0x168>
 801bf64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801bf66:	2b00      	cmp	r3, #0
 801bf68:	f000 809e 	beq.w	801c0a8 <rcl_expand_topic_name+0x168>
 801bf6c:	2200      	movs	r2, #0
 801bf6e:	a909      	add	r1, sp, #36	@ 0x24
 801bf70:	4680      	mov	r8, r0
 801bf72:	f000 fa53 	bl	801c41c <rcl_validate_topic_name>
 801bf76:	4605      	mov	r5, r0
 801bf78:	2800      	cmp	r0, #0
 801bf7a:	f040 8096 	bne.w	801c0aa <rcl_expand_topic_name+0x16a>
 801bf7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bf80:	2b00      	cmp	r3, #0
 801bf82:	f040 809a 	bne.w	801c0ba <rcl_expand_topic_name+0x17a>
 801bf86:	4602      	mov	r2, r0
 801bf88:	a909      	add	r1, sp, #36	@ 0x24
 801bf8a:	4630      	mov	r0, r6
 801bf8c:	f7fd fdf4 	bl	8019b78 <rmw_validate_node_name>
 801bf90:	2800      	cmp	r0, #0
 801bf92:	f040 808e 	bne.w	801c0b2 <rcl_expand_topic_name+0x172>
 801bf96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bf98:	2a00      	cmp	r2, #0
 801bf9a:	f040 8093 	bne.w	801c0c4 <rcl_expand_topic_name+0x184>
 801bf9e:	a909      	add	r1, sp, #36	@ 0x24
 801bfa0:	4638      	mov	r0, r7
 801bfa2:	f7fd fdcb 	bl	8019b3c <rmw_validate_namespace>
 801bfa6:	2800      	cmp	r0, #0
 801bfa8:	f040 8083 	bne.w	801c0b2 <rcl_expand_topic_name+0x172>
 801bfac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801bfae:	2d00      	cmp	r5, #0
 801bfb0:	f040 80f4 	bne.w	801c19c <rcl_expand_topic_name+0x25c>
 801bfb4:	217b      	movs	r1, #123	@ 0x7b
 801bfb6:	4640      	mov	r0, r8
 801bfb8:	f001 fc3e 	bl	801d838 <strchr>
 801bfbc:	f898 3000 	ldrb.w	r3, [r8]
 801bfc0:	2b2f      	cmp	r3, #47	@ 0x2f
 801bfc2:	4604      	mov	r4, r0
 801bfc4:	f000 809f 	beq.w	801c106 <rcl_expand_topic_name+0x1c6>
 801bfc8:	2b7e      	cmp	r3, #126	@ 0x7e
 801bfca:	f040 80e9 	bne.w	801c1a0 <rcl_expand_topic_name+0x260>
 801bfce:	4638      	mov	r0, r7
 801bfd0:	f7e4 f986 	bl	80002e0 <strlen>
 801bfd4:	4a82      	ldr	r2, [pc, #520]	@ (801c1e0 <rcl_expand_topic_name+0x2a0>)
 801bfd6:	4b83      	ldr	r3, [pc, #524]	@ (801c1e4 <rcl_expand_topic_name+0x2a4>)
 801bfd8:	2801      	cmp	r0, #1
 801bfda:	bf08      	it	eq
 801bfdc:	4613      	moveq	r3, r2
 801bfde:	9302      	str	r3, [sp, #8]
 801bfe0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801bfe2:	9300      	str	r3, [sp, #0]
 801bfe4:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801bfe8:	f108 0301 	add.w	r3, r8, #1
 801bfec:	9305      	str	r3, [sp, #20]
 801bfee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801bff2:	9301      	str	r3, [sp, #4]
 801bff4:	ab14      	add	r3, sp, #80	@ 0x50
 801bff6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bff8:	f7fd f974 	bl	80192e4 <rcutils_format_string_limit>
 801bffc:	4682      	mov	sl, r0
 801bffe:	2800      	cmp	r0, #0
 801c000:	f000 80d1 	beq.w	801c1a6 <rcl_expand_topic_name+0x266>
 801c004:	2c00      	cmp	r4, #0
 801c006:	f000 8085 	beq.w	801c114 <rcl_expand_topic_name+0x1d4>
 801c00a:	217b      	movs	r1, #123	@ 0x7b
 801c00c:	f001 fc14 	bl	801d838 <strchr>
 801c010:	46d1      	mov	r9, sl
 801c012:	4604      	mov	r4, r0
 801c014:	9507      	str	r5, [sp, #28]
 801c016:	464d      	mov	r5, r9
 801c018:	2c00      	cmp	r4, #0
 801c01a:	f000 80a0 	beq.w	801c15e <rcl_expand_topic_name+0x21e>
 801c01e:	217d      	movs	r1, #125	@ 0x7d
 801c020:	4628      	mov	r0, r5
 801c022:	f001 fc09 	bl	801d838 <strchr>
 801c026:	eba0 0904 	sub.w	r9, r0, r4
 801c02a:	f109 0b01 	add.w	fp, r9, #1
 801c02e:	486e      	ldr	r0, [pc, #440]	@ (801c1e8 <rcl_expand_topic_name+0x2a8>)
 801c030:	465a      	mov	r2, fp
 801c032:	4621      	mov	r1, r4
 801c034:	f001 fc0d 	bl	801d852 <strncmp>
 801c038:	2800      	cmp	r0, #0
 801c03a:	d069      	beq.n	801c110 <rcl_expand_topic_name+0x1d0>
 801c03c:	486b      	ldr	r0, [pc, #428]	@ (801c1ec <rcl_expand_topic_name+0x2ac>)
 801c03e:	465a      	mov	r2, fp
 801c040:	4621      	mov	r1, r4
 801c042:	f001 fc06 	bl	801d852 <strncmp>
 801c046:	b130      	cbz	r0, 801c056 <rcl_expand_topic_name+0x116>
 801c048:	4869      	ldr	r0, [pc, #420]	@ (801c1f0 <rcl_expand_topic_name+0x2b0>)
 801c04a:	465a      	mov	r2, fp
 801c04c:	4621      	mov	r1, r4
 801c04e:	f001 fc00 	bl	801d852 <strncmp>
 801c052:	2800      	cmp	r0, #0
 801c054:	d138      	bne.n	801c0c8 <rcl_expand_topic_name+0x188>
 801c056:	46b9      	mov	r9, r7
 801c058:	ab16      	add	r3, sp, #88	@ 0x58
 801c05a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801c05e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801c062:	ab14      	add	r3, sp, #80	@ 0x50
 801c064:	4620      	mov	r0, r4
 801c066:	cb0c      	ldmia	r3, {r2, r3}
 801c068:	4659      	mov	r1, fp
 801c06a:	f7fd fa8f 	bl	801958c <rcutils_strndup>
 801c06e:	4604      	mov	r4, r0
 801c070:	2800      	cmp	r0, #0
 801c072:	f000 809d 	beq.w	801c1b0 <rcl_expand_topic_name+0x270>
 801c076:	464a      	mov	r2, r9
 801c078:	4628      	mov	r0, r5
 801c07a:	ab14      	add	r3, sp, #80	@ 0x50
 801c07c:	4621      	mov	r1, r4
 801c07e:	f7fd f96b 	bl	8019358 <rcutils_repl_str>
 801c082:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801c084:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801c086:	4605      	mov	r5, r0
 801c088:	4620      	mov	r0, r4
 801c08a:	4798      	blx	r3
 801c08c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801c08e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801c090:	4650      	mov	r0, sl
 801c092:	4798      	blx	r3
 801c094:	2d00      	cmp	r5, #0
 801c096:	f000 8086 	beq.w	801c1a6 <rcl_expand_topic_name+0x266>
 801c09a:	217b      	movs	r1, #123	@ 0x7b
 801c09c:	4628      	mov	r0, r5
 801c09e:	f001 fbcb 	bl	801d838 <strchr>
 801c0a2:	46aa      	mov	sl, r5
 801c0a4:	4604      	mov	r4, r0
 801c0a6:	e7b7      	b.n	801c018 <rcl_expand_topic_name+0xd8>
 801c0a8:	250b      	movs	r5, #11
 801c0aa:	4628      	mov	r0, r5
 801c0ac:	b00b      	add	sp, #44	@ 0x2c
 801c0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0b2:	f7fa f8bb 	bl	801622c <rcl_convert_rmw_ret_to_rcl_ret>
 801c0b6:	4605      	mov	r5, r0
 801c0b8:	e7f7      	b.n	801c0aa <rcl_expand_topic_name+0x16a>
 801c0ba:	2567      	movs	r5, #103	@ 0x67
 801c0bc:	4628      	mov	r0, r5
 801c0be:	b00b      	add	sp, #44	@ 0x2c
 801c0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0c4:	25c9      	movs	r5, #201	@ 0xc9
 801c0c6:	e7f0      	b.n	801c0aa <rcl_expand_topic_name+0x16a>
 801c0c8:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801c0cc:	9806      	ldr	r0, [sp, #24]
 801c0ce:	1c61      	adds	r1, r4, #1
 801c0d0:	f7fd fb78 	bl	80197c4 <rcutils_string_map_getn>
 801c0d4:	4681      	mov	r9, r0
 801c0d6:	2800      	cmp	r0, #0
 801c0d8:	d1be      	bne.n	801c058 <rcl_expand_topic_name+0x118>
 801c0da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c0dc:	ab16      	add	r3, sp, #88	@ 0x58
 801c0de:	6010      	str	r0, [r2, #0]
 801c0e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801c0e4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801c0e8:	ab14      	add	r3, sp, #80	@ 0x50
 801c0ea:	cb0c      	ldmia	r3, {r2, r3}
 801c0ec:	4659      	mov	r1, fp
 801c0ee:	4620      	mov	r0, r4
 801c0f0:	f7fd fa4c 	bl	801958c <rcutils_strndup>
 801c0f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801c0f6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801c0f8:	4798      	blx	r3
 801c0fa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801c0fc:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801c0fe:	4650      	mov	r0, sl
 801c100:	4798      	blx	r3
 801c102:	2569      	movs	r5, #105	@ 0x69
 801c104:	e7d1      	b.n	801c0aa <rcl_expand_topic_name+0x16a>
 801c106:	2800      	cmp	r0, #0
 801c108:	d059      	beq.n	801c1be <rcl_expand_topic_name+0x27e>
 801c10a:	46c1      	mov	r9, r8
 801c10c:	46aa      	mov	sl, r5
 801c10e:	e781      	b.n	801c014 <rcl_expand_topic_name+0xd4>
 801c110:	46b1      	mov	r9, r6
 801c112:	e7a1      	b.n	801c058 <rcl_expand_topic_name+0x118>
 801c114:	f89a 3000 	ldrb.w	r3, [sl]
 801c118:	2b2f      	cmp	r3, #47	@ 0x2f
 801c11a:	d01c      	beq.n	801c156 <rcl_expand_topic_name+0x216>
 801c11c:	4638      	mov	r0, r7
 801c11e:	f7e4 f8df 	bl	80002e0 <strlen>
 801c122:	4a34      	ldr	r2, [pc, #208]	@ (801c1f4 <rcl_expand_topic_name+0x2b4>)
 801c124:	4b34      	ldr	r3, [pc, #208]	@ (801c1f8 <rcl_expand_topic_name+0x2b8>)
 801c126:	f8cd a010 	str.w	sl, [sp, #16]
 801c12a:	2801      	cmp	r0, #1
 801c12c:	bf18      	it	ne
 801c12e:	4613      	movne	r3, r2
 801c130:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801c134:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801c138:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801c13a:	9703      	str	r7, [sp, #12]
 801c13c:	9200      	str	r2, [sp, #0]
 801c13e:	ab14      	add	r3, sp, #80	@ 0x50
 801c140:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c142:	f7fd f8cf 	bl	80192e4 <rcutils_format_string_limit>
 801c146:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801c148:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801c14a:	4604      	mov	r4, r0
 801c14c:	4650      	mov	r0, sl
 801c14e:	4798      	blx	r3
 801c150:	46a2      	mov	sl, r4
 801c152:	4653      	mov	r3, sl
 801c154:	b33b      	cbz	r3, 801c1a6 <rcl_expand_topic_name+0x266>
 801c156:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c158:	f8c3 a000 	str.w	sl, [r3]
 801c15c:	e7a5      	b.n	801c0aa <rcl_expand_topic_name+0x16a>
 801c15e:	4653      	mov	r3, sl
 801c160:	9d07      	ldr	r5, [sp, #28]
 801c162:	2b00      	cmp	r3, #0
 801c164:	d1d6      	bne.n	801c114 <rcl_expand_topic_name+0x1d4>
 801c166:	f898 3000 	ldrb.w	r3, [r8]
 801c16a:	2b2f      	cmp	r3, #47	@ 0x2f
 801c16c:	d0f3      	beq.n	801c156 <rcl_expand_topic_name+0x216>
 801c16e:	4638      	mov	r0, r7
 801c170:	f7e4 f8b6 	bl	80002e0 <strlen>
 801c174:	4a1f      	ldr	r2, [pc, #124]	@ (801c1f4 <rcl_expand_topic_name+0x2b4>)
 801c176:	4b20      	ldr	r3, [pc, #128]	@ (801c1f8 <rcl_expand_topic_name+0x2b8>)
 801c178:	f8cd 8010 	str.w	r8, [sp, #16]
 801c17c:	2801      	cmp	r0, #1
 801c17e:	bf18      	it	ne
 801c180:	4613      	movne	r3, r2
 801c182:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801c186:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801c18a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801c18c:	9703      	str	r7, [sp, #12]
 801c18e:	9200      	str	r2, [sp, #0]
 801c190:	ab14      	add	r3, sp, #80	@ 0x50
 801c192:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c194:	f7fd f8a6 	bl	80192e4 <rcutils_format_string_limit>
 801c198:	4682      	mov	sl, r0
 801c19a:	e7da      	b.n	801c152 <rcl_expand_topic_name+0x212>
 801c19c:	25ca      	movs	r5, #202	@ 0xca
 801c19e:	e784      	b.n	801c0aa <rcl_expand_topic_name+0x16a>
 801c1a0:	2800      	cmp	r0, #0
 801c1a2:	d1b2      	bne.n	801c10a <rcl_expand_topic_name+0x1ca>
 801c1a4:	e7e3      	b.n	801c16e <rcl_expand_topic_name+0x22e>
 801c1a6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c1a8:	2300      	movs	r3, #0
 801c1aa:	6013      	str	r3, [r2, #0]
 801c1ac:	250a      	movs	r5, #10
 801c1ae:	e77c      	b.n	801c0aa <rcl_expand_topic_name+0x16a>
 801c1b0:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 801c1b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801c1b6:	6014      	str	r4, [r2, #0]
 801c1b8:	4650      	mov	r0, sl
 801c1ba:	4798      	blx	r3
 801c1bc:	e7f6      	b.n	801c1ac <rcl_expand_topic_name+0x26c>
 801c1be:	ab17      	add	r3, sp, #92	@ 0x5c
 801c1c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c1c4:	e88d 0003 	stmia.w	sp, {r0, r1}
 801c1c8:	ab14      	add	r3, sp, #80	@ 0x50
 801c1ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 801c1cc:	4640      	mov	r0, r8
 801c1ce:	f7fd f9a7 	bl	8019520 <rcutils_strdup>
 801c1d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c1d4:	6018      	str	r0, [r3, #0]
 801c1d6:	2800      	cmp	r0, #0
 801c1d8:	f47f af67 	bne.w	801c0aa <rcl_expand_topic_name+0x16a>
 801c1dc:	e7e6      	b.n	801c1ac <rcl_expand_topic_name+0x26c>
 801c1de:	bf00      	nop
 801c1e0:	08020344 	.word	0x08020344
 801c1e4:	08021a1c 	.word	0x08021a1c
 801c1e8:	08021a24 	.word	0x08021a24
 801c1ec:	08021a2c 	.word	0x08021a2c
 801c1f0:	08021a34 	.word	0x08021a34
 801c1f4:	08020330 	.word	0x08020330
 801c1f8:	08020354 	.word	0x08020354

0801c1fc <rcl_get_default_topic_name_substitutions>:
 801c1fc:	2800      	cmp	r0, #0
 801c1fe:	bf0c      	ite	eq
 801c200:	200b      	moveq	r0, #11
 801c202:	2000      	movne	r0, #0
 801c204:	4770      	bx	lr
 801c206:	bf00      	nop

0801c208 <rcl_get_zero_initialized_guard_condition>:
 801c208:	4a03      	ldr	r2, [pc, #12]	@ (801c218 <rcl_get_zero_initialized_guard_condition+0x10>)
 801c20a:	4603      	mov	r3, r0
 801c20c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c210:	e883 0003 	stmia.w	r3, {r0, r1}
 801c214:	4618      	mov	r0, r3
 801c216:	4770      	bx	lr
 801c218:	08021a40 	.word	0x08021a40

0801c21c <rcl_guard_condition_init>:
 801c21c:	b082      	sub	sp, #8
 801c21e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c220:	b087      	sub	sp, #28
 801c222:	ac0c      	add	r4, sp, #48	@ 0x30
 801c224:	e884 000c 	stmia.w	r4, {r2, r3}
 801c228:	46a6      	mov	lr, r4
 801c22a:	460d      	mov	r5, r1
 801c22c:	4604      	mov	r4, r0
 801c22e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c232:	f10d 0c04 	add.w	ip, sp, #4
 801c236:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c23a:	f8de 3000 	ldr.w	r3, [lr]
 801c23e:	f8cc 3000 	str.w	r3, [ip]
 801c242:	a801      	add	r0, sp, #4
 801c244:	f7f3 f806 	bl	800f254 <rcutils_allocator_is_valid>
 801c248:	b338      	cbz	r0, 801c29a <rcl_guard_condition_init+0x7e>
 801c24a:	b334      	cbz	r4, 801c29a <rcl_guard_condition_init+0x7e>
 801c24c:	6866      	ldr	r6, [r4, #4]
 801c24e:	b9ee      	cbnz	r6, 801c28c <rcl_guard_condition_init+0x70>
 801c250:	b31d      	cbz	r5, 801c29a <rcl_guard_condition_init+0x7e>
 801c252:	4628      	mov	r0, r5
 801c254:	f7fa f80a 	bl	801626c <rcl_context_is_valid>
 801c258:	b308      	cbz	r0, 801c29e <rcl_guard_condition_init+0x82>
 801c25a:	9b01      	ldr	r3, [sp, #4]
 801c25c:	9905      	ldr	r1, [sp, #20]
 801c25e:	201c      	movs	r0, #28
 801c260:	4798      	blx	r3
 801c262:	4607      	mov	r7, r0
 801c264:	6060      	str	r0, [r4, #4]
 801c266:	b310      	cbz	r0, 801c2ae <rcl_guard_condition_init+0x92>
 801c268:	6828      	ldr	r0, [r5, #0]
 801c26a:	3028      	adds	r0, #40	@ 0x28
 801c26c:	f000 fae0 	bl	801c830 <rmw_create_guard_condition>
 801c270:	6038      	str	r0, [r7, #0]
 801c272:	6860      	ldr	r0, [r4, #4]
 801c274:	6807      	ldr	r7, [r0, #0]
 801c276:	b1a7      	cbz	r7, 801c2a2 <rcl_guard_condition_init+0x86>
 801c278:	2301      	movs	r3, #1
 801c27a:	ac01      	add	r4, sp, #4
 801c27c:	7103      	strb	r3, [r0, #4]
 801c27e:	f100 0708 	add.w	r7, r0, #8
 801c282:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c284:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801c286:	6823      	ldr	r3, [r4, #0]
 801c288:	603b      	str	r3, [r7, #0]
 801c28a:	e000      	b.n	801c28e <rcl_guard_condition_init+0x72>
 801c28c:	2664      	movs	r6, #100	@ 0x64
 801c28e:	4630      	mov	r0, r6
 801c290:	b007      	add	sp, #28
 801c292:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c296:	b002      	add	sp, #8
 801c298:	4770      	bx	lr
 801c29a:	260b      	movs	r6, #11
 801c29c:	e7f7      	b.n	801c28e <rcl_guard_condition_init+0x72>
 801c29e:	2665      	movs	r6, #101	@ 0x65
 801c2a0:	e7f5      	b.n	801c28e <rcl_guard_condition_init+0x72>
 801c2a2:	9b02      	ldr	r3, [sp, #8]
 801c2a4:	9905      	ldr	r1, [sp, #20]
 801c2a6:	4798      	blx	r3
 801c2a8:	2601      	movs	r6, #1
 801c2aa:	6067      	str	r7, [r4, #4]
 801c2ac:	e7ef      	b.n	801c28e <rcl_guard_condition_init+0x72>
 801c2ae:	260a      	movs	r6, #10
 801c2b0:	e7ed      	b.n	801c28e <rcl_guard_condition_init+0x72>
 801c2b2:	bf00      	nop

0801c2b4 <rcl_guard_condition_init_from_rmw>:
 801c2b4:	b082      	sub	sp, #8
 801c2b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c2ba:	b086      	sub	sp, #24
 801c2bc:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801c2c0:	4604      	mov	r4, r0
 801c2c2:	f84c 3f04 	str.w	r3, [ip, #4]!
 801c2c6:	460e      	mov	r6, r1
 801c2c8:	4617      	mov	r7, r2
 801c2ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c2ce:	f10d 0e04 	add.w	lr, sp, #4
 801c2d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801c2d6:	f8dc 3000 	ldr.w	r3, [ip]
 801c2da:	f8ce 3000 	str.w	r3, [lr]
 801c2de:	a801      	add	r0, sp, #4
 801c2e0:	f7f2 ffb8 	bl	800f254 <rcutils_allocator_is_valid>
 801c2e4:	b350      	cbz	r0, 801c33c <rcl_guard_condition_init_from_rmw+0x88>
 801c2e6:	b34c      	cbz	r4, 801c33c <rcl_guard_condition_init_from_rmw+0x88>
 801c2e8:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801c2ec:	f1b8 0f00 	cmp.w	r8, #0
 801c2f0:	d11e      	bne.n	801c330 <rcl_guard_condition_init_from_rmw+0x7c>
 801c2f2:	b31f      	cbz	r7, 801c33c <rcl_guard_condition_init_from_rmw+0x88>
 801c2f4:	4638      	mov	r0, r7
 801c2f6:	f7f9 ffb9 	bl	801626c <rcl_context_is_valid>
 801c2fa:	b328      	cbz	r0, 801c348 <rcl_guard_condition_init_from_rmw+0x94>
 801c2fc:	9b01      	ldr	r3, [sp, #4]
 801c2fe:	9905      	ldr	r1, [sp, #20]
 801c300:	201c      	movs	r0, #28
 801c302:	4798      	blx	r3
 801c304:	4605      	mov	r5, r0
 801c306:	6060      	str	r0, [r4, #4]
 801c308:	b358      	cbz	r0, 801c362 <rcl_guard_condition_init_from_rmw+0xae>
 801c30a:	b1fe      	cbz	r6, 801c34c <rcl_guard_condition_init_from_rmw+0x98>
 801c30c:	6006      	str	r6, [r0, #0]
 801c30e:	f880 8004 	strb.w	r8, [r0, #4]
 801c312:	ac01      	add	r4, sp, #4
 801c314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c316:	f105 0c08 	add.w	ip, r5, #8
 801c31a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c31e:	6823      	ldr	r3, [r4, #0]
 801c320:	f8cc 3000 	str.w	r3, [ip]
 801c324:	2000      	movs	r0, #0
 801c326:	b006      	add	sp, #24
 801c328:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c32c:	b002      	add	sp, #8
 801c32e:	4770      	bx	lr
 801c330:	2064      	movs	r0, #100	@ 0x64
 801c332:	b006      	add	sp, #24
 801c334:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c338:	b002      	add	sp, #8
 801c33a:	4770      	bx	lr
 801c33c:	200b      	movs	r0, #11
 801c33e:	b006      	add	sp, #24
 801c340:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c344:	b002      	add	sp, #8
 801c346:	4770      	bx	lr
 801c348:	2065      	movs	r0, #101	@ 0x65
 801c34a:	e7f2      	b.n	801c332 <rcl_guard_condition_init_from_rmw+0x7e>
 801c34c:	6838      	ldr	r0, [r7, #0]
 801c34e:	3028      	adds	r0, #40	@ 0x28
 801c350:	f000 fa6e 	bl	801c830 <rmw_create_guard_condition>
 801c354:	6028      	str	r0, [r5, #0]
 801c356:	6865      	ldr	r5, [r4, #4]
 801c358:	682e      	ldr	r6, [r5, #0]
 801c35a:	b126      	cbz	r6, 801c366 <rcl_guard_condition_init_from_rmw+0xb2>
 801c35c:	2301      	movs	r3, #1
 801c35e:	712b      	strb	r3, [r5, #4]
 801c360:	e7d7      	b.n	801c312 <rcl_guard_condition_init_from_rmw+0x5e>
 801c362:	200a      	movs	r0, #10
 801c364:	e7e5      	b.n	801c332 <rcl_guard_condition_init_from_rmw+0x7e>
 801c366:	4628      	mov	r0, r5
 801c368:	9b02      	ldr	r3, [sp, #8]
 801c36a:	9905      	ldr	r1, [sp, #20]
 801c36c:	4798      	blx	r3
 801c36e:	2001      	movs	r0, #1
 801c370:	6066      	str	r6, [r4, #4]
 801c372:	e7de      	b.n	801c332 <rcl_guard_condition_init_from_rmw+0x7e>

0801c374 <rcl_guard_condition_fini>:
 801c374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c376:	b1d8      	cbz	r0, 801c3b0 <rcl_guard_condition_fini+0x3c>
 801c378:	4604      	mov	r4, r0
 801c37a:	6840      	ldr	r0, [r0, #4]
 801c37c:	b158      	cbz	r0, 801c396 <rcl_guard_condition_fini+0x22>
 801c37e:	6803      	ldr	r3, [r0, #0]
 801c380:	68c6      	ldr	r6, [r0, #12]
 801c382:	6987      	ldr	r7, [r0, #24]
 801c384:	b153      	cbz	r3, 801c39c <rcl_guard_condition_fini+0x28>
 801c386:	7905      	ldrb	r5, [r0, #4]
 801c388:	b955      	cbnz	r5, 801c3a0 <rcl_guard_condition_fini+0x2c>
 801c38a:	4639      	mov	r1, r7
 801c38c:	47b0      	blx	r6
 801c38e:	2300      	movs	r3, #0
 801c390:	6063      	str	r3, [r4, #4]
 801c392:	4628      	mov	r0, r5
 801c394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c396:	4605      	mov	r5, r0
 801c398:	4628      	mov	r0, r5
 801c39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c39c:	461d      	mov	r5, r3
 801c39e:	e7f4      	b.n	801c38a <rcl_guard_condition_fini+0x16>
 801c3a0:	4618      	mov	r0, r3
 801c3a2:	f000 fa59 	bl	801c858 <rmw_destroy_guard_condition>
 801c3a6:	1e05      	subs	r5, r0, #0
 801c3a8:	bf18      	it	ne
 801c3aa:	2501      	movne	r5, #1
 801c3ac:	6860      	ldr	r0, [r4, #4]
 801c3ae:	e7ec      	b.n	801c38a <rcl_guard_condition_fini+0x16>
 801c3b0:	250b      	movs	r5, #11
 801c3b2:	4628      	mov	r0, r5
 801c3b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c3b6:	bf00      	nop

0801c3b8 <rcl_guard_condition_get_default_options>:
 801c3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c3ba:	b087      	sub	sp, #28
 801c3bc:	4606      	mov	r6, r0
 801c3be:	4668      	mov	r0, sp
 801c3c0:	f7f2 ff1c 	bl	800f1fc <rcutils_get_default_allocator>
 801c3c4:	46ee      	mov	lr, sp
 801c3c6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c3ca:	4c08      	ldr	r4, [pc, #32]	@ (801c3ec <rcl_guard_condition_get_default_options+0x34>)
 801c3cc:	46a4      	mov	ip, r4
 801c3ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c3d2:	4625      	mov	r5, r4
 801c3d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c3d6:	4634      	mov	r4, r6
 801c3d8:	f8de 7000 	ldr.w	r7, [lr]
 801c3dc:	f8cc 7000 	str.w	r7, [ip]
 801c3e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c3e2:	4630      	mov	r0, r6
 801c3e4:	6027      	str	r7, [r4, #0]
 801c3e6:	b007      	add	sp, #28
 801c3e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c3ea:	bf00      	nop
 801c3ec:	2000f5f4 	.word	0x2000f5f4

0801c3f0 <rcl_trigger_guard_condition>:
 801c3f0:	b148      	cbz	r0, 801c406 <rcl_trigger_guard_condition+0x16>
 801c3f2:	b508      	push	{r3, lr}
 801c3f4:	6843      	ldr	r3, [r0, #4]
 801c3f6:	b143      	cbz	r3, 801c40a <rcl_trigger_guard_condition+0x1a>
 801c3f8:	6818      	ldr	r0, [r3, #0]
 801c3fa:	f000 fa41 	bl	801c880 <rmw_trigger_guard_condition>
 801c3fe:	3800      	subs	r0, #0
 801c400:	bf18      	it	ne
 801c402:	2001      	movne	r0, #1
 801c404:	bd08      	pop	{r3, pc}
 801c406:	200b      	movs	r0, #11
 801c408:	4770      	bx	lr
 801c40a:	200b      	movs	r0, #11
 801c40c:	bd08      	pop	{r3, pc}
 801c40e:	bf00      	nop

0801c410 <rcl_guard_condition_get_rmw_handle>:
 801c410:	b110      	cbz	r0, 801c418 <rcl_guard_condition_get_rmw_handle+0x8>
 801c412:	6840      	ldr	r0, [r0, #4]
 801c414:	b100      	cbz	r0, 801c418 <rcl_guard_condition_get_rmw_handle+0x8>
 801c416:	6800      	ldr	r0, [r0, #0]
 801c418:	4770      	bx	lr
 801c41a:	bf00      	nop

0801c41c <rcl_validate_topic_name>:
 801c41c:	2800      	cmp	r0, #0
 801c41e:	d06b      	beq.n	801c4f8 <rcl_validate_topic_name+0xdc>
 801c420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c424:	460d      	mov	r5, r1
 801c426:	2900      	cmp	r1, #0
 801c428:	d06d      	beq.n	801c506 <rcl_validate_topic_name+0xea>
 801c42a:	4616      	mov	r6, r2
 801c42c:	4604      	mov	r4, r0
 801c42e:	f7e3 ff57 	bl	80002e0 <strlen>
 801c432:	b190      	cbz	r0, 801c45a <rcl_validate_topic_name+0x3e>
 801c434:	7821      	ldrb	r1, [r4, #0]
 801c436:	4a71      	ldr	r2, [pc, #452]	@ (801c5fc <rcl_validate_topic_name+0x1e0>)
 801c438:	5c53      	ldrb	r3, [r2, r1]
 801c43a:	f013 0304 	ands.w	r3, r3, #4
 801c43e:	d15d      	bne.n	801c4fc <rcl_validate_topic_name+0xe0>
 801c440:	1e47      	subs	r7, r0, #1
 801c442:	f814 c007 	ldrb.w	ip, [r4, r7]
 801c446:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 801c44a:	d10d      	bne.n	801c468 <rcl_validate_topic_name+0x4c>
 801c44c:	2302      	movs	r3, #2
 801c44e:	602b      	str	r3, [r5, #0]
 801c450:	b146      	cbz	r6, 801c464 <rcl_validate_topic_name+0x48>
 801c452:	6037      	str	r7, [r6, #0]
 801c454:	2000      	movs	r0, #0
 801c456:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c45a:	2301      	movs	r3, #1
 801c45c:	602b      	str	r3, [r5, #0]
 801c45e:	b10e      	cbz	r6, 801c464 <rcl_validate_topic_name+0x48>
 801c460:	2300      	movs	r3, #0
 801c462:	6033      	str	r3, [r6, #0]
 801c464:	2000      	movs	r0, #0
 801c466:	e7f6      	b.n	801c456 <rcl_validate_topic_name+0x3a>
 801c468:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 801c46c:	469a      	mov	sl, r3
 801c46e:	469e      	mov	lr, r3
 801c470:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 801c474:	f1a9 0c2f 	sub.w	ip, r9, #47	@ 0x2f
 801c478:	f1bc 0f4f 	cmp.w	ip, #79	@ 0x4f
 801c47c:	d85b      	bhi.n	801c536 <rcl_validate_topic_name+0x11a>
 801c47e:	e8df f00c 	tbb	[pc, ip]
 801c482:	4463      	.short	0x4463
 801c484:	44444444 	.word	0x44444444
 801c488:	44444444 	.word	0x44444444
 801c48c:	5a5a5a44 	.word	0x5a5a5a44
 801c490:	5a5a5a5a 	.word	0x5a5a5a5a
 801c494:	44444444 	.word	0x44444444
 801c498:	44444444 	.word	0x44444444
 801c49c:	44444444 	.word	0x44444444
 801c4a0:	44444444 	.word	0x44444444
 801c4a4:	44444444 	.word	0x44444444
 801c4a8:	44444444 	.word	0x44444444
 801c4ac:	5a5a4444 	.word	0x5a5a4444
 801c4b0:	5a2e5a5a 	.word	0x5a2e5a5a
 801c4b4:	44444444 	.word	0x44444444
 801c4b8:	44444444 	.word	0x44444444
 801c4bc:	44444444 	.word	0x44444444
 801c4c0:	44444444 	.word	0x44444444
 801c4c4:	44444444 	.word	0x44444444
 801c4c8:	44444444 	.word	0x44444444
 801c4cc:	5a284444 	.word	0x5a284444
 801c4d0:	6b73      	.short	0x6b73
 801c4d2:	f1ba 0f00 	cmp.w	sl, #0
 801c4d6:	d13a      	bne.n	801c54e <rcl_validate_topic_name+0x132>
 801c4d8:	4673      	mov	r3, lr
 801c4da:	f04f 0a01 	mov.w	sl, #1
 801c4de:	f10e 0e01 	add.w	lr, lr, #1
 801c4e2:	4570      	cmp	r0, lr
 801c4e4:	d1c4      	bne.n	801c470 <rcl_validate_topic_name+0x54>
 801c4e6:	f1ba 0f00 	cmp.w	sl, #0
 801c4ea:	d048      	beq.n	801c57e <rcl_validate_topic_name+0x162>
 801c4ec:	2205      	movs	r2, #5
 801c4ee:	602a      	str	r2, [r5, #0]
 801c4f0:	2e00      	cmp	r6, #0
 801c4f2:	d0b7      	beq.n	801c464 <rcl_validate_topic_name+0x48>
 801c4f4:	6033      	str	r3, [r6, #0]
 801c4f6:	e7b5      	b.n	801c464 <rcl_validate_topic_name+0x48>
 801c4f8:	200b      	movs	r0, #11
 801c4fa:	4770      	bx	lr
 801c4fc:	2304      	movs	r3, #4
 801c4fe:	602b      	str	r3, [r5, #0]
 801c500:	2e00      	cmp	r6, #0
 801c502:	d1ad      	bne.n	801c460 <rcl_validate_topic_name+0x44>
 801c504:	e7ae      	b.n	801c464 <rcl_validate_topic_name+0x48>
 801c506:	200b      	movs	r0, #11
 801c508:	e7a5      	b.n	801c456 <rcl_validate_topic_name+0x3a>
 801c50a:	f812 c009 	ldrb.w	ip, [r2, r9]
 801c50e:	f01c 0f04 	tst.w	ip, #4
 801c512:	d0e4      	beq.n	801c4de <rcl_validate_topic_name+0xc2>
 801c514:	f1ba 0f00 	cmp.w	sl, #0
 801c518:	d0e1      	beq.n	801c4de <rcl_validate_topic_name+0xc2>
 801c51a:	f1be 0f00 	cmp.w	lr, #0
 801c51e:	d0de      	beq.n	801c4de <rcl_validate_topic_name+0xc2>
 801c520:	f10e 3cff 	add.w	ip, lr, #4294967295	@ 0xffffffff
 801c524:	4563      	cmp	r3, ip
 801c526:	d1da      	bne.n	801c4de <rcl_validate_topic_name+0xc2>
 801c528:	2309      	movs	r3, #9
 801c52a:	602b      	str	r3, [r5, #0]
 801c52c:	2e00      	cmp	r6, #0
 801c52e:	d099      	beq.n	801c464 <rcl_validate_topic_name+0x48>
 801c530:	f8c6 e000 	str.w	lr, [r6]
 801c534:	e796      	b.n	801c464 <rcl_validate_topic_name+0x48>
 801c536:	f1ba 0f00 	cmp.w	sl, #0
 801c53a:	bf0c      	ite	eq
 801c53c:	2303      	moveq	r3, #3
 801c53e:	2308      	movne	r3, #8
 801c540:	602b      	str	r3, [r5, #0]
 801c542:	2e00      	cmp	r6, #0
 801c544:	d1f4      	bne.n	801c530 <rcl_validate_topic_name+0x114>
 801c546:	e78d      	b.n	801c464 <rcl_validate_topic_name+0x48>
 801c548:	f1ba 0f00 	cmp.w	sl, #0
 801c54c:	d0c7      	beq.n	801c4de <rcl_validate_topic_name+0xc2>
 801c54e:	2308      	movs	r3, #8
 801c550:	602b      	str	r3, [r5, #0]
 801c552:	2e00      	cmp	r6, #0
 801c554:	d1ec      	bne.n	801c530 <rcl_validate_topic_name+0x114>
 801c556:	e785      	b.n	801c464 <rcl_validate_topic_name+0x48>
 801c558:	f1be 0f00 	cmp.w	lr, #0
 801c55c:	d0bf      	beq.n	801c4de <rcl_validate_topic_name+0xc2>
 801c55e:	2306      	movs	r3, #6
 801c560:	602b      	str	r3, [r5, #0]
 801c562:	2e00      	cmp	r6, #0
 801c564:	d1e4      	bne.n	801c530 <rcl_validate_topic_name+0x114>
 801c566:	e77d      	b.n	801c464 <rcl_validate_topic_name+0x48>
 801c568:	f1ba 0f00 	cmp.w	sl, #0
 801c56c:	d104      	bne.n	801c578 <rcl_validate_topic_name+0x15c>
 801c56e:	2305      	movs	r3, #5
 801c570:	602b      	str	r3, [r5, #0]
 801c572:	2e00      	cmp	r6, #0
 801c574:	d1dc      	bne.n	801c530 <rcl_validate_topic_name+0x114>
 801c576:	e775      	b.n	801c464 <rcl_validate_topic_name+0x48>
 801c578:	f04f 0a00 	mov.w	sl, #0
 801c57c:	e7af      	b.n	801c4de <rcl_validate_topic_name+0xc2>
 801c57e:	297e      	cmp	r1, #126	@ 0x7e
 801c580:	d01d      	beq.n	801c5be <rcl_validate_topic_name+0x1a2>
 801c582:	2101      	movs	r1, #1
 801c584:	e006      	b.n	801c594 <rcl_validate_topic_name+0x178>
 801c586:	458e      	cmp	lr, r1
 801c588:	f104 0401 	add.w	r4, r4, #1
 801c58c:	f101 0301 	add.w	r3, r1, #1
 801c590:	d912      	bls.n	801c5b8 <rcl_validate_topic_name+0x19c>
 801c592:	4619      	mov	r1, r3
 801c594:	4557      	cmp	r7, sl
 801c596:	f10a 0a01 	add.w	sl, sl, #1
 801c59a:	d0f4      	beq.n	801c586 <rcl_validate_topic_name+0x16a>
 801c59c:	7823      	ldrb	r3, [r4, #0]
 801c59e:	2b2f      	cmp	r3, #47	@ 0x2f
 801c5a0:	d1f1      	bne.n	801c586 <rcl_validate_topic_name+0x16a>
 801c5a2:	7863      	ldrb	r3, [r4, #1]
 801c5a4:	5cd3      	ldrb	r3, [r2, r3]
 801c5a6:	075b      	lsls	r3, r3, #29
 801c5a8:	d5ed      	bpl.n	801c586 <rcl_validate_topic_name+0x16a>
 801c5aa:	2304      	movs	r3, #4
 801c5ac:	602b      	str	r3, [r5, #0]
 801c5ae:	2e00      	cmp	r6, #0
 801c5b0:	f43f af58 	beq.w	801c464 <rcl_validate_topic_name+0x48>
 801c5b4:	6031      	str	r1, [r6, #0]
 801c5b6:	e755      	b.n	801c464 <rcl_validate_topic_name+0x48>
 801c5b8:	2300      	movs	r3, #0
 801c5ba:	602b      	str	r3, [r5, #0]
 801c5bc:	e752      	b.n	801c464 <rcl_validate_topic_name+0x48>
 801c5be:	4653      	mov	r3, sl
 801c5c0:	2101      	movs	r1, #1
 801c5c2:	e00a      	b.n	801c5da <rcl_validate_topic_name+0x1be>
 801c5c4:	2b01      	cmp	r3, #1
 801c5c6:	d012      	beq.n	801c5ee <rcl_validate_topic_name+0x1d2>
 801c5c8:	458e      	cmp	lr, r1
 801c5ca:	f103 0301 	add.w	r3, r3, #1
 801c5ce:	f104 0401 	add.w	r4, r4, #1
 801c5d2:	f101 0001 	add.w	r0, r1, #1
 801c5d6:	d9ef      	bls.n	801c5b8 <rcl_validate_topic_name+0x19c>
 801c5d8:	4601      	mov	r1, r0
 801c5da:	429f      	cmp	r7, r3
 801c5dc:	d0f4      	beq.n	801c5c8 <rcl_validate_topic_name+0x1ac>
 801c5de:	7820      	ldrb	r0, [r4, #0]
 801c5e0:	282f      	cmp	r0, #47	@ 0x2f
 801c5e2:	d1ef      	bne.n	801c5c4 <rcl_validate_topic_name+0x1a8>
 801c5e4:	7860      	ldrb	r0, [r4, #1]
 801c5e6:	5c10      	ldrb	r0, [r2, r0]
 801c5e8:	0740      	lsls	r0, r0, #29
 801c5ea:	d5ed      	bpl.n	801c5c8 <rcl_validate_topic_name+0x1ac>
 801c5ec:	e7dd      	b.n	801c5aa <rcl_validate_topic_name+0x18e>
 801c5ee:	2207      	movs	r2, #7
 801c5f0:	602a      	str	r2, [r5, #0]
 801c5f2:	2e00      	cmp	r6, #0
 801c5f4:	f47f af7e 	bne.w	801c4f4 <rcl_validate_topic_name+0xd8>
 801c5f8:	e734      	b.n	801c464 <rcl_validate_topic_name+0x48>
 801c5fa:	bf00      	nop
 801c5fc:	08021ab8 	.word	0x08021ab8

0801c600 <rcutils_split>:
 801c600:	b082      	sub	sp, #8
 801c602:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c606:	b08b      	sub	sp, #44	@ 0x2c
 801c608:	ac14      	add	r4, sp, #80	@ 0x50
 801c60a:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 801c60c:	e884 000c 	stmia.w	r4, {r2, r3}
 801c610:	2f00      	cmp	r7, #0
 801c612:	f000 809f 	beq.w	801c754 <rcutils_split+0x154>
 801c616:	4606      	mov	r6, r0
 801c618:	2800      	cmp	r0, #0
 801c61a:	d071      	beq.n	801c700 <rcutils_split+0x100>
 801c61c:	7804      	ldrb	r4, [r0, #0]
 801c61e:	2c00      	cmp	r4, #0
 801c620:	d06e      	beq.n	801c700 <rcutils_split+0x100>
 801c622:	460d      	mov	r5, r1
 801c624:	f7e3 fe5c 	bl	80002e0 <strlen>
 801c628:	1833      	adds	r3, r6, r0
 801c62a:	1b64      	subs	r4, r4, r5
 801c62c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801c630:	4680      	mov	r8, r0
 801c632:	fab4 f484 	clz	r4, r4
 801c636:	0964      	lsrs	r4, r4, #5
 801c638:	42ab      	cmp	r3, r5
 801c63a:	bf08      	it	eq
 801c63c:	f1a8 0801 	subeq.w	r8, r8, #1
 801c640:	4544      	cmp	r4, r8
 801c642:	d278      	bcs.n	801c736 <rcutils_split+0x136>
 801c644:	1933      	adds	r3, r6, r4
 801c646:	eb06 0008 	add.w	r0, r6, r8
 801c64a:	2101      	movs	r1, #1
 801c64c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c650:	42aa      	cmp	r2, r5
 801c652:	bf08      	it	eq
 801c654:	3101      	addeq	r1, #1
 801c656:	4283      	cmp	r3, r0
 801c658:	d1f8      	bne.n	801c64c <rcutils_split+0x4c>
 801c65a:	aa14      	add	r2, sp, #80	@ 0x50
 801c65c:	4638      	mov	r0, r7
 801c65e:	f000 f89f 	bl	801c7a0 <rcutils_string_array_init>
 801c662:	4681      	mov	r9, r0
 801c664:	2800      	cmp	r0, #0
 801c666:	d159      	bne.n	801c71c <rcutils_split+0x11c>
 801c668:	687a      	ldr	r2, [r7, #4]
 801c66a:	46a2      	mov	sl, r4
 801c66c:	e002      	b.n	801c674 <rcutils_split+0x74>
 801c66e:	3401      	adds	r4, #1
 801c670:	4544      	cmp	r4, r8
 801c672:	d222      	bcs.n	801c6ba <rcutils_split+0xba>
 801c674:	5d33      	ldrb	r3, [r6, r4]
 801c676:	42ab      	cmp	r3, r5
 801c678:	d1f9      	bne.n	801c66e <rcutils_split+0x6e>
 801c67a:	4554      	cmp	r4, sl
 801c67c:	eba4 0b0a 	sub.w	fp, r4, sl
 801c680:	d037      	beq.n	801c6f2 <rcutils_split+0xf2>
 801c682:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c684:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801c686:	9201      	str	r2, [sp, #4]
 801c688:	f10b 0002 	add.w	r0, fp, #2
 801c68c:	4798      	blx	r3
 801c68e:	9a01      	ldr	r2, [sp, #4]
 801c690:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
 801c694:	687a      	ldr	r2, [r7, #4]
 801c696:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801c69a:	eb06 030a 	add.w	r3, r6, sl
 801c69e:	f10b 0101 	add.w	r1, fp, #1
 801c6a2:	2800      	cmp	r0, #0
 801c6a4:	d038      	beq.n	801c718 <rcutils_split+0x118>
 801c6a6:	4a2e      	ldr	r2, [pc, #184]	@ (801c760 <rcutils_split+0x160>)
 801c6a8:	f000 ff50 	bl	801d54c <sniprintf>
 801c6ac:	687a      	ldr	r2, [r7, #4]
 801c6ae:	f109 0901 	add.w	r9, r9, #1
 801c6b2:	3401      	adds	r4, #1
 801c6b4:	4544      	cmp	r4, r8
 801c6b6:	46a2      	mov	sl, r4
 801c6b8:	d3dc      	bcc.n	801c674 <rcutils_split+0x74>
 801c6ba:	4554      	cmp	r4, sl
 801c6bc:	d043      	beq.n	801c746 <rcutils_split+0x146>
 801c6be:	eba4 040a 	sub.w	r4, r4, sl
 801c6c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c6c4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801c6c6:	9201      	str	r2, [sp, #4]
 801c6c8:	1ca0      	adds	r0, r4, #2
 801c6ca:	4798      	blx	r3
 801c6cc:	9a01      	ldr	r2, [sp, #4]
 801c6ce:	687b      	ldr	r3, [r7, #4]
 801c6d0:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
 801c6d4:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 801c6d8:	b300      	cbz	r0, 801c71c <rcutils_split+0x11c>
 801c6da:	4a21      	ldr	r2, [pc, #132]	@ (801c760 <rcutils_split+0x160>)
 801c6dc:	eb06 030a 	add.w	r3, r6, sl
 801c6e0:	1c61      	adds	r1, r4, #1
 801c6e2:	f000 ff33 	bl	801d54c <sniprintf>
 801c6e6:	2000      	movs	r0, #0
 801c6e8:	b00b      	add	sp, #44	@ 0x2c
 801c6ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6ee:	b002      	add	sp, #8
 801c6f0:	4770      	bx	lr
 801c6f2:	683b      	ldr	r3, [r7, #0]
 801c6f4:	3b01      	subs	r3, #1
 801c6f6:	2100      	movs	r1, #0
 801c6f8:	603b      	str	r3, [r7, #0]
 801c6fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801c6fe:	e7d8      	b.n	801c6b2 <rcutils_split+0xb2>
 801c700:	a802      	add	r0, sp, #8
 801c702:	ac02      	add	r4, sp, #8
 801c704:	f000 f82e 	bl	801c764 <rcutils_get_zero_initialized_string_array>
 801c708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c70a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801c70c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801c710:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801c714:	2000      	movs	r0, #0
 801c716:	e7e7      	b.n	801c6e8 <rcutils_split+0xe8>
 801c718:	f8c7 9000 	str.w	r9, [r7]
 801c71c:	4638      	mov	r0, r7
 801c71e:	f000 f861 	bl	801c7e4 <rcutils_string_array_fini>
 801c722:	b928      	cbnz	r0, 801c730 <rcutils_split+0x130>
 801c724:	200a      	movs	r0, #10
 801c726:	b00b      	add	sp, #44	@ 0x2c
 801c728:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c72c:	b002      	add	sp, #8
 801c72e:	4770      	bx	lr
 801c730:	f7f2 fdb6 	bl	800f2a0 <rcutils_reset_error>
 801c734:	e7f6      	b.n	801c724 <rcutils_split+0x124>
 801c736:	aa14      	add	r2, sp, #80	@ 0x50
 801c738:	2101      	movs	r1, #1
 801c73a:	4638      	mov	r0, r7
 801c73c:	f000 f830 	bl	801c7a0 <rcutils_string_array_init>
 801c740:	2800      	cmp	r0, #0
 801c742:	d1eb      	bne.n	801c71c <rcutils_split+0x11c>
 801c744:	687a      	ldr	r2, [r7, #4]
 801c746:	683b      	ldr	r3, [r7, #0]
 801c748:	3b01      	subs	r3, #1
 801c74a:	2100      	movs	r1, #0
 801c74c:	603b      	str	r3, [r7, #0]
 801c74e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801c752:	e7df      	b.n	801c714 <rcutils_split+0x114>
 801c754:	200b      	movs	r0, #11
 801c756:	b00b      	add	sp, #44	@ 0x2c
 801c758:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c75c:	b002      	add	sp, #8
 801c75e:	4770      	bx	lr
 801c760:	08020348 	.word	0x08020348

0801c764 <rcutils_get_zero_initialized_string_array>:
 801c764:	b570      	push	{r4, r5, r6, lr}
 801c766:	b086      	sub	sp, #24
 801c768:	4606      	mov	r6, r0
 801c76a:	4668      	mov	r0, sp
 801c76c:	f7f2 fd38 	bl	800f1e0 <rcutils_get_zero_initialized_allocator>
 801c770:	46ee      	mov	lr, sp
 801c772:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c776:	4c09      	ldr	r4, [pc, #36]	@ (801c79c <rcutils_get_zero_initialized_string_array+0x38>)
 801c778:	f104 0508 	add.w	r5, r4, #8
 801c77c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c77e:	46a4      	mov	ip, r4
 801c780:	f8de 3000 	ldr.w	r3, [lr]
 801c784:	602b      	str	r3, [r5, #0]
 801c786:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c78a:	4634      	mov	r4, r6
 801c78c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c78e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801c792:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801c796:	4630      	mov	r0, r6
 801c798:	b006      	add	sp, #24
 801c79a:	bd70      	pop	{r4, r5, r6, pc}
 801c79c:	2000f608 	.word	0x2000f608

0801c7a0 <rcutils_string_array_init>:
 801c7a0:	b1da      	cbz	r2, 801c7da <rcutils_string_array_init+0x3a>
 801c7a2:	b570      	push	{r4, r5, r6, lr}
 801c7a4:	4605      	mov	r5, r0
 801c7a6:	b1d0      	cbz	r0, 801c7de <rcutils_string_array_init+0x3e>
 801c7a8:	460e      	mov	r6, r1
 801c7aa:	4614      	mov	r4, r2
 801c7ac:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 801c7b0:	6001      	str	r1, [r0, #0]
 801c7b2:	2104      	movs	r1, #4
 801c7b4:	4630      	mov	r0, r6
 801c7b6:	4798      	blx	r3
 801c7b8:	6068      	str	r0, [r5, #4]
 801c7ba:	b150      	cbz	r0, 801c7d2 <rcutils_string_array_init+0x32>
 801c7bc:	46a4      	mov	ip, r4
 801c7be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c7c2:	f105 0408 	add.w	r4, r5, #8
 801c7c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c7c8:	f8dc 3000 	ldr.w	r3, [ip]
 801c7cc:	6023      	str	r3, [r4, #0]
 801c7ce:	2000      	movs	r0, #0
 801c7d0:	bd70      	pop	{r4, r5, r6, pc}
 801c7d2:	2e00      	cmp	r6, #0
 801c7d4:	d0f2      	beq.n	801c7bc <rcutils_string_array_init+0x1c>
 801c7d6:	200a      	movs	r0, #10
 801c7d8:	bd70      	pop	{r4, r5, r6, pc}
 801c7da:	200b      	movs	r0, #11
 801c7dc:	4770      	bx	lr
 801c7de:	200b      	movs	r0, #11
 801c7e0:	bd70      	pop	{r4, r5, r6, pc}
 801c7e2:	bf00      	nop

0801c7e4 <rcutils_string_array_fini>:
 801c7e4:	b310      	cbz	r0, 801c82c <rcutils_string_array_fini+0x48>
 801c7e6:	6843      	ldr	r3, [r0, #4]
 801c7e8:	b570      	push	{r4, r5, r6, lr}
 801c7ea:	4604      	mov	r4, r0
 801c7ec:	b1d3      	cbz	r3, 801c824 <rcutils_string_array_fini+0x40>
 801c7ee:	3008      	adds	r0, #8
 801c7f0:	f7f2 fd30 	bl	800f254 <rcutils_allocator_is_valid>
 801c7f4:	b1c0      	cbz	r0, 801c828 <rcutils_string_array_fini+0x44>
 801c7f6:	e9d4 3000 	ldrd	r3, r0, [r4]
 801c7fa:	b16b      	cbz	r3, 801c818 <rcutils_string_array_fini+0x34>
 801c7fc:	2500      	movs	r5, #0
 801c7fe:	462e      	mov	r6, r5
 801c800:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801c804:	68e3      	ldr	r3, [r4, #12]
 801c806:	69a1      	ldr	r1, [r4, #24]
 801c808:	4798      	blx	r3
 801c80a:	e9d4 3000 	ldrd	r3, r0, [r4]
 801c80e:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801c812:	3501      	adds	r5, #1
 801c814:	42ab      	cmp	r3, r5
 801c816:	d8f3      	bhi.n	801c800 <rcutils_string_array_fini+0x1c>
 801c818:	68e3      	ldr	r3, [r4, #12]
 801c81a:	69a1      	ldr	r1, [r4, #24]
 801c81c:	4798      	blx	r3
 801c81e:	2300      	movs	r3, #0
 801c820:	e9c4 3300 	strd	r3, r3, [r4]
 801c824:	2000      	movs	r0, #0
 801c826:	bd70      	pop	{r4, r5, r6, pc}
 801c828:	200b      	movs	r0, #11
 801c82a:	bd70      	pop	{r4, r5, r6, pc}
 801c82c:	200b      	movs	r0, #11
 801c82e:	4770      	bx	lr

0801c830 <rmw_create_guard_condition>:
 801c830:	b538      	push	{r3, r4, r5, lr}
 801c832:	4605      	mov	r5, r0
 801c834:	4807      	ldr	r0, [pc, #28]	@ (801c854 <rmw_create_guard_condition+0x24>)
 801c836:	f7fd fadf 	bl	8019df8 <get_memory>
 801c83a:	b148      	cbz	r0, 801c850 <rmw_create_guard_condition+0x20>
 801c83c:	6884      	ldr	r4, [r0, #8]
 801c83e:	2300      	movs	r3, #0
 801c840:	7423      	strb	r3, [r4, #16]
 801c842:	61e5      	str	r5, [r4, #28]
 801c844:	f7fd fb5e 	bl	8019f04 <rmw_get_implementation_identifier>
 801c848:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801c84c:	f104 0014 	add.w	r0, r4, #20
 801c850:	bd38      	pop	{r3, r4, r5, pc}
 801c852:	bf00      	nop
 801c854:	2000a2a8 	.word	0x2000a2a8

0801c858 <rmw_destroy_guard_condition>:
 801c858:	b508      	push	{r3, lr}
 801c85a:	4b08      	ldr	r3, [pc, #32]	@ (801c87c <rmw_destroy_guard_condition+0x24>)
 801c85c:	6819      	ldr	r1, [r3, #0]
 801c85e:	b911      	cbnz	r1, 801c866 <rmw_destroy_guard_condition+0xe>
 801c860:	e00a      	b.n	801c878 <rmw_destroy_guard_condition+0x20>
 801c862:	6849      	ldr	r1, [r1, #4]
 801c864:	b141      	cbz	r1, 801c878 <rmw_destroy_guard_condition+0x20>
 801c866:	688b      	ldr	r3, [r1, #8]
 801c868:	3314      	adds	r3, #20
 801c86a:	4298      	cmp	r0, r3
 801c86c:	d1f9      	bne.n	801c862 <rmw_destroy_guard_condition+0xa>
 801c86e:	4803      	ldr	r0, [pc, #12]	@ (801c87c <rmw_destroy_guard_condition+0x24>)
 801c870:	f7fd fad2 	bl	8019e18 <put_memory>
 801c874:	2000      	movs	r0, #0
 801c876:	bd08      	pop	{r3, pc}
 801c878:	2001      	movs	r0, #1
 801c87a:	bd08      	pop	{r3, pc}
 801c87c:	2000a2a8 	.word	0x2000a2a8

0801c880 <rmw_trigger_guard_condition>:
 801c880:	b160      	cbz	r0, 801c89c <rmw_trigger_guard_condition+0x1c>
 801c882:	b510      	push	{r4, lr}
 801c884:	4604      	mov	r4, r0
 801c886:	6800      	ldr	r0, [r0, #0]
 801c888:	f7f4 f884 	bl	8010994 <is_uxrce_rmw_identifier_valid>
 801c88c:	b908      	cbnz	r0, 801c892 <rmw_trigger_guard_condition+0x12>
 801c88e:	2001      	movs	r0, #1
 801c890:	bd10      	pop	{r4, pc}
 801c892:	6863      	ldr	r3, [r4, #4]
 801c894:	2201      	movs	r2, #1
 801c896:	741a      	strb	r2, [r3, #16]
 801c898:	2000      	movs	r0, #0
 801c89a:	bd10      	pop	{r4, pc}
 801c89c:	2001      	movs	r0, #1
 801c89e:	4770      	bx	lr

0801c8a0 <arm_mat_trans_f32>:
 801c8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8a4:	8802      	ldrh	r2, [r0, #0]
 801c8a6:	884b      	ldrh	r3, [r1, #2]
 801c8a8:	f8d0 c004 	ldr.w	ip, [r0, #4]
 801c8ac:	684f      	ldr	r7, [r1, #4]
 801c8ae:	8840      	ldrh	r0, [r0, #2]
 801c8b0:	4293      	cmp	r3, r2
 801c8b2:	b083      	sub	sp, #12
 801c8b4:	d14c      	bne.n	801c950 <arm_mat_trans_f32+0xb0>
 801c8b6:	f8b1 e000 	ldrh.w	lr, [r1]
 801c8ba:	4586      	cmp	lr, r0
 801c8bc:	d148      	bne.n	801c950 <arm_mat_trans_f32+0xb0>
 801c8be:	ea4f 089e 	mov.w	r8, lr, lsr #2
 801c8c2:	009c      	lsls	r4, r3, #2
 801c8c4:	f00e 0e03 	and.w	lr, lr, #3
 801c8c8:	fb08 f904 	mul.w	r9, r8, r4
 801c8cc:	ea4f 028e 	mov.w	r2, lr, lsl #2
 801c8d0:	011d      	lsls	r5, r3, #4
 801c8d2:	00db      	lsls	r3, r3, #3
 801c8d4:	ea4f 0989 	mov.w	r9, r9, lsl #2
 801c8d8:	eb07 0a04 	add.w	sl, r7, r4
 801c8dc:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 801c8e0:	9201      	str	r2, [sp, #4]
 801c8e2:	9300      	str	r3, [sp, #0]
 801c8e4:	463b      	mov	r3, r7
 801c8e6:	f1b8 0f00 	cmp.w	r8, #0
 801c8ea:	d01d      	beq.n	801c928 <arm_mat_trans_f32+0x88>
 801c8ec:	9900      	ldr	r1, [sp, #0]
 801c8ee:	f10c 0210 	add.w	r2, ip, #16
 801c8f2:	4439      	add	r1, r7
 801c8f4:	4640      	mov	r0, r8
 801c8f6:	f852 6c10 	ldr.w	r6, [r2, #-16]
 801c8fa:	601e      	str	r6, [r3, #0]
 801c8fc:	ed52 7a03 	vldr	s15, [r2, #-12]
 801c900:	191e      	adds	r6, r3, r4
 801c902:	edc6 7a00 	vstr	s15, [r6]
 801c906:	f852 6c08 	ldr.w	r6, [r2, #-8]
 801c90a:	600e      	str	r6, [r1, #0]
 801c90c:	ed52 7a01 	vldr	s15, [r2, #-4]
 801c910:	190e      	adds	r6, r1, r4
 801c912:	3801      	subs	r0, #1
 801c914:	442b      	add	r3, r5
 801c916:	f102 0210 	add.w	r2, r2, #16
 801c91a:	edc6 7a00 	vstr	s15, [r6]
 801c91e:	4429      	add	r1, r5
 801c920:	d1e9      	bne.n	801c8f6 <arm_mat_trans_f32+0x56>
 801c922:	44dc      	add	ip, fp
 801c924:	eb09 0307 	add.w	r3, r9, r7
 801c928:	f1be 0f00 	cmp.w	lr, #0
 801c92c:	d009      	beq.n	801c942 <arm_mat_trans_f32+0xa2>
 801c92e:	4672      	mov	r2, lr
 801c930:	4661      	mov	r1, ip
 801c932:	f851 0b04 	ldr.w	r0, [r1], #4
 801c936:	6018      	str	r0, [r3, #0]
 801c938:	3a01      	subs	r2, #1
 801c93a:	4423      	add	r3, r4
 801c93c:	d1f9      	bne.n	801c932 <arm_mat_trans_f32+0x92>
 801c93e:	9b01      	ldr	r3, [sp, #4]
 801c940:	449c      	add	ip, r3
 801c942:	3704      	adds	r7, #4
 801c944:	4557      	cmp	r7, sl
 801c946:	d1cd      	bne.n	801c8e4 <arm_mat_trans_f32+0x44>
 801c948:	2000      	movs	r0, #0
 801c94a:	b003      	add	sp, #12
 801c94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c950:	f06f 0002 	mvn.w	r0, #2
 801c954:	e7f9      	b.n	801c94a <arm_mat_trans_f32+0xaa>
 801c956:	bf00      	nop

0801c958 <arm_mat_sub_f32>:
 801c958:	b4f0      	push	{r4, r5, r6, r7}
 801c95a:	e9d1 4700 	ldrd	r4, r7, [r1]
 801c95e:	6803      	ldr	r3, [r0, #0]
 801c960:	f8d0 c004 	ldr.w	ip, [r0, #4]
 801c964:	6856      	ldr	r6, [r2, #4]
 801c966:	42a3      	cmp	r3, r4
 801c968:	d15d      	bne.n	801ca26 <arm_mat_sub_f32+0xce>
 801c96a:	6812      	ldr	r2, [r2, #0]
 801c96c:	4293      	cmp	r3, r2
 801c96e:	d15a      	bne.n	801ca26 <arm_mat_sub_f32+0xce>
 801c970:	8803      	ldrh	r3, [r0, #0]
 801c972:	8844      	ldrh	r4, [r0, #2]
 801c974:	fb04 f403 	mul.w	r4, r4, r3
 801c978:	08a5      	lsrs	r5, r4, #2
 801c97a:	d032      	beq.n	801c9e2 <arm_mat_sub_f32+0x8a>
 801c97c:	f10c 0110 	add.w	r1, ip, #16
 801c980:	f107 0210 	add.w	r2, r7, #16
 801c984:	f106 0310 	add.w	r3, r6, #16
 801c988:	4628      	mov	r0, r5
 801c98a:	ed12 7a04 	vldr	s14, [r2, #-16]
 801c98e:	ed51 7a04 	vldr	s15, [r1, #-16]
 801c992:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c996:	3801      	subs	r0, #1
 801c998:	ed43 7a04 	vstr	s15, [r3, #-16]
 801c99c:	ed12 7a03 	vldr	s14, [r2, #-12]
 801c9a0:	ed51 7a03 	vldr	s15, [r1, #-12]
 801c9a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c9a8:	f101 0110 	add.w	r1, r1, #16
 801c9ac:	ed43 7a03 	vstr	s15, [r3, #-12]
 801c9b0:	ed12 7a02 	vldr	s14, [r2, #-8]
 801c9b4:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 801c9b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c9bc:	f102 0210 	add.w	r2, r2, #16
 801c9c0:	ed43 7a02 	vstr	s15, [r3, #-8]
 801c9c4:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 801c9c8:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 801c9cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c9d0:	f103 0310 	add.w	r3, r3, #16
 801c9d4:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 801c9d8:	d1d7      	bne.n	801c98a <arm_mat_sub_f32+0x32>
 801c9da:	012b      	lsls	r3, r5, #4
 801c9dc:	449c      	add	ip, r3
 801c9de:	441f      	add	r7, r3
 801c9e0:	441e      	add	r6, r3
 801c9e2:	f014 0403 	ands.w	r4, r4, #3
 801c9e6:	d01b      	beq.n	801ca20 <arm_mat_sub_f32+0xc8>
 801c9e8:	eddc 7a00 	vldr	s15, [ip]
 801c9ec:	ed97 7a00 	vldr	s14, [r7]
 801c9f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c9f4:	3c01      	subs	r4, #1
 801c9f6:	edc6 7a00 	vstr	s15, [r6]
 801c9fa:	d011      	beq.n	801ca20 <arm_mat_sub_f32+0xc8>
 801c9fc:	eddc 7a01 	vldr	s15, [ip, #4]
 801ca00:	ed97 7a01 	vldr	s14, [r7, #4]
 801ca04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ca08:	2c01      	cmp	r4, #1
 801ca0a:	edc6 7a01 	vstr	s15, [r6, #4]
 801ca0e:	d007      	beq.n	801ca20 <arm_mat_sub_f32+0xc8>
 801ca10:	eddc 7a02 	vldr	s15, [ip, #8]
 801ca14:	ed97 7a02 	vldr	s14, [r7, #8]
 801ca18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ca1c:	edc6 7a02 	vstr	s15, [r6, #8]
 801ca20:	2000      	movs	r0, #0
 801ca22:	bcf0      	pop	{r4, r5, r6, r7}
 801ca24:	4770      	bx	lr
 801ca26:	f06f 0002 	mvn.w	r0, #2
 801ca2a:	e7fa      	b.n	801ca22 <arm_mat_sub_f32+0xca>

0801ca2c <arm_mat_mult_f32>:
 801ca2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca30:	8845      	ldrh	r5, [r0, #2]
 801ca32:	880b      	ldrh	r3, [r1, #0]
 801ca34:	8806      	ldrh	r6, [r0, #0]
 801ca36:	6847      	ldr	r7, [r0, #4]
 801ca38:	6854      	ldr	r4, [r2, #4]
 801ca3a:	6848      	ldr	r0, [r1, #4]
 801ca3c:	b08b      	sub	sp, #44	@ 0x2c
 801ca3e:	42ab      	cmp	r3, r5
 801ca40:	9109      	str	r1, [sp, #36]	@ 0x24
 801ca42:	9604      	str	r6, [sp, #16]
 801ca44:	8849      	ldrh	r1, [r1, #2]
 801ca46:	f040 808a 	bne.w	801cb5e <arm_mat_mult_f32+0x132>
 801ca4a:	8815      	ldrh	r5, [r2, #0]
 801ca4c:	42b5      	cmp	r5, r6
 801ca4e:	f040 8086 	bne.w	801cb5e <arm_mat_mult_f32+0x132>
 801ca52:	8852      	ldrh	r2, [r2, #2]
 801ca54:	428a      	cmp	r2, r1
 801ca56:	f040 8082 	bne.w	801cb5e <arm_mat_mult_f32+0x132>
 801ca5a:	ea4f 0893 	mov.w	r8, r3, lsr #2
 801ca5e:	1d01      	adds	r1, r0, #4
 801ca60:	0116      	lsls	r6, r2, #4
 801ca62:	9108      	str	r1, [sp, #32]
 801ca64:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 801ca68:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 801ca6c:	9101      	str	r1, [sp, #4]
 801ca6e:	fb06 f108 	mul.w	r1, r6, r8
 801ca72:	0095      	lsls	r5, r2, #2
 801ca74:	9103      	str	r1, [sp, #12]
 801ca76:	00d2      	lsls	r2, r2, #3
 801ca78:	ea4f 018c 	mov.w	r1, ip, lsl #2
 801ca7c:	f003 0903 	and.w	r9, r3, #3
 801ca80:	009b      	lsls	r3, r3, #2
 801ca82:	f107 0b10 	add.w	fp, r7, #16
 801ca86:	eb04 0a05 	add.w	sl, r4, r5
 801ca8a:	9107      	str	r1, [sp, #28]
 801ca8c:	9202      	str	r2, [sp, #8]
 801ca8e:	9306      	str	r3, [sp, #24]
 801ca90:	f1ab 0310 	sub.w	r3, fp, #16
 801ca94:	9305      	str	r3, [sp, #20]
 801ca96:	9b07      	ldr	r3, [sp, #28]
 801ca98:	f8dd e020 	ldr.w	lr, [sp, #32]
 801ca9c:	eb03 0c0a 	add.w	ip, r3, sl
 801caa0:	eddf 7a31 	vldr	s15, [pc, #196]	@ 801cb68 <arm_mat_mult_f32+0x13c>
 801caa4:	f1b8 0f00 	cmp.w	r8, #0
 801caa8:	d053      	beq.n	801cb52 <arm_mat_mult_f32+0x126>
 801caaa:	9b02      	ldr	r3, [sp, #8]
 801caac:	4644      	mov	r4, r8
 801caae:	18c1      	adds	r1, r0, r3
 801cab0:	4602      	mov	r2, r0
 801cab2:	465b      	mov	r3, fp
 801cab4:	ed92 6a00 	vldr	s12, [r2]
 801cab8:	ed13 7a04 	vldr	s14, [r3, #-16]
 801cabc:	ed53 4a03 	vldr	s9, [r3, #-12]
 801cac0:	ed53 6a02 	vldr	s13, [r3, #-8]
 801cac4:	ed91 5a00 	vldr	s10, [r1]
 801cac8:	ed53 5a01 	vldr	s11, [r3, #-4]
 801cacc:	1957      	adds	r7, r2, r5
 801cace:	ee27 7a06 	vmul.f32	s14, s14, s12
 801cad2:	ed97 6a00 	vldr	s12, [r7]
 801cad6:	ee77 7a27 	vadd.f32	s15, s14, s15
 801cada:	ee26 6a24 	vmul.f32	s12, s12, s9
 801cade:	194f      	adds	r7, r1, r5
 801cae0:	ee36 6a27 	vadd.f32	s12, s12, s15
 801cae4:	ee26 7a85 	vmul.f32	s14, s13, s10
 801cae8:	edd7 7a00 	vldr	s15, [r7]
 801caec:	ee37 7a06 	vadd.f32	s14, s14, s12
 801caf0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801caf4:	3c01      	subs	r4, #1
 801caf6:	4432      	add	r2, r6
 801caf8:	4431      	add	r1, r6
 801cafa:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cafe:	f103 0310 	add.w	r3, r3, #16
 801cb02:	d1d7      	bne.n	801cab4 <arm_mat_mult_f32+0x88>
 801cb04:	9b03      	ldr	r3, [sp, #12]
 801cb06:	9a01      	ldr	r2, [sp, #4]
 801cb08:	4418      	add	r0, r3
 801cb0a:	f1b9 0f00 	cmp.w	r9, #0
 801cb0e:	d00b      	beq.n	801cb28 <arm_mat_mult_f32+0xfc>
 801cb10:	464b      	mov	r3, r9
 801cb12:	edd0 6a00 	vldr	s13, [r0]
 801cb16:	ecb2 7a01 	vldmia	r2!, {s14}
 801cb1a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cb1e:	3b01      	subs	r3, #1
 801cb20:	4428      	add	r0, r5
 801cb22:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cb26:	d1f4      	bne.n	801cb12 <arm_mat_mult_f32+0xe6>
 801cb28:	ecec 7a01 	vstmia	ip!, {s15}
 801cb2c:	45d4      	cmp	ip, sl
 801cb2e:	4670      	mov	r0, lr
 801cb30:	f10e 0e04 	add.w	lr, lr, #4
 801cb34:	d1b4      	bne.n	801caa0 <arm_mat_mult_f32+0x74>
 801cb36:	9a01      	ldr	r2, [sp, #4]
 801cb38:	9b06      	ldr	r3, [sp, #24]
 801cb3a:	4611      	mov	r1, r2
 801cb3c:	4419      	add	r1, r3
 801cb3e:	449b      	add	fp, r3
 801cb40:	9b04      	ldr	r3, [sp, #16]
 801cb42:	9101      	str	r1, [sp, #4]
 801cb44:	3b01      	subs	r3, #1
 801cb46:	44aa      	add	sl, r5
 801cb48:	9304      	str	r3, [sp, #16]
 801cb4a:	d004      	beq.n	801cb56 <arm_mat_mult_f32+0x12a>
 801cb4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cb4e:	6858      	ldr	r0, [r3, #4]
 801cb50:	e79e      	b.n	801ca90 <arm_mat_mult_f32+0x64>
 801cb52:	9a05      	ldr	r2, [sp, #20]
 801cb54:	e7d9      	b.n	801cb0a <arm_mat_mult_f32+0xde>
 801cb56:	4618      	mov	r0, r3
 801cb58:	b00b      	add	sp, #44	@ 0x2c
 801cb5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb5e:	f06f 0002 	mvn.w	r0, #2
 801cb62:	b00b      	add	sp, #44	@ 0x2c
 801cb64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb68:	00000000 	.word	0x00000000

0801cb6c <arm_mat_inverse_f32>:
 801cb6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb70:	8843      	ldrh	r3, [r0, #2]
 801cb72:	8804      	ldrh	r4, [r0, #0]
 801cb74:	684e      	ldr	r6, [r1, #4]
 801cb76:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801cb7a:	b087      	sub	sp, #28
 801cb7c:	429c      	cmp	r4, r3
 801cb7e:	9301      	str	r3, [sp, #4]
 801cb80:	9603      	str	r6, [sp, #12]
 801cb82:	f040 80ea 	bne.w	801cd5a <arm_mat_inverse_f32+0x1ee>
 801cb86:	880a      	ldrh	r2, [r1, #0]
 801cb88:	884b      	ldrh	r3, [r1, #2]
 801cb8a:	4293      	cmp	r3, r2
 801cb8c:	f040 80e5 	bne.w	801cd5a <arm_mat_inverse_f32+0x1ee>
 801cb90:	429c      	cmp	r4, r3
 801cb92:	f040 80e2 	bne.w	801cd5a <arm_mat_inverse_f32+0x1ee>
 801cb96:	9005      	str	r0, [sp, #20]
 801cb98:	b30c      	cbz	r4, 801cbde <arm_mat_inverse_f32+0x72>
 801cb9a:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 801cb9e:	1e67      	subs	r7, r4, #1
 801cba0:	f846 bb04 	str.w	fp, [r6], #4
 801cba4:	d01b      	beq.n	801cbde <arm_mat_inverse_f32+0x72>
 801cba6:	f04f 0801 	mov.w	r8, #1
 801cbaa:	00ba      	lsls	r2, r7, #2
 801cbac:	eb06 0a02 	add.w	sl, r6, r2
 801cbb0:	ea4f 0588 	mov.w	r5, r8, lsl #2
 801cbb4:	4630      	mov	r0, r6
 801cbb6:	2100      	movs	r1, #0
 801cbb8:	f000 fe36 	bl	801d828 <memset>
 801cbbc:	eb0a 0605 	add.w	r6, sl, r5
 801cbc0:	462a      	mov	r2, r5
 801cbc2:	2100      	movs	r1, #0
 801cbc4:	4650      	mov	r0, sl
 801cbc6:	f1b8 0f00 	cmp.w	r8, #0
 801cbca:	f000 80cb 	beq.w	801cd64 <arm_mat_inverse_f32+0x1f8>
 801cbce:	f000 fe2b 	bl	801d828 <memset>
 801cbd2:	3f01      	subs	r7, #1
 801cbd4:	f108 0801 	add.w	r8, r8, #1
 801cbd8:	f846 bb04 	str.w	fp, [r6], #4
 801cbdc:	d1e5      	bne.n	801cbaa <arm_mat_inverse_f32+0x3e>
 801cbde:	9b01      	ldr	r3, [sp, #4]
 801cbe0:	2b00      	cmp	r3, #0
 801cbe2:	f000 80b5 	beq.w	801cd50 <arm_mat_inverse_f32+0x1e4>
 801cbe6:	009d      	lsls	r5, r3, #2
 801cbe8:	eb09 0205 	add.w	r2, r9, r5
 801cbec:	46cc      	mov	ip, r9
 801cbee:	9202      	str	r2, [sp, #8]
 801cbf0:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801cbf4:	1d2a      	adds	r2, r5, #4
 801cbf6:	9204      	str	r2, [sp, #16]
 801cbf8:	462f      	mov	r7, r5
 801cbfa:	469e      	mov	lr, r3
 801cbfc:	2600      	movs	r6, #0
 801cbfe:	9b02      	ldr	r3, [sp, #8]
 801cc00:	eddc 6a00 	vldr	s13, [ip]
 801cc04:	42b4      	cmp	r4, r6
 801cc06:	eba3 0b07 	sub.w	fp, r3, r7
 801cc0a:	f000 80a1 	beq.w	801cd50 <arm_mat_inverse_f32+0x1e4>
 801cc0e:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 801cd74 <arm_mat_inverse_f32+0x208>
 801cc12:	4632      	mov	r2, r6
 801cc14:	4663      	mov	r3, ip
 801cc16:	e00b      	b.n	801cc30 <arm_mat_inverse_f32+0xc4>
 801cc18:	eef4 7a47 	vcmp.f32	s15, s14
 801cc1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc20:	f102 0201 	add.w	r2, r2, #1
 801cc24:	bfc8      	it	gt
 801cc26:	eeb0 7a67 	vmovgt.f32	s14, s15
 801cc2a:	42a2      	cmp	r2, r4
 801cc2c:	442b      	add	r3, r5
 801cc2e:	d014      	beq.n	801cc5a <arm_mat_inverse_f32+0xee>
 801cc30:	edd3 7a00 	vldr	s15, [r3]
 801cc34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801cc38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc3c:	eeb1 6a67 	vneg.f32	s12, s15
 801cc40:	dcea      	bgt.n	801cc18 <arm_mat_inverse_f32+0xac>
 801cc42:	eeb4 6a47 	vcmp.f32	s12, s14
 801cc46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc4a:	f102 0201 	add.w	r2, r2, #1
 801cc4e:	bfc8      	it	gt
 801cc50:	eeb0 7a46 	vmovgt.f32	s14, s12
 801cc54:	42a2      	cmp	r2, r4
 801cc56:	442b      	add	r3, r5
 801cc58:	d1ea      	bne.n	801cc30 <arm_mat_inverse_f32+0xc4>
 801cc5a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801cc5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc62:	d075      	beq.n	801cd50 <arm_mat_inverse_f32+0x1e4>
 801cc64:	eef5 6a40 	vcmp.f32	s13, #0.0
 801cc68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc6c:	d070      	beq.n	801cd50 <arm_mat_inverse_f32+0x1e4>
 801cc6e:	4672      	mov	r2, lr
 801cc70:	4663      	mov	r3, ip
 801cc72:	ed93 7a00 	vldr	s14, [r3]
 801cc76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801cc7a:	3a01      	subs	r2, #1
 801cc7c:	ece3 7a01 	vstmia	r3!, {s15}
 801cc80:	d1f7      	bne.n	801cc72 <arm_mat_inverse_f32+0x106>
 801cc82:	9901      	ldr	r1, [sp, #4]
 801cc84:	464b      	mov	r3, r9
 801cc86:	ed93 7a00 	vldr	s14, [r3]
 801cc8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801cc8e:	3901      	subs	r1, #1
 801cc90:	ece3 7a01 	vstmia	r3!, {s15}
 801cc94:	d1f7      	bne.n	801cc86 <arm_mat_inverse_f32+0x11a>
 801cc96:	9803      	ldr	r0, [sp, #12]
 801cc98:	ea4f 0886 	mov.w	r8, r6, lsl #2
 801cc9c:	42b1      	cmp	r1, r6
 801cc9e:	d039      	beq.n	801cd14 <arm_mat_inverse_f32+0x1a8>
 801cca0:	eddb 6a00 	vldr	s13, [fp]
 801cca4:	465a      	mov	r2, fp
 801cca6:	4673      	mov	r3, lr
 801cca8:	46e2      	mov	sl, ip
 801ccaa:	ecba 7a01 	vldmia	sl!, {s14}
 801ccae:	edd2 7a00 	vldr	s15, [r2]
 801ccb2:	ee26 7a87 	vmul.f32	s14, s13, s14
 801ccb6:	3b01      	subs	r3, #1
 801ccb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ccbc:	ece2 7a01 	vstmia	r2!, {s15}
 801ccc0:	d1f3      	bne.n	801ccaa <arm_mat_inverse_f32+0x13e>
 801ccc2:	9b01      	ldr	r3, [sp, #4]
 801ccc4:	44bb      	add	fp, r7
 801ccc6:	4602      	mov	r2, r0
 801ccc8:	46ca      	mov	sl, r9
 801ccca:	ecba 7a01 	vldmia	sl!, {s14}
 801ccce:	edd2 7a00 	vldr	s15, [r2]
 801ccd2:	ee26 7a87 	vmul.f32	s14, s13, s14
 801ccd6:	3b01      	subs	r3, #1
 801ccd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ccdc:	ece2 7a01 	vstmia	r2!, {s15}
 801cce0:	d1f3      	bne.n	801ccca <arm_mat_inverse_f32+0x15e>
 801cce2:	4428      	add	r0, r5
 801cce4:	3101      	adds	r1, #1
 801cce6:	428c      	cmp	r4, r1
 801cce8:	44c3      	add	fp, r8
 801ccea:	d1d7      	bne.n	801cc9c <arm_mat_inverse_f32+0x130>
 801ccec:	9b04      	ldr	r3, [sp, #16]
 801ccee:	f1be 0e01 	subs.w	lr, lr, #1
 801ccf2:	f106 0601 	add.w	r6, r6, #1
 801ccf6:	449c      	add	ip, r3
 801ccf8:	f1a7 0704 	sub.w	r7, r7, #4
 801ccfc:	44a9      	add	r9, r5
 801ccfe:	f47f af7e 	bne.w	801cbfe <arm_mat_inverse_f32+0x92>
 801cd02:	eef5 6a40 	vcmp.f32	s13, #0.0
 801cd06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd0a:	d006      	beq.n	801cd1a <arm_mat_inverse_f32+0x1ae>
 801cd0c:	2000      	movs	r0, #0
 801cd0e:	b007      	add	sp, #28
 801cd10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd14:	44bb      	add	fp, r7
 801cd16:	4428      	add	r0, r5
 801cd18:	e7e4      	b.n	801cce4 <arm_mat_inverse_f32+0x178>
 801cd1a:	9b05      	ldr	r3, [sp, #20]
 801cd1c:	9a01      	ldr	r2, [sp, #4]
 801cd1e:	685b      	ldr	r3, [r3, #4]
 801cd20:	edd3 7a00 	vldr	s15, [r3]
 801cd24:	eef5 7a40 	vcmp.f32	s15, #0.0
 801cd28:	fb02 f204 	mul.w	r2, r2, r4
 801cd2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd30:	4614      	mov	r4, r2
 801cd32:	bf08      	it	eq
 801cd34:	3304      	addeq	r3, #4
 801cd36:	d007      	beq.n	801cd48 <arm_mat_inverse_f32+0x1dc>
 801cd38:	e7e8      	b.n	801cd0c <arm_mat_inverse_f32+0x1a0>
 801cd3a:	ecf3 7a01 	vldmia	r3!, {s15}
 801cd3e:	eef5 7a40 	vcmp.f32	s15, #0.0
 801cd42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd46:	d1e1      	bne.n	801cd0c <arm_mat_inverse_f32+0x1a0>
 801cd48:	f10e 0e01 	add.w	lr, lr, #1
 801cd4c:	4574      	cmp	r4, lr
 801cd4e:	d1f4      	bne.n	801cd3a <arm_mat_inverse_f32+0x1ce>
 801cd50:	f06f 0004 	mvn.w	r0, #4
 801cd54:	b007      	add	sp, #28
 801cd56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd5a:	f06f 0002 	mvn.w	r0, #2
 801cd5e:	b007      	add	sp, #28
 801cd60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd64:	4656      	mov	r6, sl
 801cd66:	3f01      	subs	r7, #1
 801cd68:	f846 bb04 	str.w	fp, [r6], #4
 801cd6c:	f47f af1b 	bne.w	801cba6 <arm_mat_inverse_f32+0x3a>
 801cd70:	e735      	b.n	801cbde <arm_mat_inverse_f32+0x72>
 801cd72:	bf00      	nop
 801cd74:	00000000 	.word	0x00000000

0801cd78 <arm_mat_init_f32>:
 801cd78:	8001      	strh	r1, [r0, #0]
 801cd7a:	8042      	strh	r2, [r0, #2]
 801cd7c:	6043      	str	r3, [r0, #4]
 801cd7e:	4770      	bx	lr

0801cd80 <arm_mat_add_f32>:
 801cd80:	b4f0      	push	{r4, r5, r6, r7}
 801cd82:	e9d1 4700 	ldrd	r4, r7, [r1]
 801cd86:	6803      	ldr	r3, [r0, #0]
 801cd88:	f8d0 c004 	ldr.w	ip, [r0, #4]
 801cd8c:	6856      	ldr	r6, [r2, #4]
 801cd8e:	42a3      	cmp	r3, r4
 801cd90:	d15d      	bne.n	801ce4e <arm_mat_add_f32+0xce>
 801cd92:	6812      	ldr	r2, [r2, #0]
 801cd94:	4293      	cmp	r3, r2
 801cd96:	d15a      	bne.n	801ce4e <arm_mat_add_f32+0xce>
 801cd98:	8803      	ldrh	r3, [r0, #0]
 801cd9a:	8844      	ldrh	r4, [r0, #2]
 801cd9c:	fb04 f403 	mul.w	r4, r4, r3
 801cda0:	08a5      	lsrs	r5, r4, #2
 801cda2:	d032      	beq.n	801ce0a <arm_mat_add_f32+0x8a>
 801cda4:	f10c 0110 	add.w	r1, ip, #16
 801cda8:	f107 0210 	add.w	r2, r7, #16
 801cdac:	f106 0310 	add.w	r3, r6, #16
 801cdb0:	4628      	mov	r0, r5
 801cdb2:	ed12 7a04 	vldr	s14, [r2, #-16]
 801cdb6:	ed51 7a04 	vldr	s15, [r1, #-16]
 801cdba:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cdbe:	3801      	subs	r0, #1
 801cdc0:	ed43 7a04 	vstr	s15, [r3, #-16]
 801cdc4:	ed12 7a03 	vldr	s14, [r2, #-12]
 801cdc8:	ed51 7a03 	vldr	s15, [r1, #-12]
 801cdcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cdd0:	f101 0110 	add.w	r1, r1, #16
 801cdd4:	ed43 7a03 	vstr	s15, [r3, #-12]
 801cdd8:	ed12 7a02 	vldr	s14, [r2, #-8]
 801cddc:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 801cde0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cde4:	f102 0210 	add.w	r2, r2, #16
 801cde8:	ed43 7a02 	vstr	s15, [r3, #-8]
 801cdec:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 801cdf0:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 801cdf4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cdf8:	f103 0310 	add.w	r3, r3, #16
 801cdfc:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 801ce00:	d1d7      	bne.n	801cdb2 <arm_mat_add_f32+0x32>
 801ce02:	012b      	lsls	r3, r5, #4
 801ce04:	449c      	add	ip, r3
 801ce06:	441f      	add	r7, r3
 801ce08:	441e      	add	r6, r3
 801ce0a:	f014 0403 	ands.w	r4, r4, #3
 801ce0e:	d01b      	beq.n	801ce48 <arm_mat_add_f32+0xc8>
 801ce10:	edd7 7a00 	vldr	s15, [r7]
 801ce14:	ed9c 7a00 	vldr	s14, [ip]
 801ce18:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ce1c:	3c01      	subs	r4, #1
 801ce1e:	edc6 7a00 	vstr	s15, [r6]
 801ce22:	d011      	beq.n	801ce48 <arm_mat_add_f32+0xc8>
 801ce24:	eddc 7a01 	vldr	s15, [ip, #4]
 801ce28:	ed97 7a01 	vldr	s14, [r7, #4]
 801ce2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ce30:	2c01      	cmp	r4, #1
 801ce32:	edc6 7a01 	vstr	s15, [r6, #4]
 801ce36:	d007      	beq.n	801ce48 <arm_mat_add_f32+0xc8>
 801ce38:	eddc 7a02 	vldr	s15, [ip, #8]
 801ce3c:	ed97 7a02 	vldr	s14, [r7, #8]
 801ce40:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ce44:	edc6 7a02 	vstr	s15, [r6, #8]
 801ce48:	2000      	movs	r0, #0
 801ce4a:	bcf0      	pop	{r4, r5, r6, r7}
 801ce4c:	4770      	bx	lr
 801ce4e:	f06f 0002 	mvn.w	r0, #2
 801ce52:	e7fa      	b.n	801ce4a <arm_mat_add_f32+0xca>

0801ce54 <calloc>:
 801ce54:	4b02      	ldr	r3, [pc, #8]	@ (801ce60 <calloc+0xc>)
 801ce56:	460a      	mov	r2, r1
 801ce58:	4601      	mov	r1, r0
 801ce5a:	6818      	ldr	r0, [r3, #0]
 801ce5c:	f000 b802 	b.w	801ce64 <_calloc_r>
 801ce60:	2000327c 	.word	0x2000327c

0801ce64 <_calloc_r>:
 801ce64:	b570      	push	{r4, r5, r6, lr}
 801ce66:	fba1 5402 	umull	r5, r4, r1, r2
 801ce6a:	b93c      	cbnz	r4, 801ce7c <_calloc_r+0x18>
 801ce6c:	4629      	mov	r1, r5
 801ce6e:	f000 f899 	bl	801cfa4 <_malloc_r>
 801ce72:	4606      	mov	r6, r0
 801ce74:	b928      	cbnz	r0, 801ce82 <_calloc_r+0x1e>
 801ce76:	2600      	movs	r6, #0
 801ce78:	4630      	mov	r0, r6
 801ce7a:	bd70      	pop	{r4, r5, r6, pc}
 801ce7c:	220c      	movs	r2, #12
 801ce7e:	6002      	str	r2, [r0, #0]
 801ce80:	e7f9      	b.n	801ce76 <_calloc_r+0x12>
 801ce82:	462a      	mov	r2, r5
 801ce84:	4621      	mov	r1, r4
 801ce86:	f000 fccf 	bl	801d828 <memset>
 801ce8a:	e7f5      	b.n	801ce78 <_calloc_r+0x14>

0801ce8c <exit>:
 801ce8c:	b508      	push	{r3, lr}
 801ce8e:	4b06      	ldr	r3, [pc, #24]	@ (801cea8 <exit+0x1c>)
 801ce90:	4604      	mov	r4, r0
 801ce92:	b113      	cbz	r3, 801ce9a <exit+0xe>
 801ce94:	2100      	movs	r1, #0
 801ce96:	f3af 8000 	nop.w
 801ce9a:	4b04      	ldr	r3, [pc, #16]	@ (801ceac <exit+0x20>)
 801ce9c:	681b      	ldr	r3, [r3, #0]
 801ce9e:	b103      	cbz	r3, 801cea2 <exit+0x16>
 801cea0:	4798      	blx	r3
 801cea2:	4620      	mov	r0, r4
 801cea4:	f7e6 fba8 	bl	80035f8 <_exit>
 801cea8:	00000000 	.word	0x00000000
 801ceac:	2000f764 	.word	0x2000f764

0801ceb0 <getenv>:
 801ceb0:	b507      	push	{r0, r1, r2, lr}
 801ceb2:	4b04      	ldr	r3, [pc, #16]	@ (801cec4 <getenv+0x14>)
 801ceb4:	4601      	mov	r1, r0
 801ceb6:	aa01      	add	r2, sp, #4
 801ceb8:	6818      	ldr	r0, [r3, #0]
 801ceba:	f000 f805 	bl	801cec8 <_findenv_r>
 801cebe:	b003      	add	sp, #12
 801cec0:	f85d fb04 	ldr.w	pc, [sp], #4
 801cec4:	2000327c 	.word	0x2000327c

0801cec8 <_findenv_r>:
 801cec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cecc:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801cf3c <_findenv_r+0x74>
 801ced0:	4606      	mov	r6, r0
 801ced2:	4689      	mov	r9, r1
 801ced4:	4617      	mov	r7, r2
 801ced6:	f000 fdaf 	bl	801da38 <__env_lock>
 801ceda:	f8da 4000 	ldr.w	r4, [sl]
 801cede:	b134      	cbz	r4, 801ceee <_findenv_r+0x26>
 801cee0:	464b      	mov	r3, r9
 801cee2:	4698      	mov	r8, r3
 801cee4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cee8:	b13a      	cbz	r2, 801cefa <_findenv_r+0x32>
 801ceea:	2a3d      	cmp	r2, #61	@ 0x3d
 801ceec:	d1f9      	bne.n	801cee2 <_findenv_r+0x1a>
 801ceee:	4630      	mov	r0, r6
 801cef0:	f000 fda8 	bl	801da44 <__env_unlock>
 801cef4:	2000      	movs	r0, #0
 801cef6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cefa:	eba8 0809 	sub.w	r8, r8, r9
 801cefe:	46a3      	mov	fp, r4
 801cf00:	f854 0b04 	ldr.w	r0, [r4], #4
 801cf04:	2800      	cmp	r0, #0
 801cf06:	d0f2      	beq.n	801ceee <_findenv_r+0x26>
 801cf08:	4642      	mov	r2, r8
 801cf0a:	4649      	mov	r1, r9
 801cf0c:	f000 fca1 	bl	801d852 <strncmp>
 801cf10:	2800      	cmp	r0, #0
 801cf12:	d1f4      	bne.n	801cefe <_findenv_r+0x36>
 801cf14:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801cf18:	eb03 0508 	add.w	r5, r3, r8
 801cf1c:	f813 3008 	ldrb.w	r3, [r3, r8]
 801cf20:	2b3d      	cmp	r3, #61	@ 0x3d
 801cf22:	d1ec      	bne.n	801cefe <_findenv_r+0x36>
 801cf24:	f8da 3000 	ldr.w	r3, [sl]
 801cf28:	ebab 0303 	sub.w	r3, fp, r3
 801cf2c:	109b      	asrs	r3, r3, #2
 801cf2e:	4630      	mov	r0, r6
 801cf30:	603b      	str	r3, [r7, #0]
 801cf32:	f000 fd87 	bl	801da44 <__env_unlock>
 801cf36:	1c68      	adds	r0, r5, #1
 801cf38:	e7dd      	b.n	801cef6 <_findenv_r+0x2e>
 801cf3a:	bf00      	nop
 801cf3c:	20000000 	.word	0x20000000

0801cf40 <malloc>:
 801cf40:	4b02      	ldr	r3, [pc, #8]	@ (801cf4c <malloc+0xc>)
 801cf42:	4601      	mov	r1, r0
 801cf44:	6818      	ldr	r0, [r3, #0]
 801cf46:	f000 b82d 	b.w	801cfa4 <_malloc_r>
 801cf4a:	bf00      	nop
 801cf4c:	2000327c 	.word	0x2000327c

0801cf50 <free>:
 801cf50:	4b02      	ldr	r3, [pc, #8]	@ (801cf5c <free+0xc>)
 801cf52:	4601      	mov	r1, r0
 801cf54:	6818      	ldr	r0, [r3, #0]
 801cf56:	f000 bd7b 	b.w	801da50 <_free_r>
 801cf5a:	bf00      	nop
 801cf5c:	2000327c 	.word	0x2000327c

0801cf60 <sbrk_aligned>:
 801cf60:	b570      	push	{r4, r5, r6, lr}
 801cf62:	4e0f      	ldr	r6, [pc, #60]	@ (801cfa0 <sbrk_aligned+0x40>)
 801cf64:	460c      	mov	r4, r1
 801cf66:	6831      	ldr	r1, [r6, #0]
 801cf68:	4605      	mov	r5, r0
 801cf6a:	b911      	cbnz	r1, 801cf72 <sbrk_aligned+0x12>
 801cf6c:	f000 fce0 	bl	801d930 <_sbrk_r>
 801cf70:	6030      	str	r0, [r6, #0]
 801cf72:	4621      	mov	r1, r4
 801cf74:	4628      	mov	r0, r5
 801cf76:	f000 fcdb 	bl	801d930 <_sbrk_r>
 801cf7a:	1c43      	adds	r3, r0, #1
 801cf7c:	d103      	bne.n	801cf86 <sbrk_aligned+0x26>
 801cf7e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801cf82:	4620      	mov	r0, r4
 801cf84:	bd70      	pop	{r4, r5, r6, pc}
 801cf86:	1cc4      	adds	r4, r0, #3
 801cf88:	f024 0403 	bic.w	r4, r4, #3
 801cf8c:	42a0      	cmp	r0, r4
 801cf8e:	d0f8      	beq.n	801cf82 <sbrk_aligned+0x22>
 801cf90:	1a21      	subs	r1, r4, r0
 801cf92:	4628      	mov	r0, r5
 801cf94:	f000 fccc 	bl	801d930 <_sbrk_r>
 801cf98:	3001      	adds	r0, #1
 801cf9a:	d1f2      	bne.n	801cf82 <sbrk_aligned+0x22>
 801cf9c:	e7ef      	b.n	801cf7e <sbrk_aligned+0x1e>
 801cf9e:	bf00      	nop
 801cfa0:	2000f624 	.word	0x2000f624

0801cfa4 <_malloc_r>:
 801cfa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cfa8:	1ccd      	adds	r5, r1, #3
 801cfaa:	f025 0503 	bic.w	r5, r5, #3
 801cfae:	3508      	adds	r5, #8
 801cfb0:	2d0c      	cmp	r5, #12
 801cfb2:	bf38      	it	cc
 801cfb4:	250c      	movcc	r5, #12
 801cfb6:	2d00      	cmp	r5, #0
 801cfb8:	4606      	mov	r6, r0
 801cfba:	db01      	blt.n	801cfc0 <_malloc_r+0x1c>
 801cfbc:	42a9      	cmp	r1, r5
 801cfbe:	d904      	bls.n	801cfca <_malloc_r+0x26>
 801cfc0:	230c      	movs	r3, #12
 801cfc2:	6033      	str	r3, [r6, #0]
 801cfc4:	2000      	movs	r0, #0
 801cfc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cfca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d0a0 <_malloc_r+0xfc>
 801cfce:	f000 f869 	bl	801d0a4 <__malloc_lock>
 801cfd2:	f8d8 3000 	ldr.w	r3, [r8]
 801cfd6:	461c      	mov	r4, r3
 801cfd8:	bb44      	cbnz	r4, 801d02c <_malloc_r+0x88>
 801cfda:	4629      	mov	r1, r5
 801cfdc:	4630      	mov	r0, r6
 801cfde:	f7ff ffbf 	bl	801cf60 <sbrk_aligned>
 801cfe2:	1c43      	adds	r3, r0, #1
 801cfe4:	4604      	mov	r4, r0
 801cfe6:	d158      	bne.n	801d09a <_malloc_r+0xf6>
 801cfe8:	f8d8 4000 	ldr.w	r4, [r8]
 801cfec:	4627      	mov	r7, r4
 801cfee:	2f00      	cmp	r7, #0
 801cff0:	d143      	bne.n	801d07a <_malloc_r+0xd6>
 801cff2:	2c00      	cmp	r4, #0
 801cff4:	d04b      	beq.n	801d08e <_malloc_r+0xea>
 801cff6:	6823      	ldr	r3, [r4, #0]
 801cff8:	4639      	mov	r1, r7
 801cffa:	4630      	mov	r0, r6
 801cffc:	eb04 0903 	add.w	r9, r4, r3
 801d000:	f000 fc96 	bl	801d930 <_sbrk_r>
 801d004:	4581      	cmp	r9, r0
 801d006:	d142      	bne.n	801d08e <_malloc_r+0xea>
 801d008:	6821      	ldr	r1, [r4, #0]
 801d00a:	1a6d      	subs	r5, r5, r1
 801d00c:	4629      	mov	r1, r5
 801d00e:	4630      	mov	r0, r6
 801d010:	f7ff ffa6 	bl	801cf60 <sbrk_aligned>
 801d014:	3001      	adds	r0, #1
 801d016:	d03a      	beq.n	801d08e <_malloc_r+0xea>
 801d018:	6823      	ldr	r3, [r4, #0]
 801d01a:	442b      	add	r3, r5
 801d01c:	6023      	str	r3, [r4, #0]
 801d01e:	f8d8 3000 	ldr.w	r3, [r8]
 801d022:	685a      	ldr	r2, [r3, #4]
 801d024:	bb62      	cbnz	r2, 801d080 <_malloc_r+0xdc>
 801d026:	f8c8 7000 	str.w	r7, [r8]
 801d02a:	e00f      	b.n	801d04c <_malloc_r+0xa8>
 801d02c:	6822      	ldr	r2, [r4, #0]
 801d02e:	1b52      	subs	r2, r2, r5
 801d030:	d420      	bmi.n	801d074 <_malloc_r+0xd0>
 801d032:	2a0b      	cmp	r2, #11
 801d034:	d917      	bls.n	801d066 <_malloc_r+0xc2>
 801d036:	1961      	adds	r1, r4, r5
 801d038:	42a3      	cmp	r3, r4
 801d03a:	6025      	str	r5, [r4, #0]
 801d03c:	bf18      	it	ne
 801d03e:	6059      	strne	r1, [r3, #4]
 801d040:	6863      	ldr	r3, [r4, #4]
 801d042:	bf08      	it	eq
 801d044:	f8c8 1000 	streq.w	r1, [r8]
 801d048:	5162      	str	r2, [r4, r5]
 801d04a:	604b      	str	r3, [r1, #4]
 801d04c:	4630      	mov	r0, r6
 801d04e:	f000 f82f 	bl	801d0b0 <__malloc_unlock>
 801d052:	f104 000b 	add.w	r0, r4, #11
 801d056:	1d23      	adds	r3, r4, #4
 801d058:	f020 0007 	bic.w	r0, r0, #7
 801d05c:	1ac2      	subs	r2, r0, r3
 801d05e:	bf1c      	itt	ne
 801d060:	1a1b      	subne	r3, r3, r0
 801d062:	50a3      	strne	r3, [r4, r2]
 801d064:	e7af      	b.n	801cfc6 <_malloc_r+0x22>
 801d066:	6862      	ldr	r2, [r4, #4]
 801d068:	42a3      	cmp	r3, r4
 801d06a:	bf0c      	ite	eq
 801d06c:	f8c8 2000 	streq.w	r2, [r8]
 801d070:	605a      	strne	r2, [r3, #4]
 801d072:	e7eb      	b.n	801d04c <_malloc_r+0xa8>
 801d074:	4623      	mov	r3, r4
 801d076:	6864      	ldr	r4, [r4, #4]
 801d078:	e7ae      	b.n	801cfd8 <_malloc_r+0x34>
 801d07a:	463c      	mov	r4, r7
 801d07c:	687f      	ldr	r7, [r7, #4]
 801d07e:	e7b6      	b.n	801cfee <_malloc_r+0x4a>
 801d080:	461a      	mov	r2, r3
 801d082:	685b      	ldr	r3, [r3, #4]
 801d084:	42a3      	cmp	r3, r4
 801d086:	d1fb      	bne.n	801d080 <_malloc_r+0xdc>
 801d088:	2300      	movs	r3, #0
 801d08a:	6053      	str	r3, [r2, #4]
 801d08c:	e7de      	b.n	801d04c <_malloc_r+0xa8>
 801d08e:	230c      	movs	r3, #12
 801d090:	6033      	str	r3, [r6, #0]
 801d092:	4630      	mov	r0, r6
 801d094:	f000 f80c 	bl	801d0b0 <__malloc_unlock>
 801d098:	e794      	b.n	801cfc4 <_malloc_r+0x20>
 801d09a:	6005      	str	r5, [r0, #0]
 801d09c:	e7d6      	b.n	801d04c <_malloc_r+0xa8>
 801d09e:	bf00      	nop
 801d0a0:	2000f628 	.word	0x2000f628

0801d0a4 <__malloc_lock>:
 801d0a4:	4801      	ldr	r0, [pc, #4]	@ (801d0ac <__malloc_lock+0x8>)
 801d0a6:	f000 bc90 	b.w	801d9ca <__retarget_lock_acquire_recursive>
 801d0aa:	bf00      	nop
 801d0ac:	2000f76d 	.word	0x2000f76d

0801d0b0 <__malloc_unlock>:
 801d0b0:	4801      	ldr	r0, [pc, #4]	@ (801d0b8 <__malloc_unlock+0x8>)
 801d0b2:	f000 bc8b 	b.w	801d9cc <__retarget_lock_release_recursive>
 801d0b6:	bf00      	nop
 801d0b8:	2000f76d 	.word	0x2000f76d

0801d0bc <srand>:
 801d0bc:	b538      	push	{r3, r4, r5, lr}
 801d0be:	4b10      	ldr	r3, [pc, #64]	@ (801d100 <srand+0x44>)
 801d0c0:	681d      	ldr	r5, [r3, #0]
 801d0c2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801d0c4:	4604      	mov	r4, r0
 801d0c6:	b9b3      	cbnz	r3, 801d0f6 <srand+0x3a>
 801d0c8:	2018      	movs	r0, #24
 801d0ca:	f7ff ff39 	bl	801cf40 <malloc>
 801d0ce:	4602      	mov	r2, r0
 801d0d0:	6328      	str	r0, [r5, #48]	@ 0x30
 801d0d2:	b920      	cbnz	r0, 801d0de <srand+0x22>
 801d0d4:	4b0b      	ldr	r3, [pc, #44]	@ (801d104 <srand+0x48>)
 801d0d6:	480c      	ldr	r0, [pc, #48]	@ (801d108 <srand+0x4c>)
 801d0d8:	2146      	movs	r1, #70	@ 0x46
 801d0da:	f000 fc8f 	bl	801d9fc <__assert_func>
 801d0de:	490b      	ldr	r1, [pc, #44]	@ (801d10c <srand+0x50>)
 801d0e0:	4b0b      	ldr	r3, [pc, #44]	@ (801d110 <srand+0x54>)
 801d0e2:	e9c0 1300 	strd	r1, r3, [r0]
 801d0e6:	4b0b      	ldr	r3, [pc, #44]	@ (801d114 <srand+0x58>)
 801d0e8:	6083      	str	r3, [r0, #8]
 801d0ea:	230b      	movs	r3, #11
 801d0ec:	8183      	strh	r3, [r0, #12]
 801d0ee:	2100      	movs	r1, #0
 801d0f0:	2001      	movs	r0, #1
 801d0f2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d0f6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801d0f8:	2200      	movs	r2, #0
 801d0fa:	611c      	str	r4, [r3, #16]
 801d0fc:	615a      	str	r2, [r3, #20]
 801d0fe:	bd38      	pop	{r3, r4, r5, pc}
 801d100:	2000327c 	.word	0x2000327c
 801d104:	08021a48 	.word	0x08021a48
 801d108:	08021a5f 	.word	0x08021a5f
 801d10c:	abcd330e 	.word	0xabcd330e
 801d110:	e66d1234 	.word	0xe66d1234
 801d114:	0005deec 	.word	0x0005deec

0801d118 <rand>:
 801d118:	4b16      	ldr	r3, [pc, #88]	@ (801d174 <rand+0x5c>)
 801d11a:	b510      	push	{r4, lr}
 801d11c:	681c      	ldr	r4, [r3, #0]
 801d11e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d120:	b9b3      	cbnz	r3, 801d150 <rand+0x38>
 801d122:	2018      	movs	r0, #24
 801d124:	f7ff ff0c 	bl	801cf40 <malloc>
 801d128:	4602      	mov	r2, r0
 801d12a:	6320      	str	r0, [r4, #48]	@ 0x30
 801d12c:	b920      	cbnz	r0, 801d138 <rand+0x20>
 801d12e:	4b12      	ldr	r3, [pc, #72]	@ (801d178 <rand+0x60>)
 801d130:	4812      	ldr	r0, [pc, #72]	@ (801d17c <rand+0x64>)
 801d132:	2152      	movs	r1, #82	@ 0x52
 801d134:	f000 fc62 	bl	801d9fc <__assert_func>
 801d138:	4911      	ldr	r1, [pc, #68]	@ (801d180 <rand+0x68>)
 801d13a:	4b12      	ldr	r3, [pc, #72]	@ (801d184 <rand+0x6c>)
 801d13c:	e9c0 1300 	strd	r1, r3, [r0]
 801d140:	4b11      	ldr	r3, [pc, #68]	@ (801d188 <rand+0x70>)
 801d142:	6083      	str	r3, [r0, #8]
 801d144:	230b      	movs	r3, #11
 801d146:	8183      	strh	r3, [r0, #12]
 801d148:	2100      	movs	r1, #0
 801d14a:	2001      	movs	r0, #1
 801d14c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d150:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d152:	480e      	ldr	r0, [pc, #56]	@ (801d18c <rand+0x74>)
 801d154:	690b      	ldr	r3, [r1, #16]
 801d156:	694c      	ldr	r4, [r1, #20]
 801d158:	4a0d      	ldr	r2, [pc, #52]	@ (801d190 <rand+0x78>)
 801d15a:	4358      	muls	r0, r3
 801d15c:	fb02 0004 	mla	r0, r2, r4, r0
 801d160:	fba3 3202 	umull	r3, r2, r3, r2
 801d164:	3301      	adds	r3, #1
 801d166:	eb40 0002 	adc.w	r0, r0, r2
 801d16a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801d16e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801d172:	bd10      	pop	{r4, pc}
 801d174:	2000327c 	.word	0x2000327c
 801d178:	08021a48 	.word	0x08021a48
 801d17c:	08021a5f 	.word	0x08021a5f
 801d180:	abcd330e 	.word	0xabcd330e
 801d184:	e66d1234 	.word	0xe66d1234
 801d188:	0005deec 	.word	0x0005deec
 801d18c:	5851f42d 	.word	0x5851f42d
 801d190:	4c957f2d 	.word	0x4c957f2d

0801d194 <realloc>:
 801d194:	4b02      	ldr	r3, [pc, #8]	@ (801d1a0 <realloc+0xc>)
 801d196:	460a      	mov	r2, r1
 801d198:	4601      	mov	r1, r0
 801d19a:	6818      	ldr	r0, [r3, #0]
 801d19c:	f000 b802 	b.w	801d1a4 <_realloc_r>
 801d1a0:	2000327c 	.word	0x2000327c

0801d1a4 <_realloc_r>:
 801d1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d1a8:	4680      	mov	r8, r0
 801d1aa:	4615      	mov	r5, r2
 801d1ac:	460c      	mov	r4, r1
 801d1ae:	b921      	cbnz	r1, 801d1ba <_realloc_r+0x16>
 801d1b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d1b4:	4611      	mov	r1, r2
 801d1b6:	f7ff bef5 	b.w	801cfa4 <_malloc_r>
 801d1ba:	b92a      	cbnz	r2, 801d1c8 <_realloc_r+0x24>
 801d1bc:	f000 fc48 	bl	801da50 <_free_r>
 801d1c0:	2400      	movs	r4, #0
 801d1c2:	4620      	mov	r0, r4
 801d1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d1c8:	f000 fc8c 	bl	801dae4 <_malloc_usable_size_r>
 801d1cc:	4285      	cmp	r5, r0
 801d1ce:	4606      	mov	r6, r0
 801d1d0:	d802      	bhi.n	801d1d8 <_realloc_r+0x34>
 801d1d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801d1d6:	d8f4      	bhi.n	801d1c2 <_realloc_r+0x1e>
 801d1d8:	4629      	mov	r1, r5
 801d1da:	4640      	mov	r0, r8
 801d1dc:	f7ff fee2 	bl	801cfa4 <_malloc_r>
 801d1e0:	4607      	mov	r7, r0
 801d1e2:	2800      	cmp	r0, #0
 801d1e4:	d0ec      	beq.n	801d1c0 <_realloc_r+0x1c>
 801d1e6:	42b5      	cmp	r5, r6
 801d1e8:	462a      	mov	r2, r5
 801d1ea:	4621      	mov	r1, r4
 801d1ec:	bf28      	it	cs
 801d1ee:	4632      	movcs	r2, r6
 801d1f0:	f000 fbf5 	bl	801d9de <memcpy>
 801d1f4:	4621      	mov	r1, r4
 801d1f6:	4640      	mov	r0, r8
 801d1f8:	f000 fc2a 	bl	801da50 <_free_r>
 801d1fc:	463c      	mov	r4, r7
 801d1fe:	e7e0      	b.n	801d1c2 <_realloc_r+0x1e>

0801d200 <_strtoul_l.constprop.0>:
 801d200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d204:	4e34      	ldr	r6, [pc, #208]	@ (801d2d8 <_strtoul_l.constprop.0+0xd8>)
 801d206:	4686      	mov	lr, r0
 801d208:	460d      	mov	r5, r1
 801d20a:	4628      	mov	r0, r5
 801d20c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d210:	5d37      	ldrb	r7, [r6, r4]
 801d212:	f017 0708 	ands.w	r7, r7, #8
 801d216:	d1f8      	bne.n	801d20a <_strtoul_l.constprop.0+0xa>
 801d218:	2c2d      	cmp	r4, #45	@ 0x2d
 801d21a:	d12f      	bne.n	801d27c <_strtoul_l.constprop.0+0x7c>
 801d21c:	782c      	ldrb	r4, [r5, #0]
 801d21e:	2701      	movs	r7, #1
 801d220:	1c85      	adds	r5, r0, #2
 801d222:	f033 0010 	bics.w	r0, r3, #16
 801d226:	d109      	bne.n	801d23c <_strtoul_l.constprop.0+0x3c>
 801d228:	2c30      	cmp	r4, #48	@ 0x30
 801d22a:	d12c      	bne.n	801d286 <_strtoul_l.constprop.0+0x86>
 801d22c:	7828      	ldrb	r0, [r5, #0]
 801d22e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801d232:	2858      	cmp	r0, #88	@ 0x58
 801d234:	d127      	bne.n	801d286 <_strtoul_l.constprop.0+0x86>
 801d236:	786c      	ldrb	r4, [r5, #1]
 801d238:	2310      	movs	r3, #16
 801d23a:	3502      	adds	r5, #2
 801d23c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801d240:	2600      	movs	r6, #0
 801d242:	fbb8 f8f3 	udiv	r8, r8, r3
 801d246:	fb03 f908 	mul.w	r9, r3, r8
 801d24a:	ea6f 0909 	mvn.w	r9, r9
 801d24e:	4630      	mov	r0, r6
 801d250:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801d254:	f1bc 0f09 	cmp.w	ip, #9
 801d258:	d81c      	bhi.n	801d294 <_strtoul_l.constprop.0+0x94>
 801d25a:	4664      	mov	r4, ip
 801d25c:	42a3      	cmp	r3, r4
 801d25e:	dd2a      	ble.n	801d2b6 <_strtoul_l.constprop.0+0xb6>
 801d260:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801d264:	d007      	beq.n	801d276 <_strtoul_l.constprop.0+0x76>
 801d266:	4580      	cmp	r8, r0
 801d268:	d322      	bcc.n	801d2b0 <_strtoul_l.constprop.0+0xb0>
 801d26a:	d101      	bne.n	801d270 <_strtoul_l.constprop.0+0x70>
 801d26c:	45a1      	cmp	r9, r4
 801d26e:	db1f      	blt.n	801d2b0 <_strtoul_l.constprop.0+0xb0>
 801d270:	fb00 4003 	mla	r0, r0, r3, r4
 801d274:	2601      	movs	r6, #1
 801d276:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d27a:	e7e9      	b.n	801d250 <_strtoul_l.constprop.0+0x50>
 801d27c:	2c2b      	cmp	r4, #43	@ 0x2b
 801d27e:	bf04      	itt	eq
 801d280:	782c      	ldrbeq	r4, [r5, #0]
 801d282:	1c85      	addeq	r5, r0, #2
 801d284:	e7cd      	b.n	801d222 <_strtoul_l.constprop.0+0x22>
 801d286:	2b00      	cmp	r3, #0
 801d288:	d1d8      	bne.n	801d23c <_strtoul_l.constprop.0+0x3c>
 801d28a:	2c30      	cmp	r4, #48	@ 0x30
 801d28c:	bf0c      	ite	eq
 801d28e:	2308      	moveq	r3, #8
 801d290:	230a      	movne	r3, #10
 801d292:	e7d3      	b.n	801d23c <_strtoul_l.constprop.0+0x3c>
 801d294:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801d298:	f1bc 0f19 	cmp.w	ip, #25
 801d29c:	d801      	bhi.n	801d2a2 <_strtoul_l.constprop.0+0xa2>
 801d29e:	3c37      	subs	r4, #55	@ 0x37
 801d2a0:	e7dc      	b.n	801d25c <_strtoul_l.constprop.0+0x5c>
 801d2a2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801d2a6:	f1bc 0f19 	cmp.w	ip, #25
 801d2aa:	d804      	bhi.n	801d2b6 <_strtoul_l.constprop.0+0xb6>
 801d2ac:	3c57      	subs	r4, #87	@ 0x57
 801d2ae:	e7d5      	b.n	801d25c <_strtoul_l.constprop.0+0x5c>
 801d2b0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801d2b4:	e7df      	b.n	801d276 <_strtoul_l.constprop.0+0x76>
 801d2b6:	1c73      	adds	r3, r6, #1
 801d2b8:	d106      	bne.n	801d2c8 <_strtoul_l.constprop.0+0xc8>
 801d2ba:	2322      	movs	r3, #34	@ 0x22
 801d2bc:	f8ce 3000 	str.w	r3, [lr]
 801d2c0:	4630      	mov	r0, r6
 801d2c2:	b932      	cbnz	r2, 801d2d2 <_strtoul_l.constprop.0+0xd2>
 801d2c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d2c8:	b107      	cbz	r7, 801d2cc <_strtoul_l.constprop.0+0xcc>
 801d2ca:	4240      	negs	r0, r0
 801d2cc:	2a00      	cmp	r2, #0
 801d2ce:	d0f9      	beq.n	801d2c4 <_strtoul_l.constprop.0+0xc4>
 801d2d0:	b106      	cbz	r6, 801d2d4 <_strtoul_l.constprop.0+0xd4>
 801d2d2:	1e69      	subs	r1, r5, #1
 801d2d4:	6011      	str	r1, [r2, #0]
 801d2d6:	e7f5      	b.n	801d2c4 <_strtoul_l.constprop.0+0xc4>
 801d2d8:	08021ab8 	.word	0x08021ab8

0801d2dc <strtoul>:
 801d2dc:	4613      	mov	r3, r2
 801d2de:	460a      	mov	r2, r1
 801d2e0:	4601      	mov	r1, r0
 801d2e2:	4802      	ldr	r0, [pc, #8]	@ (801d2ec <strtoul+0x10>)
 801d2e4:	6800      	ldr	r0, [r0, #0]
 801d2e6:	f7ff bf8b 	b.w	801d200 <_strtoul_l.constprop.0>
 801d2ea:	bf00      	nop
 801d2ec:	2000327c 	.word	0x2000327c

0801d2f0 <std>:
 801d2f0:	2300      	movs	r3, #0
 801d2f2:	b510      	push	{r4, lr}
 801d2f4:	4604      	mov	r4, r0
 801d2f6:	e9c0 3300 	strd	r3, r3, [r0]
 801d2fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d2fe:	6083      	str	r3, [r0, #8]
 801d300:	8181      	strh	r1, [r0, #12]
 801d302:	6643      	str	r3, [r0, #100]	@ 0x64
 801d304:	81c2      	strh	r2, [r0, #14]
 801d306:	6183      	str	r3, [r0, #24]
 801d308:	4619      	mov	r1, r3
 801d30a:	2208      	movs	r2, #8
 801d30c:	305c      	adds	r0, #92	@ 0x5c
 801d30e:	f000 fa8b 	bl	801d828 <memset>
 801d312:	4b0d      	ldr	r3, [pc, #52]	@ (801d348 <std+0x58>)
 801d314:	6263      	str	r3, [r4, #36]	@ 0x24
 801d316:	4b0d      	ldr	r3, [pc, #52]	@ (801d34c <std+0x5c>)
 801d318:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d31a:	4b0d      	ldr	r3, [pc, #52]	@ (801d350 <std+0x60>)
 801d31c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801d31e:	4b0d      	ldr	r3, [pc, #52]	@ (801d354 <std+0x64>)
 801d320:	6323      	str	r3, [r4, #48]	@ 0x30
 801d322:	4b0d      	ldr	r3, [pc, #52]	@ (801d358 <std+0x68>)
 801d324:	6224      	str	r4, [r4, #32]
 801d326:	429c      	cmp	r4, r3
 801d328:	d006      	beq.n	801d338 <std+0x48>
 801d32a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801d32e:	4294      	cmp	r4, r2
 801d330:	d002      	beq.n	801d338 <std+0x48>
 801d332:	33d0      	adds	r3, #208	@ 0xd0
 801d334:	429c      	cmp	r4, r3
 801d336:	d105      	bne.n	801d344 <std+0x54>
 801d338:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801d33c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d340:	f000 bb42 	b.w	801d9c8 <__retarget_lock_init_recursive>
 801d344:	bd10      	pop	{r4, pc}
 801d346:	bf00      	nop
 801d348:	0801d5b5 	.word	0x0801d5b5
 801d34c:	0801d5d7 	.word	0x0801d5d7
 801d350:	0801d60f 	.word	0x0801d60f
 801d354:	0801d633 	.word	0x0801d633
 801d358:	2000f62c 	.word	0x2000f62c

0801d35c <stdio_exit_handler>:
 801d35c:	4a02      	ldr	r2, [pc, #8]	@ (801d368 <stdio_exit_handler+0xc>)
 801d35e:	4903      	ldr	r1, [pc, #12]	@ (801d36c <stdio_exit_handler+0x10>)
 801d360:	4803      	ldr	r0, [pc, #12]	@ (801d370 <stdio_exit_handler+0x14>)
 801d362:	f000 b869 	b.w	801d438 <_fwalk_sglue>
 801d366:	bf00      	nop
 801d368:	20003270 	.word	0x20003270
 801d36c:	0801e44d 	.word	0x0801e44d
 801d370:	20003280 	.word	0x20003280

0801d374 <cleanup_stdio>:
 801d374:	6841      	ldr	r1, [r0, #4]
 801d376:	4b0c      	ldr	r3, [pc, #48]	@ (801d3a8 <cleanup_stdio+0x34>)
 801d378:	4299      	cmp	r1, r3
 801d37a:	b510      	push	{r4, lr}
 801d37c:	4604      	mov	r4, r0
 801d37e:	d001      	beq.n	801d384 <cleanup_stdio+0x10>
 801d380:	f001 f864 	bl	801e44c <_fflush_r>
 801d384:	68a1      	ldr	r1, [r4, #8]
 801d386:	4b09      	ldr	r3, [pc, #36]	@ (801d3ac <cleanup_stdio+0x38>)
 801d388:	4299      	cmp	r1, r3
 801d38a:	d002      	beq.n	801d392 <cleanup_stdio+0x1e>
 801d38c:	4620      	mov	r0, r4
 801d38e:	f001 f85d 	bl	801e44c <_fflush_r>
 801d392:	68e1      	ldr	r1, [r4, #12]
 801d394:	4b06      	ldr	r3, [pc, #24]	@ (801d3b0 <cleanup_stdio+0x3c>)
 801d396:	4299      	cmp	r1, r3
 801d398:	d004      	beq.n	801d3a4 <cleanup_stdio+0x30>
 801d39a:	4620      	mov	r0, r4
 801d39c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d3a0:	f001 b854 	b.w	801e44c <_fflush_r>
 801d3a4:	bd10      	pop	{r4, pc}
 801d3a6:	bf00      	nop
 801d3a8:	2000f62c 	.word	0x2000f62c
 801d3ac:	2000f694 	.word	0x2000f694
 801d3b0:	2000f6fc 	.word	0x2000f6fc

0801d3b4 <global_stdio_init.part.0>:
 801d3b4:	b510      	push	{r4, lr}
 801d3b6:	4b0b      	ldr	r3, [pc, #44]	@ (801d3e4 <global_stdio_init.part.0+0x30>)
 801d3b8:	4c0b      	ldr	r4, [pc, #44]	@ (801d3e8 <global_stdio_init.part.0+0x34>)
 801d3ba:	4a0c      	ldr	r2, [pc, #48]	@ (801d3ec <global_stdio_init.part.0+0x38>)
 801d3bc:	601a      	str	r2, [r3, #0]
 801d3be:	4620      	mov	r0, r4
 801d3c0:	2200      	movs	r2, #0
 801d3c2:	2104      	movs	r1, #4
 801d3c4:	f7ff ff94 	bl	801d2f0 <std>
 801d3c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801d3cc:	2201      	movs	r2, #1
 801d3ce:	2109      	movs	r1, #9
 801d3d0:	f7ff ff8e 	bl	801d2f0 <std>
 801d3d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801d3d8:	2202      	movs	r2, #2
 801d3da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d3de:	2112      	movs	r1, #18
 801d3e0:	f7ff bf86 	b.w	801d2f0 <std>
 801d3e4:	2000f764 	.word	0x2000f764
 801d3e8:	2000f62c 	.word	0x2000f62c
 801d3ec:	0801d35d 	.word	0x0801d35d

0801d3f0 <__sfp_lock_acquire>:
 801d3f0:	4801      	ldr	r0, [pc, #4]	@ (801d3f8 <__sfp_lock_acquire+0x8>)
 801d3f2:	f000 baea 	b.w	801d9ca <__retarget_lock_acquire_recursive>
 801d3f6:	bf00      	nop
 801d3f8:	2000f76e 	.word	0x2000f76e

0801d3fc <__sfp_lock_release>:
 801d3fc:	4801      	ldr	r0, [pc, #4]	@ (801d404 <__sfp_lock_release+0x8>)
 801d3fe:	f000 bae5 	b.w	801d9cc <__retarget_lock_release_recursive>
 801d402:	bf00      	nop
 801d404:	2000f76e 	.word	0x2000f76e

0801d408 <__sinit>:
 801d408:	b510      	push	{r4, lr}
 801d40a:	4604      	mov	r4, r0
 801d40c:	f7ff fff0 	bl	801d3f0 <__sfp_lock_acquire>
 801d410:	6a23      	ldr	r3, [r4, #32]
 801d412:	b11b      	cbz	r3, 801d41c <__sinit+0x14>
 801d414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d418:	f7ff bff0 	b.w	801d3fc <__sfp_lock_release>
 801d41c:	4b04      	ldr	r3, [pc, #16]	@ (801d430 <__sinit+0x28>)
 801d41e:	6223      	str	r3, [r4, #32]
 801d420:	4b04      	ldr	r3, [pc, #16]	@ (801d434 <__sinit+0x2c>)
 801d422:	681b      	ldr	r3, [r3, #0]
 801d424:	2b00      	cmp	r3, #0
 801d426:	d1f5      	bne.n	801d414 <__sinit+0xc>
 801d428:	f7ff ffc4 	bl	801d3b4 <global_stdio_init.part.0>
 801d42c:	e7f2      	b.n	801d414 <__sinit+0xc>
 801d42e:	bf00      	nop
 801d430:	0801d375 	.word	0x0801d375
 801d434:	2000f764 	.word	0x2000f764

0801d438 <_fwalk_sglue>:
 801d438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d43c:	4607      	mov	r7, r0
 801d43e:	4688      	mov	r8, r1
 801d440:	4614      	mov	r4, r2
 801d442:	2600      	movs	r6, #0
 801d444:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d448:	f1b9 0901 	subs.w	r9, r9, #1
 801d44c:	d505      	bpl.n	801d45a <_fwalk_sglue+0x22>
 801d44e:	6824      	ldr	r4, [r4, #0]
 801d450:	2c00      	cmp	r4, #0
 801d452:	d1f7      	bne.n	801d444 <_fwalk_sglue+0xc>
 801d454:	4630      	mov	r0, r6
 801d456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d45a:	89ab      	ldrh	r3, [r5, #12]
 801d45c:	2b01      	cmp	r3, #1
 801d45e:	d907      	bls.n	801d470 <_fwalk_sglue+0x38>
 801d460:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d464:	3301      	adds	r3, #1
 801d466:	d003      	beq.n	801d470 <_fwalk_sglue+0x38>
 801d468:	4629      	mov	r1, r5
 801d46a:	4638      	mov	r0, r7
 801d46c:	47c0      	blx	r8
 801d46e:	4306      	orrs	r6, r0
 801d470:	3568      	adds	r5, #104	@ 0x68
 801d472:	e7e9      	b.n	801d448 <_fwalk_sglue+0x10>

0801d474 <_fwrite_r>:
 801d474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d478:	9c08      	ldr	r4, [sp, #32]
 801d47a:	468a      	mov	sl, r1
 801d47c:	4690      	mov	r8, r2
 801d47e:	fb02 f903 	mul.w	r9, r2, r3
 801d482:	4606      	mov	r6, r0
 801d484:	b118      	cbz	r0, 801d48e <_fwrite_r+0x1a>
 801d486:	6a03      	ldr	r3, [r0, #32]
 801d488:	b90b      	cbnz	r3, 801d48e <_fwrite_r+0x1a>
 801d48a:	f7ff ffbd 	bl	801d408 <__sinit>
 801d48e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d490:	07dd      	lsls	r5, r3, #31
 801d492:	d405      	bmi.n	801d4a0 <_fwrite_r+0x2c>
 801d494:	89a3      	ldrh	r3, [r4, #12]
 801d496:	0598      	lsls	r0, r3, #22
 801d498:	d402      	bmi.n	801d4a0 <_fwrite_r+0x2c>
 801d49a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d49c:	f000 fa95 	bl	801d9ca <__retarget_lock_acquire_recursive>
 801d4a0:	89a3      	ldrh	r3, [r4, #12]
 801d4a2:	0719      	lsls	r1, r3, #28
 801d4a4:	d516      	bpl.n	801d4d4 <_fwrite_r+0x60>
 801d4a6:	6923      	ldr	r3, [r4, #16]
 801d4a8:	b1a3      	cbz	r3, 801d4d4 <_fwrite_r+0x60>
 801d4aa:	2500      	movs	r5, #0
 801d4ac:	454d      	cmp	r5, r9
 801d4ae:	d01f      	beq.n	801d4f0 <_fwrite_r+0x7c>
 801d4b0:	68a7      	ldr	r7, [r4, #8]
 801d4b2:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801d4b6:	3f01      	subs	r7, #1
 801d4b8:	2f00      	cmp	r7, #0
 801d4ba:	60a7      	str	r7, [r4, #8]
 801d4bc:	da04      	bge.n	801d4c8 <_fwrite_r+0x54>
 801d4be:	69a3      	ldr	r3, [r4, #24]
 801d4c0:	429f      	cmp	r7, r3
 801d4c2:	db0f      	blt.n	801d4e4 <_fwrite_r+0x70>
 801d4c4:	290a      	cmp	r1, #10
 801d4c6:	d00d      	beq.n	801d4e4 <_fwrite_r+0x70>
 801d4c8:	6823      	ldr	r3, [r4, #0]
 801d4ca:	1c5a      	adds	r2, r3, #1
 801d4cc:	6022      	str	r2, [r4, #0]
 801d4ce:	7019      	strb	r1, [r3, #0]
 801d4d0:	3501      	adds	r5, #1
 801d4d2:	e7eb      	b.n	801d4ac <_fwrite_r+0x38>
 801d4d4:	4621      	mov	r1, r4
 801d4d6:	4630      	mov	r0, r6
 801d4d8:	f000 f926 	bl	801d728 <__swsetup_r>
 801d4dc:	2800      	cmp	r0, #0
 801d4de:	d0e4      	beq.n	801d4aa <_fwrite_r+0x36>
 801d4e0:	2500      	movs	r5, #0
 801d4e2:	e005      	b.n	801d4f0 <_fwrite_r+0x7c>
 801d4e4:	4622      	mov	r2, r4
 801d4e6:	4630      	mov	r0, r6
 801d4e8:	f000 f8e0 	bl	801d6ac <__swbuf_r>
 801d4ec:	3001      	adds	r0, #1
 801d4ee:	d1ef      	bne.n	801d4d0 <_fwrite_r+0x5c>
 801d4f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d4f2:	07da      	lsls	r2, r3, #31
 801d4f4:	d405      	bmi.n	801d502 <_fwrite_r+0x8e>
 801d4f6:	89a3      	ldrh	r3, [r4, #12]
 801d4f8:	059b      	lsls	r3, r3, #22
 801d4fa:	d402      	bmi.n	801d502 <_fwrite_r+0x8e>
 801d4fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d4fe:	f000 fa65 	bl	801d9cc <__retarget_lock_release_recursive>
 801d502:	fbb5 f0f8 	udiv	r0, r5, r8
 801d506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801d50c <fwrite>:
 801d50c:	b507      	push	{r0, r1, r2, lr}
 801d50e:	9300      	str	r3, [sp, #0]
 801d510:	4613      	mov	r3, r2
 801d512:	460a      	mov	r2, r1
 801d514:	4601      	mov	r1, r0
 801d516:	4803      	ldr	r0, [pc, #12]	@ (801d524 <fwrite+0x18>)
 801d518:	6800      	ldr	r0, [r0, #0]
 801d51a:	f7ff ffab 	bl	801d474 <_fwrite_r>
 801d51e:	b003      	add	sp, #12
 801d520:	f85d fb04 	ldr.w	pc, [sp], #4
 801d524:	2000327c 	.word	0x2000327c

0801d528 <iprintf>:
 801d528:	b40f      	push	{r0, r1, r2, r3}
 801d52a:	b507      	push	{r0, r1, r2, lr}
 801d52c:	4906      	ldr	r1, [pc, #24]	@ (801d548 <iprintf+0x20>)
 801d52e:	ab04      	add	r3, sp, #16
 801d530:	6808      	ldr	r0, [r1, #0]
 801d532:	f853 2b04 	ldr.w	r2, [r3], #4
 801d536:	6881      	ldr	r1, [r0, #8]
 801d538:	9301      	str	r3, [sp, #4]
 801d53a:	f000 fc5d 	bl	801ddf8 <_vfiprintf_r>
 801d53e:	b003      	add	sp, #12
 801d540:	f85d eb04 	ldr.w	lr, [sp], #4
 801d544:	b004      	add	sp, #16
 801d546:	4770      	bx	lr
 801d548:	2000327c 	.word	0x2000327c

0801d54c <sniprintf>:
 801d54c:	b40c      	push	{r2, r3}
 801d54e:	b530      	push	{r4, r5, lr}
 801d550:	4b17      	ldr	r3, [pc, #92]	@ (801d5b0 <sniprintf+0x64>)
 801d552:	1e0c      	subs	r4, r1, #0
 801d554:	681d      	ldr	r5, [r3, #0]
 801d556:	b09d      	sub	sp, #116	@ 0x74
 801d558:	da08      	bge.n	801d56c <sniprintf+0x20>
 801d55a:	238b      	movs	r3, #139	@ 0x8b
 801d55c:	602b      	str	r3, [r5, #0]
 801d55e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d562:	b01d      	add	sp, #116	@ 0x74
 801d564:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d568:	b002      	add	sp, #8
 801d56a:	4770      	bx	lr
 801d56c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801d570:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d574:	bf14      	ite	ne
 801d576:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801d57a:	4623      	moveq	r3, r4
 801d57c:	9304      	str	r3, [sp, #16]
 801d57e:	9307      	str	r3, [sp, #28]
 801d580:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d584:	9002      	str	r0, [sp, #8]
 801d586:	9006      	str	r0, [sp, #24]
 801d588:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d58c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801d58e:	ab21      	add	r3, sp, #132	@ 0x84
 801d590:	a902      	add	r1, sp, #8
 801d592:	4628      	mov	r0, r5
 801d594:	9301      	str	r3, [sp, #4]
 801d596:	f000 fb09 	bl	801dbac <_svfiprintf_r>
 801d59a:	1c43      	adds	r3, r0, #1
 801d59c:	bfbc      	itt	lt
 801d59e:	238b      	movlt	r3, #139	@ 0x8b
 801d5a0:	602b      	strlt	r3, [r5, #0]
 801d5a2:	2c00      	cmp	r4, #0
 801d5a4:	d0dd      	beq.n	801d562 <sniprintf+0x16>
 801d5a6:	9b02      	ldr	r3, [sp, #8]
 801d5a8:	2200      	movs	r2, #0
 801d5aa:	701a      	strb	r2, [r3, #0]
 801d5ac:	e7d9      	b.n	801d562 <sniprintf+0x16>
 801d5ae:	bf00      	nop
 801d5b0:	2000327c 	.word	0x2000327c

0801d5b4 <__sread>:
 801d5b4:	b510      	push	{r4, lr}
 801d5b6:	460c      	mov	r4, r1
 801d5b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d5bc:	f000 f9a6 	bl	801d90c <_read_r>
 801d5c0:	2800      	cmp	r0, #0
 801d5c2:	bfab      	itete	ge
 801d5c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801d5c6:	89a3      	ldrhlt	r3, [r4, #12]
 801d5c8:	181b      	addge	r3, r3, r0
 801d5ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d5ce:	bfac      	ite	ge
 801d5d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801d5d2:	81a3      	strhlt	r3, [r4, #12]
 801d5d4:	bd10      	pop	{r4, pc}

0801d5d6 <__swrite>:
 801d5d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d5da:	461f      	mov	r7, r3
 801d5dc:	898b      	ldrh	r3, [r1, #12]
 801d5de:	05db      	lsls	r3, r3, #23
 801d5e0:	4605      	mov	r5, r0
 801d5e2:	460c      	mov	r4, r1
 801d5e4:	4616      	mov	r6, r2
 801d5e6:	d505      	bpl.n	801d5f4 <__swrite+0x1e>
 801d5e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d5ec:	2302      	movs	r3, #2
 801d5ee:	2200      	movs	r2, #0
 801d5f0:	f000 f97a 	bl	801d8e8 <_lseek_r>
 801d5f4:	89a3      	ldrh	r3, [r4, #12]
 801d5f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d5fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d5fe:	81a3      	strh	r3, [r4, #12]
 801d600:	4632      	mov	r2, r6
 801d602:	463b      	mov	r3, r7
 801d604:	4628      	mov	r0, r5
 801d606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d60a:	f000 b9a1 	b.w	801d950 <_write_r>

0801d60e <__sseek>:
 801d60e:	b510      	push	{r4, lr}
 801d610:	460c      	mov	r4, r1
 801d612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d616:	f000 f967 	bl	801d8e8 <_lseek_r>
 801d61a:	1c43      	adds	r3, r0, #1
 801d61c:	89a3      	ldrh	r3, [r4, #12]
 801d61e:	bf15      	itete	ne
 801d620:	6560      	strne	r0, [r4, #84]	@ 0x54
 801d622:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d626:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d62a:	81a3      	strheq	r3, [r4, #12]
 801d62c:	bf18      	it	ne
 801d62e:	81a3      	strhne	r3, [r4, #12]
 801d630:	bd10      	pop	{r4, pc}

0801d632 <__sclose>:
 801d632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d636:	f000 b947 	b.w	801d8c8 <_close_r>

0801d63a <_vsniprintf_r>:
 801d63a:	b530      	push	{r4, r5, lr}
 801d63c:	4614      	mov	r4, r2
 801d63e:	2c00      	cmp	r4, #0
 801d640:	b09b      	sub	sp, #108	@ 0x6c
 801d642:	4605      	mov	r5, r0
 801d644:	461a      	mov	r2, r3
 801d646:	da05      	bge.n	801d654 <_vsniprintf_r+0x1a>
 801d648:	238b      	movs	r3, #139	@ 0x8b
 801d64a:	6003      	str	r3, [r0, #0]
 801d64c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d650:	b01b      	add	sp, #108	@ 0x6c
 801d652:	bd30      	pop	{r4, r5, pc}
 801d654:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801d658:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d65c:	bf14      	ite	ne
 801d65e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801d662:	4623      	moveq	r3, r4
 801d664:	9302      	str	r3, [sp, #8]
 801d666:	9305      	str	r3, [sp, #20]
 801d668:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d66c:	9100      	str	r1, [sp, #0]
 801d66e:	9104      	str	r1, [sp, #16]
 801d670:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d674:	4669      	mov	r1, sp
 801d676:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d678:	f000 fa98 	bl	801dbac <_svfiprintf_r>
 801d67c:	1c43      	adds	r3, r0, #1
 801d67e:	bfbc      	itt	lt
 801d680:	238b      	movlt	r3, #139	@ 0x8b
 801d682:	602b      	strlt	r3, [r5, #0]
 801d684:	2c00      	cmp	r4, #0
 801d686:	d0e3      	beq.n	801d650 <_vsniprintf_r+0x16>
 801d688:	9b00      	ldr	r3, [sp, #0]
 801d68a:	2200      	movs	r2, #0
 801d68c:	701a      	strb	r2, [r3, #0]
 801d68e:	e7df      	b.n	801d650 <_vsniprintf_r+0x16>

0801d690 <vsniprintf>:
 801d690:	b507      	push	{r0, r1, r2, lr}
 801d692:	9300      	str	r3, [sp, #0]
 801d694:	4613      	mov	r3, r2
 801d696:	460a      	mov	r2, r1
 801d698:	4601      	mov	r1, r0
 801d69a:	4803      	ldr	r0, [pc, #12]	@ (801d6a8 <vsniprintf+0x18>)
 801d69c:	6800      	ldr	r0, [r0, #0]
 801d69e:	f7ff ffcc 	bl	801d63a <_vsniprintf_r>
 801d6a2:	b003      	add	sp, #12
 801d6a4:	f85d fb04 	ldr.w	pc, [sp], #4
 801d6a8:	2000327c 	.word	0x2000327c

0801d6ac <__swbuf_r>:
 801d6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d6ae:	460e      	mov	r6, r1
 801d6b0:	4614      	mov	r4, r2
 801d6b2:	4605      	mov	r5, r0
 801d6b4:	b118      	cbz	r0, 801d6be <__swbuf_r+0x12>
 801d6b6:	6a03      	ldr	r3, [r0, #32]
 801d6b8:	b90b      	cbnz	r3, 801d6be <__swbuf_r+0x12>
 801d6ba:	f7ff fea5 	bl	801d408 <__sinit>
 801d6be:	69a3      	ldr	r3, [r4, #24]
 801d6c0:	60a3      	str	r3, [r4, #8]
 801d6c2:	89a3      	ldrh	r3, [r4, #12]
 801d6c4:	071a      	lsls	r2, r3, #28
 801d6c6:	d501      	bpl.n	801d6cc <__swbuf_r+0x20>
 801d6c8:	6923      	ldr	r3, [r4, #16]
 801d6ca:	b943      	cbnz	r3, 801d6de <__swbuf_r+0x32>
 801d6cc:	4621      	mov	r1, r4
 801d6ce:	4628      	mov	r0, r5
 801d6d0:	f000 f82a 	bl	801d728 <__swsetup_r>
 801d6d4:	b118      	cbz	r0, 801d6de <__swbuf_r+0x32>
 801d6d6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801d6da:	4638      	mov	r0, r7
 801d6dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d6de:	6823      	ldr	r3, [r4, #0]
 801d6e0:	6922      	ldr	r2, [r4, #16]
 801d6e2:	1a98      	subs	r0, r3, r2
 801d6e4:	6963      	ldr	r3, [r4, #20]
 801d6e6:	b2f6      	uxtb	r6, r6
 801d6e8:	4283      	cmp	r3, r0
 801d6ea:	4637      	mov	r7, r6
 801d6ec:	dc05      	bgt.n	801d6fa <__swbuf_r+0x4e>
 801d6ee:	4621      	mov	r1, r4
 801d6f0:	4628      	mov	r0, r5
 801d6f2:	f000 feab 	bl	801e44c <_fflush_r>
 801d6f6:	2800      	cmp	r0, #0
 801d6f8:	d1ed      	bne.n	801d6d6 <__swbuf_r+0x2a>
 801d6fa:	68a3      	ldr	r3, [r4, #8]
 801d6fc:	3b01      	subs	r3, #1
 801d6fe:	60a3      	str	r3, [r4, #8]
 801d700:	6823      	ldr	r3, [r4, #0]
 801d702:	1c5a      	adds	r2, r3, #1
 801d704:	6022      	str	r2, [r4, #0]
 801d706:	701e      	strb	r6, [r3, #0]
 801d708:	6962      	ldr	r2, [r4, #20]
 801d70a:	1c43      	adds	r3, r0, #1
 801d70c:	429a      	cmp	r2, r3
 801d70e:	d004      	beq.n	801d71a <__swbuf_r+0x6e>
 801d710:	89a3      	ldrh	r3, [r4, #12]
 801d712:	07db      	lsls	r3, r3, #31
 801d714:	d5e1      	bpl.n	801d6da <__swbuf_r+0x2e>
 801d716:	2e0a      	cmp	r6, #10
 801d718:	d1df      	bne.n	801d6da <__swbuf_r+0x2e>
 801d71a:	4621      	mov	r1, r4
 801d71c:	4628      	mov	r0, r5
 801d71e:	f000 fe95 	bl	801e44c <_fflush_r>
 801d722:	2800      	cmp	r0, #0
 801d724:	d0d9      	beq.n	801d6da <__swbuf_r+0x2e>
 801d726:	e7d6      	b.n	801d6d6 <__swbuf_r+0x2a>

0801d728 <__swsetup_r>:
 801d728:	b538      	push	{r3, r4, r5, lr}
 801d72a:	4b29      	ldr	r3, [pc, #164]	@ (801d7d0 <__swsetup_r+0xa8>)
 801d72c:	4605      	mov	r5, r0
 801d72e:	6818      	ldr	r0, [r3, #0]
 801d730:	460c      	mov	r4, r1
 801d732:	b118      	cbz	r0, 801d73c <__swsetup_r+0x14>
 801d734:	6a03      	ldr	r3, [r0, #32]
 801d736:	b90b      	cbnz	r3, 801d73c <__swsetup_r+0x14>
 801d738:	f7ff fe66 	bl	801d408 <__sinit>
 801d73c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d740:	0719      	lsls	r1, r3, #28
 801d742:	d422      	bmi.n	801d78a <__swsetup_r+0x62>
 801d744:	06da      	lsls	r2, r3, #27
 801d746:	d407      	bmi.n	801d758 <__swsetup_r+0x30>
 801d748:	2209      	movs	r2, #9
 801d74a:	602a      	str	r2, [r5, #0]
 801d74c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d750:	81a3      	strh	r3, [r4, #12]
 801d752:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d756:	e033      	b.n	801d7c0 <__swsetup_r+0x98>
 801d758:	0758      	lsls	r0, r3, #29
 801d75a:	d512      	bpl.n	801d782 <__swsetup_r+0x5a>
 801d75c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d75e:	b141      	cbz	r1, 801d772 <__swsetup_r+0x4a>
 801d760:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d764:	4299      	cmp	r1, r3
 801d766:	d002      	beq.n	801d76e <__swsetup_r+0x46>
 801d768:	4628      	mov	r0, r5
 801d76a:	f000 f971 	bl	801da50 <_free_r>
 801d76e:	2300      	movs	r3, #0
 801d770:	6363      	str	r3, [r4, #52]	@ 0x34
 801d772:	89a3      	ldrh	r3, [r4, #12]
 801d774:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d778:	81a3      	strh	r3, [r4, #12]
 801d77a:	2300      	movs	r3, #0
 801d77c:	6063      	str	r3, [r4, #4]
 801d77e:	6923      	ldr	r3, [r4, #16]
 801d780:	6023      	str	r3, [r4, #0]
 801d782:	89a3      	ldrh	r3, [r4, #12]
 801d784:	f043 0308 	orr.w	r3, r3, #8
 801d788:	81a3      	strh	r3, [r4, #12]
 801d78a:	6923      	ldr	r3, [r4, #16]
 801d78c:	b94b      	cbnz	r3, 801d7a2 <__swsetup_r+0x7a>
 801d78e:	89a3      	ldrh	r3, [r4, #12]
 801d790:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d794:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d798:	d003      	beq.n	801d7a2 <__swsetup_r+0x7a>
 801d79a:	4621      	mov	r1, r4
 801d79c:	4628      	mov	r0, r5
 801d79e:	f000 feb5 	bl	801e50c <__smakebuf_r>
 801d7a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d7a6:	f013 0201 	ands.w	r2, r3, #1
 801d7aa:	d00a      	beq.n	801d7c2 <__swsetup_r+0x9a>
 801d7ac:	2200      	movs	r2, #0
 801d7ae:	60a2      	str	r2, [r4, #8]
 801d7b0:	6962      	ldr	r2, [r4, #20]
 801d7b2:	4252      	negs	r2, r2
 801d7b4:	61a2      	str	r2, [r4, #24]
 801d7b6:	6922      	ldr	r2, [r4, #16]
 801d7b8:	b942      	cbnz	r2, 801d7cc <__swsetup_r+0xa4>
 801d7ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d7be:	d1c5      	bne.n	801d74c <__swsetup_r+0x24>
 801d7c0:	bd38      	pop	{r3, r4, r5, pc}
 801d7c2:	0799      	lsls	r1, r3, #30
 801d7c4:	bf58      	it	pl
 801d7c6:	6962      	ldrpl	r2, [r4, #20]
 801d7c8:	60a2      	str	r2, [r4, #8]
 801d7ca:	e7f4      	b.n	801d7b6 <__swsetup_r+0x8e>
 801d7cc:	2000      	movs	r0, #0
 801d7ce:	e7f7      	b.n	801d7c0 <__swsetup_r+0x98>
 801d7d0:	2000327c 	.word	0x2000327c

0801d7d4 <memcmp>:
 801d7d4:	b510      	push	{r4, lr}
 801d7d6:	3901      	subs	r1, #1
 801d7d8:	4402      	add	r2, r0
 801d7da:	4290      	cmp	r0, r2
 801d7dc:	d101      	bne.n	801d7e2 <memcmp+0xe>
 801d7de:	2000      	movs	r0, #0
 801d7e0:	e005      	b.n	801d7ee <memcmp+0x1a>
 801d7e2:	7803      	ldrb	r3, [r0, #0]
 801d7e4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d7e8:	42a3      	cmp	r3, r4
 801d7ea:	d001      	beq.n	801d7f0 <memcmp+0x1c>
 801d7ec:	1b18      	subs	r0, r3, r4
 801d7ee:	bd10      	pop	{r4, pc}
 801d7f0:	3001      	adds	r0, #1
 801d7f2:	e7f2      	b.n	801d7da <memcmp+0x6>

0801d7f4 <memmove>:
 801d7f4:	4288      	cmp	r0, r1
 801d7f6:	b510      	push	{r4, lr}
 801d7f8:	eb01 0402 	add.w	r4, r1, r2
 801d7fc:	d902      	bls.n	801d804 <memmove+0x10>
 801d7fe:	4284      	cmp	r4, r0
 801d800:	4623      	mov	r3, r4
 801d802:	d807      	bhi.n	801d814 <memmove+0x20>
 801d804:	1e43      	subs	r3, r0, #1
 801d806:	42a1      	cmp	r1, r4
 801d808:	d008      	beq.n	801d81c <memmove+0x28>
 801d80a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d80e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d812:	e7f8      	b.n	801d806 <memmove+0x12>
 801d814:	4402      	add	r2, r0
 801d816:	4601      	mov	r1, r0
 801d818:	428a      	cmp	r2, r1
 801d81a:	d100      	bne.n	801d81e <memmove+0x2a>
 801d81c:	bd10      	pop	{r4, pc}
 801d81e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d822:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d826:	e7f7      	b.n	801d818 <memmove+0x24>

0801d828 <memset>:
 801d828:	4402      	add	r2, r0
 801d82a:	4603      	mov	r3, r0
 801d82c:	4293      	cmp	r3, r2
 801d82e:	d100      	bne.n	801d832 <memset+0xa>
 801d830:	4770      	bx	lr
 801d832:	f803 1b01 	strb.w	r1, [r3], #1
 801d836:	e7f9      	b.n	801d82c <memset+0x4>

0801d838 <strchr>:
 801d838:	b2c9      	uxtb	r1, r1
 801d83a:	4603      	mov	r3, r0
 801d83c:	4618      	mov	r0, r3
 801d83e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d842:	b112      	cbz	r2, 801d84a <strchr+0x12>
 801d844:	428a      	cmp	r2, r1
 801d846:	d1f9      	bne.n	801d83c <strchr+0x4>
 801d848:	4770      	bx	lr
 801d84a:	2900      	cmp	r1, #0
 801d84c:	bf18      	it	ne
 801d84e:	2000      	movne	r0, #0
 801d850:	4770      	bx	lr

0801d852 <strncmp>:
 801d852:	b510      	push	{r4, lr}
 801d854:	b16a      	cbz	r2, 801d872 <strncmp+0x20>
 801d856:	3901      	subs	r1, #1
 801d858:	1884      	adds	r4, r0, r2
 801d85a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d85e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801d862:	429a      	cmp	r2, r3
 801d864:	d103      	bne.n	801d86e <strncmp+0x1c>
 801d866:	42a0      	cmp	r0, r4
 801d868:	d001      	beq.n	801d86e <strncmp+0x1c>
 801d86a:	2a00      	cmp	r2, #0
 801d86c:	d1f5      	bne.n	801d85a <strncmp+0x8>
 801d86e:	1ad0      	subs	r0, r2, r3
 801d870:	bd10      	pop	{r4, pc}
 801d872:	4610      	mov	r0, r2
 801d874:	e7fc      	b.n	801d870 <strncmp+0x1e>

0801d876 <strncpy>:
 801d876:	b510      	push	{r4, lr}
 801d878:	3901      	subs	r1, #1
 801d87a:	4603      	mov	r3, r0
 801d87c:	b132      	cbz	r2, 801d88c <strncpy+0x16>
 801d87e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d882:	f803 4b01 	strb.w	r4, [r3], #1
 801d886:	3a01      	subs	r2, #1
 801d888:	2c00      	cmp	r4, #0
 801d88a:	d1f7      	bne.n	801d87c <strncpy+0x6>
 801d88c:	441a      	add	r2, r3
 801d88e:	2100      	movs	r1, #0
 801d890:	4293      	cmp	r3, r2
 801d892:	d100      	bne.n	801d896 <strncpy+0x20>
 801d894:	bd10      	pop	{r4, pc}
 801d896:	f803 1b01 	strb.w	r1, [r3], #1
 801d89a:	e7f9      	b.n	801d890 <strncpy+0x1a>

0801d89c <strstr>:
 801d89c:	780a      	ldrb	r2, [r1, #0]
 801d89e:	b570      	push	{r4, r5, r6, lr}
 801d8a0:	b96a      	cbnz	r2, 801d8be <strstr+0x22>
 801d8a2:	bd70      	pop	{r4, r5, r6, pc}
 801d8a4:	429a      	cmp	r2, r3
 801d8a6:	d109      	bne.n	801d8bc <strstr+0x20>
 801d8a8:	460c      	mov	r4, r1
 801d8aa:	4605      	mov	r5, r0
 801d8ac:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801d8b0:	2b00      	cmp	r3, #0
 801d8b2:	d0f6      	beq.n	801d8a2 <strstr+0x6>
 801d8b4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801d8b8:	429e      	cmp	r6, r3
 801d8ba:	d0f7      	beq.n	801d8ac <strstr+0x10>
 801d8bc:	3001      	adds	r0, #1
 801d8be:	7803      	ldrb	r3, [r0, #0]
 801d8c0:	2b00      	cmp	r3, #0
 801d8c2:	d1ef      	bne.n	801d8a4 <strstr+0x8>
 801d8c4:	4618      	mov	r0, r3
 801d8c6:	e7ec      	b.n	801d8a2 <strstr+0x6>

0801d8c8 <_close_r>:
 801d8c8:	b538      	push	{r3, r4, r5, lr}
 801d8ca:	4d06      	ldr	r5, [pc, #24]	@ (801d8e4 <_close_r+0x1c>)
 801d8cc:	2300      	movs	r3, #0
 801d8ce:	4604      	mov	r4, r0
 801d8d0:	4608      	mov	r0, r1
 801d8d2:	602b      	str	r3, [r5, #0]
 801d8d4:	f7e5 fed4 	bl	8003680 <_close>
 801d8d8:	1c43      	adds	r3, r0, #1
 801d8da:	d102      	bne.n	801d8e2 <_close_r+0x1a>
 801d8dc:	682b      	ldr	r3, [r5, #0]
 801d8de:	b103      	cbz	r3, 801d8e2 <_close_r+0x1a>
 801d8e0:	6023      	str	r3, [r4, #0]
 801d8e2:	bd38      	pop	{r3, r4, r5, pc}
 801d8e4:	2000f768 	.word	0x2000f768

0801d8e8 <_lseek_r>:
 801d8e8:	b538      	push	{r3, r4, r5, lr}
 801d8ea:	4d07      	ldr	r5, [pc, #28]	@ (801d908 <_lseek_r+0x20>)
 801d8ec:	4604      	mov	r4, r0
 801d8ee:	4608      	mov	r0, r1
 801d8f0:	4611      	mov	r1, r2
 801d8f2:	2200      	movs	r2, #0
 801d8f4:	602a      	str	r2, [r5, #0]
 801d8f6:	461a      	mov	r2, r3
 801d8f8:	f7e5 fee9 	bl	80036ce <_lseek>
 801d8fc:	1c43      	adds	r3, r0, #1
 801d8fe:	d102      	bne.n	801d906 <_lseek_r+0x1e>
 801d900:	682b      	ldr	r3, [r5, #0]
 801d902:	b103      	cbz	r3, 801d906 <_lseek_r+0x1e>
 801d904:	6023      	str	r3, [r4, #0]
 801d906:	bd38      	pop	{r3, r4, r5, pc}
 801d908:	2000f768 	.word	0x2000f768

0801d90c <_read_r>:
 801d90c:	b538      	push	{r3, r4, r5, lr}
 801d90e:	4d07      	ldr	r5, [pc, #28]	@ (801d92c <_read_r+0x20>)
 801d910:	4604      	mov	r4, r0
 801d912:	4608      	mov	r0, r1
 801d914:	4611      	mov	r1, r2
 801d916:	2200      	movs	r2, #0
 801d918:	602a      	str	r2, [r5, #0]
 801d91a:	461a      	mov	r2, r3
 801d91c:	f7e5 fe77 	bl	800360e <_read>
 801d920:	1c43      	adds	r3, r0, #1
 801d922:	d102      	bne.n	801d92a <_read_r+0x1e>
 801d924:	682b      	ldr	r3, [r5, #0]
 801d926:	b103      	cbz	r3, 801d92a <_read_r+0x1e>
 801d928:	6023      	str	r3, [r4, #0]
 801d92a:	bd38      	pop	{r3, r4, r5, pc}
 801d92c:	2000f768 	.word	0x2000f768

0801d930 <_sbrk_r>:
 801d930:	b538      	push	{r3, r4, r5, lr}
 801d932:	4d06      	ldr	r5, [pc, #24]	@ (801d94c <_sbrk_r+0x1c>)
 801d934:	2300      	movs	r3, #0
 801d936:	4604      	mov	r4, r0
 801d938:	4608      	mov	r0, r1
 801d93a:	602b      	str	r3, [r5, #0]
 801d93c:	f7e5 fed4 	bl	80036e8 <_sbrk>
 801d940:	1c43      	adds	r3, r0, #1
 801d942:	d102      	bne.n	801d94a <_sbrk_r+0x1a>
 801d944:	682b      	ldr	r3, [r5, #0]
 801d946:	b103      	cbz	r3, 801d94a <_sbrk_r+0x1a>
 801d948:	6023      	str	r3, [r4, #0]
 801d94a:	bd38      	pop	{r3, r4, r5, pc}
 801d94c:	2000f768 	.word	0x2000f768

0801d950 <_write_r>:
 801d950:	b538      	push	{r3, r4, r5, lr}
 801d952:	4d07      	ldr	r5, [pc, #28]	@ (801d970 <_write_r+0x20>)
 801d954:	4604      	mov	r4, r0
 801d956:	4608      	mov	r0, r1
 801d958:	4611      	mov	r1, r2
 801d95a:	2200      	movs	r2, #0
 801d95c:	602a      	str	r2, [r5, #0]
 801d95e:	461a      	mov	r2, r3
 801d960:	f7e5 fe72 	bl	8003648 <_write>
 801d964:	1c43      	adds	r3, r0, #1
 801d966:	d102      	bne.n	801d96e <_write_r+0x1e>
 801d968:	682b      	ldr	r3, [r5, #0]
 801d96a:	b103      	cbz	r3, 801d96e <_write_r+0x1e>
 801d96c:	6023      	str	r3, [r4, #0]
 801d96e:	bd38      	pop	{r3, r4, r5, pc}
 801d970:	2000f768 	.word	0x2000f768

0801d974 <__errno>:
 801d974:	4b01      	ldr	r3, [pc, #4]	@ (801d97c <__errno+0x8>)
 801d976:	6818      	ldr	r0, [r3, #0]
 801d978:	4770      	bx	lr
 801d97a:	bf00      	nop
 801d97c:	2000327c 	.word	0x2000327c

0801d980 <__libc_init_array>:
 801d980:	b570      	push	{r4, r5, r6, lr}
 801d982:	4d0d      	ldr	r5, [pc, #52]	@ (801d9b8 <__libc_init_array+0x38>)
 801d984:	4c0d      	ldr	r4, [pc, #52]	@ (801d9bc <__libc_init_array+0x3c>)
 801d986:	1b64      	subs	r4, r4, r5
 801d988:	10a4      	asrs	r4, r4, #2
 801d98a:	2600      	movs	r6, #0
 801d98c:	42a6      	cmp	r6, r4
 801d98e:	d109      	bne.n	801d9a4 <__libc_init_array+0x24>
 801d990:	4d0b      	ldr	r5, [pc, #44]	@ (801d9c0 <__libc_init_array+0x40>)
 801d992:	4c0c      	ldr	r4, [pc, #48]	@ (801d9c4 <__libc_init_array+0x44>)
 801d994:	f001 ff52 	bl	801f83c <_init>
 801d998:	1b64      	subs	r4, r4, r5
 801d99a:	10a4      	asrs	r4, r4, #2
 801d99c:	2600      	movs	r6, #0
 801d99e:	42a6      	cmp	r6, r4
 801d9a0:	d105      	bne.n	801d9ae <__libc_init_array+0x2e>
 801d9a2:	bd70      	pop	{r4, r5, r6, pc}
 801d9a4:	f855 3b04 	ldr.w	r3, [r5], #4
 801d9a8:	4798      	blx	r3
 801d9aa:	3601      	adds	r6, #1
 801d9ac:	e7ee      	b.n	801d98c <__libc_init_array+0xc>
 801d9ae:	f855 3b04 	ldr.w	r3, [r5], #4
 801d9b2:	4798      	blx	r3
 801d9b4:	3601      	adds	r6, #1
 801d9b6:	e7f2      	b.n	801d99e <__libc_init_array+0x1e>
 801d9b8:	08022070 	.word	0x08022070
 801d9bc:	08022070 	.word	0x08022070
 801d9c0:	08022070 	.word	0x08022070
 801d9c4:	08022084 	.word	0x08022084

0801d9c8 <__retarget_lock_init_recursive>:
 801d9c8:	4770      	bx	lr

0801d9ca <__retarget_lock_acquire_recursive>:
 801d9ca:	4770      	bx	lr

0801d9cc <__retarget_lock_release_recursive>:
 801d9cc:	4770      	bx	lr

0801d9ce <strcpy>:
 801d9ce:	4603      	mov	r3, r0
 801d9d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d9d4:	f803 2b01 	strb.w	r2, [r3], #1
 801d9d8:	2a00      	cmp	r2, #0
 801d9da:	d1f9      	bne.n	801d9d0 <strcpy+0x2>
 801d9dc:	4770      	bx	lr

0801d9de <memcpy>:
 801d9de:	440a      	add	r2, r1
 801d9e0:	4291      	cmp	r1, r2
 801d9e2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801d9e6:	d100      	bne.n	801d9ea <memcpy+0xc>
 801d9e8:	4770      	bx	lr
 801d9ea:	b510      	push	{r4, lr}
 801d9ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d9f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d9f4:	4291      	cmp	r1, r2
 801d9f6:	d1f9      	bne.n	801d9ec <memcpy+0xe>
 801d9f8:	bd10      	pop	{r4, pc}
	...

0801d9fc <__assert_func>:
 801d9fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d9fe:	4614      	mov	r4, r2
 801da00:	461a      	mov	r2, r3
 801da02:	4b09      	ldr	r3, [pc, #36]	@ (801da28 <__assert_func+0x2c>)
 801da04:	681b      	ldr	r3, [r3, #0]
 801da06:	4605      	mov	r5, r0
 801da08:	68d8      	ldr	r0, [r3, #12]
 801da0a:	b954      	cbnz	r4, 801da22 <__assert_func+0x26>
 801da0c:	4b07      	ldr	r3, [pc, #28]	@ (801da2c <__assert_func+0x30>)
 801da0e:	461c      	mov	r4, r3
 801da10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801da14:	9100      	str	r1, [sp, #0]
 801da16:	462b      	mov	r3, r5
 801da18:	4905      	ldr	r1, [pc, #20]	@ (801da30 <__assert_func+0x34>)
 801da1a:	f000 fd3f 	bl	801e49c <fiprintf>
 801da1e:	f000 fdd3 	bl	801e5c8 <abort>
 801da22:	4b04      	ldr	r3, [pc, #16]	@ (801da34 <__assert_func+0x38>)
 801da24:	e7f4      	b.n	801da10 <__assert_func+0x14>
 801da26:	bf00      	nop
 801da28:	2000327c 	.word	0x2000327c
 801da2c:	08021bf3 	.word	0x08021bf3
 801da30:	08021bc5 	.word	0x08021bc5
 801da34:	08021bb8 	.word	0x08021bb8

0801da38 <__env_lock>:
 801da38:	4801      	ldr	r0, [pc, #4]	@ (801da40 <__env_lock+0x8>)
 801da3a:	f7ff bfc6 	b.w	801d9ca <__retarget_lock_acquire_recursive>
 801da3e:	bf00      	nop
 801da40:	2000f76c 	.word	0x2000f76c

0801da44 <__env_unlock>:
 801da44:	4801      	ldr	r0, [pc, #4]	@ (801da4c <__env_unlock+0x8>)
 801da46:	f7ff bfc1 	b.w	801d9cc <__retarget_lock_release_recursive>
 801da4a:	bf00      	nop
 801da4c:	2000f76c 	.word	0x2000f76c

0801da50 <_free_r>:
 801da50:	b538      	push	{r3, r4, r5, lr}
 801da52:	4605      	mov	r5, r0
 801da54:	2900      	cmp	r1, #0
 801da56:	d041      	beq.n	801dadc <_free_r+0x8c>
 801da58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801da5c:	1f0c      	subs	r4, r1, #4
 801da5e:	2b00      	cmp	r3, #0
 801da60:	bfb8      	it	lt
 801da62:	18e4      	addlt	r4, r4, r3
 801da64:	f7ff fb1e 	bl	801d0a4 <__malloc_lock>
 801da68:	4a1d      	ldr	r2, [pc, #116]	@ (801dae0 <_free_r+0x90>)
 801da6a:	6813      	ldr	r3, [r2, #0]
 801da6c:	b933      	cbnz	r3, 801da7c <_free_r+0x2c>
 801da6e:	6063      	str	r3, [r4, #4]
 801da70:	6014      	str	r4, [r2, #0]
 801da72:	4628      	mov	r0, r5
 801da74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801da78:	f7ff bb1a 	b.w	801d0b0 <__malloc_unlock>
 801da7c:	42a3      	cmp	r3, r4
 801da7e:	d908      	bls.n	801da92 <_free_r+0x42>
 801da80:	6820      	ldr	r0, [r4, #0]
 801da82:	1821      	adds	r1, r4, r0
 801da84:	428b      	cmp	r3, r1
 801da86:	bf01      	itttt	eq
 801da88:	6819      	ldreq	r1, [r3, #0]
 801da8a:	685b      	ldreq	r3, [r3, #4]
 801da8c:	1809      	addeq	r1, r1, r0
 801da8e:	6021      	streq	r1, [r4, #0]
 801da90:	e7ed      	b.n	801da6e <_free_r+0x1e>
 801da92:	461a      	mov	r2, r3
 801da94:	685b      	ldr	r3, [r3, #4]
 801da96:	b10b      	cbz	r3, 801da9c <_free_r+0x4c>
 801da98:	42a3      	cmp	r3, r4
 801da9a:	d9fa      	bls.n	801da92 <_free_r+0x42>
 801da9c:	6811      	ldr	r1, [r2, #0]
 801da9e:	1850      	adds	r0, r2, r1
 801daa0:	42a0      	cmp	r0, r4
 801daa2:	d10b      	bne.n	801dabc <_free_r+0x6c>
 801daa4:	6820      	ldr	r0, [r4, #0]
 801daa6:	4401      	add	r1, r0
 801daa8:	1850      	adds	r0, r2, r1
 801daaa:	4283      	cmp	r3, r0
 801daac:	6011      	str	r1, [r2, #0]
 801daae:	d1e0      	bne.n	801da72 <_free_r+0x22>
 801dab0:	6818      	ldr	r0, [r3, #0]
 801dab2:	685b      	ldr	r3, [r3, #4]
 801dab4:	6053      	str	r3, [r2, #4]
 801dab6:	4408      	add	r0, r1
 801dab8:	6010      	str	r0, [r2, #0]
 801daba:	e7da      	b.n	801da72 <_free_r+0x22>
 801dabc:	d902      	bls.n	801dac4 <_free_r+0x74>
 801dabe:	230c      	movs	r3, #12
 801dac0:	602b      	str	r3, [r5, #0]
 801dac2:	e7d6      	b.n	801da72 <_free_r+0x22>
 801dac4:	6820      	ldr	r0, [r4, #0]
 801dac6:	1821      	adds	r1, r4, r0
 801dac8:	428b      	cmp	r3, r1
 801daca:	bf04      	itt	eq
 801dacc:	6819      	ldreq	r1, [r3, #0]
 801dace:	685b      	ldreq	r3, [r3, #4]
 801dad0:	6063      	str	r3, [r4, #4]
 801dad2:	bf04      	itt	eq
 801dad4:	1809      	addeq	r1, r1, r0
 801dad6:	6021      	streq	r1, [r4, #0]
 801dad8:	6054      	str	r4, [r2, #4]
 801dada:	e7ca      	b.n	801da72 <_free_r+0x22>
 801dadc:	bd38      	pop	{r3, r4, r5, pc}
 801dade:	bf00      	nop
 801dae0:	2000f628 	.word	0x2000f628

0801dae4 <_malloc_usable_size_r>:
 801dae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dae8:	1f18      	subs	r0, r3, #4
 801daea:	2b00      	cmp	r3, #0
 801daec:	bfbc      	itt	lt
 801daee:	580b      	ldrlt	r3, [r1, r0]
 801daf0:	18c0      	addlt	r0, r0, r3
 801daf2:	4770      	bx	lr

0801daf4 <__ssputs_r>:
 801daf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801daf8:	688e      	ldr	r6, [r1, #8]
 801dafa:	461f      	mov	r7, r3
 801dafc:	42be      	cmp	r6, r7
 801dafe:	680b      	ldr	r3, [r1, #0]
 801db00:	4682      	mov	sl, r0
 801db02:	460c      	mov	r4, r1
 801db04:	4690      	mov	r8, r2
 801db06:	d82d      	bhi.n	801db64 <__ssputs_r+0x70>
 801db08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801db0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801db10:	d026      	beq.n	801db60 <__ssputs_r+0x6c>
 801db12:	6965      	ldr	r5, [r4, #20]
 801db14:	6909      	ldr	r1, [r1, #16]
 801db16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801db1a:	eba3 0901 	sub.w	r9, r3, r1
 801db1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801db22:	1c7b      	adds	r3, r7, #1
 801db24:	444b      	add	r3, r9
 801db26:	106d      	asrs	r5, r5, #1
 801db28:	429d      	cmp	r5, r3
 801db2a:	bf38      	it	cc
 801db2c:	461d      	movcc	r5, r3
 801db2e:	0553      	lsls	r3, r2, #21
 801db30:	d527      	bpl.n	801db82 <__ssputs_r+0x8e>
 801db32:	4629      	mov	r1, r5
 801db34:	f7ff fa36 	bl	801cfa4 <_malloc_r>
 801db38:	4606      	mov	r6, r0
 801db3a:	b360      	cbz	r0, 801db96 <__ssputs_r+0xa2>
 801db3c:	6921      	ldr	r1, [r4, #16]
 801db3e:	464a      	mov	r2, r9
 801db40:	f7ff ff4d 	bl	801d9de <memcpy>
 801db44:	89a3      	ldrh	r3, [r4, #12]
 801db46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801db4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801db4e:	81a3      	strh	r3, [r4, #12]
 801db50:	6126      	str	r6, [r4, #16]
 801db52:	6165      	str	r5, [r4, #20]
 801db54:	444e      	add	r6, r9
 801db56:	eba5 0509 	sub.w	r5, r5, r9
 801db5a:	6026      	str	r6, [r4, #0]
 801db5c:	60a5      	str	r5, [r4, #8]
 801db5e:	463e      	mov	r6, r7
 801db60:	42be      	cmp	r6, r7
 801db62:	d900      	bls.n	801db66 <__ssputs_r+0x72>
 801db64:	463e      	mov	r6, r7
 801db66:	6820      	ldr	r0, [r4, #0]
 801db68:	4632      	mov	r2, r6
 801db6a:	4641      	mov	r1, r8
 801db6c:	f7ff fe42 	bl	801d7f4 <memmove>
 801db70:	68a3      	ldr	r3, [r4, #8]
 801db72:	1b9b      	subs	r3, r3, r6
 801db74:	60a3      	str	r3, [r4, #8]
 801db76:	6823      	ldr	r3, [r4, #0]
 801db78:	4433      	add	r3, r6
 801db7a:	6023      	str	r3, [r4, #0]
 801db7c:	2000      	movs	r0, #0
 801db7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801db82:	462a      	mov	r2, r5
 801db84:	f7ff fb0e 	bl	801d1a4 <_realloc_r>
 801db88:	4606      	mov	r6, r0
 801db8a:	2800      	cmp	r0, #0
 801db8c:	d1e0      	bne.n	801db50 <__ssputs_r+0x5c>
 801db8e:	6921      	ldr	r1, [r4, #16]
 801db90:	4650      	mov	r0, sl
 801db92:	f7ff ff5d 	bl	801da50 <_free_r>
 801db96:	230c      	movs	r3, #12
 801db98:	f8ca 3000 	str.w	r3, [sl]
 801db9c:	89a3      	ldrh	r3, [r4, #12]
 801db9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dba2:	81a3      	strh	r3, [r4, #12]
 801dba4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801dba8:	e7e9      	b.n	801db7e <__ssputs_r+0x8a>
	...

0801dbac <_svfiprintf_r>:
 801dbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbb0:	4698      	mov	r8, r3
 801dbb2:	898b      	ldrh	r3, [r1, #12]
 801dbb4:	061b      	lsls	r3, r3, #24
 801dbb6:	b09d      	sub	sp, #116	@ 0x74
 801dbb8:	4607      	mov	r7, r0
 801dbba:	460d      	mov	r5, r1
 801dbbc:	4614      	mov	r4, r2
 801dbbe:	d510      	bpl.n	801dbe2 <_svfiprintf_r+0x36>
 801dbc0:	690b      	ldr	r3, [r1, #16]
 801dbc2:	b973      	cbnz	r3, 801dbe2 <_svfiprintf_r+0x36>
 801dbc4:	2140      	movs	r1, #64	@ 0x40
 801dbc6:	f7ff f9ed 	bl	801cfa4 <_malloc_r>
 801dbca:	6028      	str	r0, [r5, #0]
 801dbcc:	6128      	str	r0, [r5, #16]
 801dbce:	b930      	cbnz	r0, 801dbde <_svfiprintf_r+0x32>
 801dbd0:	230c      	movs	r3, #12
 801dbd2:	603b      	str	r3, [r7, #0]
 801dbd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801dbd8:	b01d      	add	sp, #116	@ 0x74
 801dbda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbde:	2340      	movs	r3, #64	@ 0x40
 801dbe0:	616b      	str	r3, [r5, #20]
 801dbe2:	2300      	movs	r3, #0
 801dbe4:	9309      	str	r3, [sp, #36]	@ 0x24
 801dbe6:	2320      	movs	r3, #32
 801dbe8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801dbec:	f8cd 800c 	str.w	r8, [sp, #12]
 801dbf0:	2330      	movs	r3, #48	@ 0x30
 801dbf2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801dd90 <_svfiprintf_r+0x1e4>
 801dbf6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801dbfa:	f04f 0901 	mov.w	r9, #1
 801dbfe:	4623      	mov	r3, r4
 801dc00:	469a      	mov	sl, r3
 801dc02:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dc06:	b10a      	cbz	r2, 801dc0c <_svfiprintf_r+0x60>
 801dc08:	2a25      	cmp	r2, #37	@ 0x25
 801dc0a:	d1f9      	bne.n	801dc00 <_svfiprintf_r+0x54>
 801dc0c:	ebba 0b04 	subs.w	fp, sl, r4
 801dc10:	d00b      	beq.n	801dc2a <_svfiprintf_r+0x7e>
 801dc12:	465b      	mov	r3, fp
 801dc14:	4622      	mov	r2, r4
 801dc16:	4629      	mov	r1, r5
 801dc18:	4638      	mov	r0, r7
 801dc1a:	f7ff ff6b 	bl	801daf4 <__ssputs_r>
 801dc1e:	3001      	adds	r0, #1
 801dc20:	f000 80a7 	beq.w	801dd72 <_svfiprintf_r+0x1c6>
 801dc24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dc26:	445a      	add	r2, fp
 801dc28:	9209      	str	r2, [sp, #36]	@ 0x24
 801dc2a:	f89a 3000 	ldrb.w	r3, [sl]
 801dc2e:	2b00      	cmp	r3, #0
 801dc30:	f000 809f 	beq.w	801dd72 <_svfiprintf_r+0x1c6>
 801dc34:	2300      	movs	r3, #0
 801dc36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801dc3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dc3e:	f10a 0a01 	add.w	sl, sl, #1
 801dc42:	9304      	str	r3, [sp, #16]
 801dc44:	9307      	str	r3, [sp, #28]
 801dc46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801dc4a:	931a      	str	r3, [sp, #104]	@ 0x68
 801dc4c:	4654      	mov	r4, sl
 801dc4e:	2205      	movs	r2, #5
 801dc50:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dc54:	484e      	ldr	r0, [pc, #312]	@ (801dd90 <_svfiprintf_r+0x1e4>)
 801dc56:	f7e2 faf3 	bl	8000240 <memchr>
 801dc5a:	9a04      	ldr	r2, [sp, #16]
 801dc5c:	b9d8      	cbnz	r0, 801dc96 <_svfiprintf_r+0xea>
 801dc5e:	06d0      	lsls	r0, r2, #27
 801dc60:	bf44      	itt	mi
 801dc62:	2320      	movmi	r3, #32
 801dc64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801dc68:	0711      	lsls	r1, r2, #28
 801dc6a:	bf44      	itt	mi
 801dc6c:	232b      	movmi	r3, #43	@ 0x2b
 801dc6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801dc72:	f89a 3000 	ldrb.w	r3, [sl]
 801dc76:	2b2a      	cmp	r3, #42	@ 0x2a
 801dc78:	d015      	beq.n	801dca6 <_svfiprintf_r+0xfa>
 801dc7a:	9a07      	ldr	r2, [sp, #28]
 801dc7c:	4654      	mov	r4, sl
 801dc7e:	2000      	movs	r0, #0
 801dc80:	f04f 0c0a 	mov.w	ip, #10
 801dc84:	4621      	mov	r1, r4
 801dc86:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dc8a:	3b30      	subs	r3, #48	@ 0x30
 801dc8c:	2b09      	cmp	r3, #9
 801dc8e:	d94b      	bls.n	801dd28 <_svfiprintf_r+0x17c>
 801dc90:	b1b0      	cbz	r0, 801dcc0 <_svfiprintf_r+0x114>
 801dc92:	9207      	str	r2, [sp, #28]
 801dc94:	e014      	b.n	801dcc0 <_svfiprintf_r+0x114>
 801dc96:	eba0 0308 	sub.w	r3, r0, r8
 801dc9a:	fa09 f303 	lsl.w	r3, r9, r3
 801dc9e:	4313      	orrs	r3, r2
 801dca0:	9304      	str	r3, [sp, #16]
 801dca2:	46a2      	mov	sl, r4
 801dca4:	e7d2      	b.n	801dc4c <_svfiprintf_r+0xa0>
 801dca6:	9b03      	ldr	r3, [sp, #12]
 801dca8:	1d19      	adds	r1, r3, #4
 801dcaa:	681b      	ldr	r3, [r3, #0]
 801dcac:	9103      	str	r1, [sp, #12]
 801dcae:	2b00      	cmp	r3, #0
 801dcb0:	bfbb      	ittet	lt
 801dcb2:	425b      	neglt	r3, r3
 801dcb4:	f042 0202 	orrlt.w	r2, r2, #2
 801dcb8:	9307      	strge	r3, [sp, #28]
 801dcba:	9307      	strlt	r3, [sp, #28]
 801dcbc:	bfb8      	it	lt
 801dcbe:	9204      	strlt	r2, [sp, #16]
 801dcc0:	7823      	ldrb	r3, [r4, #0]
 801dcc2:	2b2e      	cmp	r3, #46	@ 0x2e
 801dcc4:	d10a      	bne.n	801dcdc <_svfiprintf_r+0x130>
 801dcc6:	7863      	ldrb	r3, [r4, #1]
 801dcc8:	2b2a      	cmp	r3, #42	@ 0x2a
 801dcca:	d132      	bne.n	801dd32 <_svfiprintf_r+0x186>
 801dccc:	9b03      	ldr	r3, [sp, #12]
 801dcce:	1d1a      	adds	r2, r3, #4
 801dcd0:	681b      	ldr	r3, [r3, #0]
 801dcd2:	9203      	str	r2, [sp, #12]
 801dcd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801dcd8:	3402      	adds	r4, #2
 801dcda:	9305      	str	r3, [sp, #20]
 801dcdc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801dda0 <_svfiprintf_r+0x1f4>
 801dce0:	7821      	ldrb	r1, [r4, #0]
 801dce2:	2203      	movs	r2, #3
 801dce4:	4650      	mov	r0, sl
 801dce6:	f7e2 faab 	bl	8000240 <memchr>
 801dcea:	b138      	cbz	r0, 801dcfc <_svfiprintf_r+0x150>
 801dcec:	9b04      	ldr	r3, [sp, #16]
 801dcee:	eba0 000a 	sub.w	r0, r0, sl
 801dcf2:	2240      	movs	r2, #64	@ 0x40
 801dcf4:	4082      	lsls	r2, r0
 801dcf6:	4313      	orrs	r3, r2
 801dcf8:	3401      	adds	r4, #1
 801dcfa:	9304      	str	r3, [sp, #16]
 801dcfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dd00:	4824      	ldr	r0, [pc, #144]	@ (801dd94 <_svfiprintf_r+0x1e8>)
 801dd02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801dd06:	2206      	movs	r2, #6
 801dd08:	f7e2 fa9a 	bl	8000240 <memchr>
 801dd0c:	2800      	cmp	r0, #0
 801dd0e:	d036      	beq.n	801dd7e <_svfiprintf_r+0x1d2>
 801dd10:	4b21      	ldr	r3, [pc, #132]	@ (801dd98 <_svfiprintf_r+0x1ec>)
 801dd12:	bb1b      	cbnz	r3, 801dd5c <_svfiprintf_r+0x1b0>
 801dd14:	9b03      	ldr	r3, [sp, #12]
 801dd16:	3307      	adds	r3, #7
 801dd18:	f023 0307 	bic.w	r3, r3, #7
 801dd1c:	3308      	adds	r3, #8
 801dd1e:	9303      	str	r3, [sp, #12]
 801dd20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd22:	4433      	add	r3, r6
 801dd24:	9309      	str	r3, [sp, #36]	@ 0x24
 801dd26:	e76a      	b.n	801dbfe <_svfiprintf_r+0x52>
 801dd28:	fb0c 3202 	mla	r2, ip, r2, r3
 801dd2c:	460c      	mov	r4, r1
 801dd2e:	2001      	movs	r0, #1
 801dd30:	e7a8      	b.n	801dc84 <_svfiprintf_r+0xd8>
 801dd32:	2300      	movs	r3, #0
 801dd34:	3401      	adds	r4, #1
 801dd36:	9305      	str	r3, [sp, #20]
 801dd38:	4619      	mov	r1, r3
 801dd3a:	f04f 0c0a 	mov.w	ip, #10
 801dd3e:	4620      	mov	r0, r4
 801dd40:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dd44:	3a30      	subs	r2, #48	@ 0x30
 801dd46:	2a09      	cmp	r2, #9
 801dd48:	d903      	bls.n	801dd52 <_svfiprintf_r+0x1a6>
 801dd4a:	2b00      	cmp	r3, #0
 801dd4c:	d0c6      	beq.n	801dcdc <_svfiprintf_r+0x130>
 801dd4e:	9105      	str	r1, [sp, #20]
 801dd50:	e7c4      	b.n	801dcdc <_svfiprintf_r+0x130>
 801dd52:	fb0c 2101 	mla	r1, ip, r1, r2
 801dd56:	4604      	mov	r4, r0
 801dd58:	2301      	movs	r3, #1
 801dd5a:	e7f0      	b.n	801dd3e <_svfiprintf_r+0x192>
 801dd5c:	ab03      	add	r3, sp, #12
 801dd5e:	9300      	str	r3, [sp, #0]
 801dd60:	462a      	mov	r2, r5
 801dd62:	4b0e      	ldr	r3, [pc, #56]	@ (801dd9c <_svfiprintf_r+0x1f0>)
 801dd64:	a904      	add	r1, sp, #16
 801dd66:	4638      	mov	r0, r7
 801dd68:	f3af 8000 	nop.w
 801dd6c:	1c42      	adds	r2, r0, #1
 801dd6e:	4606      	mov	r6, r0
 801dd70:	d1d6      	bne.n	801dd20 <_svfiprintf_r+0x174>
 801dd72:	89ab      	ldrh	r3, [r5, #12]
 801dd74:	065b      	lsls	r3, r3, #25
 801dd76:	f53f af2d 	bmi.w	801dbd4 <_svfiprintf_r+0x28>
 801dd7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dd7c:	e72c      	b.n	801dbd8 <_svfiprintf_r+0x2c>
 801dd7e:	ab03      	add	r3, sp, #12
 801dd80:	9300      	str	r3, [sp, #0]
 801dd82:	462a      	mov	r2, r5
 801dd84:	4b05      	ldr	r3, [pc, #20]	@ (801dd9c <_svfiprintf_r+0x1f0>)
 801dd86:	a904      	add	r1, sp, #16
 801dd88:	4638      	mov	r0, r7
 801dd8a:	f000 f9bb 	bl	801e104 <_printf_i>
 801dd8e:	e7ed      	b.n	801dd6c <_svfiprintf_r+0x1c0>
 801dd90:	08021bf4 	.word	0x08021bf4
 801dd94:	08021bfe 	.word	0x08021bfe
 801dd98:	00000000 	.word	0x00000000
 801dd9c:	0801daf5 	.word	0x0801daf5
 801dda0:	08021bfa 	.word	0x08021bfa

0801dda4 <__sfputc_r>:
 801dda4:	6893      	ldr	r3, [r2, #8]
 801dda6:	3b01      	subs	r3, #1
 801dda8:	2b00      	cmp	r3, #0
 801ddaa:	b410      	push	{r4}
 801ddac:	6093      	str	r3, [r2, #8]
 801ddae:	da08      	bge.n	801ddc2 <__sfputc_r+0x1e>
 801ddb0:	6994      	ldr	r4, [r2, #24]
 801ddb2:	42a3      	cmp	r3, r4
 801ddb4:	db01      	blt.n	801ddba <__sfputc_r+0x16>
 801ddb6:	290a      	cmp	r1, #10
 801ddb8:	d103      	bne.n	801ddc2 <__sfputc_r+0x1e>
 801ddba:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ddbe:	f7ff bc75 	b.w	801d6ac <__swbuf_r>
 801ddc2:	6813      	ldr	r3, [r2, #0]
 801ddc4:	1c58      	adds	r0, r3, #1
 801ddc6:	6010      	str	r0, [r2, #0]
 801ddc8:	7019      	strb	r1, [r3, #0]
 801ddca:	4608      	mov	r0, r1
 801ddcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ddd0:	4770      	bx	lr

0801ddd2 <__sfputs_r>:
 801ddd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ddd4:	4606      	mov	r6, r0
 801ddd6:	460f      	mov	r7, r1
 801ddd8:	4614      	mov	r4, r2
 801ddda:	18d5      	adds	r5, r2, r3
 801dddc:	42ac      	cmp	r4, r5
 801ddde:	d101      	bne.n	801dde4 <__sfputs_r+0x12>
 801dde0:	2000      	movs	r0, #0
 801dde2:	e007      	b.n	801ddf4 <__sfputs_r+0x22>
 801dde4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dde8:	463a      	mov	r2, r7
 801ddea:	4630      	mov	r0, r6
 801ddec:	f7ff ffda 	bl	801dda4 <__sfputc_r>
 801ddf0:	1c43      	adds	r3, r0, #1
 801ddf2:	d1f3      	bne.n	801dddc <__sfputs_r+0xa>
 801ddf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ddf8 <_vfiprintf_r>:
 801ddf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddfc:	460d      	mov	r5, r1
 801ddfe:	b09d      	sub	sp, #116	@ 0x74
 801de00:	4614      	mov	r4, r2
 801de02:	4698      	mov	r8, r3
 801de04:	4606      	mov	r6, r0
 801de06:	b118      	cbz	r0, 801de10 <_vfiprintf_r+0x18>
 801de08:	6a03      	ldr	r3, [r0, #32]
 801de0a:	b90b      	cbnz	r3, 801de10 <_vfiprintf_r+0x18>
 801de0c:	f7ff fafc 	bl	801d408 <__sinit>
 801de10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801de12:	07d9      	lsls	r1, r3, #31
 801de14:	d405      	bmi.n	801de22 <_vfiprintf_r+0x2a>
 801de16:	89ab      	ldrh	r3, [r5, #12]
 801de18:	059a      	lsls	r2, r3, #22
 801de1a:	d402      	bmi.n	801de22 <_vfiprintf_r+0x2a>
 801de1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801de1e:	f7ff fdd4 	bl	801d9ca <__retarget_lock_acquire_recursive>
 801de22:	89ab      	ldrh	r3, [r5, #12]
 801de24:	071b      	lsls	r3, r3, #28
 801de26:	d501      	bpl.n	801de2c <_vfiprintf_r+0x34>
 801de28:	692b      	ldr	r3, [r5, #16]
 801de2a:	b99b      	cbnz	r3, 801de54 <_vfiprintf_r+0x5c>
 801de2c:	4629      	mov	r1, r5
 801de2e:	4630      	mov	r0, r6
 801de30:	f7ff fc7a 	bl	801d728 <__swsetup_r>
 801de34:	b170      	cbz	r0, 801de54 <_vfiprintf_r+0x5c>
 801de36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801de38:	07dc      	lsls	r4, r3, #31
 801de3a:	d504      	bpl.n	801de46 <_vfiprintf_r+0x4e>
 801de3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801de40:	b01d      	add	sp, #116	@ 0x74
 801de42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de46:	89ab      	ldrh	r3, [r5, #12]
 801de48:	0598      	lsls	r0, r3, #22
 801de4a:	d4f7      	bmi.n	801de3c <_vfiprintf_r+0x44>
 801de4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801de4e:	f7ff fdbd 	bl	801d9cc <__retarget_lock_release_recursive>
 801de52:	e7f3      	b.n	801de3c <_vfiprintf_r+0x44>
 801de54:	2300      	movs	r3, #0
 801de56:	9309      	str	r3, [sp, #36]	@ 0x24
 801de58:	2320      	movs	r3, #32
 801de5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801de5e:	f8cd 800c 	str.w	r8, [sp, #12]
 801de62:	2330      	movs	r3, #48	@ 0x30
 801de64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e014 <_vfiprintf_r+0x21c>
 801de68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801de6c:	f04f 0901 	mov.w	r9, #1
 801de70:	4623      	mov	r3, r4
 801de72:	469a      	mov	sl, r3
 801de74:	f813 2b01 	ldrb.w	r2, [r3], #1
 801de78:	b10a      	cbz	r2, 801de7e <_vfiprintf_r+0x86>
 801de7a:	2a25      	cmp	r2, #37	@ 0x25
 801de7c:	d1f9      	bne.n	801de72 <_vfiprintf_r+0x7a>
 801de7e:	ebba 0b04 	subs.w	fp, sl, r4
 801de82:	d00b      	beq.n	801de9c <_vfiprintf_r+0xa4>
 801de84:	465b      	mov	r3, fp
 801de86:	4622      	mov	r2, r4
 801de88:	4629      	mov	r1, r5
 801de8a:	4630      	mov	r0, r6
 801de8c:	f7ff ffa1 	bl	801ddd2 <__sfputs_r>
 801de90:	3001      	adds	r0, #1
 801de92:	f000 80a7 	beq.w	801dfe4 <_vfiprintf_r+0x1ec>
 801de96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801de98:	445a      	add	r2, fp
 801de9a:	9209      	str	r2, [sp, #36]	@ 0x24
 801de9c:	f89a 3000 	ldrb.w	r3, [sl]
 801dea0:	2b00      	cmp	r3, #0
 801dea2:	f000 809f 	beq.w	801dfe4 <_vfiprintf_r+0x1ec>
 801dea6:	2300      	movs	r3, #0
 801dea8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801deac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801deb0:	f10a 0a01 	add.w	sl, sl, #1
 801deb4:	9304      	str	r3, [sp, #16]
 801deb6:	9307      	str	r3, [sp, #28]
 801deb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801debc:	931a      	str	r3, [sp, #104]	@ 0x68
 801debe:	4654      	mov	r4, sl
 801dec0:	2205      	movs	r2, #5
 801dec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dec6:	4853      	ldr	r0, [pc, #332]	@ (801e014 <_vfiprintf_r+0x21c>)
 801dec8:	f7e2 f9ba 	bl	8000240 <memchr>
 801decc:	9a04      	ldr	r2, [sp, #16]
 801dece:	b9d8      	cbnz	r0, 801df08 <_vfiprintf_r+0x110>
 801ded0:	06d1      	lsls	r1, r2, #27
 801ded2:	bf44      	itt	mi
 801ded4:	2320      	movmi	r3, #32
 801ded6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801deda:	0713      	lsls	r3, r2, #28
 801dedc:	bf44      	itt	mi
 801dede:	232b      	movmi	r3, #43	@ 0x2b
 801dee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801dee4:	f89a 3000 	ldrb.w	r3, [sl]
 801dee8:	2b2a      	cmp	r3, #42	@ 0x2a
 801deea:	d015      	beq.n	801df18 <_vfiprintf_r+0x120>
 801deec:	9a07      	ldr	r2, [sp, #28]
 801deee:	4654      	mov	r4, sl
 801def0:	2000      	movs	r0, #0
 801def2:	f04f 0c0a 	mov.w	ip, #10
 801def6:	4621      	mov	r1, r4
 801def8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801defc:	3b30      	subs	r3, #48	@ 0x30
 801defe:	2b09      	cmp	r3, #9
 801df00:	d94b      	bls.n	801df9a <_vfiprintf_r+0x1a2>
 801df02:	b1b0      	cbz	r0, 801df32 <_vfiprintf_r+0x13a>
 801df04:	9207      	str	r2, [sp, #28]
 801df06:	e014      	b.n	801df32 <_vfiprintf_r+0x13a>
 801df08:	eba0 0308 	sub.w	r3, r0, r8
 801df0c:	fa09 f303 	lsl.w	r3, r9, r3
 801df10:	4313      	orrs	r3, r2
 801df12:	9304      	str	r3, [sp, #16]
 801df14:	46a2      	mov	sl, r4
 801df16:	e7d2      	b.n	801debe <_vfiprintf_r+0xc6>
 801df18:	9b03      	ldr	r3, [sp, #12]
 801df1a:	1d19      	adds	r1, r3, #4
 801df1c:	681b      	ldr	r3, [r3, #0]
 801df1e:	9103      	str	r1, [sp, #12]
 801df20:	2b00      	cmp	r3, #0
 801df22:	bfbb      	ittet	lt
 801df24:	425b      	neglt	r3, r3
 801df26:	f042 0202 	orrlt.w	r2, r2, #2
 801df2a:	9307      	strge	r3, [sp, #28]
 801df2c:	9307      	strlt	r3, [sp, #28]
 801df2e:	bfb8      	it	lt
 801df30:	9204      	strlt	r2, [sp, #16]
 801df32:	7823      	ldrb	r3, [r4, #0]
 801df34:	2b2e      	cmp	r3, #46	@ 0x2e
 801df36:	d10a      	bne.n	801df4e <_vfiprintf_r+0x156>
 801df38:	7863      	ldrb	r3, [r4, #1]
 801df3a:	2b2a      	cmp	r3, #42	@ 0x2a
 801df3c:	d132      	bne.n	801dfa4 <_vfiprintf_r+0x1ac>
 801df3e:	9b03      	ldr	r3, [sp, #12]
 801df40:	1d1a      	adds	r2, r3, #4
 801df42:	681b      	ldr	r3, [r3, #0]
 801df44:	9203      	str	r2, [sp, #12]
 801df46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801df4a:	3402      	adds	r4, #2
 801df4c:	9305      	str	r3, [sp, #20]
 801df4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801e024 <_vfiprintf_r+0x22c>
 801df52:	7821      	ldrb	r1, [r4, #0]
 801df54:	2203      	movs	r2, #3
 801df56:	4650      	mov	r0, sl
 801df58:	f7e2 f972 	bl	8000240 <memchr>
 801df5c:	b138      	cbz	r0, 801df6e <_vfiprintf_r+0x176>
 801df5e:	9b04      	ldr	r3, [sp, #16]
 801df60:	eba0 000a 	sub.w	r0, r0, sl
 801df64:	2240      	movs	r2, #64	@ 0x40
 801df66:	4082      	lsls	r2, r0
 801df68:	4313      	orrs	r3, r2
 801df6a:	3401      	adds	r4, #1
 801df6c:	9304      	str	r3, [sp, #16]
 801df6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801df72:	4829      	ldr	r0, [pc, #164]	@ (801e018 <_vfiprintf_r+0x220>)
 801df74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801df78:	2206      	movs	r2, #6
 801df7a:	f7e2 f961 	bl	8000240 <memchr>
 801df7e:	2800      	cmp	r0, #0
 801df80:	d03f      	beq.n	801e002 <_vfiprintf_r+0x20a>
 801df82:	4b26      	ldr	r3, [pc, #152]	@ (801e01c <_vfiprintf_r+0x224>)
 801df84:	bb1b      	cbnz	r3, 801dfce <_vfiprintf_r+0x1d6>
 801df86:	9b03      	ldr	r3, [sp, #12]
 801df88:	3307      	adds	r3, #7
 801df8a:	f023 0307 	bic.w	r3, r3, #7
 801df8e:	3308      	adds	r3, #8
 801df90:	9303      	str	r3, [sp, #12]
 801df92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df94:	443b      	add	r3, r7
 801df96:	9309      	str	r3, [sp, #36]	@ 0x24
 801df98:	e76a      	b.n	801de70 <_vfiprintf_r+0x78>
 801df9a:	fb0c 3202 	mla	r2, ip, r2, r3
 801df9e:	460c      	mov	r4, r1
 801dfa0:	2001      	movs	r0, #1
 801dfa2:	e7a8      	b.n	801def6 <_vfiprintf_r+0xfe>
 801dfa4:	2300      	movs	r3, #0
 801dfa6:	3401      	adds	r4, #1
 801dfa8:	9305      	str	r3, [sp, #20]
 801dfaa:	4619      	mov	r1, r3
 801dfac:	f04f 0c0a 	mov.w	ip, #10
 801dfb0:	4620      	mov	r0, r4
 801dfb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dfb6:	3a30      	subs	r2, #48	@ 0x30
 801dfb8:	2a09      	cmp	r2, #9
 801dfba:	d903      	bls.n	801dfc4 <_vfiprintf_r+0x1cc>
 801dfbc:	2b00      	cmp	r3, #0
 801dfbe:	d0c6      	beq.n	801df4e <_vfiprintf_r+0x156>
 801dfc0:	9105      	str	r1, [sp, #20]
 801dfc2:	e7c4      	b.n	801df4e <_vfiprintf_r+0x156>
 801dfc4:	fb0c 2101 	mla	r1, ip, r1, r2
 801dfc8:	4604      	mov	r4, r0
 801dfca:	2301      	movs	r3, #1
 801dfcc:	e7f0      	b.n	801dfb0 <_vfiprintf_r+0x1b8>
 801dfce:	ab03      	add	r3, sp, #12
 801dfd0:	9300      	str	r3, [sp, #0]
 801dfd2:	462a      	mov	r2, r5
 801dfd4:	4b12      	ldr	r3, [pc, #72]	@ (801e020 <_vfiprintf_r+0x228>)
 801dfd6:	a904      	add	r1, sp, #16
 801dfd8:	4630      	mov	r0, r6
 801dfda:	f3af 8000 	nop.w
 801dfde:	4607      	mov	r7, r0
 801dfe0:	1c78      	adds	r0, r7, #1
 801dfe2:	d1d6      	bne.n	801df92 <_vfiprintf_r+0x19a>
 801dfe4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801dfe6:	07d9      	lsls	r1, r3, #31
 801dfe8:	d405      	bmi.n	801dff6 <_vfiprintf_r+0x1fe>
 801dfea:	89ab      	ldrh	r3, [r5, #12]
 801dfec:	059a      	lsls	r2, r3, #22
 801dfee:	d402      	bmi.n	801dff6 <_vfiprintf_r+0x1fe>
 801dff0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801dff2:	f7ff fceb 	bl	801d9cc <__retarget_lock_release_recursive>
 801dff6:	89ab      	ldrh	r3, [r5, #12]
 801dff8:	065b      	lsls	r3, r3, #25
 801dffa:	f53f af1f 	bmi.w	801de3c <_vfiprintf_r+0x44>
 801dffe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e000:	e71e      	b.n	801de40 <_vfiprintf_r+0x48>
 801e002:	ab03      	add	r3, sp, #12
 801e004:	9300      	str	r3, [sp, #0]
 801e006:	462a      	mov	r2, r5
 801e008:	4b05      	ldr	r3, [pc, #20]	@ (801e020 <_vfiprintf_r+0x228>)
 801e00a:	a904      	add	r1, sp, #16
 801e00c:	4630      	mov	r0, r6
 801e00e:	f000 f879 	bl	801e104 <_printf_i>
 801e012:	e7e4      	b.n	801dfde <_vfiprintf_r+0x1e6>
 801e014:	08021bf4 	.word	0x08021bf4
 801e018:	08021bfe 	.word	0x08021bfe
 801e01c:	00000000 	.word	0x00000000
 801e020:	0801ddd3 	.word	0x0801ddd3
 801e024:	08021bfa 	.word	0x08021bfa

0801e028 <_printf_common>:
 801e028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e02c:	4616      	mov	r6, r2
 801e02e:	4698      	mov	r8, r3
 801e030:	688a      	ldr	r2, [r1, #8]
 801e032:	690b      	ldr	r3, [r1, #16]
 801e034:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e038:	4293      	cmp	r3, r2
 801e03a:	bfb8      	it	lt
 801e03c:	4613      	movlt	r3, r2
 801e03e:	6033      	str	r3, [r6, #0]
 801e040:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801e044:	4607      	mov	r7, r0
 801e046:	460c      	mov	r4, r1
 801e048:	b10a      	cbz	r2, 801e04e <_printf_common+0x26>
 801e04a:	3301      	adds	r3, #1
 801e04c:	6033      	str	r3, [r6, #0]
 801e04e:	6823      	ldr	r3, [r4, #0]
 801e050:	0699      	lsls	r1, r3, #26
 801e052:	bf42      	ittt	mi
 801e054:	6833      	ldrmi	r3, [r6, #0]
 801e056:	3302      	addmi	r3, #2
 801e058:	6033      	strmi	r3, [r6, #0]
 801e05a:	6825      	ldr	r5, [r4, #0]
 801e05c:	f015 0506 	ands.w	r5, r5, #6
 801e060:	d106      	bne.n	801e070 <_printf_common+0x48>
 801e062:	f104 0a19 	add.w	sl, r4, #25
 801e066:	68e3      	ldr	r3, [r4, #12]
 801e068:	6832      	ldr	r2, [r6, #0]
 801e06a:	1a9b      	subs	r3, r3, r2
 801e06c:	42ab      	cmp	r3, r5
 801e06e:	dc26      	bgt.n	801e0be <_printf_common+0x96>
 801e070:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801e074:	6822      	ldr	r2, [r4, #0]
 801e076:	3b00      	subs	r3, #0
 801e078:	bf18      	it	ne
 801e07a:	2301      	movne	r3, #1
 801e07c:	0692      	lsls	r2, r2, #26
 801e07e:	d42b      	bmi.n	801e0d8 <_printf_common+0xb0>
 801e080:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801e084:	4641      	mov	r1, r8
 801e086:	4638      	mov	r0, r7
 801e088:	47c8      	blx	r9
 801e08a:	3001      	adds	r0, #1
 801e08c:	d01e      	beq.n	801e0cc <_printf_common+0xa4>
 801e08e:	6823      	ldr	r3, [r4, #0]
 801e090:	6922      	ldr	r2, [r4, #16]
 801e092:	f003 0306 	and.w	r3, r3, #6
 801e096:	2b04      	cmp	r3, #4
 801e098:	bf02      	ittt	eq
 801e09a:	68e5      	ldreq	r5, [r4, #12]
 801e09c:	6833      	ldreq	r3, [r6, #0]
 801e09e:	1aed      	subeq	r5, r5, r3
 801e0a0:	68a3      	ldr	r3, [r4, #8]
 801e0a2:	bf0c      	ite	eq
 801e0a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e0a8:	2500      	movne	r5, #0
 801e0aa:	4293      	cmp	r3, r2
 801e0ac:	bfc4      	itt	gt
 801e0ae:	1a9b      	subgt	r3, r3, r2
 801e0b0:	18ed      	addgt	r5, r5, r3
 801e0b2:	2600      	movs	r6, #0
 801e0b4:	341a      	adds	r4, #26
 801e0b6:	42b5      	cmp	r5, r6
 801e0b8:	d11a      	bne.n	801e0f0 <_printf_common+0xc8>
 801e0ba:	2000      	movs	r0, #0
 801e0bc:	e008      	b.n	801e0d0 <_printf_common+0xa8>
 801e0be:	2301      	movs	r3, #1
 801e0c0:	4652      	mov	r2, sl
 801e0c2:	4641      	mov	r1, r8
 801e0c4:	4638      	mov	r0, r7
 801e0c6:	47c8      	blx	r9
 801e0c8:	3001      	adds	r0, #1
 801e0ca:	d103      	bne.n	801e0d4 <_printf_common+0xac>
 801e0cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e0d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e0d4:	3501      	adds	r5, #1
 801e0d6:	e7c6      	b.n	801e066 <_printf_common+0x3e>
 801e0d8:	18e1      	adds	r1, r4, r3
 801e0da:	1c5a      	adds	r2, r3, #1
 801e0dc:	2030      	movs	r0, #48	@ 0x30
 801e0de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801e0e2:	4422      	add	r2, r4
 801e0e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801e0e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801e0ec:	3302      	adds	r3, #2
 801e0ee:	e7c7      	b.n	801e080 <_printf_common+0x58>
 801e0f0:	2301      	movs	r3, #1
 801e0f2:	4622      	mov	r2, r4
 801e0f4:	4641      	mov	r1, r8
 801e0f6:	4638      	mov	r0, r7
 801e0f8:	47c8      	blx	r9
 801e0fa:	3001      	adds	r0, #1
 801e0fc:	d0e6      	beq.n	801e0cc <_printf_common+0xa4>
 801e0fe:	3601      	adds	r6, #1
 801e100:	e7d9      	b.n	801e0b6 <_printf_common+0x8e>
	...

0801e104 <_printf_i>:
 801e104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e108:	7e0f      	ldrb	r7, [r1, #24]
 801e10a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e10c:	2f78      	cmp	r7, #120	@ 0x78
 801e10e:	4691      	mov	r9, r2
 801e110:	4680      	mov	r8, r0
 801e112:	460c      	mov	r4, r1
 801e114:	469a      	mov	sl, r3
 801e116:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801e11a:	d807      	bhi.n	801e12c <_printf_i+0x28>
 801e11c:	2f62      	cmp	r7, #98	@ 0x62
 801e11e:	d80a      	bhi.n	801e136 <_printf_i+0x32>
 801e120:	2f00      	cmp	r7, #0
 801e122:	f000 80d2 	beq.w	801e2ca <_printf_i+0x1c6>
 801e126:	2f58      	cmp	r7, #88	@ 0x58
 801e128:	f000 80b9 	beq.w	801e29e <_printf_i+0x19a>
 801e12c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e130:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801e134:	e03a      	b.n	801e1ac <_printf_i+0xa8>
 801e136:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801e13a:	2b15      	cmp	r3, #21
 801e13c:	d8f6      	bhi.n	801e12c <_printf_i+0x28>
 801e13e:	a101      	add	r1, pc, #4	@ (adr r1, 801e144 <_printf_i+0x40>)
 801e140:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e144:	0801e19d 	.word	0x0801e19d
 801e148:	0801e1b1 	.word	0x0801e1b1
 801e14c:	0801e12d 	.word	0x0801e12d
 801e150:	0801e12d 	.word	0x0801e12d
 801e154:	0801e12d 	.word	0x0801e12d
 801e158:	0801e12d 	.word	0x0801e12d
 801e15c:	0801e1b1 	.word	0x0801e1b1
 801e160:	0801e12d 	.word	0x0801e12d
 801e164:	0801e12d 	.word	0x0801e12d
 801e168:	0801e12d 	.word	0x0801e12d
 801e16c:	0801e12d 	.word	0x0801e12d
 801e170:	0801e2b1 	.word	0x0801e2b1
 801e174:	0801e1db 	.word	0x0801e1db
 801e178:	0801e26b 	.word	0x0801e26b
 801e17c:	0801e12d 	.word	0x0801e12d
 801e180:	0801e12d 	.word	0x0801e12d
 801e184:	0801e2d3 	.word	0x0801e2d3
 801e188:	0801e12d 	.word	0x0801e12d
 801e18c:	0801e1db 	.word	0x0801e1db
 801e190:	0801e12d 	.word	0x0801e12d
 801e194:	0801e12d 	.word	0x0801e12d
 801e198:	0801e273 	.word	0x0801e273
 801e19c:	6833      	ldr	r3, [r6, #0]
 801e19e:	1d1a      	adds	r2, r3, #4
 801e1a0:	681b      	ldr	r3, [r3, #0]
 801e1a2:	6032      	str	r2, [r6, #0]
 801e1a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e1a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801e1ac:	2301      	movs	r3, #1
 801e1ae:	e09d      	b.n	801e2ec <_printf_i+0x1e8>
 801e1b0:	6833      	ldr	r3, [r6, #0]
 801e1b2:	6820      	ldr	r0, [r4, #0]
 801e1b4:	1d19      	adds	r1, r3, #4
 801e1b6:	6031      	str	r1, [r6, #0]
 801e1b8:	0606      	lsls	r6, r0, #24
 801e1ba:	d501      	bpl.n	801e1c0 <_printf_i+0xbc>
 801e1bc:	681d      	ldr	r5, [r3, #0]
 801e1be:	e003      	b.n	801e1c8 <_printf_i+0xc4>
 801e1c0:	0645      	lsls	r5, r0, #25
 801e1c2:	d5fb      	bpl.n	801e1bc <_printf_i+0xb8>
 801e1c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e1c8:	2d00      	cmp	r5, #0
 801e1ca:	da03      	bge.n	801e1d4 <_printf_i+0xd0>
 801e1cc:	232d      	movs	r3, #45	@ 0x2d
 801e1ce:	426d      	negs	r5, r5
 801e1d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e1d4:	4859      	ldr	r0, [pc, #356]	@ (801e33c <_printf_i+0x238>)
 801e1d6:	230a      	movs	r3, #10
 801e1d8:	e011      	b.n	801e1fe <_printf_i+0xfa>
 801e1da:	6821      	ldr	r1, [r4, #0]
 801e1dc:	6833      	ldr	r3, [r6, #0]
 801e1de:	0608      	lsls	r0, r1, #24
 801e1e0:	f853 5b04 	ldr.w	r5, [r3], #4
 801e1e4:	d402      	bmi.n	801e1ec <_printf_i+0xe8>
 801e1e6:	0649      	lsls	r1, r1, #25
 801e1e8:	bf48      	it	mi
 801e1ea:	b2ad      	uxthmi	r5, r5
 801e1ec:	2f6f      	cmp	r7, #111	@ 0x6f
 801e1ee:	4853      	ldr	r0, [pc, #332]	@ (801e33c <_printf_i+0x238>)
 801e1f0:	6033      	str	r3, [r6, #0]
 801e1f2:	bf14      	ite	ne
 801e1f4:	230a      	movne	r3, #10
 801e1f6:	2308      	moveq	r3, #8
 801e1f8:	2100      	movs	r1, #0
 801e1fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801e1fe:	6866      	ldr	r6, [r4, #4]
 801e200:	60a6      	str	r6, [r4, #8]
 801e202:	2e00      	cmp	r6, #0
 801e204:	bfa2      	ittt	ge
 801e206:	6821      	ldrge	r1, [r4, #0]
 801e208:	f021 0104 	bicge.w	r1, r1, #4
 801e20c:	6021      	strge	r1, [r4, #0]
 801e20e:	b90d      	cbnz	r5, 801e214 <_printf_i+0x110>
 801e210:	2e00      	cmp	r6, #0
 801e212:	d04b      	beq.n	801e2ac <_printf_i+0x1a8>
 801e214:	4616      	mov	r6, r2
 801e216:	fbb5 f1f3 	udiv	r1, r5, r3
 801e21a:	fb03 5711 	mls	r7, r3, r1, r5
 801e21e:	5dc7      	ldrb	r7, [r0, r7]
 801e220:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e224:	462f      	mov	r7, r5
 801e226:	42bb      	cmp	r3, r7
 801e228:	460d      	mov	r5, r1
 801e22a:	d9f4      	bls.n	801e216 <_printf_i+0x112>
 801e22c:	2b08      	cmp	r3, #8
 801e22e:	d10b      	bne.n	801e248 <_printf_i+0x144>
 801e230:	6823      	ldr	r3, [r4, #0]
 801e232:	07df      	lsls	r7, r3, #31
 801e234:	d508      	bpl.n	801e248 <_printf_i+0x144>
 801e236:	6923      	ldr	r3, [r4, #16]
 801e238:	6861      	ldr	r1, [r4, #4]
 801e23a:	4299      	cmp	r1, r3
 801e23c:	bfde      	ittt	le
 801e23e:	2330      	movle	r3, #48	@ 0x30
 801e240:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e244:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801e248:	1b92      	subs	r2, r2, r6
 801e24a:	6122      	str	r2, [r4, #16]
 801e24c:	f8cd a000 	str.w	sl, [sp]
 801e250:	464b      	mov	r3, r9
 801e252:	aa03      	add	r2, sp, #12
 801e254:	4621      	mov	r1, r4
 801e256:	4640      	mov	r0, r8
 801e258:	f7ff fee6 	bl	801e028 <_printf_common>
 801e25c:	3001      	adds	r0, #1
 801e25e:	d14a      	bne.n	801e2f6 <_printf_i+0x1f2>
 801e260:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e264:	b004      	add	sp, #16
 801e266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e26a:	6823      	ldr	r3, [r4, #0]
 801e26c:	f043 0320 	orr.w	r3, r3, #32
 801e270:	6023      	str	r3, [r4, #0]
 801e272:	4833      	ldr	r0, [pc, #204]	@ (801e340 <_printf_i+0x23c>)
 801e274:	2778      	movs	r7, #120	@ 0x78
 801e276:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801e27a:	6823      	ldr	r3, [r4, #0]
 801e27c:	6831      	ldr	r1, [r6, #0]
 801e27e:	061f      	lsls	r7, r3, #24
 801e280:	f851 5b04 	ldr.w	r5, [r1], #4
 801e284:	d402      	bmi.n	801e28c <_printf_i+0x188>
 801e286:	065f      	lsls	r7, r3, #25
 801e288:	bf48      	it	mi
 801e28a:	b2ad      	uxthmi	r5, r5
 801e28c:	6031      	str	r1, [r6, #0]
 801e28e:	07d9      	lsls	r1, r3, #31
 801e290:	bf44      	itt	mi
 801e292:	f043 0320 	orrmi.w	r3, r3, #32
 801e296:	6023      	strmi	r3, [r4, #0]
 801e298:	b11d      	cbz	r5, 801e2a2 <_printf_i+0x19e>
 801e29a:	2310      	movs	r3, #16
 801e29c:	e7ac      	b.n	801e1f8 <_printf_i+0xf4>
 801e29e:	4827      	ldr	r0, [pc, #156]	@ (801e33c <_printf_i+0x238>)
 801e2a0:	e7e9      	b.n	801e276 <_printf_i+0x172>
 801e2a2:	6823      	ldr	r3, [r4, #0]
 801e2a4:	f023 0320 	bic.w	r3, r3, #32
 801e2a8:	6023      	str	r3, [r4, #0]
 801e2aa:	e7f6      	b.n	801e29a <_printf_i+0x196>
 801e2ac:	4616      	mov	r6, r2
 801e2ae:	e7bd      	b.n	801e22c <_printf_i+0x128>
 801e2b0:	6833      	ldr	r3, [r6, #0]
 801e2b2:	6825      	ldr	r5, [r4, #0]
 801e2b4:	6961      	ldr	r1, [r4, #20]
 801e2b6:	1d18      	adds	r0, r3, #4
 801e2b8:	6030      	str	r0, [r6, #0]
 801e2ba:	062e      	lsls	r6, r5, #24
 801e2bc:	681b      	ldr	r3, [r3, #0]
 801e2be:	d501      	bpl.n	801e2c4 <_printf_i+0x1c0>
 801e2c0:	6019      	str	r1, [r3, #0]
 801e2c2:	e002      	b.n	801e2ca <_printf_i+0x1c6>
 801e2c4:	0668      	lsls	r0, r5, #25
 801e2c6:	d5fb      	bpl.n	801e2c0 <_printf_i+0x1bc>
 801e2c8:	8019      	strh	r1, [r3, #0]
 801e2ca:	2300      	movs	r3, #0
 801e2cc:	6123      	str	r3, [r4, #16]
 801e2ce:	4616      	mov	r6, r2
 801e2d0:	e7bc      	b.n	801e24c <_printf_i+0x148>
 801e2d2:	6833      	ldr	r3, [r6, #0]
 801e2d4:	1d1a      	adds	r2, r3, #4
 801e2d6:	6032      	str	r2, [r6, #0]
 801e2d8:	681e      	ldr	r6, [r3, #0]
 801e2da:	6862      	ldr	r2, [r4, #4]
 801e2dc:	2100      	movs	r1, #0
 801e2de:	4630      	mov	r0, r6
 801e2e0:	f7e1 ffae 	bl	8000240 <memchr>
 801e2e4:	b108      	cbz	r0, 801e2ea <_printf_i+0x1e6>
 801e2e6:	1b80      	subs	r0, r0, r6
 801e2e8:	6060      	str	r0, [r4, #4]
 801e2ea:	6863      	ldr	r3, [r4, #4]
 801e2ec:	6123      	str	r3, [r4, #16]
 801e2ee:	2300      	movs	r3, #0
 801e2f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e2f4:	e7aa      	b.n	801e24c <_printf_i+0x148>
 801e2f6:	6923      	ldr	r3, [r4, #16]
 801e2f8:	4632      	mov	r2, r6
 801e2fa:	4649      	mov	r1, r9
 801e2fc:	4640      	mov	r0, r8
 801e2fe:	47d0      	blx	sl
 801e300:	3001      	adds	r0, #1
 801e302:	d0ad      	beq.n	801e260 <_printf_i+0x15c>
 801e304:	6823      	ldr	r3, [r4, #0]
 801e306:	079b      	lsls	r3, r3, #30
 801e308:	d413      	bmi.n	801e332 <_printf_i+0x22e>
 801e30a:	68e0      	ldr	r0, [r4, #12]
 801e30c:	9b03      	ldr	r3, [sp, #12]
 801e30e:	4298      	cmp	r0, r3
 801e310:	bfb8      	it	lt
 801e312:	4618      	movlt	r0, r3
 801e314:	e7a6      	b.n	801e264 <_printf_i+0x160>
 801e316:	2301      	movs	r3, #1
 801e318:	4632      	mov	r2, r6
 801e31a:	4649      	mov	r1, r9
 801e31c:	4640      	mov	r0, r8
 801e31e:	47d0      	blx	sl
 801e320:	3001      	adds	r0, #1
 801e322:	d09d      	beq.n	801e260 <_printf_i+0x15c>
 801e324:	3501      	adds	r5, #1
 801e326:	68e3      	ldr	r3, [r4, #12]
 801e328:	9903      	ldr	r1, [sp, #12]
 801e32a:	1a5b      	subs	r3, r3, r1
 801e32c:	42ab      	cmp	r3, r5
 801e32e:	dcf2      	bgt.n	801e316 <_printf_i+0x212>
 801e330:	e7eb      	b.n	801e30a <_printf_i+0x206>
 801e332:	2500      	movs	r5, #0
 801e334:	f104 0619 	add.w	r6, r4, #25
 801e338:	e7f5      	b.n	801e326 <_printf_i+0x222>
 801e33a:	bf00      	nop
 801e33c:	08021c05 	.word	0x08021c05
 801e340:	08021c16 	.word	0x08021c16

0801e344 <__sflush_r>:
 801e344:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e34c:	0716      	lsls	r6, r2, #28
 801e34e:	4605      	mov	r5, r0
 801e350:	460c      	mov	r4, r1
 801e352:	d454      	bmi.n	801e3fe <__sflush_r+0xba>
 801e354:	684b      	ldr	r3, [r1, #4]
 801e356:	2b00      	cmp	r3, #0
 801e358:	dc02      	bgt.n	801e360 <__sflush_r+0x1c>
 801e35a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e35c:	2b00      	cmp	r3, #0
 801e35e:	dd48      	ble.n	801e3f2 <__sflush_r+0xae>
 801e360:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e362:	2e00      	cmp	r6, #0
 801e364:	d045      	beq.n	801e3f2 <__sflush_r+0xae>
 801e366:	2300      	movs	r3, #0
 801e368:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e36c:	682f      	ldr	r7, [r5, #0]
 801e36e:	6a21      	ldr	r1, [r4, #32]
 801e370:	602b      	str	r3, [r5, #0]
 801e372:	d030      	beq.n	801e3d6 <__sflush_r+0x92>
 801e374:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e376:	89a3      	ldrh	r3, [r4, #12]
 801e378:	0759      	lsls	r1, r3, #29
 801e37a:	d505      	bpl.n	801e388 <__sflush_r+0x44>
 801e37c:	6863      	ldr	r3, [r4, #4]
 801e37e:	1ad2      	subs	r2, r2, r3
 801e380:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e382:	b10b      	cbz	r3, 801e388 <__sflush_r+0x44>
 801e384:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e386:	1ad2      	subs	r2, r2, r3
 801e388:	2300      	movs	r3, #0
 801e38a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e38c:	6a21      	ldr	r1, [r4, #32]
 801e38e:	4628      	mov	r0, r5
 801e390:	47b0      	blx	r6
 801e392:	1c43      	adds	r3, r0, #1
 801e394:	89a3      	ldrh	r3, [r4, #12]
 801e396:	d106      	bne.n	801e3a6 <__sflush_r+0x62>
 801e398:	6829      	ldr	r1, [r5, #0]
 801e39a:	291d      	cmp	r1, #29
 801e39c:	d82b      	bhi.n	801e3f6 <__sflush_r+0xb2>
 801e39e:	4a2a      	ldr	r2, [pc, #168]	@ (801e448 <__sflush_r+0x104>)
 801e3a0:	410a      	asrs	r2, r1
 801e3a2:	07d6      	lsls	r6, r2, #31
 801e3a4:	d427      	bmi.n	801e3f6 <__sflush_r+0xb2>
 801e3a6:	2200      	movs	r2, #0
 801e3a8:	6062      	str	r2, [r4, #4]
 801e3aa:	04d9      	lsls	r1, r3, #19
 801e3ac:	6922      	ldr	r2, [r4, #16]
 801e3ae:	6022      	str	r2, [r4, #0]
 801e3b0:	d504      	bpl.n	801e3bc <__sflush_r+0x78>
 801e3b2:	1c42      	adds	r2, r0, #1
 801e3b4:	d101      	bne.n	801e3ba <__sflush_r+0x76>
 801e3b6:	682b      	ldr	r3, [r5, #0]
 801e3b8:	b903      	cbnz	r3, 801e3bc <__sflush_r+0x78>
 801e3ba:	6560      	str	r0, [r4, #84]	@ 0x54
 801e3bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e3be:	602f      	str	r7, [r5, #0]
 801e3c0:	b1b9      	cbz	r1, 801e3f2 <__sflush_r+0xae>
 801e3c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e3c6:	4299      	cmp	r1, r3
 801e3c8:	d002      	beq.n	801e3d0 <__sflush_r+0x8c>
 801e3ca:	4628      	mov	r0, r5
 801e3cc:	f7ff fb40 	bl	801da50 <_free_r>
 801e3d0:	2300      	movs	r3, #0
 801e3d2:	6363      	str	r3, [r4, #52]	@ 0x34
 801e3d4:	e00d      	b.n	801e3f2 <__sflush_r+0xae>
 801e3d6:	2301      	movs	r3, #1
 801e3d8:	4628      	mov	r0, r5
 801e3da:	47b0      	blx	r6
 801e3dc:	4602      	mov	r2, r0
 801e3de:	1c50      	adds	r0, r2, #1
 801e3e0:	d1c9      	bne.n	801e376 <__sflush_r+0x32>
 801e3e2:	682b      	ldr	r3, [r5, #0]
 801e3e4:	2b00      	cmp	r3, #0
 801e3e6:	d0c6      	beq.n	801e376 <__sflush_r+0x32>
 801e3e8:	2b1d      	cmp	r3, #29
 801e3ea:	d001      	beq.n	801e3f0 <__sflush_r+0xac>
 801e3ec:	2b16      	cmp	r3, #22
 801e3ee:	d11e      	bne.n	801e42e <__sflush_r+0xea>
 801e3f0:	602f      	str	r7, [r5, #0]
 801e3f2:	2000      	movs	r0, #0
 801e3f4:	e022      	b.n	801e43c <__sflush_r+0xf8>
 801e3f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e3fa:	b21b      	sxth	r3, r3
 801e3fc:	e01b      	b.n	801e436 <__sflush_r+0xf2>
 801e3fe:	690f      	ldr	r7, [r1, #16]
 801e400:	2f00      	cmp	r7, #0
 801e402:	d0f6      	beq.n	801e3f2 <__sflush_r+0xae>
 801e404:	0793      	lsls	r3, r2, #30
 801e406:	680e      	ldr	r6, [r1, #0]
 801e408:	bf08      	it	eq
 801e40a:	694b      	ldreq	r3, [r1, #20]
 801e40c:	600f      	str	r7, [r1, #0]
 801e40e:	bf18      	it	ne
 801e410:	2300      	movne	r3, #0
 801e412:	eba6 0807 	sub.w	r8, r6, r7
 801e416:	608b      	str	r3, [r1, #8]
 801e418:	f1b8 0f00 	cmp.w	r8, #0
 801e41c:	dde9      	ble.n	801e3f2 <__sflush_r+0xae>
 801e41e:	6a21      	ldr	r1, [r4, #32]
 801e420:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e422:	4643      	mov	r3, r8
 801e424:	463a      	mov	r2, r7
 801e426:	4628      	mov	r0, r5
 801e428:	47b0      	blx	r6
 801e42a:	2800      	cmp	r0, #0
 801e42c:	dc08      	bgt.n	801e440 <__sflush_r+0xfc>
 801e42e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e436:	81a3      	strh	r3, [r4, #12]
 801e438:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e440:	4407      	add	r7, r0
 801e442:	eba8 0800 	sub.w	r8, r8, r0
 801e446:	e7e7      	b.n	801e418 <__sflush_r+0xd4>
 801e448:	dfbffffe 	.word	0xdfbffffe

0801e44c <_fflush_r>:
 801e44c:	b538      	push	{r3, r4, r5, lr}
 801e44e:	690b      	ldr	r3, [r1, #16]
 801e450:	4605      	mov	r5, r0
 801e452:	460c      	mov	r4, r1
 801e454:	b913      	cbnz	r3, 801e45c <_fflush_r+0x10>
 801e456:	2500      	movs	r5, #0
 801e458:	4628      	mov	r0, r5
 801e45a:	bd38      	pop	{r3, r4, r5, pc}
 801e45c:	b118      	cbz	r0, 801e466 <_fflush_r+0x1a>
 801e45e:	6a03      	ldr	r3, [r0, #32]
 801e460:	b90b      	cbnz	r3, 801e466 <_fflush_r+0x1a>
 801e462:	f7fe ffd1 	bl	801d408 <__sinit>
 801e466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e46a:	2b00      	cmp	r3, #0
 801e46c:	d0f3      	beq.n	801e456 <_fflush_r+0xa>
 801e46e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e470:	07d0      	lsls	r0, r2, #31
 801e472:	d404      	bmi.n	801e47e <_fflush_r+0x32>
 801e474:	0599      	lsls	r1, r3, #22
 801e476:	d402      	bmi.n	801e47e <_fflush_r+0x32>
 801e478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e47a:	f7ff faa6 	bl	801d9ca <__retarget_lock_acquire_recursive>
 801e47e:	4628      	mov	r0, r5
 801e480:	4621      	mov	r1, r4
 801e482:	f7ff ff5f 	bl	801e344 <__sflush_r>
 801e486:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e488:	07da      	lsls	r2, r3, #31
 801e48a:	4605      	mov	r5, r0
 801e48c:	d4e4      	bmi.n	801e458 <_fflush_r+0xc>
 801e48e:	89a3      	ldrh	r3, [r4, #12]
 801e490:	059b      	lsls	r3, r3, #22
 801e492:	d4e1      	bmi.n	801e458 <_fflush_r+0xc>
 801e494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e496:	f7ff fa99 	bl	801d9cc <__retarget_lock_release_recursive>
 801e49a:	e7dd      	b.n	801e458 <_fflush_r+0xc>

0801e49c <fiprintf>:
 801e49c:	b40e      	push	{r1, r2, r3}
 801e49e:	b503      	push	{r0, r1, lr}
 801e4a0:	4601      	mov	r1, r0
 801e4a2:	ab03      	add	r3, sp, #12
 801e4a4:	4805      	ldr	r0, [pc, #20]	@ (801e4bc <fiprintf+0x20>)
 801e4a6:	f853 2b04 	ldr.w	r2, [r3], #4
 801e4aa:	6800      	ldr	r0, [r0, #0]
 801e4ac:	9301      	str	r3, [sp, #4]
 801e4ae:	f7ff fca3 	bl	801ddf8 <_vfiprintf_r>
 801e4b2:	b002      	add	sp, #8
 801e4b4:	f85d eb04 	ldr.w	lr, [sp], #4
 801e4b8:	b003      	add	sp, #12
 801e4ba:	4770      	bx	lr
 801e4bc:	2000327c 	.word	0x2000327c

0801e4c0 <__swhatbuf_r>:
 801e4c0:	b570      	push	{r4, r5, r6, lr}
 801e4c2:	460c      	mov	r4, r1
 801e4c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e4c8:	2900      	cmp	r1, #0
 801e4ca:	b096      	sub	sp, #88	@ 0x58
 801e4cc:	4615      	mov	r5, r2
 801e4ce:	461e      	mov	r6, r3
 801e4d0:	da0d      	bge.n	801e4ee <__swhatbuf_r+0x2e>
 801e4d2:	89a3      	ldrh	r3, [r4, #12]
 801e4d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801e4d8:	f04f 0100 	mov.w	r1, #0
 801e4dc:	bf14      	ite	ne
 801e4de:	2340      	movne	r3, #64	@ 0x40
 801e4e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801e4e4:	2000      	movs	r0, #0
 801e4e6:	6031      	str	r1, [r6, #0]
 801e4e8:	602b      	str	r3, [r5, #0]
 801e4ea:	b016      	add	sp, #88	@ 0x58
 801e4ec:	bd70      	pop	{r4, r5, r6, pc}
 801e4ee:	466a      	mov	r2, sp
 801e4f0:	f000 f848 	bl	801e584 <_fstat_r>
 801e4f4:	2800      	cmp	r0, #0
 801e4f6:	dbec      	blt.n	801e4d2 <__swhatbuf_r+0x12>
 801e4f8:	9901      	ldr	r1, [sp, #4]
 801e4fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801e4fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801e502:	4259      	negs	r1, r3
 801e504:	4159      	adcs	r1, r3
 801e506:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e50a:	e7eb      	b.n	801e4e4 <__swhatbuf_r+0x24>

0801e50c <__smakebuf_r>:
 801e50c:	898b      	ldrh	r3, [r1, #12]
 801e50e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e510:	079d      	lsls	r5, r3, #30
 801e512:	4606      	mov	r6, r0
 801e514:	460c      	mov	r4, r1
 801e516:	d507      	bpl.n	801e528 <__smakebuf_r+0x1c>
 801e518:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801e51c:	6023      	str	r3, [r4, #0]
 801e51e:	6123      	str	r3, [r4, #16]
 801e520:	2301      	movs	r3, #1
 801e522:	6163      	str	r3, [r4, #20]
 801e524:	b003      	add	sp, #12
 801e526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e528:	ab01      	add	r3, sp, #4
 801e52a:	466a      	mov	r2, sp
 801e52c:	f7ff ffc8 	bl	801e4c0 <__swhatbuf_r>
 801e530:	9f00      	ldr	r7, [sp, #0]
 801e532:	4605      	mov	r5, r0
 801e534:	4639      	mov	r1, r7
 801e536:	4630      	mov	r0, r6
 801e538:	f7fe fd34 	bl	801cfa4 <_malloc_r>
 801e53c:	b948      	cbnz	r0, 801e552 <__smakebuf_r+0x46>
 801e53e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e542:	059a      	lsls	r2, r3, #22
 801e544:	d4ee      	bmi.n	801e524 <__smakebuf_r+0x18>
 801e546:	f023 0303 	bic.w	r3, r3, #3
 801e54a:	f043 0302 	orr.w	r3, r3, #2
 801e54e:	81a3      	strh	r3, [r4, #12]
 801e550:	e7e2      	b.n	801e518 <__smakebuf_r+0xc>
 801e552:	89a3      	ldrh	r3, [r4, #12]
 801e554:	6020      	str	r0, [r4, #0]
 801e556:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e55a:	81a3      	strh	r3, [r4, #12]
 801e55c:	9b01      	ldr	r3, [sp, #4]
 801e55e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801e562:	b15b      	cbz	r3, 801e57c <__smakebuf_r+0x70>
 801e564:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e568:	4630      	mov	r0, r6
 801e56a:	f000 f81d 	bl	801e5a8 <_isatty_r>
 801e56e:	b128      	cbz	r0, 801e57c <__smakebuf_r+0x70>
 801e570:	89a3      	ldrh	r3, [r4, #12]
 801e572:	f023 0303 	bic.w	r3, r3, #3
 801e576:	f043 0301 	orr.w	r3, r3, #1
 801e57a:	81a3      	strh	r3, [r4, #12]
 801e57c:	89a3      	ldrh	r3, [r4, #12]
 801e57e:	431d      	orrs	r5, r3
 801e580:	81a5      	strh	r5, [r4, #12]
 801e582:	e7cf      	b.n	801e524 <__smakebuf_r+0x18>

0801e584 <_fstat_r>:
 801e584:	b538      	push	{r3, r4, r5, lr}
 801e586:	4d07      	ldr	r5, [pc, #28]	@ (801e5a4 <_fstat_r+0x20>)
 801e588:	2300      	movs	r3, #0
 801e58a:	4604      	mov	r4, r0
 801e58c:	4608      	mov	r0, r1
 801e58e:	4611      	mov	r1, r2
 801e590:	602b      	str	r3, [r5, #0]
 801e592:	f7e5 f881 	bl	8003698 <_fstat>
 801e596:	1c43      	adds	r3, r0, #1
 801e598:	d102      	bne.n	801e5a0 <_fstat_r+0x1c>
 801e59a:	682b      	ldr	r3, [r5, #0]
 801e59c:	b103      	cbz	r3, 801e5a0 <_fstat_r+0x1c>
 801e59e:	6023      	str	r3, [r4, #0]
 801e5a0:	bd38      	pop	{r3, r4, r5, pc}
 801e5a2:	bf00      	nop
 801e5a4:	2000f768 	.word	0x2000f768

0801e5a8 <_isatty_r>:
 801e5a8:	b538      	push	{r3, r4, r5, lr}
 801e5aa:	4d06      	ldr	r5, [pc, #24]	@ (801e5c4 <_isatty_r+0x1c>)
 801e5ac:	2300      	movs	r3, #0
 801e5ae:	4604      	mov	r4, r0
 801e5b0:	4608      	mov	r0, r1
 801e5b2:	602b      	str	r3, [r5, #0]
 801e5b4:	f7e5 f880 	bl	80036b8 <_isatty>
 801e5b8:	1c43      	adds	r3, r0, #1
 801e5ba:	d102      	bne.n	801e5c2 <_isatty_r+0x1a>
 801e5bc:	682b      	ldr	r3, [r5, #0]
 801e5be:	b103      	cbz	r3, 801e5c2 <_isatty_r+0x1a>
 801e5c0:	6023      	str	r3, [r4, #0]
 801e5c2:	bd38      	pop	{r3, r4, r5, pc}
 801e5c4:	2000f768 	.word	0x2000f768

0801e5c8 <abort>:
 801e5c8:	b508      	push	{r3, lr}
 801e5ca:	2006      	movs	r0, #6
 801e5cc:	f000 f82c 	bl	801e628 <raise>
 801e5d0:	2001      	movs	r0, #1
 801e5d2:	f7e5 f811 	bl	80035f8 <_exit>

0801e5d6 <_raise_r>:
 801e5d6:	291f      	cmp	r1, #31
 801e5d8:	b538      	push	{r3, r4, r5, lr}
 801e5da:	4605      	mov	r5, r0
 801e5dc:	460c      	mov	r4, r1
 801e5de:	d904      	bls.n	801e5ea <_raise_r+0x14>
 801e5e0:	2316      	movs	r3, #22
 801e5e2:	6003      	str	r3, [r0, #0]
 801e5e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e5e8:	bd38      	pop	{r3, r4, r5, pc}
 801e5ea:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e5ec:	b112      	cbz	r2, 801e5f4 <_raise_r+0x1e>
 801e5ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e5f2:	b94b      	cbnz	r3, 801e608 <_raise_r+0x32>
 801e5f4:	4628      	mov	r0, r5
 801e5f6:	f000 f831 	bl	801e65c <_getpid_r>
 801e5fa:	4622      	mov	r2, r4
 801e5fc:	4601      	mov	r1, r0
 801e5fe:	4628      	mov	r0, r5
 801e600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e604:	f000 b818 	b.w	801e638 <_kill_r>
 801e608:	2b01      	cmp	r3, #1
 801e60a:	d00a      	beq.n	801e622 <_raise_r+0x4c>
 801e60c:	1c59      	adds	r1, r3, #1
 801e60e:	d103      	bne.n	801e618 <_raise_r+0x42>
 801e610:	2316      	movs	r3, #22
 801e612:	6003      	str	r3, [r0, #0]
 801e614:	2001      	movs	r0, #1
 801e616:	e7e7      	b.n	801e5e8 <_raise_r+0x12>
 801e618:	2100      	movs	r1, #0
 801e61a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e61e:	4620      	mov	r0, r4
 801e620:	4798      	blx	r3
 801e622:	2000      	movs	r0, #0
 801e624:	e7e0      	b.n	801e5e8 <_raise_r+0x12>
	...

0801e628 <raise>:
 801e628:	4b02      	ldr	r3, [pc, #8]	@ (801e634 <raise+0xc>)
 801e62a:	4601      	mov	r1, r0
 801e62c:	6818      	ldr	r0, [r3, #0]
 801e62e:	f7ff bfd2 	b.w	801e5d6 <_raise_r>
 801e632:	bf00      	nop
 801e634:	2000327c 	.word	0x2000327c

0801e638 <_kill_r>:
 801e638:	b538      	push	{r3, r4, r5, lr}
 801e63a:	4d07      	ldr	r5, [pc, #28]	@ (801e658 <_kill_r+0x20>)
 801e63c:	2300      	movs	r3, #0
 801e63e:	4604      	mov	r4, r0
 801e640:	4608      	mov	r0, r1
 801e642:	4611      	mov	r1, r2
 801e644:	602b      	str	r3, [r5, #0]
 801e646:	f7e4 ffc7 	bl	80035d8 <_kill>
 801e64a:	1c43      	adds	r3, r0, #1
 801e64c:	d102      	bne.n	801e654 <_kill_r+0x1c>
 801e64e:	682b      	ldr	r3, [r5, #0]
 801e650:	b103      	cbz	r3, 801e654 <_kill_r+0x1c>
 801e652:	6023      	str	r3, [r4, #0]
 801e654:	bd38      	pop	{r3, r4, r5, pc}
 801e656:	bf00      	nop
 801e658:	2000f768 	.word	0x2000f768

0801e65c <_getpid_r>:
 801e65c:	f7e4 bfb4 	b.w	80035c8 <_getpid>

0801e660 <atan2>:
 801e660:	f000 bb32 	b.w	801ecc8 <__ieee754_atan2>

0801e664 <sqrt>:
 801e664:	b538      	push	{r3, r4, r5, lr}
 801e666:	ed2d 8b02 	vpush	{d8}
 801e66a:	ec55 4b10 	vmov	r4, r5, d0
 801e66e:	f000 fa51 	bl	801eb14 <__ieee754_sqrt>
 801e672:	4622      	mov	r2, r4
 801e674:	462b      	mov	r3, r5
 801e676:	4620      	mov	r0, r4
 801e678:	4629      	mov	r1, r5
 801e67a:	eeb0 8a40 	vmov.f32	s16, s0
 801e67e:	eef0 8a60 	vmov.f32	s17, s1
 801e682:	f7e2 fa8b 	bl	8000b9c <__aeabi_dcmpun>
 801e686:	b990      	cbnz	r0, 801e6ae <sqrt+0x4a>
 801e688:	2200      	movs	r2, #0
 801e68a:	2300      	movs	r3, #0
 801e68c:	4620      	mov	r0, r4
 801e68e:	4629      	mov	r1, r5
 801e690:	f7e2 fa5c 	bl	8000b4c <__aeabi_dcmplt>
 801e694:	b158      	cbz	r0, 801e6ae <sqrt+0x4a>
 801e696:	f7ff f96d 	bl	801d974 <__errno>
 801e69a:	2321      	movs	r3, #33	@ 0x21
 801e69c:	6003      	str	r3, [r0, #0]
 801e69e:	2200      	movs	r2, #0
 801e6a0:	2300      	movs	r3, #0
 801e6a2:	4610      	mov	r0, r2
 801e6a4:	4619      	mov	r1, r3
 801e6a6:	f7e2 f909 	bl	80008bc <__aeabi_ddiv>
 801e6aa:	ec41 0b18 	vmov	d8, r0, r1
 801e6ae:	eeb0 0a48 	vmov.f32	s0, s16
 801e6b2:	eef0 0a68 	vmov.f32	s1, s17
 801e6b6:	ecbd 8b02 	vpop	{d8}
 801e6ba:	bd38      	pop	{r3, r4, r5, pc}
 801e6bc:	0000      	movs	r0, r0
	...

0801e6c0 <atan>:
 801e6c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6c4:	ec55 4b10 	vmov	r4, r5, d0
 801e6c8:	4bbf      	ldr	r3, [pc, #764]	@ (801e9c8 <atan+0x308>)
 801e6ca:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801e6ce:	429e      	cmp	r6, r3
 801e6d0:	46ab      	mov	fp, r5
 801e6d2:	d918      	bls.n	801e706 <atan+0x46>
 801e6d4:	4bbd      	ldr	r3, [pc, #756]	@ (801e9cc <atan+0x30c>)
 801e6d6:	429e      	cmp	r6, r3
 801e6d8:	d801      	bhi.n	801e6de <atan+0x1e>
 801e6da:	d109      	bne.n	801e6f0 <atan+0x30>
 801e6dc:	b144      	cbz	r4, 801e6f0 <atan+0x30>
 801e6de:	4622      	mov	r2, r4
 801e6e0:	462b      	mov	r3, r5
 801e6e2:	4620      	mov	r0, r4
 801e6e4:	4629      	mov	r1, r5
 801e6e6:	f7e1 fe09 	bl	80002fc <__adddf3>
 801e6ea:	4604      	mov	r4, r0
 801e6ec:	460d      	mov	r5, r1
 801e6ee:	e006      	b.n	801e6fe <atan+0x3e>
 801e6f0:	f1bb 0f00 	cmp.w	fp, #0
 801e6f4:	f340 812b 	ble.w	801e94e <atan+0x28e>
 801e6f8:	a597      	add	r5, pc, #604	@ (adr r5, 801e958 <atan+0x298>)
 801e6fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 801e6fe:	ec45 4b10 	vmov	d0, r4, r5
 801e702:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e706:	4bb2      	ldr	r3, [pc, #712]	@ (801e9d0 <atan+0x310>)
 801e708:	429e      	cmp	r6, r3
 801e70a:	d813      	bhi.n	801e734 <atan+0x74>
 801e70c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801e710:	429e      	cmp	r6, r3
 801e712:	d80c      	bhi.n	801e72e <atan+0x6e>
 801e714:	a392      	add	r3, pc, #584	@ (adr r3, 801e960 <atan+0x2a0>)
 801e716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e71a:	4620      	mov	r0, r4
 801e71c:	4629      	mov	r1, r5
 801e71e:	f7e1 fded 	bl	80002fc <__adddf3>
 801e722:	4bac      	ldr	r3, [pc, #688]	@ (801e9d4 <atan+0x314>)
 801e724:	2200      	movs	r2, #0
 801e726:	f7e2 fa2f 	bl	8000b88 <__aeabi_dcmpgt>
 801e72a:	2800      	cmp	r0, #0
 801e72c:	d1e7      	bne.n	801e6fe <atan+0x3e>
 801e72e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801e732:	e029      	b.n	801e788 <atan+0xc8>
 801e734:	f000 f95c 	bl	801e9f0 <fabs>
 801e738:	4ba7      	ldr	r3, [pc, #668]	@ (801e9d8 <atan+0x318>)
 801e73a:	429e      	cmp	r6, r3
 801e73c:	ec55 4b10 	vmov	r4, r5, d0
 801e740:	f200 80bc 	bhi.w	801e8bc <atan+0x1fc>
 801e744:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801e748:	429e      	cmp	r6, r3
 801e74a:	f200 809e 	bhi.w	801e88a <atan+0x1ca>
 801e74e:	4622      	mov	r2, r4
 801e750:	462b      	mov	r3, r5
 801e752:	4620      	mov	r0, r4
 801e754:	4629      	mov	r1, r5
 801e756:	f7e1 fdd1 	bl	80002fc <__adddf3>
 801e75a:	4b9e      	ldr	r3, [pc, #632]	@ (801e9d4 <atan+0x314>)
 801e75c:	2200      	movs	r2, #0
 801e75e:	f7e1 fdcb 	bl	80002f8 <__aeabi_dsub>
 801e762:	2200      	movs	r2, #0
 801e764:	4606      	mov	r6, r0
 801e766:	460f      	mov	r7, r1
 801e768:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801e76c:	4620      	mov	r0, r4
 801e76e:	4629      	mov	r1, r5
 801e770:	f7e1 fdc4 	bl	80002fc <__adddf3>
 801e774:	4602      	mov	r2, r0
 801e776:	460b      	mov	r3, r1
 801e778:	4630      	mov	r0, r6
 801e77a:	4639      	mov	r1, r7
 801e77c:	f7e2 f89e 	bl	80008bc <__aeabi_ddiv>
 801e780:	f04f 0a00 	mov.w	sl, #0
 801e784:	4604      	mov	r4, r0
 801e786:	460d      	mov	r5, r1
 801e788:	4622      	mov	r2, r4
 801e78a:	462b      	mov	r3, r5
 801e78c:	4620      	mov	r0, r4
 801e78e:	4629      	mov	r1, r5
 801e790:	f7e1 ff6a 	bl	8000668 <__aeabi_dmul>
 801e794:	4602      	mov	r2, r0
 801e796:	460b      	mov	r3, r1
 801e798:	4680      	mov	r8, r0
 801e79a:	4689      	mov	r9, r1
 801e79c:	f7e1 ff64 	bl	8000668 <__aeabi_dmul>
 801e7a0:	a371      	add	r3, pc, #452	@ (adr r3, 801e968 <atan+0x2a8>)
 801e7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7a6:	4606      	mov	r6, r0
 801e7a8:	460f      	mov	r7, r1
 801e7aa:	f7e1 ff5d 	bl	8000668 <__aeabi_dmul>
 801e7ae:	a370      	add	r3, pc, #448	@ (adr r3, 801e970 <atan+0x2b0>)
 801e7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7b4:	f7e1 fda2 	bl	80002fc <__adddf3>
 801e7b8:	4632      	mov	r2, r6
 801e7ba:	463b      	mov	r3, r7
 801e7bc:	f7e1 ff54 	bl	8000668 <__aeabi_dmul>
 801e7c0:	a36d      	add	r3, pc, #436	@ (adr r3, 801e978 <atan+0x2b8>)
 801e7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7c6:	f7e1 fd99 	bl	80002fc <__adddf3>
 801e7ca:	4632      	mov	r2, r6
 801e7cc:	463b      	mov	r3, r7
 801e7ce:	f7e1 ff4b 	bl	8000668 <__aeabi_dmul>
 801e7d2:	a36b      	add	r3, pc, #428	@ (adr r3, 801e980 <atan+0x2c0>)
 801e7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7d8:	f7e1 fd90 	bl	80002fc <__adddf3>
 801e7dc:	4632      	mov	r2, r6
 801e7de:	463b      	mov	r3, r7
 801e7e0:	f7e1 ff42 	bl	8000668 <__aeabi_dmul>
 801e7e4:	a368      	add	r3, pc, #416	@ (adr r3, 801e988 <atan+0x2c8>)
 801e7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7ea:	f7e1 fd87 	bl	80002fc <__adddf3>
 801e7ee:	4632      	mov	r2, r6
 801e7f0:	463b      	mov	r3, r7
 801e7f2:	f7e1 ff39 	bl	8000668 <__aeabi_dmul>
 801e7f6:	a366      	add	r3, pc, #408	@ (adr r3, 801e990 <atan+0x2d0>)
 801e7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7fc:	f7e1 fd7e 	bl	80002fc <__adddf3>
 801e800:	4642      	mov	r2, r8
 801e802:	464b      	mov	r3, r9
 801e804:	f7e1 ff30 	bl	8000668 <__aeabi_dmul>
 801e808:	a363      	add	r3, pc, #396	@ (adr r3, 801e998 <atan+0x2d8>)
 801e80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e80e:	4680      	mov	r8, r0
 801e810:	4689      	mov	r9, r1
 801e812:	4630      	mov	r0, r6
 801e814:	4639      	mov	r1, r7
 801e816:	f7e1 ff27 	bl	8000668 <__aeabi_dmul>
 801e81a:	a361      	add	r3, pc, #388	@ (adr r3, 801e9a0 <atan+0x2e0>)
 801e81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e820:	f7e1 fd6a 	bl	80002f8 <__aeabi_dsub>
 801e824:	4632      	mov	r2, r6
 801e826:	463b      	mov	r3, r7
 801e828:	f7e1 ff1e 	bl	8000668 <__aeabi_dmul>
 801e82c:	a35e      	add	r3, pc, #376	@ (adr r3, 801e9a8 <atan+0x2e8>)
 801e82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e832:	f7e1 fd61 	bl	80002f8 <__aeabi_dsub>
 801e836:	4632      	mov	r2, r6
 801e838:	463b      	mov	r3, r7
 801e83a:	f7e1 ff15 	bl	8000668 <__aeabi_dmul>
 801e83e:	a35c      	add	r3, pc, #368	@ (adr r3, 801e9b0 <atan+0x2f0>)
 801e840:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e844:	f7e1 fd58 	bl	80002f8 <__aeabi_dsub>
 801e848:	4632      	mov	r2, r6
 801e84a:	463b      	mov	r3, r7
 801e84c:	f7e1 ff0c 	bl	8000668 <__aeabi_dmul>
 801e850:	a359      	add	r3, pc, #356	@ (adr r3, 801e9b8 <atan+0x2f8>)
 801e852:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e856:	f7e1 fd4f 	bl	80002f8 <__aeabi_dsub>
 801e85a:	4632      	mov	r2, r6
 801e85c:	463b      	mov	r3, r7
 801e85e:	f7e1 ff03 	bl	8000668 <__aeabi_dmul>
 801e862:	4602      	mov	r2, r0
 801e864:	460b      	mov	r3, r1
 801e866:	4640      	mov	r0, r8
 801e868:	4649      	mov	r1, r9
 801e86a:	f7e1 fd47 	bl	80002fc <__adddf3>
 801e86e:	4622      	mov	r2, r4
 801e870:	462b      	mov	r3, r5
 801e872:	f7e1 fef9 	bl	8000668 <__aeabi_dmul>
 801e876:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801e87a:	4602      	mov	r2, r0
 801e87c:	460b      	mov	r3, r1
 801e87e:	d148      	bne.n	801e912 <atan+0x252>
 801e880:	4620      	mov	r0, r4
 801e882:	4629      	mov	r1, r5
 801e884:	f7e1 fd38 	bl	80002f8 <__aeabi_dsub>
 801e888:	e72f      	b.n	801e6ea <atan+0x2a>
 801e88a:	4b52      	ldr	r3, [pc, #328]	@ (801e9d4 <atan+0x314>)
 801e88c:	2200      	movs	r2, #0
 801e88e:	4620      	mov	r0, r4
 801e890:	4629      	mov	r1, r5
 801e892:	f7e1 fd31 	bl	80002f8 <__aeabi_dsub>
 801e896:	4b4f      	ldr	r3, [pc, #316]	@ (801e9d4 <atan+0x314>)
 801e898:	4606      	mov	r6, r0
 801e89a:	460f      	mov	r7, r1
 801e89c:	2200      	movs	r2, #0
 801e89e:	4620      	mov	r0, r4
 801e8a0:	4629      	mov	r1, r5
 801e8a2:	f7e1 fd2b 	bl	80002fc <__adddf3>
 801e8a6:	4602      	mov	r2, r0
 801e8a8:	460b      	mov	r3, r1
 801e8aa:	4630      	mov	r0, r6
 801e8ac:	4639      	mov	r1, r7
 801e8ae:	f7e2 f805 	bl	80008bc <__aeabi_ddiv>
 801e8b2:	f04f 0a01 	mov.w	sl, #1
 801e8b6:	4604      	mov	r4, r0
 801e8b8:	460d      	mov	r5, r1
 801e8ba:	e765      	b.n	801e788 <atan+0xc8>
 801e8bc:	4b47      	ldr	r3, [pc, #284]	@ (801e9dc <atan+0x31c>)
 801e8be:	429e      	cmp	r6, r3
 801e8c0:	d21c      	bcs.n	801e8fc <atan+0x23c>
 801e8c2:	4b47      	ldr	r3, [pc, #284]	@ (801e9e0 <atan+0x320>)
 801e8c4:	2200      	movs	r2, #0
 801e8c6:	4620      	mov	r0, r4
 801e8c8:	4629      	mov	r1, r5
 801e8ca:	f7e1 fd15 	bl	80002f8 <__aeabi_dsub>
 801e8ce:	4b44      	ldr	r3, [pc, #272]	@ (801e9e0 <atan+0x320>)
 801e8d0:	4606      	mov	r6, r0
 801e8d2:	460f      	mov	r7, r1
 801e8d4:	2200      	movs	r2, #0
 801e8d6:	4620      	mov	r0, r4
 801e8d8:	4629      	mov	r1, r5
 801e8da:	f7e1 fec5 	bl	8000668 <__aeabi_dmul>
 801e8de:	4b3d      	ldr	r3, [pc, #244]	@ (801e9d4 <atan+0x314>)
 801e8e0:	2200      	movs	r2, #0
 801e8e2:	f7e1 fd0b 	bl	80002fc <__adddf3>
 801e8e6:	4602      	mov	r2, r0
 801e8e8:	460b      	mov	r3, r1
 801e8ea:	4630      	mov	r0, r6
 801e8ec:	4639      	mov	r1, r7
 801e8ee:	f7e1 ffe5 	bl	80008bc <__aeabi_ddiv>
 801e8f2:	f04f 0a02 	mov.w	sl, #2
 801e8f6:	4604      	mov	r4, r0
 801e8f8:	460d      	mov	r5, r1
 801e8fa:	e745      	b.n	801e788 <atan+0xc8>
 801e8fc:	4622      	mov	r2, r4
 801e8fe:	462b      	mov	r3, r5
 801e900:	4938      	ldr	r1, [pc, #224]	@ (801e9e4 <atan+0x324>)
 801e902:	2000      	movs	r0, #0
 801e904:	f7e1 ffda 	bl	80008bc <__aeabi_ddiv>
 801e908:	f04f 0a03 	mov.w	sl, #3
 801e90c:	4604      	mov	r4, r0
 801e90e:	460d      	mov	r5, r1
 801e910:	e73a      	b.n	801e788 <atan+0xc8>
 801e912:	4b35      	ldr	r3, [pc, #212]	@ (801e9e8 <atan+0x328>)
 801e914:	4e35      	ldr	r6, [pc, #212]	@ (801e9ec <atan+0x32c>)
 801e916:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801e91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e91e:	f7e1 fceb 	bl	80002f8 <__aeabi_dsub>
 801e922:	4622      	mov	r2, r4
 801e924:	462b      	mov	r3, r5
 801e926:	f7e1 fce7 	bl	80002f8 <__aeabi_dsub>
 801e92a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801e92e:	4602      	mov	r2, r0
 801e930:	460b      	mov	r3, r1
 801e932:	e9d6 0100 	ldrd	r0, r1, [r6]
 801e936:	f7e1 fcdf 	bl	80002f8 <__aeabi_dsub>
 801e93a:	f1bb 0f00 	cmp.w	fp, #0
 801e93e:	4604      	mov	r4, r0
 801e940:	460d      	mov	r5, r1
 801e942:	f6bf aedc 	bge.w	801e6fe <atan+0x3e>
 801e946:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e94a:	461d      	mov	r5, r3
 801e94c:	e6d7      	b.n	801e6fe <atan+0x3e>
 801e94e:	a51c      	add	r5, pc, #112	@ (adr r5, 801e9c0 <atan+0x300>)
 801e950:	e9d5 4500 	ldrd	r4, r5, [r5]
 801e954:	e6d3      	b.n	801e6fe <atan+0x3e>
 801e956:	bf00      	nop
 801e958:	54442d18 	.word	0x54442d18
 801e95c:	3ff921fb 	.word	0x3ff921fb
 801e960:	8800759c 	.word	0x8800759c
 801e964:	7e37e43c 	.word	0x7e37e43c
 801e968:	e322da11 	.word	0xe322da11
 801e96c:	3f90ad3a 	.word	0x3f90ad3a
 801e970:	24760deb 	.word	0x24760deb
 801e974:	3fa97b4b 	.word	0x3fa97b4b
 801e978:	a0d03d51 	.word	0xa0d03d51
 801e97c:	3fb10d66 	.word	0x3fb10d66
 801e980:	c54c206e 	.word	0xc54c206e
 801e984:	3fb745cd 	.word	0x3fb745cd
 801e988:	920083ff 	.word	0x920083ff
 801e98c:	3fc24924 	.word	0x3fc24924
 801e990:	5555550d 	.word	0x5555550d
 801e994:	3fd55555 	.word	0x3fd55555
 801e998:	2c6a6c2f 	.word	0x2c6a6c2f
 801e99c:	bfa2b444 	.word	0xbfa2b444
 801e9a0:	52defd9a 	.word	0x52defd9a
 801e9a4:	3fadde2d 	.word	0x3fadde2d
 801e9a8:	af749a6d 	.word	0xaf749a6d
 801e9ac:	3fb3b0f2 	.word	0x3fb3b0f2
 801e9b0:	fe231671 	.word	0xfe231671
 801e9b4:	3fbc71c6 	.word	0x3fbc71c6
 801e9b8:	9998ebc4 	.word	0x9998ebc4
 801e9bc:	3fc99999 	.word	0x3fc99999
 801e9c0:	54442d18 	.word	0x54442d18
 801e9c4:	bff921fb 	.word	0xbff921fb
 801e9c8:	440fffff 	.word	0x440fffff
 801e9cc:	7ff00000 	.word	0x7ff00000
 801e9d0:	3fdbffff 	.word	0x3fdbffff
 801e9d4:	3ff00000 	.word	0x3ff00000
 801e9d8:	3ff2ffff 	.word	0x3ff2ffff
 801e9dc:	40038000 	.word	0x40038000
 801e9e0:	3ff80000 	.word	0x3ff80000
 801e9e4:	bff00000 	.word	0xbff00000
 801e9e8:	08021c28 	.word	0x08021c28
 801e9ec:	08021c48 	.word	0x08021c48

0801e9f0 <fabs>:
 801e9f0:	ec51 0b10 	vmov	r0, r1, d0
 801e9f4:	4602      	mov	r2, r0
 801e9f6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801e9fa:	ec43 2b10 	vmov	d0, r2, r3
 801e9fe:	4770      	bx	lr

0801ea00 <cosf>:
 801ea00:	ee10 3a10 	vmov	r3, s0
 801ea04:	b507      	push	{r0, r1, r2, lr}
 801ea06:	4a1e      	ldr	r2, [pc, #120]	@ (801ea80 <cosf+0x80>)
 801ea08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ea0c:	4293      	cmp	r3, r2
 801ea0e:	d806      	bhi.n	801ea1e <cosf+0x1e>
 801ea10:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 801ea84 <cosf+0x84>
 801ea14:	b003      	add	sp, #12
 801ea16:	f85d eb04 	ldr.w	lr, [sp], #4
 801ea1a:	f000 ba1b 	b.w	801ee54 <__kernel_cosf>
 801ea1e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801ea22:	d304      	bcc.n	801ea2e <cosf+0x2e>
 801ea24:	ee30 0a40 	vsub.f32	s0, s0, s0
 801ea28:	b003      	add	sp, #12
 801ea2a:	f85d fb04 	ldr.w	pc, [sp], #4
 801ea2e:	4668      	mov	r0, sp
 801ea30:	f000 fab0 	bl	801ef94 <__ieee754_rem_pio2f>
 801ea34:	f000 0003 	and.w	r0, r0, #3
 801ea38:	2801      	cmp	r0, #1
 801ea3a:	d009      	beq.n	801ea50 <cosf+0x50>
 801ea3c:	2802      	cmp	r0, #2
 801ea3e:	d010      	beq.n	801ea62 <cosf+0x62>
 801ea40:	b9b0      	cbnz	r0, 801ea70 <cosf+0x70>
 801ea42:	eddd 0a01 	vldr	s1, [sp, #4]
 801ea46:	ed9d 0a00 	vldr	s0, [sp]
 801ea4a:	f000 fa03 	bl	801ee54 <__kernel_cosf>
 801ea4e:	e7eb      	b.n	801ea28 <cosf+0x28>
 801ea50:	eddd 0a01 	vldr	s1, [sp, #4]
 801ea54:	ed9d 0a00 	vldr	s0, [sp]
 801ea58:	f000 fa54 	bl	801ef04 <__kernel_sinf>
 801ea5c:	eeb1 0a40 	vneg.f32	s0, s0
 801ea60:	e7e2      	b.n	801ea28 <cosf+0x28>
 801ea62:	eddd 0a01 	vldr	s1, [sp, #4]
 801ea66:	ed9d 0a00 	vldr	s0, [sp]
 801ea6a:	f000 f9f3 	bl	801ee54 <__kernel_cosf>
 801ea6e:	e7f5      	b.n	801ea5c <cosf+0x5c>
 801ea70:	eddd 0a01 	vldr	s1, [sp, #4]
 801ea74:	ed9d 0a00 	vldr	s0, [sp]
 801ea78:	2001      	movs	r0, #1
 801ea7a:	f000 fa43 	bl	801ef04 <__kernel_sinf>
 801ea7e:	e7d3      	b.n	801ea28 <cosf+0x28>
 801ea80:	3f490fd8 	.word	0x3f490fd8
 801ea84:	00000000 	.word	0x00000000

0801ea88 <sinf>:
 801ea88:	ee10 3a10 	vmov	r3, s0
 801ea8c:	b507      	push	{r0, r1, r2, lr}
 801ea8e:	4a1f      	ldr	r2, [pc, #124]	@ (801eb0c <sinf+0x84>)
 801ea90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ea94:	4293      	cmp	r3, r2
 801ea96:	d807      	bhi.n	801eaa8 <sinf+0x20>
 801ea98:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 801eb10 <sinf+0x88>
 801ea9c:	2000      	movs	r0, #0
 801ea9e:	b003      	add	sp, #12
 801eaa0:	f85d eb04 	ldr.w	lr, [sp], #4
 801eaa4:	f000 ba2e 	b.w	801ef04 <__kernel_sinf>
 801eaa8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801eaac:	d304      	bcc.n	801eab8 <sinf+0x30>
 801eaae:	ee30 0a40 	vsub.f32	s0, s0, s0
 801eab2:	b003      	add	sp, #12
 801eab4:	f85d fb04 	ldr.w	pc, [sp], #4
 801eab8:	4668      	mov	r0, sp
 801eaba:	f000 fa6b 	bl	801ef94 <__ieee754_rem_pio2f>
 801eabe:	f000 0003 	and.w	r0, r0, #3
 801eac2:	2801      	cmp	r0, #1
 801eac4:	d00a      	beq.n	801eadc <sinf+0x54>
 801eac6:	2802      	cmp	r0, #2
 801eac8:	d00f      	beq.n	801eaea <sinf+0x62>
 801eaca:	b9c0      	cbnz	r0, 801eafe <sinf+0x76>
 801eacc:	eddd 0a01 	vldr	s1, [sp, #4]
 801ead0:	ed9d 0a00 	vldr	s0, [sp]
 801ead4:	2001      	movs	r0, #1
 801ead6:	f000 fa15 	bl	801ef04 <__kernel_sinf>
 801eada:	e7ea      	b.n	801eab2 <sinf+0x2a>
 801eadc:	eddd 0a01 	vldr	s1, [sp, #4]
 801eae0:	ed9d 0a00 	vldr	s0, [sp]
 801eae4:	f000 f9b6 	bl	801ee54 <__kernel_cosf>
 801eae8:	e7e3      	b.n	801eab2 <sinf+0x2a>
 801eaea:	eddd 0a01 	vldr	s1, [sp, #4]
 801eaee:	ed9d 0a00 	vldr	s0, [sp]
 801eaf2:	2001      	movs	r0, #1
 801eaf4:	f000 fa06 	bl	801ef04 <__kernel_sinf>
 801eaf8:	eeb1 0a40 	vneg.f32	s0, s0
 801eafc:	e7d9      	b.n	801eab2 <sinf+0x2a>
 801eafe:	eddd 0a01 	vldr	s1, [sp, #4]
 801eb02:	ed9d 0a00 	vldr	s0, [sp]
 801eb06:	f000 f9a5 	bl	801ee54 <__kernel_cosf>
 801eb0a:	e7f5      	b.n	801eaf8 <sinf+0x70>
 801eb0c:	3f490fd8 	.word	0x3f490fd8
 801eb10:	00000000 	.word	0x00000000

0801eb14 <__ieee754_sqrt>:
 801eb14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb18:	4a68      	ldr	r2, [pc, #416]	@ (801ecbc <__ieee754_sqrt+0x1a8>)
 801eb1a:	ec55 4b10 	vmov	r4, r5, d0
 801eb1e:	43aa      	bics	r2, r5
 801eb20:	462b      	mov	r3, r5
 801eb22:	4621      	mov	r1, r4
 801eb24:	d110      	bne.n	801eb48 <__ieee754_sqrt+0x34>
 801eb26:	4622      	mov	r2, r4
 801eb28:	4620      	mov	r0, r4
 801eb2a:	4629      	mov	r1, r5
 801eb2c:	f7e1 fd9c 	bl	8000668 <__aeabi_dmul>
 801eb30:	4602      	mov	r2, r0
 801eb32:	460b      	mov	r3, r1
 801eb34:	4620      	mov	r0, r4
 801eb36:	4629      	mov	r1, r5
 801eb38:	f7e1 fbe0 	bl	80002fc <__adddf3>
 801eb3c:	4604      	mov	r4, r0
 801eb3e:	460d      	mov	r5, r1
 801eb40:	ec45 4b10 	vmov	d0, r4, r5
 801eb44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb48:	2d00      	cmp	r5, #0
 801eb4a:	dc0e      	bgt.n	801eb6a <__ieee754_sqrt+0x56>
 801eb4c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801eb50:	4322      	orrs	r2, r4
 801eb52:	d0f5      	beq.n	801eb40 <__ieee754_sqrt+0x2c>
 801eb54:	b19d      	cbz	r5, 801eb7e <__ieee754_sqrt+0x6a>
 801eb56:	4622      	mov	r2, r4
 801eb58:	4620      	mov	r0, r4
 801eb5a:	4629      	mov	r1, r5
 801eb5c:	f7e1 fbcc 	bl	80002f8 <__aeabi_dsub>
 801eb60:	4602      	mov	r2, r0
 801eb62:	460b      	mov	r3, r1
 801eb64:	f7e1 feaa 	bl	80008bc <__aeabi_ddiv>
 801eb68:	e7e8      	b.n	801eb3c <__ieee754_sqrt+0x28>
 801eb6a:	152a      	asrs	r2, r5, #20
 801eb6c:	d115      	bne.n	801eb9a <__ieee754_sqrt+0x86>
 801eb6e:	2000      	movs	r0, #0
 801eb70:	e009      	b.n	801eb86 <__ieee754_sqrt+0x72>
 801eb72:	0acb      	lsrs	r3, r1, #11
 801eb74:	3a15      	subs	r2, #21
 801eb76:	0549      	lsls	r1, r1, #21
 801eb78:	2b00      	cmp	r3, #0
 801eb7a:	d0fa      	beq.n	801eb72 <__ieee754_sqrt+0x5e>
 801eb7c:	e7f7      	b.n	801eb6e <__ieee754_sqrt+0x5a>
 801eb7e:	462a      	mov	r2, r5
 801eb80:	e7fa      	b.n	801eb78 <__ieee754_sqrt+0x64>
 801eb82:	005b      	lsls	r3, r3, #1
 801eb84:	3001      	adds	r0, #1
 801eb86:	02dc      	lsls	r4, r3, #11
 801eb88:	d5fb      	bpl.n	801eb82 <__ieee754_sqrt+0x6e>
 801eb8a:	1e44      	subs	r4, r0, #1
 801eb8c:	1b12      	subs	r2, r2, r4
 801eb8e:	f1c0 0420 	rsb	r4, r0, #32
 801eb92:	fa21 f404 	lsr.w	r4, r1, r4
 801eb96:	4323      	orrs	r3, r4
 801eb98:	4081      	lsls	r1, r0
 801eb9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801eb9e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801eba2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801eba6:	07d2      	lsls	r2, r2, #31
 801eba8:	bf5c      	itt	pl
 801ebaa:	005b      	lslpl	r3, r3, #1
 801ebac:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801ebb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ebb4:	bf58      	it	pl
 801ebb6:	0049      	lslpl	r1, r1, #1
 801ebb8:	2600      	movs	r6, #0
 801ebba:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801ebbe:	106d      	asrs	r5, r5, #1
 801ebc0:	0049      	lsls	r1, r1, #1
 801ebc2:	2016      	movs	r0, #22
 801ebc4:	4632      	mov	r2, r6
 801ebc6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801ebca:	1917      	adds	r7, r2, r4
 801ebcc:	429f      	cmp	r7, r3
 801ebce:	bfde      	ittt	le
 801ebd0:	193a      	addle	r2, r7, r4
 801ebd2:	1bdb      	suble	r3, r3, r7
 801ebd4:	1936      	addle	r6, r6, r4
 801ebd6:	0fcf      	lsrs	r7, r1, #31
 801ebd8:	3801      	subs	r0, #1
 801ebda:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801ebde:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801ebe2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801ebe6:	d1f0      	bne.n	801ebca <__ieee754_sqrt+0xb6>
 801ebe8:	4604      	mov	r4, r0
 801ebea:	2720      	movs	r7, #32
 801ebec:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801ebf0:	429a      	cmp	r2, r3
 801ebf2:	eb00 0e0c 	add.w	lr, r0, ip
 801ebf6:	db02      	blt.n	801ebfe <__ieee754_sqrt+0xea>
 801ebf8:	d113      	bne.n	801ec22 <__ieee754_sqrt+0x10e>
 801ebfa:	458e      	cmp	lr, r1
 801ebfc:	d811      	bhi.n	801ec22 <__ieee754_sqrt+0x10e>
 801ebfe:	f1be 0f00 	cmp.w	lr, #0
 801ec02:	eb0e 000c 	add.w	r0, lr, ip
 801ec06:	da42      	bge.n	801ec8e <__ieee754_sqrt+0x17a>
 801ec08:	2800      	cmp	r0, #0
 801ec0a:	db40      	blt.n	801ec8e <__ieee754_sqrt+0x17a>
 801ec0c:	f102 0801 	add.w	r8, r2, #1
 801ec10:	1a9b      	subs	r3, r3, r2
 801ec12:	458e      	cmp	lr, r1
 801ec14:	bf88      	it	hi
 801ec16:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801ec1a:	eba1 010e 	sub.w	r1, r1, lr
 801ec1e:	4464      	add	r4, ip
 801ec20:	4642      	mov	r2, r8
 801ec22:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801ec26:	3f01      	subs	r7, #1
 801ec28:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801ec2c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801ec30:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801ec34:	d1dc      	bne.n	801ebf0 <__ieee754_sqrt+0xdc>
 801ec36:	4319      	orrs	r1, r3
 801ec38:	d01b      	beq.n	801ec72 <__ieee754_sqrt+0x15e>
 801ec3a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801ecc0 <__ieee754_sqrt+0x1ac>
 801ec3e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801ecc4 <__ieee754_sqrt+0x1b0>
 801ec42:	e9da 0100 	ldrd	r0, r1, [sl]
 801ec46:	e9db 2300 	ldrd	r2, r3, [fp]
 801ec4a:	f7e1 fb55 	bl	80002f8 <__aeabi_dsub>
 801ec4e:	e9da 8900 	ldrd	r8, r9, [sl]
 801ec52:	4602      	mov	r2, r0
 801ec54:	460b      	mov	r3, r1
 801ec56:	4640      	mov	r0, r8
 801ec58:	4649      	mov	r1, r9
 801ec5a:	f7e1 ff81 	bl	8000b60 <__aeabi_dcmple>
 801ec5e:	b140      	cbz	r0, 801ec72 <__ieee754_sqrt+0x15e>
 801ec60:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801ec64:	e9da 0100 	ldrd	r0, r1, [sl]
 801ec68:	e9db 2300 	ldrd	r2, r3, [fp]
 801ec6c:	d111      	bne.n	801ec92 <__ieee754_sqrt+0x17e>
 801ec6e:	3601      	adds	r6, #1
 801ec70:	463c      	mov	r4, r7
 801ec72:	1072      	asrs	r2, r6, #1
 801ec74:	0863      	lsrs	r3, r4, #1
 801ec76:	07f1      	lsls	r1, r6, #31
 801ec78:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801ec7c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801ec80:	bf48      	it	mi
 801ec82:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801ec86:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801ec8a:	4618      	mov	r0, r3
 801ec8c:	e756      	b.n	801eb3c <__ieee754_sqrt+0x28>
 801ec8e:	4690      	mov	r8, r2
 801ec90:	e7be      	b.n	801ec10 <__ieee754_sqrt+0xfc>
 801ec92:	f7e1 fb33 	bl	80002fc <__adddf3>
 801ec96:	e9da 8900 	ldrd	r8, r9, [sl]
 801ec9a:	4602      	mov	r2, r0
 801ec9c:	460b      	mov	r3, r1
 801ec9e:	4640      	mov	r0, r8
 801eca0:	4649      	mov	r1, r9
 801eca2:	f7e1 ff53 	bl	8000b4c <__aeabi_dcmplt>
 801eca6:	b120      	cbz	r0, 801ecb2 <__ieee754_sqrt+0x19e>
 801eca8:	1ca0      	adds	r0, r4, #2
 801ecaa:	bf08      	it	eq
 801ecac:	3601      	addeq	r6, #1
 801ecae:	3402      	adds	r4, #2
 801ecb0:	e7df      	b.n	801ec72 <__ieee754_sqrt+0x15e>
 801ecb2:	1c63      	adds	r3, r4, #1
 801ecb4:	f023 0401 	bic.w	r4, r3, #1
 801ecb8:	e7db      	b.n	801ec72 <__ieee754_sqrt+0x15e>
 801ecba:	bf00      	nop
 801ecbc:	7ff00000 	.word	0x7ff00000
 801ecc0:	200032d8 	.word	0x200032d8
 801ecc4:	200032d0 	.word	0x200032d0

0801ecc8 <__ieee754_atan2>:
 801ecc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eccc:	ec57 6b11 	vmov	r6, r7, d1
 801ecd0:	4273      	negs	r3, r6
 801ecd2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 801ee50 <__ieee754_atan2+0x188>
 801ecd6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801ecda:	4333      	orrs	r3, r6
 801ecdc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801ece0:	4543      	cmp	r3, r8
 801ece2:	ec51 0b10 	vmov	r0, r1, d0
 801ece6:	4635      	mov	r5, r6
 801ece8:	d809      	bhi.n	801ecfe <__ieee754_atan2+0x36>
 801ecea:	4244      	negs	r4, r0
 801ecec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801ecf0:	4304      	orrs	r4, r0
 801ecf2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801ecf6:	4544      	cmp	r4, r8
 801ecf8:	468e      	mov	lr, r1
 801ecfa:	4681      	mov	r9, r0
 801ecfc:	d907      	bls.n	801ed0e <__ieee754_atan2+0x46>
 801ecfe:	4632      	mov	r2, r6
 801ed00:	463b      	mov	r3, r7
 801ed02:	f7e1 fafb 	bl	80002fc <__adddf3>
 801ed06:	ec41 0b10 	vmov	d0, r0, r1
 801ed0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ed0e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801ed12:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801ed16:	4334      	orrs	r4, r6
 801ed18:	d103      	bne.n	801ed22 <__ieee754_atan2+0x5a>
 801ed1a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ed1e:	f7ff bccf 	b.w	801e6c0 <atan>
 801ed22:	17bc      	asrs	r4, r7, #30
 801ed24:	f004 0402 	and.w	r4, r4, #2
 801ed28:	ea53 0909 	orrs.w	r9, r3, r9
 801ed2c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801ed30:	d107      	bne.n	801ed42 <__ieee754_atan2+0x7a>
 801ed32:	2c02      	cmp	r4, #2
 801ed34:	d05f      	beq.n	801edf6 <__ieee754_atan2+0x12e>
 801ed36:	2c03      	cmp	r4, #3
 801ed38:	d1e5      	bne.n	801ed06 <__ieee754_atan2+0x3e>
 801ed3a:	a141      	add	r1, pc, #260	@ (adr r1, 801ee40 <__ieee754_atan2+0x178>)
 801ed3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ed40:	e7e1      	b.n	801ed06 <__ieee754_atan2+0x3e>
 801ed42:	4315      	orrs	r5, r2
 801ed44:	d106      	bne.n	801ed54 <__ieee754_atan2+0x8c>
 801ed46:	f1be 0f00 	cmp.w	lr, #0
 801ed4a:	da5f      	bge.n	801ee0c <__ieee754_atan2+0x144>
 801ed4c:	a13e      	add	r1, pc, #248	@ (adr r1, 801ee48 <__ieee754_atan2+0x180>)
 801ed4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ed52:	e7d8      	b.n	801ed06 <__ieee754_atan2+0x3e>
 801ed54:	4542      	cmp	r2, r8
 801ed56:	d10f      	bne.n	801ed78 <__ieee754_atan2+0xb0>
 801ed58:	4293      	cmp	r3, r2
 801ed5a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801ed5e:	d107      	bne.n	801ed70 <__ieee754_atan2+0xa8>
 801ed60:	2c02      	cmp	r4, #2
 801ed62:	d84c      	bhi.n	801edfe <__ieee754_atan2+0x136>
 801ed64:	4b34      	ldr	r3, [pc, #208]	@ (801ee38 <__ieee754_atan2+0x170>)
 801ed66:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ed6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ed6e:	e7ca      	b.n	801ed06 <__ieee754_atan2+0x3e>
 801ed70:	2c02      	cmp	r4, #2
 801ed72:	d848      	bhi.n	801ee06 <__ieee754_atan2+0x13e>
 801ed74:	4b31      	ldr	r3, [pc, #196]	@ (801ee3c <__ieee754_atan2+0x174>)
 801ed76:	e7f6      	b.n	801ed66 <__ieee754_atan2+0x9e>
 801ed78:	4543      	cmp	r3, r8
 801ed7a:	d0e4      	beq.n	801ed46 <__ieee754_atan2+0x7e>
 801ed7c:	1a9b      	subs	r3, r3, r2
 801ed7e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801ed82:	ea4f 5223 	mov.w	r2, r3, asr #20
 801ed86:	da1e      	bge.n	801edc6 <__ieee754_atan2+0xfe>
 801ed88:	2f00      	cmp	r7, #0
 801ed8a:	da01      	bge.n	801ed90 <__ieee754_atan2+0xc8>
 801ed8c:	323c      	adds	r2, #60	@ 0x3c
 801ed8e:	db1e      	blt.n	801edce <__ieee754_atan2+0x106>
 801ed90:	4632      	mov	r2, r6
 801ed92:	463b      	mov	r3, r7
 801ed94:	f7e1 fd92 	bl	80008bc <__aeabi_ddiv>
 801ed98:	ec41 0b10 	vmov	d0, r0, r1
 801ed9c:	f7ff fe28 	bl	801e9f0 <fabs>
 801eda0:	f7ff fc8e 	bl	801e6c0 <atan>
 801eda4:	ec51 0b10 	vmov	r0, r1, d0
 801eda8:	2c01      	cmp	r4, #1
 801edaa:	d013      	beq.n	801edd4 <__ieee754_atan2+0x10c>
 801edac:	2c02      	cmp	r4, #2
 801edae:	d015      	beq.n	801eddc <__ieee754_atan2+0x114>
 801edb0:	2c00      	cmp	r4, #0
 801edb2:	d0a8      	beq.n	801ed06 <__ieee754_atan2+0x3e>
 801edb4:	a318      	add	r3, pc, #96	@ (adr r3, 801ee18 <__ieee754_atan2+0x150>)
 801edb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edba:	f7e1 fa9d 	bl	80002f8 <__aeabi_dsub>
 801edbe:	a318      	add	r3, pc, #96	@ (adr r3, 801ee20 <__ieee754_atan2+0x158>)
 801edc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edc4:	e014      	b.n	801edf0 <__ieee754_atan2+0x128>
 801edc6:	a118      	add	r1, pc, #96	@ (adr r1, 801ee28 <__ieee754_atan2+0x160>)
 801edc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801edcc:	e7ec      	b.n	801eda8 <__ieee754_atan2+0xe0>
 801edce:	2000      	movs	r0, #0
 801edd0:	2100      	movs	r1, #0
 801edd2:	e7e9      	b.n	801eda8 <__ieee754_atan2+0xe0>
 801edd4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801edd8:	4619      	mov	r1, r3
 801edda:	e794      	b.n	801ed06 <__ieee754_atan2+0x3e>
 801eddc:	a30e      	add	r3, pc, #56	@ (adr r3, 801ee18 <__ieee754_atan2+0x150>)
 801edde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ede2:	f7e1 fa89 	bl	80002f8 <__aeabi_dsub>
 801ede6:	4602      	mov	r2, r0
 801ede8:	460b      	mov	r3, r1
 801edea:	a10d      	add	r1, pc, #52	@ (adr r1, 801ee20 <__ieee754_atan2+0x158>)
 801edec:	e9d1 0100 	ldrd	r0, r1, [r1]
 801edf0:	f7e1 fa82 	bl	80002f8 <__aeabi_dsub>
 801edf4:	e787      	b.n	801ed06 <__ieee754_atan2+0x3e>
 801edf6:	a10a      	add	r1, pc, #40	@ (adr r1, 801ee20 <__ieee754_atan2+0x158>)
 801edf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801edfc:	e783      	b.n	801ed06 <__ieee754_atan2+0x3e>
 801edfe:	a10c      	add	r1, pc, #48	@ (adr r1, 801ee30 <__ieee754_atan2+0x168>)
 801ee00:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ee04:	e77f      	b.n	801ed06 <__ieee754_atan2+0x3e>
 801ee06:	2000      	movs	r0, #0
 801ee08:	2100      	movs	r1, #0
 801ee0a:	e77c      	b.n	801ed06 <__ieee754_atan2+0x3e>
 801ee0c:	a106      	add	r1, pc, #24	@ (adr r1, 801ee28 <__ieee754_atan2+0x160>)
 801ee0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ee12:	e778      	b.n	801ed06 <__ieee754_atan2+0x3e>
 801ee14:	f3af 8000 	nop.w
 801ee18:	33145c07 	.word	0x33145c07
 801ee1c:	3ca1a626 	.word	0x3ca1a626
 801ee20:	54442d18 	.word	0x54442d18
 801ee24:	400921fb 	.word	0x400921fb
 801ee28:	54442d18 	.word	0x54442d18
 801ee2c:	3ff921fb 	.word	0x3ff921fb
 801ee30:	54442d18 	.word	0x54442d18
 801ee34:	3fe921fb 	.word	0x3fe921fb
 801ee38:	08021c80 	.word	0x08021c80
 801ee3c:	08021c68 	.word	0x08021c68
 801ee40:	54442d18 	.word	0x54442d18
 801ee44:	c00921fb 	.word	0xc00921fb
 801ee48:	54442d18 	.word	0x54442d18
 801ee4c:	bff921fb 	.word	0xbff921fb
 801ee50:	7ff00000 	.word	0x7ff00000

0801ee54 <__kernel_cosf>:
 801ee54:	ee10 3a10 	vmov	r3, s0
 801ee58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ee5c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801ee60:	eef0 6a40 	vmov.f32	s13, s0
 801ee64:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801ee68:	d204      	bcs.n	801ee74 <__kernel_cosf+0x20>
 801ee6a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801ee6e:	ee17 2a90 	vmov	r2, s15
 801ee72:	b342      	cbz	r2, 801eec6 <__kernel_cosf+0x72>
 801ee74:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801ee78:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 801eee4 <__kernel_cosf+0x90>
 801ee7c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 801eee8 <__kernel_cosf+0x94>
 801ee80:	4a1a      	ldr	r2, [pc, #104]	@ (801eeec <__kernel_cosf+0x98>)
 801ee82:	eea7 6a27 	vfma.f32	s12, s14, s15
 801ee86:	4293      	cmp	r3, r2
 801ee88:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801eef0 <__kernel_cosf+0x9c>
 801ee8c:	eee6 7a07 	vfma.f32	s15, s12, s14
 801ee90:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 801eef4 <__kernel_cosf+0xa0>
 801ee94:	eea7 6a87 	vfma.f32	s12, s15, s14
 801ee98:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801eef8 <__kernel_cosf+0xa4>
 801ee9c:	eee6 7a07 	vfma.f32	s15, s12, s14
 801eea0:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 801eefc <__kernel_cosf+0xa8>
 801eea4:	eea7 6a87 	vfma.f32	s12, s15, s14
 801eea8:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 801eeac:	ee26 6a07 	vmul.f32	s12, s12, s14
 801eeb0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801eeb4:	eee7 0a06 	vfma.f32	s1, s14, s12
 801eeb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801eebc:	d804      	bhi.n	801eec8 <__kernel_cosf+0x74>
 801eebe:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801eec2:	ee30 0a67 	vsub.f32	s0, s0, s15
 801eec6:	4770      	bx	lr
 801eec8:	4a0d      	ldr	r2, [pc, #52]	@ (801ef00 <__kernel_cosf+0xac>)
 801eeca:	4293      	cmp	r3, r2
 801eecc:	bf9a      	itte	ls
 801eece:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801eed2:	ee07 3a10 	vmovls	s14, r3
 801eed6:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801eeda:	ee30 0a47 	vsub.f32	s0, s0, s14
 801eede:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801eee2:	e7ec      	b.n	801eebe <__kernel_cosf+0x6a>
 801eee4:	ad47d74e 	.word	0xad47d74e
 801eee8:	310f74f6 	.word	0x310f74f6
 801eeec:	3e999999 	.word	0x3e999999
 801eef0:	b493f27c 	.word	0xb493f27c
 801eef4:	37d00d01 	.word	0x37d00d01
 801eef8:	bab60b61 	.word	0xbab60b61
 801eefc:	3d2aaaab 	.word	0x3d2aaaab
 801ef00:	3f480000 	.word	0x3f480000

0801ef04 <__kernel_sinf>:
 801ef04:	ee10 3a10 	vmov	r3, s0
 801ef08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ef0c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801ef10:	d204      	bcs.n	801ef1c <__kernel_sinf+0x18>
 801ef12:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801ef16:	ee17 3a90 	vmov	r3, s15
 801ef1a:	b35b      	cbz	r3, 801ef74 <__kernel_sinf+0x70>
 801ef1c:	ee20 7a00 	vmul.f32	s14, s0, s0
 801ef20:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801ef78 <__kernel_sinf+0x74>
 801ef24:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801ef7c <__kernel_sinf+0x78>
 801ef28:	eea7 6a27 	vfma.f32	s12, s14, s15
 801ef2c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 801ef80 <__kernel_sinf+0x7c>
 801ef30:	eee6 7a07 	vfma.f32	s15, s12, s14
 801ef34:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 801ef84 <__kernel_sinf+0x80>
 801ef38:	eea7 6a87 	vfma.f32	s12, s15, s14
 801ef3c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801ef88 <__kernel_sinf+0x84>
 801ef40:	ee60 6a07 	vmul.f32	s13, s0, s14
 801ef44:	eee6 7a07 	vfma.f32	s15, s12, s14
 801ef48:	b930      	cbnz	r0, 801ef58 <__kernel_sinf+0x54>
 801ef4a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 801ef8c <__kernel_sinf+0x88>
 801ef4e:	eea7 6a27 	vfma.f32	s12, s14, s15
 801ef52:	eea6 0a26 	vfma.f32	s0, s12, s13
 801ef56:	4770      	bx	lr
 801ef58:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801ef5c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801ef60:	eee0 7a86 	vfma.f32	s15, s1, s12
 801ef64:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801ef68:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801ef90 <__kernel_sinf+0x8c>
 801ef6c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801ef70:	ee30 0a60 	vsub.f32	s0, s0, s1
 801ef74:	4770      	bx	lr
 801ef76:	bf00      	nop
 801ef78:	2f2ec9d3 	.word	0x2f2ec9d3
 801ef7c:	b2d72f34 	.word	0xb2d72f34
 801ef80:	3638ef1b 	.word	0x3638ef1b
 801ef84:	b9500d01 	.word	0xb9500d01
 801ef88:	3c088889 	.word	0x3c088889
 801ef8c:	be2aaaab 	.word	0xbe2aaaab
 801ef90:	3e2aaaab 	.word	0x3e2aaaab

0801ef94 <__ieee754_rem_pio2f>:
 801ef94:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ef96:	ee10 6a10 	vmov	r6, s0
 801ef9a:	4b88      	ldr	r3, [pc, #544]	@ (801f1bc <__ieee754_rem_pio2f+0x228>)
 801ef9c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 801efa0:	429d      	cmp	r5, r3
 801efa2:	b087      	sub	sp, #28
 801efa4:	4604      	mov	r4, r0
 801efa6:	d805      	bhi.n	801efb4 <__ieee754_rem_pio2f+0x20>
 801efa8:	2300      	movs	r3, #0
 801efaa:	ed80 0a00 	vstr	s0, [r0]
 801efae:	6043      	str	r3, [r0, #4]
 801efb0:	2000      	movs	r0, #0
 801efb2:	e022      	b.n	801effa <__ieee754_rem_pio2f+0x66>
 801efb4:	4b82      	ldr	r3, [pc, #520]	@ (801f1c0 <__ieee754_rem_pio2f+0x22c>)
 801efb6:	429d      	cmp	r5, r3
 801efb8:	d83a      	bhi.n	801f030 <__ieee754_rem_pio2f+0x9c>
 801efba:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801efbe:	2e00      	cmp	r6, #0
 801efc0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801f1c4 <__ieee754_rem_pio2f+0x230>
 801efc4:	4a80      	ldr	r2, [pc, #512]	@ (801f1c8 <__ieee754_rem_pio2f+0x234>)
 801efc6:	f023 030f 	bic.w	r3, r3, #15
 801efca:	dd18      	ble.n	801effe <__ieee754_rem_pio2f+0x6a>
 801efcc:	4293      	cmp	r3, r2
 801efce:	ee70 7a47 	vsub.f32	s15, s0, s14
 801efd2:	bf09      	itett	eq
 801efd4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801f1cc <__ieee754_rem_pio2f+0x238>
 801efd8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 801f1d0 <__ieee754_rem_pio2f+0x23c>
 801efdc:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801f1d4 <__ieee754_rem_pio2f+0x240>
 801efe0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801efe4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 801efe8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801efec:	ed80 7a00 	vstr	s14, [r0]
 801eff0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801eff4:	edc0 7a01 	vstr	s15, [r0, #4]
 801eff8:	2001      	movs	r0, #1
 801effa:	b007      	add	sp, #28
 801effc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801effe:	4293      	cmp	r3, r2
 801f000:	ee70 7a07 	vadd.f32	s15, s0, s14
 801f004:	bf09      	itett	eq
 801f006:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801f1cc <__ieee754_rem_pio2f+0x238>
 801f00a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 801f1d0 <__ieee754_rem_pio2f+0x23c>
 801f00e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801f1d4 <__ieee754_rem_pio2f+0x240>
 801f012:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801f016:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801f01a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f01e:	ed80 7a00 	vstr	s14, [r0]
 801f022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f026:	edc0 7a01 	vstr	s15, [r0, #4]
 801f02a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f02e:	e7e4      	b.n	801effa <__ieee754_rem_pio2f+0x66>
 801f030:	4b69      	ldr	r3, [pc, #420]	@ (801f1d8 <__ieee754_rem_pio2f+0x244>)
 801f032:	429d      	cmp	r5, r3
 801f034:	d873      	bhi.n	801f11e <__ieee754_rem_pio2f+0x18a>
 801f036:	f000 f8dd 	bl	801f1f4 <fabsf>
 801f03a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801f1dc <__ieee754_rem_pio2f+0x248>
 801f03e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801f042:	eee0 7a07 	vfma.f32	s15, s0, s14
 801f046:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f04a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f04e:	ee17 0a90 	vmov	r0, s15
 801f052:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801f1c4 <__ieee754_rem_pio2f+0x230>
 801f056:	eea7 0a67 	vfms.f32	s0, s14, s15
 801f05a:	281f      	cmp	r0, #31
 801f05c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801f1d0 <__ieee754_rem_pio2f+0x23c>
 801f060:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f064:	eeb1 6a47 	vneg.f32	s12, s14
 801f068:	ee70 6a67 	vsub.f32	s13, s0, s15
 801f06c:	ee16 1a90 	vmov	r1, s13
 801f070:	dc09      	bgt.n	801f086 <__ieee754_rem_pio2f+0xf2>
 801f072:	4a5b      	ldr	r2, [pc, #364]	@ (801f1e0 <__ieee754_rem_pio2f+0x24c>)
 801f074:	1e47      	subs	r7, r0, #1
 801f076:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801f07a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801f07e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801f082:	4293      	cmp	r3, r2
 801f084:	d107      	bne.n	801f096 <__ieee754_rem_pio2f+0x102>
 801f086:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801f08a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801f08e:	2a08      	cmp	r2, #8
 801f090:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801f094:	dc14      	bgt.n	801f0c0 <__ieee754_rem_pio2f+0x12c>
 801f096:	6021      	str	r1, [r4, #0]
 801f098:	ed94 7a00 	vldr	s14, [r4]
 801f09c:	ee30 0a47 	vsub.f32	s0, s0, s14
 801f0a0:	2e00      	cmp	r6, #0
 801f0a2:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f0a6:	ed84 0a01 	vstr	s0, [r4, #4]
 801f0aa:	daa6      	bge.n	801effa <__ieee754_rem_pio2f+0x66>
 801f0ac:	eeb1 7a47 	vneg.f32	s14, s14
 801f0b0:	eeb1 0a40 	vneg.f32	s0, s0
 801f0b4:	ed84 7a00 	vstr	s14, [r4]
 801f0b8:	ed84 0a01 	vstr	s0, [r4, #4]
 801f0bc:	4240      	negs	r0, r0
 801f0be:	e79c      	b.n	801effa <__ieee754_rem_pio2f+0x66>
 801f0c0:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801f1cc <__ieee754_rem_pio2f+0x238>
 801f0c4:	eef0 6a40 	vmov.f32	s13, s0
 801f0c8:	eee6 6a25 	vfma.f32	s13, s12, s11
 801f0cc:	ee70 7a66 	vsub.f32	s15, s0, s13
 801f0d0:	eee6 7a25 	vfma.f32	s15, s12, s11
 801f0d4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801f1d4 <__ieee754_rem_pio2f+0x240>
 801f0d8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801f0dc:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801f0e0:	ee15 2a90 	vmov	r2, s11
 801f0e4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801f0e8:	1a5b      	subs	r3, r3, r1
 801f0ea:	2b19      	cmp	r3, #25
 801f0ec:	dc04      	bgt.n	801f0f8 <__ieee754_rem_pio2f+0x164>
 801f0ee:	edc4 5a00 	vstr	s11, [r4]
 801f0f2:	eeb0 0a66 	vmov.f32	s0, s13
 801f0f6:	e7cf      	b.n	801f098 <__ieee754_rem_pio2f+0x104>
 801f0f8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801f1e4 <__ieee754_rem_pio2f+0x250>
 801f0fc:	eeb0 0a66 	vmov.f32	s0, s13
 801f100:	eea6 0a25 	vfma.f32	s0, s12, s11
 801f104:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801f108:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801f1e8 <__ieee754_rem_pio2f+0x254>
 801f10c:	eee6 7a25 	vfma.f32	s15, s12, s11
 801f110:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801f114:	ee30 7a67 	vsub.f32	s14, s0, s15
 801f118:	ed84 7a00 	vstr	s14, [r4]
 801f11c:	e7bc      	b.n	801f098 <__ieee754_rem_pio2f+0x104>
 801f11e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801f122:	d306      	bcc.n	801f132 <__ieee754_rem_pio2f+0x19e>
 801f124:	ee70 7a40 	vsub.f32	s15, s0, s0
 801f128:	edc0 7a01 	vstr	s15, [r0, #4]
 801f12c:	edc0 7a00 	vstr	s15, [r0]
 801f130:	e73e      	b.n	801efb0 <__ieee754_rem_pio2f+0x1c>
 801f132:	15ea      	asrs	r2, r5, #23
 801f134:	3a86      	subs	r2, #134	@ 0x86
 801f136:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801f13a:	ee07 3a90 	vmov	s15, r3
 801f13e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801f142:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801f1ec <__ieee754_rem_pio2f+0x258>
 801f146:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f14a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f14e:	ed8d 7a03 	vstr	s14, [sp, #12]
 801f152:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f156:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801f15a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f15e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f162:	ed8d 7a04 	vstr	s14, [sp, #16]
 801f166:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f16a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801f16e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f172:	edcd 7a05 	vstr	s15, [sp, #20]
 801f176:	d11e      	bne.n	801f1b6 <__ieee754_rem_pio2f+0x222>
 801f178:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801f17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f180:	bf0c      	ite	eq
 801f182:	2301      	moveq	r3, #1
 801f184:	2302      	movne	r3, #2
 801f186:	491a      	ldr	r1, [pc, #104]	@ (801f1f0 <__ieee754_rem_pio2f+0x25c>)
 801f188:	9101      	str	r1, [sp, #4]
 801f18a:	2102      	movs	r1, #2
 801f18c:	9100      	str	r1, [sp, #0]
 801f18e:	a803      	add	r0, sp, #12
 801f190:	4621      	mov	r1, r4
 801f192:	f000 f837 	bl	801f204 <__kernel_rem_pio2f>
 801f196:	2e00      	cmp	r6, #0
 801f198:	f6bf af2f 	bge.w	801effa <__ieee754_rem_pio2f+0x66>
 801f19c:	edd4 7a00 	vldr	s15, [r4]
 801f1a0:	eef1 7a67 	vneg.f32	s15, s15
 801f1a4:	edc4 7a00 	vstr	s15, [r4]
 801f1a8:	edd4 7a01 	vldr	s15, [r4, #4]
 801f1ac:	eef1 7a67 	vneg.f32	s15, s15
 801f1b0:	edc4 7a01 	vstr	s15, [r4, #4]
 801f1b4:	e782      	b.n	801f0bc <__ieee754_rem_pio2f+0x128>
 801f1b6:	2303      	movs	r3, #3
 801f1b8:	e7e5      	b.n	801f186 <__ieee754_rem_pio2f+0x1f2>
 801f1ba:	bf00      	nop
 801f1bc:	3f490fd8 	.word	0x3f490fd8
 801f1c0:	4016cbe3 	.word	0x4016cbe3
 801f1c4:	3fc90f80 	.word	0x3fc90f80
 801f1c8:	3fc90fd0 	.word	0x3fc90fd0
 801f1cc:	37354400 	.word	0x37354400
 801f1d0:	37354443 	.word	0x37354443
 801f1d4:	2e85a308 	.word	0x2e85a308
 801f1d8:	43490f80 	.word	0x43490f80
 801f1dc:	3f22f984 	.word	0x3f22f984
 801f1e0:	08021c98 	.word	0x08021c98
 801f1e4:	2e85a300 	.word	0x2e85a300
 801f1e8:	248d3132 	.word	0x248d3132
 801f1ec:	43800000 	.word	0x43800000
 801f1f0:	08021d18 	.word	0x08021d18

0801f1f4 <fabsf>:
 801f1f4:	ee10 3a10 	vmov	r3, s0
 801f1f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f1fc:	ee00 3a10 	vmov	s0, r3
 801f200:	4770      	bx	lr
	...

0801f204 <__kernel_rem_pio2f>:
 801f204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f208:	ed2d 8b04 	vpush	{d8-d9}
 801f20c:	b0d9      	sub	sp, #356	@ 0x164
 801f20e:	4690      	mov	r8, r2
 801f210:	9001      	str	r0, [sp, #4]
 801f212:	4ab9      	ldr	r2, [pc, #740]	@ (801f4f8 <__kernel_rem_pio2f+0x2f4>)
 801f214:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801f216:	f118 0f04 	cmn.w	r8, #4
 801f21a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801f21e:	460f      	mov	r7, r1
 801f220:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 801f224:	db27      	blt.n	801f276 <__kernel_rem_pio2f+0x72>
 801f226:	f1b8 0203 	subs.w	r2, r8, #3
 801f22a:	bf48      	it	mi
 801f22c:	f108 0204 	addmi.w	r2, r8, #4
 801f230:	10d2      	asrs	r2, r2, #3
 801f232:	1c55      	adds	r5, r2, #1
 801f234:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801f236:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 801f508 <__kernel_rem_pio2f+0x304>
 801f23a:	00e8      	lsls	r0, r5, #3
 801f23c:	eba2 060b 	sub.w	r6, r2, fp
 801f240:	9002      	str	r0, [sp, #8]
 801f242:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801f246:	eb0a 0c0b 	add.w	ip, sl, fp
 801f24a:	ac1c      	add	r4, sp, #112	@ 0x70
 801f24c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801f250:	2000      	movs	r0, #0
 801f252:	4560      	cmp	r0, ip
 801f254:	dd11      	ble.n	801f27a <__kernel_rem_pio2f+0x76>
 801f256:	a91c      	add	r1, sp, #112	@ 0x70
 801f258:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801f25c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801f260:	f04f 0c00 	mov.w	ip, #0
 801f264:	45d4      	cmp	ip, sl
 801f266:	dc27      	bgt.n	801f2b8 <__kernel_rem_pio2f+0xb4>
 801f268:	f8dd e004 	ldr.w	lr, [sp, #4]
 801f26c:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 801f508 <__kernel_rem_pio2f+0x304>
 801f270:	4606      	mov	r6, r0
 801f272:	2400      	movs	r4, #0
 801f274:	e016      	b.n	801f2a4 <__kernel_rem_pio2f+0xa0>
 801f276:	2200      	movs	r2, #0
 801f278:	e7db      	b.n	801f232 <__kernel_rem_pio2f+0x2e>
 801f27a:	42c6      	cmn	r6, r0
 801f27c:	bf5d      	ittte	pl
 801f27e:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801f282:	ee07 1a90 	vmovpl	s15, r1
 801f286:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801f28a:	eef0 7a47 	vmovmi.f32	s15, s14
 801f28e:	ece4 7a01 	vstmia	r4!, {s15}
 801f292:	3001      	adds	r0, #1
 801f294:	e7dd      	b.n	801f252 <__kernel_rem_pio2f+0x4e>
 801f296:	ecfe 6a01 	vldmia	lr!, {s13}
 801f29a:	ed96 7a00 	vldr	s14, [r6]
 801f29e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f2a2:	3401      	adds	r4, #1
 801f2a4:	455c      	cmp	r4, fp
 801f2a6:	f1a6 0604 	sub.w	r6, r6, #4
 801f2aa:	ddf4      	ble.n	801f296 <__kernel_rem_pio2f+0x92>
 801f2ac:	ece9 7a01 	vstmia	r9!, {s15}
 801f2b0:	f10c 0c01 	add.w	ip, ip, #1
 801f2b4:	3004      	adds	r0, #4
 801f2b6:	e7d5      	b.n	801f264 <__kernel_rem_pio2f+0x60>
 801f2b8:	a908      	add	r1, sp, #32
 801f2ba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f2be:	9104      	str	r1, [sp, #16]
 801f2c0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801f2c2:	eddf 8a90 	vldr	s17, [pc, #576]	@ 801f504 <__kernel_rem_pio2f+0x300>
 801f2c6:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 801f500 <__kernel_rem_pio2f+0x2fc>
 801f2ca:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801f2ce:	9203      	str	r2, [sp, #12]
 801f2d0:	4654      	mov	r4, sl
 801f2d2:	00a2      	lsls	r2, r4, #2
 801f2d4:	9205      	str	r2, [sp, #20]
 801f2d6:	aa58      	add	r2, sp, #352	@ 0x160
 801f2d8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801f2dc:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801f2e0:	a944      	add	r1, sp, #272	@ 0x110
 801f2e2:	aa08      	add	r2, sp, #32
 801f2e4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801f2e8:	4694      	mov	ip, r2
 801f2ea:	4626      	mov	r6, r4
 801f2ec:	2e00      	cmp	r6, #0
 801f2ee:	f1a0 0004 	sub.w	r0, r0, #4
 801f2f2:	dc4c      	bgt.n	801f38e <__kernel_rem_pio2f+0x18a>
 801f2f4:	4628      	mov	r0, r5
 801f2f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801f2fa:	f000 f9f5 	bl	801f6e8 <scalbnf>
 801f2fe:	eeb0 8a40 	vmov.f32	s16, s0
 801f302:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801f306:	ee28 0a00 	vmul.f32	s0, s16, s0
 801f30a:	f000 fa53 	bl	801f7b4 <floorf>
 801f30e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801f312:	eea0 8a67 	vfms.f32	s16, s0, s15
 801f316:	2d00      	cmp	r5, #0
 801f318:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f31c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801f320:	ee17 9a90 	vmov	r9, s15
 801f324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f328:	ee38 8a67 	vsub.f32	s16, s16, s15
 801f32c:	dd41      	ble.n	801f3b2 <__kernel_rem_pio2f+0x1ae>
 801f32e:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801f332:	a908      	add	r1, sp, #32
 801f334:	f1c5 0e08 	rsb	lr, r5, #8
 801f338:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801f33c:	fa46 f00e 	asr.w	r0, r6, lr
 801f340:	4481      	add	r9, r0
 801f342:	fa00 f00e 	lsl.w	r0, r0, lr
 801f346:	1a36      	subs	r6, r6, r0
 801f348:	f1c5 0007 	rsb	r0, r5, #7
 801f34c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801f350:	4106      	asrs	r6, r0
 801f352:	2e00      	cmp	r6, #0
 801f354:	dd3c      	ble.n	801f3d0 <__kernel_rem_pio2f+0x1cc>
 801f356:	f04f 0e00 	mov.w	lr, #0
 801f35a:	f109 0901 	add.w	r9, r9, #1
 801f35e:	4670      	mov	r0, lr
 801f360:	4574      	cmp	r4, lr
 801f362:	dc68      	bgt.n	801f436 <__kernel_rem_pio2f+0x232>
 801f364:	2d00      	cmp	r5, #0
 801f366:	dd03      	ble.n	801f370 <__kernel_rem_pio2f+0x16c>
 801f368:	2d01      	cmp	r5, #1
 801f36a:	d074      	beq.n	801f456 <__kernel_rem_pio2f+0x252>
 801f36c:	2d02      	cmp	r5, #2
 801f36e:	d07d      	beq.n	801f46c <__kernel_rem_pio2f+0x268>
 801f370:	2e02      	cmp	r6, #2
 801f372:	d12d      	bne.n	801f3d0 <__kernel_rem_pio2f+0x1cc>
 801f374:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801f378:	ee30 8a48 	vsub.f32	s16, s0, s16
 801f37c:	b340      	cbz	r0, 801f3d0 <__kernel_rem_pio2f+0x1cc>
 801f37e:	4628      	mov	r0, r5
 801f380:	9306      	str	r3, [sp, #24]
 801f382:	f000 f9b1 	bl	801f6e8 <scalbnf>
 801f386:	9b06      	ldr	r3, [sp, #24]
 801f388:	ee38 8a40 	vsub.f32	s16, s16, s0
 801f38c:	e020      	b.n	801f3d0 <__kernel_rem_pio2f+0x1cc>
 801f38e:	ee60 7a28 	vmul.f32	s15, s0, s17
 801f392:	3e01      	subs	r6, #1
 801f394:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f39c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801f3a0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f3a4:	ecac 0a01 	vstmia	ip!, {s0}
 801f3a8:	ed90 0a00 	vldr	s0, [r0]
 801f3ac:	ee37 0a80 	vadd.f32	s0, s15, s0
 801f3b0:	e79c      	b.n	801f2ec <__kernel_rem_pio2f+0xe8>
 801f3b2:	d105      	bne.n	801f3c0 <__kernel_rem_pio2f+0x1bc>
 801f3b4:	1e60      	subs	r0, r4, #1
 801f3b6:	a908      	add	r1, sp, #32
 801f3b8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801f3bc:	11f6      	asrs	r6, r6, #7
 801f3be:	e7c8      	b.n	801f352 <__kernel_rem_pio2f+0x14e>
 801f3c0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801f3c4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801f3c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3cc:	da31      	bge.n	801f432 <__kernel_rem_pio2f+0x22e>
 801f3ce:	2600      	movs	r6, #0
 801f3d0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801f3d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3d8:	f040 8098 	bne.w	801f50c <__kernel_rem_pio2f+0x308>
 801f3dc:	1e60      	subs	r0, r4, #1
 801f3de:	2200      	movs	r2, #0
 801f3e0:	4550      	cmp	r0, sl
 801f3e2:	da4b      	bge.n	801f47c <__kernel_rem_pio2f+0x278>
 801f3e4:	2a00      	cmp	r2, #0
 801f3e6:	d065      	beq.n	801f4b4 <__kernel_rem_pio2f+0x2b0>
 801f3e8:	3c01      	subs	r4, #1
 801f3ea:	ab08      	add	r3, sp, #32
 801f3ec:	3d08      	subs	r5, #8
 801f3ee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801f3f2:	2b00      	cmp	r3, #0
 801f3f4:	d0f8      	beq.n	801f3e8 <__kernel_rem_pio2f+0x1e4>
 801f3f6:	4628      	mov	r0, r5
 801f3f8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801f3fc:	f000 f974 	bl	801f6e8 <scalbnf>
 801f400:	1c63      	adds	r3, r4, #1
 801f402:	aa44      	add	r2, sp, #272	@ 0x110
 801f404:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801f504 <__kernel_rem_pio2f+0x300>
 801f408:	0099      	lsls	r1, r3, #2
 801f40a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801f40e:	4623      	mov	r3, r4
 801f410:	2b00      	cmp	r3, #0
 801f412:	f280 80a9 	bge.w	801f568 <__kernel_rem_pio2f+0x364>
 801f416:	4623      	mov	r3, r4
 801f418:	2b00      	cmp	r3, #0
 801f41a:	f2c0 80c7 	blt.w	801f5ac <__kernel_rem_pio2f+0x3a8>
 801f41e:	aa44      	add	r2, sp, #272	@ 0x110
 801f420:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801f424:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801f4fc <__kernel_rem_pio2f+0x2f8>
 801f428:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801f508 <__kernel_rem_pio2f+0x304>
 801f42c:	2000      	movs	r0, #0
 801f42e:	1ae2      	subs	r2, r4, r3
 801f430:	e0b1      	b.n	801f596 <__kernel_rem_pio2f+0x392>
 801f432:	2602      	movs	r6, #2
 801f434:	e78f      	b.n	801f356 <__kernel_rem_pio2f+0x152>
 801f436:	f852 1b04 	ldr.w	r1, [r2], #4
 801f43a:	b948      	cbnz	r0, 801f450 <__kernel_rem_pio2f+0x24c>
 801f43c:	b121      	cbz	r1, 801f448 <__kernel_rem_pio2f+0x244>
 801f43e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801f442:	f842 1c04 	str.w	r1, [r2, #-4]
 801f446:	2101      	movs	r1, #1
 801f448:	f10e 0e01 	add.w	lr, lr, #1
 801f44c:	4608      	mov	r0, r1
 801f44e:	e787      	b.n	801f360 <__kernel_rem_pio2f+0x15c>
 801f450:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801f454:	e7f5      	b.n	801f442 <__kernel_rem_pio2f+0x23e>
 801f456:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801f45a:	aa08      	add	r2, sp, #32
 801f45c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801f460:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801f464:	a908      	add	r1, sp, #32
 801f466:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801f46a:	e781      	b.n	801f370 <__kernel_rem_pio2f+0x16c>
 801f46c:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801f470:	aa08      	add	r2, sp, #32
 801f472:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801f476:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801f47a:	e7f3      	b.n	801f464 <__kernel_rem_pio2f+0x260>
 801f47c:	a908      	add	r1, sp, #32
 801f47e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801f482:	3801      	subs	r0, #1
 801f484:	430a      	orrs	r2, r1
 801f486:	e7ab      	b.n	801f3e0 <__kernel_rem_pio2f+0x1dc>
 801f488:	3201      	adds	r2, #1
 801f48a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801f48e:	2e00      	cmp	r6, #0
 801f490:	d0fa      	beq.n	801f488 <__kernel_rem_pio2f+0x284>
 801f492:	9905      	ldr	r1, [sp, #20]
 801f494:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801f498:	eb0d 0001 	add.w	r0, sp, r1
 801f49c:	18e6      	adds	r6, r4, r3
 801f49e:	a91c      	add	r1, sp, #112	@ 0x70
 801f4a0:	f104 0c01 	add.w	ip, r4, #1
 801f4a4:	384c      	subs	r0, #76	@ 0x4c
 801f4a6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801f4aa:	4422      	add	r2, r4
 801f4ac:	4562      	cmp	r2, ip
 801f4ae:	da04      	bge.n	801f4ba <__kernel_rem_pio2f+0x2b6>
 801f4b0:	4614      	mov	r4, r2
 801f4b2:	e70e      	b.n	801f2d2 <__kernel_rem_pio2f+0xce>
 801f4b4:	9804      	ldr	r0, [sp, #16]
 801f4b6:	2201      	movs	r2, #1
 801f4b8:	e7e7      	b.n	801f48a <__kernel_rem_pio2f+0x286>
 801f4ba:	9903      	ldr	r1, [sp, #12]
 801f4bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 801f4c0:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801f4c4:	9105      	str	r1, [sp, #20]
 801f4c6:	ee07 1a90 	vmov	s15, r1
 801f4ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f4ce:	2400      	movs	r4, #0
 801f4d0:	ece6 7a01 	vstmia	r6!, {s15}
 801f4d4:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801f508 <__kernel_rem_pio2f+0x304>
 801f4d8:	46b1      	mov	r9, r6
 801f4da:	455c      	cmp	r4, fp
 801f4dc:	dd04      	ble.n	801f4e8 <__kernel_rem_pio2f+0x2e4>
 801f4de:	ece0 7a01 	vstmia	r0!, {s15}
 801f4e2:	f10c 0c01 	add.w	ip, ip, #1
 801f4e6:	e7e1      	b.n	801f4ac <__kernel_rem_pio2f+0x2a8>
 801f4e8:	ecfe 6a01 	vldmia	lr!, {s13}
 801f4ec:	ed39 7a01 	vldmdb	r9!, {s14}
 801f4f0:	3401      	adds	r4, #1
 801f4f2:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f4f6:	e7f0      	b.n	801f4da <__kernel_rem_pio2f+0x2d6>
 801f4f8:	0802205c 	.word	0x0802205c
 801f4fc:	08022030 	.word	0x08022030
 801f500:	43800000 	.word	0x43800000
 801f504:	3b800000 	.word	0x3b800000
 801f508:	00000000 	.word	0x00000000
 801f50c:	9b02      	ldr	r3, [sp, #8]
 801f50e:	eeb0 0a48 	vmov.f32	s0, s16
 801f512:	eba3 0008 	sub.w	r0, r3, r8
 801f516:	f000 f8e7 	bl	801f6e8 <scalbnf>
 801f51a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801f500 <__kernel_rem_pio2f+0x2fc>
 801f51e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801f522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f526:	db19      	blt.n	801f55c <__kernel_rem_pio2f+0x358>
 801f528:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801f504 <__kernel_rem_pio2f+0x300>
 801f52c:	ee60 7a27 	vmul.f32	s15, s0, s15
 801f530:	aa08      	add	r2, sp, #32
 801f532:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f536:	3508      	adds	r5, #8
 801f538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f53c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801f540:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f544:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f548:	ee10 3a10 	vmov	r3, s0
 801f54c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801f550:	ee17 3a90 	vmov	r3, s15
 801f554:	3401      	adds	r4, #1
 801f556:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801f55a:	e74c      	b.n	801f3f6 <__kernel_rem_pio2f+0x1f2>
 801f55c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f560:	aa08      	add	r2, sp, #32
 801f562:	ee10 3a10 	vmov	r3, s0
 801f566:	e7f6      	b.n	801f556 <__kernel_rem_pio2f+0x352>
 801f568:	a808      	add	r0, sp, #32
 801f56a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801f56e:	9001      	str	r0, [sp, #4]
 801f570:	ee07 0a90 	vmov	s15, r0
 801f574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f578:	3b01      	subs	r3, #1
 801f57a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801f57e:	ee20 0a07 	vmul.f32	s0, s0, s14
 801f582:	ed62 7a01 	vstmdb	r2!, {s15}
 801f586:	e743      	b.n	801f410 <__kernel_rem_pio2f+0x20c>
 801f588:	ecfc 6a01 	vldmia	ip!, {s13}
 801f58c:	ecb5 7a01 	vldmia	r5!, {s14}
 801f590:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f594:	3001      	adds	r0, #1
 801f596:	4550      	cmp	r0, sl
 801f598:	dc01      	bgt.n	801f59e <__kernel_rem_pio2f+0x39a>
 801f59a:	4282      	cmp	r2, r0
 801f59c:	daf4      	bge.n	801f588 <__kernel_rem_pio2f+0x384>
 801f59e:	a858      	add	r0, sp, #352	@ 0x160
 801f5a0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801f5a4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801f5a8:	3b01      	subs	r3, #1
 801f5aa:	e735      	b.n	801f418 <__kernel_rem_pio2f+0x214>
 801f5ac:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801f5ae:	2b02      	cmp	r3, #2
 801f5b0:	dc09      	bgt.n	801f5c6 <__kernel_rem_pio2f+0x3c2>
 801f5b2:	2b00      	cmp	r3, #0
 801f5b4:	dc2b      	bgt.n	801f60e <__kernel_rem_pio2f+0x40a>
 801f5b6:	d044      	beq.n	801f642 <__kernel_rem_pio2f+0x43e>
 801f5b8:	f009 0007 	and.w	r0, r9, #7
 801f5bc:	b059      	add	sp, #356	@ 0x164
 801f5be:	ecbd 8b04 	vpop	{d8-d9}
 801f5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5c6:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801f5c8:	2b03      	cmp	r3, #3
 801f5ca:	d1f5      	bne.n	801f5b8 <__kernel_rem_pio2f+0x3b4>
 801f5cc:	aa30      	add	r2, sp, #192	@ 0xc0
 801f5ce:	1f0b      	subs	r3, r1, #4
 801f5d0:	4413      	add	r3, r2
 801f5d2:	461a      	mov	r2, r3
 801f5d4:	4620      	mov	r0, r4
 801f5d6:	2800      	cmp	r0, #0
 801f5d8:	f1a2 0204 	sub.w	r2, r2, #4
 801f5dc:	dc52      	bgt.n	801f684 <__kernel_rem_pio2f+0x480>
 801f5de:	4622      	mov	r2, r4
 801f5e0:	2a01      	cmp	r2, #1
 801f5e2:	f1a3 0304 	sub.w	r3, r3, #4
 801f5e6:	dc5d      	bgt.n	801f6a4 <__kernel_rem_pio2f+0x4a0>
 801f5e8:	ab30      	add	r3, sp, #192	@ 0xc0
 801f5ea:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 801f508 <__kernel_rem_pio2f+0x304>
 801f5ee:	440b      	add	r3, r1
 801f5f0:	2c01      	cmp	r4, #1
 801f5f2:	dc67      	bgt.n	801f6c4 <__kernel_rem_pio2f+0x4c0>
 801f5f4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801f5f8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801f5fc:	2e00      	cmp	r6, #0
 801f5fe:	d167      	bne.n	801f6d0 <__kernel_rem_pio2f+0x4cc>
 801f600:	edc7 6a00 	vstr	s13, [r7]
 801f604:	ed87 7a01 	vstr	s14, [r7, #4]
 801f608:	edc7 7a02 	vstr	s15, [r7, #8]
 801f60c:	e7d4      	b.n	801f5b8 <__kernel_rem_pio2f+0x3b4>
 801f60e:	ab30      	add	r3, sp, #192	@ 0xc0
 801f610:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 801f508 <__kernel_rem_pio2f+0x304>
 801f614:	440b      	add	r3, r1
 801f616:	4622      	mov	r2, r4
 801f618:	2a00      	cmp	r2, #0
 801f61a:	da24      	bge.n	801f666 <__kernel_rem_pio2f+0x462>
 801f61c:	b34e      	cbz	r6, 801f672 <__kernel_rem_pio2f+0x46e>
 801f61e:	eef1 7a47 	vneg.f32	s15, s14
 801f622:	edc7 7a00 	vstr	s15, [r7]
 801f626:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801f62a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f62e:	aa31      	add	r2, sp, #196	@ 0xc4
 801f630:	2301      	movs	r3, #1
 801f632:	429c      	cmp	r4, r3
 801f634:	da20      	bge.n	801f678 <__kernel_rem_pio2f+0x474>
 801f636:	b10e      	cbz	r6, 801f63c <__kernel_rem_pio2f+0x438>
 801f638:	eef1 7a67 	vneg.f32	s15, s15
 801f63c:	edc7 7a01 	vstr	s15, [r7, #4]
 801f640:	e7ba      	b.n	801f5b8 <__kernel_rem_pio2f+0x3b4>
 801f642:	ab30      	add	r3, sp, #192	@ 0xc0
 801f644:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 801f508 <__kernel_rem_pio2f+0x304>
 801f648:	440b      	add	r3, r1
 801f64a:	2c00      	cmp	r4, #0
 801f64c:	da05      	bge.n	801f65a <__kernel_rem_pio2f+0x456>
 801f64e:	b10e      	cbz	r6, 801f654 <__kernel_rem_pio2f+0x450>
 801f650:	eef1 7a67 	vneg.f32	s15, s15
 801f654:	edc7 7a00 	vstr	s15, [r7]
 801f658:	e7ae      	b.n	801f5b8 <__kernel_rem_pio2f+0x3b4>
 801f65a:	ed33 7a01 	vldmdb	r3!, {s14}
 801f65e:	3c01      	subs	r4, #1
 801f660:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f664:	e7f1      	b.n	801f64a <__kernel_rem_pio2f+0x446>
 801f666:	ed73 7a01 	vldmdb	r3!, {s15}
 801f66a:	3a01      	subs	r2, #1
 801f66c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f670:	e7d2      	b.n	801f618 <__kernel_rem_pio2f+0x414>
 801f672:	eef0 7a47 	vmov.f32	s15, s14
 801f676:	e7d4      	b.n	801f622 <__kernel_rem_pio2f+0x41e>
 801f678:	ecb2 7a01 	vldmia	r2!, {s14}
 801f67c:	3301      	adds	r3, #1
 801f67e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f682:	e7d6      	b.n	801f632 <__kernel_rem_pio2f+0x42e>
 801f684:	edd2 7a00 	vldr	s15, [r2]
 801f688:	edd2 6a01 	vldr	s13, [r2, #4]
 801f68c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801f690:	3801      	subs	r0, #1
 801f692:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f696:	ed82 7a00 	vstr	s14, [r2]
 801f69a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f69e:	edc2 7a01 	vstr	s15, [r2, #4]
 801f6a2:	e798      	b.n	801f5d6 <__kernel_rem_pio2f+0x3d2>
 801f6a4:	edd3 7a00 	vldr	s15, [r3]
 801f6a8:	edd3 6a01 	vldr	s13, [r3, #4]
 801f6ac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801f6b0:	3a01      	subs	r2, #1
 801f6b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f6b6:	ed83 7a00 	vstr	s14, [r3]
 801f6ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f6be:	edc3 7a01 	vstr	s15, [r3, #4]
 801f6c2:	e78d      	b.n	801f5e0 <__kernel_rem_pio2f+0x3dc>
 801f6c4:	ed33 7a01 	vldmdb	r3!, {s14}
 801f6c8:	3c01      	subs	r4, #1
 801f6ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f6ce:	e78f      	b.n	801f5f0 <__kernel_rem_pio2f+0x3ec>
 801f6d0:	eef1 6a66 	vneg.f32	s13, s13
 801f6d4:	eeb1 7a47 	vneg.f32	s14, s14
 801f6d8:	edc7 6a00 	vstr	s13, [r7]
 801f6dc:	ed87 7a01 	vstr	s14, [r7, #4]
 801f6e0:	eef1 7a67 	vneg.f32	s15, s15
 801f6e4:	e790      	b.n	801f608 <__kernel_rem_pio2f+0x404>
 801f6e6:	bf00      	nop

0801f6e8 <scalbnf>:
 801f6e8:	ee10 3a10 	vmov	r3, s0
 801f6ec:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801f6f0:	d02b      	beq.n	801f74a <scalbnf+0x62>
 801f6f2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801f6f6:	d302      	bcc.n	801f6fe <scalbnf+0x16>
 801f6f8:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f6fc:	4770      	bx	lr
 801f6fe:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801f702:	d123      	bne.n	801f74c <scalbnf+0x64>
 801f704:	4b24      	ldr	r3, [pc, #144]	@ (801f798 <scalbnf+0xb0>)
 801f706:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801f79c <scalbnf+0xb4>
 801f70a:	4298      	cmp	r0, r3
 801f70c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801f710:	db17      	blt.n	801f742 <scalbnf+0x5a>
 801f712:	ee10 3a10 	vmov	r3, s0
 801f716:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801f71a:	3a19      	subs	r2, #25
 801f71c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801f720:	4288      	cmp	r0, r1
 801f722:	dd15      	ble.n	801f750 <scalbnf+0x68>
 801f724:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801f7a0 <scalbnf+0xb8>
 801f728:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801f7a4 <scalbnf+0xbc>
 801f72c:	ee10 3a10 	vmov	r3, s0
 801f730:	eeb0 7a67 	vmov.f32	s14, s15
 801f734:	2b00      	cmp	r3, #0
 801f736:	bfb8      	it	lt
 801f738:	eef0 7a66 	vmovlt.f32	s15, s13
 801f73c:	ee27 0a87 	vmul.f32	s0, s15, s14
 801f740:	4770      	bx	lr
 801f742:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801f7a8 <scalbnf+0xc0>
 801f746:	ee27 0a80 	vmul.f32	s0, s15, s0
 801f74a:	4770      	bx	lr
 801f74c:	0dd2      	lsrs	r2, r2, #23
 801f74e:	e7e5      	b.n	801f71c <scalbnf+0x34>
 801f750:	4410      	add	r0, r2
 801f752:	28fe      	cmp	r0, #254	@ 0xfe
 801f754:	dce6      	bgt.n	801f724 <scalbnf+0x3c>
 801f756:	2800      	cmp	r0, #0
 801f758:	dd06      	ble.n	801f768 <scalbnf+0x80>
 801f75a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801f75e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801f762:	ee00 3a10 	vmov	s0, r3
 801f766:	4770      	bx	lr
 801f768:	f110 0f16 	cmn.w	r0, #22
 801f76c:	da09      	bge.n	801f782 <scalbnf+0x9a>
 801f76e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801f7a8 <scalbnf+0xc0>
 801f772:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801f7ac <scalbnf+0xc4>
 801f776:	ee10 3a10 	vmov	r3, s0
 801f77a:	eeb0 7a67 	vmov.f32	s14, s15
 801f77e:	2b00      	cmp	r3, #0
 801f780:	e7d9      	b.n	801f736 <scalbnf+0x4e>
 801f782:	3019      	adds	r0, #25
 801f784:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801f788:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801f78c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801f7b0 <scalbnf+0xc8>
 801f790:	ee07 3a90 	vmov	s15, r3
 801f794:	e7d7      	b.n	801f746 <scalbnf+0x5e>
 801f796:	bf00      	nop
 801f798:	ffff3cb0 	.word	0xffff3cb0
 801f79c:	4c000000 	.word	0x4c000000
 801f7a0:	7149f2ca 	.word	0x7149f2ca
 801f7a4:	f149f2ca 	.word	0xf149f2ca
 801f7a8:	0da24260 	.word	0x0da24260
 801f7ac:	8da24260 	.word	0x8da24260
 801f7b0:	33000000 	.word	0x33000000

0801f7b4 <floorf>:
 801f7b4:	ee10 3a10 	vmov	r3, s0
 801f7b8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801f7bc:	3a7f      	subs	r2, #127	@ 0x7f
 801f7be:	2a16      	cmp	r2, #22
 801f7c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801f7c4:	dc2b      	bgt.n	801f81e <floorf+0x6a>
 801f7c6:	2a00      	cmp	r2, #0
 801f7c8:	da12      	bge.n	801f7f0 <floorf+0x3c>
 801f7ca:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801f830 <floorf+0x7c>
 801f7ce:	ee30 0a27 	vadd.f32	s0, s0, s15
 801f7d2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f7d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7da:	dd06      	ble.n	801f7ea <floorf+0x36>
 801f7dc:	2b00      	cmp	r3, #0
 801f7de:	da24      	bge.n	801f82a <floorf+0x76>
 801f7e0:	2900      	cmp	r1, #0
 801f7e2:	4b14      	ldr	r3, [pc, #80]	@ (801f834 <floorf+0x80>)
 801f7e4:	bf08      	it	eq
 801f7e6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801f7ea:	ee00 3a10 	vmov	s0, r3
 801f7ee:	4770      	bx	lr
 801f7f0:	4911      	ldr	r1, [pc, #68]	@ (801f838 <floorf+0x84>)
 801f7f2:	4111      	asrs	r1, r2
 801f7f4:	420b      	tst	r3, r1
 801f7f6:	d0fa      	beq.n	801f7ee <floorf+0x3a>
 801f7f8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801f830 <floorf+0x7c>
 801f7fc:	ee30 0a27 	vadd.f32	s0, s0, s15
 801f800:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f808:	ddef      	ble.n	801f7ea <floorf+0x36>
 801f80a:	2b00      	cmp	r3, #0
 801f80c:	bfbe      	ittt	lt
 801f80e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801f812:	fa40 f202 	asrlt.w	r2, r0, r2
 801f816:	189b      	addlt	r3, r3, r2
 801f818:	ea23 0301 	bic.w	r3, r3, r1
 801f81c:	e7e5      	b.n	801f7ea <floorf+0x36>
 801f81e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801f822:	d3e4      	bcc.n	801f7ee <floorf+0x3a>
 801f824:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f828:	4770      	bx	lr
 801f82a:	2300      	movs	r3, #0
 801f82c:	e7dd      	b.n	801f7ea <floorf+0x36>
 801f82e:	bf00      	nop
 801f830:	7149f2ca 	.word	0x7149f2ca
 801f834:	bf800000 	.word	0xbf800000
 801f838:	007fffff 	.word	0x007fffff

0801f83c <_init>:
 801f83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f83e:	bf00      	nop
 801f840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f842:	bc08      	pop	{r3}
 801f844:	469e      	mov	lr, r3
 801f846:	4770      	bx	lr

0801f848 <_fini>:
 801f848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f84a:	bf00      	nop
 801f84c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f84e:	bc08      	pop	{r3}
 801f850:	469e      	mov	lr, r3
 801f852:	4770      	bx	lr
