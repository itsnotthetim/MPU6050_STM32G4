
IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f984  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002990  0801fb68  0801fb68  00020b68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080224f8  080224f8  00027520  2**0
                  CONTENTS
  4 .ARM          00000008  080224f8  080224f8  000234f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022500  08022500  00027520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  08022500  08022500  00023500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08022518  08022518  00023518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00003520  20000000  0802251c  00024000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c4e8  20003520  08025a3c  00027520  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000fa08  08025a3c  00027a08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00027520  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c7f0  00000000  00000000  00027550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000645f  00000000  00000000  00053d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb0  00000000  00000000  0005a1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017e8  00000000  00000000  0005c150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002eb9b  00000000  00000000  0005d938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b1ab  00000000  00000000  0008c4d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011e718  00000000  00000000  000b767e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000de  00000000  00000000  001d5d96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009550  00000000  00000000  001d5e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001df3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000016fd  00000000  00000000  001df41d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000060  00000000  00000000  001e0b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20003520 	.word	0x20003520
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801fb4c 	.word	0x0801fb4c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20003524 	.word	0x20003524
 800021c:	0801fb4c 	.word	0x0801fb4c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_ldivmod>:
 8000c68:	b97b      	cbnz	r3, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6a:	b972      	cbnz	r2, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bfbe      	ittt	lt
 8000c70:	2000      	movlt	r0, #0
 8000c72:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c76:	e006      	blt.n	8000c86 <__aeabi_ldivmod+0x1e>
 8000c78:	bf08      	it	eq
 8000c7a:	2800      	cmpeq	r0, #0
 8000c7c:	bf1c      	itt	ne
 8000c7e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c82:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c86:	f000 b9b5 	b.w	8000ff4 <__aeabi_idiv0>
 8000c8a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c92:	2900      	cmp	r1, #0
 8000c94:	db09      	blt.n	8000caa <__aeabi_ldivmod+0x42>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db1a      	blt.n	8000cd0 <__aeabi_ldivmod+0x68>
 8000c9a:	f000 f84d 	bl	8000d38 <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4770      	bx	lr
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db1b      	blt.n	8000cec <__aeabi_ldivmod+0x84>
 8000cb4:	f000 f840 	bl	8000d38 <__udivmoddi4>
 8000cb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc0:	b004      	add	sp, #16
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	4252      	negs	r2, r2
 8000cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f82f 	bl	8000d38 <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4240      	negs	r0, r0
 8000ce6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cea:	4770      	bx	lr
 8000cec:	4252      	negs	r2, r2
 8000cee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf2:	f000 f821 	bl	8000d38 <__udivmoddi4>
 8000cf6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfe:	b004      	add	sp, #16
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_uldivmod>:
 8000d08:	b953      	cbnz	r3, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0a:	b94a      	cbnz	r2, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	bf08      	it	eq
 8000d10:	2800      	cmpeq	r0, #0
 8000d12:	bf1c      	itt	ne
 8000d14:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d18:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d1c:	f000 b96a 	b.w	8000ff4 <__aeabi_idiv0>
 8000d20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d28:	f000 f806 	bl	8000d38 <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9d08      	ldr	r5, [sp, #32]
 8000d3e:	460c      	mov	r4, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14e      	bne.n	8000de2 <__udivmoddi4+0xaa>
 8000d44:	4694      	mov	ip, r2
 8000d46:	458c      	cmp	ip, r1
 8000d48:	4686      	mov	lr, r0
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	d962      	bls.n	8000e16 <__udivmoddi4+0xde>
 8000d50:	b14a      	cbz	r2, 8000d66 <__udivmoddi4+0x2e>
 8000d52:	f1c2 0320 	rsb	r3, r2, #32
 8000d56:	4091      	lsls	r1, r2
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d60:	4319      	orrs	r1, r3
 8000d62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6a:	fa1f f68c 	uxth.w	r6, ip
 8000d6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d76:	fb07 1114 	mls	r1, r7, r4, r1
 8000d7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7e:	fb04 f106 	mul.w	r1, r4, r6
 8000d82:	4299      	cmp	r1, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x64>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d8e:	f080 8112 	bcs.w	8000fb6 <__udivmoddi4+0x27e>
 8000d92:	4299      	cmp	r1, r3
 8000d94:	f240 810f 	bls.w	8000fb6 <__udivmoddi4+0x27e>
 8000d98:	3c02      	subs	r4, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	fa1f f38e 	uxth.w	r3, lr
 8000da2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da6:	fb07 1110 	mls	r1, r7, r0, r1
 8000daa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dae:	fb00 f606 	mul.w	r6, r0, r6
 8000db2:	429e      	cmp	r6, r3
 8000db4:	d90a      	bls.n	8000dcc <__udivmoddi4+0x94>
 8000db6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dba:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dbe:	f080 80fc 	bcs.w	8000fba <__udivmoddi4+0x282>
 8000dc2:	429e      	cmp	r6, r3
 8000dc4:	f240 80f9 	bls.w	8000fba <__udivmoddi4+0x282>
 8000dc8:	4463      	add	r3, ip
 8000dca:	3802      	subs	r0, #2
 8000dcc:	1b9b      	subs	r3, r3, r6
 8000dce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	b11d      	cbz	r5, 8000dde <__udivmoddi4+0xa6>
 8000dd6:	40d3      	lsrs	r3, r2
 8000dd8:	2200      	movs	r2, #0
 8000dda:	e9c5 3200 	strd	r3, r2, [r5]
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d905      	bls.n	8000df2 <__udivmoddi4+0xba>
 8000de6:	b10d      	cbz	r5, 8000dec <__udivmoddi4+0xb4>
 8000de8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dec:	2100      	movs	r1, #0
 8000dee:	4608      	mov	r0, r1
 8000df0:	e7f5      	b.n	8000dde <__udivmoddi4+0xa6>
 8000df2:	fab3 f183 	clz	r1, r3
 8000df6:	2900      	cmp	r1, #0
 8000df8:	d146      	bne.n	8000e88 <__udivmoddi4+0x150>
 8000dfa:	42a3      	cmp	r3, r4
 8000dfc:	d302      	bcc.n	8000e04 <__udivmoddi4+0xcc>
 8000dfe:	4290      	cmp	r0, r2
 8000e00:	f0c0 80f0 	bcc.w	8000fe4 <__udivmoddi4+0x2ac>
 8000e04:	1a86      	subs	r6, r0, r2
 8000e06:	eb64 0303 	sbc.w	r3, r4, r3
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	2d00      	cmp	r5, #0
 8000e0e:	d0e6      	beq.n	8000dde <__udivmoddi4+0xa6>
 8000e10:	e9c5 6300 	strd	r6, r3, [r5]
 8000e14:	e7e3      	b.n	8000dde <__udivmoddi4+0xa6>
 8000e16:	2a00      	cmp	r2, #0
 8000e18:	f040 8090 	bne.w	8000f3c <__udivmoddi4+0x204>
 8000e1c:	eba1 040c 	sub.w	r4, r1, ip
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa1f f78c 	uxth.w	r7, ip
 8000e28:	2101      	movs	r1, #1
 8000e2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e32:	fb08 4416 	mls	r4, r8, r6, r4
 8000e36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e3a:	fb07 f006 	mul.w	r0, r7, r6
 8000e3e:	4298      	cmp	r0, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x11c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x11a>
 8000e4c:	4298      	cmp	r0, r3
 8000e4e:	f200 80cd 	bhi.w	8000fec <__udivmoddi4+0x2b4>
 8000e52:	4626      	mov	r6, r4
 8000e54:	1a1c      	subs	r4, r3, r0
 8000e56:	fa1f f38e 	uxth.w	r3, lr
 8000e5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb00 f707 	mul.w	r7, r0, r7
 8000e6a:	429f      	cmp	r7, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x148>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x146>
 8000e78:	429f      	cmp	r7, r3
 8000e7a:	f200 80b0 	bhi.w	8000fde <__udivmoddi4+0x2a6>
 8000e7e:	4620      	mov	r0, r4
 8000e80:	1bdb      	subs	r3, r3, r7
 8000e82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0x9c>
 8000e88:	f1c1 0620 	rsb	r6, r1, #32
 8000e8c:	408b      	lsls	r3, r1
 8000e8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e92:	431f      	orrs	r7, r3
 8000e94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e98:	fa04 f301 	lsl.w	r3, r4, r1
 8000e9c:	ea43 030c 	orr.w	r3, r3, ip
 8000ea0:	40f4      	lsrs	r4, r6
 8000ea2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea6:	0c38      	lsrs	r0, r7, #16
 8000ea8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eac:	fbb4 fef0 	udiv	lr, r4, r0
 8000eb0:	fa1f fc87 	uxth.w	ip, r7
 8000eb4:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ebc:	fb0e f90c 	mul.w	r9, lr, ip
 8000ec0:	45a1      	cmp	r9, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	d90a      	bls.n	8000ede <__udivmoddi4+0x1a6>
 8000ec8:	193c      	adds	r4, r7, r4
 8000eca:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000ece:	f080 8084 	bcs.w	8000fda <__udivmoddi4+0x2a2>
 8000ed2:	45a1      	cmp	r9, r4
 8000ed4:	f240 8081 	bls.w	8000fda <__udivmoddi4+0x2a2>
 8000ed8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000edc:	443c      	add	r4, r7
 8000ede:	eba4 0409 	sub.w	r4, r4, r9
 8000ee2:	fa1f f983 	uxth.w	r9, r3
 8000ee6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eea:	fb00 4413 	mls	r4, r0, r3, r4
 8000eee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef6:	45a4      	cmp	ip, r4
 8000ef8:	d907      	bls.n	8000f0a <__udivmoddi4+0x1d2>
 8000efa:	193c      	adds	r4, r7, r4
 8000efc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f00:	d267      	bcs.n	8000fd2 <__udivmoddi4+0x29a>
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d965      	bls.n	8000fd2 <__udivmoddi4+0x29a>
 8000f06:	3b02      	subs	r3, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f12:	eba4 040c 	sub.w	r4, r4, ip
 8000f16:	429c      	cmp	r4, r3
 8000f18:	46ce      	mov	lr, r9
 8000f1a:	469c      	mov	ip, r3
 8000f1c:	d351      	bcc.n	8000fc2 <__udivmoddi4+0x28a>
 8000f1e:	d04e      	beq.n	8000fbe <__udivmoddi4+0x286>
 8000f20:	b155      	cbz	r5, 8000f38 <__udivmoddi4+0x200>
 8000f22:	ebb8 030e 	subs.w	r3, r8, lr
 8000f26:	eb64 040c 	sbc.w	r4, r4, ip
 8000f2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2e:	40cb      	lsrs	r3, r1
 8000f30:	431e      	orrs	r6, r3
 8000f32:	40cc      	lsrs	r4, r1
 8000f34:	e9c5 6400 	strd	r6, r4, [r5]
 8000f38:	2100      	movs	r1, #0
 8000f3a:	e750      	b.n	8000dde <__udivmoddi4+0xa6>
 8000f3c:	f1c2 0320 	rsb	r3, r2, #32
 8000f40:	fa20 f103 	lsr.w	r1, r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa24 f303 	lsr.w	r3, r4, r3
 8000f4c:	4094      	lsls	r4, r2
 8000f4e:	430c      	orrs	r4, r1
 8000f50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f58:	fa1f f78c 	uxth.w	r7, ip
 8000f5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f60:	fb08 3110 	mls	r1, r8, r0, r3
 8000f64:	0c23      	lsrs	r3, r4, #16
 8000f66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f6a:	fb00 f107 	mul.w	r1, r0, r7
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x24c>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f7a:	d22c      	bcs.n	8000fd6 <__udivmoddi4+0x29e>
 8000f7c:	4299      	cmp	r1, r3
 8000f7e:	d92a      	bls.n	8000fd6 <__udivmoddi4+0x29e>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1a5b      	subs	r3, r3, r1
 8000f86:	b2a4      	uxth	r4, r4
 8000f88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f94:	fb01 f307 	mul.w	r3, r1, r7
 8000f98:	42a3      	cmp	r3, r4
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x276>
 8000f9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fa4:	d213      	bcs.n	8000fce <__udivmoddi4+0x296>
 8000fa6:	42a3      	cmp	r3, r4
 8000fa8:	d911      	bls.n	8000fce <__udivmoddi4+0x296>
 8000faa:	3902      	subs	r1, #2
 8000fac:	4464      	add	r4, ip
 8000fae:	1ae4      	subs	r4, r4, r3
 8000fb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb4:	e739      	b.n	8000e2a <__udivmoddi4+0xf2>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	e6f0      	b.n	8000d9c <__udivmoddi4+0x64>
 8000fba:	4608      	mov	r0, r1
 8000fbc:	e706      	b.n	8000dcc <__udivmoddi4+0x94>
 8000fbe:	45c8      	cmp	r8, r9
 8000fc0:	d2ae      	bcs.n	8000f20 <__udivmoddi4+0x1e8>
 8000fc2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fca:	3801      	subs	r0, #1
 8000fcc:	e7a8      	b.n	8000f20 <__udivmoddi4+0x1e8>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	e7ed      	b.n	8000fae <__udivmoddi4+0x276>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	e799      	b.n	8000f0a <__udivmoddi4+0x1d2>
 8000fd6:	4630      	mov	r0, r6
 8000fd8:	e7d4      	b.n	8000f84 <__udivmoddi4+0x24c>
 8000fda:	46d6      	mov	lr, sl
 8000fdc:	e77f      	b.n	8000ede <__udivmoddi4+0x1a6>
 8000fde:	4463      	add	r3, ip
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	e74d      	b.n	8000e80 <__udivmoddi4+0x148>
 8000fe4:	4606      	mov	r6, r0
 8000fe6:	4623      	mov	r3, r4
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e70f      	b.n	8000e0c <__udivmoddi4+0xd4>
 8000fec:	3e02      	subs	r6, #2
 8000fee:	4463      	add	r3, ip
 8000ff0:	e730      	b.n	8000e54 <__udivmoddi4+0x11c>
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ffc:	4a04      	ldr	r2, [pc, #16]	@ (8001010 <MX_FREERTOS_Init+0x18>)
 8000ffe:	2100      	movs	r1, #0
 8001000:	4804      	ldr	r0, [pc, #16]	@ (8001014 <MX_FREERTOS_Init+0x1c>)
 8001002:	f008 fa15 	bl	8009430 <osThreadNew>
 8001006:	4603      	mov	r3, r0
 8001008:	4a03      	ldr	r2, [pc, #12]	@ (8001018 <MX_FREERTOS_Init+0x20>)
 800100a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	0801fd10 	.word	0x0801fd10
 8001014:	08002ed9 	.word	0x08002ed9
 8001018:	2000353c 	.word	0x2000353c

0800101c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	@ 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001028:	f009 fad6 	bl	800a5d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800102c:	4b5a      	ldr	r3, [pc, #360]	@ (8001198 <pvPortMallocMicroROS+0x17c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d101      	bne.n	8001038 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001034:	f000 f986 	bl	8001344 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001038:	4b58      	ldr	r3, [pc, #352]	@ (800119c <pvPortMallocMicroROS+0x180>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4013      	ands	r3, r2
 8001040:	2b00      	cmp	r3, #0
 8001042:	f040 8090 	bne.w	8001166 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d01e      	beq.n	800108a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800104c:	2208      	movs	r2, #8
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	2b00      	cmp	r3, #0
 800105c:	d015      	beq.n	800108a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f023 0307 	bic.w	r3, r3, #7
 8001064:	3308      	adds	r3, #8
 8001066:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00b      	beq.n	800108a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001076:	f383 8811 	msr	BASEPRI, r3
 800107a:	f3bf 8f6f 	isb	sy
 800107e:	f3bf 8f4f 	dsb	sy
 8001082:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	e7fd      	b.n	8001086 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d06a      	beq.n	8001166 <pvPortMallocMicroROS+0x14a>
 8001090:	4b43      	ldr	r3, [pc, #268]	@ (80011a0 <pvPortMallocMicroROS+0x184>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	429a      	cmp	r2, r3
 8001098:	d865      	bhi.n	8001166 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800109a:	4b42      	ldr	r3, [pc, #264]	@ (80011a4 <pvPortMallocMicroROS+0x188>)
 800109c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800109e:	4b41      	ldr	r3, [pc, #260]	@ (80011a4 <pvPortMallocMicroROS+0x188>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80010a4:	e004      	b.n	80010b0 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80010a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80010aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80010b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d903      	bls.n	80010c2 <pvPortMallocMicroROS+0xa6>
 80010ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f1      	bne.n	80010a6 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80010c2:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <pvPortMallocMicroROS+0x17c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d04c      	beq.n	8001166 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80010cc:	6a3b      	ldr	r3, [r7, #32]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2208      	movs	r2, #8
 80010d2:	4413      	add	r3, r2
 80010d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80010d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	6a3b      	ldr	r3, [r7, #32]
 80010dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80010de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	1ad2      	subs	r2, r2, r3
 80010e6:	2308      	movs	r3, #8
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d920      	bls.n	8001130 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80010ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4413      	add	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00b      	beq.n	8001118 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001104:	f383 8811 	msr	BASEPRI, r3
 8001108:	f3bf 8f6f 	isb	sy
 800110c:	f3bf 8f4f 	dsb	sy
 8001110:	613b      	str	r3, [r7, #16]
}
 8001112:	bf00      	nop
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	1ad2      	subs	r2, r2, r3
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800112a:	69b8      	ldr	r0, [r7, #24]
 800112c:	f000 f96c 	bl	8001408 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001130:	4b1b      	ldr	r3, [pc, #108]	@ (80011a0 <pvPortMallocMicroROS+0x184>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	4a19      	ldr	r2, [pc, #100]	@ (80011a0 <pvPortMallocMicroROS+0x184>)
 800113c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800113e:	4b18      	ldr	r3, [pc, #96]	@ (80011a0 <pvPortMallocMicroROS+0x184>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <pvPortMallocMicroROS+0x18c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	429a      	cmp	r2, r3
 8001148:	d203      	bcs.n	8001152 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800114a:	4b15      	ldr	r3, [pc, #84]	@ (80011a0 <pvPortMallocMicroROS+0x184>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a16      	ldr	r2, [pc, #88]	@ (80011a8 <pvPortMallocMicroROS+0x18c>)
 8001150:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	4b11      	ldr	r3, [pc, #68]	@ (800119c <pvPortMallocMicroROS+0x180>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	431a      	orrs	r2, r3
 800115c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001166:	f009 fa45 	bl	800a5f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	2b00      	cmp	r3, #0
 8001172:	d00b      	beq.n	800118c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001178:	f383 8811 	msr	BASEPRI, r3
 800117c:	f3bf 8f6f 	isb	sy
 8001180:	f3bf 8f4f 	dsb	sy
 8001184:	60fb      	str	r3, [r7, #12]
}
 8001186:	bf00      	nop
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 800118c:	69fb      	ldr	r3, [r7, #28]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3728      	adds	r7, #40	@ 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20007084 	.word	0x20007084
 800119c:	20007090 	.word	0x20007090
 80011a0:	20007088 	.word	0x20007088
 80011a4:	2000707c 	.word	0x2000707c
 80011a8:	2000708c 	.word	0x2000708c

080011ac <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d04a      	beq.n	8001254 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80011be:	2308      	movs	r3, #8
 80011c0:	425b      	negs	r3, r3
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	4413      	add	r3, r2
 80011c6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	4b22      	ldr	r3, [pc, #136]	@ (800125c <vPortFreeMicroROS+0xb0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4013      	ands	r3, r2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d10b      	bne.n	80011f2 <vPortFreeMicroROS+0x46>
	__asm volatile
 80011da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011de:	f383 8811 	msr	BASEPRI, r3
 80011e2:	f3bf 8f6f 	isb	sy
 80011e6:	f3bf 8f4f 	dsb	sy
 80011ea:	60fb      	str	r3, [r7, #12]
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	e7fd      	b.n	80011ee <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00b      	beq.n	8001212 <vPortFreeMicroROS+0x66>
	__asm volatile
 80011fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011fe:	f383 8811 	msr	BASEPRI, r3
 8001202:	f3bf 8f6f 	isb	sy
 8001206:	f3bf 8f4f 	dsb	sy
 800120a:	60bb      	str	r3, [r7, #8]
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	e7fd      	b.n	800120e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <vPortFreeMicroROS+0xb0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4013      	ands	r3, r2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d019      	beq.n	8001254 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d115      	bne.n	8001254 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <vPortFreeMicroROS+0xb0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	43db      	mvns	r3, r3
 8001232:	401a      	ands	r2, r3
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001238:	f009 f9ce 	bl	800a5d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <vPortFreeMicroROS+0xb4>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4413      	add	r3, r2
 8001246:	4a06      	ldr	r2, [pc, #24]	@ (8001260 <vPortFreeMicroROS+0xb4>)
 8001248:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800124a:	6938      	ldr	r0, [r7, #16]
 800124c:	f000 f8dc 	bl	8001408 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001250:	f009 f9d0 	bl	800a5f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001254:	bf00      	nop
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20007090 	.word	0x20007090
 8001260:	20007088 	.word	0x20007088

08001264 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001264:	b480      	push	{r7}
 8001266:	b087      	sub	sp, #28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001270:	2308      	movs	r3, #8
 8001272:	425b      	negs	r3, r3
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	4413      	add	r3, r2
 8001278:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	4b06      	ldr	r3, [pc, #24]	@ (800129c <getBlockSize+0x38>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	43db      	mvns	r3, r3
 8001288:	4013      	ands	r3, r2
 800128a:	60fb      	str	r3, [r7, #12]

	return count;
 800128c:	68fb      	ldr	r3, [r7, #12]
}
 800128e:	4618      	mov	r0, r3
 8001290:	371c      	adds	r7, #28
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20007090 	.word	0x20007090

080012a0 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80012aa:	f009 f995 	bl	800a5d8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80012ae:	6838      	ldr	r0, [r7, #0]
 80012b0:	f7ff feb4 	bl	800101c <pvPortMallocMicroROS>
 80012b4:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d017      	beq.n	80012ec <pvPortReallocMicroROS+0x4c>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d014      	beq.n	80012ec <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ffce 	bl	8001264 <getBlockSize>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2208      	movs	r2, #8
 80012cc:	1a9b      	subs	r3, r3, r2
 80012ce:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d201      	bcs.n	80012dc <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	68b8      	ldr	r0, [r7, #8]
 80012e2:	f01c fd04 	bl	801dcee <memcpy>

		vPortFreeMicroROS(pv);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ff60 	bl	80011ac <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80012ec:	f009 f982 	bl	800a5f4 <xTaskResumeAll>

	return newmem;
 80012f0:	68bb      	ldr	r3, [r7, #8]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001304:	f009 f968 	bl	800a5d8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	fb02 f303 	mul.w	r3, r2, r3
 8001310:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001312:	6978      	ldr	r0, [r7, #20]
 8001314:	f7ff fe82 	bl	800101c <pvPortMallocMicroROS>
 8001318:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	613b      	str	r3, [r7, #16]

  	while(count--)
 800131e:	e004      	b.n	800132a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	613a      	str	r2, [r7, #16]
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	1e5a      	subs	r2, r3, #1
 800132e:	617a      	str	r2, [r7, #20]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1f5      	bne.n	8001320 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001334:	f009 f95e 	bl	800a5f4 <xTaskResumeAll>
  	return mem;
 8001338:	68fb      	ldr	r3, [r7, #12]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800134a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800134e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001350:	4b27      	ldr	r3, [pc, #156]	@ (80013f0 <prvHeapInit+0xac>)
 8001352:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00c      	beq.n	8001378 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	3307      	adds	r3, #7
 8001362:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f023 0307 	bic.w	r3, r3, #7
 800136a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	4a1f      	ldr	r2, [pc, #124]	@ (80013f0 <prvHeapInit+0xac>)
 8001374:	4413      	add	r3, r2
 8001376:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800137c:	4a1d      	ldr	r2, [pc, #116]	@ (80013f4 <prvHeapInit+0xb0>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001382:	4b1c      	ldr	r3, [pc, #112]	@ (80013f4 <prvHeapInit+0xb0>)
 8001384:	2200      	movs	r2, #0
 8001386:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	4413      	add	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001390:	2208      	movs	r2, #8
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	1a9b      	subs	r3, r3, r2
 8001396:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f023 0307 	bic.w	r3, r3, #7
 800139e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4a15      	ldr	r2, [pc, #84]	@ (80013f8 <prvHeapInit+0xb4>)
 80013a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80013a6:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <prvHeapInit+0xb4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2200      	movs	r2, #0
 80013ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80013ae:	4b12      	ldr	r3, [pc, #72]	@ (80013f8 <prvHeapInit+0xb4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	1ad2      	subs	r2, r2, r3
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80013c4:	4b0c      	ldr	r3, [pc, #48]	@ (80013f8 <prvHeapInit+0xb4>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	4a0a      	ldr	r2, [pc, #40]	@ (80013fc <prvHeapInit+0xb8>)
 80013d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	4a09      	ldr	r2, [pc, #36]	@ (8001400 <prvHeapInit+0xbc>)
 80013da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80013dc:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <prvHeapInit+0xc0>)
 80013de:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80013e2:	601a      	str	r2, [r3, #0]
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	2000647c 	.word	0x2000647c
 80013f4:	2000707c 	.word	0x2000707c
 80013f8:	20007084 	.word	0x20007084
 80013fc:	2000708c 	.word	0x2000708c
 8001400:	20007088 	.word	0x20007088
 8001404:	20007090 	.word	0x20007090

08001408 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001410:	4b28      	ldr	r3, [pc, #160]	@ (80014b4 <prvInsertBlockIntoFreeList+0xac>)
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	e002      	b.n	800141c <prvInsertBlockIntoFreeList+0x14>
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	429a      	cmp	r2, r3
 8001424:	d8f7      	bhi.n	8001416 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	4413      	add	r3, r2
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	429a      	cmp	r2, r3
 8001436:	d108      	bne.n	800144a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	441a      	add	r2, r3
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	441a      	add	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d118      	bne.n	8001490 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <prvInsertBlockIntoFreeList+0xb0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	429a      	cmp	r2, r3
 8001468:	d00d      	beq.n	8001486 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	441a      	add	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	e008      	b.n	8001498 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001486:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <prvInsertBlockIntoFreeList+0xb0>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	e003      	b.n	8001498 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	429a      	cmp	r2, r3
 800149e:	d002      	beq.n	80014a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80014a6:	bf00      	nop
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	2000707c 	.word	0x2000707c
 80014b8:	20007084 	.word	0x20007084

080014bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80014c2:	4b1e      	ldr	r3, [pc, #120]	@ (800153c <MX_DMA_Init+0x80>)
 80014c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014c6:	4a1d      	ldr	r2, [pc, #116]	@ (800153c <MX_DMA_Init+0x80>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	6493      	str	r3, [r2, #72]	@ 0x48
 80014ce:	4b1b      	ldr	r3, [pc, #108]	@ (800153c <MX_DMA_Init+0x80>)
 80014d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014da:	4b18      	ldr	r3, [pc, #96]	@ (800153c <MX_DMA_Init+0x80>)
 80014dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014de:	4a17      	ldr	r2, [pc, #92]	@ (800153c <MX_DMA_Init+0x80>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6493      	str	r3, [r2, #72]	@ 0x48
 80014e6:	4b15      	ldr	r3, [pc, #84]	@ (800153c <MX_DMA_Init+0x80>)
 80014e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2105      	movs	r1, #5
 80014f6:	200b      	movs	r0, #11
 80014f8:	f002 fd39 	bl	8003f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014fc:	200b      	movs	r0, #11
 80014fe:	f002 fd50 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2105      	movs	r1, #5
 8001506:	200c      	movs	r0, #12
 8001508:	f002 fd31 	bl	8003f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800150c:	200c      	movs	r0, #12
 800150e:	f002 fd48 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	2105      	movs	r1, #5
 8001516:	200d      	movs	r0, #13
 8001518:	f002 fd29 	bl	8003f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800151c:	200d      	movs	r0, #13
 800151e:	f002 fd40 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2105      	movs	r1, #5
 8001526:	200e      	movs	r0, #14
 8001528:	f002 fd21 	bl	8003f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800152c:	200e      	movs	r0, #14
 800152e:	f002 fd38 	bl	8003fa2 <HAL_NVIC_EnableIRQ>

}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000

08001540 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800154e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001550:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001554:	4904      	ldr	r1, [pc, #16]	@ (8001568 <cubemx_transport_open+0x28>)
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f005 fe2c 	bl	80071b4 <HAL_UART_Receive_DMA>
    return true;
 800155c:	2301      	movs	r3, #1
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20007094 	.word	0x20007094

0800156c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800157a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f005 fe65 	bl	800724c <HAL_UART_DMAStop>
    return true;
 8001582:	2301      	movs	r3, #1
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
 8001598:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80015a0:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015a8:	2b20      	cmp	r3, #32
 80015aa:	d11b      	bne.n	80015e4 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	461a      	mov	r2, r3
 80015b2:	68b9      	ldr	r1, [r7, #8]
 80015b4:	6978      	ldr	r0, [r7, #20]
 80015b6:	f005 fd7d 	bl	80070b4 <HAL_UART_Transmit_DMA>
 80015ba:	4603      	mov	r3, r0
 80015bc:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80015be:	e002      	b.n	80015c6 <cubemx_transport_write+0x3a>
            osDelay(1);
 80015c0:	2001      	movs	r0, #1
 80015c2:	f007 ffc7 	bl	8009554 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80015c6:	7cfb      	ldrb	r3, [r7, #19]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d104      	bne.n	80015d6 <cubemx_transport_write+0x4a>
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015d2:	2b20      	cmp	r3, #32
 80015d4:	d1f4      	bne.n	80015c0 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 80015d6:	7cfb      	ldrb	r3, [r7, #19]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <cubemx_transport_write+0x54>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	e002      	b.n	80015e6 <cubemx_transport_write+0x5a>
 80015e0:	2300      	movs	r3, #0
 80015e2:	e000      	b.n	80015e6 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 80015e4:	2300      	movs	r3, #0
    }
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001604:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800160a:	b672      	cpsid	i
}
 800160c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800161c:	4a1b      	ldr	r2, [pc, #108]	@ (800168c <cubemx_transport_read+0x9c>)
 800161e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001620:	b662      	cpsie	i
}
 8001622:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	3301      	adds	r3, #1
 8001628:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 800162a:	2001      	movs	r0, #1
 800162c:	f007 ff92 	bl	8009554 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001630:	4b17      	ldr	r3, [pc, #92]	@ (8001690 <cubemx_transport_read+0xa0>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b15      	ldr	r3, [pc, #84]	@ (800168c <cubemx_transport_read+0x9c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	429a      	cmp	r2, r3
 800163a:	d103      	bne.n	8001644 <cubemx_transport_read+0x54>
 800163c:	69fa      	ldr	r2, [r7, #28]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	429a      	cmp	r2, r3
 8001642:	dbe2      	blt.n	800160a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001648:	e011      	b.n	800166e <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 800164a:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <cubemx_transport_read+0xa0>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68b9      	ldr	r1, [r7, #8]
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	440b      	add	r3, r1
 8001654:	490f      	ldr	r1, [pc, #60]	@ (8001694 <cubemx_transport_read+0xa4>)
 8001656:	5c8a      	ldrb	r2, [r1, r2]
 8001658:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 800165a:	4b0d      	ldr	r3, [pc, #52]	@ (8001690 <cubemx_transport_read+0xa0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	3301      	adds	r3, #1
 8001660:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001664:	4a0a      	ldr	r2, [pc, #40]	@ (8001690 <cubemx_transport_read+0xa0>)
 8001666:	6013      	str	r3, [r2, #0]
        wrote++;
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	3301      	adds	r3, #1
 800166c:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800166e:	4b08      	ldr	r3, [pc, #32]	@ (8001690 <cubemx_transport_read+0xa0>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4b06      	ldr	r3, [pc, #24]	@ (800168c <cubemx_transport_read+0x9c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d003      	beq.n	8001682 <cubemx_transport_read+0x92>
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	429a      	cmp	r2, r3
 8001680:	d3e3      	bcc.n	800164a <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8001682:	69bb      	ldr	r3, [r7, #24]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3720      	adds	r7, #32
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20007898 	.word	0x20007898
 8001690:	20007894 	.word	0x20007894
 8001694:	20007094 	.word	0x20007094

08001698 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	@ 0x28
 800169c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ae:	4b2b      	ldr	r3, [pc, #172]	@ (800175c <MX_GPIO_Init+0xc4>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b2:	4a2a      	ldr	r2, [pc, #168]	@ (800175c <MX_GPIO_Init+0xc4>)
 80016b4:	f043 0304 	orr.w	r3, r3, #4
 80016b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ba:	4b28      	ldr	r3, [pc, #160]	@ (800175c <MX_GPIO_Init+0xc4>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016c6:	4b25      	ldr	r3, [pc, #148]	@ (800175c <MX_GPIO_Init+0xc4>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ca:	4a24      	ldr	r2, [pc, #144]	@ (800175c <MX_GPIO_Init+0xc4>)
 80016cc:	f043 0320 	orr.w	r3, r3, #32
 80016d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016d2:	4b22      	ldr	r3, [pc, #136]	@ (800175c <MX_GPIO_Init+0xc4>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d6:	f003 0320 	and.w	r3, r3, #32
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	4b1f      	ldr	r3, [pc, #124]	@ (800175c <MX_GPIO_Init+0xc4>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e2:	4a1e      	ldr	r2, [pc, #120]	@ (800175c <MX_GPIO_Init+0xc4>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ea:	4b1c      	ldr	r3, [pc, #112]	@ (800175c <MX_GPIO_Init+0xc4>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	4b19      	ldr	r3, [pc, #100]	@ (800175c <MX_GPIO_Init+0xc4>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fa:	4a18      	ldr	r2, [pc, #96]	@ (800175c <MX_GPIO_Init+0xc4>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001702:	4b16      	ldr	r3, [pc, #88]	@ (800175c <MX_GPIO_Init+0xc4>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	2120      	movs	r1, #32
 8001712:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001716:	f003 f92f 	bl	8004978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800171a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800171e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001720:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	480b      	ldr	r0, [pc, #44]	@ (8001760 <MX_GPIO_Init+0xc8>)
 8001732:	f002 ff87 	bl	8004644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001736:	2320      	movs	r3, #32
 8001738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173a:	2301      	movs	r3, #1
 800173c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	2300      	movs	r3, #0
 8001744:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001750:	f002 ff78 	bl	8004644 <HAL_GPIO_Init>

}
 8001754:	bf00      	nop
 8001756:	3728      	adds	r7, #40	@ 0x28
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40021000 	.word	0x40021000
 8001760:	48000800 	.word	0x48000800

08001764 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001768:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <MX_I2C1_Init+0x74>)
 800176a:	4a1c      	ldr	r2, [pc, #112]	@ (80017dc <MX_I2C1_Init+0x78>)
 800176c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 800176e:	4b1a      	ldr	r3, [pc, #104]	@ (80017d8 <MX_I2C1_Init+0x74>)
 8001770:	4a1b      	ldr	r2, [pc, #108]	@ (80017e0 <MX_I2C1_Init+0x7c>)
 8001772:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001774:	4b18      	ldr	r3, [pc, #96]	@ (80017d8 <MX_I2C1_Init+0x74>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800177a:	4b17      	ldr	r3, [pc, #92]	@ (80017d8 <MX_I2C1_Init+0x74>)
 800177c:	2201      	movs	r2, #1
 800177e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001780:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <MX_I2C1_Init+0x74>)
 8001782:	2200      	movs	r2, #0
 8001784:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001786:	4b14      	ldr	r3, [pc, #80]	@ (80017d8 <MX_I2C1_Init+0x74>)
 8001788:	2200      	movs	r2, #0
 800178a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800178c:	4b12      	ldr	r3, [pc, #72]	@ (80017d8 <MX_I2C1_Init+0x74>)
 800178e:	2200      	movs	r2, #0
 8001790:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001792:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <MX_I2C1_Init+0x74>)
 8001794:	2200      	movs	r2, #0
 8001796:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001798:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <MX_I2C1_Init+0x74>)
 800179a:	2200      	movs	r2, #0
 800179c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800179e:	480e      	ldr	r0, [pc, #56]	@ (80017d8 <MX_I2C1_Init+0x74>)
 80017a0:	f003 f91c 	bl	80049dc <HAL_I2C_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017aa:	f001 fd7d 	bl	80032a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017ae:	2100      	movs	r1, #0
 80017b0:	4809      	ldr	r0, [pc, #36]	@ (80017d8 <MX_I2C1_Init+0x74>)
 80017b2:	f003 ff8b 	bl	80056cc <HAL_I2CEx_ConfigAnalogFilter>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017bc:	f001 fd74 	bl	80032a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017c0:	2100      	movs	r1, #0
 80017c2:	4805      	ldr	r0, [pc, #20]	@ (80017d8 <MX_I2C1_Init+0x74>)
 80017c4:	f003 ffcd 	bl	8005762 <HAL_I2CEx_ConfigDigitalFilter>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017ce:	f001 fd6b 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2000789c 	.word	0x2000789c
 80017dc:	40005400 	.word	0x40005400
 80017e0:	40621236 	.word	0x40621236

080017e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b09e      	sub	sp, #120	@ 0x78
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	2254      	movs	r2, #84	@ 0x54
 8001802:	2100      	movs	r1, #0
 8001804:	4618      	mov	r0, r3
 8001806:	f01c f997 	bl	801db38 <memset>
  if(i2cHandle->Instance==I2C1)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a1f      	ldr	r2, [pc, #124]	@ (800188c <HAL_I2C_MspInit+0xa8>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d136      	bne.n	8001882 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001814:	2340      	movs	r3, #64	@ 0x40
 8001816:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001818:	2300      	movs	r3, #0
 800181a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800181c:	f107 0310 	add.w	r3, r7, #16
 8001820:	4618      	mov	r0, r3
 8001822:	f004 fe5d 	bl	80064e0 <HAL_RCCEx_PeriphCLKConfig>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800182c:	f001 fd3c 	bl	80032a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001830:	4b17      	ldr	r3, [pc, #92]	@ (8001890 <HAL_I2C_MspInit+0xac>)
 8001832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001834:	4a16      	ldr	r2, [pc, #88]	@ (8001890 <HAL_I2C_MspInit+0xac>)
 8001836:	f043 0302 	orr.w	r3, r3, #2
 800183a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800183c:	4b14      	ldr	r3, [pc, #80]	@ (8001890 <HAL_I2C_MspInit+0xac>)
 800183e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001848:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800184c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800184e:	2312      	movs	r3, #18
 8001850:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800185a:	2304      	movs	r3, #4
 800185c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001862:	4619      	mov	r1, r3
 8001864:	480b      	ldr	r0, [pc, #44]	@ (8001894 <HAL_I2C_MspInit+0xb0>)
 8001866:	f002 feed 	bl	8004644 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800186a:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <HAL_I2C_MspInit+0xac>)
 800186c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800186e:	4a08      	ldr	r2, [pc, #32]	@ (8001890 <HAL_I2C_MspInit+0xac>)
 8001870:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001874:	6593      	str	r3, [r2, #88]	@ 0x58
 8001876:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <HAL_I2C_MspInit+0xac>)
 8001878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001882:	bf00      	nop
 8001884:	3778      	adds	r7, #120	@ 0x78
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40005400 	.word	0x40005400
 8001890:	40021000 	.word	0x40021000
 8001894:	48000400 	.word	0x48000400

08001898 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800189c:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <MX_IWDG_Init+0x34>)
 800189e:	4a0c      	ldr	r2, [pc, #48]	@ (80018d0 <MX_IWDG_Init+0x38>)
 80018a0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80018a2:	4b0a      	ldr	r3, [pc, #40]	@ (80018cc <MX_IWDG_Init+0x34>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80018a8:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <MX_IWDG_Init+0x34>)
 80018aa:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80018ae:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 80018b0:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <MX_IWDG_Init+0x34>)
 80018b2:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80018b6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80018b8:	4804      	ldr	r0, [pc, #16]	@ (80018cc <MX_IWDG_Init+0x34>)
 80018ba:	f003 ff9e 	bl	80057fa <HAL_IWDG_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80018c4:	f001 fcf0 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200078f0 	.word	0x200078f0
 80018d0:	40003000 	.word	0x40003000

080018d4 <KalmanFilter_Init>:
// Sampling time
float32_t dt;

// Function to initialize the Kalman Filter
void KalmanFilter_Init(KalmanFilter *kf, float32_t delta_t)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b092      	sub	sp, #72	@ 0x48
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	ed87 0a00 	vstr	s0, [r7]
    dt = delta_t;
 80018e0:	4a8b      	ldr	r2, [pc, #556]	@ (8001b10 <KalmanFilter_Init+0x23c>)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	6013      	str	r3, [r2, #0]

    // Initialize matrix instances
    arm_mat_init_f32(&kf->x_k, STATE_DIM, 1, kf->x_k_data);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3308      	adds	r3, #8
 80018ec:	2201      	movs	r2, #1
 80018ee:	2106      	movs	r1, #6
 80018f0:	f01b fbca 	bl	801d088 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P_k, STATE_DIM, STATE_DIM, kf->P_k_data);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f103 0020 	add.w	r0, r3, #32
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3328      	adds	r3, #40	@ 0x28
 80018fe:	2206      	movs	r2, #6
 8001900:	2106      	movs	r1, #6
 8001902:	f01b fbc1 	bl	801d088 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->A, STATE_DIM, STATE_DIM, kf->A_data);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f103 00b8 	add.w	r0, r3, #184	@ 0xb8
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	33c0      	adds	r3, #192	@ 0xc0
 8001910:	2206      	movs	r2, #6
 8001912:	2106      	movs	r1, #6
 8001914:	f01b fbb8 	bl	801d088 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, STATE_DIM, 3, kf->B_data);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f503 70a8 	add.w	r0, r3, #336	@ 0x150
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8001924:	2203      	movs	r2, #3
 8001926:	2106      	movs	r1, #6
 8001928:	f01b fbae 	bl	801d088 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, STATE_DIM, STATE_DIM, kf->Q_data);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f503 70d0 	add.w	r0, r3, #416	@ 0x1a0
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8001938:	2206      	movs	r2, #6
 800193a:	2106      	movs	r1, #6
 800193c:	f01b fba4 	bl	801d088 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->H, MEASUREMENT_DIM, STATE_DIM, kf->H_data);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f503 700e 	add.w	r0, r3, #568	@ 0x238
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800194c:	2206      	movs	r2, #6
 800194e:	2106      	movs	r1, #6
 8001950:	f01b fb9a 	bl	801d088 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, MEASUREMENT_DIM, MEASUREMENT_DIM, kf->R_data);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f503 7034 	add.w	r0, r3, #720	@ 0x2d0
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 8001960:	2206      	movs	r2, #6
 8001962:	2106      	movs	r1, #6
 8001964:	f01b fb90 	bl	801d088 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->K_k, STATE_DIM, MEASUREMENT_DIM, kf->K_k_data);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f503 705a 	add.w	r0, r3, #872	@ 0x368
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f503 735c 	add.w	r3, r3, #880	@ 0x370
 8001974:	2206      	movs	r2, #6
 8001976:	2106      	movs	r1, #6
 8001978:	f01b fb86 	bl	801d088 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->z_k, MEASUREMENT_DIM, 1, kf->z_k_data);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f503 6080 	add.w	r0, r3, #1024	@ 0x400
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8001988:	2201      	movs	r2, #1
 800198a:	2106      	movs	r1, #6
 800198c:	f01b fb7c 	bl	801d088 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->u_k, 3, 1, kf->u_k_data);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f503 6084 	add.w	r0, r3, #1056	@ 0x420
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 800199c:	2201      	movs	r2, #1
 800199e:	2103      	movs	r1, #3
 80019a0:	f01b fb72 	bl	801d088 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->I, STATE_DIM, STATE_DIM, kf->I_data);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f203 4034 	addw	r0, r3, #1076	@ 0x434
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f203 433c 	addw	r3, r3, #1084	@ 0x43c
 80019b0:	2206      	movs	r2, #6
 80019b2:	2106      	movs	r1, #6
 80019b4:	f01b fb68 	bl	801d088 <arm_mat_init_f32>

    // Initialize temporary matrices as needed
    arm_mat_init_f32(&kf->temp1, STATE_DIM, STATE_DIM, kf->temp1_data);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f203 40cc 	addw	r0, r3, #1228	@ 0x4cc
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
 80019c4:	2206      	movs	r2, #6
 80019c6:	2106      	movs	r1, #6
 80019c8:	f01b fb5e 	bl	801d088 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp2, STATE_DIM, STATE_DIM, kf->temp2_data);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f203 5064 	addw	r0, r3, #1380	@ 0x564
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f203 536c 	addw	r3, r3, #1388	@ 0x56c
 80019d8:	2206      	movs	r2, #6
 80019da:	2106      	movs	r1, #6
 80019dc:	f01b fb54 	bl	801d088 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp3, MEASUREMENT_DIM, MEASUREMENT_DIM, kf->temp3_data);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f203 50fc 	addw	r0, r3, #1532	@ 0x5fc
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f203 6304 	addw	r3, r3, #1540	@ 0x604
 80019ec:	2206      	movs	r2, #6
 80019ee:	2106      	movs	r1, #6
 80019f0:	f01b fb4a 	bl	801d088 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp4, STATE_DIM, MEASUREMENT_DIM, kf->temp4_data);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f203 6094 	addw	r0, r3, #1684	@ 0x694
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f203 639c 	addw	r3, r3, #1692	@ 0x69c
 8001a00:	2206      	movs	r2, #6
 8001a02:	2106      	movs	r1, #6
 8001a04:	f01b fb40 	bl	801d088 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp5, MEASUREMENT_DIM, STATE_DIM, kf->temp5_data);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f203 702c 	addw	r0, r3, #1836	@ 0x72c
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f203 7334 	addw	r3, r3, #1844	@ 0x734
 8001a14:	2206      	movs	r2, #6
 8001a16:	2106      	movs	r1, #6
 8001a18:	f01b fb36 	bl	801d088 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp6, STATE_DIM, 1, kf->temp6_data);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f203 70c4 	addw	r0, r3, #1988	@ 0x7c4
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f203 73cc 	addw	r3, r3, #1996	@ 0x7cc
 8001a28:	2201      	movs	r2, #1
 8001a2a:	2106      	movs	r1, #6
 8001a2c:	f01b fb2c 	bl	801d088 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp7, MEASUREMENT_DIM, 1, kf->temp7_data);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f203 70e4 	addw	r0, r3, #2020	@ 0x7e4
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f203 73ec 	addw	r3, r3, #2028	@ 0x7ec
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	2106      	movs	r1, #6
 8001a40:	f01b fb22 	bl	801d088 <arm_mat_init_f32>

    // Initialize identity matrix I
    memset(kf->I_data, 0, sizeof(kf->I_data));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f203 433c 	addw	r3, r3, #1084	@ 0x43c
 8001a4a:	2290      	movs	r2, #144	@ 0x90
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f01c f872 	bl	801db38 <memset>
    for (int i = 0; i < STATE_DIM; i++)
 8001a54:	2300      	movs	r3, #0
 8001a56:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a58:	e00f      	b.n	8001a7a <KalmanFilter_Init+0x1a6>
    {
        kf->I_data[i * STATE_DIM + i] = 1.0f;
 8001a5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	1a9b      	subs	r3, r3, r2
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001a72:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < STATE_DIM; i++)
 8001a74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a76:	3301      	adds	r3, #1
 8001a78:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a7c:	2b05      	cmp	r3, #5
 8001a7e:	ddec      	ble.n	8001a5a <KalmanFilter_Init+0x186>
    }

    // State transition matrix A
    memset(kf->A_data, 0, sizeof(kf->A_data));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	33c0      	adds	r3, #192	@ 0xc0
 8001a84:	2290      	movs	r2, #144	@ 0x90
 8001a86:	2100      	movs	r1, #0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f01c f855 	bl	801db38 <memset>
    for (int i = 0; i < 3; i++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	643b      	str	r3, [r7, #64]	@ 0x40
 8001a92:	e02e      	b.n	8001af2 <KalmanFilter_Init+0x21e>
    {
        kf->A_data[i * STATE_DIM + i] = 1.0f;                 // Diagonal elements for angles
 8001a94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001a96:	4613      	mov	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	1a9b      	subs	r3, r3, r2
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	3330      	adds	r3, #48	@ 0x30
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001aa8:	601a      	str	r2, [r3, #0]
        kf->A_data[i * STATE_DIM + i + 3] = -dt;              // Coupling with biases
 8001aaa:	4b19      	ldr	r3, [pc, #100]	@ (8001b10 <KalmanFilter_Init+0x23c>)
 8001aac:	edd3 7a00 	vldr	s15, [r3]
 8001ab0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	1a9b      	subs	r3, r3, r2
 8001ab8:	3303      	adds	r3, #3
 8001aba:	eef1 7a67 	vneg.f32	s15, s15
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	3330      	adds	r3, #48	@ 0x30
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	edc3 7a00 	vstr	s15, [r3]
        kf->A_data[(i + 3) * STATE_DIM + i + 3] = 1.0f;       // Diagonal elements for biases
 8001aca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001acc:	1cda      	adds	r2, r3, #3
 8001ace:	4613      	mov	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4413      	add	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ada:	4413      	add	r3, r2
 8001adc:	3303      	adds	r3, #3
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	3330      	adds	r3, #48	@ 0x30
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001aea:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++)
 8001aec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001aee:	3301      	adds	r3, #1
 8001af0:	643b      	str	r3, [r7, #64]	@ 0x40
 8001af2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	ddcd      	ble.n	8001a94 <KalmanFilter_Init+0x1c0>
    }

    // Control input matrix B
    memset(kf->B_data, 0, sizeof(kf->B_data));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8001afe:	2248      	movs	r2, #72	@ 0x48
 8001b00:	2100      	movs	r1, #0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f01c f818 	bl	801db38 <memset>
    for (int i = 0; i < 3; i++)
 8001b08:	2300      	movs	r3, #0
 8001b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b0c:	e00e      	b.n	8001b2c <KalmanFilter_Init+0x258>
 8001b0e:	bf00      	nop
 8001b10:	20007900 	.word	0x20007900
    {
        kf->B_data[i * 3 + i] = dt; // B[i][i] = dt
 8001b14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4a86      	ldr	r2, [pc, #536]	@ (8001d34 <KalmanFilter_Init+0x460>)
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	3356      	adds	r3, #86	@ 0x56
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	440b      	add	r3, r1
 8001b24:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++)
 8001b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b28:	3301      	adds	r3, #1
 8001b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	ddf0      	ble.n	8001b14 <KalmanFilter_Init+0x240>
    }

    // Process noise covariance Q
    float32_t sigma_phi = 0.01f;
 8001b32:	4b81      	ldr	r3, [pc, #516]	@ (8001d38 <KalmanFilter_Init+0x464>)
 8001b34:	637b      	str	r3, [r7, #52]	@ 0x34
    float32_t sigma_theta = 0.01f;
 8001b36:	4b80      	ldr	r3, [pc, #512]	@ (8001d38 <KalmanFilter_Init+0x464>)
 8001b38:	633b      	str	r3, [r7, #48]	@ 0x30
    float32_t sigma_psi = 0.01f;
 8001b3a:	4b7f      	ldr	r3, [pc, #508]	@ (8001d38 <KalmanFilter_Init+0x464>)
 8001b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float32_t sigma_bias_phi = 0.003f;
 8001b3e:	4b7f      	ldr	r3, [pc, #508]	@ (8001d3c <KalmanFilter_Init+0x468>)
 8001b40:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t sigma_bias_theta = 0.003f;
 8001b42:	4b7e      	ldr	r3, [pc, #504]	@ (8001d3c <KalmanFilter_Init+0x468>)
 8001b44:	627b      	str	r3, [r7, #36]	@ 0x24
    float32_t sigma_bias_psi = 0.0003f;
 8001b46:	4b7e      	ldr	r3, [pc, #504]	@ (8001d40 <KalmanFilter_Init+0x46c>)
 8001b48:	623b      	str	r3, [r7, #32]
    memset(kf->Q_data, 0, sizeof(kf->Q_data));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8001b50:	2290      	movs	r2, #144	@ 0x90
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f01b ffef 	bl	801db38 <memset>
    kf->Q_data[0 * STATE_DIM + 0] = sigma_phi * sigma_phi * dt * dt;
 8001b5a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b5e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b62:	4b74      	ldr	r3, [pc, #464]	@ (8001d34 <KalmanFilter_Init+0x460>)
 8001b64:	edd3 7a00 	vldr	s15, [r3]
 8001b68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b6c:	4b71      	ldr	r3, [pc, #452]	@ (8001d34 <KalmanFilter_Init+0x460>)
 8001b6e:	edd3 7a00 	vldr	s15, [r3]
 8001b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	edc3 7a6a 	vstr	s15, [r3, #424]	@ 0x1a8
    kf->Q_data[1 * STATE_DIM + 1] = sigma_theta * sigma_theta * dt * dt;
 8001b7c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001b80:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b84:	4b6b      	ldr	r3, [pc, #428]	@ (8001d34 <KalmanFilter_Init+0x460>)
 8001b86:	edd3 7a00 	vldr	s15, [r3]
 8001b8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b8e:	4b69      	ldr	r3, [pc, #420]	@ (8001d34 <KalmanFilter_Init+0x460>)
 8001b90:	edd3 7a00 	vldr	s15, [r3]
 8001b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	edc3 7a71 	vstr	s15, [r3, #452]	@ 0x1c4
    kf->Q_data[2 * STATE_DIM + 2] = sigma_psi * sigma_psi * dt * dt;
 8001b9e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001ba2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001ba6:	4b63      	ldr	r3, [pc, #396]	@ (8001d34 <KalmanFilter_Init+0x460>)
 8001ba8:	edd3 7a00 	vldr	s15, [r3]
 8001bac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bb0:	4b60      	ldr	r3, [pc, #384]	@ (8001d34 <KalmanFilter_Init+0x460>)
 8001bb2:	edd3 7a00 	vldr	s15, [r3]
 8001bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	edc3 7a78 	vstr	s15, [r3, #480]	@ 0x1e0
    kf->Q_data[3 * STATE_DIM + 3] = sigma_bias_phi * sigma_bias_phi * dt ;
 8001bc0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001bc4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001bc8:	4b5a      	ldr	r3, [pc, #360]	@ (8001d34 <KalmanFilter_Init+0x460>)
 8001bca:	edd3 7a00 	vldr	s15, [r3]
 8001bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	edc3 7a7f 	vstr	s15, [r3, #508]	@ 0x1fc
    kf->Q_data[4 * STATE_DIM + 4] = sigma_bias_theta * sigma_bias_theta * dt;
 8001bd8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001bdc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001be0:	4b54      	ldr	r3, [pc, #336]	@ (8001d34 <KalmanFilter_Init+0x460>)
 8001be2:	edd3 7a00 	vldr	s15, [r3]
 8001be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	edc3 7a86 	vstr	s15, [r3, #536]	@ 0x218
    kf->Q_data[5 * STATE_DIM + 5] = sigma_bias_psi * sigma_bias_psi * dt ;
 8001bf0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001bf4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001bf8:	4b4e      	ldr	r3, [pc, #312]	@ (8001d34 <KalmanFilter_Init+0x460>)
 8001bfa:	edd3 7a00 	vldr	s15, [r3]
 8001bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	edc3 7a8d 	vstr	s15, [r3, #564]	@ 0x234

    // Measurement matrix H
    memset(kf->H_data, 0, sizeof(kf->H_data));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8001c0e:	2290      	movs	r2, #144	@ 0x90
 8001c10:	2100      	movs	r1, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f01b ff90 	bl	801db38 <memset>
    // Accelerometer measurements for roll and pitch
    kf->H_data[0 * STATE_DIM + 0] = 1.0f; // phi_acc depends on phi
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001c1e:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240
    kf->H_data[1 * STATE_DIM + 1] = 1.0f; // theta_acc depends on theta
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001c28:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
    // Magnetometer measurement for yaw
    kf->H_data[2 * STATE_DIM + 2] = 1.0f; // psi_mag depends on psi
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001c32:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
    // Gyroscope measurements
    kf->H_data[3 * STATE_DIM + 0] = 1.0f;   kf->H_data[3 * STATE_DIM + 3] = -1.0f; // omega_phi
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001c3c:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a40      	ldr	r2, [pc, #256]	@ (8001d44 <KalmanFilter_Init+0x470>)
 8001c44:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
    kf->H_data[4 * STATE_DIM + 1] = 1.0f;   kf->H_data[4 * STATE_DIM + 4] = -1.0f; // omega_theta
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001c4e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a3b      	ldr	r2, [pc, #236]	@ (8001d44 <KalmanFilter_Init+0x470>)
 8001c56:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
    kf->H_data[5 * STATE_DIM + 2] = 1.0f;   kf->H_data[5 * STATE_DIM + 5] = -1.0f; // omega_psi
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001c60:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a37      	ldr	r2, [pc, #220]	@ (8001d44 <KalmanFilter_Init+0x470>)
 8001c68:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

    // Measurement noise covariance R
    float32_t sigma_acc_phi =  0.001209244523446859;
 8001c6c:	4b36      	ldr	r3, [pc, #216]	@ (8001d48 <KalmanFilter_Init+0x474>)
 8001c6e:	61fb      	str	r3, [r7, #28]
    float32_t sigma_acc_theta = 0.0010572480763086421;
 8001c70:	4b36      	ldr	r3, [pc, #216]	@ (8001d4c <KalmanFilter_Init+0x478>)
 8001c72:	61bb      	str	r3, [r7, #24]
    float32_t sigma_mag_psi = 0.0038762164205234486; // Large value due to lack of magnetometer
 8001c74:	4b36      	ldr	r3, [pc, #216]	@ (8001d50 <KalmanFilter_Init+0x47c>)
 8001c76:	617b      	str	r3, [r7, #20]
    float32_t sigma_gyro_phi = 3.123911124369358e-06;
 8001c78:	4b36      	ldr	r3, [pc, #216]	@ (8001d54 <KalmanFilter_Init+0x480>)
 8001c7a:	613b      	str	r3, [r7, #16]
    float32_t sigma_gyro_theta = 3.677361834943486e-06;
 8001c7c:	4b36      	ldr	r3, [pc, #216]	@ (8001d58 <KalmanFilter_Init+0x484>)
 8001c7e:	60fb      	str	r3, [r7, #12]
    float32_t sigma_gyro_psi = 2.789920277006955e-06;
 8001c80:	4b36      	ldr	r3, [pc, #216]	@ (8001d5c <KalmanFilter_Init+0x488>)
 8001c82:	60bb      	str	r3, [r7, #8]
    memset(kf->R_data, 0, sizeof(kf->R_data));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 8001c8a:	2290      	movs	r2, #144	@ 0x90
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f01b ff52 	bl	801db38 <memset>
    kf->R_data[0 * MEASUREMENT_DIM + 0] = sigma_acc_phi * sigma_acc_phi ;
 8001c94:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c98:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	edc3 7ab6 	vstr	s15, [r3, #728]	@ 0x2d8
    kf->R_data[1 * MEASUREMENT_DIM + 1] = sigma_acc_theta * sigma_acc_theta ;
 8001ca2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ca6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	edc3 7abd 	vstr	s15, [r3, #756]	@ 0x2f4
    kf->R_data[2 * MEASUREMENT_DIM + 2] = sigma_mag_psi * sigma_mag_psi ; // High uncertainty for psi_mag
 8001cb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cb4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	edc3 7ac4 	vstr	s15, [r3, #784]	@ 0x310
    kf->R_data[3 * MEASUREMENT_DIM + 3] = sigma_gyro_phi * sigma_gyro_phi ;
 8001cbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cc2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	edc3 7acb 	vstr	s15, [r3, #812]	@ 0x32c
    kf->R_data[4 * MEASUREMENT_DIM + 4] = sigma_gyro_theta * sigma_gyro_theta;
 8001ccc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cd0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	edc3 7ad2 	vstr	s15, [r3, #840]	@ 0x348
    kf->R_data[5 * MEASUREMENT_DIM + 5] = sigma_gyro_psi * sigma_gyro_psi  ;
 8001cda:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cde:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	edc3 7ad9 	vstr	s15, [r3, #868]	@ 0x364

    // Initialize error covariance matrix P_k
    memset(kf->P_k_data, 0, sizeof(kf->P_k_data));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3328      	adds	r3, #40	@ 0x28
 8001cec:	2290      	movs	r2, #144	@ 0x90
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f01b ff21 	bl	801db38 <memset>
    for (int i = 0; i < STATE_DIM; i++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cfa:	e00d      	b.n	8001d18 <KalmanFilter_Init+0x444>
    {
        kf->P_k_data[i * STATE_DIM + i] = 1.0f;
 8001cfc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001cfe:	4613      	mov	r3, r2
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	1a9b      	subs	r3, r3, r2
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	330a      	adds	r3, #10
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001d10:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < STATE_DIM; i++)
 8001d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d14:	3301      	adds	r3, #1
 8001d16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d1a:	2b05      	cmp	r3, #5
 8001d1c:	ddee      	ble.n	8001cfc <KalmanFilter_Init+0x428>
    }

    // Initialize state vector x_k
    memset(kf->x_k_data, 0, sizeof(kf->x_k_data));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3308      	adds	r3, #8
 8001d22:	2218      	movs	r2, #24
 8001d24:	2100      	movs	r1, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f01b ff06 	bl	801db38 <memset>
}
 8001d2c:	bf00      	nop
 8001d2e:	3748      	adds	r7, #72	@ 0x48
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20007900 	.word	0x20007900
 8001d38:	3c23d70a 	.word	0x3c23d70a
 8001d3c:	3b449ba6 	.word	0x3b449ba6
 8001d40:	399d4952 	.word	0x399d4952
 8001d44:	bf800000 	.word	0xbf800000
 8001d48:	3a9e7f83 	.word	0x3a9e7f83
 8001d4c:	3a8a935c 	.word	0x3a8a935c
 8001d50:	3b7e081f 	.word	0x3b7e081f
 8001d54:	3651a462 	.word	0x3651a462
 8001d58:	3676c898 	.word	0x3676c898
 8001d5c:	363b3a77 	.word	0x363b3a77

08001d60 <ComputeControlInput>:

// Function to compute the control input u_{i+1}
void ComputeControlInput(float32_t phi_i, float32_t theta_i, float32_t psi_i, float32_t omega_phi_i, float32_t omega_theta_i, float32_t omega_psi_i, float32_t *u_i1)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b0a0      	sub	sp, #128	@ 0x80
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	ed87 0a07 	vstr	s0, [r7, #28]
 8001d6a:	edc7 0a06 	vstr	s1, [r7, #24]
 8001d6e:	ed87 1a05 	vstr	s2, [r7, #20]
 8001d72:	edc7 1a04 	vstr	s3, [r7, #16]
 8001d76:	ed87 2a03 	vstr	s4, [r7, #12]
 8001d7a:	edc7 2a02 	vstr	s5, [r7, #8]
 8001d7e:	6078      	str	r0, [r7, #4]
    // Compute the rotation matrix R_i^{-1} (from inertial frame to body frame)
    float32_t cos_phi = cosf(phi_i);
 8001d80:	ed97 0a07 	vldr	s0, [r7, #28]
 8001d84:	f01c ffc4 	bl	801ed10 <cosf>
 8001d88:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74
    float32_t sin_phi = sinf(phi_i);
 8001d8c:	ed97 0a07 	vldr	s0, [r7, #28]
 8001d90:	f01d f802 	bl	801ed98 <sinf>
 8001d94:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
    float32_t cos_theta = cosf(theta_i);
 8001d98:	ed97 0a06 	vldr	s0, [r7, #24]
 8001d9c:	f01c ffb8 	bl	801ed10 <cosf>
 8001da0:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
    float32_t sin_theta = sinf(theta_i);
 8001da4:	ed97 0a06 	vldr	s0, [r7, #24]
 8001da8:	f01c fff6 	bl	801ed98 <sinf>
 8001dac:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68
    float32_t cos_psi = cosf(psi_i);
 8001db0:	ed97 0a05 	vldr	s0, [r7, #20]
 8001db4:	f01c ffac 	bl	801ed10 <cosf>
 8001db8:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
    float32_t sin_psi = sinf(psi_i);
 8001dbc:	ed97 0a05 	vldr	s0, [r7, #20]
 8001dc0:	f01c ffea 	bl	801ed98 <sinf>
 8001dc4:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60

    // Compute the elements of the rotation matrix R_i^{-1}
    float32_t R_inv[3][3];
    R_inv[0][0] = cos_theta * cos_psi;
 8001dc8:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001dcc:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    R_inv[0][1] = sin_phi * sin_theta * cos_psi - cos_phi * sin_psi;
 8001dd8:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001ddc:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001de0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001de4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001de8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dec:	edd7 6a1d 	vldr	s13, [r7, #116]	@ 0x74
 8001df0:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001df4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001df8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dfc:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    R_inv[0][2] = cos_phi * sin_theta * cos_psi + sin_phi * sin_psi;
 8001e00:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001e04:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001e08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e0c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001e10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e14:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 8001e18:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001e1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e24:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    R_inv[1][0] = cos_theta * sin_psi;
 8001e28:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001e2c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e34:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    R_inv[1][1] = sin_phi * sin_theta * sin_psi + cos_phi * cos_psi;
 8001e38:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001e3c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001e40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e44:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001e48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e4c:	edd7 6a1d 	vldr	s13, [r7, #116]	@ 0x74
 8001e50:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001e54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e5c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    R_inv[1][2] = cos_phi * sin_theta * sin_psi - sin_phi * cos_psi;
 8001e60:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001e64:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001e68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e6c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001e70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e74:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 8001e78:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001e7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e84:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    R_inv[2][0] = -sin_theta;
 8001e88:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001e8c:	eef1 7a67 	vneg.f32	s15, s15
 8001e90:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    R_inv[2][1] = sin_phi * cos_theta;
 8001e94:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001e98:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea0:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    R_inv[2][2] = cos_phi * cos_theta;
 8001ea4:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001ea8:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb0:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

    // Gyroscope measurement vector omega_i in body frame
    float32_t omega_i[3] = {omega_phi_i, omega_theta_i, omega_psi_i};
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Compute omega_inertial = R_i^{-1} * omega_i
    float32_t omega_inertial[3];
    for (int i = 0; i < 3; i++)
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001ec4:	e038      	b.n	8001f38 <ComputeControlInput+0x1d8>
    {
        omega_inertial[i] = 0.0f;
 8001ec6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	3380      	adds	r3, #128	@ 0x80
 8001ecc:	443b      	add	r3, r7
 8001ece:	3b5c      	subs	r3, #92	@ 0x5c
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 3; j++)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001eda:	e027      	b.n	8001f2c <ComputeControlInput+0x1cc>
        {
            omega_inertial[i] += R_inv[i][j] * omega_i[j];
 8001edc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	3380      	adds	r3, #128	@ 0x80
 8001ee2:	443b      	add	r3, r7
 8001ee4:	3b5c      	subs	r3, #92	@ 0x5c
 8001ee6:	ed93 7a00 	vldr	s14, [r3]
 8001eea:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001eec:	4613      	mov	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	3380      	adds	r3, #128	@ 0x80
 8001efa:	443b      	add	r3, r7
 8001efc:	3b44      	subs	r3, #68	@ 0x44
 8001efe:	edd3 6a00 	vldr	s13, [r3]
 8001f02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	3380      	adds	r3, #128	@ 0x80
 8001f08:	443b      	add	r3, r7
 8001f0a:	3b50      	subs	r3, #80	@ 0x50
 8001f0c:	edd3 7a00 	vldr	s15, [r3]
 8001f10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	3380      	adds	r3, #128	@ 0x80
 8001f1e:	443b      	add	r3, r7
 8001f20:	3b5c      	subs	r3, #92	@ 0x5c
 8001f22:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++)
 8001f26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f28:	3301      	adds	r3, #1
 8001f2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	ddd4      	ble.n	8001edc <ComputeControlInput+0x17c>
    for (int i = 0; i < 3; i++)
 8001f32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f34:	3301      	adds	r3, #1
 8001f36:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001f38:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	ddc3      	ble.n	8001ec6 <ComputeControlInput+0x166>
        }
    }

    // Control input u_{i+1} = omega_inertial
    u_i1[0] = omega_inertial[0]; // Roll rate in inertial frame
 8001f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	601a      	str	r2, [r3, #0]
    u_i1[1] = omega_inertial[1]; // Pitch rate in inertial frame
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3304      	adds	r3, #4
 8001f48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f4a:	601a      	str	r2, [r3, #0]
    u_i1[2] = omega_inertial[2]; // Yaw rate in inertial frame
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3308      	adds	r3, #8
 8001f50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f52:	601a      	str	r2, [r3, #0]
}
 8001f54:	bf00      	nop
 8001f56:	3780      	adds	r7, #128	@ 0x80
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <KalmanFilter_Update>:

// Function to update the Kalman Filter with new measurements
void KalmanFilter_Update(KalmanFilter *kf, float32_t phi_acc, float32_t theta_acc, float32_t psi_mag, float32_t omega_phi, float32_t omega_theta, float32_t omega_psi)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b090      	sub	sp, #64	@ 0x40
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	61f8      	str	r0, [r7, #28]
 8001f64:	ed87 0a06 	vstr	s0, [r7, #24]
 8001f68:	edc7 0a05 	vstr	s1, [r7, #20]
 8001f6c:	ed87 1a04 	vstr	s2, [r7, #16]
 8001f70:	edc7 1a03 	vstr	s3, [r7, #12]
 8001f74:	ed87 2a02 	vstr	s4, [r7, #8]
 8001f78:	edc7 2a01 	vstr	s5, [r7, #4]
    arm_status status;

    // Current estimates
    float32_t phi_i = kf->x_k_data[0];
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float32_t theta_i = kf->x_k_data[1];
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	63bb      	str	r3, [r7, #56]	@ 0x38
    float32_t psi_i = kf->x_k_data[2];
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	637b      	str	r3, [r7, #52]	@ 0x34

    // Compute control input u_{i+1}
    float32_t u_i1[3];
    ComputeControlInput(phi_i, theta_i, psi_i, omega_phi, omega_theta, omega_psi, u_i1);
 8001f8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f92:	4618      	mov	r0, r3
 8001f94:	edd7 2a01 	vldr	s5, [r7, #4]
 8001f98:	ed97 2a02 	vldr	s4, [r7, #8]
 8001f9c:	edd7 1a03 	vldr	s3, [r7, #12]
 8001fa0:	ed97 1a0d 	vldr	s2, [r7, #52]	@ 0x34
 8001fa4:	edd7 0a0e 	vldr	s1, [r7, #56]	@ 0x38
 8001fa8:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8001fac:	f7ff fed8 	bl	8001d60 <ComputeControlInput>

    // Set the control input vector u_k
    kf->u_k_data[0] = u_i1[0];
 8001fb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 8001fb8:	601a      	str	r2, [r3, #0]
    kf->u_k_data[1] = u_i1[1];
 8001fba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f203 432c 	addw	r3, r3, #1068	@ 0x42c
 8001fc2:	601a      	str	r2, [r3, #0]
    kf->u_k_data[2] = u_i1[2];
 8001fc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	f503 6386 	add.w	r3, r3, #1072	@ 0x430
 8001fcc:	601a      	str	r2, [r3, #0]

    // Predict Step
    // x_k = A * x_k + B * u_k
    status = arm_mat_mult_f32(&kf->A, &kf->x_k, &kf->temp6); // temp6 = A * x_k
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	f103 00b8 	add.w	r0, r3, #184	@ 0xb8
 8001fd4:	69f9      	ldr	r1, [r7, #28]
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	f203 73c4 	addw	r3, r3, #1988	@ 0x7c4
 8001fdc:	461a      	mov	r2, r3
 8001fde:	f01a fead 	bl	801cd3c <arm_mat_mult_f32>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    status = arm_mat_mult_f32(&kf->B, &kf->u_k, &kf->temp1); // temp1 = B * u_k
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f503 70a8 	add.w	r0, r3, #336	@ 0x150
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	f503 6184 	add.w	r1, r3, #1056	@ 0x420
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f203 43cc 	addw	r3, r3, #1228	@ 0x4cc
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	f01a fe9e 	bl	801cd3c <arm_mat_mult_f32>
 8002000:	4603      	mov	r3, r0
 8002002:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    status = arm_mat_add_f32(&kf->temp6, &kf->temp1, &kf->x_k); // x_k = temp6 + temp1
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	f203 70c4 	addw	r0, r3, #1988	@ 0x7c4
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f203 43cc 	addw	r3, r3, #1228	@ 0x4cc
 8002012:	69fa      	ldr	r2, [r7, #28]
 8002014:	4619      	mov	r1, r3
 8002016:	f01b f83b 	bl	801d090 <arm_mat_add_f32>
 800201a:	4603      	mov	r3, r0
 800201c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    // P_k = A * P_k * A^T + Q
    status = arm_mat_mult_f32(&kf->A, &kf->P_k, &kf->temp1); // temp1 = A * P_k
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f103 00b8 	add.w	r0, r3, #184	@ 0xb8
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	f103 0120 	add.w	r1, r3, #32
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f203 43cc 	addw	r3, r3, #1228	@ 0x4cc
 8002032:	461a      	mov	r2, r3
 8002034:	f01a fe82 	bl	801cd3c <arm_mat_mult_f32>
 8002038:	4603      	mov	r3, r0
 800203a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    status = arm_mat_trans_f32(&kf->A, &kf->temp2); // temp2 = A^T
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	f103 02b8 	add.w	r2, r3, #184	@ 0xb8
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f203 5364 	addw	r3, r3, #1380	@ 0x564
 800204a:	4619      	mov	r1, r3
 800204c:	4610      	mov	r0, r2
 800204e:	f01a fdaf 	bl	801cbb0 <arm_mat_trans_f32>
 8002052:	4603      	mov	r3, r0
 8002054:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    status = arm_mat_mult_f32(&kf->temp1, &kf->temp2, &kf->P_k); // P_k = temp1 * temp2
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f203 40cc 	addw	r0, r3, #1228	@ 0x4cc
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	f203 5164 	addw	r1, r3, #1380	@ 0x564
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	3320      	adds	r3, #32
 8002068:	461a      	mov	r2, r3
 800206a:	f01a fe67 	bl	801cd3c <arm_mat_mult_f32>
 800206e:	4603      	mov	r3, r0
 8002070:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    status = arm_mat_add_f32(&kf->P_k, &kf->Q, &kf->P_k); // P_k = P_k + Q
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f103 0020 	add.w	r0, r3, #32
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	f503 71d0 	add.w	r1, r3, #416	@ 0x1a0
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	3320      	adds	r3, #32
 8002084:	461a      	mov	r2, r3
 8002086:	f01b f803 	bl	801d090 <arm_mat_add_f32>
 800208a:	4603      	mov	r3, r0
 800208c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    // Update Step
    // z_k = [phi_acc; theta_acc; psi_mag; omega_phi; omega_theta; omega_psi]
    kf->z_k_data[0] = phi_acc;
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	601a      	str	r2, [r3, #0]
    kf->z_k_data[1] = theta_acc;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	601a      	str	r2, [r3, #0]
    kf->z_k_data[2] = psi_mag; // This value is not available; set as needed
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	601a      	str	r2, [r3, #0]
    kf->z_k_data[3] = omega_phi;
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	f203 4314 	addw	r3, r3, #1044	@ 0x414
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	601a      	str	r2, [r3, #0]
    kf->z_k_data[4] = omega_theta;
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	601a      	str	r2, [r3, #0]
    kf->z_k_data[5] = omega_psi;
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	601a      	str	r2, [r3, #0]

    // y_k = z_k - H * x_k
    status = arm_mat_mult_f32(&kf->H, &kf->x_k, &kf->temp7); // temp7 = H * x_k
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f503 700e 	add.w	r0, r3, #568	@ 0x238
 80020d2:	69f9      	ldr	r1, [r7, #28]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f203 73e4 	addw	r3, r3, #2020	@ 0x7e4
 80020da:	461a      	mov	r2, r3
 80020dc:	f01a fe2e 	bl	801cd3c <arm_mat_mult_f32>
 80020e0:	4603      	mov	r3, r0
 80020e2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    status = arm_mat_sub_f32(&kf->z_k, &kf->temp7, &kf->temp7); // temp7 = y_k = z_k - H * x_k
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	f503 6080 	add.w	r0, r3, #1024	@ 0x400
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f203 71e4 	addw	r1, r3, #2020	@ 0x7e4
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	f203 73e4 	addw	r3, r3, #2020	@ 0x7e4
 80020f8:	461a      	mov	r2, r3
 80020fa:	f01a fdb5 	bl	801cc68 <arm_mat_sub_f32>
 80020fe:	4603      	mov	r3, r0
 8002100:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    // S_k = H * P_k * H^T + R
    status = arm_mat_mult_f32(&kf->H, &kf->P_k, &kf->temp4); // temp4 = H * P_k
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f503 700e 	add.w	r0, r3, #568	@ 0x238
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	f103 0120 	add.w	r1, r3, #32
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f203 6394 	addw	r3, r3, #1684	@ 0x694
 8002116:	461a      	mov	r2, r3
 8002118:	f01a fe10 	bl	801cd3c <arm_mat_mult_f32>
 800211c:	4603      	mov	r3, r0
 800211e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    status = arm_mat_trans_f32(&kf->H, &kf->temp5); // temp5 = H^T
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	f503 720e 	add.w	r2, r3, #568	@ 0x238
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f203 732c 	addw	r3, r3, #1836	@ 0x72c
 800212e:	4619      	mov	r1, r3
 8002130:	4610      	mov	r0, r2
 8002132:	f01a fd3d 	bl	801cbb0 <arm_mat_trans_f32>
 8002136:	4603      	mov	r3, r0
 8002138:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    status = arm_mat_mult_f32(&kf->temp4, &kf->temp5, &kf->temp3); // temp3 = temp4 * temp5
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f203 6094 	addw	r0, r3, #1684	@ 0x694
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f203 712c 	addw	r1, r3, #1836	@ 0x72c
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f203 53fc 	addw	r3, r3, #1532	@ 0x5fc
 800214e:	461a      	mov	r2, r3
 8002150:	f01a fdf4 	bl	801cd3c <arm_mat_mult_f32>
 8002154:	4603      	mov	r3, r0
 8002156:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    status = arm_mat_add_f32(&kf->temp3, &kf->R, &kf->temp3); // temp3 = S_k = H * P_k * H^T + R
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	f203 50fc 	addw	r0, r3, #1532	@ 0x5fc
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f503 7134 	add.w	r1, r3, #720	@ 0x2d0
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	f203 53fc 	addw	r3, r3, #1532	@ 0x5fc
 800216c:	461a      	mov	r2, r3
 800216e:	f01a ff8f 	bl	801d090 <arm_mat_add_f32>
 8002172:	4603      	mov	r3, r0
 8002174:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    // K_k = P_k * H^T * inv(S_k)
    status = arm_mat_inverse_f32(&kf->temp3, &kf->temp2); // temp2 = inv(S_k)
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f203 52fc 	addw	r2, r3, #1532	@ 0x5fc
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	f203 5364 	addw	r3, r3, #1380	@ 0x564
 8002184:	4619      	mov	r1, r3
 8002186:	4610      	mov	r0, r2
 8002188:	f01a fe78 	bl	801ce7c <arm_mat_inverse_f32>
 800218c:	4603      	mov	r3, r0
 800218e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    status = arm_mat_mult_f32(&kf->P_k, &kf->temp5, &kf->temp4); // temp4 = P_k * H^T
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f103 0020 	add.w	r0, r3, #32
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f203 712c 	addw	r1, r3, #1836	@ 0x72c
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	f203 6394 	addw	r3, r3, #1684	@ 0x694
 80021a4:	461a      	mov	r2, r3
 80021a6:	f01a fdc9 	bl	801cd3c <arm_mat_mult_f32>
 80021aa:	4603      	mov	r3, r0
 80021ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    status = arm_mat_mult_f32(&kf->temp4, &kf->temp2, &kf->K_k); // K_k = temp4 * temp2
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f203 6094 	addw	r0, r3, #1684	@ 0x694
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	f203 5164 	addw	r1, r3, #1380	@ 0x564
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 80021c2:	461a      	mov	r2, r3
 80021c4:	f01a fdba 	bl	801cd3c <arm_mat_mult_f32>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    // x_k = x_k + K_k * y_k
    status = arm_mat_mult_f32(&kf->K_k, &kf->temp7, &kf->temp6); // temp6 = K_k * y_k
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	f503 705a 	add.w	r0, r3, #872	@ 0x368
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f203 71e4 	addw	r1, r3, #2020	@ 0x7e4
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	f203 73c4 	addw	r3, r3, #1988	@ 0x7c4
 80021e0:	461a      	mov	r2, r3
 80021e2:	f01a fdab 	bl	801cd3c <arm_mat_mult_f32>
 80021e6:	4603      	mov	r3, r0
 80021e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    status = arm_mat_add_f32(&kf->x_k, &kf->temp6, &kf->x_k); // x_k = x_k + temp6
 80021ec:	69f8      	ldr	r0, [r7, #28]
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	f203 73c4 	addw	r3, r3, #1988	@ 0x7c4
 80021f4:	69fa      	ldr	r2, [r7, #28]
 80021f6:	4619      	mov	r1, r3
 80021f8:	f01a ff4a 	bl	801d090 <arm_mat_add_f32>
 80021fc:	4603      	mov	r3, r0
 80021fe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    // P_k = (I - K_k * H) * P_k
    status = arm_mat_mult_f32(&kf->K_k, &kf->H, &kf->temp1); // temp1 = K_k * H
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	f503 705a 	add.w	r0, r3, #872	@ 0x368
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f503 710e 	add.w	r1, r3, #568	@ 0x238
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	f203 43cc 	addw	r3, r3, #1228	@ 0x4cc
 8002214:	461a      	mov	r2, r3
 8002216:	f01a fd91 	bl	801cd3c <arm_mat_mult_f32>
 800221a:	4603      	mov	r3, r0
 800221c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    status = arm_mat_sub_f32(&kf->I, &kf->temp1, &kf->temp2); // temp2 = I - K_k * H
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f203 4034 	addw	r0, r3, #1076	@ 0x434
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	f203 41cc 	addw	r1, r3, #1228	@ 0x4cc
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f203 5364 	addw	r3, r3, #1380	@ 0x564
 8002232:	461a      	mov	r2, r3
 8002234:	f01a fd18 	bl	801cc68 <arm_mat_sub_f32>
 8002238:	4603      	mov	r3, r0
 800223a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    status = arm_mat_mult_f32(&kf->temp2, &kf->P_k, &kf->P_k); // P_k = temp2 * P_k
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	f203 5064 	addw	r0, r3, #1380	@ 0x564
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f103 0120 	add.w	r1, r3, #32
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3320      	adds	r3, #32
 800224e:	461a      	mov	r2, r3
 8002250:	f01a fd74 	bl	801cd3c <arm_mat_mult_f32>
 8002254:	4603      	mov	r3, r0
 8002256:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
}
 800225a:	bf00      	nop
 800225c:	3740      	adds	r7, #64	@ 0x40
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002268:	f001 fd7b 	bl	8003d62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800226c:	f000 f826 	bl	80022bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002270:	f7ff fa12 	bl	8001698 <MX_GPIO_Init>
  MX_DMA_Init();
 8002274:	f7ff f922 	bl	80014bc <MX_DMA_Init>
  MX_IWDG_Init();
 8002278:	f7ff fb0e 	bl	8001898 <MX_IWDG_Init>
  MX_LPUART1_UART_Init();
 800227c:	f001 fb50 	bl	8003920 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8002280:	f7ff fa70 	bl	8001764 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002284:	f001 fb96 	bl	80039b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c1) == 1);
 8002288:	bf00      	nop
 800228a:	4809      	ldr	r0, [pc, #36]	@ (80022b0 <main+0x4c>)
 800228c:	f006 fca6 	bl	8008bdc <MPU6050_Init>
 8002290:	4603      	mov	r3, r0
 8002292:	2b01      	cmp	r3, #1
 8002294:	d0f9      	beq.n	800228a <main+0x26>
//  KalmanFilter_Init();
//  KalmanFilter_Init(&kf_roll, 0.01f);
//  KalmanFilter_Init(&kf_pitch, 0.01f);
  KalmanFilter_Init(&kf, 0.01712); // 58.4 HZ loop
 8002296:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 80022b4 <main+0x50>
 800229a:	4807      	ldr	r0, [pc, #28]	@ (80022b8 <main+0x54>)
 800229c:	f7ff fb1a 	bl	80018d4 <KalmanFilter_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80022a0:	f007 f87c 	bl	800939c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80022a4:	f7fe fea8 	bl	8000ff8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80022a8:	f007 f89c 	bl	80093e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80022ac:	bf00      	nop
 80022ae:	e7fd      	b.n	80022ac <main+0x48>
 80022b0:	2000789c 	.word	0x2000789c
 80022b4:	3c8c3f3e 	.word	0x3c8c3f3e
 80022b8:	20007dd0 	.word	0x20007dd0

080022bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b094      	sub	sp, #80	@ 0x50
 80022c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022c2:	f107 0318 	add.w	r3, r7, #24
 80022c6:	2238      	movs	r2, #56	@ 0x38
 80022c8:	2100      	movs	r1, #0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f01b fc34 	bl	801db38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022d0:	1d3b      	adds	r3, r7, #4
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	609a      	str	r2, [r3, #8]
 80022da:	60da      	str	r2, [r3, #12]
 80022dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80022de:	2000      	movs	r0, #0
 80022e0:	f003 faea 	bl	80058b8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80022e4:	230a      	movs	r3, #10
 80022e6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022ee:	2340      	movs	r3, #64	@ 0x40
 80022f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80022f2:	2301      	movs	r3, #1
 80022f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022f6:	2302      	movs	r3, #2
 80022f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022fa:	2302      	movs	r3, #2
 80022fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80022fe:	2304      	movs	r3, #4
 8002300:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002302:	2355      	movs	r3, #85	@ 0x55
 8002304:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002306:	2302      	movs	r3, #2
 8002308:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800230a:	2302      	movs	r3, #2
 800230c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800230e:	2302      	movs	r3, #2
 8002310:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002312:	f107 0318 	add.w	r3, r7, #24
 8002316:	4618      	mov	r0, r3
 8002318:	f003 fb82 	bl	8005a20 <HAL_RCC_OscConfig>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002322:	f000 ffc1 	bl	80032a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002326:	230f      	movs	r3, #15
 8002328:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800232a:	2303      	movs	r3, #3
 800232c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	2104      	movs	r1, #4
 800233e:	4618      	mov	r0, r3
 8002340:	f003 fe80 	bl	8006044 <HAL_RCC_ClockConfig>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800234a:	f000 ffad 	bl	80032a8 <Error_Handler>
  }
}
 800234e:	bf00      	nop
 8002350:	3750      	adds	r7, #80	@ 0x50
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <timer_callback>:

/* USER CODE BEGIN 4 */
void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8002358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800235c:	b094      	sub	sp, #80	@ 0x50
 800235e:	af00      	add	r7, sp, #0
 8002360:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002362:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	if (timer != NULL) {
 8002366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 81bd 	beq.w	80026e8 <timer_callback+0x390>

		// Synchronize time with the agent
		rmw_uros_sync_session(1000);
 800236e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002372:	f00d fff9 	bl	8010368 <rmw_uros_sync_session>
		device_status = HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 1, 10);
 8002376:	230a      	movs	r3, #10
 8002378:	2201      	movs	r2, #1
 800237a:	21d0      	movs	r1, #208	@ 0xd0
 800237c:	48c2      	ldr	r0, [pc, #776]	@ (8002688 <timer_callback+0x330>)
 800237e:	f002 fdf7 	bl	8004f70 <HAL_I2C_IsDeviceReady>
 8002382:	4603      	mov	r3, r0
 8002384:	461a      	mov	r2, r3
 8002386:	4bc1      	ldr	r3, [pc, #772]	@ (800268c <timer_callback+0x334>)
 8002388:	701a      	strb	r2, [r3, #0]


		if(device_status == HAL_OK){
 800238a:	4bc0      	ldr	r3, [pc, #768]	@ (800268c <timer_callback+0x334>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	f040 819e 	bne.w	80026d0 <timer_callback+0x378>
			is_active = true;
 8002394:	4bbe      	ldr	r3, [pc, #760]	@ (8002690 <timer_callback+0x338>)
 8002396:	2201      	movs	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]
			if(is_calib ) {
 800239a:	4bbe      	ldr	r3, [pc, #760]	@ (8002694 <timer_callback+0x33c>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 8135 	beq.w	800260e <timer_callback+0x2b6>

				double linear_x, angular_z;
				readImuCalibrated();
 80023a4:	463b      	mov	r3, r7
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 fa42 	bl	8002830 <readImuCalibrated>

				rpfromAccel();
 80023ac:	f000 fbd4 	bl	8002b58 <rpfromAccel>
				rpfromGyro();
 80023b0:	f000 fc82 	bl	8002cb8 <rpfromGyro>
				RCCHECK(rcl_publish(&mpu6050_publisher, &mpu6050_msg, NULL));
 80023b4:	2200      	movs	r2, #0
 80023b6:	49b8      	ldr	r1, [pc, #736]	@ (8002698 <timer_callback+0x340>)
 80023b8:	48b8      	ldr	r0, [pc, #736]	@ (800269c <timer_callback+0x344>)
 80023ba:	f00c f885 	bl	800e4c8 <rcl_publish>

//				v_x = Kalman_getAngle(&KX, accel_angle.roll, data.gx, 0.01712 );
//				v_y = Kalman_getAngle(&KY, accel_angle.pitch, data.gy, 0.01712 );

				KalmanFilter_Update(&kf, accel_angle.roll, accel_angle.pitch, 0, data.gx, data.gy, data.gz);
 80023be:	4bb8      	ldr	r3, [pc, #736]	@ (80026a0 <timer_callback+0x348>)
 80023c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c4:	4610      	mov	r0, r2
 80023c6:	4619      	mov	r1, r3
 80023c8:	f7fe fbfe 	bl	8000bc8 <__aeabi_d2f>
 80023cc:	4604      	mov	r4, r0
 80023ce:	4bb4      	ldr	r3, [pc, #720]	@ (80026a0 <timer_callback+0x348>)
 80023d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80023d4:	4610      	mov	r0, r2
 80023d6:	4619      	mov	r1, r3
 80023d8:	f7fe fbf6 	bl	8000bc8 <__aeabi_d2f>
 80023dc:	4605      	mov	r5, r0
 80023de:	4bb1      	ldr	r3, [pc, #708]	@ (80026a4 <timer_callback+0x34c>)
 80023e0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023e4:	4610      	mov	r0, r2
 80023e6:	4619      	mov	r1, r3
 80023e8:	f7fe fbee 	bl	8000bc8 <__aeabi_d2f>
 80023ec:	4606      	mov	r6, r0
 80023ee:	4bad      	ldr	r3, [pc, #692]	@ (80026a4 <timer_callback+0x34c>)
 80023f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80023f4:	4610      	mov	r0, r2
 80023f6:	4619      	mov	r1, r3
 80023f8:	f7fe fbe6 	bl	8000bc8 <__aeabi_d2f>
 80023fc:	4680      	mov	r8, r0
 80023fe:	4ba9      	ldr	r3, [pc, #676]	@ (80026a4 <timer_callback+0x34c>)
 8002400:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002404:	4610      	mov	r0, r2
 8002406:	4619      	mov	r1, r3
 8002408:	f7fe fbde 	bl	8000bc8 <__aeabi_d2f>
 800240c:	4603      	mov	r3, r0
 800240e:	ee02 3a90 	vmov	s5, r3
 8002412:	ee02 8a10 	vmov	s4, r8
 8002416:	ee01 6a90 	vmov	s3, r6
 800241a:	ed9f 1aa3 	vldr	s2, [pc, #652]	@ 80026a8 <timer_callback+0x350>
 800241e:	ee00 5a90 	vmov	s1, r5
 8002422:	ee00 4a10 	vmov	s0, r4
 8002426:	48a1      	ldr	r0, [pc, #644]	@ (80026ac <timer_callback+0x354>)
 8002428:	f7ff fd98 	bl	8001f5c <KalmanFilter_Update>


				cmdvel_msg.linear.x =  LimitRange(mapd(kf.x_k_data[0], -70.0, 70.0, -40.0, 40.0), -20.0, 20.0);
 800242c:	4b9f      	ldr	r3, [pc, #636]	@ (80026ac <timer_callback+0x354>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe f8c1 	bl	80005b8 <__aeabi_f2d>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	ed9f 4b7b 	vldr	d4, [pc, #492]	@ 8002628 <timer_callback+0x2d0>
 800243e:	ed9f 3b7c 	vldr	d3, [pc, #496]	@ 8002630 <timer_callback+0x2d8>
 8002442:	ed9f 2b7d 	vldr	d2, [pc, #500]	@ 8002638 <timer_callback+0x2e0>
 8002446:	ed9f 1b7e 	vldr	d1, [pc, #504]	@ 8002640 <timer_callback+0x2e8>
 800244a:	ec43 2b10 	vmov	d0, r2, r3
 800244e:	f000 fccf 	bl	8002df0 <mapd>
 8002452:	eeb0 7a40 	vmov.f32	s14, s0
 8002456:	eef0 7a60 	vmov.f32	s15, s1
 800245a:	ed9f 2b7b 	vldr	d2, [pc, #492]	@ 8002648 <timer_callback+0x2f0>
 800245e:	ed9f 1b7c 	vldr	d1, [pc, #496]	@ 8002650 <timer_callback+0x2f8>
 8002462:	eeb0 0a47 	vmov.f32	s0, s14
 8002466:	eef0 0a67 	vmov.f32	s1, s15
 800246a:	f000 fd07 	bl	8002e7c <LimitRange>
 800246e:	eeb0 7a40 	vmov.f32	s14, s0
 8002472:	eef0 7a60 	vmov.f32	s15, s1
 8002476:	4b8e      	ldr	r3, [pc, #568]	@ (80026b0 <timer_callback+0x358>)
 8002478:	ed83 7b00 	vstr	d7, [r3]
				cmdvel_msg.angular.z = mapd(kf.x_k_data[1], -50.0, 50.0, -5.0, 5.0);
 800247c:	4b8b      	ldr	r3, [pc, #556]	@ (80026ac <timer_callback+0x354>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe f899 	bl	80005b8 <__aeabi_f2d>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	ed9f 4b73 	vldr	d4, [pc, #460]	@ 8002658 <timer_callback+0x300>
 800248e:	ed9f 3b74 	vldr	d3, [pc, #464]	@ 8002660 <timer_callback+0x308>
 8002492:	ed9f 2b75 	vldr	d2, [pc, #468]	@ 8002668 <timer_callback+0x310>
 8002496:	ed9f 1b76 	vldr	d1, [pc, #472]	@ 8002670 <timer_callback+0x318>
 800249a:	ec43 2b10 	vmov	d0, r2, r3
 800249e:	f000 fca7 	bl	8002df0 <mapd>
 80024a2:	eeb0 7a40 	vmov.f32	s14, s0
 80024a6:	eef0 7a60 	vmov.f32	s15, s1
 80024aa:	4b81      	ldr	r3, [pc, #516]	@ (80026b0 <timer_callback+0x358>)
 80024ac:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28

				linear_x =  LimitRange(mapd(kf.x_k_data[0], -70.0, 70.0, -40.0, 40.0), -20.0, 20.0);
 80024b0:	4b7e      	ldr	r3, [pc, #504]	@ (80026ac <timer_callback+0x354>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe f87f 	bl	80005b8 <__aeabi_f2d>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	ed9f 4b5a 	vldr	d4, [pc, #360]	@ 8002628 <timer_callback+0x2d0>
 80024c2:	ed9f 3b5b 	vldr	d3, [pc, #364]	@ 8002630 <timer_callback+0x2d8>
 80024c6:	ed9f 2b5c 	vldr	d2, [pc, #368]	@ 8002638 <timer_callback+0x2e0>
 80024ca:	ed9f 1b5d 	vldr	d1, [pc, #372]	@ 8002640 <timer_callback+0x2e8>
 80024ce:	ec43 2b10 	vmov	d0, r2, r3
 80024d2:	f000 fc8d 	bl	8002df0 <mapd>
 80024d6:	eeb0 7a40 	vmov.f32	s14, s0
 80024da:	eef0 7a60 	vmov.f32	s15, s1
 80024de:	ed9f 2b5a 	vldr	d2, [pc, #360]	@ 8002648 <timer_callback+0x2f0>
 80024e2:	ed9f 1b5b 	vldr	d1, [pc, #364]	@ 8002650 <timer_callback+0x2f8>
 80024e6:	eeb0 0a47 	vmov.f32	s0, s14
 80024ea:	eef0 0a67 	vmov.f32	s1, s15
 80024ee:	f000 fcc5 	bl	8002e7c <LimitRange>
 80024f2:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48
				angular_z = mapd(kf.x_k_data[1], -50.0, 50.0, -5.0, 5.0);
 80024f6:	4b6d      	ldr	r3, [pc, #436]	@ (80026ac <timer_callback+0x354>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe f85c 	bl	80005b8 <__aeabi_f2d>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	ed9f 4b54 	vldr	d4, [pc, #336]	@ 8002658 <timer_callback+0x300>
 8002508:	ed9f 3b55 	vldr	d3, [pc, #340]	@ 8002660 <timer_callback+0x308>
 800250c:	ed9f 2b56 	vldr	d2, [pc, #344]	@ 8002668 <timer_callback+0x310>
 8002510:	ed9f 1b57 	vldr	d1, [pc, #348]	@ 8002670 <timer_callback+0x318>
 8002514:	ec43 2b10 	vmov	d0, r2, r3
 8002518:	f000 fc6a 	bl	8002df0 <mapd>
 800251c:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40

				if((kf.x_k_data[0] >= -0.8) && (kf.x_k_data[0] <= 0.8)){
 8002520:	4b62      	ldr	r3, [pc, #392]	@ (80026ac <timer_callback+0x354>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe f847 	bl	80005b8 <__aeabi_f2d>
 800252a:	a353      	add	r3, pc, #332	@ (adr r3, 8002678 <timer_callback+0x320>)
 800252c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002530:	f7fe fb20 	bl	8000b74 <__aeabi_dcmpge>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d012      	beq.n	8002560 <timer_callback+0x208>
 800253a:	4b5c      	ldr	r3, [pc, #368]	@ (80026ac <timer_callback+0x354>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe f83a 	bl	80005b8 <__aeabi_f2d>
 8002544:	a34e      	add	r3, pc, #312	@ (adr r3, 8002680 <timer_callback+0x328>)
 8002546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254a:	f7fe fb09 	bl	8000b60 <__aeabi_dcmple>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <timer_callback+0x208>
					linear_x = 0.0;
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
				}
				if((kf.x_k_data[1] >= -1.5) && (kf.x_k_data[1] <= 1.5)){
 8002560:	4b52      	ldr	r3, [pc, #328]	@ (80026ac <timer_callback+0x354>)
 8002562:	edd3 7a03 	vldr	s15, [r3, #12]
 8002566:	eebf 7a08 	vmov.f32	s14, #248	@ 0xbfc00000 -1.5
 800256a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800256e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002572:	db0f      	blt.n	8002594 <timer_callback+0x23c>
 8002574:	4b4d      	ldr	r3, [pc, #308]	@ (80026ac <timer_callback+0x354>)
 8002576:	edd3 7a03 	vldr	s15, [r3, #12]
 800257a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800257e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002586:	d805      	bhi.n	8002594 <timer_callback+0x23c>
					angular_z = 0.0;
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	f04f 0300 	mov.w	r3, #0
 8002590:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
				}

				speedo_msg.linear.x = cmdvel_msg.linear.x;
 8002594:	4b46      	ldr	r3, [pc, #280]	@ (80026b0 <timer_callback+0x358>)
 8002596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259a:	4946      	ldr	r1, [pc, #280]	@ (80026b4 <timer_callback+0x35c>)
 800259c:	e9c1 2300 	strd	r2, r3, [r1]
				speedo_msg.angular.z = cmdvel_msg.angular.z;
 80025a0:	4b43      	ldr	r3, [pc, #268]	@ (80026b0 <timer_callback+0x358>)
 80025a2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80025a6:	4943      	ldr	r1, [pc, #268]	@ (80026b4 <timer_callback+0x35c>)
 80025a8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

				RCCHECK(rcl_publish(&cmd_vel, &cmdvel_msg, NULL));
 80025ac:	2200      	movs	r2, #0
 80025ae:	4940      	ldr	r1, [pc, #256]	@ (80026b0 <timer_callback+0x358>)
 80025b0:	4841      	ldr	r0, [pc, #260]	@ (80026b8 <timer_callback+0x360>)
 80025b2:	f00b ff89 	bl	800e4c8 <rcl_publish>
				RCCHECK(rcl_publish(&speedo_pub, &speedo_msg, NULL));
 80025b6:	2200      	movs	r2, #0
 80025b8:	493e      	ldr	r1, [pc, #248]	@ (80026b4 <timer_callback+0x35c>)
 80025ba:	4840      	ldr	r0, [pc, #256]	@ (80026bc <timer_callback+0x364>)
 80025bc:	f00b ff84 	bl	800e4c8 <rcl_publish>

				if(accel_angle.pitch > 8.0){
 80025c0:	4b37      	ldr	r3, [pc, #220]	@ (80026a0 <timer_callback+0x348>)
 80025c2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	4b3d      	ldr	r3, [pc, #244]	@ (80026c0 <timer_callback+0x368>)
 80025cc:	f7fe fadc 	bl	8000b88 <__aeabi_dcmpgt>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <timer_callback+0x286>
					blink_msg.data = 1;
 80025d6:	4b3b      	ldr	r3, [pc, #236]	@ (80026c4 <timer_callback+0x36c>)
 80025d8:	2201      	movs	r2, #1
 80025da:	701a      	strb	r2, [r3, #0]
 80025dc:	e011      	b.n	8002602 <timer_callback+0x2aa>
				}
				else if(accel_angle.pitch < -8.0){
 80025de:	4b30      	ldr	r3, [pc, #192]	@ (80026a0 <timer_callback+0x348>)
 80025e0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	4b37      	ldr	r3, [pc, #220]	@ (80026c8 <timer_callback+0x370>)
 80025ea:	f7fe faaf 	bl	8000b4c <__aeabi_dcmplt>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <timer_callback+0x2a4>
					blink_msg.data = -1;
 80025f4:	4b33      	ldr	r3, [pc, #204]	@ (80026c4 <timer_callback+0x36c>)
 80025f6:	22ff      	movs	r2, #255	@ 0xff
 80025f8:	701a      	strb	r2, [r3, #0]
 80025fa:	e002      	b.n	8002602 <timer_callback+0x2aa>
				}
				else{
					blink_msg.data = 0;
 80025fc:	4b31      	ldr	r3, [pc, #196]	@ (80026c4 <timer_callback+0x36c>)
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
				}

				RCCHECK(rcl_publish(&blinker_pub, &blink_msg, NULL))
 8002602:	2200      	movs	r2, #0
 8002604:	492f      	ldr	r1, [pc, #188]	@ (80026c4 <timer_callback+0x36c>)
 8002606:	4831      	ldr	r0, [pc, #196]	@ (80026cc <timer_callback+0x374>)
 8002608:	f00b ff5e 	bl	800e4c8 <rcl_publish>
 800260c:	e069      	b.n	80026e2 <timer_callback+0x38a>



			}
			else{
				readImuNonCalibrated();
 800260e:	463b      	mov	r3, r7
 8002610:	4618      	mov	r0, r3
 8002612:	f000 f9f5 	bl	8002a00 <readImuNonCalibrated>
				RCCHECK(rcl_publish(&mpu6050_publisher, &mpu6050_msg, NULL));
 8002616:	2200      	movs	r2, #0
 8002618:	491f      	ldr	r1, [pc, #124]	@ (8002698 <timer_callback+0x340>)
 800261a:	4820      	ldr	r0, [pc, #128]	@ (800269c <timer_callback+0x344>)
 800261c:	f00b ff54 	bl	800e4c8 <rcl_publish>
 8002620:	e05f      	b.n	80026e2 <timer_callback+0x38a>
 8002622:	bf00      	nop
 8002624:	f3af 8000 	nop.w
 8002628:	00000000 	.word	0x00000000
 800262c:	40440000 	.word	0x40440000
 8002630:	00000000 	.word	0x00000000
 8002634:	c0440000 	.word	0xc0440000
 8002638:	00000000 	.word	0x00000000
 800263c:	40518000 	.word	0x40518000
 8002640:	00000000 	.word	0x00000000
 8002644:	c0518000 	.word	0xc0518000
 8002648:	00000000 	.word	0x00000000
 800264c:	40340000 	.word	0x40340000
 8002650:	00000000 	.word	0x00000000
 8002654:	c0340000 	.word	0xc0340000
 8002658:	00000000 	.word	0x00000000
 800265c:	40140000 	.word	0x40140000
 8002660:	00000000 	.word	0x00000000
 8002664:	c0140000 	.word	0xc0140000
 8002668:	00000000 	.word	0x00000000
 800266c:	40490000 	.word	0x40490000
 8002670:	00000000 	.word	0x00000000
 8002674:	c0490000 	.word	0xc0490000
 8002678:	9999999a 	.word	0x9999999a
 800267c:	bfe99999 	.word	0xbfe99999
 8002680:	9999999a 	.word	0x9999999a
 8002684:	3fe99999 	.word	0x3fe99999
 8002688:	2000789c 	.word	0x2000789c
 800268c:	200085d4 	.word	0x200085d4
 8002690:	20007905 	.word	0x20007905
 8002694:	20007904 	.word	0x20007904
 8002698:	20007a00 	.word	0x20007a00
 800269c:	200079f8 	.word	0x200079f8
 80026a0:	20007d80 	.word	0x20007d80
 80026a4:	20007d28 	.word	0x20007d28
 80026a8:	00000000 	.word	0x00000000
 80026ac:	20007dd0 	.word	0x20007dd0
 80026b0:	20007da0 	.word	0x20007da0
 80026b4:	200085e8 	.word	0x200085e8
 80026b8:	20007d98 	.word	0x20007d98
 80026bc:	200085e0 	.word	0x200085e0
 80026c0:	40200000 	.word	0x40200000
 80026c4:	200085dc 	.word	0x200085dc
 80026c8:	c0200000 	.word	0xc0200000
 80026cc:	200085d8 	.word	0x200085d8
			}
		}
		else{
			is_active = false;
 80026d0:	4b08      	ldr	r3, [pc, #32]	@ (80026f4 <timer_callback+0x39c>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	701a      	strb	r2, [r3, #0]
			if(reset_flag == 1){
 80026d6:	4b08      	ldr	r3, [pc, #32]	@ (80026f8 <timer_callback+0x3a0>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d101      	bne.n	80026e2 <timer_callback+0x38a>
				HAL_NVIC_SystemReset();
 80026de:	f001 fc6e 	bl	8003fbe <HAL_NVIC_SystemReset>
			}
		}

		HAL_IWDG_Refresh(&hiwdg);
 80026e2:	4806      	ldr	r0, [pc, #24]	@ (80026fc <timer_callback+0x3a4>)
 80026e4:	f003 f8d8 	bl	8005898 <HAL_IWDG_Refresh>
	}

}
 80026e8:	bf00      	nop
 80026ea:	3750      	adds	r7, #80	@ 0x50
 80026ec:	46bd      	mov	sp, r7
 80026ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026f2:	bf00      	nop
 80026f4:	20007905 	.word	0x20007905
 80026f8:	200085d5 	.word	0x200085d5
 80026fc:	200078f0 	.word	0x200078f0

08002700 <service_callback>:


void service_callback(const void * request_msg, void * response_msg){
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
	// Cast messages to expected types
	imu_interfaces__srv__ImuCalibration_Request * req_in = (imu_interfaces__srv__ImuCalibration_Request * ) request_msg;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	613b      	str	r3, [r7, #16]

	imu_interfaces__srv__ImuCalibration_Response * res_in = (imu_interfaces__srv__ImuCalibration_Response * ) response_msg;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	60fb      	str	r3, [r7, #12]

	for(int i = 0; i < 9; i++){
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	e01e      	b.n	8002756 <service_callback+0x56>
		mpu6050_msg.linear_acceleration_covariance[i] = req_in->imu_calib.linear_acceleration_covariance[i];
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	331f      	adds	r3, #31
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	4413      	add	r3, r2
 8002722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002726:	4827      	ldr	r0, [pc, #156]	@ (80027c4 <service_callback+0xc4>)
 8002728:	6979      	ldr	r1, [r7, #20]
 800272a:	311f      	adds	r1, #31
 800272c:	00c9      	lsls	r1, r1, #3
 800272e:	4401      	add	r1, r0
 8002730:	e9c1 2300 	strd	r2, r3, [r1]
		mpu6050_msg.angular_velocity_covariance[i] = req_in->imu_calib.angular_velocity_covariance[i];
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	3313      	adds	r3, #19
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4413      	add	r3, r2
 800273e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002742:	4820      	ldr	r0, [pc, #128]	@ (80027c4 <service_callback+0xc4>)
 8002744:	6979      	ldr	r1, [r7, #20]
 8002746:	3113      	adds	r1, #19
 8002748:	00c9      	lsls	r1, r1, #3
 800274a:	4401      	add	r1, r0
 800274c:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i = 0; i < 9; i++){
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	3301      	adds	r3, #1
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2b08      	cmp	r3, #8
 800275a:	dddd      	ble.n	8002718 <service_callback+0x18>
	}


	accel_offset.x = req_in->imu_calib.linear_acceleration.x;
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 8002762:	4919      	ldr	r1, [pc, #100]	@ (80027c8 <service_callback+0xc8>)
 8002764:	e9c1 2300 	strd	r2, r3, [r1]
	accel_offset.y = req_in->imu_calib.linear_acceleration.y;
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 800276e:	4916      	ldr	r1, [pc, #88]	@ (80027c8 <service_callback+0xc8>)
 8002770:	e9c1 2302 	strd	r2, r3, [r1, #8]
	accel_offset.z = req_in->imu_calib.linear_acceleration.z;
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 800277a:	4913      	ldr	r1, [pc, #76]	@ (80027c8 <service_callback+0xc8>)
 800277c:	e9c1 2304 	strd	r2, r3, [r1, #16]

	gyro_offset.x = req_in->imu_calib.angular_velocity.x;
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8002786:	4911      	ldr	r1, [pc, #68]	@ (80027cc <service_callback+0xcc>)
 8002788:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_offset.y = req_in->imu_calib.angular_velocity.y;
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8002792:	490e      	ldr	r1, [pc, #56]	@ (80027cc <service_callback+0xcc>)
 8002794:	e9c1 2302 	strd	r2, r3, [r1, #8]
	gyro_offset.z = req_in->imu_calib.angular_velocity.z;
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800279e:	490b      	ldr	r1, [pc, #44]	@ (80027cc <service_callback+0xcc>)
 80027a0:	e9c1 2304 	strd	r2, r3, [r1, #16]

	is_calib = true;
 80027a4:	4b0a      	ldr	r3, [pc, #40]	@ (80027d0 <service_callback+0xd0>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	701a      	strb	r2, [r3, #0]

	res_in->success = true;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2201      	movs	r2, #1
 80027ae:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80027b0:	2120      	movs	r1, #32
 80027b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027b6:	f002 f8f7 	bl	80049a8 <HAL_GPIO_TogglePin>


}
 80027ba:	bf00      	nop
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20007a00 	.word	0x20007a00
 80027c8:	20007cf8 	.word	0x20007cf8
 80027cc:	20007d10 	.word	0x20007d10
 80027d0:	20007904 	.word	0x20007904

080027d4 <status_callback>:

void status_callback(const void * request_msg, void * response_msg){
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
	// Cast messages to expected types

	std_srvs__srv__Trigger_Response * res_in = (std_srvs__srv__Trigger_Response  * ) response_msg;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	60fb      	str	r3, [r7, #12]

	if(is_active){
 80027e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002820 <status_callback+0x4c>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d009      	beq.n	80027fe <status_callback+0x2a>
		res_in->success = true;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2201      	movs	r2, #1
 80027ee:	701a      	strb	r2, [r3, #0]
		rosidl_runtime_c__String__assign(&res_in->message, "Connection Successful");
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	3304      	adds	r3, #4
 80027f4:	490b      	ldr	r1, [pc, #44]	@ (8002824 <status_callback+0x50>)
 80027f6:	4618      	mov	r0, r3
 80027f8:	f00e fa50 	bl	8010c9c <rosidl_runtime_c__String__assign>
		reset_flag = 1;


	}

}
 80027fc:	e00b      	b.n	8002816 <status_callback+0x42>
		res_in->success = false;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]
		rosidl_runtime_c__String__assign(&res_in->message, "Connection Failed. Resetting . . .");
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	3304      	adds	r3, #4
 8002808:	4907      	ldr	r1, [pc, #28]	@ (8002828 <status_callback+0x54>)
 800280a:	4618      	mov	r0, r3
 800280c:	f00e fa46 	bl	8010c9c <rosidl_runtime_c__String__assign>
		reset_flag = 1;
 8002810:	4b06      	ldr	r3, [pc, #24]	@ (800282c <status_callback+0x58>)
 8002812:	2201      	movs	r2, #1
 8002814:	701a      	strb	r2, [r3, #0]
}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20007905 	.word	0x20007905
 8002824:	0801fb78 	.word	0x0801fb78
 8002828:	0801fb90 	.word	0x0801fb90
 800282c:	200085d5 	.word	0x200085d5

08002830 <readImuCalibrated>:

tuple_double_t readImuCalibrated(){
 8002830:	b5b0      	push	{r4, r5, r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
	MPU6050_Read_All(&hi2c1, &MPU6050);
 8002838:	496b      	ldr	r1, [pc, #428]	@ (80029e8 <readImuCalibrated+0x1b8>)
 800283a:	486c      	ldr	r0, [pc, #432]	@ (80029ec <readImuCalibrated+0x1bc>)
 800283c:	f006 fa28 	bl	8008c90 <MPU6050_Read_All>
	mpu6050_msg.header.stamp.sec = rmw_uros_epoch_millis() / 1000;
 8002840:	f00d fd76 	bl	8010330 <rmw_uros_epoch_millis>
 8002844:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	f7fe fa0c 	bl	8000c68 <__aeabi_ldivmod>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4b66      	ldr	r3, [pc, #408]	@ (80029f0 <readImuCalibrated+0x1c0>)
 8002856:	601a      	str	r2, [r3, #0]
	mpu6050_msg.header.stamp.nanosec = 	rmw_uros_epoch_nanos();
 8002858:	f00d fd78 	bl	801034c <rmw_uros_epoch_nanos>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4b63      	ldr	r3, [pc, #396]	@ (80029f0 <readImuCalibrated+0x1c0>)
 8002862:	605a      	str	r2, [r3, #4]
	mpu6050_msg.linear_acceleration.x = G2M_S2 * MPU6050.Ax - accel_offset.x;
 8002864:	4b60      	ldr	r3, [pc, #384]	@ (80029e8 <readImuCalibrated+0x1b8>)
 8002866:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800286a:	a35b      	add	r3, pc, #364	@ (adr r3, 80029d8 <readImuCalibrated+0x1a8>)
 800286c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002870:	f7fd fefa 	bl	8000668 <__aeabi_dmul>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4610      	mov	r0, r2
 800287a:	4619      	mov	r1, r3
 800287c:	4b5d      	ldr	r3, [pc, #372]	@ (80029f4 <readImuCalibrated+0x1c4>)
 800287e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002882:	f7fd fd39 	bl	80002f8 <__aeabi_dsub>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4959      	ldr	r1, [pc, #356]	@ (80029f0 <readImuCalibrated+0x1c0>)
 800288c:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
	mpu6050_msg.linear_acceleration.y = G2M_S2 * MPU6050.Ay - accel_offset.y;
 8002890:	4b55      	ldr	r3, [pc, #340]	@ (80029e8 <readImuCalibrated+0x1b8>)
 8002892:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002896:	a350      	add	r3, pc, #320	@ (adr r3, 80029d8 <readImuCalibrated+0x1a8>)
 8002898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289c:	f7fd fee4 	bl	8000668 <__aeabi_dmul>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4610      	mov	r0, r2
 80028a6:	4619      	mov	r1, r3
 80028a8:	4b52      	ldr	r3, [pc, #328]	@ (80029f4 <readImuCalibrated+0x1c4>)
 80028aa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80028ae:	f7fd fd23 	bl	80002f8 <__aeabi_dsub>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	494e      	ldr	r1, [pc, #312]	@ (80029f0 <readImuCalibrated+0x1c0>)
 80028b8:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
	mpu6050_msg.linear_acceleration.z = G2M_S2 * MPU6050.Az - accel_offset.z;
 80028bc:	4b4a      	ldr	r3, [pc, #296]	@ (80029e8 <readImuCalibrated+0x1b8>)
 80028be:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80028c2:	a345      	add	r3, pc, #276	@ (adr r3, 80029d8 <readImuCalibrated+0x1a8>)
 80028c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c8:	f7fd fece 	bl	8000668 <__aeabi_dmul>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4610      	mov	r0, r2
 80028d2:	4619      	mov	r1, r3
 80028d4:	4b47      	ldr	r3, [pc, #284]	@ (80029f4 <readImuCalibrated+0x1c4>)
 80028d6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80028da:	f7fd fd0d 	bl	80002f8 <__aeabi_dsub>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4943      	ldr	r1, [pc, #268]	@ (80029f0 <readImuCalibrated+0x1c0>)
 80028e4:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0

	mpu6050_msg.angular_velocity.x = DEG2RAD * MPU6050.Gx - gyro_offset.x;
 80028e8:	4b3f      	ldr	r3, [pc, #252]	@ (80029e8 <readImuCalibrated+0x1b8>)
 80028ea:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80028ee:	a33c      	add	r3, pc, #240	@ (adr r3, 80029e0 <readImuCalibrated+0x1b0>)
 80028f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f4:	f7fd feb8 	bl	8000668 <__aeabi_dmul>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4610      	mov	r0, r2
 80028fe:	4619      	mov	r1, r3
 8002900:	4b3d      	ldr	r3, [pc, #244]	@ (80029f8 <readImuCalibrated+0x1c8>)
 8002902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002906:	f7fd fcf7 	bl	80002f8 <__aeabi_dsub>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4938      	ldr	r1, [pc, #224]	@ (80029f0 <readImuCalibrated+0x1c0>)
 8002910:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	mpu6050_msg.angular_velocity.y = DEG2RAD * MPU6050.Gy - gyro_offset.y;
 8002914:	4b34      	ldr	r3, [pc, #208]	@ (80029e8 <readImuCalibrated+0x1b8>)
 8002916:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800291a:	a331      	add	r3, pc, #196	@ (adr r3, 80029e0 <readImuCalibrated+0x1b0>)
 800291c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002920:	f7fd fea2 	bl	8000668 <__aeabi_dmul>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4610      	mov	r0, r2
 800292a:	4619      	mov	r1, r3
 800292c:	4b32      	ldr	r3, [pc, #200]	@ (80029f8 <readImuCalibrated+0x1c8>)
 800292e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002932:	f7fd fce1 	bl	80002f8 <__aeabi_dsub>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	492d      	ldr	r1, [pc, #180]	@ (80029f0 <readImuCalibrated+0x1c0>)
 800293c:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	mpu6050_msg.angular_velocity.z = DEG2RAD * MPU6050.Gz - gyro_offset.z;
 8002940:	4b29      	ldr	r3, [pc, #164]	@ (80029e8 <readImuCalibrated+0x1b8>)
 8002942:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002946:	a326      	add	r3, pc, #152	@ (adr r3, 80029e0 <readImuCalibrated+0x1b0>)
 8002948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294c:	f7fd fe8c 	bl	8000668 <__aeabi_dmul>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4610      	mov	r0, r2
 8002956:	4619      	mov	r1, r3
 8002958:	4b27      	ldr	r3, [pc, #156]	@ (80029f8 <readImuCalibrated+0x1c8>)
 800295a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800295e:	f7fd fccb 	bl	80002f8 <__aeabi_dsub>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4922      	ldr	r1, [pc, #136]	@ (80029f0 <readImuCalibrated+0x1c0>)
 8002968:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

	data.ax = mpu6050_msg.linear_acceleration.x;
 800296c:	4b20      	ldr	r3, [pc, #128]	@ (80029f0 <readImuCalibrated+0x1c0>)
 800296e:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 8002972:	4922      	ldr	r1, [pc, #136]	@ (80029fc <readImuCalibrated+0x1cc>)
 8002974:	e9c1 2300 	strd	r2, r3, [r1]
	data.ay = mpu6050_msg.linear_acceleration.y;
 8002978:	4b1d      	ldr	r3, [pc, #116]	@ (80029f0 <readImuCalibrated+0x1c0>)
 800297a:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 800297e:	491f      	ldr	r1, [pc, #124]	@ (80029fc <readImuCalibrated+0x1cc>)
 8002980:	e9c1 2302 	strd	r2, r3, [r1, #8]
	data.az = mpu6050_msg.linear_acceleration.z;
 8002984:	4b1a      	ldr	r3, [pc, #104]	@ (80029f0 <readImuCalibrated+0x1c0>)
 8002986:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 800298a:	491c      	ldr	r1, [pc, #112]	@ (80029fc <readImuCalibrated+0x1cc>)
 800298c:	e9c1 2304 	strd	r2, r3, [r1, #16]

	data.gx = mpu6050_msg.angular_velocity.x;
 8002990:	4b17      	ldr	r3, [pc, #92]	@ (80029f0 <readImuCalibrated+0x1c0>)
 8002992:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8002996:	4919      	ldr	r1, [pc, #100]	@ (80029fc <readImuCalibrated+0x1cc>)
 8002998:	e9c1 2306 	strd	r2, r3, [r1, #24]
	data.gy = mpu6050_msg.angular_velocity.y;
 800299c:	4b14      	ldr	r3, [pc, #80]	@ (80029f0 <readImuCalibrated+0x1c0>)
 800299e:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80029a2:	4916      	ldr	r1, [pc, #88]	@ (80029fc <readImuCalibrated+0x1cc>)
 80029a4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	data.gz = mpu6050_msg.angular_velocity.z;
 80029a8:	4b11      	ldr	r3, [pc, #68]	@ (80029f0 <readImuCalibrated+0x1c0>)
 80029aa:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80029ae:	4913      	ldr	r1, [pc, #76]	@ (80029fc <readImuCalibrated+0x1cc>)
 80029b0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	return data;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a11      	ldr	r2, [pc, #68]	@ (80029fc <readImuCalibrated+0x1cc>)
 80029b8:	461c      	mov	r4, r3
 80029ba:	4615      	mov	r5, r2
 80029bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80029c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bdb0      	pop	{r4, r5, r7, pc}
 80029d4:	f3af 8000 	nop.w
 80029d8:	51eb851f 	.word	0x51eb851f
 80029dc:	40239eb8 	.word	0x40239eb8
 80029e0:	a2529d39 	.word	0xa2529d39
 80029e4:	3f91df46 	.word	0x3f91df46
 80029e8:	20007ca0 	.word	0x20007ca0
 80029ec:	2000789c 	.word	0x2000789c
 80029f0:	20007a00 	.word	0x20007a00
 80029f4:	20007cf8 	.word	0x20007cf8
 80029f8:	20007d10 	.word	0x20007d10
 80029fc:	20007d28 	.word	0x20007d28

08002a00 <readImuNonCalibrated>:

tuple_double_t readImuNonCalibrated(){
 8002a00:	b5b0      	push	{r4, r5, r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
	MPU6050_Read_All(&hi2c1, &MPU6050);
 8002a08:	494f      	ldr	r1, [pc, #316]	@ (8002b48 <readImuNonCalibrated+0x148>)
 8002a0a:	4850      	ldr	r0, [pc, #320]	@ (8002b4c <readImuNonCalibrated+0x14c>)
 8002a0c:	f006 f940 	bl	8008c90 <MPU6050_Read_All>
	mpu6050_msg.header.stamp.sec = rmw_uros_epoch_millis() / 1000;
 8002a10:	f00d fc8e 	bl	8010330 <rmw_uros_epoch_millis>
 8002a14:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	f7fe f924 	bl	8000c68 <__aeabi_ldivmod>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4b4a      	ldr	r3, [pc, #296]	@ (8002b50 <readImuNonCalibrated+0x150>)
 8002a26:	601a      	str	r2, [r3, #0]
	mpu6050_msg.header.stamp.nanosec = 	rmw_uros_epoch_nanos();
 8002a28:	f00d fc90 	bl	801034c <rmw_uros_epoch_nanos>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4b47      	ldr	r3, [pc, #284]	@ (8002b50 <readImuNonCalibrated+0x150>)
 8002a32:	605a      	str	r2, [r3, #4]
	mpu6050_msg.linear_acceleration.x = G2M_S2 * MPU6050.Ax ;
 8002a34:	4b44      	ldr	r3, [pc, #272]	@ (8002b48 <readImuNonCalibrated+0x148>)
 8002a36:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002a3a:	a33f      	add	r3, pc, #252	@ (adr r3, 8002b38 <readImuNonCalibrated+0x138>)
 8002a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a40:	f7fd fe12 	bl	8000668 <__aeabi_dmul>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4941      	ldr	r1, [pc, #260]	@ (8002b50 <readImuNonCalibrated+0x150>)
 8002a4a:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
	mpu6050_msg.linear_acceleration.y = G2M_S2 * MPU6050.Ay;
 8002a4e:	4b3e      	ldr	r3, [pc, #248]	@ (8002b48 <readImuNonCalibrated+0x148>)
 8002a50:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002a54:	a338      	add	r3, pc, #224	@ (adr r3, 8002b38 <readImuNonCalibrated+0x138>)
 8002a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5a:	f7fd fe05 	bl	8000668 <__aeabi_dmul>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	493b      	ldr	r1, [pc, #236]	@ (8002b50 <readImuNonCalibrated+0x150>)
 8002a64:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
	mpu6050_msg.linear_acceleration.z = G2M_S2 * MPU6050.Az;
 8002a68:	4b37      	ldr	r3, [pc, #220]	@ (8002b48 <readImuNonCalibrated+0x148>)
 8002a6a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002a6e:	a332      	add	r3, pc, #200	@ (adr r3, 8002b38 <readImuNonCalibrated+0x138>)
 8002a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a74:	f7fd fdf8 	bl	8000668 <__aeabi_dmul>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4934      	ldr	r1, [pc, #208]	@ (8002b50 <readImuNonCalibrated+0x150>)
 8002a7e:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0

	mpu6050_msg.angular_velocity.x = DEG2RAD * MPU6050.Gx;
 8002a82:	4b31      	ldr	r3, [pc, #196]	@ (8002b48 <readImuNonCalibrated+0x148>)
 8002a84:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002a88:	a32d      	add	r3, pc, #180	@ (adr r3, 8002b40 <readImuNonCalibrated+0x140>)
 8002a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8e:	f7fd fdeb 	bl	8000668 <__aeabi_dmul>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	492e      	ldr	r1, [pc, #184]	@ (8002b50 <readImuNonCalibrated+0x150>)
 8002a98:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	mpu6050_msg.angular_velocity.y = DEG2RAD * MPU6050.Gy ;
 8002a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8002b48 <readImuNonCalibrated+0x148>)
 8002a9e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002aa2:	a327      	add	r3, pc, #156	@ (adr r3, 8002b40 <readImuNonCalibrated+0x140>)
 8002aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa8:	f7fd fdde 	bl	8000668 <__aeabi_dmul>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4927      	ldr	r1, [pc, #156]	@ (8002b50 <readImuNonCalibrated+0x150>)
 8002ab2:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	mpu6050_msg.angular_velocity.z = DEG2RAD * MPU6050.Gz ;
 8002ab6:	4b24      	ldr	r3, [pc, #144]	@ (8002b48 <readImuNonCalibrated+0x148>)
 8002ab8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002abc:	a320      	add	r3, pc, #128	@ (adr r3, 8002b40 <readImuNonCalibrated+0x140>)
 8002abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac2:	f7fd fdd1 	bl	8000668 <__aeabi_dmul>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4921      	ldr	r1, [pc, #132]	@ (8002b50 <readImuNonCalibrated+0x150>)
 8002acc:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

	data.ax = mpu6050_msg.linear_acceleration.x;
 8002ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8002b50 <readImuNonCalibrated+0x150>)
 8002ad2:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 8002ad6:	491f      	ldr	r1, [pc, #124]	@ (8002b54 <readImuNonCalibrated+0x154>)
 8002ad8:	e9c1 2300 	strd	r2, r3, [r1]
	data.ay = mpu6050_msg.linear_acceleration.y;
 8002adc:	4b1c      	ldr	r3, [pc, #112]	@ (8002b50 <readImuNonCalibrated+0x150>)
 8002ade:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 8002ae2:	491c      	ldr	r1, [pc, #112]	@ (8002b54 <readImuNonCalibrated+0x154>)
 8002ae4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	data.az = mpu6050_msg.linear_acceleration.z;
 8002ae8:	4b19      	ldr	r3, [pc, #100]	@ (8002b50 <readImuNonCalibrated+0x150>)
 8002aea:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 8002aee:	4919      	ldr	r1, [pc, #100]	@ (8002b54 <readImuNonCalibrated+0x154>)
 8002af0:	e9c1 2304 	strd	r2, r3, [r1, #16]

	data.gx = mpu6050_msg.angular_velocity.x;
 8002af4:	4b16      	ldr	r3, [pc, #88]	@ (8002b50 <readImuNonCalibrated+0x150>)
 8002af6:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8002afa:	4916      	ldr	r1, [pc, #88]	@ (8002b54 <readImuNonCalibrated+0x154>)
 8002afc:	e9c1 2306 	strd	r2, r3, [r1, #24]
	data.gy = mpu6050_msg.angular_velocity.y;
 8002b00:	4b13      	ldr	r3, [pc, #76]	@ (8002b50 <readImuNonCalibrated+0x150>)
 8002b02:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8002b06:	4913      	ldr	r1, [pc, #76]	@ (8002b54 <readImuNonCalibrated+0x154>)
 8002b08:	e9c1 2308 	strd	r2, r3, [r1, #32]
	data.gz = mpu6050_msg.angular_velocity.z;
 8002b0c:	4b10      	ldr	r3, [pc, #64]	@ (8002b50 <readImuNonCalibrated+0x150>)
 8002b0e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8002b12:	4910      	ldr	r1, [pc, #64]	@ (8002b54 <readImuNonCalibrated+0x154>)
 8002b14:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	return data;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8002b54 <readImuNonCalibrated+0x154>)
 8002b1c:	461c      	mov	r4, r3
 8002b1e:	4615      	mov	r5, r2
 8002b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002b2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bdb0      	pop	{r4, r5, r7, pc}
 8002b38:	51eb851f 	.word	0x51eb851f
 8002b3c:	40239eb8 	.word	0x40239eb8
 8002b40:	a2529d39 	.word	0xa2529d39
 8002b44:	3f91df46 	.word	0x3f91df46
 8002b48:	20007ca0 	.word	0x20007ca0
 8002b4c:	2000789c 	.word	0x2000789c
 8002b50:	20007a00 	.word	0x20007a00
 8002b54:	20007d28 	.word	0x20007d28

08002b58 <rpfromAccel>:

void rpfromAccel(){
 8002b58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b5c:	ed2d 8b02 	vpush	{d8}
 8002b60:	af00      	add	r7, sp, #0
//	accel_angle.roll =  atan2(data.ay, data.az) * RAD2DEG ;
	accel_angle.roll =  atan2(data.ay, sqrt(data.ax * data.ax + data.az * data.az )) * RAD2DEG ;
 8002b62:	4b51      	ldr	r3, [pc, #324]	@ (8002ca8 <rpfromAccel+0x150>)
 8002b64:	ed93 8b02 	vldr	d8, [r3, #8]
 8002b68:	4b4f      	ldr	r3, [pc, #316]	@ (8002ca8 <rpfromAccel+0x150>)
 8002b6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b6e:	4b4e      	ldr	r3, [pc, #312]	@ (8002ca8 <rpfromAccel+0x150>)
 8002b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b74:	f7fd fd78 	bl	8000668 <__aeabi_dmul>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4690      	mov	r8, r2
 8002b7e:	4699      	mov	r9, r3
 8002b80:	4b49      	ldr	r3, [pc, #292]	@ (8002ca8 <rpfromAccel+0x150>)
 8002b82:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002b86:	4b48      	ldr	r3, [pc, #288]	@ (8002ca8 <rpfromAccel+0x150>)
 8002b88:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002b8c:	f7fd fd6c 	bl	8000668 <__aeabi_dmul>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4640      	mov	r0, r8
 8002b96:	4649      	mov	r1, r9
 8002b98:	f7fd fbb0 	bl	80002fc <__adddf3>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	ec43 2b17 	vmov	d7, r2, r3
 8002ba4:	eeb0 0a47 	vmov.f32	s0, s14
 8002ba8:	eef0 0a67 	vmov.f32	s1, s15
 8002bac:	f01b fee2 	bl	801e974 <sqrt>
 8002bb0:	eeb0 7a40 	vmov.f32	s14, s0
 8002bb4:	eef0 7a60 	vmov.f32	s15, s1
 8002bb8:	eeb0 1a47 	vmov.f32	s2, s14
 8002bbc:	eef0 1a67 	vmov.f32	s3, s15
 8002bc0:	eeb0 0a48 	vmov.f32	s0, s16
 8002bc4:	eef0 0a68 	vmov.f32	s1, s17
 8002bc8:	f01b fed2 	bl	801e970 <atan2>
 8002bcc:	ec51 0b10 	vmov	r0, r1, d0
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	4b35      	ldr	r3, [pc, #212]	@ (8002cac <rpfromAccel+0x154>)
 8002bd6:	f7fd fd47 	bl	8000668 <__aeabi_dmul>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	4610      	mov	r0, r2
 8002be0:	4619      	mov	r1, r3
 8002be2:	a32f      	add	r3, pc, #188	@ (adr r3, 8002ca0 <rpfromAccel+0x148>)
 8002be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be8:	f7fd fe68 	bl	80008bc <__aeabi_ddiv>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	492f      	ldr	r1, [pc, #188]	@ (8002cb0 <rpfromAccel+0x158>)
 8002bf2:	e9c1 2300 	strd	r2, r3, [r1]
	accel_angle.pitch = -atan2(data.ax, sqrt(data.ay * data.ay + data.az * data.az )) * RAD2DEG;
 8002bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8002ca8 <rpfromAccel+0x150>)
 8002bf8:	ed93 8b00 	vldr	d8, [r3]
 8002bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca8 <rpfromAccel+0x150>)
 8002bfe:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002c02:	4b29      	ldr	r3, [pc, #164]	@ (8002ca8 <rpfromAccel+0x150>)
 8002c04:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c08:	f7fd fd2e 	bl	8000668 <__aeabi_dmul>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4690      	mov	r8, r2
 8002c12:	4699      	mov	r9, r3
 8002c14:	4b24      	ldr	r3, [pc, #144]	@ (8002ca8 <rpfromAccel+0x150>)
 8002c16:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002c1a:	4b23      	ldr	r3, [pc, #140]	@ (8002ca8 <rpfromAccel+0x150>)
 8002c1c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002c20:	f7fd fd22 	bl	8000668 <__aeabi_dmul>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4640      	mov	r0, r8
 8002c2a:	4649      	mov	r1, r9
 8002c2c:	f7fd fb66 	bl	80002fc <__adddf3>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	ec43 2b17 	vmov	d7, r2, r3
 8002c38:	eeb0 0a47 	vmov.f32	s0, s14
 8002c3c:	eef0 0a67 	vmov.f32	s1, s15
 8002c40:	f01b fe98 	bl	801e974 <sqrt>
 8002c44:	eeb0 7a40 	vmov.f32	s14, s0
 8002c48:	eef0 7a60 	vmov.f32	s15, s1
 8002c4c:	eeb0 1a47 	vmov.f32	s2, s14
 8002c50:	eef0 1a67 	vmov.f32	s3, s15
 8002c54:	eeb0 0a48 	vmov.f32	s0, s16
 8002c58:	eef0 0a68 	vmov.f32	s1, s17
 8002c5c:	f01b fe88 	bl	801e970 <atan2>
 8002c60:	ec53 2b10 	vmov	r2, r3, d0
 8002c64:	4614      	mov	r4, r2
 8002c66:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8002cac <rpfromAccel+0x154>)
 8002c70:	4620      	mov	r0, r4
 8002c72:	4629      	mov	r1, r5
 8002c74:	f7fd fcf8 	bl	8000668 <__aeabi_dmul>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4619      	mov	r1, r3
 8002c80:	a307      	add	r3, pc, #28	@ (adr r3, 8002ca0 <rpfromAccel+0x148>)
 8002c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c86:	f7fd fe19 	bl	80008bc <__aeabi_ddiv>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4908      	ldr	r1, [pc, #32]	@ (8002cb0 <rpfromAccel+0x158>)
 8002c90:	e9c1 2302 	strd	r2, r3, [r1, #8]

}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	ecbd 8b02 	vpop	{d8}
 8002c9c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ca0:	54442d18 	.word	0x54442d18
 8002ca4:	400921fb 	.word	0x400921fb
 8002ca8:	20007d28 	.word	0x20007d28
 8002cac:	40668000 	.word	0x40668000
 8002cb0:	20007d80 	.word	0x20007d80
 8002cb4:	00000000 	.word	0x00000000

08002cb8 <rpfromGyro>:

void rpfromGyro(){
 8002cb8:	b5b0      	push	{r4, r5, r7, lr}
 8002cba:	af00      	add	r7, sp, #0
	gyro_angle.roll =  gyro_roll + data.gx * 0.01 * RAD2DEG ;
 8002cbc:	4b46      	ldr	r3, [pc, #280]	@ (8002dd8 <rpfromGyro+0x120>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fd fc79 	bl	80005b8 <__aeabi_f2d>
 8002cc6:	4604      	mov	r4, r0
 8002cc8:	460d      	mov	r5, r1
 8002cca:	4b44      	ldr	r3, [pc, #272]	@ (8002ddc <rpfromGyro+0x124>)
 8002ccc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002cd0:	a33d      	add	r3, pc, #244	@ (adr r3, 8002dc8 <rpfromGyro+0x110>)
 8002cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd6:	f7fd fcc7 	bl	8000668 <__aeabi_dmul>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4610      	mov	r0, r2
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f04f 0200 	mov.w	r2, #0
 8002ce6:	4b3e      	ldr	r3, [pc, #248]	@ (8002de0 <rpfromGyro+0x128>)
 8002ce8:	f7fd fcbe 	bl	8000668 <__aeabi_dmul>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	a336      	add	r3, pc, #216	@ (adr r3, 8002dd0 <rpfromGyro+0x118>)
 8002cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfa:	f7fd fddf 	bl	80008bc <__aeabi_ddiv>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4620      	mov	r0, r4
 8002d04:	4629      	mov	r1, r5
 8002d06:	f7fd faf9 	bl	80002fc <__adddf3>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4935      	ldr	r1, [pc, #212]	@ (8002de4 <rpfromGyro+0x12c>)
 8002d10:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_angle.pitch = gyro_pitch + data.gy * 0.01 * RAD2DEG ;
 8002d14:	4b34      	ldr	r3, [pc, #208]	@ (8002de8 <rpfromGyro+0x130>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fd fc4d 	bl	80005b8 <__aeabi_f2d>
 8002d1e:	4604      	mov	r4, r0
 8002d20:	460d      	mov	r5, r1
 8002d22:	4b2e      	ldr	r3, [pc, #184]	@ (8002ddc <rpfromGyro+0x124>)
 8002d24:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002d28:	a327      	add	r3, pc, #156	@ (adr r3, 8002dc8 <rpfromGyro+0x110>)
 8002d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2e:	f7fd fc9b 	bl	8000668 <__aeabi_dmul>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4610      	mov	r0, r2
 8002d38:	4619      	mov	r1, r3
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	4b28      	ldr	r3, [pc, #160]	@ (8002de0 <rpfromGyro+0x128>)
 8002d40:	f7fd fc92 	bl	8000668 <__aeabi_dmul>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4610      	mov	r0, r2
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	a320      	add	r3, pc, #128	@ (adr r3, 8002dd0 <rpfromGyro+0x118>)
 8002d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d52:	f7fd fdb3 	bl	80008bc <__aeabi_ddiv>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	4629      	mov	r1, r5
 8002d5e:	f7fd facd 	bl	80002fc <__adddf3>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	491f      	ldr	r1, [pc, #124]	@ (8002de4 <rpfromGyro+0x12c>)
 8002d68:	e9c1 2302 	strd	r2, r3, [r1, #8]
	gyro_angle.yaw = gyro_yaw + data.gz * 0.01 * RAD2DEG ;
 8002d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002dec <rpfromGyro+0x134>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fd fc21 	bl	80005b8 <__aeabi_f2d>
 8002d76:	4604      	mov	r4, r0
 8002d78:	460d      	mov	r5, r1
 8002d7a:	4b18      	ldr	r3, [pc, #96]	@ (8002ddc <rpfromGyro+0x124>)
 8002d7c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002d80:	a311      	add	r3, pc, #68	@ (adr r3, 8002dc8 <rpfromGyro+0x110>)
 8002d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d86:	f7fd fc6f 	bl	8000668 <__aeabi_dmul>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4610      	mov	r0, r2
 8002d90:	4619      	mov	r1, r3
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	4b12      	ldr	r3, [pc, #72]	@ (8002de0 <rpfromGyro+0x128>)
 8002d98:	f7fd fc66 	bl	8000668 <__aeabi_dmul>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4610      	mov	r0, r2
 8002da2:	4619      	mov	r1, r3
 8002da4:	a30a      	add	r3, pc, #40	@ (adr r3, 8002dd0 <rpfromGyro+0x118>)
 8002da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002daa:	f7fd fd87 	bl	80008bc <__aeabi_ddiv>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4620      	mov	r0, r4
 8002db4:	4629      	mov	r1, r5
 8002db6:	f7fd faa1 	bl	80002fc <__adddf3>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4909      	ldr	r1, [pc, #36]	@ (8002de4 <rpfromGyro+0x12c>)
 8002dc0:	e9c1 2304 	strd	r2, r3, [r1, #16]

}
 8002dc4:	bf00      	nop
 8002dc6:	bdb0      	pop	{r4, r5, r7, pc}
 8002dc8:	47ae147b 	.word	0x47ae147b
 8002dcc:	3f847ae1 	.word	0x3f847ae1
 8002dd0:	54442d18 	.word	0x54442d18
 8002dd4:	400921fb 	.word	0x400921fb
 8002dd8:	20007d58 	.word	0x20007d58
 8002ddc:	20007d28 	.word	0x20007d28
 8002de0:	40668000 	.word	0x40668000
 8002de4:	20007d68 	.word	0x20007d68
 8002de8:	20007d5c 	.word	0x20007d5c
 8002dec:	20007d60 	.word	0x20007d60

08002df0 <mapd>:

double mapd(double input, double in_min, double in_max, double out_min, double out_max) {
 8002df0:	b5b0      	push	{r4, r5, r7, lr}
 8002df2:	b08a      	sub	sp, #40	@ 0x28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	ed87 0b08 	vstr	d0, [r7, #32]
 8002dfa:	ed87 1b06 	vstr	d1, [r7, #24]
 8002dfe:	ed87 2b04 	vstr	d2, [r7, #16]
 8002e02:	ed87 3b02 	vstr	d3, [r7, #8]
 8002e06:	ed87 4b00 	vstr	d4, [r7]
    return (input - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002e0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e0e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e12:	f7fd fa71 	bl	80002f8 <__aeabi_dsub>
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4614      	mov	r4, r2
 8002e1c:	461d      	mov	r5, r3
 8002e1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e26:	f7fd fa67 	bl	80002f8 <__aeabi_dsub>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4620      	mov	r0, r4
 8002e30:	4629      	mov	r1, r5
 8002e32:	f7fd fc19 	bl	8000668 <__aeabi_dmul>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4614      	mov	r4, r2
 8002e3c:	461d      	mov	r5, r3
 8002e3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e46:	f7fd fa57 	bl	80002f8 <__aeabi_dsub>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4620      	mov	r0, r4
 8002e50:	4629      	mov	r1, r5
 8002e52:	f7fd fd33 	bl	80008bc <__aeabi_ddiv>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e62:	f7fd fa4b 	bl	80002fc <__adddf3>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	ec43 2b17 	vmov	d7, r2, r3
}
 8002e6e:	eeb0 0a47 	vmov.f32	s0, s14
 8002e72:	eef0 0a67 	vmov.f32	s1, s15
 8002e76:	3728      	adds	r7, #40	@ 0x28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bdb0      	pop	{r4, r5, r7, pc}

08002e7c <LimitRange>:

double LimitRange(double data, double min, double max){
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	ed87 0b04 	vstr	d0, [r7, #16]
 8002e86:	ed87 1b02 	vstr	d1, [r7, #8]
 8002e8a:	ed87 2b00 	vstr	d2, [r7]
	if(data < min) return min;
 8002e8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e92:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e96:	f7fd fe59 	bl	8000b4c <__aeabi_dcmplt>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <LimitRange+0x2a>
 8002ea0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ea4:	e00d      	b.n	8002ec2 <LimitRange+0x46>
	else if (data > max) return max;
 8002ea6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eaa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002eae:	f7fd fe6b 	bl	8000b88 <__aeabi_dcmpgt>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <LimitRange+0x42>
 8002eb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ebc:	e001      	b.n	8002ec2 <LimitRange+0x46>
	return data;
 8002ebe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8002ec2:	ec43 2b17 	vmov	d7, r2, r3
 8002ec6:	eeb0 0a47 	vmov.f32	s0, s14
 8002eca:	eef0 0a67 	vmov.f32	s1, s15
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	0000      	movs	r0, r0
	...

08002ed8 <StartDefaultTask>:


void StartDefaultTask(void *argument)
{
 8002ed8:	b5b0      	push	{r4, r5, r7, lr}
 8002eda:	b0da      	sub	sp, #360	@ 0x168
 8002edc:	af02      	add	r7, sp, #8
 8002ede:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
  /* USER CODE BEGIN 5 */

  // micro-ROS configuration

  rmw_uros_set_custom_transport(
 8002ee2:	4bb9      	ldr	r3, [pc, #740]	@ (80031c8 <StartDefaultTask+0x2f0>)
 8002ee4:	9301      	str	r3, [sp, #4]
 8002ee6:	4bb9      	ldr	r3, [pc, #740]	@ (80031cc <StartDefaultTask+0x2f4>)
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	4bb9      	ldr	r3, [pc, #740]	@ (80031d0 <StartDefaultTask+0x2f8>)
 8002eec:	4ab9      	ldr	r2, [pc, #740]	@ (80031d4 <StartDefaultTask+0x2fc>)
 8002eee:	49ba      	ldr	r1, [pc, #744]	@ (80031d8 <StartDefaultTask+0x300>)
 8002ef0:	2001      	movs	r0, #1
 8002ef2:	f00c fb71 	bl	800f5d8 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002ef6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002efa:	4618      	mov	r0, r3
 8002efc:	f00c fa6c 	bl	800f3d8 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8002f00:	4bb6      	ldr	r3, [pc, #728]	@ (80031dc <StartDefaultTask+0x304>)
 8002f02:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  freeRTOS_allocator.deallocate = microros_deallocate;
 8002f06:	4bb6      	ldr	r3, [pc, #728]	@ (80031e0 <StartDefaultTask+0x308>)
 8002f08:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  freeRTOS_allocator.reallocate = microros_reallocate;
 8002f0c:	4bb5      	ldr	r3, [pc, #724]	@ (80031e4 <StartDefaultTask+0x30c>)
 8002f0e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8002f12:	4bb5      	ldr	r3, [pc, #724]	@ (80031e8 <StartDefaultTask+0x310>)
 8002f14:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8002f18:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f00c fa77 	bl	800f410 <rcutils_set_default_allocator>
 8002f22:	4603      	mov	r3, r0
 8002f24:	f083 0301 	eor.w	r3, r3, #1
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d004      	beq.n	8002f38 <StartDefaultTask+0x60>
      printf("Error on default allocators (line %d)\n", __LINE__);
 8002f2e:	f240 210a 	movw	r1, #522	@ 0x20a
 8002f32:	48ae      	ldr	r0, [pc, #696]	@ (80031ec <StartDefaultTask+0x314>)
 8002f34:	f01a fc80 	bl	801d838 <iprintf>
  }

  allocator = rcl_get_default_allocator();
 8002f38:	4cad      	ldr	r4, [pc, #692]	@ (80031f0 <StartDefaultTask+0x318>)
 8002f3a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f00c fa58 	bl	800f3f4 <rcutils_get_default_allocator>
 8002f44:	4625      	mov	r5, r4
 8002f46:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8002f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f4e:	6823      	ldr	r3, [r4, #0]
 8002f50:	602b      	str	r3, [r5, #0]



  //create init_options
  init_options = rcl_get_zero_initialized_init_options();
 8002f52:	f00b f8f5 	bl	800e140 <rcl_get_zero_initialized_init_options>
 8002f56:	4603      	mov	r3, r0
 8002f58:	4aa6      	ldr	r2, [pc, #664]	@ (80031f4 <StartDefaultTask+0x31c>)
 8002f5a:	6013      	str	r3, [r2, #0]
  RCCHECK(rcl_init_options_init(&init_options, allocator));
 8002f5c:	4ba4      	ldr	r3, [pc, #656]	@ (80031f0 <StartDefaultTask+0x318>)
 8002f5e:	466c      	mov	r4, sp
 8002f60:	f103 020c 	add.w	r2, r3, #12
 8002f64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f68:	e884 0003 	stmia.w	r4, {r0, r1}
 8002f6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f6e:	48a1      	ldr	r0, [pc, #644]	@ (80031f4 <StartDefaultTask+0x31c>)
 8002f70:	f00b f8e8 	bl	800e144 <rcl_init_options_init>
  RCCHECK(rcl_init_options_set_domain_id(&init_options, 88));
 8002f74:	2158      	movs	r1, #88	@ 0x58
 8002f76:	489f      	ldr	r0, [pc, #636]	@ (80031f4 <StartDefaultTask+0x31c>)
 8002f78:	f00b f9c6 	bl	800e308 <rcl_init_options_set_domain_id>

//  rclc_support_init(&support, 0, NULL, &allocator);
  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8002f7c:	4b9c      	ldr	r3, [pc, #624]	@ (80031f0 <StartDefaultTask+0x318>)
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	4b9c      	ldr	r3, [pc, #624]	@ (80031f4 <StartDefaultTask+0x31c>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	2100      	movs	r1, #0
 8002f86:	489c      	ldr	r0, [pc, #624]	@ (80031f8 <StartDefaultTask+0x320>)
 8002f88:	f00c f8e0 	bl	800f14c <rclc_support_init_with_options>


  GPIO_PinState button = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8002f8c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002f90:	489a      	ldr	r0, [pc, #616]	@ (80031fc <StartDefaultTask+0x324>)
 8002f92:	f001 fcd9 	bl	8004948 <HAL_GPIO_ReadPin>
 8002f96:	4603      	mov	r3, r0
 8002f98:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
  uint8_t num_executor = 2  ; // total number of handles =  #timer + service
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f

  // create node
  rclc_node_init_default(&node, "cubemx_node", "", &support);
 8002fa2:	4b95      	ldr	r3, [pc, #596]	@ (80031f8 <StartDefaultTask+0x320>)
 8002fa4:	4a96      	ldr	r2, [pc, #600]	@ (8003200 <StartDefaultTask+0x328>)
 8002fa6:	4997      	ldr	r1, [pc, #604]	@ (8003204 <StartDefaultTask+0x32c>)
 8002fa8:	4897      	ldr	r0, [pc, #604]	@ (8003208 <StartDefaultTask+0x330>)
 8002faa:	f00c f903 	bl	800f1b4 <rclc_node_init_default>



  // create timer
  rclc_timer_init_default(&mpu6050_timer, &support, RCL_MS_TO_NS(10), timer_callback);
 8002fae:	4b97      	ldr	r3, [pc, #604]	@ (800320c <StartDefaultTask+0x334>)
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	4a97      	ldr	r2, [pc, #604]	@ (8003210 <StartDefaultTask+0x338>)
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	498f      	ldr	r1, [pc, #572]	@ (80031f8 <StartDefaultTask+0x320>)
 8002fba:	4896      	ldr	r0, [pc, #600]	@ (8003214 <StartDefaultTask+0x33c>)
 8002fbc:	f00c f9d2 	bl	800f364 <rclc_timer_init_default>

  // create publisher

  rclc_publisher_init_best_effort(
 8002fc0:	f00d ff24 	bl	8010e0c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	4b94      	ldr	r3, [pc, #592]	@ (8003218 <StartDefaultTask+0x340>)
 8002fc8:	498f      	ldr	r1, [pc, #572]	@ (8003208 <StartDefaultTask+0x330>)
 8002fca:	4894      	ldr	r0, [pc, #592]	@ (800321c <StartDefaultTask+0x344>)
 8002fcc:	f00c f962 	bl	800f294 <rclc_publisher_init_best_effort>
    &mpu6050_publisher, &node,
	ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu), "mpu6050_publisher");

  rclc_publisher_init_default(
 8002fd0:	f008 ff8a 	bl	800bee8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	4b92      	ldr	r3, [pc, #584]	@ (8003220 <StartDefaultTask+0x348>)
 8002fd8:	498b      	ldr	r1, [pc, #556]	@ (8003208 <StartDefaultTask+0x330>)
 8002fda:	4892      	ldr	r0, [pc, #584]	@ (8003224 <StartDefaultTask+0x34c>)
 8002fdc:	f00c f926 	bl	800f22c <rclc_publisher_init_default>
      &cmd_vel, &node,
	  ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist), "cmd_vel");

  rclc_publisher_init_default(
 8002fe0:	f008 ff82 	bl	800bee8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	4b90      	ldr	r3, [pc, #576]	@ (8003228 <StartDefaultTask+0x350>)
 8002fe8:	4987      	ldr	r1, [pc, #540]	@ (8003208 <StartDefaultTask+0x330>)
 8002fea:	4890      	ldr	r0, [pc, #576]	@ (800322c <StartDefaultTask+0x354>)
 8002fec:	f00c f91e 	bl	800f22c <rclc_publisher_init_default>
        &speedo_pub, &node,
  	  ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist), "speedometer");

  rclc_publisher_init_default(
 8002ff0:	f00e f960 	bl	80112b4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int8>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	4b8e      	ldr	r3, [pc, #568]	@ (8003230 <StartDefaultTask+0x358>)
 8002ff8:	4983      	ldr	r1, [pc, #524]	@ (8003208 <StartDefaultTask+0x330>)
 8002ffa:	488e      	ldr	r0, [pc, #568]	@ (8003234 <StartDefaultTask+0x35c>)
 8002ffc:	f00c f916 	bl	800f22c <rclc_publisher_init_default>
        &blinker_pub, &node,
  	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int8), "blinker");

  // create service
  rclc_service_init_default(&status_service, &node,
 8003000:	f00e fa5c 	bl	80114bc <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Trigger>
 8003004:	4602      	mov	r2, r0
 8003006:	4b8c      	ldr	r3, [pc, #560]	@ (8003238 <StartDefaultTask+0x360>)
 8003008:	497f      	ldr	r1, [pc, #508]	@ (8003208 <StartDefaultTask+0x330>)
 800300a:	488c      	ldr	r0, [pc, #560]	@ (800323c <StartDefaultTask+0x364>)
 800300c:	f00c f976 	bl	800f2fc <rclc_service_init_default>
  			ROSIDL_GET_SRV_TYPE_SUPPORT(std_srvs, srv, Trigger)
  			, "status");

	if(button == GPIO_PIN_SET){
 8003010:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 8003014:	2b01      	cmp	r3, #1
 8003016:	d10d      	bne.n	8003034 <StartDefaultTask+0x15c>
		rclc_service_init_default(&mpu6050_service, &node,
 8003018:	f009 f89e 	bl	800c158 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>
 800301c:	4602      	mov	r2, r0
 800301e:	4b88      	ldr	r3, [pc, #544]	@ (8003240 <StartDefaultTask+0x368>)
 8003020:	4979      	ldr	r1, [pc, #484]	@ (8003208 <StartDefaultTask+0x330>)
 8003022:	4888      	ldr	r0, [pc, #544]	@ (8003244 <StartDefaultTask+0x36c>)
 8003024:	f00c f96a 	bl	800f2fc <rclc_service_init_default>
			ROSIDL_GET_SRV_TYPE_SUPPORT(imu_interfaces, srv, ImuCalibration)
			, "mpu6050_calibration");
		num_executor += 1;
 8003028:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800302c:	3301      	adds	r3, #1
 800302e:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
 8003032:	e065      	b.n	8003100 <StartDefaultTask+0x228>
	}

	else{
		is_calib = true;
 8003034:	4b84      	ldr	r3, [pc, #528]	@ (8003248 <StartDefaultTask+0x370>)
 8003036:	2201      	movs	r2, #1
 8003038:	701a      	strb	r2, [r3, #0]
		accel_offset.x = 0.5476135517578122;
 800303a:	4984      	ldr	r1, [pc, #528]	@ (800324c <StartDefaultTask+0x374>)
 800303c:	a356      	add	r3, pc, #344	@ (adr r3, 8003198 <StartDefaultTask+0x2c0>)
 800303e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003042:	e9c1 2300 	strd	r2, r3, [r1]
		accel_offset.y = -0.06656717285156218;
 8003046:	4981      	ldr	r1, [pc, #516]	@ (800324c <StartDefaultTask+0x374>)
 8003048:	a355      	add	r3, pc, #340	@ (adr r3, 80031a0 <StartDefaultTask+0x2c8>)
 800304a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304e:	e9c1 2302 	strd	r2, r3, [r1, #8]
		accel_offset.z = 0.5721982896379518;
 8003052:	497e      	ldr	r1, [pc, #504]	@ (800324c <StartDefaultTask+0x374>)
 8003054:	a354      	add	r3, pc, #336	@ (adr r3, 80031a8 <StartDefaultTask+0x2d0>)
 8003056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305a:	e9c1 2304 	strd	r2, r3, [r1, #16]

		gyro_offset.x = -0.025338463587344946;
 800305e:	497c      	ldr	r1, [pc, #496]	@ (8003250 <StartDefaultTask+0x378>)
 8003060:	a353      	add	r3, pc, #332	@ (adr r3, 80031b0 <StartDefaultTask+0x2d8>)
 8003062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003066:	e9c1 2300 	strd	r2, r3, [r1]
		gyro_offset.y = -0.02339352729066801;
 800306a:	4979      	ldr	r1, [pc, #484]	@ (8003250 <StartDefaultTask+0x378>)
 800306c:	a352      	add	r3, pc, #328	@ (adr r3, 80031b8 <StartDefaultTask+0x2e0>)
 800306e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003072:	e9c1 2302 	strd	r2, r3, [r1, #8]
		gyro_offset.z = 0.0024789404321665745;
 8003076:	4976      	ldr	r1, [pc, #472]	@ (8003250 <StartDefaultTask+0x378>)
 8003078:	a351      	add	r3, pc, #324	@ (adr r3, 80031c0 <StartDefaultTask+0x2e8>)
 800307a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307e:	e9c1 2304 	strd	r2, r3, [r1, #16]

		double gyro_cov[9] = {
 8003082:	4a74      	ldr	r2, [pc, #464]	@ (8003254 <StartDefaultTask+0x37c>)
 8003084:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8003088:	4611      	mov	r1, r2
 800308a:	2248      	movs	r2, #72	@ 0x48
 800308c:	4618      	mov	r0, r3
 800308e:	f01a fe2e 	bl	801dcee <memcpy>
		    3.123911124369358e-06, 5.225997040109079e-08, 1.1549529243197505e-07,
		    5.225997040109079e-08, 3.677361834943486e-06, 4.5560155401682246e-08,
		    1.1549529243197505e-07, 4.5560155401682246e-08, 2.789920277006955e-06
		};
		double acc_cov[9] = {
 8003092:	4a71      	ldr	r2, [pc, #452]	@ (8003258 <StartDefaultTask+0x380>)
 8003094:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8003098:	4611      	mov	r1, r2
 800309a:	2248      	movs	r2, #72	@ 0x48
 800309c:	4618      	mov	r0, r3
 800309e:	f01a fe26 	bl	801dcee <memcpy>
		    0.001209244523446859, 2.2313204018561076e-05, 7.129883859380973e-05,
		    2.2313204018561076e-05, 0.0010572480763086421, 7.78056665057966e-05,
		    7.129883859380973e-05, 7.78056665057966e-05, 0.0038762164205234486
		};

		for(int i = 0; i < 9; i++){
 80030a2:	2300      	movs	r3, #0
 80030a4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80030a8:	e026      	b.n	80030f8 <StartDefaultTask+0x220>
				mpu6050_msg.linear_acceleration_covariance[i] = acc_cov[i];
 80030aa:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80030b4:	443b      	add	r3, r7
 80030b6:	3b68      	subs	r3, #104	@ 0x68
 80030b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030bc:	4867      	ldr	r0, [pc, #412]	@ (800325c <StartDefaultTask+0x384>)
 80030be:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 80030c2:	311f      	adds	r1, #31
 80030c4:	00c9      	lsls	r1, r1, #3
 80030c6:	4401      	add	r1, r0
 80030c8:	e9c1 2300 	strd	r2, r3, [r1]
				mpu6050_msg.angular_velocity_covariance[i] = gyro_cov[i];
 80030cc:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80030d6:	443b      	add	r3, r7
 80030d8:	3bb0      	subs	r3, #176	@ 0xb0
 80030da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030de:	485f      	ldr	r0, [pc, #380]	@ (800325c <StartDefaultTask+0x384>)
 80030e0:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 80030e4:	3113      	adds	r1, #19
 80030e6:	00c9      	lsls	r1, r1, #3
 80030e8:	4401      	add	r1, r0
 80030ea:	e9c1 2300 	strd	r2, r3, [r1]
		for(int i = 0; i < 9; i++){
 80030ee:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80030f2:	3301      	adds	r3, #1
 80030f4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80030f8:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	ddd4      	ble.n	80030aa <StartDefaultTask+0x1d2>
			}
    }

	// Synchronize time with the agent (t check the connectivity of micro_ros_agent)
	  rmw_uros_sync_session(1000);
 8003100:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003104:	f00d f930 	bl	8010368 <rmw_uros_sync_session>


  // create message
  mpu6050_msg.header.frame_id = micro_ros_string_utilities_init("imu_frame");
 8003108:	4c54      	ldr	r4, [pc, #336]	@ (800325c <StartDefaultTask+0x384>)
 800310a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800310e:	4954      	ldr	r1, [pc, #336]	@ (8003260 <StartDefaultTask+0x388>)
 8003110:	4618      	mov	r0, r3
 8003112:	f009 fae1 	bl	800c6d8 <micro_ros_string_utilities_init>
 8003116:	f104 0308 	add.w	r3, r4, #8
 800311a:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 800311e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003120:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  blink_msg.data = 0;
 8003124:	4b4f      	ldr	r3, [pc, #316]	@ (8003264 <StartDefaultTask+0x38c>)
 8003126:	2200      	movs	r2, #0
 8003128:	701a      	strb	r2, [r3, #0]

  // create executor
  executor = rclc_executor_get_zero_initialized_executor();
 800312a:	4c4f      	ldr	r4, [pc, #316]	@ (8003268 <StartDefaultTask+0x390>)
 800312c:	463b      	mov	r3, r7
 800312e:	4618      	mov	r0, r3
 8003130:	f00b fd72 	bl	800ec18 <rclc_executor_get_zero_initialized_executor>
 8003134:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8003138:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800313c:	4620      	mov	r0, r4
 800313e:	4619      	mov	r1, r3
 8003140:	2390      	movs	r3, #144	@ 0x90
 8003142:	461a      	mov	r2, r3
 8003144:	f01a fdd3 	bl	801dcee <memcpy>


  rclc_executor_init(&executor, &support.context, num_executor, &allocator);
 8003148:	f897 215f 	ldrb.w	r2, [r7, #351]	@ 0x15f
 800314c:	4b28      	ldr	r3, [pc, #160]	@ (80031f0 <StartDefaultTask+0x318>)
 800314e:	492a      	ldr	r1, [pc, #168]	@ (80031f8 <StartDefaultTask+0x320>)
 8003150:	4845      	ldr	r0, [pc, #276]	@ (8003268 <StartDefaultTask+0x390>)
 8003152:	f00b fd6d 	bl	800ec30 <rclc_executor_init>
  rclc_executor_add_timer(&executor, &mpu6050_timer); // add timer
 8003156:	492f      	ldr	r1, [pc, #188]	@ (8003214 <StartDefaultTask+0x33c>)
 8003158:	4843      	ldr	r0, [pc, #268]	@ (8003268 <StartDefaultTask+0x390>)
 800315a:	f00b fdd5 	bl	800ed08 <rclc_executor_add_timer>
  if(button == GPIO_PIN_SET) rclc_executor_add_service(&executor, &mpu6050_service, &mpu6050_request,&mpu6050_response, service_callback);
 800315e:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 8003162:	2b01      	cmp	r3, #1
 8003164:	d107      	bne.n	8003176 <StartDefaultTask+0x29e>
 8003166:	4b41      	ldr	r3, [pc, #260]	@ (800326c <StartDefaultTask+0x394>)
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	4b41      	ldr	r3, [pc, #260]	@ (8003270 <StartDefaultTask+0x398>)
 800316c:	4a41      	ldr	r2, [pc, #260]	@ (8003274 <StartDefaultTask+0x39c>)
 800316e:	4935      	ldr	r1, [pc, #212]	@ (8003244 <StartDefaultTask+0x36c>)
 8003170:	483d      	ldr	r0, [pc, #244]	@ (8003268 <StartDefaultTask+0x390>)
 8003172:	f00b fdf3 	bl	800ed5c <rclc_executor_add_service>
  rclc_executor_add_service(&executor, &status_service, &status_request,&status_response, status_callback);
 8003176:	4b40      	ldr	r3, [pc, #256]	@ (8003278 <StartDefaultTask+0x3a0>)
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	4b40      	ldr	r3, [pc, #256]	@ (800327c <StartDefaultTask+0x3a4>)
 800317c:	4a40      	ldr	r2, [pc, #256]	@ (8003280 <StartDefaultTask+0x3a8>)
 800317e:	492f      	ldr	r1, [pc, #188]	@ (800323c <StartDefaultTask+0x364>)
 8003180:	4839      	ldr	r0, [pc, #228]	@ (8003268 <StartDefaultTask+0x390>)
 8003182:	f00b fdeb 	bl	800ed5c <rclc_executor_add_service>
  rclc_executor_spin(&executor);
 8003186:	4838      	ldr	r0, [pc, #224]	@ (8003268 <StartDefaultTask+0x390>)
 8003188:	f00b ffb8 	bl	800f0fc <rclc_executor_spin>


  for(;;){
    osDelay(10);
 800318c:	200a      	movs	r0, #10
 800318e:	f006 f9e1 	bl	8009554 <osDelay>
 8003192:	e7fb      	b.n	800318c <StartDefaultTask+0x2b4>
 8003194:	f3af 8000 	nop.w
 8003198:	daf4adba 	.word	0xdaf4adba
 800319c:	3fe1860c 	.word	0x3fe1860c
 80031a0:	d66277ad 	.word	0xd66277ad
 80031a4:	bfb10a8b 	.word	0xbfb10a8b
 80031a8:	c99a4ef6 	.word	0xc99a4ef6
 80031ac:	3fe24f72 	.word	0x3fe24f72
 80031b0:	81c10ee5 	.word	0x81c10ee5
 80031b4:	bf99f253 	.word	0xbf99f253
 80031b8:	0a9b237f 	.word	0x0a9b237f
 80031bc:	bf97f479 	.word	0xbf97f479
 80031c0:	02b76615 	.word	0x02b76615
 80031c4:	3f644eb7 	.word	0x3f644eb7
 80031c8:	080015f1 	.word	0x080015f1
 80031cc:	0800158d 	.word	0x0800158d
 80031d0:	0800156d 	.word	0x0800156d
 80031d4:	08001541 	.word	0x08001541
 80031d8:	20008674 	.word	0x20008674
 80031dc:	080032b5 	.word	0x080032b5
 80031e0:	080032f9 	.word	0x080032f9
 80031e4:	08003331 	.word	0x08003331
 80031e8:	0800339d 	.word	0x0800339d
 80031ec:	0801fbb4 	.word	0x0801fbb4
 80031f0:	2000793c 	.word	0x2000793c
 80031f4:	20007958 	.word	0x20007958
 80031f8:	20007908 	.word	0x20007908
 80031fc:	48000800 	.word	0x48000800
 8003200:	0801fbdc 	.word	0x0801fbdc
 8003204:	0801fbe0 	.word	0x0801fbe0
 8003208:	20007950 	.word	0x20007950
 800320c:	08002359 	.word	0x08002359
 8003210:	00989680 	.word	0x00989680
 8003214:	2000795c 	.word	0x2000795c
 8003218:	0801fbec 	.word	0x0801fbec
 800321c:	200079f8 	.word	0x200079f8
 8003220:	0801fc00 	.word	0x0801fc00
 8003224:	20007d98 	.word	0x20007d98
 8003228:	0801fc08 	.word	0x0801fc08
 800322c:	200085e0 	.word	0x200085e0
 8003230:	0801fc14 	.word	0x0801fc14
 8003234:	200085d8 	.word	0x200085d8
 8003238:	0801fc1c 	.word	0x0801fc1c
 800323c:	200079f4 	.word	0x200079f4
 8003240:	0801fc24 	.word	0x0801fc24
 8003244:	200079f0 	.word	0x200079f0
 8003248:	20007904 	.word	0x20007904
 800324c:	20007cf8 	.word	0x20007cf8
 8003250:	20007d10 	.word	0x20007d10
 8003254:	0801fc48 	.word	0x0801fc48
 8003258:	0801fc90 	.word	0x0801fc90
 800325c:	20007a00 	.word	0x20007a00
 8003260:	0801fc38 	.word	0x0801fc38
 8003264:	200085dc 	.word	0x200085dc
 8003268:	20007960 	.word	0x20007960
 800326c:	08002701 	.word	0x08002701
 8003270:	20007b40 	.word	0x20007b40
 8003274:	20007b48 	.word	0x20007b48
 8003278:	080027d5 	.word	0x080027d5
 800327c:	20007c8c 	.word	0x20007c8c
 8003280:	20007c88 	.word	0x20007c88

08003284 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a04      	ldr	r2, [pc, #16]	@ (80032a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d101      	bne.n	800329a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003296:	f000 fd7d 	bl	8003d94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40012c00 	.word	0x40012c00

080032a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80032ac:	b672      	cpsid	i
}
 80032ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032b0:	bf00      	nop
 80032b2:	e7fd      	b.n	80032b0 <Error_Handler+0x8>

080032b4 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80032be:	4b0c      	ldr	r3, [pc, #48]	@ (80032f0 <microros_allocate+0x3c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4413      	add	r3, r2
 80032c8:	461a      	mov	r2, r3
 80032ca:	4b09      	ldr	r3, [pc, #36]	@ (80032f0 <microros_allocate+0x3c>)
 80032cc:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80032ce:	4b09      	ldr	r3, [pc, #36]	@ (80032f4 <microros_allocate+0x40>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4413      	add	r3, r2
 80032d8:	461a      	mov	r2, r3
 80032da:	4b06      	ldr	r3, [pc, #24]	@ (80032f4 <microros_allocate+0x40>)
 80032dc:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7fd fe9c 	bl	800101c <pvPortMallocMicroROS>
 80032e4:	4603      	mov	r3, r0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20008618 	.word	0x20008618
 80032f4:	2000861c 	.word	0x2000861c

080032f8 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00c      	beq.n	8003322 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7fd ffab 	bl	8001264 <getBlockSize>
 800330e:	4603      	mov	r3, r0
 8003310:	4a06      	ldr	r2, [pc, #24]	@ (800332c <microros_deallocate+0x34>)
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	461a      	mov	r2, r3
 8003318:	4b04      	ldr	r3, [pc, #16]	@ (800332c <microros_deallocate+0x34>)
 800331a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7fd ff45 	bl	80011ac <vPortFreeMicroROS>
  }
}
 8003322:	bf00      	nop
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	2000861c 	.word	0x2000861c

08003330 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800333c:	4b15      	ldr	r3, [pc, #84]	@ (8003394 <microros_reallocate+0x64>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	461a      	mov	r2, r3
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	4413      	add	r3, r2
 8003346:	461a      	mov	r2, r3
 8003348:	4b12      	ldr	r3, [pc, #72]	@ (8003394 <microros_reallocate+0x64>)
 800334a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800334c:	4b12      	ldr	r3, [pc, #72]	@ (8003398 <microros_reallocate+0x68>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	461a      	mov	r2, r3
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	4413      	add	r3, r2
 8003356:	461a      	mov	r2, r3
 8003358:	4b0f      	ldr	r3, [pc, #60]	@ (8003398 <microros_reallocate+0x68>)
 800335a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d104      	bne.n	800336c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8003362:	68b8      	ldr	r0, [r7, #8]
 8003364:	f7fd fe5a 	bl	800101c <pvPortMallocMicroROS>
 8003368:	4603      	mov	r3, r0
 800336a:	e00e      	b.n	800338a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f7fd ff79 	bl	8001264 <getBlockSize>
 8003372:	4603      	mov	r3, r0
 8003374:	4a08      	ldr	r2, [pc, #32]	@ (8003398 <microros_reallocate+0x68>)
 8003376:	6812      	ldr	r2, [r2, #0]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	461a      	mov	r2, r3
 800337c:	4b06      	ldr	r3, [pc, #24]	@ (8003398 <microros_reallocate+0x68>)
 800337e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f7fd ff8c 	bl	80012a0 <pvPortReallocMicroROS>
 8003388:	4603      	mov	r3, r0
  }
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20008618 	.word	0x20008618
 8003398:	2000861c 	.word	0x2000861c

0800339c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	fb02 f303 	mul.w	r3, r2, r3
 80033b0:	4a0c      	ldr	r2, [pc, #48]	@ (80033e4 <microros_zero_allocate+0x48>)
 80033b2:	6812      	ldr	r2, [r2, #0]
 80033b4:	4413      	add	r3, r2
 80033b6:	461a      	mov	r2, r3
 80033b8:	4b0a      	ldr	r3, [pc, #40]	@ (80033e4 <microros_zero_allocate+0x48>)
 80033ba:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	fb02 f303 	mul.w	r3, r2, r3
 80033c4:	4a08      	ldr	r2, [pc, #32]	@ (80033e8 <microros_zero_allocate+0x4c>)
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	4413      	add	r3, r2
 80033ca:	461a      	mov	r2, r3
 80033cc:	4b06      	ldr	r3, [pc, #24]	@ (80033e8 <microros_zero_allocate+0x4c>)
 80033ce:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f7fd ff91 	bl	80012fa <pvPortCallocMicroROS>
 80033d8:	4603      	mov	r3, r0
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20008618 	.word	0x20008618
 80033e8:	2000861c 	.word	0x2000861c
 80033ec:	00000000 	.word	0x00000000

080033f0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80033f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033f4:	b086      	sub	sp, #24
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80033fc:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80033fe:	2300      	movs	r3, #0
 8003400:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8003402:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003406:	a320      	add	r3, pc, #128	@ (adr r3, 8003488 <UTILS_NanosecondsToTimespec+0x98>)
 8003408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340c:	f7fd fc2c 	bl	8000c68 <__aeabi_ldivmod>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800341a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800341e:	a31a      	add	r3, pc, #104	@ (adr r3, 8003488 <UTILS_NanosecondsToTimespec+0x98>)
 8003420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003424:	f7fd fc20 	bl	8000c68 <__aeabi_ldivmod>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	da20      	bge.n	8003476 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	4a11      	ldr	r2, [pc, #68]	@ (8003480 <UTILS_NanosecondsToTimespec+0x90>)
 800343a:	fb82 1203 	smull	r1, r2, r2, r3
 800343e:	1712      	asrs	r2, r2, #28
 8003440:	17db      	asrs	r3, r3, #31
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	3301      	adds	r3, #1
 8003446:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344e:	6979      	ldr	r1, [r7, #20]
 8003450:	17c8      	asrs	r0, r1, #31
 8003452:	460c      	mov	r4, r1
 8003454:	4605      	mov	r5, r0
 8003456:	ebb2 0804 	subs.w	r8, r2, r4
 800345a:	eb63 0905 	sbc.w	r9, r3, r5
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	4906      	ldr	r1, [pc, #24]	@ (8003484 <UTILS_NanosecondsToTimespec+0x94>)
 800346c:	fb01 f303 	mul.w	r3, r1, r3
 8003470:	441a      	add	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	609a      	str	r2, [r3, #8]
    }
}
 8003476:	bf00      	nop
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003480:	44b82fa1 	.word	0x44b82fa1
 8003484:	3b9aca00 	.word	0x3b9aca00
 8003488:	3b9aca00 	.word	0x3b9aca00
 800348c:	00000000 	.word	0x00000000

08003490 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8003490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003494:	b08e      	sub	sp, #56	@ 0x38
 8003496:	af00      	add	r7, sp, #0
 8003498:	6278      	str	r0, [r7, #36]	@ 0x24
 800349a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800349c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80034a0:	2300      	movs	r3, #0
 80034a2:	6013      	str	r3, [r2, #0]
 80034a4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80034b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80034b6:	4618      	mov	r0, r3
 80034b8:	f007 fb18 	bl	800aaec <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80034bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034be:	17da      	asrs	r2, r3, #31
 80034c0:	61bb      	str	r3, [r7, #24]
 80034c2:	61fa      	str	r2, [r7, #28]
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	f04f 0300 	mov.w	r3, #0
 80034cc:	69b9      	ldr	r1, [r7, #24]
 80034ce:	000b      	movs	r3, r1
 80034d0:	2200      	movs	r2, #0
 80034d2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80034d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034d8:	2200      	movs	r2, #0
 80034da:	461c      	mov	r4, r3
 80034dc:	4615      	mov	r5, r2
 80034de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80034e2:	1911      	adds	r1, r2, r4
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	416b      	adcs	r3, r5
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80034ee:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80034f2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	f04f 0400 	mov.w	r4, #0
 80034fe:	f04f 0500 	mov.w	r5, #0
 8003502:	015d      	lsls	r5, r3, #5
 8003504:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003508:	0154      	lsls	r4, r2, #5
 800350a:	4622      	mov	r2, r4
 800350c:	462b      	mov	r3, r5
 800350e:	ebb2 0800 	subs.w	r8, r2, r0
 8003512:	eb63 0901 	sbc.w	r9, r3, r1
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	f04f 0300 	mov.w	r3, #0
 800351e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8003522:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8003526:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800352a:	4690      	mov	r8, r2
 800352c:	4699      	mov	r9, r3
 800352e:	eb18 0a00 	adds.w	sl, r8, r0
 8003532:	eb49 0b01 	adc.w	fp, r9, r1
 8003536:	f04f 0200 	mov.w	r2, #0
 800353a:	f04f 0300 	mov.w	r3, #0
 800353e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003542:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003546:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800354a:	ebb2 040a 	subs.w	r4, r2, sl
 800354e:	603c      	str	r4, [r7, #0]
 8003550:	eb63 030b 	sbc.w	r3, r3, fp
 8003554:	607b      	str	r3, [r7, #4]
 8003556:	e9d7 4500 	ldrd	r4, r5, [r7]
 800355a:	4623      	mov	r3, r4
 800355c:	181b      	adds	r3, r3, r0
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	462b      	mov	r3, r5
 8003562:	eb41 0303 	adc.w	r3, r1, r3
 8003566:	617b      	str	r3, [r7, #20]
 8003568:	6a3a      	ldr	r2, [r7, #32]
 800356a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800356e:	f7ff ff3f 	bl	80033f0 <UTILS_NanosecondsToTimespec>

    return 0;
 8003572:	2300      	movs	r3, #0
 8003574:	4618      	mov	r0, r3
 8003576:	3738      	adds	r7, #56	@ 0x38
 8003578:	46bd      	mov	sp, r7
 800357a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003586:	4b12      	ldr	r3, [pc, #72]	@ (80035d0 <HAL_MspInit+0x50>)
 8003588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800358a:	4a11      	ldr	r2, [pc, #68]	@ (80035d0 <HAL_MspInit+0x50>)
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	6613      	str	r3, [r2, #96]	@ 0x60
 8003592:	4b0f      	ldr	r3, [pc, #60]	@ (80035d0 <HAL_MspInit+0x50>)
 8003594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	607b      	str	r3, [r7, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800359e:	4b0c      	ldr	r3, [pc, #48]	@ (80035d0 <HAL_MspInit+0x50>)
 80035a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a2:	4a0b      	ldr	r2, [pc, #44]	@ (80035d0 <HAL_MspInit+0x50>)
 80035a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80035aa:	4b09      	ldr	r3, [pc, #36]	@ (80035d0 <HAL_MspInit+0x50>)
 80035ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80035b6:	2200      	movs	r2, #0
 80035b8:	210f      	movs	r1, #15
 80035ba:	f06f 0001 	mvn.w	r0, #1
 80035be:	f000 fcd6 	bl	8003f6e <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80035c2:	f002 fa1d 	bl	8005a00 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035c6:	bf00      	nop
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40021000 	.word	0x40021000

080035d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08c      	sub	sp, #48	@ 0x30
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80035dc:	2300      	movs	r3, #0
 80035de:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80035e0:	2300      	movs	r3, #0
 80035e2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80035e4:	4b2c      	ldr	r3, [pc, #176]	@ (8003698 <HAL_InitTick+0xc4>)
 80035e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035e8:	4a2b      	ldr	r2, [pc, #172]	@ (8003698 <HAL_InitTick+0xc4>)
 80035ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80035ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80035f0:	4b29      	ldr	r3, [pc, #164]	@ (8003698 <HAL_InitTick+0xc4>)
 80035f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035f8:	60bb      	str	r3, [r7, #8]
 80035fa:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80035fc:	f107 020c 	add.w	r2, r7, #12
 8003600:	f107 0310 	add.w	r3, r7, #16
 8003604:	4611      	mov	r1, r2
 8003606:	4618      	mov	r0, r3
 8003608:	f002 fef2 	bl	80063f0 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800360c:	f002 feda 	bl	80063c4 <HAL_RCC_GetPCLK2Freq>
 8003610:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003614:	4a21      	ldr	r2, [pc, #132]	@ (800369c <HAL_InitTick+0xc8>)
 8003616:	fba2 2303 	umull	r2, r3, r2, r3
 800361a:	0c9b      	lsrs	r3, r3, #18
 800361c:	3b01      	subs	r3, #1
 800361e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003620:	4b1f      	ldr	r3, [pc, #124]	@ (80036a0 <HAL_InitTick+0xcc>)
 8003622:	4a20      	ldr	r2, [pc, #128]	@ (80036a4 <HAL_InitTick+0xd0>)
 8003624:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003626:	4b1e      	ldr	r3, [pc, #120]	@ (80036a0 <HAL_InitTick+0xcc>)
 8003628:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800362c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800362e:	4a1c      	ldr	r2, [pc, #112]	@ (80036a0 <HAL_InitTick+0xcc>)
 8003630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003632:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003634:	4b1a      	ldr	r3, [pc, #104]	@ (80036a0 <HAL_InitTick+0xcc>)
 8003636:	2200      	movs	r2, #0
 8003638:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800363a:	4b19      	ldr	r3, [pc, #100]	@ (80036a0 <HAL_InitTick+0xcc>)
 800363c:	2200      	movs	r2, #0
 800363e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8003640:	4817      	ldr	r0, [pc, #92]	@ (80036a0 <HAL_InitTick+0xcc>)
 8003642:	f003 f99b 	bl	800697c <HAL_TIM_Base_Init>
 8003646:	4603      	mov	r3, r0
 8003648:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800364c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003650:	2b00      	cmp	r3, #0
 8003652:	d11b      	bne.n	800368c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003654:	4812      	ldr	r0, [pc, #72]	@ (80036a0 <HAL_InitTick+0xcc>)
 8003656:	f003 f9f3 	bl	8006a40 <HAL_TIM_Base_Start_IT>
 800365a:	4603      	mov	r3, r0
 800365c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003660:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003664:	2b00      	cmp	r3, #0
 8003666:	d111      	bne.n	800368c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003668:	2019      	movs	r0, #25
 800366a:	f000 fc9a 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b0f      	cmp	r3, #15
 8003672:	d808      	bhi.n	8003686 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8003674:	2200      	movs	r2, #0
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	2019      	movs	r0, #25
 800367a:	f000 fc78 	bl	8003f6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800367e:	4a0a      	ldr	r2, [pc, #40]	@ (80036a8 <HAL_InitTick+0xd4>)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6013      	str	r3, [r2, #0]
 8003684:	e002      	b.n	800368c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800368c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003690:	4618      	mov	r0, r3
 8003692:	3730      	adds	r7, #48	@ 0x30
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40021000 	.word	0x40021000
 800369c:	431bde83 	.word	0x431bde83
 80036a0:	20008620 	.word	0x20008620
 80036a4:	40012c00 	.word	0x40012c00
 80036a8:	20000008 	.word	0x20000008

080036ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036b0:	bf00      	nop
 80036b2:	e7fd      	b.n	80036b0 <NMI_Handler+0x4>

080036b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036b8:	bf00      	nop
 80036ba:	e7fd      	b.n	80036b8 <HardFault_Handler+0x4>

080036bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036c0:	bf00      	nop
 80036c2:	e7fd      	b.n	80036c0 <MemManage_Handler+0x4>

080036c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036c8:	bf00      	nop
 80036ca:	e7fd      	b.n	80036c8 <BusFault_Handler+0x4>

080036cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036d0:	bf00      	nop
 80036d2:	e7fd      	b.n	80036d0 <UsageFault_Handler+0x4>

080036d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036d8:	bf00      	nop
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
	...

080036e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80036e8:	4802      	ldr	r0, [pc, #8]	@ (80036f4 <DMA1_Channel1_IRQHandler+0x10>)
 80036ea:	f000 fe50 	bl	800438e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	2000879c 	.word	0x2000879c

080036f8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80036fc:	4802      	ldr	r0, [pc, #8]	@ (8003708 <DMA1_Channel2_IRQHandler+0x10>)
 80036fe:	f000 fe46 	bl	800438e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003702:	bf00      	nop
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	200087fc 	.word	0x200087fc

0800370c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003710:	4802      	ldr	r0, [pc, #8]	@ (800371c <DMA1_Channel3_IRQHandler+0x10>)
 8003712:	f000 fe3c 	bl	800438e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003716:	bf00      	nop
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	2000885c 	.word	0x2000885c

08003720 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003724:	4802      	ldr	r0, [pc, #8]	@ (8003730 <DMA1_Channel4_IRQHandler+0x10>)
 8003726:	f000 fe32 	bl	800438e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800372a:	bf00      	nop
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	200088bc 	.word	0x200088bc

08003734 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003738:	4802      	ldr	r0, [pc, #8]	@ (8003744 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800373a:	f003 f9f9 	bl	8006b30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800373e:	bf00      	nop
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	20008620 	.word	0x20008620

08003748 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800374c:	4802      	ldr	r0, [pc, #8]	@ (8003758 <USART1_IRQHandler+0x10>)
 800374e:	f003 fe13 	bl	8007378 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003752:	bf00      	nop
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	20008708 	.word	0x20008708

0800375c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003760:	4802      	ldr	r0, [pc, #8]	@ (800376c <LPUART1_IRQHandler+0x10>)
 8003762:	f003 fe09 	bl	8007378 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003766:	bf00      	nop
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	20008674 	.word	0x20008674

08003770 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  return 1;
 8003774:	2301      	movs	r3, #1
}
 8003776:	4618      	mov	r0, r3
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <_kill>:

int _kill(int pid, int sig)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800378a:	f01a fa7b 	bl	801dc84 <__errno>
 800378e:	4603      	mov	r3, r0
 8003790:	2216      	movs	r2, #22
 8003792:	601a      	str	r2, [r3, #0]
  return -1;
 8003794:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003798:	4618      	mov	r0, r3
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <_exit>:

void _exit (int status)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80037a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7ff ffe7 	bl	8003780 <_kill>
  while (1) {}    /* Make sure we hang here */
 80037b2:	bf00      	nop
 80037b4:	e7fd      	b.n	80037b2 <_exit+0x12>

080037b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b086      	sub	sp, #24
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	e00a      	b.n	80037de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80037c8:	f3af 8000 	nop.w
 80037cc:	4601      	mov	r1, r0
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	60ba      	str	r2, [r7, #8]
 80037d4:	b2ca      	uxtb	r2, r1
 80037d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	3301      	adds	r3, #1
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	dbf0      	blt.n	80037c8 <_read+0x12>
  }

  return len;
 80037e6:	687b      	ldr	r3, [r7, #4]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037fc:	2300      	movs	r3, #0
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	e009      	b.n	8003816 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	60ba      	str	r2, [r7, #8]
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	3301      	adds	r3, #1
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	429a      	cmp	r2, r3
 800381c:	dbf1      	blt.n	8003802 <_write+0x12>
  }
  return len;
 800381e:	687b      	ldr	r3, [r7, #4]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <_close>:

int _close(int file)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003830:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003834:	4618      	mov	r0, r3
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003850:	605a      	str	r2, [r3, #4]
  return 0;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <_isatty>:

int _isatty(int file)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003868:	2301      	movs	r3, #1
}
 800386a:	4618      	mov	r0, r3
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003876:	b480      	push	{r7}
 8003878:	b085      	sub	sp, #20
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003898:	4a14      	ldr	r2, [pc, #80]	@ (80038ec <_sbrk+0x5c>)
 800389a:	4b15      	ldr	r3, [pc, #84]	@ (80038f0 <_sbrk+0x60>)
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038a4:	4b13      	ldr	r3, [pc, #76]	@ (80038f4 <_sbrk+0x64>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d102      	bne.n	80038b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038ac:	4b11      	ldr	r3, [pc, #68]	@ (80038f4 <_sbrk+0x64>)
 80038ae:	4a12      	ldr	r2, [pc, #72]	@ (80038f8 <_sbrk+0x68>)
 80038b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038b2:	4b10      	ldr	r3, [pc, #64]	@ (80038f4 <_sbrk+0x64>)
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4413      	add	r3, r2
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d207      	bcs.n	80038d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038c0:	f01a f9e0 	bl	801dc84 <__errno>
 80038c4:	4603      	mov	r3, r0
 80038c6:	220c      	movs	r2, #12
 80038c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80038ce:	e009      	b.n	80038e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038d0:	4b08      	ldr	r3, [pc, #32]	@ (80038f4 <_sbrk+0x64>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038d6:	4b07      	ldr	r3, [pc, #28]	@ (80038f4 <_sbrk+0x64>)
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4413      	add	r3, r2
 80038de:	4a05      	ldr	r2, [pc, #20]	@ (80038f4 <_sbrk+0x64>)
 80038e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038e2:	68fb      	ldr	r3, [r7, #12]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	20020000 	.word	0x20020000
 80038f0:	00000400 	.word	0x00000400
 80038f4:	20008670 	.word	0x20008670
 80038f8:	2000fa08 	.word	0x2000fa08

080038fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003900:	4b06      	ldr	r3, [pc, #24]	@ (800391c <SystemInit+0x20>)
 8003902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003906:	4a05      	ldr	r2, [pc, #20]	@ (800391c <SystemInit+0x20>)
 8003908:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800390c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003910:	bf00      	nop
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	e000ed00 	.word	0xe000ed00

08003920 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003924:	4b20      	ldr	r3, [pc, #128]	@ (80039a8 <MX_LPUART1_UART_Init+0x88>)
 8003926:	4a21      	ldr	r2, [pc, #132]	@ (80039ac <MX_LPUART1_UART_Init+0x8c>)
 8003928:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 800392a:	4b1f      	ldr	r3, [pc, #124]	@ (80039a8 <MX_LPUART1_UART_Init+0x88>)
 800392c:	4a20      	ldr	r2, [pc, #128]	@ (80039b0 <MX_LPUART1_UART_Init+0x90>)
 800392e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003930:	4b1d      	ldr	r3, [pc, #116]	@ (80039a8 <MX_LPUART1_UART_Init+0x88>)
 8003932:	2200      	movs	r2, #0
 8003934:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003936:	4b1c      	ldr	r3, [pc, #112]	@ (80039a8 <MX_LPUART1_UART_Init+0x88>)
 8003938:	2200      	movs	r2, #0
 800393a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800393c:	4b1a      	ldr	r3, [pc, #104]	@ (80039a8 <MX_LPUART1_UART_Init+0x88>)
 800393e:	2200      	movs	r2, #0
 8003940:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003942:	4b19      	ldr	r3, [pc, #100]	@ (80039a8 <MX_LPUART1_UART_Init+0x88>)
 8003944:	220c      	movs	r2, #12
 8003946:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003948:	4b17      	ldr	r3, [pc, #92]	@ (80039a8 <MX_LPUART1_UART_Init+0x88>)
 800394a:	2200      	movs	r2, #0
 800394c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800394e:	4b16      	ldr	r3, [pc, #88]	@ (80039a8 <MX_LPUART1_UART_Init+0x88>)
 8003950:	2200      	movs	r2, #0
 8003952:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003954:	4b14      	ldr	r3, [pc, #80]	@ (80039a8 <MX_LPUART1_UART_Init+0x88>)
 8003956:	2200      	movs	r2, #0
 8003958:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800395a:	4b13      	ldr	r3, [pc, #76]	@ (80039a8 <MX_LPUART1_UART_Init+0x88>)
 800395c:	2200      	movs	r2, #0
 800395e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003960:	4811      	ldr	r0, [pc, #68]	@ (80039a8 <MX_LPUART1_UART_Init+0x88>)
 8003962:	f003 fb57 	bl	8007014 <HAL_UART_Init>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 800396c:	f7ff fc9c 	bl	80032a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003970:	2100      	movs	r1, #0
 8003972:	480d      	ldr	r0, [pc, #52]	@ (80039a8 <MX_LPUART1_UART_Init+0x88>)
 8003974:	f005 f867 	bl	8008a46 <HAL_UARTEx_SetTxFifoThreshold>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800397e:	f7ff fc93 	bl	80032a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003982:	2100      	movs	r1, #0
 8003984:	4808      	ldr	r0, [pc, #32]	@ (80039a8 <MX_LPUART1_UART_Init+0x88>)
 8003986:	f005 f89c 	bl	8008ac2 <HAL_UARTEx_SetRxFifoThreshold>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8003990:	f7ff fc8a 	bl	80032a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003994:	4804      	ldr	r0, [pc, #16]	@ (80039a8 <MX_LPUART1_UART_Init+0x88>)
 8003996:	f005 f81d 	bl	80089d4 <HAL_UARTEx_DisableFifoMode>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 80039a0:	f7ff fc82 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80039a4:	bf00      	nop
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20008674 	.word	0x20008674
 80039ac:	40008000 	.word	0x40008000
 80039b0:	001e8480 	.word	0x001e8480

080039b4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80039b8:	4b22      	ldr	r3, [pc, #136]	@ (8003a44 <MX_USART1_UART_Init+0x90>)
 80039ba:	4a23      	ldr	r2, [pc, #140]	@ (8003a48 <MX_USART1_UART_Init+0x94>)
 80039bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80039be:	4b21      	ldr	r3, [pc, #132]	@ (8003a44 <MX_USART1_UART_Init+0x90>)
 80039c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80039c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80039c6:	4b1f      	ldr	r3, [pc, #124]	@ (8003a44 <MX_USART1_UART_Init+0x90>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80039cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003a44 <MX_USART1_UART_Init+0x90>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80039d2:	4b1c      	ldr	r3, [pc, #112]	@ (8003a44 <MX_USART1_UART_Init+0x90>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80039d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003a44 <MX_USART1_UART_Init+0x90>)
 80039da:	220c      	movs	r2, #12
 80039dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039de:	4b19      	ldr	r3, [pc, #100]	@ (8003a44 <MX_USART1_UART_Init+0x90>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80039e4:	4b17      	ldr	r3, [pc, #92]	@ (8003a44 <MX_USART1_UART_Init+0x90>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039ea:	4b16      	ldr	r3, [pc, #88]	@ (8003a44 <MX_USART1_UART_Init+0x90>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80039f0:	4b14      	ldr	r3, [pc, #80]	@ (8003a44 <MX_USART1_UART_Init+0x90>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039f6:	4b13      	ldr	r3, [pc, #76]	@ (8003a44 <MX_USART1_UART_Init+0x90>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80039fc:	4811      	ldr	r0, [pc, #68]	@ (8003a44 <MX_USART1_UART_Init+0x90>)
 80039fe:	f003 fb09 	bl	8007014 <HAL_UART_Init>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003a08:	f7ff fc4e 	bl	80032a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	480d      	ldr	r0, [pc, #52]	@ (8003a44 <MX_USART1_UART_Init+0x90>)
 8003a10:	f005 f819 	bl	8008a46 <HAL_UARTEx_SetTxFifoThreshold>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003a1a:	f7ff fc45 	bl	80032a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a1e:	2100      	movs	r1, #0
 8003a20:	4808      	ldr	r0, [pc, #32]	@ (8003a44 <MX_USART1_UART_Init+0x90>)
 8003a22:	f005 f84e 	bl	8008ac2 <HAL_UARTEx_SetRxFifoThreshold>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003a2c:	f7ff fc3c 	bl	80032a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003a30:	4804      	ldr	r0, [pc, #16]	@ (8003a44 <MX_USART1_UART_Init+0x90>)
 8003a32:	f004 ffcf 	bl	80089d4 <HAL_UARTEx_DisableFifoMode>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003a3c:	f7ff fc34 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003a40:	bf00      	nop
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	20008708 	.word	0x20008708
 8003a48:	40013800 	.word	0x40013800

08003a4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b0a0      	sub	sp, #128	@ 0x80
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a54:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	605a      	str	r2, [r3, #4]
 8003a5e:	609a      	str	r2, [r3, #8]
 8003a60:	60da      	str	r2, [r3, #12]
 8003a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a64:	f107 0318 	add.w	r3, r7, #24
 8003a68:	2254      	movs	r2, #84	@ 0x54
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f01a f863 	bl	801db38 <memset>
  if(uartHandle->Instance==LPUART1)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a9a      	ldr	r2, [pc, #616]	@ (8003ce0 <HAL_UART_MspInit+0x294>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	f040 8095 	bne.w	8003ba8 <HAL_UART_MspInit+0x15c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003a7e:	2320      	movs	r3, #32
 8003a80:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003a82:	2300      	movs	r3, #0
 8003a84:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a86:	f107 0318 	add.w	r3, r7, #24
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f002 fd28 	bl	80064e0 <HAL_RCCEx_PeriphCLKConfig>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003a96:	f7ff fc07 	bl	80032a8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003a9a:	4b92      	ldr	r3, [pc, #584]	@ (8003ce4 <HAL_UART_MspInit+0x298>)
 8003a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a9e:	4a91      	ldr	r2, [pc, #580]	@ (8003ce4 <HAL_UART_MspInit+0x298>)
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003aa6:	4b8f      	ldr	r3, [pc, #572]	@ (8003ce4 <HAL_UART_MspInit+0x298>)
 8003aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab2:	4b8c      	ldr	r3, [pc, #560]	@ (8003ce4 <HAL_UART_MspInit+0x298>)
 8003ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ab6:	4a8b      	ldr	r2, [pc, #556]	@ (8003ce4 <HAL_UART_MspInit+0x298>)
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003abe:	4b89      	ldr	r3, [pc, #548]	@ (8003ce4 <HAL_UART_MspInit+0x298>)
 8003ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8003aca:	230c      	movs	r3, #12
 8003acc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ace:	2302      	movs	r3, #2
 8003ad0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8003ada:	230c      	movs	r3, #12
 8003adc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ade:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ae8:	f000 fdac 	bl	8004644 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8003aec:	4b7e      	ldr	r3, [pc, #504]	@ (8003ce8 <HAL_UART_MspInit+0x29c>)
 8003aee:	4a7f      	ldr	r2, [pc, #508]	@ (8003cec <HAL_UART_MspInit+0x2a0>)
 8003af0:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8003af2:	4b7d      	ldr	r3, [pc, #500]	@ (8003ce8 <HAL_UART_MspInit+0x29c>)
 8003af4:	2222      	movs	r2, #34	@ 0x22
 8003af6:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003af8:	4b7b      	ldr	r3, [pc, #492]	@ (8003ce8 <HAL_UART_MspInit+0x29c>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003afe:	4b7a      	ldr	r3, [pc, #488]	@ (8003ce8 <HAL_UART_MspInit+0x29c>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b04:	4b78      	ldr	r3, [pc, #480]	@ (8003ce8 <HAL_UART_MspInit+0x29c>)
 8003b06:	2280      	movs	r2, #128	@ 0x80
 8003b08:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b0a:	4b77      	ldr	r3, [pc, #476]	@ (8003ce8 <HAL_UART_MspInit+0x29c>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b10:	4b75      	ldr	r3, [pc, #468]	@ (8003ce8 <HAL_UART_MspInit+0x29c>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8003b16:	4b74      	ldr	r3, [pc, #464]	@ (8003ce8 <HAL_UART_MspInit+0x29c>)
 8003b18:	2220      	movs	r2, #32
 8003b1a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003b1c:	4b72      	ldr	r3, [pc, #456]	@ (8003ce8 <HAL_UART_MspInit+0x29c>)
 8003b1e:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8003b22:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8003b24:	4870      	ldr	r0, [pc, #448]	@ (8003ce8 <HAL_UART_MspInit+0x29c>)
 8003b26:	f000 fa4f 	bl	8003fc8 <HAL_DMA_Init>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8003b30:	f7ff fbba 	bl	80032a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a6c      	ldr	r2, [pc, #432]	@ (8003ce8 <HAL_UART_MspInit+0x29c>)
 8003b38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003b3c:	4a6a      	ldr	r2, [pc, #424]	@ (8003ce8 <HAL_UART_MspInit+0x29c>)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8003b42:	4b6b      	ldr	r3, [pc, #428]	@ (8003cf0 <HAL_UART_MspInit+0x2a4>)
 8003b44:	4a6b      	ldr	r2, [pc, #428]	@ (8003cf4 <HAL_UART_MspInit+0x2a8>)
 8003b46:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8003b48:	4b69      	ldr	r3, [pc, #420]	@ (8003cf0 <HAL_UART_MspInit+0x2a4>)
 8003b4a:	2223      	movs	r2, #35	@ 0x23
 8003b4c:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b4e:	4b68      	ldr	r3, [pc, #416]	@ (8003cf0 <HAL_UART_MspInit+0x2a4>)
 8003b50:	2210      	movs	r2, #16
 8003b52:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b54:	4b66      	ldr	r3, [pc, #408]	@ (8003cf0 <HAL_UART_MspInit+0x2a4>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b5a:	4b65      	ldr	r3, [pc, #404]	@ (8003cf0 <HAL_UART_MspInit+0x2a4>)
 8003b5c:	2280      	movs	r2, #128	@ 0x80
 8003b5e:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b60:	4b63      	ldr	r3, [pc, #396]	@ (8003cf0 <HAL_UART_MspInit+0x2a4>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b66:	4b62      	ldr	r3, [pc, #392]	@ (8003cf0 <HAL_UART_MspInit+0x2a4>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8003b6c:	4b60      	ldr	r3, [pc, #384]	@ (8003cf0 <HAL_UART_MspInit+0x2a4>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003b72:	4b5f      	ldr	r3, [pc, #380]	@ (8003cf0 <HAL_UART_MspInit+0x2a4>)
 8003b74:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8003b78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8003b7a:	485d      	ldr	r0, [pc, #372]	@ (8003cf0 <HAL_UART_MspInit+0x2a4>)
 8003b7c:	f000 fa24 	bl	8003fc8 <HAL_DMA_Init>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8003b86:	f7ff fb8f 	bl	80032a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a58      	ldr	r2, [pc, #352]	@ (8003cf0 <HAL_UART_MspInit+0x2a4>)
 8003b8e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003b90:	4a57      	ldr	r2, [pc, #348]	@ (8003cf0 <HAL_UART_MspInit+0x2a4>)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8003b96:	2200      	movs	r2, #0
 8003b98:	2105      	movs	r1, #5
 8003b9a:	205b      	movs	r0, #91	@ 0x5b
 8003b9c:	f000 f9e7 	bl	8003f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003ba0:	205b      	movs	r0, #91	@ 0x5b
 8003ba2:	f000 f9fe 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003ba6:	e096      	b.n	8003cd6 <HAL_UART_MspInit+0x28a>
  else if(uartHandle->Instance==USART1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a52      	ldr	r2, [pc, #328]	@ (8003cf8 <HAL_UART_MspInit+0x2ac>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	f040 8091 	bne.w	8003cd6 <HAL_UART_MspInit+0x28a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bbc:	f107 0318 	add.w	r3, r7, #24
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f002 fc8d 	bl	80064e0 <HAL_RCCEx_PeriphCLKConfig>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_UART_MspInit+0x184>
      Error_Handler();
 8003bcc:	f7ff fb6c 	bl	80032a8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bd0:	4b44      	ldr	r3, [pc, #272]	@ (8003ce4 <HAL_UART_MspInit+0x298>)
 8003bd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bd4:	4a43      	ldr	r2, [pc, #268]	@ (8003ce4 <HAL_UART_MspInit+0x298>)
 8003bd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bda:	6613      	str	r3, [r2, #96]	@ 0x60
 8003bdc:	4b41      	ldr	r3, [pc, #260]	@ (8003ce4 <HAL_UART_MspInit+0x298>)
 8003bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003be0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003be8:	4b3e      	ldr	r3, [pc, #248]	@ (8003ce4 <HAL_UART_MspInit+0x298>)
 8003bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bec:	4a3d      	ldr	r2, [pc, #244]	@ (8003ce4 <HAL_UART_MspInit+0x298>)
 8003bee:	f043 0304 	orr.w	r3, r3, #4
 8003bf2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bf4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ce4 <HAL_UART_MspInit+0x298>)
 8003bf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	60bb      	str	r3, [r7, #8]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003c00:	2330      	movs	r3, #48	@ 0x30
 8003c02:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c04:	2302      	movs	r3, #2
 8003c06:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c10:	2307      	movs	r3, #7
 8003c12:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c14:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4838      	ldr	r0, [pc, #224]	@ (8003cfc <HAL_UART_MspInit+0x2b0>)
 8003c1c:	f000 fd12 	bl	8004644 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8003c20:	4b37      	ldr	r3, [pc, #220]	@ (8003d00 <HAL_UART_MspInit+0x2b4>)
 8003c22:	4a38      	ldr	r2, [pc, #224]	@ (8003d04 <HAL_UART_MspInit+0x2b8>)
 8003c24:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003c26:	4b36      	ldr	r3, [pc, #216]	@ (8003d00 <HAL_UART_MspInit+0x2b4>)
 8003c28:	2218      	movs	r2, #24
 8003c2a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c2c:	4b34      	ldr	r3, [pc, #208]	@ (8003d00 <HAL_UART_MspInit+0x2b4>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c32:	4b33      	ldr	r3, [pc, #204]	@ (8003d00 <HAL_UART_MspInit+0x2b4>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c38:	4b31      	ldr	r3, [pc, #196]	@ (8003d00 <HAL_UART_MspInit+0x2b4>)
 8003c3a:	2280      	movs	r2, #128	@ 0x80
 8003c3c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c3e:	4b30      	ldr	r3, [pc, #192]	@ (8003d00 <HAL_UART_MspInit+0x2b4>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c44:	4b2e      	ldr	r3, [pc, #184]	@ (8003d00 <HAL_UART_MspInit+0x2b4>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003c4a:	4b2d      	ldr	r3, [pc, #180]	@ (8003d00 <HAL_UART_MspInit+0x2b4>)
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c50:	4b2b      	ldr	r3, [pc, #172]	@ (8003d00 <HAL_UART_MspInit+0x2b4>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003c56:	482a      	ldr	r0, [pc, #168]	@ (8003d00 <HAL_UART_MspInit+0x2b4>)
 8003c58:	f000 f9b6 	bl	8003fc8 <HAL_DMA_Init>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <HAL_UART_MspInit+0x21a>
      Error_Handler();
 8003c62:	f7ff fb21 	bl	80032a8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a25      	ldr	r2, [pc, #148]	@ (8003d00 <HAL_UART_MspInit+0x2b4>)
 8003c6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003c6e:	4a24      	ldr	r2, [pc, #144]	@ (8003d00 <HAL_UART_MspInit+0x2b4>)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003c74:	4b24      	ldr	r3, [pc, #144]	@ (8003d08 <HAL_UART_MspInit+0x2bc>)
 8003c76:	4a25      	ldr	r2, [pc, #148]	@ (8003d0c <HAL_UART_MspInit+0x2c0>)
 8003c78:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003c7a:	4b23      	ldr	r3, [pc, #140]	@ (8003d08 <HAL_UART_MspInit+0x2bc>)
 8003c7c:	2219      	movs	r2, #25
 8003c7e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c80:	4b21      	ldr	r3, [pc, #132]	@ (8003d08 <HAL_UART_MspInit+0x2bc>)
 8003c82:	2210      	movs	r2, #16
 8003c84:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c86:	4b20      	ldr	r3, [pc, #128]	@ (8003d08 <HAL_UART_MspInit+0x2bc>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8003d08 <HAL_UART_MspInit+0x2bc>)
 8003c8e:	2280      	movs	r2, #128	@ 0x80
 8003c90:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c92:	4b1d      	ldr	r3, [pc, #116]	@ (8003d08 <HAL_UART_MspInit+0x2bc>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c98:	4b1b      	ldr	r3, [pc, #108]	@ (8003d08 <HAL_UART_MspInit+0x2bc>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003d08 <HAL_UART_MspInit+0x2bc>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ca4:	4b18      	ldr	r3, [pc, #96]	@ (8003d08 <HAL_UART_MspInit+0x2bc>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003caa:	4817      	ldr	r0, [pc, #92]	@ (8003d08 <HAL_UART_MspInit+0x2bc>)
 8003cac:	f000 f98c 	bl	8003fc8 <HAL_DMA_Init>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_UART_MspInit+0x26e>
      Error_Handler();
 8003cb6:	f7ff faf7 	bl	80032a8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a12      	ldr	r2, [pc, #72]	@ (8003d08 <HAL_UART_MspInit+0x2bc>)
 8003cbe:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003cc0:	4a11      	ldr	r2, [pc, #68]	@ (8003d08 <HAL_UART_MspInit+0x2bc>)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	2105      	movs	r1, #5
 8003cca:	2025      	movs	r0, #37	@ 0x25
 8003ccc:	f000 f94f 	bl	8003f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003cd0:	2025      	movs	r0, #37	@ 0x25
 8003cd2:	f000 f966 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
}
 8003cd6:	bf00      	nop
 8003cd8:	3780      	adds	r7, #128	@ 0x80
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40008000 	.word	0x40008000
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	2000879c 	.word	0x2000879c
 8003cec:	40020008 	.word	0x40020008
 8003cf0:	200087fc 	.word	0x200087fc
 8003cf4:	4002001c 	.word	0x4002001c
 8003cf8:	40013800 	.word	0x40013800
 8003cfc:	48000800 	.word	0x48000800
 8003d00:	2000885c 	.word	0x2000885c
 8003d04:	40020030 	.word	0x40020030
 8003d08:	200088bc 	.word	0x200088bc
 8003d0c:	40020044 	.word	0x40020044

08003d10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003d10:	480d      	ldr	r0, [pc, #52]	@ (8003d48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003d12:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003d14:	f7ff fdf2 	bl	80038fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d18:	480c      	ldr	r0, [pc, #48]	@ (8003d4c <LoopForever+0x6>)
  ldr r1, =_edata
 8003d1a:	490d      	ldr	r1, [pc, #52]	@ (8003d50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8003d54 <LoopForever+0xe>)
  movs r3, #0
 8003d1e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003d20:	e002      	b.n	8003d28 <LoopCopyDataInit>

08003d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d26:	3304      	adds	r3, #4

08003d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d2c:	d3f9      	bcc.n	8003d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d30:	4c0a      	ldr	r4, [pc, #40]	@ (8003d5c <LoopForever+0x16>)
  movs r3, #0
 8003d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d34:	e001      	b.n	8003d3a <LoopFillZerobss>

08003d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d38:	3204      	adds	r2, #4

08003d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d3c:	d3fb      	bcc.n	8003d36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d3e:	f019 ffa7 	bl	801dc90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003d42:	f7fe fa8f 	bl	8002264 <main>

08003d46 <LoopForever>:

LoopForever:
    b LoopForever
 8003d46:	e7fe      	b.n	8003d46 <LoopForever>
  ldr   r0, =_estack
 8003d48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d50:	20003520 	.word	0x20003520
  ldr r2, =_sidata
 8003d54:	0802251c 	.word	0x0802251c
  ldr r2, =_sbss
 8003d58:	20003520 	.word	0x20003520
  ldr r4, =_ebss
 8003d5c:	2000fa08 	.word	0x2000fa08

08003d60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003d60:	e7fe      	b.n	8003d60 <ADC1_2_IRQHandler>

08003d62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d6c:	2003      	movs	r0, #3
 8003d6e:	f000 f8f3 	bl	8003f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d72:	200f      	movs	r0, #15
 8003d74:	f7ff fc2e 	bl	80035d4 <HAL_InitTick>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d002      	beq.n	8003d84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	71fb      	strb	r3, [r7, #7]
 8003d82:	e001      	b.n	8003d88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d84:	f7ff fbfc 	bl	8003580 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d88:	79fb      	ldrb	r3, [r7, #7]

}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d98:	4b05      	ldr	r3, [pc, #20]	@ (8003db0 <HAL_IncTick+0x1c>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	4b05      	ldr	r3, [pc, #20]	@ (8003db4 <HAL_IncTick+0x20>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4413      	add	r3, r2
 8003da2:	4a03      	ldr	r2, [pc, #12]	@ (8003db0 <HAL_IncTick+0x1c>)
 8003da4:	6013      	str	r3, [r2, #0]
}
 8003da6:	bf00      	nop
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	2000891c 	.word	0x2000891c
 8003db4:	2000000c 	.word	0x2000000c

08003db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  return uwTick;
 8003dbc:	4b03      	ldr	r3, [pc, #12]	@ (8003dcc <HAL_GetTick+0x14>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	2000891c 	.word	0x2000891c

08003dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003de0:	4b0c      	ldr	r3, [pc, #48]	@ (8003e14 <__NVIC_SetPriorityGrouping+0x44>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003dec:	4013      	ands	r3, r2
 8003dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003df8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003dfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e02:	4a04      	ldr	r2, [pc, #16]	@ (8003e14 <__NVIC_SetPriorityGrouping+0x44>)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	60d3      	str	r3, [r2, #12]
}
 8003e08:	bf00      	nop
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	e000ed00 	.word	0xe000ed00

08003e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e1c:	4b04      	ldr	r3, [pc, #16]	@ (8003e30 <__NVIC_GetPriorityGrouping+0x18>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	0a1b      	lsrs	r3, r3, #8
 8003e22:	f003 0307 	and.w	r3, r3, #7
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	e000ed00 	.word	0xe000ed00

08003e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	db0b      	blt.n	8003e5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e46:	79fb      	ldrb	r3, [r7, #7]
 8003e48:	f003 021f 	and.w	r2, r3, #31
 8003e4c:	4907      	ldr	r1, [pc, #28]	@ (8003e6c <__NVIC_EnableIRQ+0x38>)
 8003e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	2001      	movs	r0, #1
 8003e56:	fa00 f202 	lsl.w	r2, r0, r2
 8003e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	e000e100 	.word	0xe000e100

08003e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	4603      	mov	r3, r0
 8003e78:	6039      	str	r1, [r7, #0]
 8003e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	db0a      	blt.n	8003e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	490c      	ldr	r1, [pc, #48]	@ (8003ebc <__NVIC_SetPriority+0x4c>)
 8003e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8e:	0112      	lsls	r2, r2, #4
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	440b      	add	r3, r1
 8003e94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e98:	e00a      	b.n	8003eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	4908      	ldr	r1, [pc, #32]	@ (8003ec0 <__NVIC_SetPriority+0x50>)
 8003ea0:	79fb      	ldrb	r3, [r7, #7]
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	3b04      	subs	r3, #4
 8003ea8:	0112      	lsls	r2, r2, #4
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	440b      	add	r3, r1
 8003eae:	761a      	strb	r2, [r3, #24]
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	e000e100 	.word	0xe000e100
 8003ec0:	e000ed00 	.word	0xe000ed00

08003ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b089      	sub	sp, #36	@ 0x24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f1c3 0307 	rsb	r3, r3, #7
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	bf28      	it	cs
 8003ee2:	2304      	movcs	r3, #4
 8003ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	3304      	adds	r3, #4
 8003eea:	2b06      	cmp	r3, #6
 8003eec:	d902      	bls.n	8003ef4 <NVIC_EncodePriority+0x30>
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	3b03      	subs	r3, #3
 8003ef2:	e000      	b.n	8003ef6 <NVIC_EncodePriority+0x32>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ef8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	43da      	mvns	r2, r3
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	401a      	ands	r2, r3
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f0c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	fa01 f303 	lsl.w	r3, r1, r3
 8003f16:	43d9      	mvns	r1, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f1c:	4313      	orrs	r3, r2
         );
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3724      	adds	r7, #36	@ 0x24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
	...

08003f2c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003f30:	f3bf 8f4f 	dsb	sy
}
 8003f34:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003f36:	4b06      	ldr	r3, [pc, #24]	@ (8003f50 <__NVIC_SystemReset+0x24>)
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003f3e:	4904      	ldr	r1, [pc, #16]	@ (8003f50 <__NVIC_SystemReset+0x24>)
 8003f40:	4b04      	ldr	r3, [pc, #16]	@ (8003f54 <__NVIC_SystemReset+0x28>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003f46:	f3bf 8f4f 	dsb	sy
}
 8003f4a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003f4c:	bf00      	nop
 8003f4e:	e7fd      	b.n	8003f4c <__NVIC_SystemReset+0x20>
 8003f50:	e000ed00 	.word	0xe000ed00
 8003f54:	05fa0004 	.word	0x05fa0004

08003f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7ff ff35 	bl	8003dd0 <__NVIC_SetPriorityGrouping>
}
 8003f66:	bf00      	nop
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b086      	sub	sp, #24
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	4603      	mov	r3, r0
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	607a      	str	r2, [r7, #4]
 8003f7a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f7c:	f7ff ff4c 	bl	8003e18 <__NVIC_GetPriorityGrouping>
 8003f80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	6978      	ldr	r0, [r7, #20]
 8003f88:	f7ff ff9c 	bl	8003ec4 <NVIC_EncodePriority>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f92:	4611      	mov	r1, r2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff ff6b 	bl	8003e70 <__NVIC_SetPriority>
}
 8003f9a:	bf00      	nop
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	4603      	mov	r3, r0
 8003faa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff ff3f 	bl	8003e34 <__NVIC_EnableIRQ>
}
 8003fb6:	bf00      	nop
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003fc2:	f7ff ffb3 	bl	8003f2c <__NVIC_SystemReset>
	...

08003fc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e08d      	b.n	80040f6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	4b47      	ldr	r3, [pc, #284]	@ (8004100 <HAL_DMA_Init+0x138>)
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d80f      	bhi.n	8004006 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	4b45      	ldr	r3, [pc, #276]	@ (8004104 <HAL_DMA_Init+0x13c>)
 8003fee:	4413      	add	r3, r2
 8003ff0:	4a45      	ldr	r2, [pc, #276]	@ (8004108 <HAL_DMA_Init+0x140>)
 8003ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff6:	091b      	lsrs	r3, r3, #4
 8003ff8:	009a      	lsls	r2, r3, #2
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a42      	ldr	r2, [pc, #264]	@ (800410c <HAL_DMA_Init+0x144>)
 8004002:	641a      	str	r2, [r3, #64]	@ 0x40
 8004004:	e00e      	b.n	8004024 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	4b40      	ldr	r3, [pc, #256]	@ (8004110 <HAL_DMA_Init+0x148>)
 800400e:	4413      	add	r3, r2
 8004010:	4a3d      	ldr	r2, [pc, #244]	@ (8004108 <HAL_DMA_Init+0x140>)
 8004012:	fba2 2303 	umull	r2, r3, r2, r3
 8004016:	091b      	lsrs	r3, r3, #4
 8004018:	009a      	lsls	r2, r3, #2
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a3c      	ldr	r2, [pc, #240]	@ (8004114 <HAL_DMA_Init+0x14c>)
 8004022:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800403a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800403e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004048:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004054:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004060:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 fa82 	bl	8004580 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004084:	d102      	bne.n	800408c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80040a0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d010      	beq.n	80040cc <HAL_DMA_Init+0x104>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d80c      	bhi.n	80040cc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 faa2 	bl	80045fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80040c8:	605a      	str	r2, [r3, #4]
 80040ca:	e008      	b.n	80040de <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	40020407 	.word	0x40020407
 8004104:	bffdfff8 	.word	0xbffdfff8
 8004108:	cccccccd 	.word	0xcccccccd
 800410c:	40020000 	.word	0x40020000
 8004110:	bffdfbf8 	.word	0xbffdfbf8
 8004114:	40020400 	.word	0x40020400

08004118 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
 8004124:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_DMA_Start_IT+0x20>
 8004134:	2302      	movs	r3, #2
 8004136:	e066      	b.n	8004206 <HAL_DMA_Start_IT+0xee>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b01      	cmp	r3, #1
 800414a:	d155      	bne.n	80041f8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0201 	bic.w	r2, r2, #1
 8004168:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	68b9      	ldr	r1, [r7, #8]
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 f9c7 	bl	8004504 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417a:	2b00      	cmp	r3, #0
 800417c:	d008      	beq.n	8004190 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 020e 	orr.w	r2, r2, #14
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	e00f      	b.n	80041b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 0204 	bic.w	r2, r2, #4
 800419e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f042 020a 	orr.w	r2, r2, #10
 80041ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d007      	beq.n	80041ce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041cc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d007      	beq.n	80041e6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f042 0201 	orr.w	r2, r2, #1
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	e005      	b.n	8004204 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004200:	2302      	movs	r3, #2
 8004202:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004204:	7dfb      	ldrb	r3, [r7, #23]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800420e:	b480      	push	{r7}
 8004210:	b085      	sub	sp, #20
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d005      	beq.n	8004232 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2204      	movs	r2, #4
 800422a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	73fb      	strb	r3, [r7, #15]
 8004230:	e037      	b.n	80042a2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 020e 	bic.w	r2, r2, #14
 8004240:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800424c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004250:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0201 	bic.w	r2, r2, #1
 8004260:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004266:	f003 021f 	and.w	r2, r3, #31
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426e:	2101      	movs	r1, #1
 8004270:	fa01 f202 	lsl.w	r2, r1, r2
 8004274:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800427e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00c      	beq.n	80042a2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004292:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004296:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80042a0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80042b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d00d      	beq.n	80042f4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2204      	movs	r2, #4
 80042dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	73fb      	strb	r3, [r7, #15]
 80042f2:	e047      	b.n	8004384 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 020e 	bic.w	r2, r2, #14
 8004302:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0201 	bic.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800431e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004322:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004328:	f003 021f 	and.w	r2, r3, #31
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004330:	2101      	movs	r1, #1
 8004332:	fa01 f202 	lsl.w	r2, r1, r2
 8004336:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004340:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00c      	beq.n	8004364 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004354:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004358:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004362:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	4798      	blx	r3
    }
  }
  return status;
 8004384:	7bfb      	ldrb	r3, [r7, #15]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b084      	sub	sp, #16
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043aa:	f003 031f 	and.w	r3, r3, #31
 80043ae:	2204      	movs	r2, #4
 80043b0:	409a      	lsls	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4013      	ands	r3, r2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d026      	beq.n	8004408 <HAL_DMA_IRQHandler+0x7a>
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d021      	beq.n	8004408 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0320 	and.w	r3, r3, #32
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d107      	bne.n	80043e2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0204 	bic.w	r2, r2, #4
 80043e0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043e6:	f003 021f 	and.w	r2, r3, #31
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ee:	2104      	movs	r1, #4
 80043f0:	fa01 f202 	lsl.w	r2, r1, r2
 80043f4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d071      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004406:	e06c      	b.n	80044e2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440c:	f003 031f 	and.w	r3, r3, #31
 8004410:	2202      	movs	r2, #2
 8004412:	409a      	lsls	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4013      	ands	r3, r2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d02e      	beq.n	800447a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d029      	beq.n	800447a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0320 	and.w	r3, r3, #32
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10b      	bne.n	800444c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 020a 	bic.w	r2, r2, #10
 8004442:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004450:	f003 021f 	and.w	r2, r3, #31
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004458:	2102      	movs	r1, #2
 800445a:	fa01 f202 	lsl.w	r2, r1, r2
 800445e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446c:	2b00      	cmp	r3, #0
 800446e:	d038      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004478:	e033      	b.n	80044e2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800447e:	f003 031f 	and.w	r3, r3, #31
 8004482:	2208      	movs	r2, #8
 8004484:	409a      	lsls	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	4013      	ands	r3, r2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d02a      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	f003 0308 	and.w	r3, r3, #8
 8004494:	2b00      	cmp	r3, #0
 8004496:	d025      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 020e 	bic.w	r2, r2, #14
 80044a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ac:	f003 021f 	and.w	r2, r3, #31
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b4:	2101      	movs	r1, #1
 80044b6:	fa01 f202 	lsl.w	r2, r1, r2
 80044ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d004      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80044e2:	bf00      	nop
 80044e4:	bf00      	nop
}
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800451a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004520:	2b00      	cmp	r3, #0
 8004522:	d004      	beq.n	800452e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800452c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004532:	f003 021f 	and.w	r2, r3, #31
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453a:	2101      	movs	r1, #1
 800453c:	fa01 f202 	lsl.w	r2, r1, r2
 8004540:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	2b10      	cmp	r3, #16
 8004550:	d108      	bne.n	8004564 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004562:	e007      	b.n	8004574 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	60da      	str	r2, [r3, #12]
}
 8004574:	bf00      	nop
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	461a      	mov	r2, r3
 800458e:	4b16      	ldr	r3, [pc, #88]	@ (80045e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004590:	429a      	cmp	r2, r3
 8004592:	d802      	bhi.n	800459a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004594:	4b15      	ldr	r3, [pc, #84]	@ (80045ec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	e001      	b.n	800459e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800459a:	4b15      	ldr	r3, [pc, #84]	@ (80045f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800459c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	3b08      	subs	r3, #8
 80045aa:	4a12      	ldr	r2, [pc, #72]	@ (80045f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80045ac:	fba2 2303 	umull	r2, r3, r2, r3
 80045b0:	091b      	lsrs	r3, r3, #4
 80045b2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b8:	089b      	lsrs	r3, r3, #2
 80045ba:	009a      	lsls	r2, r3, #2
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	4413      	add	r3, r2
 80045c0:	461a      	mov	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a0b      	ldr	r2, [pc, #44]	@ (80045f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80045ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f003 031f 	and.w	r3, r3, #31
 80045d2:	2201      	movs	r2, #1
 80045d4:	409a      	lsls	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80045da:	bf00      	nop
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40020407 	.word	0x40020407
 80045ec:	40020800 	.word	0x40020800
 80045f0:	40020820 	.word	0x40020820
 80045f4:	cccccccd 	.word	0xcccccccd
 80045f8:	40020880 	.word	0x40020880

080045fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	b2db      	uxtb	r3, r3
 800460a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	4b0b      	ldr	r3, [pc, #44]	@ (800463c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	461a      	mov	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a08      	ldr	r2, [pc, #32]	@ (8004640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800461e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	3b01      	subs	r3, #1
 8004624:	f003 031f 	and.w	r3, r3, #31
 8004628:	2201      	movs	r2, #1
 800462a:	409a      	lsls	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004630:	bf00      	nop
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	1000823f 	.word	0x1000823f
 8004640:	40020940 	.word	0x40020940

08004644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800464e:	2300      	movs	r3, #0
 8004650:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004652:	e15a      	b.n	800490a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	2101      	movs	r1, #1
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	fa01 f303 	lsl.w	r3, r1, r3
 8004660:	4013      	ands	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 814c 	beq.w	8004904 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f003 0303 	and.w	r3, r3, #3
 8004674:	2b01      	cmp	r3, #1
 8004676:	d005      	beq.n	8004684 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004680:	2b02      	cmp	r3, #2
 8004682:	d130      	bne.n	80046e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	2203      	movs	r2, #3
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	43db      	mvns	r3, r3
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4013      	ands	r3, r2
 800469a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046ba:	2201      	movs	r2, #1
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	fa02 f303 	lsl.w	r3, r2, r3
 80046c2:	43db      	mvns	r3, r3
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	4013      	ands	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	091b      	lsrs	r3, r3, #4
 80046d0:	f003 0201 	and.w	r2, r3, #1
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	fa02 f303 	lsl.w	r3, r2, r3
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d017      	beq.n	8004722 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	2203      	movs	r2, #3
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	43db      	mvns	r3, r3
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	4013      	ands	r3, r2
 8004708:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	689a      	ldr	r2, [r3, #8]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	fa02 f303 	lsl.w	r3, r2, r3
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d123      	bne.n	8004776 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	08da      	lsrs	r2, r3, #3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	3208      	adds	r2, #8
 8004736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800473a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	220f      	movs	r2, #15
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	43db      	mvns	r3, r3
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4013      	ands	r3, r2
 8004750:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	691a      	ldr	r2, [r3, #16]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	4313      	orrs	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	08da      	lsrs	r2, r3, #3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3208      	adds	r2, #8
 8004770:	6939      	ldr	r1, [r7, #16]
 8004772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	2203      	movs	r2, #3
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	43db      	mvns	r3, r3
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4013      	ands	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f003 0203 	and.w	r2, r3, #3
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f000 80a6 	beq.w	8004904 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047b8:	4b5b      	ldr	r3, [pc, #364]	@ (8004928 <HAL_GPIO_Init+0x2e4>)
 80047ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047bc:	4a5a      	ldr	r2, [pc, #360]	@ (8004928 <HAL_GPIO_Init+0x2e4>)
 80047be:	f043 0301 	orr.w	r3, r3, #1
 80047c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80047c4:	4b58      	ldr	r3, [pc, #352]	@ (8004928 <HAL_GPIO_Init+0x2e4>)
 80047c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	60bb      	str	r3, [r7, #8]
 80047ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047d0:	4a56      	ldr	r2, [pc, #344]	@ (800492c <HAL_GPIO_Init+0x2e8>)
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	089b      	lsrs	r3, r3, #2
 80047d6:	3302      	adds	r3, #2
 80047d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f003 0303 	and.w	r3, r3, #3
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	220f      	movs	r2, #15
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	43db      	mvns	r3, r3
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	4013      	ands	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80047fa:	d01f      	beq.n	800483c <HAL_GPIO_Init+0x1f8>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a4c      	ldr	r2, [pc, #304]	@ (8004930 <HAL_GPIO_Init+0x2ec>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d019      	beq.n	8004838 <HAL_GPIO_Init+0x1f4>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a4b      	ldr	r2, [pc, #300]	@ (8004934 <HAL_GPIO_Init+0x2f0>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d013      	beq.n	8004834 <HAL_GPIO_Init+0x1f0>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a4a      	ldr	r2, [pc, #296]	@ (8004938 <HAL_GPIO_Init+0x2f4>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d00d      	beq.n	8004830 <HAL_GPIO_Init+0x1ec>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a49      	ldr	r2, [pc, #292]	@ (800493c <HAL_GPIO_Init+0x2f8>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d007      	beq.n	800482c <HAL_GPIO_Init+0x1e8>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a48      	ldr	r2, [pc, #288]	@ (8004940 <HAL_GPIO_Init+0x2fc>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d101      	bne.n	8004828 <HAL_GPIO_Init+0x1e4>
 8004824:	2305      	movs	r3, #5
 8004826:	e00a      	b.n	800483e <HAL_GPIO_Init+0x1fa>
 8004828:	2306      	movs	r3, #6
 800482a:	e008      	b.n	800483e <HAL_GPIO_Init+0x1fa>
 800482c:	2304      	movs	r3, #4
 800482e:	e006      	b.n	800483e <HAL_GPIO_Init+0x1fa>
 8004830:	2303      	movs	r3, #3
 8004832:	e004      	b.n	800483e <HAL_GPIO_Init+0x1fa>
 8004834:	2302      	movs	r3, #2
 8004836:	e002      	b.n	800483e <HAL_GPIO_Init+0x1fa>
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <HAL_GPIO_Init+0x1fa>
 800483c:	2300      	movs	r3, #0
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	f002 0203 	and.w	r2, r2, #3
 8004844:	0092      	lsls	r2, r2, #2
 8004846:	4093      	lsls	r3, r2
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	4313      	orrs	r3, r2
 800484c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800484e:	4937      	ldr	r1, [pc, #220]	@ (800492c <HAL_GPIO_Init+0x2e8>)
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	089b      	lsrs	r3, r3, #2
 8004854:	3302      	adds	r3, #2
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800485c:	4b39      	ldr	r3, [pc, #228]	@ (8004944 <HAL_GPIO_Init+0x300>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	43db      	mvns	r3, r3
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	4013      	ands	r3, r2
 800486a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4313      	orrs	r3, r2
 800487e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004880:	4a30      	ldr	r2, [pc, #192]	@ (8004944 <HAL_GPIO_Init+0x300>)
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004886:	4b2f      	ldr	r3, [pc, #188]	@ (8004944 <HAL_GPIO_Init+0x300>)
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	43db      	mvns	r3, r3
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4013      	ands	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80048aa:	4a26      	ldr	r2, [pc, #152]	@ (8004944 <HAL_GPIO_Init+0x300>)
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80048b0:	4b24      	ldr	r3, [pc, #144]	@ (8004944 <HAL_GPIO_Init+0x300>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	43db      	mvns	r3, r3
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	4013      	ands	r3, r2
 80048be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d003      	beq.n	80048d4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80048d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004944 <HAL_GPIO_Init+0x300>)
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80048da:	4b1a      	ldr	r3, [pc, #104]	@ (8004944 <HAL_GPIO_Init+0x300>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	43db      	mvns	r3, r3
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	4013      	ands	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80048fe:	4a11      	ldr	r2, [pc, #68]	@ (8004944 <HAL_GPIO_Init+0x300>)
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	3301      	adds	r3, #1
 8004908:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	fa22 f303 	lsr.w	r3, r2, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	f47f ae9d 	bne.w	8004654 <HAL_GPIO_Init+0x10>
  }
}
 800491a:	bf00      	nop
 800491c:	bf00      	nop
 800491e:	371c      	adds	r7, #28
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	40021000 	.word	0x40021000
 800492c:	40010000 	.word	0x40010000
 8004930:	48000400 	.word	0x48000400
 8004934:	48000800 	.word	0x48000800
 8004938:	48000c00 	.word	0x48000c00
 800493c:	48001000 	.word	0x48001000
 8004940:	48001400 	.word	0x48001400
 8004944:	40010400 	.word	0x40010400

08004948 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691a      	ldr	r2, [r3, #16]
 8004958:	887b      	ldrh	r3, [r7, #2]
 800495a:	4013      	ands	r3, r2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004960:	2301      	movs	r3, #1
 8004962:	73fb      	strb	r3, [r7, #15]
 8004964:	e001      	b.n	800496a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004966:	2300      	movs	r3, #0
 8004968:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800496a:	7bfb      	ldrb	r3, [r7, #15]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	807b      	strh	r3, [r7, #2]
 8004984:	4613      	mov	r3, r2
 8004986:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004988:	787b      	ldrb	r3, [r7, #1]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800498e:	887a      	ldrh	r2, [r7, #2]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004994:	e002      	b.n	800499c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004996:	887a      	ldrh	r2, [r7, #2]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	460b      	mov	r3, r1
 80049b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049ba:	887a      	ldrh	r2, [r7, #2]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4013      	ands	r3, r2
 80049c0:	041a      	lsls	r2, r3, #16
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	43d9      	mvns	r1, r3
 80049c6:	887b      	ldrh	r3, [r7, #2]
 80049c8:	400b      	ands	r3, r1
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	619a      	str	r2, [r3, #24]
}
 80049d0:	bf00      	nop
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e08d      	b.n	8004b0a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7fc feee 	bl	80017e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2224      	movs	r2, #36	@ 0x24
 8004a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 0201 	bic.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004a2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d107      	bne.n	8004a56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689a      	ldr	r2, [r3, #8]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a52:	609a      	str	r2, [r3, #8]
 8004a54:	e006      	b.n	8004a64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689a      	ldr	r2, [r3, #8]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004a62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d108      	bne.n	8004a7e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a7a:	605a      	str	r2, [r3, #4]
 8004a7c:	e007      	b.n	8004a8e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6812      	ldr	r2, [r2, #0]
 8004a98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004aa0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68da      	ldr	r2, [r3, #12]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ab0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691a      	ldr	r2, [r3, #16]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	69d9      	ldr	r1, [r3, #28]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a1a      	ldr	r2, [r3, #32]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2220      	movs	r2, #32
 8004af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
	...

08004b14 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	4608      	mov	r0, r1
 8004b1e:	4611      	mov	r1, r2
 8004b20:	461a      	mov	r2, r3
 8004b22:	4603      	mov	r3, r0
 8004b24:	817b      	strh	r3, [r7, #10]
 8004b26:	460b      	mov	r3, r1
 8004b28:	813b      	strh	r3, [r7, #8]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b20      	cmp	r3, #32
 8004b38:	f040 80f9 	bne.w	8004d2e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <HAL_I2C_Mem_Write+0x34>
 8004b42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d105      	bne.n	8004b54 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b4e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e0ed      	b.n	8004d30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_I2C_Mem_Write+0x4e>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e0e6      	b.n	8004d30 <HAL_I2C_Mem_Write+0x21c>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b6a:	f7ff f925 	bl	8003db8 <HAL_GetTick>
 8004b6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	2319      	movs	r3, #25
 8004b76:	2201      	movs	r2, #1
 8004b78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f000 fbaf 	bl	80052e0 <I2C_WaitOnFlagUntilTimeout>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e0d1      	b.n	8004d30 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2221      	movs	r2, #33	@ 0x21
 8004b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2240      	movs	r2, #64	@ 0x40
 8004b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6a3a      	ldr	r2, [r7, #32]
 8004ba6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004bac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bb4:	88f8      	ldrh	r0, [r7, #6]
 8004bb6:	893a      	ldrh	r2, [r7, #8]
 8004bb8:	8979      	ldrh	r1, [r7, #10]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	9301      	str	r3, [sp, #4]
 8004bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 fabf 	bl	8005148 <I2C_RequestMemoryWrite>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d005      	beq.n	8004bdc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e0a9      	b.n	8004d30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	2bff      	cmp	r3, #255	@ 0xff
 8004be4:	d90e      	bls.n	8004c04 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	22ff      	movs	r2, #255	@ 0xff
 8004bea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	8979      	ldrh	r1, [r7, #10]
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 fd33 	bl	8005668 <I2C_TransferConfig>
 8004c02:	e00f      	b.n	8004c24 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	8979      	ldrh	r1, [r7, #10]
 8004c16:	2300      	movs	r3, #0
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 fd22 	bl	8005668 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 fbb2 	bl	8005392 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e07b      	b.n	8004d30 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3c:	781a      	ldrb	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	3b01      	subs	r3, #1
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d034      	beq.n	8004cdc <HAL_I2C_Mem_Write+0x1c8>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d130      	bne.n	8004cdc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c80:	2200      	movs	r2, #0
 8004c82:	2180      	movs	r1, #128	@ 0x80
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 fb2b 	bl	80052e0 <I2C_WaitOnFlagUntilTimeout>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e04d      	b.n	8004d30 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2bff      	cmp	r3, #255	@ 0xff
 8004c9c:	d90e      	bls.n	8004cbc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	22ff      	movs	r2, #255	@ 0xff
 8004ca2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	8979      	ldrh	r1, [r7, #10]
 8004cac:	2300      	movs	r3, #0
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 fcd7 	bl	8005668 <I2C_TransferConfig>
 8004cba:	e00f      	b.n	8004cdc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	8979      	ldrh	r1, [r7, #10]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 fcc6 	bl	8005668 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d19e      	bne.n	8004c24 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 fb98 	bl	8005420 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e01a      	b.n	8004d30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6859      	ldr	r1, [r3, #4]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d38 <HAL_I2C_Mem_Write+0x224>)
 8004d0e:	400b      	ands	r3, r1
 8004d10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2220      	movs	r2, #32
 8004d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	e000      	b.n	8004d30 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004d2e:	2302      	movs	r3, #2
  }
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3718      	adds	r7, #24
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	fe00e800 	.word	0xfe00e800

08004d3c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b088      	sub	sp, #32
 8004d40:	af02      	add	r7, sp, #8
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	4608      	mov	r0, r1
 8004d46:	4611      	mov	r1, r2
 8004d48:	461a      	mov	r2, r3
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	817b      	strh	r3, [r7, #10]
 8004d4e:	460b      	mov	r3, r1
 8004d50:	813b      	strh	r3, [r7, #8]
 8004d52:	4613      	mov	r3, r2
 8004d54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b20      	cmp	r3, #32
 8004d60:	f040 80fd 	bne.w	8004f5e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d002      	beq.n	8004d70 <HAL_I2C_Mem_Read+0x34>
 8004d6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d105      	bne.n	8004d7c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d76:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e0f1      	b.n	8004f60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <HAL_I2C_Mem_Read+0x4e>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e0ea      	b.n	8004f60 <HAL_I2C_Mem_Read+0x224>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d92:	f7ff f811 	bl	8003db8 <HAL_GetTick>
 8004d96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	2319      	movs	r3, #25
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f000 fa9b 	bl	80052e0 <I2C_WaitOnFlagUntilTimeout>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e0d5      	b.n	8004f60 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2222      	movs	r2, #34	@ 0x22
 8004db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2240      	movs	r2, #64	@ 0x40
 8004dc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6a3a      	ldr	r2, [r7, #32]
 8004dce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004dd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ddc:	88f8      	ldrh	r0, [r7, #6]
 8004dde:	893a      	ldrh	r2, [r7, #8]
 8004de0:	8979      	ldrh	r1, [r7, #10]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	9301      	str	r3, [sp, #4]
 8004de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	4603      	mov	r3, r0
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 f9ff 	bl	80051f0 <I2C_RequestMemoryRead>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d005      	beq.n	8004e04 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e0ad      	b.n	8004f60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	2bff      	cmp	r3, #255	@ 0xff
 8004e0c:	d90e      	bls.n	8004e2c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	22ff      	movs	r2, #255	@ 0xff
 8004e12:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e18:	b2da      	uxtb	r2, r3
 8004e1a:	8979      	ldrh	r1, [r7, #10]
 8004e1c:	4b52      	ldr	r3, [pc, #328]	@ (8004f68 <HAL_I2C_Mem_Read+0x22c>)
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 fc1f 	bl	8005668 <I2C_TransferConfig>
 8004e2a:	e00f      	b.n	8004e4c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	8979      	ldrh	r1, [r7, #10]
 8004e3e:	4b4a      	ldr	r3, [pc, #296]	@ (8004f68 <HAL_I2C_Mem_Read+0x22c>)
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 fc0e 	bl	8005668 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e52:	2200      	movs	r2, #0
 8004e54:	2104      	movs	r1, #4
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 fa42 	bl	80052e0 <I2C_WaitOnFlagUntilTimeout>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e07c      	b.n	8004f60 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e70:	b2d2      	uxtb	r2, r2
 8004e72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d034      	beq.n	8004f0c <HAL_I2C_Mem_Read+0x1d0>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d130      	bne.n	8004f0c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	2180      	movs	r1, #128	@ 0x80
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f000 fa13 	bl	80052e0 <I2C_WaitOnFlagUntilTimeout>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d001      	beq.n	8004ec4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e04d      	b.n	8004f60 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2bff      	cmp	r3, #255	@ 0xff
 8004ecc:	d90e      	bls.n	8004eec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	22ff      	movs	r2, #255	@ 0xff
 8004ed2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	8979      	ldrh	r1, [r7, #10]
 8004edc:	2300      	movs	r3, #0
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 fbbf 	bl	8005668 <I2C_TransferConfig>
 8004eea:	e00f      	b.n	8004f0c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	8979      	ldrh	r1, [r7, #10]
 8004efe:	2300      	movs	r3, #0
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 fbae 	bl	8005668 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d19a      	bne.n	8004e4c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 fa80 	bl	8005420 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e01a      	b.n	8004f60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6859      	ldr	r1, [r3, #4]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f6c <HAL_I2C_Mem_Read+0x230>)
 8004f3e:	400b      	ands	r3, r1
 8004f40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	e000      	b.n	8004f60 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004f5e:	2302      	movs	r3, #2
  }
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	80002400 	.word	0x80002400
 8004f6c:	fe00e800 	.word	0xfe00e800

08004f70 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08a      	sub	sp, #40	@ 0x28
 8004f74:	af02      	add	r7, sp, #8
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	607a      	str	r2, [r7, #4]
 8004f7a:	603b      	str	r3, [r7, #0]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004f80:	2300      	movs	r3, #0
 8004f82:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b20      	cmp	r3, #32
 8004f8e:	f040 80d6 	bne.w	800513e <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fa0:	d101      	bne.n	8004fa6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	e0cc      	b.n	8005140 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d101      	bne.n	8004fb4 <HAL_I2C_IsDeviceReady+0x44>
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	e0c5      	b.n	8005140 <HAL_I2C_IsDeviceReady+0x1d0>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2224      	movs	r2, #36	@ 0x24
 8004fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d107      	bne.n	8004fe2 <HAL_I2C_IsDeviceReady+0x72>
 8004fd2:	897b      	ldrh	r3, [r7, #10]
 8004fd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fd8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004fdc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004fe0:	e006      	b.n	8004ff0 <HAL_I2C_IsDeviceReady+0x80>
 8004fe2:	897b      	ldrh	r3, [r7, #10]
 8004fe4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fe8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004fec:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004ff6:	f7fe fedf 	bl	8003db8 <HAL_GetTick>
 8004ffa:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f003 0320 	and.w	r3, r3, #32
 8005006:	2b20      	cmp	r3, #32
 8005008:	bf0c      	ite	eq
 800500a:	2301      	moveq	r3, #1
 800500c:	2300      	movne	r3, #0
 800500e:	b2db      	uxtb	r3, r3
 8005010:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	f003 0310 	and.w	r3, r3, #16
 800501c:	2b10      	cmp	r3, #16
 800501e:	bf0c      	ite	eq
 8005020:	2301      	moveq	r3, #1
 8005022:	2300      	movne	r3, #0
 8005024:	b2db      	uxtb	r3, r3
 8005026:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005028:	e034      	b.n	8005094 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005030:	d01a      	beq.n	8005068 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005032:	f7fe fec1 	bl	8003db8 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	429a      	cmp	r2, r3
 8005040:	d302      	bcc.n	8005048 <HAL_I2C_IsDeviceReady+0xd8>
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10f      	bne.n	8005068 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2220      	movs	r2, #32
 800504c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005054:	f043 0220 	orr.w	r2, r3, #32
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e06b      	b.n	8005140 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b20      	cmp	r3, #32
 8005074:	bf0c      	ite	eq
 8005076:	2301      	moveq	r3, #1
 8005078:	2300      	movne	r3, #0
 800507a:	b2db      	uxtb	r3, r3
 800507c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	f003 0310 	and.w	r3, r3, #16
 8005088:	2b10      	cmp	r3, #16
 800508a:	bf0c      	ite	eq
 800508c:	2301      	moveq	r3, #1
 800508e:	2300      	movne	r3, #0
 8005090:	b2db      	uxtb	r3, r3
 8005092:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005094:	7ffb      	ldrb	r3, [r7, #31]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d102      	bne.n	80050a0 <HAL_I2C_IsDeviceReady+0x130>
 800509a:	7fbb      	ldrb	r3, [r7, #30]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d0c4      	beq.n	800502a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	f003 0310 	and.w	r3, r3, #16
 80050aa:	2b10      	cmp	r3, #16
 80050ac:	d01a      	beq.n	80050e4 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2200      	movs	r2, #0
 80050b6:	2120      	movs	r1, #32
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 f911 	bl	80052e0 <I2C_WaitOnFlagUntilTimeout>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e03b      	b.n	8005140 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2220      	movs	r2, #32
 80050ce:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80050e0:	2300      	movs	r3, #0
 80050e2:	e02d      	b.n	8005140 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	2200      	movs	r2, #0
 80050ec:	2120      	movs	r1, #32
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 f8f6 	bl	80052e0 <I2C_WaitOnFlagUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e020      	b.n	8005140 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2210      	movs	r2, #16
 8005104:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2220      	movs	r2, #32
 800510c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	3301      	adds	r3, #1
 8005112:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	429a      	cmp	r2, r3
 800511a:	f63f af56 	bhi.w	8004fca <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2220      	movs	r2, #32
 8005122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800512a:	f043 0220 	orr.w	r2, r3, #32
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e000      	b.n	8005140 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800513e:	2302      	movs	r3, #2
  }
}
 8005140:	4618      	mov	r0, r3
 8005142:	3720      	adds	r7, #32
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af02      	add	r7, sp, #8
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	4608      	mov	r0, r1
 8005152:	4611      	mov	r1, r2
 8005154:	461a      	mov	r2, r3
 8005156:	4603      	mov	r3, r0
 8005158:	817b      	strh	r3, [r7, #10]
 800515a:	460b      	mov	r3, r1
 800515c:	813b      	strh	r3, [r7, #8]
 800515e:	4613      	mov	r3, r2
 8005160:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005162:	88fb      	ldrh	r3, [r7, #6]
 8005164:	b2da      	uxtb	r2, r3
 8005166:	8979      	ldrh	r1, [r7, #10]
 8005168:	4b20      	ldr	r3, [pc, #128]	@ (80051ec <I2C_RequestMemoryWrite+0xa4>)
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 fa79 	bl	8005668 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005176:	69fa      	ldr	r2, [r7, #28]
 8005178:	69b9      	ldr	r1, [r7, #24]
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f000 f909 	bl	8005392 <I2C_WaitOnTXISFlagUntilTimeout>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e02c      	b.n	80051e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800518a:	88fb      	ldrh	r3, [r7, #6]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d105      	bne.n	800519c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005190:	893b      	ldrh	r3, [r7, #8]
 8005192:	b2da      	uxtb	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	629a      	str	r2, [r3, #40]	@ 0x28
 800519a:	e015      	b.n	80051c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800519c:	893b      	ldrh	r3, [r7, #8]
 800519e:	0a1b      	lsrs	r3, r3, #8
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	b2da      	uxtb	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051aa:	69fa      	ldr	r2, [r7, #28]
 80051ac:	69b9      	ldr	r1, [r7, #24]
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f000 f8ef 	bl	8005392 <I2C_WaitOnTXISFlagUntilTimeout>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e012      	b.n	80051e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051be:	893b      	ldrh	r3, [r7, #8]
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	2200      	movs	r2, #0
 80051d0:	2180      	movs	r1, #128	@ 0x80
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 f884 	bl	80052e0 <I2C_WaitOnFlagUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e000      	b.n	80051e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	80002000 	.word	0x80002000

080051f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af02      	add	r7, sp, #8
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	4608      	mov	r0, r1
 80051fa:	4611      	mov	r1, r2
 80051fc:	461a      	mov	r2, r3
 80051fe:	4603      	mov	r3, r0
 8005200:	817b      	strh	r3, [r7, #10]
 8005202:	460b      	mov	r3, r1
 8005204:	813b      	strh	r3, [r7, #8]
 8005206:	4613      	mov	r3, r2
 8005208:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800520a:	88fb      	ldrh	r3, [r7, #6]
 800520c:	b2da      	uxtb	r2, r3
 800520e:	8979      	ldrh	r1, [r7, #10]
 8005210:	4b20      	ldr	r3, [pc, #128]	@ (8005294 <I2C_RequestMemoryRead+0xa4>)
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	2300      	movs	r3, #0
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 fa26 	bl	8005668 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800521c:	69fa      	ldr	r2, [r7, #28]
 800521e:	69b9      	ldr	r1, [r7, #24]
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 f8b6 	bl	8005392 <I2C_WaitOnTXISFlagUntilTimeout>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e02c      	b.n	800528a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005230:	88fb      	ldrh	r3, [r7, #6]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d105      	bne.n	8005242 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005236:	893b      	ldrh	r3, [r7, #8]
 8005238:	b2da      	uxtb	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005240:	e015      	b.n	800526e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005242:	893b      	ldrh	r3, [r7, #8]
 8005244:	0a1b      	lsrs	r3, r3, #8
 8005246:	b29b      	uxth	r3, r3
 8005248:	b2da      	uxtb	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005250:	69fa      	ldr	r2, [r7, #28]
 8005252:	69b9      	ldr	r1, [r7, #24]
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 f89c 	bl	8005392 <I2C_WaitOnTXISFlagUntilTimeout>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e012      	b.n	800528a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005264:	893b      	ldrh	r3, [r7, #8]
 8005266:	b2da      	uxtb	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	2200      	movs	r2, #0
 8005276:	2140      	movs	r1, #64	@ 0x40
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 f831 	bl	80052e0 <I2C_WaitOnFlagUntilTimeout>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d001      	beq.n	8005288 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e000      	b.n	800528a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	80002000 	.word	0x80002000

08005298 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d103      	bne.n	80052b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2200      	movs	r2, #0
 80052b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d007      	beq.n	80052d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	699a      	ldr	r2, [r3, #24]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0201 	orr.w	r2, r2, #1
 80052d2:	619a      	str	r2, [r3, #24]
  }
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	603b      	str	r3, [r7, #0]
 80052ec:	4613      	mov	r3, r2
 80052ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052f0:	e03b      	b.n	800536a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	6839      	ldr	r1, [r7, #0]
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 f8d6 	bl	80054a8 <I2C_IsErrorOccurred>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e041      	b.n	800538a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800530c:	d02d      	beq.n	800536a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800530e:	f7fe fd53 	bl	8003db8 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	429a      	cmp	r2, r3
 800531c:	d302      	bcc.n	8005324 <I2C_WaitOnFlagUntilTimeout+0x44>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d122      	bne.n	800536a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699a      	ldr	r2, [r3, #24]
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	4013      	ands	r3, r2
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	429a      	cmp	r2, r3
 8005332:	bf0c      	ite	eq
 8005334:	2301      	moveq	r3, #1
 8005336:	2300      	movne	r3, #0
 8005338:	b2db      	uxtb	r3, r3
 800533a:	461a      	mov	r2, r3
 800533c:	79fb      	ldrb	r3, [r7, #7]
 800533e:	429a      	cmp	r2, r3
 8005340:	d113      	bne.n	800536a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005346:	f043 0220 	orr.w	r2, r3, #32
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2220      	movs	r2, #32
 8005352:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e00f      	b.n	800538a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	699a      	ldr	r2, [r3, #24]
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4013      	ands	r3, r2
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	429a      	cmp	r2, r3
 8005378:	bf0c      	ite	eq
 800537a:	2301      	moveq	r3, #1
 800537c:	2300      	movne	r3, #0
 800537e:	b2db      	uxtb	r3, r3
 8005380:	461a      	mov	r2, r3
 8005382:	79fb      	ldrb	r3, [r7, #7]
 8005384:	429a      	cmp	r2, r3
 8005386:	d0b4      	beq.n	80052f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b084      	sub	sp, #16
 8005396:	af00      	add	r7, sp, #0
 8005398:	60f8      	str	r0, [r7, #12]
 800539a:	60b9      	str	r1, [r7, #8]
 800539c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800539e:	e033      	b.n	8005408 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	68b9      	ldr	r1, [r7, #8]
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 f87f 	bl	80054a8 <I2C_IsErrorOccurred>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e031      	b.n	8005418 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053ba:	d025      	beq.n	8005408 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053bc:	f7fe fcfc 	bl	8003db8 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d302      	bcc.n	80053d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d11a      	bne.n	8005408 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d013      	beq.n	8005408 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053e4:	f043 0220 	orr.w	r2, r3, #32
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e007      	b.n	8005418 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b02      	cmp	r3, #2
 8005414:	d1c4      	bne.n	80053a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800542c:	e02f      	b.n	800548e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	68b9      	ldr	r1, [r7, #8]
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f000 f838 	bl	80054a8 <I2C_IsErrorOccurred>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e02d      	b.n	800549e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005442:	f7fe fcb9 	bl	8003db8 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	429a      	cmp	r2, r3
 8005450:	d302      	bcc.n	8005458 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d11a      	bne.n	800548e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	f003 0320 	and.w	r3, r3, #32
 8005462:	2b20      	cmp	r3, #32
 8005464:	d013      	beq.n	800548e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546a:	f043 0220 	orr.w	r2, r3, #32
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2220      	movs	r2, #32
 8005476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e007      	b.n	800549e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	f003 0320 	and.w	r3, r3, #32
 8005498:	2b20      	cmp	r3, #32
 800549a:	d1c8      	bne.n	800542e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08a      	sub	sp, #40	@ 0x28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80054c2:	2300      	movs	r3, #0
 80054c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	f003 0310 	and.w	r3, r3, #16
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d068      	beq.n	80055a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2210      	movs	r2, #16
 80054da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80054dc:	e049      	b.n	8005572 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054e4:	d045      	beq.n	8005572 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80054e6:	f7fe fc67 	bl	8003db8 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d302      	bcc.n	80054fc <I2C_IsErrorOccurred+0x54>
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d13a      	bne.n	8005572 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005506:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800550e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800551a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800551e:	d121      	bne.n	8005564 <I2C_IsErrorOccurred+0xbc>
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005526:	d01d      	beq.n	8005564 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005528:	7cfb      	ldrb	r3, [r7, #19]
 800552a:	2b20      	cmp	r3, #32
 800552c:	d01a      	beq.n	8005564 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800553c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800553e:	f7fe fc3b 	bl	8003db8 <HAL_GetTick>
 8005542:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005544:	e00e      	b.n	8005564 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005546:	f7fe fc37 	bl	8003db8 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b19      	cmp	r3, #25
 8005552:	d907      	bls.n	8005564 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	f043 0320 	orr.w	r3, r3, #32
 800555a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005562:	e006      	b.n	8005572 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	f003 0320 	and.w	r3, r3, #32
 800556e:	2b20      	cmp	r3, #32
 8005570:	d1e9      	bne.n	8005546 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	f003 0320 	and.w	r3, r3, #32
 800557c:	2b20      	cmp	r3, #32
 800557e:	d003      	beq.n	8005588 <I2C_IsErrorOccurred+0xe0>
 8005580:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005584:	2b00      	cmp	r3, #0
 8005586:	d0aa      	beq.n	80054de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005588:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800558c:	2b00      	cmp	r3, #0
 800558e:	d103      	bne.n	8005598 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2220      	movs	r2, #32
 8005596:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	f043 0304 	orr.w	r3, r3, #4
 800559e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00b      	beq.n	80055d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	f043 0301 	orr.w	r3, r3, #1
 80055be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80055c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00b      	beq.n	80055f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	f043 0308 	orr.w	r3, r3, #8
 80055e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80055ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00b      	beq.n	8005614 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80055fc:	6a3b      	ldr	r3, [r7, #32]
 80055fe:	f043 0302 	orr.w	r3, r3, #2
 8005602:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800560c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005614:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005618:	2b00      	cmp	r3, #0
 800561a:	d01c      	beq.n	8005656 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f7ff fe3b 	bl	8005298 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6859      	ldr	r1, [r3, #4]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	4b0d      	ldr	r3, [pc, #52]	@ (8005664 <I2C_IsErrorOccurred+0x1bc>)
 800562e:	400b      	ands	r3, r1
 8005630:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005636:	6a3b      	ldr	r3, [r7, #32]
 8005638:	431a      	orrs	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2220      	movs	r2, #32
 8005642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005656:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800565a:	4618      	mov	r0, r3
 800565c:	3728      	adds	r7, #40	@ 0x28
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	fe00e800 	.word	0xfe00e800

08005668 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	607b      	str	r3, [r7, #4]
 8005672:	460b      	mov	r3, r1
 8005674:	817b      	strh	r3, [r7, #10]
 8005676:	4613      	mov	r3, r2
 8005678:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800567a:	897b      	ldrh	r3, [r7, #10]
 800567c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005680:	7a7b      	ldrb	r3, [r7, #9]
 8005682:	041b      	lsls	r3, r3, #16
 8005684:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005688:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	4313      	orrs	r3, r2
 8005692:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005696:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	0d5b      	lsrs	r3, r3, #21
 80056a2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80056a6:	4b08      	ldr	r3, [pc, #32]	@ (80056c8 <I2C_TransferConfig+0x60>)
 80056a8:	430b      	orrs	r3, r1
 80056aa:	43db      	mvns	r3, r3
 80056ac:	ea02 0103 	and.w	r1, r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80056ba:	bf00      	nop
 80056bc:	371c      	adds	r7, #28
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	03ff63ff 	.word	0x03ff63ff

080056cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b20      	cmp	r3, #32
 80056e0:	d138      	bne.n	8005754 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d101      	bne.n	80056f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80056ec:	2302      	movs	r3, #2
 80056ee:	e032      	b.n	8005756 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2224      	movs	r2, #36	@ 0x24
 80056fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f022 0201 	bic.w	r2, r2, #1
 800570e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800571e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6819      	ldr	r1, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 0201 	orr.w	r2, r2, #1
 800573e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2220      	movs	r2, #32
 8005744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005750:	2300      	movs	r3, #0
 8005752:	e000      	b.n	8005756 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005754:	2302      	movs	r3, #2
  }
}
 8005756:	4618      	mov	r0, r3
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005762:	b480      	push	{r7}
 8005764:	b085      	sub	sp, #20
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b20      	cmp	r3, #32
 8005776:	d139      	bne.n	80057ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800577e:	2b01      	cmp	r3, #1
 8005780:	d101      	bne.n	8005786 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005782:	2302      	movs	r3, #2
 8005784:	e033      	b.n	80057ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2224      	movs	r2, #36	@ 0x24
 8005792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0201 	bic.w	r2, r2, #1
 80057a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80057b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	021b      	lsls	r3, r3, #8
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	4313      	orrs	r3, r2
 80057be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0201 	orr.w	r2, r2, #1
 80057d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2220      	movs	r2, #32
 80057dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80057e8:	2300      	movs	r3, #0
 80057ea:	e000      	b.n	80057ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80057ec:	2302      	movs	r3, #2
  }
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b084      	sub	sp, #16
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e041      	b.n	8005890 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8005814:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f245 5255 	movw	r2, #21845	@ 0x5555
 800581e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6852      	ldr	r2, [r2, #4]
 8005828:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	6892      	ldr	r2, [r2, #8]
 8005832:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005834:	f7fe fac0 	bl	8003db8 <HAL_GetTick>
 8005838:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800583a:	e00f      	b.n	800585c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800583c:	f7fe fabc 	bl	8003db8 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b31      	cmp	r3, #49	@ 0x31
 8005848:	d908      	bls.n	800585c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f003 0307 	and.w	r3, r3, #7
 8005854:	2b00      	cmp	r3, #0
 8005856:	d001      	beq.n	800585c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e019      	b.n	8005890 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1e8      	bne.n	800583c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	691a      	ldr	r2, [r3, #16]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	429a      	cmp	r2, r3
 8005876:	d005      	beq.n	8005884 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	68d2      	ldr	r2, [r2, #12]
 8005880:	611a      	str	r2, [r3, #16]
 8005882:	e004      	b.n	800588e <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800588c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80058a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d141      	bne.n	800594a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80058c6:	4b4b      	ldr	r3, [pc, #300]	@ (80059f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80058ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058d2:	d131      	bne.n	8005938 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058d4:	4b47      	ldr	r3, [pc, #284]	@ (80059f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058da:	4a46      	ldr	r2, [pc, #280]	@ (80059f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80058e4:	4b43      	ldr	r3, [pc, #268]	@ (80059f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80058ec:	4a41      	ldr	r2, [pc, #260]	@ (80059f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80058f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80058f4:	4b40      	ldr	r3, [pc, #256]	@ (80059f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2232      	movs	r2, #50	@ 0x32
 80058fa:	fb02 f303 	mul.w	r3, r2, r3
 80058fe:	4a3f      	ldr	r2, [pc, #252]	@ (80059fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005900:	fba2 2303 	umull	r2, r3, r2, r3
 8005904:	0c9b      	lsrs	r3, r3, #18
 8005906:	3301      	adds	r3, #1
 8005908:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800590a:	e002      	b.n	8005912 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3b01      	subs	r3, #1
 8005910:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005912:	4b38      	ldr	r3, [pc, #224]	@ (80059f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800591a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800591e:	d102      	bne.n	8005926 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1f2      	bne.n	800590c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005926:	4b33      	ldr	r3, [pc, #204]	@ (80059f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800592e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005932:	d158      	bne.n	80059e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e057      	b.n	80059e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005938:	4b2e      	ldr	r3, [pc, #184]	@ (80059f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800593a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800593e:	4a2d      	ldr	r2, [pc, #180]	@ (80059f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005940:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005944:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005948:	e04d      	b.n	80059e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005950:	d141      	bne.n	80059d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005952:	4b28      	ldr	r3, [pc, #160]	@ (80059f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800595a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800595e:	d131      	bne.n	80059c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005960:	4b24      	ldr	r3, [pc, #144]	@ (80059f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005962:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005966:	4a23      	ldr	r2, [pc, #140]	@ (80059f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800596c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005970:	4b20      	ldr	r3, [pc, #128]	@ (80059f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005978:	4a1e      	ldr	r2, [pc, #120]	@ (80059f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800597a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800597e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005980:	4b1d      	ldr	r3, [pc, #116]	@ (80059f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2232      	movs	r2, #50	@ 0x32
 8005986:	fb02 f303 	mul.w	r3, r2, r3
 800598a:	4a1c      	ldr	r2, [pc, #112]	@ (80059fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800598c:	fba2 2303 	umull	r2, r3, r2, r3
 8005990:	0c9b      	lsrs	r3, r3, #18
 8005992:	3301      	adds	r3, #1
 8005994:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005996:	e002      	b.n	800599e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	3b01      	subs	r3, #1
 800599c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800599e:	4b15      	ldr	r3, [pc, #84]	@ (80059f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059aa:	d102      	bne.n	80059b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1f2      	bne.n	8005998 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80059b2:	4b10      	ldr	r3, [pc, #64]	@ (80059f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059be:	d112      	bne.n	80059e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e011      	b.n	80059e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80059c4:	4b0b      	ldr	r3, [pc, #44]	@ (80059f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059ca:	4a0a      	ldr	r2, [pc, #40]	@ (80059f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80059d4:	e007      	b.n	80059e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80059d6:	4b07      	ldr	r3, [pc, #28]	@ (80059f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80059de:	4a05      	ldr	r2, [pc, #20]	@ (80059f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80059e4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	40007000 	.word	0x40007000
 80059f8:	20000004 	.word	0x20000004
 80059fc:	431bde83 	.word	0x431bde83

08005a00 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005a00:	b480      	push	{r7}
 8005a02:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005a04:	4b05      	ldr	r3, [pc, #20]	@ (8005a1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	4a04      	ldr	r2, [pc, #16]	@ (8005a1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005a0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a0e:	6093      	str	r3, [r2, #8]
}
 8005a10:	bf00      	nop
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	40007000 	.word	0x40007000

08005a20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b088      	sub	sp, #32
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e2fe      	b.n	8006030 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d075      	beq.n	8005b2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a3e:	4b97      	ldr	r3, [pc, #604]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f003 030c 	and.w	r3, r3, #12
 8005a46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a48:	4b94      	ldr	r3, [pc, #592]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f003 0303 	and.w	r3, r3, #3
 8005a50:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	2b0c      	cmp	r3, #12
 8005a56:	d102      	bne.n	8005a5e <HAL_RCC_OscConfig+0x3e>
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d002      	beq.n	8005a64 <HAL_RCC_OscConfig+0x44>
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	d10b      	bne.n	8005a7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a64:	4b8d      	ldr	r3, [pc, #564]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d05b      	beq.n	8005b28 <HAL_RCC_OscConfig+0x108>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d157      	bne.n	8005b28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e2d9      	b.n	8006030 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a84:	d106      	bne.n	8005a94 <HAL_RCC_OscConfig+0x74>
 8005a86:	4b85      	ldr	r3, [pc, #532]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a84      	ldr	r2, [pc, #528]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	e01d      	b.n	8005ad0 <HAL_RCC_OscConfig+0xb0>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a9c:	d10c      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x98>
 8005a9e:	4b7f      	ldr	r3, [pc, #508]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a7e      	ldr	r2, [pc, #504]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005aa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005aa8:	6013      	str	r3, [r2, #0]
 8005aaa:	4b7c      	ldr	r3, [pc, #496]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a7b      	ldr	r2, [pc, #492]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	e00b      	b.n	8005ad0 <HAL_RCC_OscConfig+0xb0>
 8005ab8:	4b78      	ldr	r3, [pc, #480]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a77      	ldr	r2, [pc, #476]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005abe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ac2:	6013      	str	r3, [r2, #0]
 8005ac4:	4b75      	ldr	r3, [pc, #468]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a74      	ldr	r2, [pc, #464]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005aca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d013      	beq.n	8005b00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad8:	f7fe f96e 	bl	8003db8 <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ae0:	f7fe f96a 	bl	8003db8 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b64      	cmp	r3, #100	@ 0x64
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e29e      	b.n	8006030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005af2:	4b6a      	ldr	r3, [pc, #424]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d0f0      	beq.n	8005ae0 <HAL_RCC_OscConfig+0xc0>
 8005afe:	e014      	b.n	8005b2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b00:	f7fe f95a 	bl	8003db8 <HAL_GetTick>
 8005b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b06:	e008      	b.n	8005b1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b08:	f7fe f956 	bl	8003db8 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b64      	cmp	r3, #100	@ 0x64
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e28a      	b.n	8006030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b1a:	4b60      	ldr	r3, [pc, #384]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1f0      	bne.n	8005b08 <HAL_RCC_OscConfig+0xe8>
 8005b26:	e000      	b.n	8005b2a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d075      	beq.n	8005c22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b36:	4b59      	ldr	r3, [pc, #356]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f003 030c 	and.w	r3, r3, #12
 8005b3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b40:	4b56      	ldr	r3, [pc, #344]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f003 0303 	and.w	r3, r3, #3
 8005b48:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	2b0c      	cmp	r3, #12
 8005b4e:	d102      	bne.n	8005b56 <HAL_RCC_OscConfig+0x136>
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d002      	beq.n	8005b5c <HAL_RCC_OscConfig+0x13c>
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	2b04      	cmp	r3, #4
 8005b5a:	d11f      	bne.n	8005b9c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b5c:	4b4f      	ldr	r3, [pc, #316]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d005      	beq.n	8005b74 <HAL_RCC_OscConfig+0x154>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e25d      	b.n	8006030 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b74:	4b49      	ldr	r3, [pc, #292]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	061b      	lsls	r3, r3, #24
 8005b82:	4946      	ldr	r1, [pc, #280]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005b88:	4b45      	ldr	r3, [pc, #276]	@ (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7fd fd21 	bl	80035d4 <HAL_InitTick>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d043      	beq.n	8005c20 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e249      	b.n	8006030 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d023      	beq.n	8005bec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ba4:	4b3d      	ldr	r3, [pc, #244]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a3c      	ldr	r2, [pc, #240]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005baa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb0:	f7fe f902 	bl	8003db8 <HAL_GetTick>
 8005bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bb6:	e008      	b.n	8005bca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bb8:	f7fe f8fe 	bl	8003db8 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d901      	bls.n	8005bca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e232      	b.n	8006030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bca:	4b34      	ldr	r3, [pc, #208]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d0f0      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bd6:	4b31      	ldr	r3, [pc, #196]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	061b      	lsls	r3, r3, #24
 8005be4:	492d      	ldr	r1, [pc, #180]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	604b      	str	r3, [r1, #4]
 8005bea:	e01a      	b.n	8005c22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bec:	4b2b      	ldr	r3, [pc, #172]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a2a      	ldr	r2, [pc, #168]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005bf2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf8:	f7fe f8de 	bl	8003db8 <HAL_GetTick>
 8005bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005bfe:	e008      	b.n	8005c12 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c00:	f7fe f8da 	bl	8003db8 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e20e      	b.n	8006030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c12:	4b22      	ldr	r3, [pc, #136]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1f0      	bne.n	8005c00 <HAL_RCC_OscConfig+0x1e0>
 8005c1e:	e000      	b.n	8005c22 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0308 	and.w	r3, r3, #8
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d041      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d01c      	beq.n	8005c70 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c36:	4b19      	ldr	r3, [pc, #100]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c3c:	4a17      	ldr	r2, [pc, #92]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005c3e:	f043 0301 	orr.w	r3, r3, #1
 8005c42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c46:	f7fe f8b7 	bl	8003db8 <HAL_GetTick>
 8005c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c4c:	e008      	b.n	8005c60 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c4e:	f7fe f8b3 	bl	8003db8 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d901      	bls.n	8005c60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e1e7      	b.n	8006030 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c60:	4b0e      	ldr	r3, [pc, #56]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d0ef      	beq.n	8005c4e <HAL_RCC_OscConfig+0x22e>
 8005c6e:	e020      	b.n	8005cb2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c70:	4b0a      	ldr	r3, [pc, #40]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c76:	4a09      	ldr	r2, [pc, #36]	@ (8005c9c <HAL_RCC_OscConfig+0x27c>)
 8005c78:	f023 0301 	bic.w	r3, r3, #1
 8005c7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c80:	f7fe f89a 	bl	8003db8 <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c86:	e00d      	b.n	8005ca4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c88:	f7fe f896 	bl	8003db8 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d906      	bls.n	8005ca4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e1ca      	b.n	8006030 <HAL_RCC_OscConfig+0x610>
 8005c9a:	bf00      	nop
 8005c9c:	40021000 	.word	0x40021000
 8005ca0:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ca4:	4b8c      	ldr	r3, [pc, #560]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b8>)
 8005ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1ea      	bne.n	8005c88 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0304 	and.w	r3, r3, #4
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 80a6 	beq.w	8005e0c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005cc4:	4b84      	ldr	r3, [pc, #528]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b8>)
 8005cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x2b4>
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e000      	b.n	8005cd6 <HAL_RCC_OscConfig+0x2b6>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00d      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cda:	4b7f      	ldr	r3, [pc, #508]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b8>)
 8005cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cde:	4a7e      	ldr	r2, [pc, #504]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b8>)
 8005ce0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ce4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ce6:	4b7c      	ldr	r3, [pc, #496]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b8>)
 8005ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cf6:	4b79      	ldr	r3, [pc, #484]	@ (8005edc <HAL_RCC_OscConfig+0x4bc>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d118      	bne.n	8005d34 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d02:	4b76      	ldr	r3, [pc, #472]	@ (8005edc <HAL_RCC_OscConfig+0x4bc>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a75      	ldr	r2, [pc, #468]	@ (8005edc <HAL_RCC_OscConfig+0x4bc>)
 8005d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d0e:	f7fe f853 	bl	8003db8 <HAL_GetTick>
 8005d12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d14:	e008      	b.n	8005d28 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d16:	f7fe f84f 	bl	8003db8 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d901      	bls.n	8005d28 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e183      	b.n	8006030 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d28:	4b6c      	ldr	r3, [pc, #432]	@ (8005edc <HAL_RCC_OscConfig+0x4bc>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d0f0      	beq.n	8005d16 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d108      	bne.n	8005d4e <HAL_RCC_OscConfig+0x32e>
 8005d3c:	4b66      	ldr	r3, [pc, #408]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b8>)
 8005d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d42:	4a65      	ldr	r2, [pc, #404]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b8>)
 8005d44:	f043 0301 	orr.w	r3, r3, #1
 8005d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005d4c:	e024      	b.n	8005d98 <HAL_RCC_OscConfig+0x378>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	2b05      	cmp	r3, #5
 8005d54:	d110      	bne.n	8005d78 <HAL_RCC_OscConfig+0x358>
 8005d56:	4b60      	ldr	r3, [pc, #384]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b8>)
 8005d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d5c:	4a5e      	ldr	r2, [pc, #376]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b8>)
 8005d5e:	f043 0304 	orr.w	r3, r3, #4
 8005d62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005d66:	4b5c      	ldr	r3, [pc, #368]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b8>)
 8005d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d6c:	4a5a      	ldr	r2, [pc, #360]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b8>)
 8005d6e:	f043 0301 	orr.w	r3, r3, #1
 8005d72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005d76:	e00f      	b.n	8005d98 <HAL_RCC_OscConfig+0x378>
 8005d78:	4b57      	ldr	r3, [pc, #348]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b8>)
 8005d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d7e:	4a56      	ldr	r2, [pc, #344]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b8>)
 8005d80:	f023 0301 	bic.w	r3, r3, #1
 8005d84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005d88:	4b53      	ldr	r3, [pc, #332]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b8>)
 8005d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d8e:	4a52      	ldr	r2, [pc, #328]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b8>)
 8005d90:	f023 0304 	bic.w	r3, r3, #4
 8005d94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d016      	beq.n	8005dce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005da0:	f7fe f80a 	bl	8003db8 <HAL_GetTick>
 8005da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005da6:	e00a      	b.n	8005dbe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005da8:	f7fe f806 	bl	8003db8 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d901      	bls.n	8005dbe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e138      	b.n	8006030 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dbe:	4b46      	ldr	r3, [pc, #280]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b8>)
 8005dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d0ed      	beq.n	8005da8 <HAL_RCC_OscConfig+0x388>
 8005dcc:	e015      	b.n	8005dfa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dce:	f7fd fff3 	bl	8003db8 <HAL_GetTick>
 8005dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005dd4:	e00a      	b.n	8005dec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dd6:	f7fd ffef 	bl	8003db8 <HAL_GetTick>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d901      	bls.n	8005dec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e121      	b.n	8006030 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005dec:	4b3a      	ldr	r3, [pc, #232]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b8>)
 8005dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1ed      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005dfa:	7ffb      	ldrb	r3, [r7, #31]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d105      	bne.n	8005e0c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e00:	4b35      	ldr	r3, [pc, #212]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b8>)
 8005e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e04:	4a34      	ldr	r2, [pc, #208]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b8>)
 8005e06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e0a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0320 	and.w	r3, r3, #32
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d03c      	beq.n	8005e92 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d01c      	beq.n	8005e5a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e20:	4b2d      	ldr	r3, [pc, #180]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b8>)
 8005e22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e26:	4a2c      	ldr	r2, [pc, #176]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b8>)
 8005e28:	f043 0301 	orr.w	r3, r3, #1
 8005e2c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e30:	f7fd ffc2 	bl	8003db8 <HAL_GetTick>
 8005e34:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e38:	f7fd ffbe 	bl	8003db8 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e0f2      	b.n	8006030 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e4a:	4b23      	ldr	r3, [pc, #140]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b8>)
 8005e4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e50:	f003 0302 	and.w	r3, r3, #2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d0ef      	beq.n	8005e38 <HAL_RCC_OscConfig+0x418>
 8005e58:	e01b      	b.n	8005e92 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b8>)
 8005e5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e60:	4a1d      	ldr	r2, [pc, #116]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b8>)
 8005e62:	f023 0301 	bic.w	r3, r3, #1
 8005e66:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e6a:	f7fd ffa5 	bl	8003db8 <HAL_GetTick>
 8005e6e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e70:	e008      	b.n	8005e84 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e72:	f7fd ffa1 	bl	8003db8 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d901      	bls.n	8005e84 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e0d5      	b.n	8006030 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e84:	4b14      	ldr	r3, [pc, #80]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b8>)
 8005e86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1ef      	bne.n	8005e72 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	69db      	ldr	r3, [r3, #28]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f000 80c9 	beq.w	800602e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b8>)
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f003 030c 	and.w	r3, r3, #12
 8005ea4:	2b0c      	cmp	r3, #12
 8005ea6:	f000 8083 	beq.w	8005fb0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d15e      	bne.n	8005f70 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eb2:	4b09      	ldr	r3, [pc, #36]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b8>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a08      	ldr	r2, [pc, #32]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b8>)
 8005eb8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ebe:	f7fd ff7b 	bl	8003db8 <HAL_GetTick>
 8005ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ec4:	e00c      	b.n	8005ee0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ec6:	f7fd ff77 	bl	8003db8 <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d905      	bls.n	8005ee0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e0ab      	b.n	8006030 <HAL_RCC_OscConfig+0x610>
 8005ed8:	40021000 	.word	0x40021000
 8005edc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ee0:	4b55      	ldr	r3, [pc, #340]	@ (8006038 <HAL_RCC_OscConfig+0x618>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1ec      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005eec:	4b52      	ldr	r3, [pc, #328]	@ (8006038 <HAL_RCC_OscConfig+0x618>)
 8005eee:	68da      	ldr	r2, [r3, #12]
 8005ef0:	4b52      	ldr	r3, [pc, #328]	@ (800603c <HAL_RCC_OscConfig+0x61c>)
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6a11      	ldr	r1, [r2, #32]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005efc:	3a01      	subs	r2, #1
 8005efe:	0112      	lsls	r2, r2, #4
 8005f00:	4311      	orrs	r1, r2
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005f06:	0212      	lsls	r2, r2, #8
 8005f08:	4311      	orrs	r1, r2
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005f0e:	0852      	lsrs	r2, r2, #1
 8005f10:	3a01      	subs	r2, #1
 8005f12:	0552      	lsls	r2, r2, #21
 8005f14:	4311      	orrs	r1, r2
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005f1a:	0852      	lsrs	r2, r2, #1
 8005f1c:	3a01      	subs	r2, #1
 8005f1e:	0652      	lsls	r2, r2, #25
 8005f20:	4311      	orrs	r1, r2
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005f26:	06d2      	lsls	r2, r2, #27
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	4943      	ldr	r1, [pc, #268]	@ (8006038 <HAL_RCC_OscConfig+0x618>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f30:	4b41      	ldr	r3, [pc, #260]	@ (8006038 <HAL_RCC_OscConfig+0x618>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a40      	ldr	r2, [pc, #256]	@ (8006038 <HAL_RCC_OscConfig+0x618>)
 8005f36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f3a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f3c:	4b3e      	ldr	r3, [pc, #248]	@ (8006038 <HAL_RCC_OscConfig+0x618>)
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	4a3d      	ldr	r2, [pc, #244]	@ (8006038 <HAL_RCC_OscConfig+0x618>)
 8005f42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f46:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f48:	f7fd ff36 	bl	8003db8 <HAL_GetTick>
 8005f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f4e:	e008      	b.n	8005f62 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f50:	f7fd ff32 	bl	8003db8 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d901      	bls.n	8005f62 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e066      	b.n	8006030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f62:	4b35      	ldr	r3, [pc, #212]	@ (8006038 <HAL_RCC_OscConfig+0x618>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d0f0      	beq.n	8005f50 <HAL_RCC_OscConfig+0x530>
 8005f6e:	e05e      	b.n	800602e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f70:	4b31      	ldr	r3, [pc, #196]	@ (8006038 <HAL_RCC_OscConfig+0x618>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a30      	ldr	r2, [pc, #192]	@ (8006038 <HAL_RCC_OscConfig+0x618>)
 8005f76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f7c:	f7fd ff1c 	bl	8003db8 <HAL_GetTick>
 8005f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f82:	e008      	b.n	8005f96 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f84:	f7fd ff18 	bl	8003db8 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e04c      	b.n	8006030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f96:	4b28      	ldr	r3, [pc, #160]	@ (8006038 <HAL_RCC_OscConfig+0x618>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1f0      	bne.n	8005f84 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005fa2:	4b25      	ldr	r3, [pc, #148]	@ (8006038 <HAL_RCC_OscConfig+0x618>)
 8005fa4:	68da      	ldr	r2, [r3, #12]
 8005fa6:	4924      	ldr	r1, [pc, #144]	@ (8006038 <HAL_RCC_OscConfig+0x618>)
 8005fa8:	4b25      	ldr	r3, [pc, #148]	@ (8006040 <HAL_RCC_OscConfig+0x620>)
 8005faa:	4013      	ands	r3, r2
 8005fac:	60cb      	str	r3, [r1, #12]
 8005fae:	e03e      	b.n	800602e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	69db      	ldr	r3, [r3, #28]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d101      	bne.n	8005fbc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e039      	b.n	8006030 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8006038 <HAL_RCC_OscConfig+0x618>)
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f003 0203 	and.w	r2, r3, #3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d12c      	bne.n	800602a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d123      	bne.n	800602a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d11b      	bne.n	800602a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d113      	bne.n	800602a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800600c:	085b      	lsrs	r3, r3, #1
 800600e:	3b01      	subs	r3, #1
 8006010:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006012:	429a      	cmp	r2, r3
 8006014:	d109      	bne.n	800602a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006020:	085b      	lsrs	r3, r3, #1
 8006022:	3b01      	subs	r3, #1
 8006024:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006026:	429a      	cmp	r2, r3
 8006028:	d001      	beq.n	800602e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e000      	b.n	8006030 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3720      	adds	r7, #32
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	40021000 	.word	0x40021000
 800603c:	019f800c 	.word	0x019f800c
 8006040:	feeefffc 	.word	0xfeeefffc

08006044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800604e:	2300      	movs	r3, #0
 8006050:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d101      	bne.n	800605c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e11e      	b.n	800629a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800605c:	4b91      	ldr	r3, [pc, #580]	@ (80062a4 <HAL_RCC_ClockConfig+0x260>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 030f 	and.w	r3, r3, #15
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	429a      	cmp	r2, r3
 8006068:	d910      	bls.n	800608c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800606a:	4b8e      	ldr	r3, [pc, #568]	@ (80062a4 <HAL_RCC_ClockConfig+0x260>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f023 020f 	bic.w	r2, r3, #15
 8006072:	498c      	ldr	r1, [pc, #560]	@ (80062a4 <HAL_RCC_ClockConfig+0x260>)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	4313      	orrs	r3, r2
 8006078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800607a:	4b8a      	ldr	r3, [pc, #552]	@ (80062a4 <HAL_RCC_ClockConfig+0x260>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 030f 	and.w	r3, r3, #15
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	429a      	cmp	r2, r3
 8006086:	d001      	beq.n	800608c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e106      	b.n	800629a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b00      	cmp	r3, #0
 8006096:	d073      	beq.n	8006180 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	2b03      	cmp	r3, #3
 800609e:	d129      	bne.n	80060f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060a0:	4b81      	ldr	r3, [pc, #516]	@ (80062a8 <HAL_RCC_ClockConfig+0x264>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e0f4      	b.n	800629a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80060b0:	f000 f9d0 	bl	8006454 <RCC_GetSysClockFreqFromPLLSource>
 80060b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	4a7c      	ldr	r2, [pc, #496]	@ (80062ac <HAL_RCC_ClockConfig+0x268>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d93f      	bls.n	800613e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80060be:	4b7a      	ldr	r3, [pc, #488]	@ (80062a8 <HAL_RCC_ClockConfig+0x264>)
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d009      	beq.n	80060de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d033      	beq.n	800613e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d12f      	bne.n	800613e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80060de:	4b72      	ldr	r3, [pc, #456]	@ (80062a8 <HAL_RCC_ClockConfig+0x264>)
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060e6:	4a70      	ldr	r2, [pc, #448]	@ (80062a8 <HAL_RCC_ClockConfig+0x264>)
 80060e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80060ee:	2380      	movs	r3, #128	@ 0x80
 80060f0:	617b      	str	r3, [r7, #20]
 80060f2:	e024      	b.n	800613e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d107      	bne.n	800610c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060fc:	4b6a      	ldr	r3, [pc, #424]	@ (80062a8 <HAL_RCC_ClockConfig+0x264>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d109      	bne.n	800611c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e0c6      	b.n	800629a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800610c:	4b66      	ldr	r3, [pc, #408]	@ (80062a8 <HAL_RCC_ClockConfig+0x264>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006114:	2b00      	cmp	r3, #0
 8006116:	d101      	bne.n	800611c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e0be      	b.n	800629a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800611c:	f000 f8ce 	bl	80062bc <HAL_RCC_GetSysClockFreq>
 8006120:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	4a61      	ldr	r2, [pc, #388]	@ (80062ac <HAL_RCC_ClockConfig+0x268>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d909      	bls.n	800613e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800612a:	4b5f      	ldr	r3, [pc, #380]	@ (80062a8 <HAL_RCC_ClockConfig+0x264>)
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006132:	4a5d      	ldr	r2, [pc, #372]	@ (80062a8 <HAL_RCC_ClockConfig+0x264>)
 8006134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006138:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800613a:	2380      	movs	r3, #128	@ 0x80
 800613c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800613e:	4b5a      	ldr	r3, [pc, #360]	@ (80062a8 <HAL_RCC_ClockConfig+0x264>)
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f023 0203 	bic.w	r2, r3, #3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	4957      	ldr	r1, [pc, #348]	@ (80062a8 <HAL_RCC_ClockConfig+0x264>)
 800614c:	4313      	orrs	r3, r2
 800614e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006150:	f7fd fe32 	bl	8003db8 <HAL_GetTick>
 8006154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006156:	e00a      	b.n	800616e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006158:	f7fd fe2e 	bl	8003db8 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006166:	4293      	cmp	r3, r2
 8006168:	d901      	bls.n	800616e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e095      	b.n	800629a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800616e:	4b4e      	ldr	r3, [pc, #312]	@ (80062a8 <HAL_RCC_ClockConfig+0x264>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f003 020c 	and.w	r2, r3, #12
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	429a      	cmp	r2, r3
 800617e:	d1eb      	bne.n	8006158 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d023      	beq.n	80061d4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0304 	and.w	r3, r3, #4
 8006194:	2b00      	cmp	r3, #0
 8006196:	d005      	beq.n	80061a4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006198:	4b43      	ldr	r3, [pc, #268]	@ (80062a8 <HAL_RCC_ClockConfig+0x264>)
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	4a42      	ldr	r2, [pc, #264]	@ (80062a8 <HAL_RCC_ClockConfig+0x264>)
 800619e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80061a2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0308 	and.w	r3, r3, #8
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d007      	beq.n	80061c0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80061b0:	4b3d      	ldr	r3, [pc, #244]	@ (80062a8 <HAL_RCC_ClockConfig+0x264>)
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80061b8:	4a3b      	ldr	r2, [pc, #236]	@ (80062a8 <HAL_RCC_ClockConfig+0x264>)
 80061ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80061be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061c0:	4b39      	ldr	r3, [pc, #228]	@ (80062a8 <HAL_RCC_ClockConfig+0x264>)
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	4936      	ldr	r1, [pc, #216]	@ (80062a8 <HAL_RCC_ClockConfig+0x264>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	608b      	str	r3, [r1, #8]
 80061d2:	e008      	b.n	80061e6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	2b80      	cmp	r3, #128	@ 0x80
 80061d8:	d105      	bne.n	80061e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80061da:	4b33      	ldr	r3, [pc, #204]	@ (80062a8 <HAL_RCC_ClockConfig+0x264>)
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	4a32      	ldr	r2, [pc, #200]	@ (80062a8 <HAL_RCC_ClockConfig+0x264>)
 80061e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061e4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061e6:	4b2f      	ldr	r3, [pc, #188]	@ (80062a4 <HAL_RCC_ClockConfig+0x260>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 030f 	and.w	r3, r3, #15
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d21d      	bcs.n	8006230 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061f4:	4b2b      	ldr	r3, [pc, #172]	@ (80062a4 <HAL_RCC_ClockConfig+0x260>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f023 020f 	bic.w	r2, r3, #15
 80061fc:	4929      	ldr	r1, [pc, #164]	@ (80062a4 <HAL_RCC_ClockConfig+0x260>)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	4313      	orrs	r3, r2
 8006202:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006204:	f7fd fdd8 	bl	8003db8 <HAL_GetTick>
 8006208:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800620a:	e00a      	b.n	8006222 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800620c:	f7fd fdd4 	bl	8003db8 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800621a:	4293      	cmp	r3, r2
 800621c:	d901      	bls.n	8006222 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e03b      	b.n	800629a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006222:	4b20      	ldr	r3, [pc, #128]	@ (80062a4 <HAL_RCC_ClockConfig+0x260>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 030f 	and.w	r3, r3, #15
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	429a      	cmp	r2, r3
 800622e:	d1ed      	bne.n	800620c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b00      	cmp	r3, #0
 800623a:	d008      	beq.n	800624e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800623c:	4b1a      	ldr	r3, [pc, #104]	@ (80062a8 <HAL_RCC_ClockConfig+0x264>)
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	4917      	ldr	r1, [pc, #92]	@ (80062a8 <HAL_RCC_ClockConfig+0x264>)
 800624a:	4313      	orrs	r3, r2
 800624c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0308 	and.w	r3, r3, #8
 8006256:	2b00      	cmp	r3, #0
 8006258:	d009      	beq.n	800626e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800625a:	4b13      	ldr	r3, [pc, #76]	@ (80062a8 <HAL_RCC_ClockConfig+0x264>)
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	00db      	lsls	r3, r3, #3
 8006268:	490f      	ldr	r1, [pc, #60]	@ (80062a8 <HAL_RCC_ClockConfig+0x264>)
 800626a:	4313      	orrs	r3, r2
 800626c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800626e:	f000 f825 	bl	80062bc <HAL_RCC_GetSysClockFreq>
 8006272:	4602      	mov	r2, r0
 8006274:	4b0c      	ldr	r3, [pc, #48]	@ (80062a8 <HAL_RCC_ClockConfig+0x264>)
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	091b      	lsrs	r3, r3, #4
 800627a:	f003 030f 	and.w	r3, r3, #15
 800627e:	490c      	ldr	r1, [pc, #48]	@ (80062b0 <HAL_RCC_ClockConfig+0x26c>)
 8006280:	5ccb      	ldrb	r3, [r1, r3]
 8006282:	f003 031f 	and.w	r3, r3, #31
 8006286:	fa22 f303 	lsr.w	r3, r2, r3
 800628a:	4a0a      	ldr	r2, [pc, #40]	@ (80062b4 <HAL_RCC_ClockConfig+0x270>)
 800628c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800628e:	4b0a      	ldr	r3, [pc, #40]	@ (80062b8 <HAL_RCC_ClockConfig+0x274>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4618      	mov	r0, r3
 8006294:	f7fd f99e 	bl	80035d4 <HAL_InitTick>
 8006298:	4603      	mov	r3, r0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3718      	adds	r7, #24
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	40022000 	.word	0x40022000
 80062a8:	40021000 	.word	0x40021000
 80062ac:	04c4b400 	.word	0x04c4b400
 80062b0:	0801fd34 	.word	0x0801fd34
 80062b4:	20000004 	.word	0x20000004
 80062b8:	20000008 	.word	0x20000008

080062bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062bc:	b480      	push	{r7}
 80062be:	b087      	sub	sp, #28
 80062c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80062c2:	4b2c      	ldr	r3, [pc, #176]	@ (8006374 <HAL_RCC_GetSysClockFreq+0xb8>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f003 030c 	and.w	r3, r3, #12
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	d102      	bne.n	80062d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80062ce:	4b2a      	ldr	r3, [pc, #168]	@ (8006378 <HAL_RCC_GetSysClockFreq+0xbc>)
 80062d0:	613b      	str	r3, [r7, #16]
 80062d2:	e047      	b.n	8006364 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80062d4:	4b27      	ldr	r3, [pc, #156]	@ (8006374 <HAL_RCC_GetSysClockFreq+0xb8>)
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f003 030c 	and.w	r3, r3, #12
 80062dc:	2b08      	cmp	r3, #8
 80062de:	d102      	bne.n	80062e6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80062e0:	4b26      	ldr	r3, [pc, #152]	@ (800637c <HAL_RCC_GetSysClockFreq+0xc0>)
 80062e2:	613b      	str	r3, [r7, #16]
 80062e4:	e03e      	b.n	8006364 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80062e6:	4b23      	ldr	r3, [pc, #140]	@ (8006374 <HAL_RCC_GetSysClockFreq+0xb8>)
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f003 030c 	and.w	r3, r3, #12
 80062ee:	2b0c      	cmp	r3, #12
 80062f0:	d136      	bne.n	8006360 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80062f2:	4b20      	ldr	r3, [pc, #128]	@ (8006374 <HAL_RCC_GetSysClockFreq+0xb8>)
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	f003 0303 	and.w	r3, r3, #3
 80062fa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062fc:	4b1d      	ldr	r3, [pc, #116]	@ (8006374 <HAL_RCC_GetSysClockFreq+0xb8>)
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	091b      	lsrs	r3, r3, #4
 8006302:	f003 030f 	and.w	r3, r3, #15
 8006306:	3301      	adds	r3, #1
 8006308:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2b03      	cmp	r3, #3
 800630e:	d10c      	bne.n	800632a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006310:	4a1a      	ldr	r2, [pc, #104]	@ (800637c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	fbb2 f3f3 	udiv	r3, r2, r3
 8006318:	4a16      	ldr	r2, [pc, #88]	@ (8006374 <HAL_RCC_GetSysClockFreq+0xb8>)
 800631a:	68d2      	ldr	r2, [r2, #12]
 800631c:	0a12      	lsrs	r2, r2, #8
 800631e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006322:	fb02 f303 	mul.w	r3, r2, r3
 8006326:	617b      	str	r3, [r7, #20]
      break;
 8006328:	e00c      	b.n	8006344 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800632a:	4a13      	ldr	r2, [pc, #76]	@ (8006378 <HAL_RCC_GetSysClockFreq+0xbc>)
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006332:	4a10      	ldr	r2, [pc, #64]	@ (8006374 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006334:	68d2      	ldr	r2, [r2, #12]
 8006336:	0a12      	lsrs	r2, r2, #8
 8006338:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800633c:	fb02 f303 	mul.w	r3, r2, r3
 8006340:	617b      	str	r3, [r7, #20]
      break;
 8006342:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006344:	4b0b      	ldr	r3, [pc, #44]	@ (8006374 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	0e5b      	lsrs	r3, r3, #25
 800634a:	f003 0303 	and.w	r3, r3, #3
 800634e:	3301      	adds	r3, #1
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	fbb2 f3f3 	udiv	r3, r2, r3
 800635c:	613b      	str	r3, [r7, #16]
 800635e:	e001      	b.n	8006364 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006360:	2300      	movs	r3, #0
 8006362:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006364:	693b      	ldr	r3, [r7, #16]
}
 8006366:	4618      	mov	r0, r3
 8006368:	371c      	adds	r7, #28
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	40021000 	.word	0x40021000
 8006378:	00f42400 	.word	0x00f42400
 800637c:	016e3600 	.word	0x016e3600

08006380 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006380:	b480      	push	{r7}
 8006382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006384:	4b03      	ldr	r3, [pc, #12]	@ (8006394 <HAL_RCC_GetHCLKFreq+0x14>)
 8006386:	681b      	ldr	r3, [r3, #0]
}
 8006388:	4618      	mov	r0, r3
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	20000004 	.word	0x20000004

08006398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800639c:	f7ff fff0 	bl	8006380 <HAL_RCC_GetHCLKFreq>
 80063a0:	4602      	mov	r2, r0
 80063a2:	4b06      	ldr	r3, [pc, #24]	@ (80063bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	0a1b      	lsrs	r3, r3, #8
 80063a8:	f003 0307 	and.w	r3, r3, #7
 80063ac:	4904      	ldr	r1, [pc, #16]	@ (80063c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80063ae:	5ccb      	ldrb	r3, [r1, r3]
 80063b0:	f003 031f 	and.w	r3, r3, #31
 80063b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	40021000 	.word	0x40021000
 80063c0:	0801fd44 	.word	0x0801fd44

080063c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80063c8:	f7ff ffda 	bl	8006380 <HAL_RCC_GetHCLKFreq>
 80063cc:	4602      	mov	r2, r0
 80063ce:	4b06      	ldr	r3, [pc, #24]	@ (80063e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	0adb      	lsrs	r3, r3, #11
 80063d4:	f003 0307 	and.w	r3, r3, #7
 80063d8:	4904      	ldr	r1, [pc, #16]	@ (80063ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80063da:	5ccb      	ldrb	r3, [r1, r3]
 80063dc:	f003 031f 	and.w	r3, r3, #31
 80063e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	40021000 	.word	0x40021000
 80063ec:	0801fd44 	.word	0x0801fd44

080063f0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	220f      	movs	r2, #15
 80063fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006400:	4b12      	ldr	r3, [pc, #72]	@ (800644c <HAL_RCC_GetClockConfig+0x5c>)
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f003 0203 	and.w	r2, r3, #3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800640c:	4b0f      	ldr	r3, [pc, #60]	@ (800644c <HAL_RCC_GetClockConfig+0x5c>)
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006418:	4b0c      	ldr	r3, [pc, #48]	@ (800644c <HAL_RCC_GetClockConfig+0x5c>)
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006424:	4b09      	ldr	r3, [pc, #36]	@ (800644c <HAL_RCC_GetClockConfig+0x5c>)
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	08db      	lsrs	r3, r3, #3
 800642a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006432:	4b07      	ldr	r3, [pc, #28]	@ (8006450 <HAL_RCC_GetClockConfig+0x60>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 020f 	and.w	r2, r3, #15
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	601a      	str	r2, [r3, #0]
}
 800643e:	bf00      	nop
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	40021000 	.word	0x40021000
 8006450:	40022000 	.word	0x40022000

08006454 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800645a:	4b1e      	ldr	r3, [pc, #120]	@ (80064d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	f003 0303 	and.w	r3, r3, #3
 8006462:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006464:	4b1b      	ldr	r3, [pc, #108]	@ (80064d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	091b      	lsrs	r3, r3, #4
 800646a:	f003 030f 	and.w	r3, r3, #15
 800646e:	3301      	adds	r3, #1
 8006470:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	2b03      	cmp	r3, #3
 8006476:	d10c      	bne.n	8006492 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006478:	4a17      	ldr	r2, [pc, #92]	@ (80064d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006480:	4a14      	ldr	r2, [pc, #80]	@ (80064d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006482:	68d2      	ldr	r2, [r2, #12]
 8006484:	0a12      	lsrs	r2, r2, #8
 8006486:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800648a:	fb02 f303 	mul.w	r3, r2, r3
 800648e:	617b      	str	r3, [r7, #20]
    break;
 8006490:	e00c      	b.n	80064ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006492:	4a12      	ldr	r2, [pc, #72]	@ (80064dc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	fbb2 f3f3 	udiv	r3, r2, r3
 800649a:	4a0e      	ldr	r2, [pc, #56]	@ (80064d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800649c:	68d2      	ldr	r2, [r2, #12]
 800649e:	0a12      	lsrs	r2, r2, #8
 80064a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80064a4:	fb02 f303 	mul.w	r3, r2, r3
 80064a8:	617b      	str	r3, [r7, #20]
    break;
 80064aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80064ac:	4b09      	ldr	r3, [pc, #36]	@ (80064d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	0e5b      	lsrs	r3, r3, #25
 80064b2:	f003 0303 	and.w	r3, r3, #3
 80064b6:	3301      	adds	r3, #1
 80064b8:	005b      	lsls	r3, r3, #1
 80064ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80064c6:	687b      	ldr	r3, [r7, #4]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	371c      	adds	r7, #28
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr
 80064d4:	40021000 	.word	0x40021000
 80064d8:	016e3600 	.word	0x016e3600
 80064dc:	00f42400 	.word	0x00f42400

080064e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80064e8:	2300      	movs	r3, #0
 80064ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064ec:	2300      	movs	r3, #0
 80064ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f000 8098 	beq.w	800662e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064fe:	2300      	movs	r3, #0
 8006500:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006502:	4b43      	ldr	r3, [pc, #268]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10d      	bne.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800650e:	4b40      	ldr	r3, [pc, #256]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006512:	4a3f      	ldr	r2, [pc, #252]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006518:	6593      	str	r3, [r2, #88]	@ 0x58
 800651a:	4b3d      	ldr	r3, [pc, #244]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800651c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800651e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006522:	60bb      	str	r3, [r7, #8]
 8006524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006526:	2301      	movs	r3, #1
 8006528:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800652a:	4b3a      	ldr	r3, [pc, #232]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a39      	ldr	r2, [pc, #228]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006534:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006536:	f7fd fc3f 	bl	8003db8 <HAL_GetTick>
 800653a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800653c:	e009      	b.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800653e:	f7fd fc3b 	bl	8003db8 <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	2b02      	cmp	r3, #2
 800654a:	d902      	bls.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	74fb      	strb	r3, [r7, #19]
        break;
 8006550:	e005      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006552:	4b30      	ldr	r3, [pc, #192]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0ef      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800655e:	7cfb      	ldrb	r3, [r7, #19]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d159      	bne.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006564:	4b2a      	ldr	r3, [pc, #168]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800656a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800656e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d01e      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	429a      	cmp	r2, r3
 800657e:	d019      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006580:	4b23      	ldr	r3, [pc, #140]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800658a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800658c:	4b20      	ldr	r3, [pc, #128]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800658e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006592:	4a1f      	ldr	r2, [pc, #124]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006598:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800659c:	4b1c      	ldr	r3, [pc, #112]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800659e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065a2:	4a1b      	ldr	r2, [pc, #108]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80065ac:	4a18      	ldr	r2, [pc, #96]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d016      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065be:	f7fd fbfb 	bl	8003db8 <HAL_GetTick>
 80065c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065c4:	e00b      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065c6:	f7fd fbf7 	bl	8003db8 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d902      	bls.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	74fb      	strb	r3, [r7, #19]
            break;
 80065dc:	e006      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065de:	4b0c      	ldr	r3, [pc, #48]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d0ec      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80065ec:	7cfb      	ldrb	r3, [r7, #19]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10b      	bne.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065f2:	4b07      	ldr	r3, [pc, #28]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006600:	4903      	ldr	r1, [pc, #12]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006602:	4313      	orrs	r3, r2
 8006604:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006608:	e008      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800660a:	7cfb      	ldrb	r3, [r7, #19]
 800660c:	74bb      	strb	r3, [r7, #18]
 800660e:	e005      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006610:	40021000 	.word	0x40021000
 8006614:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006618:	7cfb      	ldrb	r3, [r7, #19]
 800661a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800661c:	7c7b      	ldrb	r3, [r7, #17]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d105      	bne.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006622:	4ba7      	ldr	r3, [pc, #668]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006626:	4aa6      	ldr	r2, [pc, #664]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006628:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800662c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00a      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800663a:	4ba1      	ldr	r3, [pc, #644]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800663c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006640:	f023 0203 	bic.w	r2, r3, #3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	499d      	ldr	r1, [pc, #628]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800664a:	4313      	orrs	r3, r2
 800664c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0302 	and.w	r3, r3, #2
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00a      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800665c:	4b98      	ldr	r3, [pc, #608]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800665e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006662:	f023 020c 	bic.w	r2, r3, #12
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	4995      	ldr	r1, [pc, #596]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800666c:	4313      	orrs	r3, r2
 800666e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0304 	and.w	r3, r3, #4
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00a      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800667e:	4b90      	ldr	r3, [pc, #576]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006684:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	498c      	ldr	r1, [pc, #560]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800668e:	4313      	orrs	r3, r2
 8006690:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0308 	and.w	r3, r3, #8
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00a      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80066a0:	4b87      	ldr	r3, [pc, #540]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	4984      	ldr	r1, [pc, #528]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0310 	and.w	r3, r3, #16
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00a      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80066c2:	4b7f      	ldr	r3, [pc, #508]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	497b      	ldr	r1, [pc, #492]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0320 	and.w	r3, r3, #32
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00a      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80066e4:	4b76      	ldr	r3, [pc, #472]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	4973      	ldr	r1, [pc, #460]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00a      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006706:	4b6e      	ldr	r3, [pc, #440]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800670c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	69db      	ldr	r3, [r3, #28]
 8006714:	496a      	ldr	r1, [pc, #424]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006716:	4313      	orrs	r3, r2
 8006718:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00a      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006728:	4b65      	ldr	r3, [pc, #404]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800672a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800672e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	4962      	ldr	r1, [pc, #392]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006738:	4313      	orrs	r3, r2
 800673a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00a      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800674a:	4b5d      	ldr	r3, [pc, #372]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800674c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006750:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006758:	4959      	ldr	r1, [pc, #356]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800675a:	4313      	orrs	r3, r2
 800675c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00a      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800676c:	4b54      	ldr	r3, [pc, #336]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800676e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006772:	f023 0203 	bic.w	r2, r3, #3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800677a:	4951      	ldr	r1, [pc, #324]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800677c:	4313      	orrs	r3, r2
 800677e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00a      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800678e:	4b4c      	ldr	r3, [pc, #304]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006794:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679c:	4948      	ldr	r1, [pc, #288]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d015      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80067b0:	4b43      	ldr	r3, [pc, #268]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067be:	4940      	ldr	r1, [pc, #256]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067ce:	d105      	bne.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067d0:	4b3b      	ldr	r3, [pc, #236]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	4a3a      	ldr	r2, [pc, #232]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067da:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d015      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80067e8:	4b35      	ldr	r3, [pc, #212]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067f6:	4932      	ldr	r1, [pc, #200]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006802:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006806:	d105      	bne.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006808:	4b2d      	ldr	r3, [pc, #180]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	4a2c      	ldr	r2, [pc, #176]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800680e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006812:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d015      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006820:	4b27      	ldr	r3, [pc, #156]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006826:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800682e:	4924      	ldr	r1, [pc, #144]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006830:	4313      	orrs	r3, r2
 8006832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800683a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800683e:	d105      	bne.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006840:	4b1f      	ldr	r3, [pc, #124]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	4a1e      	ldr	r2, [pc, #120]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006846:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800684a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d015      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006858:	4b19      	ldr	r3, [pc, #100]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800685a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800685e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006866:	4916      	ldr	r1, [pc, #88]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006868:	4313      	orrs	r3, r2
 800686a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006872:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006876:	d105      	bne.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006878:	4b11      	ldr	r3, [pc, #68]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	4a10      	ldr	r2, [pc, #64]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800687e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006882:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d019      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006890:	4b0b      	ldr	r3, [pc, #44]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006896:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800689e:	4908      	ldr	r1, [pc, #32]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068a0:	4313      	orrs	r3, r2
 80068a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068ae:	d109      	bne.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068b0:	4b03      	ldr	r3, [pc, #12]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	4a02      	ldr	r2, [pc, #8]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068ba:	60d3      	str	r3, [r2, #12]
 80068bc:	e002      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80068be:	bf00      	nop
 80068c0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d015      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80068d0:	4b29      	ldr	r3, [pc, #164]	@ (8006978 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068de:	4926      	ldr	r1, [pc, #152]	@ (8006978 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068ee:	d105      	bne.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80068f0:	4b21      	ldr	r3, [pc, #132]	@ (8006978 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	4a20      	ldr	r2, [pc, #128]	@ (8006978 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068fa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d015      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006908:	4b1b      	ldr	r3, [pc, #108]	@ (8006978 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800690a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800690e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006916:	4918      	ldr	r1, [pc, #96]	@ (8006978 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006918:	4313      	orrs	r3, r2
 800691a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006926:	d105      	bne.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006928:	4b13      	ldr	r3, [pc, #76]	@ (8006978 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	4a12      	ldr	r2, [pc, #72]	@ (8006978 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800692e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006932:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d015      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006940:	4b0d      	ldr	r3, [pc, #52]	@ (8006978 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006942:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006946:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800694e:	490a      	ldr	r1, [pc, #40]	@ (8006978 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006950:	4313      	orrs	r3, r2
 8006952:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800695a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800695e:	d105      	bne.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006960:	4b05      	ldr	r3, [pc, #20]	@ (8006978 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	4a04      	ldr	r2, [pc, #16]	@ (8006978 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006966:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800696a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800696c:	7cbb      	ldrb	r3, [r7, #18]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3718      	adds	r7, #24
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	40021000 	.word	0x40021000

0800697c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d101      	bne.n	800698e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e049      	b.n	8006a22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d106      	bne.n	80069a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f841 	bl	8006a2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2202      	movs	r2, #2
 80069ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	3304      	adds	r3, #4
 80069b8:	4619      	mov	r1, r3
 80069ba:	4610      	mov	r0, r2
 80069bc:	f000 fa30 	bl	8006e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b083      	sub	sp, #12
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006a32:	bf00      	nop
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
	...

08006a40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d001      	beq.n	8006a58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e054      	b.n	8006b02 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68da      	ldr	r2, [r3, #12]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f042 0201 	orr.w	r2, r2, #1
 8006a6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a26      	ldr	r2, [pc, #152]	@ (8006b10 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d022      	beq.n	8006ac0 <HAL_TIM_Base_Start_IT+0x80>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a82:	d01d      	beq.n	8006ac0 <HAL_TIM_Base_Start_IT+0x80>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a22      	ldr	r2, [pc, #136]	@ (8006b14 <HAL_TIM_Base_Start_IT+0xd4>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d018      	beq.n	8006ac0 <HAL_TIM_Base_Start_IT+0x80>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a21      	ldr	r2, [pc, #132]	@ (8006b18 <HAL_TIM_Base_Start_IT+0xd8>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d013      	beq.n	8006ac0 <HAL_TIM_Base_Start_IT+0x80>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a1f      	ldr	r2, [pc, #124]	@ (8006b1c <HAL_TIM_Base_Start_IT+0xdc>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d00e      	beq.n	8006ac0 <HAL_TIM_Base_Start_IT+0x80>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a1e      	ldr	r2, [pc, #120]	@ (8006b20 <HAL_TIM_Base_Start_IT+0xe0>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d009      	beq.n	8006ac0 <HAL_TIM_Base_Start_IT+0x80>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8006b24 <HAL_TIM_Base_Start_IT+0xe4>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d004      	beq.n	8006ac0 <HAL_TIM_Base_Start_IT+0x80>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a1b      	ldr	r2, [pc, #108]	@ (8006b28 <HAL_TIM_Base_Start_IT+0xe8>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d115      	bne.n	8006aec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689a      	ldr	r2, [r3, #8]
 8006ac6:	4b19      	ldr	r3, [pc, #100]	@ (8006b2c <HAL_TIM_Base_Start_IT+0xec>)
 8006ac8:	4013      	ands	r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2b06      	cmp	r3, #6
 8006ad0:	d015      	beq.n	8006afe <HAL_TIM_Base_Start_IT+0xbe>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ad8:	d011      	beq.n	8006afe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f042 0201 	orr.w	r2, r2, #1
 8006ae8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aea:	e008      	b.n	8006afe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 0201 	orr.w	r2, r2, #1
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	e000      	b.n	8006b00 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006afe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	40012c00 	.word	0x40012c00
 8006b14:	40000400 	.word	0x40000400
 8006b18:	40000800 	.word	0x40000800
 8006b1c:	40000c00 	.word	0x40000c00
 8006b20:	40013400 	.word	0x40013400
 8006b24:	40014000 	.word	0x40014000
 8006b28:	40015000 	.word	0x40015000
 8006b2c:	00010007 	.word	0x00010007

08006b30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	f003 0302 	and.w	r3, r3, #2
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d020      	beq.n	8006b94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f003 0302 	and.w	r3, r3, #2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d01b      	beq.n	8006b94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f06f 0202 	mvn.w	r2, #2
 8006b64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	f003 0303 	and.w	r3, r3, #3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f931 	bl	8006de2 <HAL_TIM_IC_CaptureCallback>
 8006b80:	e005      	b.n	8006b8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f923 	bl	8006dce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f934 	bl	8006df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	f003 0304 	and.w	r3, r3, #4
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d020      	beq.n	8006be0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f003 0304 	and.w	r3, r3, #4
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d01b      	beq.n	8006be0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f06f 0204 	mvn.w	r2, #4
 8006bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f90b 	bl	8006de2 <HAL_TIM_IC_CaptureCallback>
 8006bcc:	e005      	b.n	8006bda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f8fd 	bl	8006dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 f90e 	bl	8006df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	f003 0308 	and.w	r3, r3, #8
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d020      	beq.n	8006c2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f003 0308 	and.w	r3, r3, #8
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d01b      	beq.n	8006c2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f06f 0208 	mvn.w	r2, #8
 8006bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2204      	movs	r2, #4
 8006c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	f003 0303 	and.w	r3, r3, #3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d003      	beq.n	8006c1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f8e5 	bl	8006de2 <HAL_TIM_IC_CaptureCallback>
 8006c18:	e005      	b.n	8006c26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f8d7 	bl	8006dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f8e8 	bl	8006df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	f003 0310 	and.w	r3, r3, #16
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d020      	beq.n	8006c78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f003 0310 	and.w	r3, r3, #16
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d01b      	beq.n	8006c78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f06f 0210 	mvn.w	r2, #16
 8006c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2208      	movs	r2, #8
 8006c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	69db      	ldr	r3, [r3, #28]
 8006c56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f8bf 	bl	8006de2 <HAL_TIM_IC_CaptureCallback>
 8006c64:	e005      	b.n	8006c72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f8b1 	bl	8006dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f8c2 	bl	8006df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00c      	beq.n	8006c9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d007      	beq.n	8006c9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f06f 0201 	mvn.w	r2, #1
 8006c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7fc faf4 	bl	8003284 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d104      	bne.n	8006cb0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00c      	beq.n	8006cca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d007      	beq.n	8006cca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f969 	bl	8006f9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00c      	beq.n	8006cee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d007      	beq.n	8006cee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f961 	bl	8006fb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00c      	beq.n	8006d12 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d007      	beq.n	8006d12 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f87c 	bl	8006e0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	f003 0320 	and.w	r3, r3, #32
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00c      	beq.n	8006d36 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f003 0320 	and.w	r3, r3, #32
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d007      	beq.n	8006d36 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f06f 0220 	mvn.w	r2, #32
 8006d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f929 	bl	8006f88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00c      	beq.n	8006d5a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d007      	beq.n	8006d5a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f935 	bl	8006fc4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00c      	beq.n	8006d7e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d007      	beq.n	8006d7e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f92d 	bl	8006fd8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00c      	beq.n	8006da2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d007      	beq.n	8006da2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f925 	bl	8006fec <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00c      	beq.n	8006dc6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d007      	beq.n	8006dc6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 f91d 	bl	8007000 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006dc6:	bf00      	nop
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b083      	sub	sp, #12
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006dd6:	bf00      	nop
 8006dd8:	370c      	adds	r7, #12
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006de2:	b480      	push	{r7}
 8006de4:	b083      	sub	sp, #12
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006dea:	bf00      	nop
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b083      	sub	sp, #12
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006dfe:	bf00      	nop
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b083      	sub	sp, #12
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e12:	bf00      	nop
 8006e14:	370c      	adds	r7, #12
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
	...

08006e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a4c      	ldr	r2, [pc, #304]	@ (8006f64 <TIM_Base_SetConfig+0x144>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d017      	beq.n	8006e68 <TIM_Base_SetConfig+0x48>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e3e:	d013      	beq.n	8006e68 <TIM_Base_SetConfig+0x48>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a49      	ldr	r2, [pc, #292]	@ (8006f68 <TIM_Base_SetConfig+0x148>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d00f      	beq.n	8006e68 <TIM_Base_SetConfig+0x48>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a48      	ldr	r2, [pc, #288]	@ (8006f6c <TIM_Base_SetConfig+0x14c>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d00b      	beq.n	8006e68 <TIM_Base_SetConfig+0x48>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a47      	ldr	r2, [pc, #284]	@ (8006f70 <TIM_Base_SetConfig+0x150>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d007      	beq.n	8006e68 <TIM_Base_SetConfig+0x48>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a46      	ldr	r2, [pc, #280]	@ (8006f74 <TIM_Base_SetConfig+0x154>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d003      	beq.n	8006e68 <TIM_Base_SetConfig+0x48>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a45      	ldr	r2, [pc, #276]	@ (8006f78 <TIM_Base_SetConfig+0x158>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d108      	bne.n	8006e7a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a39      	ldr	r2, [pc, #228]	@ (8006f64 <TIM_Base_SetConfig+0x144>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d023      	beq.n	8006eca <TIM_Base_SetConfig+0xaa>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e88:	d01f      	beq.n	8006eca <TIM_Base_SetConfig+0xaa>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a36      	ldr	r2, [pc, #216]	@ (8006f68 <TIM_Base_SetConfig+0x148>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d01b      	beq.n	8006eca <TIM_Base_SetConfig+0xaa>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a35      	ldr	r2, [pc, #212]	@ (8006f6c <TIM_Base_SetConfig+0x14c>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d017      	beq.n	8006eca <TIM_Base_SetConfig+0xaa>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a34      	ldr	r2, [pc, #208]	@ (8006f70 <TIM_Base_SetConfig+0x150>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d013      	beq.n	8006eca <TIM_Base_SetConfig+0xaa>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a33      	ldr	r2, [pc, #204]	@ (8006f74 <TIM_Base_SetConfig+0x154>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d00f      	beq.n	8006eca <TIM_Base_SetConfig+0xaa>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a33      	ldr	r2, [pc, #204]	@ (8006f7c <TIM_Base_SetConfig+0x15c>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d00b      	beq.n	8006eca <TIM_Base_SetConfig+0xaa>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a32      	ldr	r2, [pc, #200]	@ (8006f80 <TIM_Base_SetConfig+0x160>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d007      	beq.n	8006eca <TIM_Base_SetConfig+0xaa>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a31      	ldr	r2, [pc, #196]	@ (8006f84 <TIM_Base_SetConfig+0x164>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d003      	beq.n	8006eca <TIM_Base_SetConfig+0xaa>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a2c      	ldr	r2, [pc, #176]	@ (8006f78 <TIM_Base_SetConfig+0x158>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d108      	bne.n	8006edc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	689a      	ldr	r2, [r3, #8]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a18      	ldr	r2, [pc, #96]	@ (8006f64 <TIM_Base_SetConfig+0x144>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d013      	beq.n	8006f30 <TIM_Base_SetConfig+0x110>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a1a      	ldr	r2, [pc, #104]	@ (8006f74 <TIM_Base_SetConfig+0x154>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d00f      	beq.n	8006f30 <TIM_Base_SetConfig+0x110>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a1a      	ldr	r2, [pc, #104]	@ (8006f7c <TIM_Base_SetConfig+0x15c>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d00b      	beq.n	8006f30 <TIM_Base_SetConfig+0x110>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a19      	ldr	r2, [pc, #100]	@ (8006f80 <TIM_Base_SetConfig+0x160>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d007      	beq.n	8006f30 <TIM_Base_SetConfig+0x110>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a18      	ldr	r2, [pc, #96]	@ (8006f84 <TIM_Base_SetConfig+0x164>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d003      	beq.n	8006f30 <TIM_Base_SetConfig+0x110>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a13      	ldr	r2, [pc, #76]	@ (8006f78 <TIM_Base_SetConfig+0x158>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d103      	bne.n	8006f38 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	691a      	ldr	r2, [r3, #16]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	f003 0301 	and.w	r3, r3, #1
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d105      	bne.n	8006f56 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	f023 0201 	bic.w	r2, r3, #1
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	611a      	str	r2, [r3, #16]
  }
}
 8006f56:	bf00      	nop
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	40012c00 	.word	0x40012c00
 8006f68:	40000400 	.word	0x40000400
 8006f6c:	40000800 	.word	0x40000800
 8006f70:	40000c00 	.word	0x40000c00
 8006f74:	40013400 	.word	0x40013400
 8006f78:	40015000 	.word	0x40015000
 8006f7c:	40014000 	.word	0x40014000
 8006f80:	40014400 	.word	0x40014400
 8006f84:	40014800 	.word	0x40014800

08006f88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f90:	bf00      	nop
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e042      	b.n	80070ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800702c:	2b00      	cmp	r3, #0
 800702e:	d106      	bne.n	800703e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7fc fd07 	bl	8003a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2224      	movs	r2, #36	@ 0x24
 8007042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f022 0201 	bic.w	r2, r2, #1
 8007054:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800705a:	2b00      	cmp	r3, #0
 800705c:	d002      	beq.n	8007064 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f001 f806 	bl	8008070 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fd07 	bl	8007a78 <UART_SetConfig>
 800706a:	4603      	mov	r3, r0
 800706c:	2b01      	cmp	r3, #1
 800706e:	d101      	bne.n	8007074 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e01b      	b.n	80070ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	685a      	ldr	r2, [r3, #4]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007082:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	689a      	ldr	r2, [r3, #8]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007092:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f042 0201 	orr.w	r2, r2, #1
 80070a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f001 f885 	bl	80081b4 <UART_CheckIdleState>
 80070aa:	4603      	mov	r3, r0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b08a      	sub	sp, #40	@ 0x28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	4613      	mov	r3, r2
 80070c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070c8:	2b20      	cmp	r3, #32
 80070ca:	d167      	bne.n	800719c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d002      	beq.n	80070d8 <HAL_UART_Transmit_DMA+0x24>
 80070d2:	88fb      	ldrh	r3, [r7, #6]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d101      	bne.n	80070dc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e060      	b.n	800719e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	88fa      	ldrh	r2, [r7, #6]
 80070e6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	88fa      	ldrh	r2, [r7, #6]
 80070ee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2221      	movs	r2, #33	@ 0x21
 80070fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007106:	2b00      	cmp	r3, #0
 8007108:	d028      	beq.n	800715c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800710e:	4a26      	ldr	r2, [pc, #152]	@ (80071a8 <HAL_UART_Transmit_DMA+0xf4>)
 8007110:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007116:	4a25      	ldr	r2, [pc, #148]	@ (80071ac <HAL_UART_Transmit_DMA+0xf8>)
 8007118:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800711e:	4a24      	ldr	r2, [pc, #144]	@ (80071b0 <HAL_UART_Transmit_DMA+0xfc>)
 8007120:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007126:	2200      	movs	r2, #0
 8007128:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007132:	4619      	mov	r1, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	3328      	adds	r3, #40	@ 0x28
 800713a:	461a      	mov	r2, r3
 800713c:	88fb      	ldrh	r3, [r7, #6]
 800713e:	f7fc ffeb 	bl	8004118 <HAL_DMA_Start_IT>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d009      	beq.n	800715c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2210      	movs	r2, #16
 800714c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2220      	movs	r2, #32
 8007154:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e020      	b.n	800719e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2240      	movs	r2, #64	@ 0x40
 8007162:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	3308      	adds	r3, #8
 800716a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	e853 3f00 	ldrex	r3, [r3]
 8007172:	613b      	str	r3, [r7, #16]
   return(result);
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800717a:	627b      	str	r3, [r7, #36]	@ 0x24
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	3308      	adds	r3, #8
 8007182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007184:	623a      	str	r2, [r7, #32]
 8007186:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007188:	69f9      	ldr	r1, [r7, #28]
 800718a:	6a3a      	ldr	r2, [r7, #32]
 800718c:	e841 2300 	strex	r3, r2, [r1]
 8007190:	61bb      	str	r3, [r7, #24]
   return(result);
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1e5      	bne.n	8007164 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007198:	2300      	movs	r3, #0
 800719a:	e000      	b.n	800719e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800719c:	2302      	movs	r3, #2
  }
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3728      	adds	r7, #40	@ 0x28
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	0800867f 	.word	0x0800867f
 80071ac:	08008719 	.word	0x08008719
 80071b0:	0800889f 	.word	0x0800889f

080071b4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b08a      	sub	sp, #40	@ 0x28
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	4613      	mov	r3, r2
 80071c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071c8:	2b20      	cmp	r3, #32
 80071ca:	d137      	bne.n	800723c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d002      	beq.n	80071d8 <HAL_UART_Receive_DMA+0x24>
 80071d2:	88fb      	ldrh	r3, [r7, #6]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d101      	bne.n	80071dc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e030      	b.n	800723e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a18      	ldr	r2, [pc, #96]	@ (8007248 <HAL_UART_Receive_DMA+0x94>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d01f      	beq.n	800722c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d018      	beq.n	800722c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	e853 3f00 	ldrex	r3, [r3]
 8007206:	613b      	str	r3, [r7, #16]
   return(result);
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800720e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	461a      	mov	r2, r3
 8007216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007218:	623b      	str	r3, [r7, #32]
 800721a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721c:	69f9      	ldr	r1, [r7, #28]
 800721e:	6a3a      	ldr	r2, [r7, #32]
 8007220:	e841 2300 	strex	r3, r2, [r1]
 8007224:	61bb      	str	r3, [r7, #24]
   return(result);
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1e6      	bne.n	80071fa <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800722c:	88fb      	ldrh	r3, [r7, #6]
 800722e:	461a      	mov	r2, r3
 8007230:	68b9      	ldr	r1, [r7, #8]
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f001 f8d6 	bl	80083e4 <UART_Start_Receive_DMA>
 8007238:	4603      	mov	r3, r0
 800723a:	e000      	b.n	800723e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800723c:	2302      	movs	r3, #2
  }
}
 800723e:	4618      	mov	r0, r3
 8007240:	3728      	adds	r7, #40	@ 0x28
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	40008000 	.word	0x40008000

0800724c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b090      	sub	sp, #64	@ 0x40
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800725a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007262:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800726e:	2b80      	cmp	r3, #128	@ 0x80
 8007270:	d139      	bne.n	80072e6 <HAL_UART_DMAStop+0x9a>
 8007272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007274:	2b21      	cmp	r3, #33	@ 0x21
 8007276:	d136      	bne.n	80072e6 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3308      	adds	r3, #8
 800727e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007280:	6a3b      	ldr	r3, [r7, #32]
 8007282:	e853 3f00 	ldrex	r3, [r3]
 8007286:	61fb      	str	r3, [r7, #28]
   return(result);
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800728e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	3308      	adds	r3, #8
 8007296:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007298:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800729a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800729e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072a0:	e841 2300 	strex	r3, r2, [r1]
 80072a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1e5      	bne.n	8007278 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d015      	beq.n	80072e0 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7fc ffa8 	bl	800420e <HAL_DMA_Abort>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00d      	beq.n	80072e0 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7fd f90f 	bl	80044ec <HAL_DMA_GetError>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b20      	cmp	r3, #32
 80072d2:	d105      	bne.n	80072e0 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2210      	movs	r2, #16
 80072d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e047      	b.n	8007370 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f001 f925 	bl	8008530 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072f0:	2b40      	cmp	r3, #64	@ 0x40
 80072f2:	d13c      	bne.n	800736e <HAL_UART_DMAStop+0x122>
 80072f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f6:	2b22      	cmp	r3, #34	@ 0x22
 80072f8:	d139      	bne.n	800736e <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3308      	adds	r3, #8
 8007300:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	e853 3f00 	ldrex	r3, [r3]
 8007308:	60bb      	str	r3, [r7, #8]
   return(result);
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007310:	633b      	str	r3, [r7, #48]	@ 0x30
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3308      	adds	r3, #8
 8007318:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800731a:	61ba      	str	r2, [r7, #24]
 800731c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731e:	6979      	ldr	r1, [r7, #20]
 8007320:	69ba      	ldr	r2, [r7, #24]
 8007322:	e841 2300 	strex	r3, r2, [r1]
 8007326:	613b      	str	r3, [r7, #16]
   return(result);
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1e5      	bne.n	80072fa <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007334:	2b00      	cmp	r3, #0
 8007336:	d017      	beq.n	8007368 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800733e:	4618      	mov	r0, r3
 8007340:	f7fc ff65 	bl	800420e <HAL_DMA_Abort>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00e      	beq.n	8007368 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007350:	4618      	mov	r0, r3
 8007352:	f7fd f8cb 	bl	80044ec <HAL_DMA_GetError>
 8007356:	4603      	mov	r3, r0
 8007358:	2b20      	cmp	r3, #32
 800735a:	d105      	bne.n	8007368 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2210      	movs	r2, #16
 8007360:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e003      	b.n	8007370 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f001 f922 	bl	80085b2 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3740      	adds	r7, #64	@ 0x40
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b0ba      	sub	sp, #232	@ 0xe8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	69db      	ldr	r3, [r3, #28]
 8007386:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800739e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80073a2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80073a6:	4013      	ands	r3, r2
 80073a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80073ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d11b      	bne.n	80073ec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80073b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073b8:	f003 0320 	and.w	r3, r3, #32
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d015      	beq.n	80073ec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80073c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073c4:	f003 0320 	and.w	r3, r3, #32
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d105      	bne.n	80073d8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80073cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d009      	beq.n	80073ec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f000 8300 	beq.w	80079e2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	4798      	blx	r3
      }
      return;
 80073ea:	e2fa      	b.n	80079e2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80073ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 8123 	beq.w	800763c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80073f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80073fa:	4b8d      	ldr	r3, [pc, #564]	@ (8007630 <HAL_UART_IRQHandler+0x2b8>)
 80073fc:	4013      	ands	r3, r2
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d106      	bne.n	8007410 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007402:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007406:	4b8b      	ldr	r3, [pc, #556]	@ (8007634 <HAL_UART_IRQHandler+0x2bc>)
 8007408:	4013      	ands	r3, r2
 800740a:	2b00      	cmp	r3, #0
 800740c:	f000 8116 	beq.w	800763c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007414:	f003 0301 	and.w	r3, r3, #1
 8007418:	2b00      	cmp	r3, #0
 800741a:	d011      	beq.n	8007440 <HAL_UART_IRQHandler+0xc8>
 800741c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00b      	beq.n	8007440 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2201      	movs	r2, #1
 800742e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007436:	f043 0201 	orr.w	r2, r3, #1
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007444:	f003 0302 	and.w	r3, r3, #2
 8007448:	2b00      	cmp	r3, #0
 800744a:	d011      	beq.n	8007470 <HAL_UART_IRQHandler+0xf8>
 800744c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007450:	f003 0301 	and.w	r3, r3, #1
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00b      	beq.n	8007470 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2202      	movs	r2, #2
 800745e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007466:	f043 0204 	orr.w	r2, r3, #4
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007474:	f003 0304 	and.w	r3, r3, #4
 8007478:	2b00      	cmp	r3, #0
 800747a:	d011      	beq.n	80074a0 <HAL_UART_IRQHandler+0x128>
 800747c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007480:	f003 0301 	and.w	r3, r3, #1
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00b      	beq.n	80074a0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2204      	movs	r2, #4
 800748e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007496:	f043 0202 	orr.w	r2, r3, #2
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80074a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074a4:	f003 0308 	and.w	r3, r3, #8
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d017      	beq.n	80074dc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80074ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074b0:	f003 0320 	and.w	r3, r3, #32
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d105      	bne.n	80074c4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80074b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80074bc:	4b5c      	ldr	r3, [pc, #368]	@ (8007630 <HAL_UART_IRQHandler+0x2b8>)
 80074be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00b      	beq.n	80074dc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2208      	movs	r2, #8
 80074ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074d2:	f043 0208 	orr.w	r2, r3, #8
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80074dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d012      	beq.n	800750e <HAL_UART_IRQHandler+0x196>
 80074e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00c      	beq.n	800750e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80074fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007504:	f043 0220 	orr.w	r2, r3, #32
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 8266 	beq.w	80079e6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800751a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800751e:	f003 0320 	and.w	r3, r3, #32
 8007522:	2b00      	cmp	r3, #0
 8007524:	d013      	beq.n	800754e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800752a:	f003 0320 	and.w	r3, r3, #32
 800752e:	2b00      	cmp	r3, #0
 8007530:	d105      	bne.n	800753e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007532:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800753a:	2b00      	cmp	r3, #0
 800753c:	d007      	beq.n	800754e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007542:	2b00      	cmp	r3, #0
 8007544:	d003      	beq.n	800754e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007554:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007562:	2b40      	cmp	r3, #64	@ 0x40
 8007564:	d005      	beq.n	8007572 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007566:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800756a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800756e:	2b00      	cmp	r3, #0
 8007570:	d054      	beq.n	800761c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f001 f81d 	bl	80085b2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007582:	2b40      	cmp	r3, #64	@ 0x40
 8007584:	d146      	bne.n	8007614 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	3308      	adds	r3, #8
 800758c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007590:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007594:	e853 3f00 	ldrex	r3, [r3]
 8007598:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800759c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80075a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	3308      	adds	r3, #8
 80075ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80075b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80075b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80075be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80075c2:	e841 2300 	strex	r3, r2, [r1]
 80075c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80075ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1d9      	bne.n	8007586 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d017      	beq.n	800760c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075e2:	4a15      	ldr	r2, [pc, #84]	@ (8007638 <HAL_UART_IRQHandler+0x2c0>)
 80075e4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fc fe67 	bl	80042c0 <HAL_DMA_Abort_IT>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d019      	beq.n	800762c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007606:	4610      	mov	r0, r2
 8007608:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800760a:	e00f      	b.n	800762c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fa1d 	bl	8007a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007612:	e00b      	b.n	800762c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fa19 	bl	8007a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800761a:	e007      	b.n	800762c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fa15 	bl	8007a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800762a:	e1dc      	b.n	80079e6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800762c:	bf00      	nop
    return;
 800762e:	e1da      	b.n	80079e6 <HAL_UART_IRQHandler+0x66e>
 8007630:	10000001 	.word	0x10000001
 8007634:	04000120 	.word	0x04000120
 8007638:	0800891f 	.word	0x0800891f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007640:	2b01      	cmp	r3, #1
 8007642:	f040 8170 	bne.w	8007926 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800764a:	f003 0310 	and.w	r3, r3, #16
 800764e:	2b00      	cmp	r3, #0
 8007650:	f000 8169 	beq.w	8007926 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007658:	f003 0310 	and.w	r3, r3, #16
 800765c:	2b00      	cmp	r3, #0
 800765e:	f000 8162 	beq.w	8007926 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2210      	movs	r2, #16
 8007668:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007674:	2b40      	cmp	r3, #64	@ 0x40
 8007676:	f040 80d8 	bne.w	800782a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007688:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 80af 	beq.w	80077f0 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007698:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800769c:	429a      	cmp	r2, r3
 800769e:	f080 80a7 	bcs.w	80077f0 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80076a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 0320 	and.w	r3, r3, #32
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f040 8087 	bne.w	80077ce <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80076cc:	e853 3f00 	ldrex	r3, [r3]
 80076d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80076d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80076d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	461a      	mov	r2, r3
 80076e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80076ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80076ee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80076f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80076fa:	e841 2300 	strex	r3, r2, [r1]
 80076fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007702:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1da      	bne.n	80076c0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	3308      	adds	r3, #8
 8007710:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007712:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007714:	e853 3f00 	ldrex	r3, [r3]
 8007718:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800771a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800771c:	f023 0301 	bic.w	r3, r3, #1
 8007720:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3308      	adds	r3, #8
 800772a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800772e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007732:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007734:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007736:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800773a:	e841 2300 	strex	r3, r2, [r1]
 800773e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007740:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1e1      	bne.n	800770a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	3308      	adds	r3, #8
 800774c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007750:	e853 3f00 	ldrex	r3, [r3]
 8007754:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007756:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007758:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800775c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3308      	adds	r3, #8
 8007766:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800776a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800776c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007770:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007772:	e841 2300 	strex	r3, r2, [r1]
 8007776:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007778:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1e3      	bne.n	8007746 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2220      	movs	r2, #32
 8007782:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007794:	e853 3f00 	ldrex	r3, [r3]
 8007798:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800779a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800779c:	f023 0310 	bic.w	r3, r3, #16
 80077a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	461a      	mov	r2, r3
 80077aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80077b0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80077b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80077b6:	e841 2300 	strex	r3, r2, [r1]
 80077ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80077bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1e4      	bne.n	800778c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7fc fd20 	bl	800420e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2202      	movs	r2, #2
 80077d2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	4619      	mov	r1, r3
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f939 	bl	8007a60 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80077ee:	e0fc      	b.n	80079ea <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80077fa:	429a      	cmp	r2, r3
 80077fc:	f040 80f5 	bne.w	80079ea <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0320 	and.w	r3, r3, #32
 800780e:	2b20      	cmp	r3, #32
 8007810:	f040 80eb 	bne.w	80079ea <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2202      	movs	r2, #2
 8007818:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007820:	4619      	mov	r1, r3
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f91c 	bl	8007a60 <HAL_UARTEx_RxEventCallback>
      return;
 8007828:	e0df      	b.n	80079ea <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007836:	b29b      	uxth	r3, r3
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007844:	b29b      	uxth	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	f000 80d1 	beq.w	80079ee <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800784c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007850:	2b00      	cmp	r3, #0
 8007852:	f000 80cc 	beq.w	80079ee <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800785e:	e853 3f00 	ldrex	r3, [r3]
 8007862:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007866:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800786a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	461a      	mov	r2, r3
 8007874:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007878:	647b      	str	r3, [r7, #68]	@ 0x44
 800787a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800787e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007880:	e841 2300 	strex	r3, r2, [r1]
 8007884:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1e4      	bne.n	8007856 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3308      	adds	r3, #8
 8007892:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007896:	e853 3f00 	ldrex	r3, [r3]
 800789a:	623b      	str	r3, [r7, #32]
   return(result);
 800789c:	6a3b      	ldr	r3, [r7, #32]
 800789e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078a2:	f023 0301 	bic.w	r3, r3, #1
 80078a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	3308      	adds	r3, #8
 80078b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80078b4:	633a      	str	r2, [r7, #48]	@ 0x30
 80078b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80078ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078bc:	e841 2300 	strex	r3, r2, [r1]
 80078c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80078c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d1e1      	bne.n	800788c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2220      	movs	r2, #32
 80078cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	e853 3f00 	ldrex	r3, [r3]
 80078e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f023 0310 	bic.w	r3, r3, #16
 80078f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	461a      	mov	r2, r3
 80078fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80078fe:	61fb      	str	r3, [r7, #28]
 8007900:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007902:	69b9      	ldr	r1, [r7, #24]
 8007904:	69fa      	ldr	r2, [r7, #28]
 8007906:	e841 2300 	strex	r3, r2, [r1]
 800790a:	617b      	str	r3, [r7, #20]
   return(result);
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1e4      	bne.n	80078dc <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2202      	movs	r2, #2
 8007916:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007918:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800791c:	4619      	mov	r1, r3
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f89e 	bl	8007a60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007924:	e063      	b.n	80079ee <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800792a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00e      	beq.n	8007950 <HAL_UART_IRQHandler+0x5d8>
 8007932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007936:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d008      	beq.n	8007950 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007946:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f001 f825 	bl	8008998 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800794e:	e051      	b.n	80079f4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007958:	2b00      	cmp	r3, #0
 800795a:	d014      	beq.n	8007986 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800795c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007964:	2b00      	cmp	r3, #0
 8007966:	d105      	bne.n	8007974 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800796c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d008      	beq.n	8007986 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007978:	2b00      	cmp	r3, #0
 800797a:	d03a      	beq.n	80079f2 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	4798      	blx	r3
    }
    return;
 8007984:	e035      	b.n	80079f2 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800798a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800798e:	2b00      	cmp	r3, #0
 8007990:	d009      	beq.n	80079a6 <HAL_UART_IRQHandler+0x62e>
 8007992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 ffcf 	bl	8008942 <UART_EndTransmit_IT>
    return;
 80079a4:	e026      	b.n	80079f4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80079a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d009      	beq.n	80079c6 <HAL_UART_IRQHandler+0x64e>
 80079b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079b6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d003      	beq.n	80079c6 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 fffe 	bl	80089c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079c4:	e016      	b.n	80079f4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80079c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d010      	beq.n	80079f4 <HAL_UART_IRQHandler+0x67c>
 80079d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	da0c      	bge.n	80079f4 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 ffe6 	bl	80089ac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079e0:	e008      	b.n	80079f4 <HAL_UART_IRQHandler+0x67c>
      return;
 80079e2:	bf00      	nop
 80079e4:	e006      	b.n	80079f4 <HAL_UART_IRQHandler+0x67c>
    return;
 80079e6:	bf00      	nop
 80079e8:	e004      	b.n	80079f4 <HAL_UART_IRQHandler+0x67c>
      return;
 80079ea:	bf00      	nop
 80079ec:	e002      	b.n	80079f4 <HAL_UART_IRQHandler+0x67c>
      return;
 80079ee:	bf00      	nop
 80079f0:	e000      	b.n	80079f4 <HAL_UART_IRQHandler+0x67c>
    return;
 80079f2:	bf00      	nop
  }
}
 80079f4:	37e8      	adds	r7, #232	@ 0xe8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop

080079fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007a2c:	bf00      	nop
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a54:	bf00      	nop
 8007a56:	370c      	adds	r7, #12
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	460b      	mov	r3, r1
 8007a6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a6c:	bf00      	nop
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a7c:	b08c      	sub	sp, #48	@ 0x30
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a82:	2300      	movs	r3, #0
 8007a84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	689a      	ldr	r2, [r3, #8]
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	431a      	orrs	r2, r3
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	431a      	orrs	r2, r3
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	69db      	ldr	r3, [r3, #28]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	4baa      	ldr	r3, [pc, #680]	@ (8007d50 <UART_SetConfig+0x2d8>)
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	6812      	ldr	r2, [r2, #0]
 8007aae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ab0:	430b      	orrs	r3, r1
 8007ab2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	68da      	ldr	r2, [r3, #12]
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	430a      	orrs	r2, r1
 8007ac8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	699b      	ldr	r3, [r3, #24]
 8007ace:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a9f      	ldr	r2, [pc, #636]	@ (8007d54 <UART_SetConfig+0x2dc>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d004      	beq.n	8007ae4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	6a1b      	ldr	r3, [r3, #32]
 8007ade:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007aee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	6812      	ldr	r2, [r2, #0]
 8007af6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007af8:	430b      	orrs	r3, r1
 8007afa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b02:	f023 010f 	bic.w	r1, r3, #15
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a90      	ldr	r2, [pc, #576]	@ (8007d58 <UART_SetConfig+0x2e0>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d125      	bne.n	8007b68 <UART_SetConfig+0xf0>
 8007b1c:	4b8f      	ldr	r3, [pc, #572]	@ (8007d5c <UART_SetConfig+0x2e4>)
 8007b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b22:	f003 0303 	and.w	r3, r3, #3
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d81a      	bhi.n	8007b60 <UART_SetConfig+0xe8>
 8007b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b30 <UART_SetConfig+0xb8>)
 8007b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b30:	08007b41 	.word	0x08007b41
 8007b34:	08007b51 	.word	0x08007b51
 8007b38:	08007b49 	.word	0x08007b49
 8007b3c:	08007b59 	.word	0x08007b59
 8007b40:	2301      	movs	r3, #1
 8007b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b46:	e116      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007b48:	2302      	movs	r3, #2
 8007b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b4e:	e112      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007b50:	2304      	movs	r3, #4
 8007b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b56:	e10e      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007b58:	2308      	movs	r3, #8
 8007b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b5e:	e10a      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007b60:	2310      	movs	r3, #16
 8007b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b66:	e106      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a7c      	ldr	r2, [pc, #496]	@ (8007d60 <UART_SetConfig+0x2e8>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d138      	bne.n	8007be4 <UART_SetConfig+0x16c>
 8007b72:	4b7a      	ldr	r3, [pc, #488]	@ (8007d5c <UART_SetConfig+0x2e4>)
 8007b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b78:	f003 030c 	and.w	r3, r3, #12
 8007b7c:	2b0c      	cmp	r3, #12
 8007b7e:	d82d      	bhi.n	8007bdc <UART_SetConfig+0x164>
 8007b80:	a201      	add	r2, pc, #4	@ (adr r2, 8007b88 <UART_SetConfig+0x110>)
 8007b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b86:	bf00      	nop
 8007b88:	08007bbd 	.word	0x08007bbd
 8007b8c:	08007bdd 	.word	0x08007bdd
 8007b90:	08007bdd 	.word	0x08007bdd
 8007b94:	08007bdd 	.word	0x08007bdd
 8007b98:	08007bcd 	.word	0x08007bcd
 8007b9c:	08007bdd 	.word	0x08007bdd
 8007ba0:	08007bdd 	.word	0x08007bdd
 8007ba4:	08007bdd 	.word	0x08007bdd
 8007ba8:	08007bc5 	.word	0x08007bc5
 8007bac:	08007bdd 	.word	0x08007bdd
 8007bb0:	08007bdd 	.word	0x08007bdd
 8007bb4:	08007bdd 	.word	0x08007bdd
 8007bb8:	08007bd5 	.word	0x08007bd5
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bc2:	e0d8      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bca:	e0d4      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007bcc:	2304      	movs	r3, #4
 8007bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bd2:	e0d0      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007bd4:	2308      	movs	r3, #8
 8007bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bda:	e0cc      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007bdc:	2310      	movs	r3, #16
 8007bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007be2:	e0c8      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a5e      	ldr	r2, [pc, #376]	@ (8007d64 <UART_SetConfig+0x2ec>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d125      	bne.n	8007c3a <UART_SetConfig+0x1c2>
 8007bee:	4b5b      	ldr	r3, [pc, #364]	@ (8007d5c <UART_SetConfig+0x2e4>)
 8007bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bf4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007bf8:	2b30      	cmp	r3, #48	@ 0x30
 8007bfa:	d016      	beq.n	8007c2a <UART_SetConfig+0x1b2>
 8007bfc:	2b30      	cmp	r3, #48	@ 0x30
 8007bfe:	d818      	bhi.n	8007c32 <UART_SetConfig+0x1ba>
 8007c00:	2b20      	cmp	r3, #32
 8007c02:	d00a      	beq.n	8007c1a <UART_SetConfig+0x1a2>
 8007c04:	2b20      	cmp	r3, #32
 8007c06:	d814      	bhi.n	8007c32 <UART_SetConfig+0x1ba>
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d002      	beq.n	8007c12 <UART_SetConfig+0x19a>
 8007c0c:	2b10      	cmp	r3, #16
 8007c0e:	d008      	beq.n	8007c22 <UART_SetConfig+0x1aa>
 8007c10:	e00f      	b.n	8007c32 <UART_SetConfig+0x1ba>
 8007c12:	2300      	movs	r3, #0
 8007c14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c18:	e0ad      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007c1a:	2302      	movs	r3, #2
 8007c1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c20:	e0a9      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007c22:	2304      	movs	r3, #4
 8007c24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c28:	e0a5      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007c2a:	2308      	movs	r3, #8
 8007c2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c30:	e0a1      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007c32:	2310      	movs	r3, #16
 8007c34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c38:	e09d      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a4a      	ldr	r2, [pc, #296]	@ (8007d68 <UART_SetConfig+0x2f0>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d125      	bne.n	8007c90 <UART_SetConfig+0x218>
 8007c44:	4b45      	ldr	r3, [pc, #276]	@ (8007d5c <UART_SetConfig+0x2e4>)
 8007c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c4a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007c4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c50:	d016      	beq.n	8007c80 <UART_SetConfig+0x208>
 8007c52:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c54:	d818      	bhi.n	8007c88 <UART_SetConfig+0x210>
 8007c56:	2b80      	cmp	r3, #128	@ 0x80
 8007c58:	d00a      	beq.n	8007c70 <UART_SetConfig+0x1f8>
 8007c5a:	2b80      	cmp	r3, #128	@ 0x80
 8007c5c:	d814      	bhi.n	8007c88 <UART_SetConfig+0x210>
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d002      	beq.n	8007c68 <UART_SetConfig+0x1f0>
 8007c62:	2b40      	cmp	r3, #64	@ 0x40
 8007c64:	d008      	beq.n	8007c78 <UART_SetConfig+0x200>
 8007c66:	e00f      	b.n	8007c88 <UART_SetConfig+0x210>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c6e:	e082      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007c70:	2302      	movs	r3, #2
 8007c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c76:	e07e      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007c78:	2304      	movs	r3, #4
 8007c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c7e:	e07a      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007c80:	2308      	movs	r3, #8
 8007c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c86:	e076      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007c88:	2310      	movs	r3, #16
 8007c8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c8e:	e072      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a35      	ldr	r2, [pc, #212]	@ (8007d6c <UART_SetConfig+0x2f4>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d12a      	bne.n	8007cf0 <UART_SetConfig+0x278>
 8007c9a:	4b30      	ldr	r3, [pc, #192]	@ (8007d5c <UART_SetConfig+0x2e4>)
 8007c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ca0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ca4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ca8:	d01a      	beq.n	8007ce0 <UART_SetConfig+0x268>
 8007caa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007cae:	d81b      	bhi.n	8007ce8 <UART_SetConfig+0x270>
 8007cb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cb4:	d00c      	beq.n	8007cd0 <UART_SetConfig+0x258>
 8007cb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cba:	d815      	bhi.n	8007ce8 <UART_SetConfig+0x270>
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d003      	beq.n	8007cc8 <UART_SetConfig+0x250>
 8007cc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cc4:	d008      	beq.n	8007cd8 <UART_SetConfig+0x260>
 8007cc6:	e00f      	b.n	8007ce8 <UART_SetConfig+0x270>
 8007cc8:	2300      	movs	r3, #0
 8007cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cce:	e052      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cd6:	e04e      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007cd8:	2304      	movs	r3, #4
 8007cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cde:	e04a      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007ce0:	2308      	movs	r3, #8
 8007ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ce6:	e046      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007ce8:	2310      	movs	r3, #16
 8007cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cee:	e042      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a17      	ldr	r2, [pc, #92]	@ (8007d54 <UART_SetConfig+0x2dc>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d13a      	bne.n	8007d70 <UART_SetConfig+0x2f8>
 8007cfa:	4b18      	ldr	r3, [pc, #96]	@ (8007d5c <UART_SetConfig+0x2e4>)
 8007cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007d04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d08:	d01a      	beq.n	8007d40 <UART_SetConfig+0x2c8>
 8007d0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d0e:	d81b      	bhi.n	8007d48 <UART_SetConfig+0x2d0>
 8007d10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d14:	d00c      	beq.n	8007d30 <UART_SetConfig+0x2b8>
 8007d16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d1a:	d815      	bhi.n	8007d48 <UART_SetConfig+0x2d0>
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d003      	beq.n	8007d28 <UART_SetConfig+0x2b0>
 8007d20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d24:	d008      	beq.n	8007d38 <UART_SetConfig+0x2c0>
 8007d26:	e00f      	b.n	8007d48 <UART_SetConfig+0x2d0>
 8007d28:	2300      	movs	r3, #0
 8007d2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d2e:	e022      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007d30:	2302      	movs	r3, #2
 8007d32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d36:	e01e      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007d38:	2304      	movs	r3, #4
 8007d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d3e:	e01a      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007d40:	2308      	movs	r3, #8
 8007d42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d46:	e016      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007d48:	2310      	movs	r3, #16
 8007d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d4e:	e012      	b.n	8007d76 <UART_SetConfig+0x2fe>
 8007d50:	cfff69f3 	.word	0xcfff69f3
 8007d54:	40008000 	.word	0x40008000
 8007d58:	40013800 	.word	0x40013800
 8007d5c:	40021000 	.word	0x40021000
 8007d60:	40004400 	.word	0x40004400
 8007d64:	40004800 	.word	0x40004800
 8007d68:	40004c00 	.word	0x40004c00
 8007d6c:	40005000 	.word	0x40005000
 8007d70:	2310      	movs	r3, #16
 8007d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4aae      	ldr	r2, [pc, #696]	@ (8008034 <UART_SetConfig+0x5bc>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	f040 8097 	bne.w	8007eb0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d82:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007d86:	2b08      	cmp	r3, #8
 8007d88:	d823      	bhi.n	8007dd2 <UART_SetConfig+0x35a>
 8007d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d90 <UART_SetConfig+0x318>)
 8007d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d90:	08007db5 	.word	0x08007db5
 8007d94:	08007dd3 	.word	0x08007dd3
 8007d98:	08007dbd 	.word	0x08007dbd
 8007d9c:	08007dd3 	.word	0x08007dd3
 8007da0:	08007dc3 	.word	0x08007dc3
 8007da4:	08007dd3 	.word	0x08007dd3
 8007da8:	08007dd3 	.word	0x08007dd3
 8007dac:	08007dd3 	.word	0x08007dd3
 8007db0:	08007dcb 	.word	0x08007dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007db4:	f7fe faf0 	bl	8006398 <HAL_RCC_GetPCLK1Freq>
 8007db8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007dba:	e010      	b.n	8007dde <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dbc:	4b9e      	ldr	r3, [pc, #632]	@ (8008038 <UART_SetConfig+0x5c0>)
 8007dbe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007dc0:	e00d      	b.n	8007dde <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dc2:	f7fe fa7b 	bl	80062bc <HAL_RCC_GetSysClockFreq>
 8007dc6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007dc8:	e009      	b.n	8007dde <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007dd0:	e005      	b.n	8007dde <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007ddc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 8130 	beq.w	8008046 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dea:	4a94      	ldr	r2, [pc, #592]	@ (800803c <UART_SetConfig+0x5c4>)
 8007dec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007df0:	461a      	mov	r2, r3
 8007df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007df8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	685a      	ldr	r2, [r3, #4]
 8007dfe:	4613      	mov	r3, r2
 8007e00:	005b      	lsls	r3, r3, #1
 8007e02:	4413      	add	r3, r2
 8007e04:	69ba      	ldr	r2, [r7, #24]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d305      	bcc.n	8007e16 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e10:	69ba      	ldr	r2, [r7, #24]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d903      	bls.n	8007e1e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007e1c:	e113      	b.n	8008046 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e20:	2200      	movs	r2, #0
 8007e22:	60bb      	str	r3, [r7, #8]
 8007e24:	60fa      	str	r2, [r7, #12]
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e2a:	4a84      	ldr	r2, [pc, #528]	@ (800803c <UART_SetConfig+0x5c4>)
 8007e2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	2200      	movs	r2, #0
 8007e34:	603b      	str	r3, [r7, #0]
 8007e36:	607a      	str	r2, [r7, #4]
 8007e38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e40:	f7f8 ff62 	bl	8000d08 <__aeabi_uldivmod>
 8007e44:	4602      	mov	r2, r0
 8007e46:	460b      	mov	r3, r1
 8007e48:	4610      	mov	r0, r2
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	f04f 0200 	mov.w	r2, #0
 8007e50:	f04f 0300 	mov.w	r3, #0
 8007e54:	020b      	lsls	r3, r1, #8
 8007e56:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007e5a:	0202      	lsls	r2, r0, #8
 8007e5c:	6979      	ldr	r1, [r7, #20]
 8007e5e:	6849      	ldr	r1, [r1, #4]
 8007e60:	0849      	lsrs	r1, r1, #1
 8007e62:	2000      	movs	r0, #0
 8007e64:	460c      	mov	r4, r1
 8007e66:	4605      	mov	r5, r0
 8007e68:	eb12 0804 	adds.w	r8, r2, r4
 8007e6c:	eb43 0905 	adc.w	r9, r3, r5
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	469a      	mov	sl, r3
 8007e78:	4693      	mov	fp, r2
 8007e7a:	4652      	mov	r2, sl
 8007e7c:	465b      	mov	r3, fp
 8007e7e:	4640      	mov	r0, r8
 8007e80:	4649      	mov	r1, r9
 8007e82:	f7f8 ff41 	bl	8000d08 <__aeabi_uldivmod>
 8007e86:	4602      	mov	r2, r0
 8007e88:	460b      	mov	r3, r1
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e8e:	6a3b      	ldr	r3, [r7, #32]
 8007e90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e94:	d308      	bcc.n	8007ea8 <UART_SetConfig+0x430>
 8007e96:	6a3b      	ldr	r3, [r7, #32]
 8007e98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e9c:	d204      	bcs.n	8007ea8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	6a3a      	ldr	r2, [r7, #32]
 8007ea4:	60da      	str	r2, [r3, #12]
 8007ea6:	e0ce      	b.n	8008046 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007eae:	e0ca      	b.n	8008046 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	69db      	ldr	r3, [r3, #28]
 8007eb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007eb8:	d166      	bne.n	8007f88 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007eba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007ebe:	2b08      	cmp	r3, #8
 8007ec0:	d827      	bhi.n	8007f12 <UART_SetConfig+0x49a>
 8007ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ec8 <UART_SetConfig+0x450>)
 8007ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec8:	08007eed 	.word	0x08007eed
 8007ecc:	08007ef5 	.word	0x08007ef5
 8007ed0:	08007efd 	.word	0x08007efd
 8007ed4:	08007f13 	.word	0x08007f13
 8007ed8:	08007f03 	.word	0x08007f03
 8007edc:	08007f13 	.word	0x08007f13
 8007ee0:	08007f13 	.word	0x08007f13
 8007ee4:	08007f13 	.word	0x08007f13
 8007ee8:	08007f0b 	.word	0x08007f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007eec:	f7fe fa54 	bl	8006398 <HAL_RCC_GetPCLK1Freq>
 8007ef0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ef2:	e014      	b.n	8007f1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ef4:	f7fe fa66 	bl	80063c4 <HAL_RCC_GetPCLK2Freq>
 8007ef8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007efa:	e010      	b.n	8007f1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007efc:	4b4e      	ldr	r3, [pc, #312]	@ (8008038 <UART_SetConfig+0x5c0>)
 8007efe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007f00:	e00d      	b.n	8007f1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f02:	f7fe f9db 	bl	80062bc <HAL_RCC_GetSysClockFreq>
 8007f06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f08:	e009      	b.n	8007f1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007f10:	e005      	b.n	8007f1e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007f12:	2300      	movs	r3, #0
 8007f14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007f1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 8090 	beq.w	8008046 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f2a:	4a44      	ldr	r2, [pc, #272]	@ (800803c <UART_SetConfig+0x5c4>)
 8007f2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f30:	461a      	mov	r2, r3
 8007f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f34:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f38:	005a      	lsls	r2, r3, #1
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	085b      	lsrs	r3, r3, #1
 8007f40:	441a      	add	r2, r3
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f4c:	6a3b      	ldr	r3, [r7, #32]
 8007f4e:	2b0f      	cmp	r3, #15
 8007f50:	d916      	bls.n	8007f80 <UART_SetConfig+0x508>
 8007f52:	6a3b      	ldr	r3, [r7, #32]
 8007f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f58:	d212      	bcs.n	8007f80 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f5a:	6a3b      	ldr	r3, [r7, #32]
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	f023 030f 	bic.w	r3, r3, #15
 8007f62:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f64:	6a3b      	ldr	r3, [r7, #32]
 8007f66:	085b      	lsrs	r3, r3, #1
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	f003 0307 	and.w	r3, r3, #7
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	8bfb      	ldrh	r3, [r7, #30]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	8bfa      	ldrh	r2, [r7, #30]
 8007f7c:	60da      	str	r2, [r3, #12]
 8007f7e:	e062      	b.n	8008046 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007f86:	e05e      	b.n	8008046 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f88:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007f8c:	2b08      	cmp	r3, #8
 8007f8e:	d828      	bhi.n	8007fe2 <UART_SetConfig+0x56a>
 8007f90:	a201      	add	r2, pc, #4	@ (adr r2, 8007f98 <UART_SetConfig+0x520>)
 8007f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f96:	bf00      	nop
 8007f98:	08007fbd 	.word	0x08007fbd
 8007f9c:	08007fc5 	.word	0x08007fc5
 8007fa0:	08007fcd 	.word	0x08007fcd
 8007fa4:	08007fe3 	.word	0x08007fe3
 8007fa8:	08007fd3 	.word	0x08007fd3
 8007fac:	08007fe3 	.word	0x08007fe3
 8007fb0:	08007fe3 	.word	0x08007fe3
 8007fb4:	08007fe3 	.word	0x08007fe3
 8007fb8:	08007fdb 	.word	0x08007fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fbc:	f7fe f9ec 	bl	8006398 <HAL_RCC_GetPCLK1Freq>
 8007fc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fc2:	e014      	b.n	8007fee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fc4:	f7fe f9fe 	bl	80063c4 <HAL_RCC_GetPCLK2Freq>
 8007fc8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fca:	e010      	b.n	8007fee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8008038 <UART_SetConfig+0x5c0>)
 8007fce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007fd0:	e00d      	b.n	8007fee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fd2:	f7fe f973 	bl	80062bc <HAL_RCC_GetSysClockFreq>
 8007fd6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fd8:	e009      	b.n	8007fee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007fe0:	e005      	b.n	8007fee <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007fec:	bf00      	nop
    }

    if (pclk != 0U)
 8007fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d028      	beq.n	8008046 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ff8:	4a10      	ldr	r2, [pc, #64]	@ (800803c <UART_SetConfig+0x5c4>)
 8007ffa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ffe:	461a      	mov	r2, r3
 8008000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008002:	fbb3 f2f2 	udiv	r2, r3, r2
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	085b      	lsrs	r3, r3, #1
 800800c:	441a      	add	r2, r3
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	fbb2 f3f3 	udiv	r3, r2, r3
 8008016:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008018:	6a3b      	ldr	r3, [r7, #32]
 800801a:	2b0f      	cmp	r3, #15
 800801c:	d910      	bls.n	8008040 <UART_SetConfig+0x5c8>
 800801e:	6a3b      	ldr	r3, [r7, #32]
 8008020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008024:	d20c      	bcs.n	8008040 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	b29a      	uxth	r2, r3
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	60da      	str	r2, [r3, #12]
 8008030:	e009      	b.n	8008046 <UART_SetConfig+0x5ce>
 8008032:	bf00      	nop
 8008034:	40008000 	.word	0x40008000
 8008038:	00f42400 	.word	0x00f42400
 800803c:	0801fd4c 	.word	0x0801fd4c
      }
      else
      {
        ret = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	2201      	movs	r2, #1
 800804a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	2201      	movs	r2, #1
 8008052:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	2200      	movs	r2, #0
 800805a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	2200      	movs	r2, #0
 8008060:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008062:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008066:	4618      	mov	r0, r3
 8008068:	3730      	adds	r7, #48	@ 0x30
 800806a:	46bd      	mov	sp, r7
 800806c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008070 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800807c:	f003 0308 	and.w	r3, r3, #8
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00a      	beq.n	800809a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	430a      	orrs	r2, r1
 8008098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00a      	beq.n	80080bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	430a      	orrs	r2, r1
 80080ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c0:	f003 0302 	and.w	r3, r3, #2
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00a      	beq.n	80080de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	430a      	orrs	r2, r1
 80080dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080e2:	f003 0304 	and.w	r3, r3, #4
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00a      	beq.n	8008100 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	430a      	orrs	r2, r1
 80080fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008104:	f003 0310 	and.w	r3, r3, #16
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00a      	beq.n	8008122 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	430a      	orrs	r2, r1
 8008120:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008126:	f003 0320 	and.w	r3, r3, #32
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00a      	beq.n	8008144 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	430a      	orrs	r2, r1
 8008142:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800814c:	2b00      	cmp	r3, #0
 800814e:	d01a      	beq.n	8008186 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	430a      	orrs	r2, r1
 8008164:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800816a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800816e:	d10a      	bne.n	8008186 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	430a      	orrs	r2, r1
 8008184:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800818a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00a      	beq.n	80081a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	430a      	orrs	r2, r1
 80081a6:	605a      	str	r2, [r3, #4]
  }
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b098      	sub	sp, #96	@ 0x60
 80081b8:	af02      	add	r7, sp, #8
 80081ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081c4:	f7fb fdf8 	bl	8003db8 <HAL_GetTick>
 80081c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 0308 	and.w	r3, r3, #8
 80081d4:	2b08      	cmp	r3, #8
 80081d6:	d12f      	bne.n	8008238 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081e0:	2200      	movs	r2, #0
 80081e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f88e 	bl	8008308 <UART_WaitOnFlagUntilTimeout>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d022      	beq.n	8008238 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081fa:	e853 3f00 	ldrex	r3, [r3]
 80081fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008202:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008206:	653b      	str	r3, [r7, #80]	@ 0x50
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	461a      	mov	r2, r3
 800820e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008210:	647b      	str	r3, [r7, #68]	@ 0x44
 8008212:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008214:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008216:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008218:	e841 2300 	strex	r3, r2, [r1]
 800821c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800821e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1e6      	bne.n	80081f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2220      	movs	r2, #32
 8008228:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008234:	2303      	movs	r3, #3
 8008236:	e063      	b.n	8008300 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 0304 	and.w	r3, r3, #4
 8008242:	2b04      	cmp	r3, #4
 8008244:	d149      	bne.n	80082da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008246:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800824a:	9300      	str	r3, [sp, #0]
 800824c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800824e:	2200      	movs	r2, #0
 8008250:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f857 	bl	8008308 <UART_WaitOnFlagUntilTimeout>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d03c      	beq.n	80082da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008268:	e853 3f00 	ldrex	r3, [r3]
 800826c:	623b      	str	r3, [r7, #32]
   return(result);
 800826e:	6a3b      	ldr	r3, [r7, #32]
 8008270:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008274:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	461a      	mov	r2, r3
 800827c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800827e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008280:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008282:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008284:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008286:	e841 2300 	strex	r3, r2, [r1]
 800828a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800828c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1e6      	bne.n	8008260 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3308      	adds	r3, #8
 8008298:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	e853 3f00 	ldrex	r3, [r3]
 80082a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f023 0301 	bic.w	r3, r3, #1
 80082a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	3308      	adds	r3, #8
 80082b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082b2:	61fa      	str	r2, [r7, #28]
 80082b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b6:	69b9      	ldr	r1, [r7, #24]
 80082b8:	69fa      	ldr	r2, [r7, #28]
 80082ba:	e841 2300 	strex	r3, r2, [r1]
 80082be:	617b      	str	r3, [r7, #20]
   return(result);
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1e5      	bne.n	8008292 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2220      	movs	r2, #32
 80082ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e012      	b.n	8008300 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2220      	movs	r2, #32
 80082de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2220      	movs	r2, #32
 80082e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3758      	adds	r7, #88	@ 0x58
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	603b      	str	r3, [r7, #0]
 8008314:	4613      	mov	r3, r2
 8008316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008318:	e04f      	b.n	80083ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008320:	d04b      	beq.n	80083ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008322:	f7fb fd49 	bl	8003db8 <HAL_GetTick>
 8008326:	4602      	mov	r2, r0
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	69ba      	ldr	r2, [r7, #24]
 800832e:	429a      	cmp	r2, r3
 8008330:	d302      	bcc.n	8008338 <UART_WaitOnFlagUntilTimeout+0x30>
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d101      	bne.n	800833c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008338:	2303      	movs	r3, #3
 800833a:	e04e      	b.n	80083da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 0304 	and.w	r3, r3, #4
 8008346:	2b00      	cmp	r3, #0
 8008348:	d037      	beq.n	80083ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	2b80      	cmp	r3, #128	@ 0x80
 800834e:	d034      	beq.n	80083ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	2b40      	cmp	r3, #64	@ 0x40
 8008354:	d031      	beq.n	80083ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	69db      	ldr	r3, [r3, #28]
 800835c:	f003 0308 	and.w	r3, r3, #8
 8008360:	2b08      	cmp	r3, #8
 8008362:	d110      	bne.n	8008386 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2208      	movs	r2, #8
 800836a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f000 f920 	bl	80085b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2208      	movs	r2, #8
 8008376:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	e029      	b.n	80083da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	69db      	ldr	r3, [r3, #28]
 800838c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008390:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008394:	d111      	bne.n	80083ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800839e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f000 f906 	bl	80085b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2220      	movs	r2, #32
 80083aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e00f      	b.n	80083da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	69da      	ldr	r2, [r3, #28]
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	4013      	ands	r3, r2
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	bf0c      	ite	eq
 80083ca:	2301      	moveq	r3, #1
 80083cc:	2300      	movne	r3, #0
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	461a      	mov	r2, r3
 80083d2:	79fb      	ldrb	r3, [r7, #7]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d0a0      	beq.n	800831a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
	...

080083e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b096      	sub	sp, #88	@ 0x58
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	4613      	mov	r3, r2
 80083f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	88fa      	ldrh	r2, [r7, #6]
 80083fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2200      	movs	r2, #0
 8008404:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2222      	movs	r2, #34	@ 0x22
 800840c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008416:	2b00      	cmp	r3, #0
 8008418:	d02d      	beq.n	8008476 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008420:	4a40      	ldr	r2, [pc, #256]	@ (8008524 <UART_Start_Receive_DMA+0x140>)
 8008422:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800842a:	4a3f      	ldr	r2, [pc, #252]	@ (8008528 <UART_Start_Receive_DMA+0x144>)
 800842c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008434:	4a3d      	ldr	r2, [pc, #244]	@ (800852c <UART_Start_Receive_DMA+0x148>)
 8008436:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800843e:	2200      	movs	r2, #0
 8008440:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	3324      	adds	r3, #36	@ 0x24
 800844e:	4619      	mov	r1, r3
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008454:	461a      	mov	r2, r3
 8008456:	88fb      	ldrh	r3, [r7, #6]
 8008458:	f7fb fe5e 	bl	8004118 <HAL_DMA_Start_IT>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d009      	beq.n	8008476 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2210      	movs	r2, #16
 8008466:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2220      	movs	r2, #32
 800846e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e051      	b.n	800851a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d018      	beq.n	80084b0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008486:	e853 3f00 	ldrex	r3, [r3]
 800848a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800848c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800848e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008492:	657b      	str	r3, [r7, #84]	@ 0x54
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	461a      	mov	r2, r3
 800849a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800849c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800849e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80084a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084a4:	e841 2300 	strex	r3, r2, [r1]
 80084a8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80084aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d1e6      	bne.n	800847e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	3308      	adds	r3, #8
 80084b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ba:	e853 3f00 	ldrex	r3, [r3]
 80084be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c2:	f043 0301 	orr.w	r3, r3, #1
 80084c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	3308      	adds	r3, #8
 80084ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80084d0:	637a      	str	r2, [r7, #52]	@ 0x34
 80084d2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80084d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80084d8:	e841 2300 	strex	r3, r2, [r1]
 80084dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80084de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1e5      	bne.n	80084b0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	3308      	adds	r3, #8
 80084ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	e853 3f00 	ldrex	r3, [r3]
 80084f2:	613b      	str	r3, [r7, #16]
   return(result);
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	3308      	adds	r3, #8
 8008502:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008504:	623a      	str	r2, [r7, #32]
 8008506:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008508:	69f9      	ldr	r1, [r7, #28]
 800850a:	6a3a      	ldr	r2, [r7, #32]
 800850c:	e841 2300 	strex	r3, r2, [r1]
 8008510:	61bb      	str	r3, [r7, #24]
   return(result);
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d1e5      	bne.n	80084e4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3758      	adds	r7, #88	@ 0x58
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	08008735 	.word	0x08008735
 8008528:	08008861 	.word	0x08008861
 800852c:	0800889f 	.word	0x0800889f

08008530 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008530:	b480      	push	{r7}
 8008532:	b08f      	sub	sp, #60	@ 0x3c
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853e:	6a3b      	ldr	r3, [r7, #32]
 8008540:	e853 3f00 	ldrex	r3, [r3]
 8008544:	61fb      	str	r3, [r7, #28]
   return(result);
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800854c:	637b      	str	r3, [r7, #52]	@ 0x34
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	461a      	mov	r2, r3
 8008554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008556:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008558:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800855c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800855e:	e841 2300 	strex	r3, r2, [r1]
 8008562:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1e6      	bne.n	8008538 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3308      	adds	r3, #8
 8008570:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	e853 3f00 	ldrex	r3, [r3]
 8008578:	60bb      	str	r3, [r7, #8]
   return(result);
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008580:	633b      	str	r3, [r7, #48]	@ 0x30
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	3308      	adds	r3, #8
 8008588:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800858a:	61ba      	str	r2, [r7, #24]
 800858c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858e:	6979      	ldr	r1, [r7, #20]
 8008590:	69ba      	ldr	r2, [r7, #24]
 8008592:	e841 2300 	strex	r3, r2, [r1]
 8008596:	613b      	str	r3, [r7, #16]
   return(result);
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1e5      	bne.n	800856a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2220      	movs	r2, #32
 80085a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80085a6:	bf00      	nop
 80085a8:	373c      	adds	r7, #60	@ 0x3c
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr

080085b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085b2:	b480      	push	{r7}
 80085b4:	b095      	sub	sp, #84	@ 0x54
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085c2:	e853 3f00 	ldrex	r3, [r3]
 80085c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80085c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	461a      	mov	r2, r3
 80085d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80085da:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80085de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80085e0:	e841 2300 	strex	r3, r2, [r1]
 80085e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80085e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d1e6      	bne.n	80085ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	3308      	adds	r3, #8
 80085f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f4:	6a3b      	ldr	r3, [r7, #32]
 80085f6:	e853 3f00 	ldrex	r3, [r3]
 80085fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008602:	f023 0301 	bic.w	r3, r3, #1
 8008606:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3308      	adds	r3, #8
 800860e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008610:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008612:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008614:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008616:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008618:	e841 2300 	strex	r3, r2, [r1]
 800861c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800861e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1e3      	bne.n	80085ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008628:	2b01      	cmp	r3, #1
 800862a:	d118      	bne.n	800865e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	e853 3f00 	ldrex	r3, [r3]
 8008638:	60bb      	str	r3, [r7, #8]
   return(result);
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	f023 0310 	bic.w	r3, r3, #16
 8008640:	647b      	str	r3, [r7, #68]	@ 0x44
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	461a      	mov	r2, r3
 8008648:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800864a:	61bb      	str	r3, [r7, #24]
 800864c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864e:	6979      	ldr	r1, [r7, #20]
 8008650:	69ba      	ldr	r2, [r7, #24]
 8008652:	e841 2300 	strex	r3, r2, [r1]
 8008656:	613b      	str	r3, [r7, #16]
   return(result);
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1e6      	bne.n	800862c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2220      	movs	r2, #32
 8008662:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008672:	bf00      	nop
 8008674:	3754      	adds	r7, #84	@ 0x54
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr

0800867e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b090      	sub	sp, #64	@ 0x40
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800868a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0320 	and.w	r3, r3, #32
 8008696:	2b00      	cmp	r3, #0
 8008698:	d137      	bne.n	800870a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800869a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800869c:	2200      	movs	r2, #0
 800869e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80086a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	3308      	adds	r3, #8
 80086a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ac:	e853 3f00 	ldrex	r3, [r3]
 80086b0:	623b      	str	r3, [r7, #32]
   return(result);
 80086b2:	6a3b      	ldr	r3, [r7, #32]
 80086b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80086ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3308      	adds	r3, #8
 80086c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80086c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80086c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086ca:	e841 2300 	strex	r3, r2, [r1]
 80086ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1e5      	bne.n	80086a2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	e853 3f00 	ldrex	r3, [r3]
 80086e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80086ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	461a      	mov	r2, r3
 80086f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086f4:	61fb      	str	r3, [r7, #28]
 80086f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f8:	69b9      	ldr	r1, [r7, #24]
 80086fa:	69fa      	ldr	r2, [r7, #28]
 80086fc:	e841 2300 	strex	r3, r2, [r1]
 8008700:	617b      	str	r3, [r7, #20]
   return(result);
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d1e6      	bne.n	80086d6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008708:	e002      	b.n	8008710 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800870a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800870c:	f7ff f976 	bl	80079fc <HAL_UART_TxCpltCallback>
}
 8008710:	bf00      	nop
 8008712:	3740      	adds	r7, #64	@ 0x40
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008724:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f7ff f972 	bl	8007a10 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800872c:	bf00      	nop
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b09c      	sub	sp, #112	@ 0x70
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008740:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 0320 	and.w	r3, r3, #32
 800874c:	2b00      	cmp	r3, #0
 800874e:	d171      	bne.n	8008834 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008750:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008752:	2200      	movs	r2, #0
 8008754:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008758:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008760:	e853 3f00 	ldrex	r3, [r3]
 8008764:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008768:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800876c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800876e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	461a      	mov	r2, r3
 8008774:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008776:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008778:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800877c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800877e:	e841 2300 	strex	r3, r2, [r1]
 8008782:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008784:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1e6      	bne.n	8008758 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800878a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	3308      	adds	r3, #8
 8008790:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008794:	e853 3f00 	ldrex	r3, [r3]
 8008798:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800879a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800879c:	f023 0301 	bic.w	r3, r3, #1
 80087a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80087a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	3308      	adds	r3, #8
 80087a8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80087aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80087ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80087b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087b2:	e841 2300 	strex	r3, r2, [r1]
 80087b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80087b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1e5      	bne.n	800878a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	3308      	adds	r3, #8
 80087c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c8:	e853 3f00 	ldrex	r3, [r3]
 80087cc:	623b      	str	r3, [r7, #32]
   return(result);
 80087ce:	6a3b      	ldr	r3, [r7, #32]
 80087d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80087d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	3308      	adds	r3, #8
 80087dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80087de:	633a      	str	r2, [r7, #48]	@ 0x30
 80087e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087e6:	e841 2300 	strex	r3, r2, [r1]
 80087ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80087ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1e5      	bne.n	80087be <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80087f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087f4:	2220      	movs	r2, #32
 80087f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d118      	bne.n	8008834 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008802:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	e853 3f00 	ldrex	r3, [r3]
 800880e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f023 0310 	bic.w	r3, r3, #16
 8008816:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008818:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	461a      	mov	r2, r3
 800881e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008820:	61fb      	str	r3, [r7, #28]
 8008822:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008824:	69b9      	ldr	r1, [r7, #24]
 8008826:	69fa      	ldr	r2, [r7, #28]
 8008828:	e841 2300 	strex	r3, r2, [r1]
 800882c:	617b      	str	r3, [r7, #20]
   return(result);
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d1e6      	bne.n	8008802 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008834:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008836:	2200      	movs	r2, #0
 8008838:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800883a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800883c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800883e:	2b01      	cmp	r3, #1
 8008840:	d107      	bne.n	8008852 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008842:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008844:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008848:	4619      	mov	r1, r3
 800884a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800884c:	f7ff f908 	bl	8007a60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008850:	e002      	b.n	8008858 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008852:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008854:	f7ff f8e6 	bl	8007a24 <HAL_UART_RxCpltCallback>
}
 8008858:	bf00      	nop
 800885a:	3770      	adds	r7, #112	@ 0x70
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800886c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2201      	movs	r2, #1
 8008872:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008878:	2b01      	cmp	r3, #1
 800887a:	d109      	bne.n	8008890 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008882:	085b      	lsrs	r3, r3, #1
 8008884:	b29b      	uxth	r3, r3
 8008886:	4619      	mov	r1, r3
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f7ff f8e9 	bl	8007a60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800888e:	e002      	b.n	8008896 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008890:	68f8      	ldr	r0, [r7, #12]
 8008892:	f7ff f8d1 	bl	8007a38 <HAL_UART_RxHalfCpltCallback>
}
 8008896:	bf00      	nop
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b086      	sub	sp, #24
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088aa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088b2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088ba:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088c6:	2b80      	cmp	r3, #128	@ 0x80
 80088c8:	d109      	bne.n	80088de <UART_DMAError+0x40>
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	2b21      	cmp	r3, #33	@ 0x21
 80088ce:	d106      	bne.n	80088de <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80088d8:	6978      	ldr	r0, [r7, #20]
 80088da:	f7ff fe29 	bl	8008530 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088e8:	2b40      	cmp	r3, #64	@ 0x40
 80088ea:	d109      	bne.n	8008900 <UART_DMAError+0x62>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2b22      	cmp	r3, #34	@ 0x22
 80088f0:	d106      	bne.n	8008900 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80088fa:	6978      	ldr	r0, [r7, #20]
 80088fc:	f7ff fe59 	bl	80085b2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008906:	f043 0210 	orr.w	r2, r3, #16
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008910:	6978      	ldr	r0, [r7, #20]
 8008912:	f7ff f89b 	bl	8007a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008916:	bf00      	nop
 8008918:	3718      	adds	r7, #24
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b084      	sub	sp, #16
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800892a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2200      	movs	r2, #0
 8008930:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f7ff f889 	bl	8007a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800893a:	bf00      	nop
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b088      	sub	sp, #32
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	e853 3f00 	ldrex	r3, [r3]
 8008956:	60bb      	str	r3, [r7, #8]
   return(result);
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800895e:	61fb      	str	r3, [r7, #28]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	461a      	mov	r2, r3
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	61bb      	str	r3, [r7, #24]
 800896a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896c:	6979      	ldr	r1, [r7, #20]
 800896e:	69ba      	ldr	r2, [r7, #24]
 8008970:	e841 2300 	strex	r3, r2, [r1]
 8008974:	613b      	str	r3, [r7, #16]
   return(result);
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1e6      	bne.n	800894a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2220      	movs	r2, #32
 8008980:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7ff f836 	bl	80079fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008990:	bf00      	nop
 8008992:	3720      	adds	r7, #32
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80089b4:	bf00      	nop
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80089c8:	bf00      	nop
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d101      	bne.n	80089ea <HAL_UARTEx_DisableFifoMode+0x16>
 80089e6:	2302      	movs	r3, #2
 80089e8:	e027      	b.n	8008a3a <HAL_UARTEx_DisableFifoMode+0x66>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2224      	movs	r2, #36	@ 0x24
 80089f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f022 0201 	bic.w	r2, r2, #1
 8008a10:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008a18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2220      	movs	r2, #32
 8008a2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3714      	adds	r7, #20
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr

08008a46 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b084      	sub	sp, #16
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
 8008a4e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d101      	bne.n	8008a5e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a5a:	2302      	movs	r3, #2
 8008a5c:	e02d      	b.n	8008aba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2201      	movs	r2, #1
 8008a62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2224      	movs	r2, #36	@ 0x24
 8008a6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f022 0201 	bic.w	r2, r2, #1
 8008a84:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	683a      	ldr	r2, [r7, #0]
 8008a96:	430a      	orrs	r2, r1
 8008a98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f850 	bl	8008b40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2220      	movs	r2, #32
 8008aac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b084      	sub	sp, #16
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
 8008aca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d101      	bne.n	8008ada <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	e02d      	b.n	8008b36 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2224      	movs	r2, #36	@ 0x24
 8008ae6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f022 0201 	bic.w	r2, r2, #1
 8008b00:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	683a      	ldr	r2, [r7, #0]
 8008b12:	430a      	orrs	r2, r1
 8008b14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f812 	bl	8008b40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2220      	movs	r2, #32
 8008b28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
	...

08008b40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d108      	bne.n	8008b62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b60:	e031      	b.n	8008bc6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b62:	2308      	movs	r3, #8
 8008b64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b66:	2308      	movs	r3, #8
 8008b68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	0e5b      	lsrs	r3, r3, #25
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	f003 0307 	and.w	r3, r3, #7
 8008b78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	0f5b      	lsrs	r3, r3, #29
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	f003 0307 	and.w	r3, r3, #7
 8008b88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b8a:	7bbb      	ldrb	r3, [r7, #14]
 8008b8c:	7b3a      	ldrb	r2, [r7, #12]
 8008b8e:	4911      	ldr	r1, [pc, #68]	@ (8008bd4 <UARTEx_SetNbDataToProcess+0x94>)
 8008b90:	5c8a      	ldrb	r2, [r1, r2]
 8008b92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b96:	7b3a      	ldrb	r2, [r7, #12]
 8008b98:	490f      	ldr	r1, [pc, #60]	@ (8008bd8 <UARTEx_SetNbDataToProcess+0x98>)
 8008b9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ba8:	7bfb      	ldrb	r3, [r7, #15]
 8008baa:	7b7a      	ldrb	r2, [r7, #13]
 8008bac:	4909      	ldr	r1, [pc, #36]	@ (8008bd4 <UARTEx_SetNbDataToProcess+0x94>)
 8008bae:	5c8a      	ldrb	r2, [r1, r2]
 8008bb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008bb4:	7b7a      	ldrb	r2, [r7, #13]
 8008bb6:	4908      	ldr	r1, [pc, #32]	@ (8008bd8 <UARTEx_SetNbDataToProcess+0x98>)
 8008bb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bba:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bbe:	b29a      	uxth	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008bc6:	bf00      	nop
 8008bc8:	3714      	adds	r7, #20
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop
 8008bd4:	0801fd64 	.word	0x0801fd64
 8008bd8:	0801fd6c 	.word	0x0801fd6c

08008bdc <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b088      	sub	sp, #32
 8008be0:	af04      	add	r7, sp, #16
 8008be2:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8008be4:	2364      	movs	r3, #100	@ 0x64
 8008be6:	9302      	str	r3, [sp, #8]
 8008be8:	2301      	movs	r3, #1
 8008bea:	9301      	str	r3, [sp, #4]
 8008bec:	f107 030f 	add.w	r3, r7, #15
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	2275      	movs	r2, #117	@ 0x75
 8008bf6:	21d0      	movs	r1, #208	@ 0xd0
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f7fc f89f 	bl	8004d3c <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8008bfe:	7bfb      	ldrb	r3, [r7, #15]
 8008c00:	2b68      	cmp	r3, #104	@ 0x68
 8008c02:	d13d      	bne.n	8008c80 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8008c04:	2300      	movs	r3, #0
 8008c06:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8008c08:	2364      	movs	r3, #100	@ 0x64
 8008c0a:	9302      	str	r3, [sp, #8]
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	9301      	str	r3, [sp, #4]
 8008c10:	f107 030e 	add.w	r3, r7, #14
 8008c14:	9300      	str	r3, [sp, #0]
 8008c16:	2301      	movs	r3, #1
 8008c18:	226b      	movs	r2, #107	@ 0x6b
 8008c1a:	21d0      	movs	r1, #208	@ 0xd0
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f7fb ff79 	bl	8004b14 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8008c22:	2307      	movs	r3, #7
 8008c24:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8008c26:	2364      	movs	r3, #100	@ 0x64
 8008c28:	9302      	str	r3, [sp, #8]
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	9301      	str	r3, [sp, #4]
 8008c2e:	f107 030e 	add.w	r3, r7, #14
 8008c32:	9300      	str	r3, [sp, #0]
 8008c34:	2301      	movs	r3, #1
 8008c36:	2219      	movs	r2, #25
 8008c38:	21d0      	movs	r1, #208	@ 0xd0
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f7fb ff6a 	bl	8004b14 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8008c40:	2300      	movs	r3, #0
 8008c42:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8008c44:	2364      	movs	r3, #100	@ 0x64
 8008c46:	9302      	str	r3, [sp, #8]
 8008c48:	2301      	movs	r3, #1
 8008c4a:	9301      	str	r3, [sp, #4]
 8008c4c:	f107 030e 	add.w	r3, r7, #14
 8008c50:	9300      	str	r3, [sp, #0]
 8008c52:	2301      	movs	r3, #1
 8008c54:	221c      	movs	r2, #28
 8008c56:	21d0      	movs	r1, #208	@ 0xd0
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f7fb ff5b 	bl	8004b14 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8008c62:	2364      	movs	r3, #100	@ 0x64
 8008c64:	9302      	str	r3, [sp, #8]
 8008c66:	2301      	movs	r3, #1
 8008c68:	9301      	str	r3, [sp, #4]
 8008c6a:	f107 030e 	add.w	r3, r7, #14
 8008c6e:	9300      	str	r3, [sp, #0]
 8008c70:	2301      	movs	r3, #1
 8008c72:	221b      	movs	r2, #27
 8008c74:	21d0      	movs	r1, #208	@ 0xd0
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f7fb ff4c 	bl	8004b14 <HAL_I2C_Mem_Write>
        return 0;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	e000      	b.n	8008c82 <MPU6050_Init+0xa6>
    }
    return 1;
 8008c80:	2301      	movs	r3, #1
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	0000      	movs	r0, r0
 8008c8c:	0000      	movs	r0, r0
	...

08008c90 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8008c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c94:	b094      	sub	sp, #80	@ 0x50
 8008c96:	af04      	add	r7, sp, #16
 8008c98:	6078      	str	r0, [r7, #4]
 8008c9a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8008c9c:	2364      	movs	r3, #100	@ 0x64
 8008c9e:	9302      	str	r3, [sp, #8]
 8008ca0:	230e      	movs	r3, #14
 8008ca2:	9301      	str	r3, [sp, #4]
 8008ca4:	f107 0308 	add.w	r3, r7, #8
 8008ca8:	9300      	str	r3, [sp, #0]
 8008caa:	2301      	movs	r3, #1
 8008cac:	223b      	movs	r2, #59	@ 0x3b
 8008cae:	21d0      	movs	r1, #208	@ 0xd0
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f7fc f843 	bl	8004d3c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8008cb6:	7a3b      	ldrb	r3, [r7, #8]
 8008cb8:	021b      	lsls	r3, r3, #8
 8008cba:	b21a      	sxth	r2, r3
 8008cbc:	7a7b      	ldrb	r3, [r7, #9]
 8008cbe:	b21b      	sxth	r3, r3
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	b21a      	sxth	r2, r3
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8008cc8:	7abb      	ldrb	r3, [r7, #10]
 8008cca:	021b      	lsls	r3, r3, #8
 8008ccc:	b21a      	sxth	r2, r3
 8008cce:	7afb      	ldrb	r3, [r7, #11]
 8008cd0:	b21b      	sxth	r3, r3
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	b21a      	sxth	r2, r3
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8008cda:	7b3b      	ldrb	r3, [r7, #12]
 8008cdc:	021b      	lsls	r3, r3, #8
 8008cde:	b21a      	sxth	r2, r3
 8008ce0:	7b7b      	ldrb	r3, [r7, #13]
 8008ce2:	b21b      	sxth	r3, r3
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	b21a      	sxth	r2, r3
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8008cec:	7bbb      	ldrb	r3, [r7, #14]
 8008cee:	021b      	lsls	r3, r3, #8
 8008cf0:	b21a      	sxth	r2, r3
 8008cf2:	7bfb      	ldrb	r3, [r7, #15]
 8008cf4:	b21b      	sxth	r3, r3
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8008cfa:	7c3b      	ldrb	r3, [r7, #16]
 8008cfc:	021b      	lsls	r3, r3, #8
 8008cfe:	b21a      	sxth	r2, r3
 8008d00:	7c7b      	ldrb	r3, [r7, #17]
 8008d02:	b21b      	sxth	r3, r3
 8008d04:	4313      	orrs	r3, r2
 8008d06:	b21a      	sxth	r2, r3
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8008d0c:	7cbb      	ldrb	r3, [r7, #18]
 8008d0e:	021b      	lsls	r3, r3, #8
 8008d10:	b21a      	sxth	r2, r3
 8008d12:	7cfb      	ldrb	r3, [r7, #19]
 8008d14:	b21b      	sxth	r3, r3
 8008d16:	4313      	orrs	r3, r2
 8008d18:	b21a      	sxth	r2, r3
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8008d1e:	7d3b      	ldrb	r3, [r7, #20]
 8008d20:	021b      	lsls	r3, r3, #8
 8008d22:	b21a      	sxth	r2, r3
 8008d24:	7d7b      	ldrb	r3, [r7, #21]
 8008d26:	b21b      	sxth	r3, r3
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	b21a      	sxth	r2, r3
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7f7 fc2c 	bl	8000594 <__aeabi_i2d>
 8008d3c:	f04f 0200 	mov.w	r2, #0
 8008d40:	4bbd      	ldr	r3, [pc, #756]	@ (8009038 <MPU6050_Read_All+0x3a8>)
 8008d42:	f7f7 fdbb 	bl	80008bc <__aeabi_ddiv>
 8008d46:	4602      	mov	r2, r0
 8008d48:	460b      	mov	r3, r1
 8008d4a:	6839      	ldr	r1, [r7, #0]
 8008d4c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7f7 fc1c 	bl	8000594 <__aeabi_i2d>
 8008d5c:	f04f 0200 	mov.w	r2, #0
 8008d60:	4bb5      	ldr	r3, [pc, #724]	@ (8009038 <MPU6050_Read_All+0x3a8>)
 8008d62:	f7f7 fdab 	bl	80008bc <__aeabi_ddiv>
 8008d66:	4602      	mov	r2, r0
 8008d68:	460b      	mov	r3, r1
 8008d6a:	6839      	ldr	r1, [r7, #0]
 8008d6c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7f7 fc0c 	bl	8000594 <__aeabi_i2d>
 8008d7c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8009020 <MPU6050_Read_All+0x390>)
 8008d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d82:	f7f7 fd9b 	bl	80008bc <__aeabi_ddiv>
 8008d86:	4602      	mov	r2, r0
 8008d88:	460b      	mov	r3, r1
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8008d90:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8008d94:	ee07 3a90 	vmov	s15, r3
 8008d98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008d9c:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 800903c <MPU6050_Read_All+0x3ac>
 8008da0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008da4:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8009040 <MPU6050_Read_All+0x3b0>
 8008da8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7f7 fbeb 	bl	8000594 <__aeabi_i2d>
 8008dbe:	a39a      	add	r3, pc, #616	@ (adr r3, 8009028 <MPU6050_Read_All+0x398>)
 8008dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc4:	f7f7 fd7a 	bl	80008bc <__aeabi_ddiv>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	460b      	mov	r3, r1
 8008dcc:	6839      	ldr	r1, [r7, #0]
 8008dce:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7f7 fbdb 	bl	8000594 <__aeabi_i2d>
 8008dde:	a392      	add	r3, pc, #584	@ (adr r3, 8009028 <MPU6050_Read_All+0x398>)
 8008de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de4:	f7f7 fd6a 	bl	80008bc <__aeabi_ddiv>
 8008de8:	4602      	mov	r2, r0
 8008dea:	460b      	mov	r3, r1
 8008dec:	6839      	ldr	r1, [r7, #0]
 8008dee:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7f7 fbcb 	bl	8000594 <__aeabi_i2d>
 8008dfe:	a38a      	add	r3, pc, #552	@ (adr r3, 8009028 <MPU6050_Read_All+0x398>)
 8008e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e04:	f7f7 fd5a 	bl	80008bc <__aeabi_ddiv>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	6839      	ldr	r1, [r7, #0]
 8008e0e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8008e12:	f7fa ffd1 	bl	8003db8 <HAL_GetTick>
 8008e16:	4602      	mov	r2, r0
 8008e18:	4b8a      	ldr	r3, [pc, #552]	@ (8009044 <MPU6050_Read_All+0x3b4>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7f7 fba8 	bl	8000574 <__aeabi_ui2d>
 8008e24:	f04f 0200 	mov.w	r2, #0
 8008e28:	4b87      	ldr	r3, [pc, #540]	@ (8009048 <MPU6050_Read_All+0x3b8>)
 8008e2a:	f7f7 fd47 	bl	80008bc <__aeabi_ddiv>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	460b      	mov	r3, r1
 8008e32:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 8008e36:	f7fa ffbf 	bl	8003db8 <HAL_GetTick>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	4a81      	ldr	r2, [pc, #516]	@ (8009044 <MPU6050_Read_All+0x3b4>)
 8008e3e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e46:	461a      	mov	r2, r3
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e4e:	fb03 f202 	mul.w	r2, r3, r2
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008e58:	4619      	mov	r1, r3
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008e60:	fb01 f303 	mul.w	r3, r1, r3
 8008e64:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7f7 fb94 	bl	8000594 <__aeabi_i2d>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	460b      	mov	r3, r1
 8008e70:	ec43 2b10 	vmov	d0, r2, r3
 8008e74:	f015 fd7e 	bl	801e974 <sqrt>
 8008e78:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8008e7c:	f04f 0200 	mov.w	r2, #0
 8008e80:	f04f 0300 	mov.w	r3, #0
 8008e84:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008e88:	f7f7 fe56 	bl	8000b38 <__aeabi_dcmpeq>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d11f      	bne.n	8008ed2 <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7f7 fb7b 	bl	8000594 <__aeabi_i2d>
 8008e9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ea2:	f7f7 fd0b 	bl	80008bc <__aeabi_ddiv>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	ec43 2b17 	vmov	d7, r2, r3
 8008eae:	eeb0 0a47 	vmov.f32	s0, s14
 8008eb2:	eef0 0a67 	vmov.f32	s1, s15
 8008eb6:	f015 fd8b 	bl	801e9d0 <atan>
 8008eba:	ec51 0b10 	vmov	r0, r1, d0
 8008ebe:	a35c      	add	r3, pc, #368	@ (adr r3, 8009030 <MPU6050_Read_All+0x3a0>)
 8008ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec4:	f7f7 fbd0 	bl	8000668 <__aeabi_dmul>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	460b      	mov	r3, r1
 8008ecc:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8008ed0:	e005      	b.n	8008ede <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8008ed2:	f04f 0200 	mov.w	r2, #0
 8008ed6:	f04f 0300 	mov.w	r3, #0
 8008eda:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ee4:	425b      	negs	r3, r3
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7f7 fb54 	bl	8000594 <__aeabi_i2d>
 8008eec:	4682      	mov	sl, r0
 8008eee:	468b      	mov	fp, r1
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7f7 fb4c 	bl	8000594 <__aeabi_i2d>
 8008efc:	4602      	mov	r2, r0
 8008efe:	460b      	mov	r3, r1
 8008f00:	ec43 2b11 	vmov	d1, r2, r3
 8008f04:	ec4b ab10 	vmov	d0, sl, fp
 8008f08:	f015 fd32 	bl	801e970 <atan2>
 8008f0c:	ec51 0b10 	vmov	r0, r1, d0
 8008f10:	a347      	add	r3, pc, #284	@ (adr r3, 8009030 <MPU6050_Read_All+0x3a0>)
 8008f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f16:	f7f7 fba7 	bl	8000668 <__aeabi_dmul>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8008f22:	f04f 0200 	mov.w	r2, #0
 8008f26:	4b49      	ldr	r3, [pc, #292]	@ (800904c <MPU6050_Read_All+0x3bc>)
 8008f28:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008f2c:	f7f7 fe0e 	bl	8000b4c <__aeabi_dcmplt>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00a      	beq.n	8008f4c <MPU6050_Read_All+0x2bc>
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8008f3c:	f04f 0200 	mov.w	r2, #0
 8008f40:	4b43      	ldr	r3, [pc, #268]	@ (8009050 <MPU6050_Read_All+0x3c0>)
 8008f42:	f7f7 fe21 	bl	8000b88 <__aeabi_dcmpgt>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d114      	bne.n	8008f76 <MPU6050_Read_All+0x2e6>
 8008f4c:	f04f 0200 	mov.w	r2, #0
 8008f50:	4b3f      	ldr	r3, [pc, #252]	@ (8009050 <MPU6050_Read_All+0x3c0>)
 8008f52:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008f56:	f7f7 fe17 	bl	8000b88 <__aeabi_dcmpgt>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d015      	beq.n	8008f8c <MPU6050_Read_All+0x2fc>
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8008f66:	f04f 0200 	mov.w	r2, #0
 8008f6a:	4b38      	ldr	r3, [pc, #224]	@ (800904c <MPU6050_Read_All+0x3bc>)
 8008f6c:	f7f7 fdee 	bl	8000b4c <__aeabi_dcmplt>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00a      	beq.n	8008f8c <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8008f76:	4937      	ldr	r1, [pc, #220]	@ (8009054 <MPU6050_Read_All+0x3c4>)
 8008f78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f7c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8008f80:	6839      	ldr	r1, [r7, #0]
 8008f82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f86:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8008f8a:	e014      	b.n	8008fb6 <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8008f92:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8008f96:	eeb0 1a47 	vmov.f32	s2, s14
 8008f9a:	eef0 1a67 	vmov.f32	s3, s15
 8008f9e:	ed97 0b06 	vldr	d0, [r7, #24]
 8008fa2:	482c      	ldr	r0, [pc, #176]	@ (8009054 <MPU6050_Read_All+0x3c4>)
 8008fa4:	f000 f85a 	bl	800905c <Kalman_getAngle>
 8008fa8:	eeb0 7a40 	vmov.f32	s14, s0
 8008fac:	eef0 7a60 	vmov.f32	s15, s1
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8008fbc:	4690      	mov	r8, r2
 8008fbe:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8008fc2:	f04f 0200 	mov.w	r2, #0
 8008fc6:	4b22      	ldr	r3, [pc, #136]	@ (8009050 <MPU6050_Read_All+0x3c0>)
 8008fc8:	4640      	mov	r0, r8
 8008fca:	4649      	mov	r1, r9
 8008fcc:	f7f7 fddc 	bl	8000b88 <__aeabi_dcmpgt>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d008      	beq.n	8008fe8 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8008fdc:	4614      	mov	r4, r2
 8008fde:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8008fee:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8008ff2:	eeb0 1a47 	vmov.f32	s2, s14
 8008ff6:	eef0 1a67 	vmov.f32	s3, s15
 8008ffa:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8008ffe:	4816      	ldr	r0, [pc, #88]	@ (8009058 <MPU6050_Read_All+0x3c8>)
 8009000:	f000 f82c 	bl	800905c <Kalman_getAngle>
 8009004:	eeb0 7a40 	vmov.f32	s14, s0
 8009008:	eef0 7a60 	vmov.f32	s15, s1
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 8009012:	bf00      	nop
 8009014:	3740      	adds	r7, #64	@ 0x40
 8009016:	46bd      	mov	sp, r7
 8009018:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800901c:	f3af 8000 	nop.w
 8009020:	00000000 	.word	0x00000000
 8009024:	40cc2900 	.word	0x40cc2900
 8009028:	00000000 	.word	0x00000000
 800902c:	40606000 	.word	0x40606000
 8009030:	1a63c1f8 	.word	0x1a63c1f8
 8009034:	404ca5dc 	.word	0x404ca5dc
 8009038:	40d00000 	.word	0x40d00000
 800903c:	43aa0000 	.word	0x43aa0000
 8009040:	42121eb8 	.word	0x42121eb8
 8009044:	20008920 	.word	0x20008920
 8009048:	408f4000 	.word	0x408f4000
 800904c:	c0568000 	.word	0xc0568000
 8009050:	40568000 	.word	0x40568000
 8009054:	20000058 	.word	0x20000058
 8009058:	20000010 	.word	0x20000010

0800905c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 800905c:	b5b0      	push	{r4, r5, r7, lr}
 800905e:	b096      	sub	sp, #88	@ 0x58
 8009060:	af00      	add	r7, sp, #0
 8009062:	61f8      	str	r0, [r7, #28]
 8009064:	ed87 0b04 	vstr	d0, [r7, #16]
 8009068:	ed87 1b02 	vstr	d1, [r7, #8]
 800906c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009076:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800907a:	f7f7 f93d 	bl	80002f8 <__aeabi_dsub>
 800907e:	4602      	mov	r2, r0
 8009080:	460b      	mov	r3, r1
 8009082:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800908c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009090:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009094:	f7f7 fae8 	bl	8000668 <__aeabi_dmul>
 8009098:	4602      	mov	r2, r0
 800909a:	460b      	mov	r3, r1
 800909c:	4620      	mov	r0, r4
 800909e:	4629      	mov	r1, r5
 80090a0:	f7f7 f92c 	bl	80002fc <__adddf3>
 80090a4:	4602      	mov	r2, r0
 80090a6:	460b      	mov	r3, r1
 80090a8:	69f9      	ldr	r1, [r7, #28]
 80090aa:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80090ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090be:	f7f7 fad3 	bl	8000668 <__aeabi_dmul>
 80090c2:	4602      	mov	r2, r0
 80090c4:	460b      	mov	r3, r1
 80090c6:	4610      	mov	r0, r2
 80090c8:	4619      	mov	r1, r3
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80090d0:	f7f7 f912 	bl	80002f8 <__aeabi_dsub>
 80090d4:	4602      	mov	r2, r0
 80090d6:	460b      	mov	r3, r1
 80090d8:	4610      	mov	r0, r2
 80090da:	4619      	mov	r1, r3
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80090e2:	f7f7 f909 	bl	80002f8 <__aeabi_dsub>
 80090e6:	4602      	mov	r2, r0
 80090e8:	460b      	mov	r3, r1
 80090ea:	4610      	mov	r0, r2
 80090ec:	4619      	mov	r1, r3
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f4:	f7f7 f902 	bl	80002fc <__adddf3>
 80090f8:	4602      	mov	r2, r0
 80090fa:	460b      	mov	r3, r1
 80090fc:	4610      	mov	r0, r2
 80090fe:	4619      	mov	r1, r3
 8009100:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009104:	f7f7 fab0 	bl	8000668 <__aeabi_dmul>
 8009108:	4602      	mov	r2, r0
 800910a:	460b      	mov	r3, r1
 800910c:	4620      	mov	r0, r4
 800910e:	4629      	mov	r1, r5
 8009110:	f7f7 f8f4 	bl	80002fc <__adddf3>
 8009114:	4602      	mov	r2, r0
 8009116:	460b      	mov	r3, r1
 8009118:	69f9      	ldr	r1, [r7, #28]
 800911a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8009124:	69fb      	ldr	r3, [r7, #28]
 8009126:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800912a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800912e:	f7f7 fa9b 	bl	8000668 <__aeabi_dmul>
 8009132:	4602      	mov	r2, r0
 8009134:	460b      	mov	r3, r1
 8009136:	4620      	mov	r0, r4
 8009138:	4629      	mov	r1, r5
 800913a:	f7f7 f8dd 	bl	80002f8 <__aeabi_dsub>
 800913e:	4602      	mov	r2, r0
 8009140:	460b      	mov	r3, r1
 8009142:	69f9      	ldr	r1, [r7, #28]
 8009144:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8009154:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009158:	f7f7 fa86 	bl	8000668 <__aeabi_dmul>
 800915c:	4602      	mov	r2, r0
 800915e:	460b      	mov	r3, r1
 8009160:	4620      	mov	r0, r4
 8009162:	4629      	mov	r1, r5
 8009164:	f7f7 f8c8 	bl	80002f8 <__aeabi_dsub>
 8009168:	4602      	mov	r2, r0
 800916a:	460b      	mov	r3, r1
 800916c:	69f9      	ldr	r1, [r7, #28]
 800916e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800917e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009182:	f7f7 fa71 	bl	8000668 <__aeabi_dmul>
 8009186:	4602      	mov	r2, r0
 8009188:	460b      	mov	r3, r1
 800918a:	4620      	mov	r0, r4
 800918c:	4629      	mov	r1, r5
 800918e:	f7f7 f8b5 	bl	80002fc <__adddf3>
 8009192:	4602      	mov	r2, r0
 8009194:	460b      	mov	r3, r1
 8009196:	69f9      	ldr	r1, [r7, #28]
 8009198:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80091a8:	f7f7 f8a8 	bl	80002fc <__adddf3>
 80091ac:	4602      	mov	r2, r0
 80091ae:	460b      	mov	r3, r1
 80091b0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80091ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80091be:	f7f7 fb7d 	bl	80008bc <__aeabi_ddiv>
 80091c2:	4602      	mov	r2, r0
 80091c4:	460b      	mov	r3, r1
 80091c6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80091d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80091d4:	f7f7 fb72 	bl	80008bc <__aeabi_ddiv>
 80091d8:	4602      	mov	r2, r0
 80091da:	460b      	mov	r3, r1
 80091dc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80091e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80091ea:	f7f7 f885 	bl	80002f8 <__aeabi_dsub>
 80091ee:	4602      	mov	r2, r0
 80091f0:	460b      	mov	r3, r1
 80091f2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80091fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009200:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009204:	f7f7 fa30 	bl	8000668 <__aeabi_dmul>
 8009208:	4602      	mov	r2, r0
 800920a:	460b      	mov	r3, r1
 800920c:	4620      	mov	r0, r4
 800920e:	4629      	mov	r1, r5
 8009210:	f7f7 f874 	bl	80002fc <__adddf3>
 8009214:	4602      	mov	r2, r0
 8009216:	460b      	mov	r3, r1
 8009218:	69f9      	ldr	r1, [r7, #28]
 800921a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8009224:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009228:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800922c:	f7f7 fa1c 	bl	8000668 <__aeabi_dmul>
 8009230:	4602      	mov	r2, r0
 8009232:	460b      	mov	r3, r1
 8009234:	4620      	mov	r0, r4
 8009236:	4629      	mov	r1, r5
 8009238:	f7f7 f860 	bl	80002fc <__adddf3>
 800923c:	4602      	mov	r2, r0
 800923e:	460b      	mov	r3, r1
 8009240:	69f9      	ldr	r1, [r7, #28]
 8009242:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800924c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8009256:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8009260:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009264:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009268:	f7f7 f9fe 	bl	8000668 <__aeabi_dmul>
 800926c:	4602      	mov	r2, r0
 800926e:	460b      	mov	r3, r1
 8009270:	4620      	mov	r0, r4
 8009272:	4629      	mov	r1, r5
 8009274:	f7f7 f840 	bl	80002f8 <__aeabi_dsub>
 8009278:	4602      	mov	r2, r0
 800927a:	460b      	mov	r3, r1
 800927c:	69f9      	ldr	r1, [r7, #28]
 800927e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8009288:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800928c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8009290:	f7f7 f9ea 	bl	8000668 <__aeabi_dmul>
 8009294:	4602      	mov	r2, r0
 8009296:	460b      	mov	r3, r1
 8009298:	4620      	mov	r0, r4
 800929a:	4629      	mov	r1, r5
 800929c:	f7f7 f82c 	bl	80002f8 <__aeabi_dsub>
 80092a0:	4602      	mov	r2, r0
 80092a2:	460b      	mov	r3, r1
 80092a4:	69f9      	ldr	r1, [r7, #28]
 80092a6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80092aa:	69fb      	ldr	r3, [r7, #28]
 80092ac:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80092b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80092b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80092b8:	f7f7 f9d6 	bl	8000668 <__aeabi_dmul>
 80092bc:	4602      	mov	r2, r0
 80092be:	460b      	mov	r3, r1
 80092c0:	4620      	mov	r0, r4
 80092c2:	4629      	mov	r1, r5
 80092c4:	f7f7 f818 	bl	80002f8 <__aeabi_dsub>
 80092c8:	4602      	mov	r2, r0
 80092ca:	460b      	mov	r3, r1
 80092cc:	69f9      	ldr	r1, [r7, #28]
 80092ce:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80092d8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80092dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80092e0:	f7f7 f9c2 	bl	8000668 <__aeabi_dmul>
 80092e4:	4602      	mov	r2, r0
 80092e6:	460b      	mov	r3, r1
 80092e8:	4620      	mov	r0, r4
 80092ea:	4629      	mov	r1, r5
 80092ec:	f7f7 f804 	bl	80002f8 <__aeabi_dsub>
 80092f0:	4602      	mov	r2, r0
 80092f2:	460b      	mov	r3, r1
 80092f4:	69f9      	ldr	r1, [r7, #28]
 80092f6:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8009300:	ec43 2b17 	vmov	d7, r2, r3
};
 8009304:	eeb0 0a47 	vmov.f32	s0, s14
 8009308:	eef0 0a67 	vmov.f32	s1, s15
 800930c:	3758      	adds	r7, #88	@ 0x58
 800930e:	46bd      	mov	sp, r7
 8009310:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009314 <__NVIC_SetPriority>:
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
 800931a:	4603      	mov	r3, r0
 800931c:	6039      	str	r1, [r7, #0]
 800931e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009324:	2b00      	cmp	r3, #0
 8009326:	db0a      	blt.n	800933e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	b2da      	uxtb	r2, r3
 800932c:	490c      	ldr	r1, [pc, #48]	@ (8009360 <__NVIC_SetPriority+0x4c>)
 800932e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009332:	0112      	lsls	r2, r2, #4
 8009334:	b2d2      	uxtb	r2, r2
 8009336:	440b      	add	r3, r1
 8009338:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800933c:	e00a      	b.n	8009354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	b2da      	uxtb	r2, r3
 8009342:	4908      	ldr	r1, [pc, #32]	@ (8009364 <__NVIC_SetPriority+0x50>)
 8009344:	79fb      	ldrb	r3, [r7, #7]
 8009346:	f003 030f 	and.w	r3, r3, #15
 800934a:	3b04      	subs	r3, #4
 800934c:	0112      	lsls	r2, r2, #4
 800934e:	b2d2      	uxtb	r2, r2
 8009350:	440b      	add	r3, r1
 8009352:	761a      	strb	r2, [r3, #24]
}
 8009354:	bf00      	nop
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr
 8009360:	e000e100 	.word	0xe000e100
 8009364:	e000ed00 	.word	0xe000ed00

08009368 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009368:	b580      	push	{r7, lr}
 800936a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800936c:	4b05      	ldr	r3, [pc, #20]	@ (8009384 <SysTick_Handler+0x1c>)
 800936e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009370:	f001 fd40 	bl	800adf4 <xTaskGetSchedulerState>
 8009374:	4603      	mov	r3, r0
 8009376:	2b01      	cmp	r3, #1
 8009378:	d001      	beq.n	800937e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800937a:	f002 fb35 	bl	800b9e8 <xPortSysTickHandler>
  }
}
 800937e:	bf00      	nop
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	e000e010 	.word	0xe000e010

08009388 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009388:	b580      	push	{r7, lr}
 800938a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800938c:	2100      	movs	r1, #0
 800938e:	f06f 0004 	mvn.w	r0, #4
 8009392:	f7ff ffbf 	bl	8009314 <__NVIC_SetPriority>
#endif
}
 8009396:	bf00      	nop
 8009398:	bd80      	pop	{r7, pc}
	...

0800939c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093a2:	f3ef 8305 	mrs	r3, IPSR
 80093a6:	603b      	str	r3, [r7, #0]
  return(result);
 80093a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d003      	beq.n	80093b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80093ae:	f06f 0305 	mvn.w	r3, #5
 80093b2:	607b      	str	r3, [r7, #4]
 80093b4:	e00c      	b.n	80093d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80093b6:	4b0a      	ldr	r3, [pc, #40]	@ (80093e0 <osKernelInitialize+0x44>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d105      	bne.n	80093ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80093be:	4b08      	ldr	r3, [pc, #32]	@ (80093e0 <osKernelInitialize+0x44>)
 80093c0:	2201      	movs	r2, #1
 80093c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80093c4:	2300      	movs	r3, #0
 80093c6:	607b      	str	r3, [r7, #4]
 80093c8:	e002      	b.n	80093d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80093ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80093ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80093d0:	687b      	ldr	r3, [r7, #4]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	370c      	adds	r7, #12
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop
 80093e0:	20008924 	.word	0x20008924

080093e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093ea:	f3ef 8305 	mrs	r3, IPSR
 80093ee:	603b      	str	r3, [r7, #0]
  return(result);
 80093f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d003      	beq.n	80093fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80093f6:	f06f 0305 	mvn.w	r3, #5
 80093fa:	607b      	str	r3, [r7, #4]
 80093fc:	e010      	b.n	8009420 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80093fe:	4b0b      	ldr	r3, [pc, #44]	@ (800942c <osKernelStart+0x48>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2b01      	cmp	r3, #1
 8009404:	d109      	bne.n	800941a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009406:	f7ff ffbf 	bl	8009388 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800940a:	4b08      	ldr	r3, [pc, #32]	@ (800942c <osKernelStart+0x48>)
 800940c:	2202      	movs	r2, #2
 800940e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009410:	f001 f87a 	bl	800a508 <vTaskStartScheduler>
      stat = osOK;
 8009414:	2300      	movs	r3, #0
 8009416:	607b      	str	r3, [r7, #4]
 8009418:	e002      	b.n	8009420 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800941a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800941e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009420:	687b      	ldr	r3, [r7, #4]
}
 8009422:	4618      	mov	r0, r3
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop
 800942c:	20008924 	.word	0x20008924

08009430 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009430:	b580      	push	{r7, lr}
 8009432:	b08e      	sub	sp, #56	@ 0x38
 8009434:	af04      	add	r7, sp, #16
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800943c:	2300      	movs	r3, #0
 800943e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009440:	f3ef 8305 	mrs	r3, IPSR
 8009444:	617b      	str	r3, [r7, #20]
  return(result);
 8009446:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009448:	2b00      	cmp	r3, #0
 800944a:	d17e      	bne.n	800954a <osThreadNew+0x11a>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d07b      	beq.n	800954a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009452:	2380      	movs	r3, #128	@ 0x80
 8009454:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009456:	2318      	movs	r3, #24
 8009458:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800945a:	2300      	movs	r3, #0
 800945c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800945e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009462:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d045      	beq.n	80094f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d002      	beq.n	8009478 <osThreadNew+0x48>
        name = attr->name;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	699b      	ldr	r3, [r3, #24]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d002      	beq.n	8009486 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	699b      	ldr	r3, [r3, #24]
 8009484:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d008      	beq.n	800949e <osThreadNew+0x6e>
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	2b38      	cmp	r3, #56	@ 0x38
 8009490:	d805      	bhi.n	800949e <osThreadNew+0x6e>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	f003 0301 	and.w	r3, r3, #1
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <osThreadNew+0x72>
        return (NULL);
 800949e:	2300      	movs	r3, #0
 80094a0:	e054      	b.n	800954c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	695b      	ldr	r3, [r3, #20]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d003      	beq.n	80094b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	695b      	ldr	r3, [r3, #20]
 80094ae:	089b      	lsrs	r3, r3, #2
 80094b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d00e      	beq.n	80094d8 <osThreadNew+0xa8>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	2b5b      	cmp	r3, #91	@ 0x5b
 80094c0:	d90a      	bls.n	80094d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d006      	beq.n	80094d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	695b      	ldr	r3, [r3, #20]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d002      	beq.n	80094d8 <osThreadNew+0xa8>
        mem = 1;
 80094d2:	2301      	movs	r3, #1
 80094d4:	61bb      	str	r3, [r7, #24]
 80094d6:	e010      	b.n	80094fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d10c      	bne.n	80094fa <osThreadNew+0xca>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d108      	bne.n	80094fa <osThreadNew+0xca>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d104      	bne.n	80094fa <osThreadNew+0xca>
          mem = 0;
 80094f0:	2300      	movs	r3, #0
 80094f2:	61bb      	str	r3, [r7, #24]
 80094f4:	e001      	b.n	80094fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80094f6:	2300      	movs	r3, #0
 80094f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80094fa:	69bb      	ldr	r3, [r7, #24]
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d110      	bne.n	8009522 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009508:	9202      	str	r2, [sp, #8]
 800950a:	9301      	str	r3, [sp, #4]
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	9300      	str	r3, [sp, #0]
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	6a3a      	ldr	r2, [r7, #32]
 8009514:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009516:	68f8      	ldr	r0, [r7, #12]
 8009518:	f000 fe1a 	bl	800a150 <xTaskCreateStatic>
 800951c:	4603      	mov	r3, r0
 800951e:	613b      	str	r3, [r7, #16]
 8009520:	e013      	b.n	800954a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d110      	bne.n	800954a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009528:	6a3b      	ldr	r3, [r7, #32]
 800952a:	b29a      	uxth	r2, r3
 800952c:	f107 0310 	add.w	r3, r7, #16
 8009530:	9301      	str	r3, [sp, #4]
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	f000 fe68 	bl	800a210 <xTaskCreate>
 8009540:	4603      	mov	r3, r0
 8009542:	2b01      	cmp	r3, #1
 8009544:	d001      	beq.n	800954a <osThreadNew+0x11a>
            hTask = NULL;
 8009546:	2300      	movs	r3, #0
 8009548:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800954a:	693b      	ldr	r3, [r7, #16]
}
 800954c:	4618      	mov	r0, r3
 800954e:	3728      	adds	r7, #40	@ 0x28
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800955c:	f3ef 8305 	mrs	r3, IPSR
 8009560:	60bb      	str	r3, [r7, #8]
  return(result);
 8009562:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009564:	2b00      	cmp	r3, #0
 8009566:	d003      	beq.n	8009570 <osDelay+0x1c>
    stat = osErrorISR;
 8009568:	f06f 0305 	mvn.w	r3, #5
 800956c:	60fb      	str	r3, [r7, #12]
 800956e:	e007      	b.n	8009580 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009570:	2300      	movs	r3, #0
 8009572:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d002      	beq.n	8009580 <osDelay+0x2c>
      vTaskDelay(ticks);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 ff8e 	bl	800a49c <vTaskDelay>
    }
  }

  return (stat);
 8009580:	68fb      	ldr	r3, [r7, #12]
}
 8009582:	4618      	mov	r0, r3
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
	...

0800958c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	4a07      	ldr	r2, [pc, #28]	@ (80095b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800959c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	4a06      	ldr	r2, [pc, #24]	@ (80095bc <vApplicationGetIdleTaskMemory+0x30>)
 80095a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2280      	movs	r2, #128	@ 0x80
 80095a8:	601a      	str	r2, [r3, #0]
}
 80095aa:	bf00      	nop
 80095ac:	3714      	adds	r7, #20
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	20008928 	.word	0x20008928
 80095bc:	20008984 	.word	0x20008984

080095c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	4a07      	ldr	r2, [pc, #28]	@ (80095ec <vApplicationGetTimerTaskMemory+0x2c>)
 80095d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	4a06      	ldr	r2, [pc, #24]	@ (80095f0 <vApplicationGetTimerTaskMemory+0x30>)
 80095d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80095de:	601a      	str	r2, [r3, #0]
}
 80095e0:	bf00      	nop
 80095e2:	3714      	adds	r7, #20
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr
 80095ec:	20008b84 	.word	0x20008b84
 80095f0:	20008be0 	.word	0x20008be0

080095f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f103 0208 	add.w	r2, r3, #8
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800960c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f103 0208 	add.w	r2, r3, #8
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f103 0208 	add.w	r2, r3, #8
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009628:	bf00      	nop
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009642:	bf00      	nop
 8009644:	370c      	adds	r7, #12
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr

0800964e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800964e:	b480      	push	{r7}
 8009650:	b085      	sub	sp, #20
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
 8009656:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	689a      	ldr	r2, [r3, #8]
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	683a      	ldr	r2, [r7, #0]
 8009672:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	683a      	ldr	r2, [r7, #0]
 8009678:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	1c5a      	adds	r2, r3, #1
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	601a      	str	r2, [r3, #0]
}
 800968a:	bf00      	nop
 800968c:	3714      	adds	r7, #20
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr

08009696 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009696:	b480      	push	{r7}
 8009698:	b085      	sub	sp, #20
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
 800969e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096ac:	d103      	bne.n	80096b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	60fb      	str	r3, [r7, #12]
 80096b4:	e00c      	b.n	80096d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	3308      	adds	r3, #8
 80096ba:	60fb      	str	r3, [r7, #12]
 80096bc:	e002      	b.n	80096c4 <vListInsert+0x2e>
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	60fb      	str	r3, [r7, #12]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d2f6      	bcs.n	80096be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	685a      	ldr	r2, [r3, #4]
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	683a      	ldr	r2, [r7, #0]
 80096de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	68fa      	ldr	r2, [r7, #12]
 80096e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	683a      	ldr	r2, [r7, #0]
 80096ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	1c5a      	adds	r2, r3, #1
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	601a      	str	r2, [r3, #0]
}
 80096fc:	bf00      	nop
 80096fe:	3714      	adds	r7, #20
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	6892      	ldr	r2, [r2, #8]
 800971e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	6852      	ldr	r2, [r2, #4]
 8009728:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	429a      	cmp	r2, r3
 8009732:	d103      	bne.n	800973c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	689a      	ldr	r2, [r3, #8]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	1e5a      	subs	r2, r3, #1
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3714      	adds	r7, #20
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d10b      	bne.n	8009788 <xQueueGenericReset+0x2c>
	__asm volatile
 8009770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009774:	f383 8811 	msr	BASEPRI, r3
 8009778:	f3bf 8f6f 	isb	sy
 800977c:	f3bf 8f4f 	dsb	sy
 8009780:	60bb      	str	r3, [r7, #8]
}
 8009782:	bf00      	nop
 8009784:	bf00      	nop
 8009786:	e7fd      	b.n	8009784 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009788:	f002 f89e 	bl	800b8c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009794:	68f9      	ldr	r1, [r7, #12]
 8009796:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009798:	fb01 f303 	mul.w	r3, r1, r3
 800979c:	441a      	add	r2, r3
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2200      	movs	r2, #0
 80097a6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097b8:	3b01      	subs	r3, #1
 80097ba:	68f9      	ldr	r1, [r7, #12]
 80097bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80097be:	fb01 f303 	mul.w	r3, r1, r3
 80097c2:	441a      	add	r2, r3
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	22ff      	movs	r2, #255	@ 0xff
 80097cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	22ff      	movs	r2, #255	@ 0xff
 80097d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d114      	bne.n	8009808 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d01a      	beq.n	800981c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	3310      	adds	r3, #16
 80097ea:	4618      	mov	r0, r3
 80097ec:	f001 f91a 	bl	800aa24 <xTaskRemoveFromEventList>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d012      	beq.n	800981c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80097f6:	4b0d      	ldr	r3, [pc, #52]	@ (800982c <xQueueGenericReset+0xd0>)
 80097f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097fc:	601a      	str	r2, [r3, #0]
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	e009      	b.n	800981c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	3310      	adds	r3, #16
 800980c:	4618      	mov	r0, r3
 800980e:	f7ff fef1 	bl	80095f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	3324      	adds	r3, #36	@ 0x24
 8009816:	4618      	mov	r0, r3
 8009818:	f7ff feec 	bl	80095f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800981c:	f002 f886 	bl	800b92c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009820:	2301      	movs	r3, #1
}
 8009822:	4618      	mov	r0, r3
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	e000ed04 	.word	0xe000ed04

08009830 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009830:	b580      	push	{r7, lr}
 8009832:	b08e      	sub	sp, #56	@ 0x38
 8009834:	af02      	add	r7, sp, #8
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	607a      	str	r2, [r7, #4]
 800983c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d10b      	bne.n	800985c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009848:	f383 8811 	msr	BASEPRI, r3
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009856:	bf00      	nop
 8009858:	bf00      	nop
 800985a:	e7fd      	b.n	8009858 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10b      	bne.n	800987a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009866:	f383 8811 	msr	BASEPRI, r3
 800986a:	f3bf 8f6f 	isb	sy
 800986e:	f3bf 8f4f 	dsb	sy
 8009872:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009874:	bf00      	nop
 8009876:	bf00      	nop
 8009878:	e7fd      	b.n	8009876 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d002      	beq.n	8009886 <xQueueGenericCreateStatic+0x56>
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d001      	beq.n	800988a <xQueueGenericCreateStatic+0x5a>
 8009886:	2301      	movs	r3, #1
 8009888:	e000      	b.n	800988c <xQueueGenericCreateStatic+0x5c>
 800988a:	2300      	movs	r3, #0
 800988c:	2b00      	cmp	r3, #0
 800988e:	d10b      	bne.n	80098a8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009894:	f383 8811 	msr	BASEPRI, r3
 8009898:	f3bf 8f6f 	isb	sy
 800989c:	f3bf 8f4f 	dsb	sy
 80098a0:	623b      	str	r3, [r7, #32]
}
 80098a2:	bf00      	nop
 80098a4:	bf00      	nop
 80098a6:	e7fd      	b.n	80098a4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d102      	bne.n	80098b4 <xQueueGenericCreateStatic+0x84>
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d101      	bne.n	80098b8 <xQueueGenericCreateStatic+0x88>
 80098b4:	2301      	movs	r3, #1
 80098b6:	e000      	b.n	80098ba <xQueueGenericCreateStatic+0x8a>
 80098b8:	2300      	movs	r3, #0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d10b      	bne.n	80098d6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80098be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	61fb      	str	r3, [r7, #28]
}
 80098d0:	bf00      	nop
 80098d2:	bf00      	nop
 80098d4:	e7fd      	b.n	80098d2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80098d6:	2350      	movs	r3, #80	@ 0x50
 80098d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	2b50      	cmp	r3, #80	@ 0x50
 80098de:	d00b      	beq.n	80098f8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80098e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e4:	f383 8811 	msr	BASEPRI, r3
 80098e8:	f3bf 8f6f 	isb	sy
 80098ec:	f3bf 8f4f 	dsb	sy
 80098f0:	61bb      	str	r3, [r7, #24]
}
 80098f2:	bf00      	nop
 80098f4:	bf00      	nop
 80098f6:	e7fd      	b.n	80098f4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80098f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80098fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00d      	beq.n	8009920 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009906:	2201      	movs	r2, #1
 8009908:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800990c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009912:	9300      	str	r3, [sp, #0]
 8009914:	4613      	mov	r3, r2
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	68b9      	ldr	r1, [r7, #8]
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f000 f805 	bl	800992a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009922:	4618      	mov	r0, r3
 8009924:	3730      	adds	r7, #48	@ 0x30
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b084      	sub	sp, #16
 800992e:	af00      	add	r7, sp, #0
 8009930:	60f8      	str	r0, [r7, #12]
 8009932:	60b9      	str	r1, [r7, #8]
 8009934:	607a      	str	r2, [r7, #4]
 8009936:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d103      	bne.n	8009946 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	69ba      	ldr	r2, [r7, #24]
 8009942:	601a      	str	r2, [r3, #0]
 8009944:	e002      	b.n	800994c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	68fa      	ldr	r2, [r7, #12]
 8009950:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	68ba      	ldr	r2, [r7, #8]
 8009956:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009958:	2101      	movs	r1, #1
 800995a:	69b8      	ldr	r0, [r7, #24]
 800995c:	f7ff fefe 	bl	800975c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009960:	69bb      	ldr	r3, [r7, #24]
 8009962:	78fa      	ldrb	r2, [r7, #3]
 8009964:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009968:	bf00      	nop
 800996a:	3710      	adds	r7, #16
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b08e      	sub	sp, #56	@ 0x38
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	607a      	str	r2, [r7, #4]
 800997c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800997e:	2300      	movs	r3, #0
 8009980:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009988:	2b00      	cmp	r3, #0
 800998a:	d10b      	bne.n	80099a4 <xQueueGenericSend+0x34>
	__asm volatile
 800998c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009990:	f383 8811 	msr	BASEPRI, r3
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800999e:	bf00      	nop
 80099a0:	bf00      	nop
 80099a2:	e7fd      	b.n	80099a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d103      	bne.n	80099b2 <xQueueGenericSend+0x42>
 80099aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d101      	bne.n	80099b6 <xQueueGenericSend+0x46>
 80099b2:	2301      	movs	r3, #1
 80099b4:	e000      	b.n	80099b8 <xQueueGenericSend+0x48>
 80099b6:	2300      	movs	r3, #0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d10b      	bne.n	80099d4 <xQueueGenericSend+0x64>
	__asm volatile
 80099bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c0:	f383 8811 	msr	BASEPRI, r3
 80099c4:	f3bf 8f6f 	isb	sy
 80099c8:	f3bf 8f4f 	dsb	sy
 80099cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80099ce:	bf00      	nop
 80099d0:	bf00      	nop
 80099d2:	e7fd      	b.n	80099d0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	2b02      	cmp	r3, #2
 80099d8:	d103      	bne.n	80099e2 <xQueueGenericSend+0x72>
 80099da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d101      	bne.n	80099e6 <xQueueGenericSend+0x76>
 80099e2:	2301      	movs	r3, #1
 80099e4:	e000      	b.n	80099e8 <xQueueGenericSend+0x78>
 80099e6:	2300      	movs	r3, #0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d10b      	bne.n	8009a04 <xQueueGenericSend+0x94>
	__asm volatile
 80099ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f0:	f383 8811 	msr	BASEPRI, r3
 80099f4:	f3bf 8f6f 	isb	sy
 80099f8:	f3bf 8f4f 	dsb	sy
 80099fc:	623b      	str	r3, [r7, #32]
}
 80099fe:	bf00      	nop
 8009a00:	bf00      	nop
 8009a02:	e7fd      	b.n	8009a00 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a04:	f001 f9f6 	bl	800adf4 <xTaskGetSchedulerState>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d102      	bne.n	8009a14 <xQueueGenericSend+0xa4>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d101      	bne.n	8009a18 <xQueueGenericSend+0xa8>
 8009a14:	2301      	movs	r3, #1
 8009a16:	e000      	b.n	8009a1a <xQueueGenericSend+0xaa>
 8009a18:	2300      	movs	r3, #0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d10b      	bne.n	8009a36 <xQueueGenericSend+0xc6>
	__asm volatile
 8009a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	61fb      	str	r3, [r7, #28]
}
 8009a30:	bf00      	nop
 8009a32:	bf00      	nop
 8009a34:	e7fd      	b.n	8009a32 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a36:	f001 ff47 	bl	800b8c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d302      	bcc.n	8009a4c <xQueueGenericSend+0xdc>
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	2b02      	cmp	r3, #2
 8009a4a:	d129      	bne.n	8009aa0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a4c:	683a      	ldr	r2, [r7, #0]
 8009a4e:	68b9      	ldr	r1, [r7, #8]
 8009a50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a52:	f000 fa0f 	bl	8009e74 <prvCopyDataToQueue>
 8009a56:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d010      	beq.n	8009a82 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a62:	3324      	adds	r3, #36	@ 0x24
 8009a64:	4618      	mov	r0, r3
 8009a66:	f000 ffdd 	bl	800aa24 <xTaskRemoveFromEventList>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d013      	beq.n	8009a98 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009a70:	4b3f      	ldr	r3, [pc, #252]	@ (8009b70 <xQueueGenericSend+0x200>)
 8009a72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a76:	601a      	str	r2, [r3, #0]
 8009a78:	f3bf 8f4f 	dsb	sy
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	e00a      	b.n	8009a98 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d007      	beq.n	8009a98 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009a88:	4b39      	ldr	r3, [pc, #228]	@ (8009b70 <xQueueGenericSend+0x200>)
 8009a8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a8e:	601a      	str	r2, [r3, #0]
 8009a90:	f3bf 8f4f 	dsb	sy
 8009a94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009a98:	f001 ff48 	bl	800b92c <vPortExitCritical>
				return pdPASS;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	e063      	b.n	8009b68 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d103      	bne.n	8009aae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009aa6:	f001 ff41 	bl	800b92c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	e05c      	b.n	8009b68 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d106      	bne.n	8009ac2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ab4:	f107 0314 	add.w	r3, r7, #20
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f001 f83f 	bl	800ab3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009ac2:	f001 ff33 	bl	800b92c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009ac6:	f000 fd87 	bl	800a5d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009aca:	f001 fefd 	bl	800b8c8 <vPortEnterCritical>
 8009ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ad4:	b25b      	sxtb	r3, r3
 8009ad6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ada:	d103      	bne.n	8009ae4 <xQueueGenericSend+0x174>
 8009adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009aea:	b25b      	sxtb	r3, r3
 8009aec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009af0:	d103      	bne.n	8009afa <xQueueGenericSend+0x18a>
 8009af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009af4:	2200      	movs	r2, #0
 8009af6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009afa:	f001 ff17 	bl	800b92c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009afe:	1d3a      	adds	r2, r7, #4
 8009b00:	f107 0314 	add.w	r3, r7, #20
 8009b04:	4611      	mov	r1, r2
 8009b06:	4618      	mov	r0, r3
 8009b08:	f001 f82e 	bl	800ab68 <xTaskCheckForTimeOut>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d124      	bne.n	8009b5c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009b12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b14:	f000 faa6 	bl	800a064 <prvIsQueueFull>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d018      	beq.n	8009b50 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b20:	3310      	adds	r3, #16
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	4611      	mov	r1, r2
 8009b26:	4618      	mov	r0, r3
 8009b28:	f000 ff2a 	bl	800a980 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009b2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b2e:	f000 fa31 	bl	8009f94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009b32:	f000 fd5f 	bl	800a5f4 <xTaskResumeAll>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	f47f af7c 	bne.w	8009a36 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8009b70 <xQueueGenericSend+0x200>)
 8009b40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b44:	601a      	str	r2, [r3, #0]
 8009b46:	f3bf 8f4f 	dsb	sy
 8009b4a:	f3bf 8f6f 	isb	sy
 8009b4e:	e772      	b.n	8009a36 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009b50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b52:	f000 fa1f 	bl	8009f94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b56:	f000 fd4d 	bl	800a5f4 <xTaskResumeAll>
 8009b5a:	e76c      	b.n	8009a36 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009b5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b5e:	f000 fa19 	bl	8009f94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b62:	f000 fd47 	bl	800a5f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009b66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3738      	adds	r7, #56	@ 0x38
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	e000ed04 	.word	0xe000ed04

08009b74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b090      	sub	sp, #64	@ 0x40
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	607a      	str	r2, [r7, #4]
 8009b80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d10b      	bne.n	8009ba4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b90:	f383 8811 	msr	BASEPRI, r3
 8009b94:	f3bf 8f6f 	isb	sy
 8009b98:	f3bf 8f4f 	dsb	sy
 8009b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009b9e:	bf00      	nop
 8009ba0:	bf00      	nop
 8009ba2:	e7fd      	b.n	8009ba0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d103      	bne.n	8009bb2 <xQueueGenericSendFromISR+0x3e>
 8009baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d101      	bne.n	8009bb6 <xQueueGenericSendFromISR+0x42>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e000      	b.n	8009bb8 <xQueueGenericSendFromISR+0x44>
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d10b      	bne.n	8009bd4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc0:	f383 8811 	msr	BASEPRI, r3
 8009bc4:	f3bf 8f6f 	isb	sy
 8009bc8:	f3bf 8f4f 	dsb	sy
 8009bcc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009bce:	bf00      	nop
 8009bd0:	bf00      	nop
 8009bd2:	e7fd      	b.n	8009bd0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	2b02      	cmp	r3, #2
 8009bd8:	d103      	bne.n	8009be2 <xQueueGenericSendFromISR+0x6e>
 8009bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d101      	bne.n	8009be6 <xQueueGenericSendFromISR+0x72>
 8009be2:	2301      	movs	r3, #1
 8009be4:	e000      	b.n	8009be8 <xQueueGenericSendFromISR+0x74>
 8009be6:	2300      	movs	r3, #0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d10b      	bne.n	8009c04 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf0:	f383 8811 	msr	BASEPRI, r3
 8009bf4:	f3bf 8f6f 	isb	sy
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	623b      	str	r3, [r7, #32]
}
 8009bfe:	bf00      	nop
 8009c00:	bf00      	nop
 8009c02:	e7fd      	b.n	8009c00 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c04:	f001 ff40 	bl	800ba88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009c08:	f3ef 8211 	mrs	r2, BASEPRI
 8009c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c10:	f383 8811 	msr	BASEPRI, r3
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	f3bf 8f4f 	dsb	sy
 8009c1c:	61fa      	str	r2, [r7, #28]
 8009c1e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009c20:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c22:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d302      	bcc.n	8009c36 <xQueueGenericSendFromISR+0xc2>
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	2b02      	cmp	r3, #2
 8009c34:	d12f      	bne.n	8009c96 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c46:	683a      	ldr	r2, [r7, #0]
 8009c48:	68b9      	ldr	r1, [r7, #8]
 8009c4a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009c4c:	f000 f912 	bl	8009e74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009c50:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009c54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c58:	d112      	bne.n	8009c80 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d016      	beq.n	8009c90 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c64:	3324      	adds	r3, #36	@ 0x24
 8009c66:	4618      	mov	r0, r3
 8009c68:	f000 fedc 	bl	800aa24 <xTaskRemoveFromEventList>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d00e      	beq.n	8009c90 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00b      	beq.n	8009c90 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	601a      	str	r2, [r3, #0]
 8009c7e:	e007      	b.n	8009c90 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009c80:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009c84:	3301      	adds	r3, #1
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	b25a      	sxtb	r2, r3
 8009c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009c90:	2301      	movs	r3, #1
 8009c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009c94:	e001      	b.n	8009c9a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009c96:	2300      	movs	r3, #0
 8009c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c9c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009ca4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3740      	adds	r7, #64	@ 0x40
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b08c      	sub	sp, #48	@ 0x30
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d10b      	bne.n	8009ce2 <xQueueReceive+0x32>
	__asm volatile
 8009cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cce:	f383 8811 	msr	BASEPRI, r3
 8009cd2:	f3bf 8f6f 	isb	sy
 8009cd6:	f3bf 8f4f 	dsb	sy
 8009cda:	623b      	str	r3, [r7, #32]
}
 8009cdc:	bf00      	nop
 8009cde:	bf00      	nop
 8009ce0:	e7fd      	b.n	8009cde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d103      	bne.n	8009cf0 <xQueueReceive+0x40>
 8009ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d101      	bne.n	8009cf4 <xQueueReceive+0x44>
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e000      	b.n	8009cf6 <xQueueReceive+0x46>
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d10b      	bne.n	8009d12 <xQueueReceive+0x62>
	__asm volatile
 8009cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cfe:	f383 8811 	msr	BASEPRI, r3
 8009d02:	f3bf 8f6f 	isb	sy
 8009d06:	f3bf 8f4f 	dsb	sy
 8009d0a:	61fb      	str	r3, [r7, #28]
}
 8009d0c:	bf00      	nop
 8009d0e:	bf00      	nop
 8009d10:	e7fd      	b.n	8009d0e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d12:	f001 f86f 	bl	800adf4 <xTaskGetSchedulerState>
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d102      	bne.n	8009d22 <xQueueReceive+0x72>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d101      	bne.n	8009d26 <xQueueReceive+0x76>
 8009d22:	2301      	movs	r3, #1
 8009d24:	e000      	b.n	8009d28 <xQueueReceive+0x78>
 8009d26:	2300      	movs	r3, #0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10b      	bne.n	8009d44 <xQueueReceive+0x94>
	__asm volatile
 8009d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d30:	f383 8811 	msr	BASEPRI, r3
 8009d34:	f3bf 8f6f 	isb	sy
 8009d38:	f3bf 8f4f 	dsb	sy
 8009d3c:	61bb      	str	r3, [r7, #24]
}
 8009d3e:	bf00      	nop
 8009d40:	bf00      	nop
 8009d42:	e7fd      	b.n	8009d40 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d44:	f001 fdc0 	bl	800b8c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d4c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d01f      	beq.n	8009d94 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009d54:	68b9      	ldr	r1, [r7, #8]
 8009d56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d58:	f000 f8f6 	bl	8009f48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d5e:	1e5a      	subs	r2, r3, #1
 8009d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d62:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d66:	691b      	ldr	r3, [r3, #16]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d00f      	beq.n	8009d8c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d6e:	3310      	adds	r3, #16
 8009d70:	4618      	mov	r0, r3
 8009d72:	f000 fe57 	bl	800aa24 <xTaskRemoveFromEventList>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d007      	beq.n	8009d8c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009d7c:	4b3c      	ldr	r3, [pc, #240]	@ (8009e70 <xQueueReceive+0x1c0>)
 8009d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d82:	601a      	str	r2, [r3, #0]
 8009d84:	f3bf 8f4f 	dsb	sy
 8009d88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009d8c:	f001 fdce 	bl	800b92c <vPortExitCritical>
				return pdPASS;
 8009d90:	2301      	movs	r3, #1
 8009d92:	e069      	b.n	8009e68 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d103      	bne.n	8009da2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d9a:	f001 fdc7 	bl	800b92c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	e062      	b.n	8009e68 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d106      	bne.n	8009db6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009da8:	f107 0310 	add.w	r3, r7, #16
 8009dac:	4618      	mov	r0, r3
 8009dae:	f000 fec5 	bl	800ab3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009db2:	2301      	movs	r3, #1
 8009db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009db6:	f001 fdb9 	bl	800b92c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009dba:	f000 fc0d 	bl	800a5d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009dbe:	f001 fd83 	bl	800b8c8 <vPortEnterCritical>
 8009dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009dc8:	b25b      	sxtb	r3, r3
 8009dca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009dce:	d103      	bne.n	8009dd8 <xQueueReceive+0x128>
 8009dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009dde:	b25b      	sxtb	r3, r3
 8009de0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009de4:	d103      	bne.n	8009dee <xQueueReceive+0x13e>
 8009de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de8:	2200      	movs	r2, #0
 8009dea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009dee:	f001 fd9d 	bl	800b92c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009df2:	1d3a      	adds	r2, r7, #4
 8009df4:	f107 0310 	add.w	r3, r7, #16
 8009df8:	4611      	mov	r1, r2
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f000 feb4 	bl	800ab68 <xTaskCheckForTimeOut>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d123      	bne.n	8009e4e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e08:	f000 f916 	bl	800a038 <prvIsQueueEmpty>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d017      	beq.n	8009e42 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e14:	3324      	adds	r3, #36	@ 0x24
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	4611      	mov	r1, r2
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f000 fdb0 	bl	800a980 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009e20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e22:	f000 f8b7 	bl	8009f94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009e26:	f000 fbe5 	bl	800a5f4 <xTaskResumeAll>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d189      	bne.n	8009d44 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009e30:	4b0f      	ldr	r3, [pc, #60]	@ (8009e70 <xQueueReceive+0x1c0>)
 8009e32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e36:	601a      	str	r2, [r3, #0]
 8009e38:	f3bf 8f4f 	dsb	sy
 8009e3c:	f3bf 8f6f 	isb	sy
 8009e40:	e780      	b.n	8009d44 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009e42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e44:	f000 f8a6 	bl	8009f94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e48:	f000 fbd4 	bl	800a5f4 <xTaskResumeAll>
 8009e4c:	e77a      	b.n	8009d44 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009e4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e50:	f000 f8a0 	bl	8009f94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e54:	f000 fbce 	bl	800a5f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e5a:	f000 f8ed 	bl	800a038 <prvIsQueueEmpty>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	f43f af6f 	beq.w	8009d44 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009e66:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3730      	adds	r7, #48	@ 0x30
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	e000ed04 	.word	0xe000ed04

08009e74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b086      	sub	sp, #24
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009e80:	2300      	movs	r3, #0
 8009e82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d10d      	bne.n	8009eae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d14d      	bne.n	8009f36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f000 ffc6 	bl	800ae30 <xTaskPriorityDisinherit>
 8009ea4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	609a      	str	r2, [r3, #8]
 8009eac:	e043      	b.n	8009f36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d119      	bne.n	8009ee8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6858      	ldr	r0, [r3, #4]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	68b9      	ldr	r1, [r7, #8]
 8009ec0:	f013 ff15 	bl	801dcee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	685a      	ldr	r2, [r3, #4]
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ecc:	441a      	add	r2, r3
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	685a      	ldr	r2, [r3, #4]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d32b      	bcc.n	8009f36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	605a      	str	r2, [r3, #4]
 8009ee6:	e026      	b.n	8009f36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	68d8      	ldr	r0, [r3, #12]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	68b9      	ldr	r1, [r7, #8]
 8009ef4:	f013 fefb 	bl	801dcee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	68da      	ldr	r2, [r3, #12]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f00:	425b      	negs	r3, r3
 8009f02:	441a      	add	r2, r3
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	68da      	ldr	r2, [r3, #12]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d207      	bcs.n	8009f24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	689a      	ldr	r2, [r3, #8]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f1c:	425b      	negs	r3, r3
 8009f1e:	441a      	add	r2, r3
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2b02      	cmp	r3, #2
 8009f28:	d105      	bne.n	8009f36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d002      	beq.n	8009f36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	3b01      	subs	r3, #1
 8009f34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	1c5a      	adds	r2, r3, #1
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009f3e:	697b      	ldr	r3, [r7, #20]
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3718      	adds	r7, #24
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d018      	beq.n	8009f8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	68da      	ldr	r2, [r3, #12]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f62:	441a      	add	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	68da      	ldr	r2, [r3, #12]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d303      	bcc.n	8009f7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	68d9      	ldr	r1, [r3, #12]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f84:	461a      	mov	r2, r3
 8009f86:	6838      	ldr	r0, [r7, #0]
 8009f88:	f013 feb1 	bl	801dcee <memcpy>
	}
}
 8009f8c:	bf00      	nop
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009f9c:	f001 fc94 	bl	800b8c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009fa6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009fa8:	e011      	b.n	8009fce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d012      	beq.n	8009fd8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	3324      	adds	r3, #36	@ 0x24
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f000 fd34 	bl	800aa24 <xTaskRemoveFromEventList>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d001      	beq.n	8009fc6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009fc2:	f000 fe35 	bl	800ac30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009fc6:	7bfb      	ldrb	r3, [r7, #15]
 8009fc8:	3b01      	subs	r3, #1
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	dce9      	bgt.n	8009faa <prvUnlockQueue+0x16>
 8009fd6:	e000      	b.n	8009fda <prvUnlockQueue+0x46>
					break;
 8009fd8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	22ff      	movs	r2, #255	@ 0xff
 8009fde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009fe2:	f001 fca3 	bl	800b92c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009fe6:	f001 fc6f 	bl	800b8c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ff0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ff2:	e011      	b.n	800a018 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d012      	beq.n	800a022 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	3310      	adds	r3, #16
 800a000:	4618      	mov	r0, r3
 800a002:	f000 fd0f 	bl	800aa24 <xTaskRemoveFromEventList>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d001      	beq.n	800a010 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a00c:	f000 fe10 	bl	800ac30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a010:	7bbb      	ldrb	r3, [r7, #14]
 800a012:	3b01      	subs	r3, #1
 800a014:	b2db      	uxtb	r3, r3
 800a016:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a018:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	dce9      	bgt.n	8009ff4 <prvUnlockQueue+0x60>
 800a020:	e000      	b.n	800a024 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a022:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	22ff      	movs	r2, #255	@ 0xff
 800a028:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a02c:	f001 fc7e 	bl	800b92c <vPortExitCritical>
}
 800a030:	bf00      	nop
 800a032:	3710      	adds	r7, #16
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a040:	f001 fc42 	bl	800b8c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d102      	bne.n	800a052 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a04c:	2301      	movs	r3, #1
 800a04e:	60fb      	str	r3, [r7, #12]
 800a050:	e001      	b.n	800a056 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a052:	2300      	movs	r3, #0
 800a054:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a056:	f001 fc69 	bl	800b92c <vPortExitCritical>

	return xReturn;
 800a05a:	68fb      	ldr	r3, [r7, #12]
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a06c:	f001 fc2c 	bl	800b8c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a078:	429a      	cmp	r2, r3
 800a07a:	d102      	bne.n	800a082 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a07c:	2301      	movs	r3, #1
 800a07e:	60fb      	str	r3, [r7, #12]
 800a080:	e001      	b.n	800a086 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a082:	2300      	movs	r3, #0
 800a084:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a086:	f001 fc51 	bl	800b92c <vPortExitCritical>

	return xReturn;
 800a08a:	68fb      	ldr	r3, [r7, #12]
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3710      	adds	r7, #16
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a094:	b480      	push	{r7}
 800a096:	b085      	sub	sp, #20
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a09e:	2300      	movs	r3, #0
 800a0a0:	60fb      	str	r3, [r7, #12]
 800a0a2:	e014      	b.n	800a0ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a0a4:	4a0f      	ldr	r2, [pc, #60]	@ (800a0e4 <vQueueAddToRegistry+0x50>)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d10b      	bne.n	800a0c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a0b0:	490c      	ldr	r1, [pc, #48]	@ (800a0e4 <vQueueAddToRegistry+0x50>)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	683a      	ldr	r2, [r7, #0]
 800a0b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a0ba:	4a0a      	ldr	r2, [pc, #40]	@ (800a0e4 <vQueueAddToRegistry+0x50>)
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	00db      	lsls	r3, r3, #3
 800a0c0:	4413      	add	r3, r2
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a0c6:	e006      	b.n	800a0d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	60fb      	str	r3, [r7, #12]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2b07      	cmp	r3, #7
 800a0d2:	d9e7      	bls.n	800a0a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a0d4:	bf00      	nop
 800a0d6:	bf00      	nop
 800a0d8:	3714      	adds	r7, #20
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr
 800a0e2:	bf00      	nop
 800a0e4:	20008fe0 	.word	0x20008fe0

0800a0e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b086      	sub	sp, #24
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a0f8:	f001 fbe6 	bl	800b8c8 <vPortEnterCritical>
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a102:	b25b      	sxtb	r3, r3
 800a104:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a108:	d103      	bne.n	800a112 <vQueueWaitForMessageRestricted+0x2a>
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a118:	b25b      	sxtb	r3, r3
 800a11a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a11e:	d103      	bne.n	800a128 <vQueueWaitForMessageRestricted+0x40>
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	2200      	movs	r2, #0
 800a124:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a128:	f001 fc00 	bl	800b92c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a130:	2b00      	cmp	r3, #0
 800a132:	d106      	bne.n	800a142 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	3324      	adds	r3, #36	@ 0x24
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	68b9      	ldr	r1, [r7, #8]
 800a13c:	4618      	mov	r0, r3
 800a13e:	f000 fc45 	bl	800a9cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a142:	6978      	ldr	r0, [r7, #20]
 800a144:	f7ff ff26 	bl	8009f94 <prvUnlockQueue>
	}
 800a148:	bf00      	nop
 800a14a:	3718      	adds	r7, #24
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a150:	b580      	push	{r7, lr}
 800a152:	b08e      	sub	sp, #56	@ 0x38
 800a154:	af04      	add	r7, sp, #16
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	607a      	str	r2, [r7, #4]
 800a15c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a15e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a160:	2b00      	cmp	r3, #0
 800a162:	d10b      	bne.n	800a17c <xTaskCreateStatic+0x2c>
	__asm volatile
 800a164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a168:	f383 8811 	msr	BASEPRI, r3
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	623b      	str	r3, [r7, #32]
}
 800a176:	bf00      	nop
 800a178:	bf00      	nop
 800a17a:	e7fd      	b.n	800a178 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a17c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d10b      	bne.n	800a19a <xTaskCreateStatic+0x4a>
	__asm volatile
 800a182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a186:	f383 8811 	msr	BASEPRI, r3
 800a18a:	f3bf 8f6f 	isb	sy
 800a18e:	f3bf 8f4f 	dsb	sy
 800a192:	61fb      	str	r3, [r7, #28]
}
 800a194:	bf00      	nop
 800a196:	bf00      	nop
 800a198:	e7fd      	b.n	800a196 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a19a:	235c      	movs	r3, #92	@ 0x5c
 800a19c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	2b5c      	cmp	r3, #92	@ 0x5c
 800a1a2:	d00b      	beq.n	800a1bc <xTaskCreateStatic+0x6c>
	__asm volatile
 800a1a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a8:	f383 8811 	msr	BASEPRI, r3
 800a1ac:	f3bf 8f6f 	isb	sy
 800a1b0:	f3bf 8f4f 	dsb	sy
 800a1b4:	61bb      	str	r3, [r7, #24]
}
 800a1b6:	bf00      	nop
 800a1b8:	bf00      	nop
 800a1ba:	e7fd      	b.n	800a1b8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a1bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d01e      	beq.n	800a202 <xTaskCreateStatic+0xb2>
 800a1c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d01b      	beq.n	800a202 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d6:	2202      	movs	r2, #2
 800a1d8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a1dc:	2300      	movs	r3, #0
 800a1de:	9303      	str	r3, [sp, #12]
 800a1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e2:	9302      	str	r3, [sp, #8]
 800a1e4:	f107 0314 	add.w	r3, r7, #20
 800a1e8:	9301      	str	r3, [sp, #4]
 800a1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ec:	9300      	str	r3, [sp, #0]
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	68b9      	ldr	r1, [r7, #8]
 800a1f4:	68f8      	ldr	r0, [r7, #12]
 800a1f6:	f000 f850 	bl	800a29a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a1fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a1fc:	f000 f8de 	bl	800a3bc <prvAddNewTaskToReadyList>
 800a200:	e001      	b.n	800a206 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a202:	2300      	movs	r3, #0
 800a204:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a206:	697b      	ldr	r3, [r7, #20]
	}
 800a208:	4618      	mov	r0, r3
 800a20a:	3728      	adds	r7, #40	@ 0x28
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a210:	b580      	push	{r7, lr}
 800a212:	b08c      	sub	sp, #48	@ 0x30
 800a214:	af04      	add	r7, sp, #16
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	603b      	str	r3, [r7, #0]
 800a21c:	4613      	mov	r3, r2
 800a21e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a220:	88fb      	ldrh	r3, [r7, #6]
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	4618      	mov	r0, r3
 800a226:	f001 fc71 	bl	800bb0c <pvPortMalloc>
 800a22a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d00e      	beq.n	800a250 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a232:	205c      	movs	r0, #92	@ 0x5c
 800a234:	f001 fc6a 	bl	800bb0c <pvPortMalloc>
 800a238:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d003      	beq.n	800a248 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	697a      	ldr	r2, [r7, #20]
 800a244:	631a      	str	r2, [r3, #48]	@ 0x30
 800a246:	e005      	b.n	800a254 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a248:	6978      	ldr	r0, [r7, #20]
 800a24a:	f001 fd2d 	bl	800bca8 <vPortFree>
 800a24e:	e001      	b.n	800a254 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a250:	2300      	movs	r3, #0
 800a252:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a254:	69fb      	ldr	r3, [r7, #28]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d017      	beq.n	800a28a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a25a:	69fb      	ldr	r3, [r7, #28]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a262:	88fa      	ldrh	r2, [r7, #6]
 800a264:	2300      	movs	r3, #0
 800a266:	9303      	str	r3, [sp, #12]
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	9302      	str	r3, [sp, #8]
 800a26c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a26e:	9301      	str	r3, [sp, #4]
 800a270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a272:	9300      	str	r3, [sp, #0]
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	68b9      	ldr	r1, [r7, #8]
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	f000 f80e 	bl	800a29a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a27e:	69f8      	ldr	r0, [r7, #28]
 800a280:	f000 f89c 	bl	800a3bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a284:	2301      	movs	r3, #1
 800a286:	61bb      	str	r3, [r7, #24]
 800a288:	e002      	b.n	800a290 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a28a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a28e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a290:	69bb      	ldr	r3, [r7, #24]
	}
 800a292:	4618      	mov	r0, r3
 800a294:	3720      	adds	r7, #32
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b088      	sub	sp, #32
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	60f8      	str	r0, [r7, #12]
 800a2a2:	60b9      	str	r1, [r7, #8]
 800a2a4:	607a      	str	r2, [r7, #4]
 800a2a6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a2a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2aa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	21a5      	movs	r1, #165	@ 0xa5
 800a2b4:	f013 fc40 	bl	801db38 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	4413      	add	r3, r2
 800a2c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	f023 0307 	bic.w	r3, r3, #7
 800a2d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a2d2:	69bb      	ldr	r3, [r7, #24]
 800a2d4:	f003 0307 	and.w	r3, r3, #7
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d00b      	beq.n	800a2f4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a2dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2e0:	f383 8811 	msr	BASEPRI, r3
 800a2e4:	f3bf 8f6f 	isb	sy
 800a2e8:	f3bf 8f4f 	dsb	sy
 800a2ec:	617b      	str	r3, [r7, #20]
}
 800a2ee:	bf00      	nop
 800a2f0:	bf00      	nop
 800a2f2:	e7fd      	b.n	800a2f0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d01f      	beq.n	800a33a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	61fb      	str	r3, [r7, #28]
 800a2fe:	e012      	b.n	800a326 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a300:	68ba      	ldr	r2, [r7, #8]
 800a302:	69fb      	ldr	r3, [r7, #28]
 800a304:	4413      	add	r3, r2
 800a306:	7819      	ldrb	r1, [r3, #0]
 800a308:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a30a:	69fb      	ldr	r3, [r7, #28]
 800a30c:	4413      	add	r3, r2
 800a30e:	3334      	adds	r3, #52	@ 0x34
 800a310:	460a      	mov	r2, r1
 800a312:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a314:	68ba      	ldr	r2, [r7, #8]
 800a316:	69fb      	ldr	r3, [r7, #28]
 800a318:	4413      	add	r3, r2
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d006      	beq.n	800a32e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a320:	69fb      	ldr	r3, [r7, #28]
 800a322:	3301      	adds	r3, #1
 800a324:	61fb      	str	r3, [r7, #28]
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	2b0f      	cmp	r3, #15
 800a32a:	d9e9      	bls.n	800a300 <prvInitialiseNewTask+0x66>
 800a32c:	e000      	b.n	800a330 <prvInitialiseNewTask+0x96>
			{
				break;
 800a32e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a332:	2200      	movs	r2, #0
 800a334:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a338:	e003      	b.n	800a342 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a33a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a33c:	2200      	movs	r2, #0
 800a33e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a344:	2b37      	cmp	r3, #55	@ 0x37
 800a346:	d901      	bls.n	800a34c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a348:	2337      	movs	r3, #55	@ 0x37
 800a34a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a350:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a354:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a356:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a35a:	2200      	movs	r2, #0
 800a35c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a360:	3304      	adds	r3, #4
 800a362:	4618      	mov	r0, r3
 800a364:	f7ff f966 	bl	8009634 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a36a:	3318      	adds	r3, #24
 800a36c:	4618      	mov	r0, r3
 800a36e:	f7ff f961 	bl	8009634 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a374:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a376:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a37a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a380:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a384:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a386:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a38a:	2200      	movs	r2, #0
 800a38c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a390:	2200      	movs	r2, #0
 800a392:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a396:	683a      	ldr	r2, [r7, #0]
 800a398:	68f9      	ldr	r1, [r7, #12]
 800a39a:	69b8      	ldr	r0, [r7, #24]
 800a39c:	f001 f966 	bl	800b66c <pxPortInitialiseStack>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a3a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d002      	beq.n	800a3b2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a3ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3b2:	bf00      	nop
 800a3b4:	3720      	adds	r7, #32
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
	...

0800a3bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a3c4:	f001 fa80 	bl	800b8c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a3c8:	4b2d      	ldr	r3, [pc, #180]	@ (800a480 <prvAddNewTaskToReadyList+0xc4>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	4a2c      	ldr	r2, [pc, #176]	@ (800a480 <prvAddNewTaskToReadyList+0xc4>)
 800a3d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a3d2:	4b2c      	ldr	r3, [pc, #176]	@ (800a484 <prvAddNewTaskToReadyList+0xc8>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d109      	bne.n	800a3ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a3da:	4a2a      	ldr	r2, [pc, #168]	@ (800a484 <prvAddNewTaskToReadyList+0xc8>)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a3e0:	4b27      	ldr	r3, [pc, #156]	@ (800a480 <prvAddNewTaskToReadyList+0xc4>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d110      	bne.n	800a40a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a3e8:	f000 fc46 	bl	800ac78 <prvInitialiseTaskLists>
 800a3ec:	e00d      	b.n	800a40a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a3ee:	4b26      	ldr	r3, [pc, #152]	@ (800a488 <prvAddNewTaskToReadyList+0xcc>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d109      	bne.n	800a40a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a3f6:	4b23      	ldr	r3, [pc, #140]	@ (800a484 <prvAddNewTaskToReadyList+0xc8>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a400:	429a      	cmp	r2, r3
 800a402:	d802      	bhi.n	800a40a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a404:	4a1f      	ldr	r2, [pc, #124]	@ (800a484 <prvAddNewTaskToReadyList+0xc8>)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a40a:	4b20      	ldr	r3, [pc, #128]	@ (800a48c <prvAddNewTaskToReadyList+0xd0>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	3301      	adds	r3, #1
 800a410:	4a1e      	ldr	r2, [pc, #120]	@ (800a48c <prvAddNewTaskToReadyList+0xd0>)
 800a412:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a414:	4b1d      	ldr	r3, [pc, #116]	@ (800a48c <prvAddNewTaskToReadyList+0xd0>)
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a420:	4b1b      	ldr	r3, [pc, #108]	@ (800a490 <prvAddNewTaskToReadyList+0xd4>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	429a      	cmp	r2, r3
 800a426:	d903      	bls.n	800a430 <prvAddNewTaskToReadyList+0x74>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a42c:	4a18      	ldr	r2, [pc, #96]	@ (800a490 <prvAddNewTaskToReadyList+0xd4>)
 800a42e:	6013      	str	r3, [r2, #0]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a434:	4613      	mov	r3, r2
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	4413      	add	r3, r2
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	4a15      	ldr	r2, [pc, #84]	@ (800a494 <prvAddNewTaskToReadyList+0xd8>)
 800a43e:	441a      	add	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	3304      	adds	r3, #4
 800a444:	4619      	mov	r1, r3
 800a446:	4610      	mov	r0, r2
 800a448:	f7ff f901 	bl	800964e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a44c:	f001 fa6e 	bl	800b92c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a450:	4b0d      	ldr	r3, [pc, #52]	@ (800a488 <prvAddNewTaskToReadyList+0xcc>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d00e      	beq.n	800a476 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a458:	4b0a      	ldr	r3, [pc, #40]	@ (800a484 <prvAddNewTaskToReadyList+0xc8>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a462:	429a      	cmp	r2, r3
 800a464:	d207      	bcs.n	800a476 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a466:	4b0c      	ldr	r3, [pc, #48]	@ (800a498 <prvAddNewTaskToReadyList+0xdc>)
 800a468:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a46c:	601a      	str	r2, [r3, #0]
 800a46e:	f3bf 8f4f 	dsb	sy
 800a472:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a476:	bf00      	nop
 800a478:	3708      	adds	r7, #8
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	200094f4 	.word	0x200094f4
 800a484:	20009020 	.word	0x20009020
 800a488:	20009500 	.word	0x20009500
 800a48c:	20009510 	.word	0x20009510
 800a490:	200094fc 	.word	0x200094fc
 800a494:	20009024 	.word	0x20009024
 800a498:	e000ed04 	.word	0xe000ed04

0800a49c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d018      	beq.n	800a4e0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a4ae:	4b14      	ldr	r3, [pc, #80]	@ (800a500 <vTaskDelay+0x64>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d00b      	beq.n	800a4ce <vTaskDelay+0x32>
	__asm volatile
 800a4b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ba:	f383 8811 	msr	BASEPRI, r3
 800a4be:	f3bf 8f6f 	isb	sy
 800a4c2:	f3bf 8f4f 	dsb	sy
 800a4c6:	60bb      	str	r3, [r7, #8]
}
 800a4c8:	bf00      	nop
 800a4ca:	bf00      	nop
 800a4cc:	e7fd      	b.n	800a4ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a4ce:	f000 f883 	bl	800a5d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 fd1b 	bl	800af10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a4da:	f000 f88b 	bl	800a5f4 <xTaskResumeAll>
 800a4de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d107      	bne.n	800a4f6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a4e6:	4b07      	ldr	r3, [pc, #28]	@ (800a504 <vTaskDelay+0x68>)
 800a4e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4ec:	601a      	str	r2, [r3, #0]
 800a4ee:	f3bf 8f4f 	dsb	sy
 800a4f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a4f6:	bf00      	nop
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	2000951c 	.word	0x2000951c
 800a504:	e000ed04 	.word	0xe000ed04

0800a508 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b08a      	sub	sp, #40	@ 0x28
 800a50c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a50e:	2300      	movs	r3, #0
 800a510:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a512:	2300      	movs	r3, #0
 800a514:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a516:	463a      	mov	r2, r7
 800a518:	1d39      	adds	r1, r7, #4
 800a51a:	f107 0308 	add.w	r3, r7, #8
 800a51e:	4618      	mov	r0, r3
 800a520:	f7ff f834 	bl	800958c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a524:	6839      	ldr	r1, [r7, #0]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	68ba      	ldr	r2, [r7, #8]
 800a52a:	9202      	str	r2, [sp, #8]
 800a52c:	9301      	str	r3, [sp, #4]
 800a52e:	2300      	movs	r3, #0
 800a530:	9300      	str	r3, [sp, #0]
 800a532:	2300      	movs	r3, #0
 800a534:	460a      	mov	r2, r1
 800a536:	4922      	ldr	r1, [pc, #136]	@ (800a5c0 <vTaskStartScheduler+0xb8>)
 800a538:	4822      	ldr	r0, [pc, #136]	@ (800a5c4 <vTaskStartScheduler+0xbc>)
 800a53a:	f7ff fe09 	bl	800a150 <xTaskCreateStatic>
 800a53e:	4603      	mov	r3, r0
 800a540:	4a21      	ldr	r2, [pc, #132]	@ (800a5c8 <vTaskStartScheduler+0xc0>)
 800a542:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a544:	4b20      	ldr	r3, [pc, #128]	@ (800a5c8 <vTaskStartScheduler+0xc0>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d002      	beq.n	800a552 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a54c:	2301      	movs	r3, #1
 800a54e:	617b      	str	r3, [r7, #20]
 800a550:	e001      	b.n	800a556 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a552:	2300      	movs	r3, #0
 800a554:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d102      	bne.n	800a562 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a55c:	f000 fd2c 	bl	800afb8 <xTimerCreateTimerTask>
 800a560:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	2b01      	cmp	r3, #1
 800a566:	d116      	bne.n	800a596 <vTaskStartScheduler+0x8e>
	__asm volatile
 800a568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a56c:	f383 8811 	msr	BASEPRI, r3
 800a570:	f3bf 8f6f 	isb	sy
 800a574:	f3bf 8f4f 	dsb	sy
 800a578:	613b      	str	r3, [r7, #16]
}
 800a57a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a57c:	4b13      	ldr	r3, [pc, #76]	@ (800a5cc <vTaskStartScheduler+0xc4>)
 800a57e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a582:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a584:	4b12      	ldr	r3, [pc, #72]	@ (800a5d0 <vTaskStartScheduler+0xc8>)
 800a586:	2201      	movs	r2, #1
 800a588:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a58a:	4b12      	ldr	r3, [pc, #72]	@ (800a5d4 <vTaskStartScheduler+0xcc>)
 800a58c:	2200      	movs	r2, #0
 800a58e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a590:	f001 f8f6 	bl	800b780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a594:	e00f      	b.n	800a5b6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a59c:	d10b      	bne.n	800a5b6 <vTaskStartScheduler+0xae>
	__asm volatile
 800a59e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5a2:	f383 8811 	msr	BASEPRI, r3
 800a5a6:	f3bf 8f6f 	isb	sy
 800a5aa:	f3bf 8f4f 	dsb	sy
 800a5ae:	60fb      	str	r3, [r7, #12]
}
 800a5b0:	bf00      	nop
 800a5b2:	bf00      	nop
 800a5b4:	e7fd      	b.n	800a5b2 <vTaskStartScheduler+0xaa>
}
 800a5b6:	bf00      	nop
 800a5b8:	3718      	adds	r7, #24
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	0801fcd8 	.word	0x0801fcd8
 800a5c4:	0800ac49 	.word	0x0800ac49
 800a5c8:	20009518 	.word	0x20009518
 800a5cc:	20009514 	.word	0x20009514
 800a5d0:	20009500 	.word	0x20009500
 800a5d4:	200094f8 	.word	0x200094f8

0800a5d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a5d8:	b480      	push	{r7}
 800a5da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a5dc:	4b04      	ldr	r3, [pc, #16]	@ (800a5f0 <vTaskSuspendAll+0x18>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	4a03      	ldr	r2, [pc, #12]	@ (800a5f0 <vTaskSuspendAll+0x18>)
 800a5e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a5e6:	bf00      	nop
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr
 800a5f0:	2000951c 	.word	0x2000951c

0800a5f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a5fe:	2300      	movs	r3, #0
 800a600:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a602:	4b42      	ldr	r3, [pc, #264]	@ (800a70c <xTaskResumeAll+0x118>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d10b      	bne.n	800a622 <xTaskResumeAll+0x2e>
	__asm volatile
 800a60a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a60e:	f383 8811 	msr	BASEPRI, r3
 800a612:	f3bf 8f6f 	isb	sy
 800a616:	f3bf 8f4f 	dsb	sy
 800a61a:	603b      	str	r3, [r7, #0]
}
 800a61c:	bf00      	nop
 800a61e:	bf00      	nop
 800a620:	e7fd      	b.n	800a61e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a622:	f001 f951 	bl	800b8c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a626:	4b39      	ldr	r3, [pc, #228]	@ (800a70c <xTaskResumeAll+0x118>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	3b01      	subs	r3, #1
 800a62c:	4a37      	ldr	r2, [pc, #220]	@ (800a70c <xTaskResumeAll+0x118>)
 800a62e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a630:	4b36      	ldr	r3, [pc, #216]	@ (800a70c <xTaskResumeAll+0x118>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d162      	bne.n	800a6fe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a638:	4b35      	ldr	r3, [pc, #212]	@ (800a710 <xTaskResumeAll+0x11c>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d05e      	beq.n	800a6fe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a640:	e02f      	b.n	800a6a2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a642:	4b34      	ldr	r3, [pc, #208]	@ (800a714 <xTaskResumeAll+0x120>)
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	3318      	adds	r3, #24
 800a64e:	4618      	mov	r0, r3
 800a650:	f7ff f85a 	bl	8009708 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	3304      	adds	r3, #4
 800a658:	4618      	mov	r0, r3
 800a65a:	f7ff f855 	bl	8009708 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a662:	4b2d      	ldr	r3, [pc, #180]	@ (800a718 <xTaskResumeAll+0x124>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	429a      	cmp	r2, r3
 800a668:	d903      	bls.n	800a672 <xTaskResumeAll+0x7e>
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a66e:	4a2a      	ldr	r2, [pc, #168]	@ (800a718 <xTaskResumeAll+0x124>)
 800a670:	6013      	str	r3, [r2, #0]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a676:	4613      	mov	r3, r2
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	4413      	add	r3, r2
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	4a27      	ldr	r2, [pc, #156]	@ (800a71c <xTaskResumeAll+0x128>)
 800a680:	441a      	add	r2, r3
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	3304      	adds	r3, #4
 800a686:	4619      	mov	r1, r3
 800a688:	4610      	mov	r0, r2
 800a68a:	f7fe ffe0 	bl	800964e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a692:	4b23      	ldr	r3, [pc, #140]	@ (800a720 <xTaskResumeAll+0x12c>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a698:	429a      	cmp	r2, r3
 800a69a:	d302      	bcc.n	800a6a2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a69c:	4b21      	ldr	r3, [pc, #132]	@ (800a724 <xTaskResumeAll+0x130>)
 800a69e:	2201      	movs	r2, #1
 800a6a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6a2:	4b1c      	ldr	r3, [pc, #112]	@ (800a714 <xTaskResumeAll+0x120>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d1cb      	bne.n	800a642 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d001      	beq.n	800a6b4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a6b0:	f000 fb80 	bl	800adb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a6b4:	4b1c      	ldr	r3, [pc, #112]	@ (800a728 <xTaskResumeAll+0x134>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d010      	beq.n	800a6e2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a6c0:	f000 f846 	bl	800a750 <xTaskIncrementTick>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d002      	beq.n	800a6d0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a6ca:	4b16      	ldr	r3, [pc, #88]	@ (800a724 <xTaskResumeAll+0x130>)
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	3b01      	subs	r3, #1
 800a6d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d1f1      	bne.n	800a6c0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a6dc:	4b12      	ldr	r3, [pc, #72]	@ (800a728 <xTaskResumeAll+0x134>)
 800a6de:	2200      	movs	r2, #0
 800a6e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a6e2:	4b10      	ldr	r3, [pc, #64]	@ (800a724 <xTaskResumeAll+0x130>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d009      	beq.n	800a6fe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a6ee:	4b0f      	ldr	r3, [pc, #60]	@ (800a72c <xTaskResumeAll+0x138>)
 800a6f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6f4:	601a      	str	r2, [r3, #0]
 800a6f6:	f3bf 8f4f 	dsb	sy
 800a6fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a6fe:	f001 f915 	bl	800b92c <vPortExitCritical>

	return xAlreadyYielded;
 800a702:	68bb      	ldr	r3, [r7, #8]
}
 800a704:	4618      	mov	r0, r3
 800a706:	3710      	adds	r7, #16
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	2000951c 	.word	0x2000951c
 800a710:	200094f4 	.word	0x200094f4
 800a714:	200094b4 	.word	0x200094b4
 800a718:	200094fc 	.word	0x200094fc
 800a71c:	20009024 	.word	0x20009024
 800a720:	20009020 	.word	0x20009020
 800a724:	20009508 	.word	0x20009508
 800a728:	20009504 	.word	0x20009504
 800a72c:	e000ed04 	.word	0xe000ed04

0800a730 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a736:	4b05      	ldr	r3, [pc, #20]	@ (800a74c <xTaskGetTickCount+0x1c>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a73c:	687b      	ldr	r3, [r7, #4]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	370c      	adds	r7, #12
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr
 800a74a:	bf00      	nop
 800a74c:	200094f8 	.word	0x200094f8

0800a750 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b086      	sub	sp, #24
 800a754:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a756:	2300      	movs	r3, #0
 800a758:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a75a:	4b4f      	ldr	r3, [pc, #316]	@ (800a898 <xTaskIncrementTick+0x148>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	f040 8090 	bne.w	800a884 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a764:	4b4d      	ldr	r3, [pc, #308]	@ (800a89c <xTaskIncrementTick+0x14c>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	3301      	adds	r3, #1
 800a76a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a76c:	4a4b      	ldr	r2, [pc, #300]	@ (800a89c <xTaskIncrementTick+0x14c>)
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d121      	bne.n	800a7bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a778:	4b49      	ldr	r3, [pc, #292]	@ (800a8a0 <xTaskIncrementTick+0x150>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d00b      	beq.n	800a79a <xTaskIncrementTick+0x4a>
	__asm volatile
 800a782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a786:	f383 8811 	msr	BASEPRI, r3
 800a78a:	f3bf 8f6f 	isb	sy
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	603b      	str	r3, [r7, #0]
}
 800a794:	bf00      	nop
 800a796:	bf00      	nop
 800a798:	e7fd      	b.n	800a796 <xTaskIncrementTick+0x46>
 800a79a:	4b41      	ldr	r3, [pc, #260]	@ (800a8a0 <xTaskIncrementTick+0x150>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	60fb      	str	r3, [r7, #12]
 800a7a0:	4b40      	ldr	r3, [pc, #256]	@ (800a8a4 <xTaskIncrementTick+0x154>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a3e      	ldr	r2, [pc, #248]	@ (800a8a0 <xTaskIncrementTick+0x150>)
 800a7a6:	6013      	str	r3, [r2, #0]
 800a7a8:	4a3e      	ldr	r2, [pc, #248]	@ (800a8a4 <xTaskIncrementTick+0x154>)
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	6013      	str	r3, [r2, #0]
 800a7ae:	4b3e      	ldr	r3, [pc, #248]	@ (800a8a8 <xTaskIncrementTick+0x158>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	4a3c      	ldr	r2, [pc, #240]	@ (800a8a8 <xTaskIncrementTick+0x158>)
 800a7b6:	6013      	str	r3, [r2, #0]
 800a7b8:	f000 fafc 	bl	800adb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a7bc:	4b3b      	ldr	r3, [pc, #236]	@ (800a8ac <xTaskIncrementTick+0x15c>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	693a      	ldr	r2, [r7, #16]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d349      	bcc.n	800a85a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7c6:	4b36      	ldr	r3, [pc, #216]	@ (800a8a0 <xTaskIncrementTick+0x150>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d104      	bne.n	800a7da <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7d0:	4b36      	ldr	r3, [pc, #216]	@ (800a8ac <xTaskIncrementTick+0x15c>)
 800a7d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a7d6:	601a      	str	r2, [r3, #0]
					break;
 800a7d8:	e03f      	b.n	800a85a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7da:	4b31      	ldr	r3, [pc, #196]	@ (800a8a0 <xTaskIncrementTick+0x150>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	68db      	ldr	r3, [r3, #12]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a7ea:	693a      	ldr	r2, [r7, #16]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d203      	bcs.n	800a7fa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a7f2:	4a2e      	ldr	r2, [pc, #184]	@ (800a8ac <xTaskIncrementTick+0x15c>)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a7f8:	e02f      	b.n	800a85a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	3304      	adds	r3, #4
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7fe ff82 	bl	8009708 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d004      	beq.n	800a816 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	3318      	adds	r3, #24
 800a810:	4618      	mov	r0, r3
 800a812:	f7fe ff79 	bl	8009708 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a81a:	4b25      	ldr	r3, [pc, #148]	@ (800a8b0 <xTaskIncrementTick+0x160>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	429a      	cmp	r2, r3
 800a820:	d903      	bls.n	800a82a <xTaskIncrementTick+0xda>
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a826:	4a22      	ldr	r2, [pc, #136]	@ (800a8b0 <xTaskIncrementTick+0x160>)
 800a828:	6013      	str	r3, [r2, #0]
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a82e:	4613      	mov	r3, r2
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	4413      	add	r3, r2
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	4a1f      	ldr	r2, [pc, #124]	@ (800a8b4 <xTaskIncrementTick+0x164>)
 800a838:	441a      	add	r2, r3
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	3304      	adds	r3, #4
 800a83e:	4619      	mov	r1, r3
 800a840:	4610      	mov	r0, r2
 800a842:	f7fe ff04 	bl	800964e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a84a:	4b1b      	ldr	r3, [pc, #108]	@ (800a8b8 <xTaskIncrementTick+0x168>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a850:	429a      	cmp	r2, r3
 800a852:	d3b8      	bcc.n	800a7c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a854:	2301      	movs	r3, #1
 800a856:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a858:	e7b5      	b.n	800a7c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a85a:	4b17      	ldr	r3, [pc, #92]	@ (800a8b8 <xTaskIncrementTick+0x168>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a860:	4914      	ldr	r1, [pc, #80]	@ (800a8b4 <xTaskIncrementTick+0x164>)
 800a862:	4613      	mov	r3, r2
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	4413      	add	r3, r2
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	440b      	add	r3, r1
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	2b01      	cmp	r3, #1
 800a870:	d901      	bls.n	800a876 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a872:	2301      	movs	r3, #1
 800a874:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a876:	4b11      	ldr	r3, [pc, #68]	@ (800a8bc <xTaskIncrementTick+0x16c>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d007      	beq.n	800a88e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a87e:	2301      	movs	r3, #1
 800a880:	617b      	str	r3, [r7, #20]
 800a882:	e004      	b.n	800a88e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a884:	4b0e      	ldr	r3, [pc, #56]	@ (800a8c0 <xTaskIncrementTick+0x170>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	3301      	adds	r3, #1
 800a88a:	4a0d      	ldr	r2, [pc, #52]	@ (800a8c0 <xTaskIncrementTick+0x170>)
 800a88c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a88e:	697b      	ldr	r3, [r7, #20]
}
 800a890:	4618      	mov	r0, r3
 800a892:	3718      	adds	r7, #24
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	2000951c 	.word	0x2000951c
 800a89c:	200094f8 	.word	0x200094f8
 800a8a0:	200094ac 	.word	0x200094ac
 800a8a4:	200094b0 	.word	0x200094b0
 800a8a8:	2000950c 	.word	0x2000950c
 800a8ac:	20009514 	.word	0x20009514
 800a8b0:	200094fc 	.word	0x200094fc
 800a8b4:	20009024 	.word	0x20009024
 800a8b8:	20009020 	.word	0x20009020
 800a8bc:	20009508 	.word	0x20009508
 800a8c0:	20009504 	.word	0x20009504

0800a8c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b085      	sub	sp, #20
 800a8c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a8ca:	4b28      	ldr	r3, [pc, #160]	@ (800a96c <vTaskSwitchContext+0xa8>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d003      	beq.n	800a8da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a8d2:	4b27      	ldr	r3, [pc, #156]	@ (800a970 <vTaskSwitchContext+0xac>)
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a8d8:	e042      	b.n	800a960 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800a8da:	4b25      	ldr	r3, [pc, #148]	@ (800a970 <vTaskSwitchContext+0xac>)
 800a8dc:	2200      	movs	r2, #0
 800a8de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8e0:	4b24      	ldr	r3, [pc, #144]	@ (800a974 <vTaskSwitchContext+0xb0>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	60fb      	str	r3, [r7, #12]
 800a8e6:	e011      	b.n	800a90c <vTaskSwitchContext+0x48>
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d10b      	bne.n	800a906 <vTaskSwitchContext+0x42>
	__asm volatile
 800a8ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8f2:	f383 8811 	msr	BASEPRI, r3
 800a8f6:	f3bf 8f6f 	isb	sy
 800a8fa:	f3bf 8f4f 	dsb	sy
 800a8fe:	607b      	str	r3, [r7, #4]
}
 800a900:	bf00      	nop
 800a902:	bf00      	nop
 800a904:	e7fd      	b.n	800a902 <vTaskSwitchContext+0x3e>
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	3b01      	subs	r3, #1
 800a90a:	60fb      	str	r3, [r7, #12]
 800a90c:	491a      	ldr	r1, [pc, #104]	@ (800a978 <vTaskSwitchContext+0xb4>)
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	4613      	mov	r3, r2
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	4413      	add	r3, r2
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	440b      	add	r3, r1
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d0e3      	beq.n	800a8e8 <vTaskSwitchContext+0x24>
 800a920:	68fa      	ldr	r2, [r7, #12]
 800a922:	4613      	mov	r3, r2
 800a924:	009b      	lsls	r3, r3, #2
 800a926:	4413      	add	r3, r2
 800a928:	009b      	lsls	r3, r3, #2
 800a92a:	4a13      	ldr	r2, [pc, #76]	@ (800a978 <vTaskSwitchContext+0xb4>)
 800a92c:	4413      	add	r3, r2
 800a92e:	60bb      	str	r3, [r7, #8]
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	685a      	ldr	r2, [r3, #4]
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	605a      	str	r2, [r3, #4]
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	685a      	ldr	r2, [r3, #4]
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	3308      	adds	r3, #8
 800a942:	429a      	cmp	r2, r3
 800a944:	d104      	bne.n	800a950 <vTaskSwitchContext+0x8c>
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	685a      	ldr	r2, [r3, #4]
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	605a      	str	r2, [r3, #4]
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	4a09      	ldr	r2, [pc, #36]	@ (800a97c <vTaskSwitchContext+0xb8>)
 800a958:	6013      	str	r3, [r2, #0]
 800a95a:	4a06      	ldr	r2, [pc, #24]	@ (800a974 <vTaskSwitchContext+0xb0>)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6013      	str	r3, [r2, #0]
}
 800a960:	bf00      	nop
 800a962:	3714      	adds	r7, #20
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr
 800a96c:	2000951c 	.word	0x2000951c
 800a970:	20009508 	.word	0x20009508
 800a974:	200094fc 	.word	0x200094fc
 800a978:	20009024 	.word	0x20009024
 800a97c:	20009020 	.word	0x20009020

0800a980 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d10b      	bne.n	800a9a8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a994:	f383 8811 	msr	BASEPRI, r3
 800a998:	f3bf 8f6f 	isb	sy
 800a99c:	f3bf 8f4f 	dsb	sy
 800a9a0:	60fb      	str	r3, [r7, #12]
}
 800a9a2:	bf00      	nop
 800a9a4:	bf00      	nop
 800a9a6:	e7fd      	b.n	800a9a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a9a8:	4b07      	ldr	r3, [pc, #28]	@ (800a9c8 <vTaskPlaceOnEventList+0x48>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	3318      	adds	r3, #24
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f7fe fe70 	bl	8009696 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a9b6:	2101      	movs	r1, #1
 800a9b8:	6838      	ldr	r0, [r7, #0]
 800a9ba:	f000 faa9 	bl	800af10 <prvAddCurrentTaskToDelayedList>
}
 800a9be:	bf00      	nop
 800a9c0:	3710      	adds	r7, #16
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	20009020 	.word	0x20009020

0800a9cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b086      	sub	sp, #24
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d10b      	bne.n	800a9f6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e2:	f383 8811 	msr	BASEPRI, r3
 800a9e6:	f3bf 8f6f 	isb	sy
 800a9ea:	f3bf 8f4f 	dsb	sy
 800a9ee:	617b      	str	r3, [r7, #20]
}
 800a9f0:	bf00      	nop
 800a9f2:	bf00      	nop
 800a9f4:	e7fd      	b.n	800a9f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a9f6:	4b0a      	ldr	r3, [pc, #40]	@ (800aa20 <vTaskPlaceOnEventListRestricted+0x54>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	3318      	adds	r3, #24
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	68f8      	ldr	r0, [r7, #12]
 800aa00:	f7fe fe25 	bl	800964e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d002      	beq.n	800aa10 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800aa0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa0e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aa10:	6879      	ldr	r1, [r7, #4]
 800aa12:	68b8      	ldr	r0, [r7, #8]
 800aa14:	f000 fa7c 	bl	800af10 <prvAddCurrentTaskToDelayedList>
	}
 800aa18:	bf00      	nop
 800aa1a:	3718      	adds	r7, #24
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}
 800aa20:	20009020 	.word	0x20009020

0800aa24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b086      	sub	sp, #24
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10b      	bne.n	800aa52 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800aa3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa3e:	f383 8811 	msr	BASEPRI, r3
 800aa42:	f3bf 8f6f 	isb	sy
 800aa46:	f3bf 8f4f 	dsb	sy
 800aa4a:	60fb      	str	r3, [r7, #12]
}
 800aa4c:	bf00      	nop
 800aa4e:	bf00      	nop
 800aa50:	e7fd      	b.n	800aa4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	3318      	adds	r3, #24
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7fe fe56 	bl	8009708 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa5c:	4b1d      	ldr	r3, [pc, #116]	@ (800aad4 <xTaskRemoveFromEventList+0xb0>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d11d      	bne.n	800aaa0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	3304      	adds	r3, #4
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f7fe fe4d 	bl	8009708 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa72:	4b19      	ldr	r3, [pc, #100]	@ (800aad8 <xTaskRemoveFromEventList+0xb4>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d903      	bls.n	800aa82 <xTaskRemoveFromEventList+0x5e>
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa7e:	4a16      	ldr	r2, [pc, #88]	@ (800aad8 <xTaskRemoveFromEventList+0xb4>)
 800aa80:	6013      	str	r3, [r2, #0]
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa86:	4613      	mov	r3, r2
 800aa88:	009b      	lsls	r3, r3, #2
 800aa8a:	4413      	add	r3, r2
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	4a13      	ldr	r2, [pc, #76]	@ (800aadc <xTaskRemoveFromEventList+0xb8>)
 800aa90:	441a      	add	r2, r3
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	3304      	adds	r3, #4
 800aa96:	4619      	mov	r1, r3
 800aa98:	4610      	mov	r0, r2
 800aa9a:	f7fe fdd8 	bl	800964e <vListInsertEnd>
 800aa9e:	e005      	b.n	800aaac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	3318      	adds	r3, #24
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	480e      	ldr	r0, [pc, #56]	@ (800aae0 <xTaskRemoveFromEventList+0xbc>)
 800aaa8:	f7fe fdd1 	bl	800964e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aab0:	4b0c      	ldr	r3, [pc, #48]	@ (800aae4 <xTaskRemoveFromEventList+0xc0>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d905      	bls.n	800aac6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aaba:	2301      	movs	r3, #1
 800aabc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aabe:	4b0a      	ldr	r3, [pc, #40]	@ (800aae8 <xTaskRemoveFromEventList+0xc4>)
 800aac0:	2201      	movs	r2, #1
 800aac2:	601a      	str	r2, [r3, #0]
 800aac4:	e001      	b.n	800aaca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800aac6:	2300      	movs	r3, #0
 800aac8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aaca:	697b      	ldr	r3, [r7, #20]
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3718      	adds	r7, #24
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	2000951c 	.word	0x2000951c
 800aad8:	200094fc 	.word	0x200094fc
 800aadc:	20009024 	.word	0x20009024
 800aae0:	200094b4 	.word	0x200094b4
 800aae4:	20009020 	.word	0x20009020
 800aae8:	20009508 	.word	0x20009508

0800aaec <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d10b      	bne.n	800ab12 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800aafa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aafe:	f383 8811 	msr	BASEPRI, r3
 800ab02:	f3bf 8f6f 	isb	sy
 800ab06:	f3bf 8f4f 	dsb	sy
 800ab0a:	60fb      	str	r3, [r7, #12]
}
 800ab0c:	bf00      	nop
 800ab0e:	bf00      	nop
 800ab10:	e7fd      	b.n	800ab0e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800ab12:	f000 fed9 	bl	800b8c8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ab16:	4b07      	ldr	r3, [pc, #28]	@ (800ab34 <vTaskSetTimeOutState+0x48>)
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800ab1e:	4b06      	ldr	r3, [pc, #24]	@ (800ab38 <vTaskSetTimeOutState+0x4c>)
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800ab26:	f000 ff01 	bl	800b92c <vPortExitCritical>
}
 800ab2a:	bf00      	nop
 800ab2c:	3710      	adds	r7, #16
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	2000950c 	.word	0x2000950c
 800ab38:	200094f8 	.word	0x200094f8

0800ab3c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ab44:	4b06      	ldr	r3, [pc, #24]	@ (800ab60 <vTaskInternalSetTimeOutState+0x24>)
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ab4c:	4b05      	ldr	r3, [pc, #20]	@ (800ab64 <vTaskInternalSetTimeOutState+0x28>)
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	605a      	str	r2, [r3, #4]
}
 800ab54:	bf00      	nop
 800ab56:	370c      	adds	r7, #12
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr
 800ab60:	2000950c 	.word	0x2000950c
 800ab64:	200094f8 	.word	0x200094f8

0800ab68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b088      	sub	sp, #32
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d10b      	bne.n	800ab90 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ab78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab7c:	f383 8811 	msr	BASEPRI, r3
 800ab80:	f3bf 8f6f 	isb	sy
 800ab84:	f3bf 8f4f 	dsb	sy
 800ab88:	613b      	str	r3, [r7, #16]
}
 800ab8a:	bf00      	nop
 800ab8c:	bf00      	nop
 800ab8e:	e7fd      	b.n	800ab8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d10b      	bne.n	800abae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ab96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab9a:	f383 8811 	msr	BASEPRI, r3
 800ab9e:	f3bf 8f6f 	isb	sy
 800aba2:	f3bf 8f4f 	dsb	sy
 800aba6:	60fb      	str	r3, [r7, #12]
}
 800aba8:	bf00      	nop
 800abaa:	bf00      	nop
 800abac:	e7fd      	b.n	800abaa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800abae:	f000 fe8b 	bl	800b8c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800abb2:	4b1d      	ldr	r3, [pc, #116]	@ (800ac28 <xTaskCheckForTimeOut+0xc0>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	69ba      	ldr	r2, [r7, #24]
 800abbe:	1ad3      	subs	r3, r2, r3
 800abc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800abca:	d102      	bne.n	800abd2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800abcc:	2300      	movs	r3, #0
 800abce:	61fb      	str	r3, [r7, #28]
 800abd0:	e023      	b.n	800ac1a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	4b15      	ldr	r3, [pc, #84]	@ (800ac2c <xTaskCheckForTimeOut+0xc4>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d007      	beq.n	800abee <xTaskCheckForTimeOut+0x86>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	69ba      	ldr	r2, [r7, #24]
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d302      	bcc.n	800abee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800abe8:	2301      	movs	r3, #1
 800abea:	61fb      	str	r3, [r7, #28]
 800abec:	e015      	b.n	800ac1a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	697a      	ldr	r2, [r7, #20]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d20b      	bcs.n	800ac10 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	1ad2      	subs	r2, r2, r3
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f7ff ff99 	bl	800ab3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	61fb      	str	r3, [r7, #28]
 800ac0e:	e004      	b.n	800ac1a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	2200      	movs	r2, #0
 800ac14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ac16:	2301      	movs	r3, #1
 800ac18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ac1a:	f000 fe87 	bl	800b92c <vPortExitCritical>

	return xReturn;
 800ac1e:	69fb      	ldr	r3, [r7, #28]
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3720      	adds	r7, #32
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	200094f8 	.word	0x200094f8
 800ac2c:	2000950c 	.word	0x2000950c

0800ac30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ac30:	b480      	push	{r7}
 800ac32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ac34:	4b03      	ldr	r3, [pc, #12]	@ (800ac44 <vTaskMissedYield+0x14>)
 800ac36:	2201      	movs	r2, #1
 800ac38:	601a      	str	r2, [r3, #0]
}
 800ac3a:	bf00      	nop
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr
 800ac44:	20009508 	.word	0x20009508

0800ac48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ac50:	f000 f852 	bl	800acf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ac54:	4b06      	ldr	r3, [pc, #24]	@ (800ac70 <prvIdleTask+0x28>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d9f9      	bls.n	800ac50 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ac5c:	4b05      	ldr	r3, [pc, #20]	@ (800ac74 <prvIdleTask+0x2c>)
 800ac5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac62:	601a      	str	r2, [r3, #0]
 800ac64:	f3bf 8f4f 	dsb	sy
 800ac68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ac6c:	e7f0      	b.n	800ac50 <prvIdleTask+0x8>
 800ac6e:	bf00      	nop
 800ac70:	20009024 	.word	0x20009024
 800ac74:	e000ed04 	.word	0xe000ed04

0800ac78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b082      	sub	sp, #8
 800ac7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac7e:	2300      	movs	r3, #0
 800ac80:	607b      	str	r3, [r7, #4]
 800ac82:	e00c      	b.n	800ac9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	4613      	mov	r3, r2
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	4413      	add	r3, r2
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	4a12      	ldr	r2, [pc, #72]	@ (800acd8 <prvInitialiseTaskLists+0x60>)
 800ac90:	4413      	add	r3, r2
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7fe fcae 	bl	80095f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	607b      	str	r3, [r7, #4]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2b37      	cmp	r3, #55	@ 0x37
 800aca2:	d9ef      	bls.n	800ac84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aca4:	480d      	ldr	r0, [pc, #52]	@ (800acdc <prvInitialiseTaskLists+0x64>)
 800aca6:	f7fe fca5 	bl	80095f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800acaa:	480d      	ldr	r0, [pc, #52]	@ (800ace0 <prvInitialiseTaskLists+0x68>)
 800acac:	f7fe fca2 	bl	80095f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800acb0:	480c      	ldr	r0, [pc, #48]	@ (800ace4 <prvInitialiseTaskLists+0x6c>)
 800acb2:	f7fe fc9f 	bl	80095f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800acb6:	480c      	ldr	r0, [pc, #48]	@ (800ace8 <prvInitialiseTaskLists+0x70>)
 800acb8:	f7fe fc9c 	bl	80095f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800acbc:	480b      	ldr	r0, [pc, #44]	@ (800acec <prvInitialiseTaskLists+0x74>)
 800acbe:	f7fe fc99 	bl	80095f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800acc2:	4b0b      	ldr	r3, [pc, #44]	@ (800acf0 <prvInitialiseTaskLists+0x78>)
 800acc4:	4a05      	ldr	r2, [pc, #20]	@ (800acdc <prvInitialiseTaskLists+0x64>)
 800acc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800acc8:	4b0a      	ldr	r3, [pc, #40]	@ (800acf4 <prvInitialiseTaskLists+0x7c>)
 800acca:	4a05      	ldr	r2, [pc, #20]	@ (800ace0 <prvInitialiseTaskLists+0x68>)
 800accc:	601a      	str	r2, [r3, #0]
}
 800acce:	bf00      	nop
 800acd0:	3708      	adds	r7, #8
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	20009024 	.word	0x20009024
 800acdc:	20009484 	.word	0x20009484
 800ace0:	20009498 	.word	0x20009498
 800ace4:	200094b4 	.word	0x200094b4
 800ace8:	200094c8 	.word	0x200094c8
 800acec:	200094e0 	.word	0x200094e0
 800acf0:	200094ac 	.word	0x200094ac
 800acf4:	200094b0 	.word	0x200094b0

0800acf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800acfe:	e019      	b.n	800ad34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ad00:	f000 fde2 	bl	800b8c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad04:	4b10      	ldr	r3, [pc, #64]	@ (800ad48 <prvCheckTasksWaitingTermination+0x50>)
 800ad06:	68db      	ldr	r3, [r3, #12]
 800ad08:	68db      	ldr	r3, [r3, #12]
 800ad0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	3304      	adds	r3, #4
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7fe fcf9 	bl	8009708 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ad16:	4b0d      	ldr	r3, [pc, #52]	@ (800ad4c <prvCheckTasksWaitingTermination+0x54>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	4a0b      	ldr	r2, [pc, #44]	@ (800ad4c <prvCheckTasksWaitingTermination+0x54>)
 800ad1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ad20:	4b0b      	ldr	r3, [pc, #44]	@ (800ad50 <prvCheckTasksWaitingTermination+0x58>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	3b01      	subs	r3, #1
 800ad26:	4a0a      	ldr	r2, [pc, #40]	@ (800ad50 <prvCheckTasksWaitingTermination+0x58>)
 800ad28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ad2a:	f000 fdff 	bl	800b92c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f000 f810 	bl	800ad54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad34:	4b06      	ldr	r3, [pc, #24]	@ (800ad50 <prvCheckTasksWaitingTermination+0x58>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d1e1      	bne.n	800ad00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ad3c:	bf00      	nop
 800ad3e:	bf00      	nop
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	200094c8 	.word	0x200094c8
 800ad4c:	200094f4 	.word	0x200094f4
 800ad50:	200094dc 	.word	0x200094dc

0800ad54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d108      	bne.n	800ad78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f000 ff9c 	bl	800bca8 <vPortFree>
				vPortFree( pxTCB );
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f000 ff99 	bl	800bca8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ad76:	e019      	b.n	800adac <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d103      	bne.n	800ad8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 ff90 	bl	800bca8 <vPortFree>
	}
 800ad88:	e010      	b.n	800adac <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ad90:	2b02      	cmp	r3, #2
 800ad92:	d00b      	beq.n	800adac <prvDeleteTCB+0x58>
	__asm volatile
 800ad94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad98:	f383 8811 	msr	BASEPRI, r3
 800ad9c:	f3bf 8f6f 	isb	sy
 800ada0:	f3bf 8f4f 	dsb	sy
 800ada4:	60fb      	str	r3, [r7, #12]
}
 800ada6:	bf00      	nop
 800ada8:	bf00      	nop
 800adaa:	e7fd      	b.n	800ada8 <prvDeleteTCB+0x54>
	}
 800adac:	bf00      	nop
 800adae:	3710      	adds	r7, #16
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800adb4:	b480      	push	{r7}
 800adb6:	b083      	sub	sp, #12
 800adb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800adba:	4b0c      	ldr	r3, [pc, #48]	@ (800adec <prvResetNextTaskUnblockTime+0x38>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d104      	bne.n	800adce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800adc4:	4b0a      	ldr	r3, [pc, #40]	@ (800adf0 <prvResetNextTaskUnblockTime+0x3c>)
 800adc6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800adca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800adcc:	e008      	b.n	800ade0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adce:	4b07      	ldr	r3, [pc, #28]	@ (800adec <prvResetNextTaskUnblockTime+0x38>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	4a04      	ldr	r2, [pc, #16]	@ (800adf0 <prvResetNextTaskUnblockTime+0x3c>)
 800adde:	6013      	str	r3, [r2, #0]
}
 800ade0:	bf00      	nop
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr
 800adec:	200094ac 	.word	0x200094ac
 800adf0:	20009514 	.word	0x20009514

0800adf4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800adfa:	4b0b      	ldr	r3, [pc, #44]	@ (800ae28 <xTaskGetSchedulerState+0x34>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d102      	bne.n	800ae08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ae02:	2301      	movs	r3, #1
 800ae04:	607b      	str	r3, [r7, #4]
 800ae06:	e008      	b.n	800ae1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae08:	4b08      	ldr	r3, [pc, #32]	@ (800ae2c <xTaskGetSchedulerState+0x38>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d102      	bne.n	800ae16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ae10:	2302      	movs	r3, #2
 800ae12:	607b      	str	r3, [r7, #4]
 800ae14:	e001      	b.n	800ae1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ae16:	2300      	movs	r3, #0
 800ae18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ae1a:	687b      	ldr	r3, [r7, #4]
	}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	370c      	adds	r7, #12
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr
 800ae28:	20009500 	.word	0x20009500
 800ae2c:	2000951c 	.word	0x2000951c

0800ae30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b086      	sub	sp, #24
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d058      	beq.n	800aef8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ae46:	4b2f      	ldr	r3, [pc, #188]	@ (800af04 <xTaskPriorityDisinherit+0xd4>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	693a      	ldr	r2, [r7, #16]
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d00b      	beq.n	800ae68 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ae50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae54:	f383 8811 	msr	BASEPRI, r3
 800ae58:	f3bf 8f6f 	isb	sy
 800ae5c:	f3bf 8f4f 	dsb	sy
 800ae60:	60fb      	str	r3, [r7, #12]
}
 800ae62:	bf00      	nop
 800ae64:	bf00      	nop
 800ae66:	e7fd      	b.n	800ae64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d10b      	bne.n	800ae88 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ae70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae74:	f383 8811 	msr	BASEPRI, r3
 800ae78:	f3bf 8f6f 	isb	sy
 800ae7c:	f3bf 8f4f 	dsb	sy
 800ae80:	60bb      	str	r3, [r7, #8]
}
 800ae82:	bf00      	nop
 800ae84:	bf00      	nop
 800ae86:	e7fd      	b.n	800ae84 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae8c:	1e5a      	subs	r2, r3, #1
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d02c      	beq.n	800aef8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d128      	bne.n	800aef8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	3304      	adds	r3, #4
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7fe fc2c 	bl	8009708 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aebc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aec8:	4b0f      	ldr	r3, [pc, #60]	@ (800af08 <xTaskPriorityDisinherit+0xd8>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d903      	bls.n	800aed8 <xTaskPriorityDisinherit+0xa8>
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aed4:	4a0c      	ldr	r2, [pc, #48]	@ (800af08 <xTaskPriorityDisinherit+0xd8>)
 800aed6:	6013      	str	r3, [r2, #0]
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aedc:	4613      	mov	r3, r2
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	4413      	add	r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	4a09      	ldr	r2, [pc, #36]	@ (800af0c <xTaskPriorityDisinherit+0xdc>)
 800aee6:	441a      	add	r2, r3
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	3304      	adds	r3, #4
 800aeec:	4619      	mov	r1, r3
 800aeee:	4610      	mov	r0, r2
 800aef0:	f7fe fbad 	bl	800964e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aef4:	2301      	movs	r3, #1
 800aef6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aef8:	697b      	ldr	r3, [r7, #20]
	}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3718      	adds	r7, #24
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	20009020 	.word	0x20009020
 800af08:	200094fc 	.word	0x200094fc
 800af0c:	20009024 	.word	0x20009024

0800af10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800af1a:	4b21      	ldr	r3, [pc, #132]	@ (800afa0 <prvAddCurrentTaskToDelayedList+0x90>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af20:	4b20      	ldr	r3, [pc, #128]	@ (800afa4 <prvAddCurrentTaskToDelayedList+0x94>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	3304      	adds	r3, #4
 800af26:	4618      	mov	r0, r3
 800af28:	f7fe fbee 	bl	8009708 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af32:	d10a      	bne.n	800af4a <prvAddCurrentTaskToDelayedList+0x3a>
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d007      	beq.n	800af4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af3a:	4b1a      	ldr	r3, [pc, #104]	@ (800afa4 <prvAddCurrentTaskToDelayedList+0x94>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	3304      	adds	r3, #4
 800af40:	4619      	mov	r1, r3
 800af42:	4819      	ldr	r0, [pc, #100]	@ (800afa8 <prvAddCurrentTaskToDelayedList+0x98>)
 800af44:	f7fe fb83 	bl	800964e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800af48:	e026      	b.n	800af98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800af4a:	68fa      	ldr	r2, [r7, #12]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	4413      	add	r3, r2
 800af50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800af52:	4b14      	ldr	r3, [pc, #80]	@ (800afa4 <prvAddCurrentTaskToDelayedList+0x94>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	68ba      	ldr	r2, [r7, #8]
 800af58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800af5a:	68ba      	ldr	r2, [r7, #8]
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d209      	bcs.n	800af76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af62:	4b12      	ldr	r3, [pc, #72]	@ (800afac <prvAddCurrentTaskToDelayedList+0x9c>)
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	4b0f      	ldr	r3, [pc, #60]	@ (800afa4 <prvAddCurrentTaskToDelayedList+0x94>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	3304      	adds	r3, #4
 800af6c:	4619      	mov	r1, r3
 800af6e:	4610      	mov	r0, r2
 800af70:	f7fe fb91 	bl	8009696 <vListInsert>
}
 800af74:	e010      	b.n	800af98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af76:	4b0e      	ldr	r3, [pc, #56]	@ (800afb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	4b0a      	ldr	r3, [pc, #40]	@ (800afa4 <prvAddCurrentTaskToDelayedList+0x94>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	3304      	adds	r3, #4
 800af80:	4619      	mov	r1, r3
 800af82:	4610      	mov	r0, r2
 800af84:	f7fe fb87 	bl	8009696 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800af88:	4b0a      	ldr	r3, [pc, #40]	@ (800afb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	68ba      	ldr	r2, [r7, #8]
 800af8e:	429a      	cmp	r2, r3
 800af90:	d202      	bcs.n	800af98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800af92:	4a08      	ldr	r2, [pc, #32]	@ (800afb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	6013      	str	r3, [r2, #0]
}
 800af98:	bf00      	nop
 800af9a:	3710      	adds	r7, #16
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	200094f8 	.word	0x200094f8
 800afa4:	20009020 	.word	0x20009020
 800afa8:	200094e0 	.word	0x200094e0
 800afac:	200094b0 	.word	0x200094b0
 800afb0:	200094ac 	.word	0x200094ac
 800afb4:	20009514 	.word	0x20009514

0800afb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b08a      	sub	sp, #40	@ 0x28
 800afbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800afbe:	2300      	movs	r3, #0
 800afc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800afc2:	f000 fb13 	bl	800b5ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800afc6:	4b1d      	ldr	r3, [pc, #116]	@ (800b03c <xTimerCreateTimerTask+0x84>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d021      	beq.n	800b012 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800afce:	2300      	movs	r3, #0
 800afd0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800afd2:	2300      	movs	r3, #0
 800afd4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800afd6:	1d3a      	adds	r2, r7, #4
 800afd8:	f107 0108 	add.w	r1, r7, #8
 800afdc:	f107 030c 	add.w	r3, r7, #12
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7fe faed 	bl	80095c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800afe6:	6879      	ldr	r1, [r7, #4]
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	9202      	str	r2, [sp, #8]
 800afee:	9301      	str	r3, [sp, #4]
 800aff0:	2302      	movs	r3, #2
 800aff2:	9300      	str	r3, [sp, #0]
 800aff4:	2300      	movs	r3, #0
 800aff6:	460a      	mov	r2, r1
 800aff8:	4911      	ldr	r1, [pc, #68]	@ (800b040 <xTimerCreateTimerTask+0x88>)
 800affa:	4812      	ldr	r0, [pc, #72]	@ (800b044 <xTimerCreateTimerTask+0x8c>)
 800affc:	f7ff f8a8 	bl	800a150 <xTaskCreateStatic>
 800b000:	4603      	mov	r3, r0
 800b002:	4a11      	ldr	r2, [pc, #68]	@ (800b048 <xTimerCreateTimerTask+0x90>)
 800b004:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b006:	4b10      	ldr	r3, [pc, #64]	@ (800b048 <xTimerCreateTimerTask+0x90>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d001      	beq.n	800b012 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b00e:	2301      	movs	r3, #1
 800b010:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d10b      	bne.n	800b030 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b01c:	f383 8811 	msr	BASEPRI, r3
 800b020:	f3bf 8f6f 	isb	sy
 800b024:	f3bf 8f4f 	dsb	sy
 800b028:	613b      	str	r3, [r7, #16]
}
 800b02a:	bf00      	nop
 800b02c:	bf00      	nop
 800b02e:	e7fd      	b.n	800b02c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b030:	697b      	ldr	r3, [r7, #20]
}
 800b032:	4618      	mov	r0, r3
 800b034:	3718      	adds	r7, #24
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	20009550 	.word	0x20009550
 800b040:	0801fce0 	.word	0x0801fce0
 800b044:	0800b185 	.word	0x0800b185
 800b048:	20009554 	.word	0x20009554

0800b04c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b08a      	sub	sp, #40	@ 0x28
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	607a      	str	r2, [r7, #4]
 800b058:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b05a:	2300      	movs	r3, #0
 800b05c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d10b      	bne.n	800b07c <xTimerGenericCommand+0x30>
	__asm volatile
 800b064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b068:	f383 8811 	msr	BASEPRI, r3
 800b06c:	f3bf 8f6f 	isb	sy
 800b070:	f3bf 8f4f 	dsb	sy
 800b074:	623b      	str	r3, [r7, #32]
}
 800b076:	bf00      	nop
 800b078:	bf00      	nop
 800b07a:	e7fd      	b.n	800b078 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b07c:	4b19      	ldr	r3, [pc, #100]	@ (800b0e4 <xTimerGenericCommand+0x98>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d02a      	beq.n	800b0da <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	2b05      	cmp	r3, #5
 800b094:	dc18      	bgt.n	800b0c8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b096:	f7ff fead 	bl	800adf4 <xTaskGetSchedulerState>
 800b09a:	4603      	mov	r3, r0
 800b09c:	2b02      	cmp	r3, #2
 800b09e:	d109      	bne.n	800b0b4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b0a0:	4b10      	ldr	r3, [pc, #64]	@ (800b0e4 <xTimerGenericCommand+0x98>)
 800b0a2:	6818      	ldr	r0, [r3, #0]
 800b0a4:	f107 0110 	add.w	r1, r7, #16
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0ac:	f7fe fc60 	bl	8009970 <xQueueGenericSend>
 800b0b0:	6278      	str	r0, [r7, #36]	@ 0x24
 800b0b2:	e012      	b.n	800b0da <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b0b4:	4b0b      	ldr	r3, [pc, #44]	@ (800b0e4 <xTimerGenericCommand+0x98>)
 800b0b6:	6818      	ldr	r0, [r3, #0]
 800b0b8:	f107 0110 	add.w	r1, r7, #16
 800b0bc:	2300      	movs	r3, #0
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f7fe fc56 	bl	8009970 <xQueueGenericSend>
 800b0c4:	6278      	str	r0, [r7, #36]	@ 0x24
 800b0c6:	e008      	b.n	800b0da <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b0c8:	4b06      	ldr	r3, [pc, #24]	@ (800b0e4 <xTimerGenericCommand+0x98>)
 800b0ca:	6818      	ldr	r0, [r3, #0]
 800b0cc:	f107 0110 	add.w	r1, r7, #16
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	683a      	ldr	r2, [r7, #0]
 800b0d4:	f7fe fd4e 	bl	8009b74 <xQueueGenericSendFromISR>
 800b0d8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3728      	adds	r7, #40	@ 0x28
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	20009550 	.word	0x20009550

0800b0e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b088      	sub	sp, #32
 800b0ec:	af02      	add	r7, sp, #8
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0f2:	4b23      	ldr	r3, [pc, #140]	@ (800b180 <prvProcessExpiredTimer+0x98>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	68db      	ldr	r3, [r3, #12]
 800b0fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	3304      	adds	r3, #4
 800b100:	4618      	mov	r0, r3
 800b102:	f7fe fb01 	bl	8009708 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b10c:	f003 0304 	and.w	r3, r3, #4
 800b110:	2b00      	cmp	r3, #0
 800b112:	d023      	beq.n	800b15c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	699a      	ldr	r2, [r3, #24]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	18d1      	adds	r1, r2, r3
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	683a      	ldr	r2, [r7, #0]
 800b120:	6978      	ldr	r0, [r7, #20]
 800b122:	f000 f8d5 	bl	800b2d0 <prvInsertTimerInActiveList>
 800b126:	4603      	mov	r3, r0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d020      	beq.n	800b16e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b12c:	2300      	movs	r3, #0
 800b12e:	9300      	str	r3, [sp, #0]
 800b130:	2300      	movs	r3, #0
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	2100      	movs	r1, #0
 800b136:	6978      	ldr	r0, [r7, #20]
 800b138:	f7ff ff88 	bl	800b04c <xTimerGenericCommand>
 800b13c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d114      	bne.n	800b16e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b148:	f383 8811 	msr	BASEPRI, r3
 800b14c:	f3bf 8f6f 	isb	sy
 800b150:	f3bf 8f4f 	dsb	sy
 800b154:	60fb      	str	r3, [r7, #12]
}
 800b156:	bf00      	nop
 800b158:	bf00      	nop
 800b15a:	e7fd      	b.n	800b158 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b162:	f023 0301 	bic.w	r3, r3, #1
 800b166:	b2da      	uxtb	r2, r3
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	6a1b      	ldr	r3, [r3, #32]
 800b172:	6978      	ldr	r0, [r7, #20]
 800b174:	4798      	blx	r3
}
 800b176:	bf00      	nop
 800b178:	3718      	adds	r7, #24
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	20009548 	.word	0x20009548

0800b184 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b18c:	f107 0308 	add.w	r3, r7, #8
 800b190:	4618      	mov	r0, r3
 800b192:	f000 f859 	bl	800b248 <prvGetNextExpireTime>
 800b196:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	4619      	mov	r1, r3
 800b19c:	68f8      	ldr	r0, [r7, #12]
 800b19e:	f000 f805 	bl	800b1ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b1a2:	f000 f8d7 	bl	800b354 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b1a6:	bf00      	nop
 800b1a8:	e7f0      	b.n	800b18c <prvTimerTask+0x8>
	...

0800b1ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b084      	sub	sp, #16
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b1b6:	f7ff fa0f 	bl	800a5d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b1ba:	f107 0308 	add.w	r3, r7, #8
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f000 f866 	bl	800b290 <prvSampleTimeNow>
 800b1c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d130      	bne.n	800b22e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d10a      	bne.n	800b1e8 <prvProcessTimerOrBlockTask+0x3c>
 800b1d2:	687a      	ldr	r2, [r7, #4]
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d806      	bhi.n	800b1e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b1da:	f7ff fa0b 	bl	800a5f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b1de:	68f9      	ldr	r1, [r7, #12]
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f7ff ff81 	bl	800b0e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b1e6:	e024      	b.n	800b232 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d008      	beq.n	800b200 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b1ee:	4b13      	ldr	r3, [pc, #76]	@ (800b23c <prvProcessTimerOrBlockTask+0x90>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d101      	bne.n	800b1fc <prvProcessTimerOrBlockTask+0x50>
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	e000      	b.n	800b1fe <prvProcessTimerOrBlockTask+0x52>
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b200:	4b0f      	ldr	r3, [pc, #60]	@ (800b240 <prvProcessTimerOrBlockTask+0x94>)
 800b202:	6818      	ldr	r0, [r3, #0]
 800b204:	687a      	ldr	r2, [r7, #4]
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	1ad3      	subs	r3, r2, r3
 800b20a:	683a      	ldr	r2, [r7, #0]
 800b20c:	4619      	mov	r1, r3
 800b20e:	f7fe ff6b 	bl	800a0e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b212:	f7ff f9ef 	bl	800a5f4 <xTaskResumeAll>
 800b216:	4603      	mov	r3, r0
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d10a      	bne.n	800b232 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b21c:	4b09      	ldr	r3, [pc, #36]	@ (800b244 <prvProcessTimerOrBlockTask+0x98>)
 800b21e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b222:	601a      	str	r2, [r3, #0]
 800b224:	f3bf 8f4f 	dsb	sy
 800b228:	f3bf 8f6f 	isb	sy
}
 800b22c:	e001      	b.n	800b232 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b22e:	f7ff f9e1 	bl	800a5f4 <xTaskResumeAll>
}
 800b232:	bf00      	nop
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	2000954c 	.word	0x2000954c
 800b240:	20009550 	.word	0x20009550
 800b244:	e000ed04 	.word	0xe000ed04

0800b248 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b250:	4b0e      	ldr	r3, [pc, #56]	@ (800b28c <prvGetNextExpireTime+0x44>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d101      	bne.n	800b25e <prvGetNextExpireTime+0x16>
 800b25a:	2201      	movs	r2, #1
 800b25c:	e000      	b.n	800b260 <prvGetNextExpireTime+0x18>
 800b25e:	2200      	movs	r2, #0
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d105      	bne.n	800b278 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b26c:	4b07      	ldr	r3, [pc, #28]	@ (800b28c <prvGetNextExpireTime+0x44>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	60fb      	str	r3, [r7, #12]
 800b276:	e001      	b.n	800b27c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b278:	2300      	movs	r3, #0
 800b27a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b27c:	68fb      	ldr	r3, [r7, #12]
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3714      	adds	r7, #20
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr
 800b28a:	bf00      	nop
 800b28c:	20009548 	.word	0x20009548

0800b290 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b298:	f7ff fa4a 	bl	800a730 <xTaskGetTickCount>
 800b29c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b29e:	4b0b      	ldr	r3, [pc, #44]	@ (800b2cc <prvSampleTimeNow+0x3c>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d205      	bcs.n	800b2b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b2a8:	f000 f93a 	bl	800b520 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	601a      	str	r2, [r3, #0]
 800b2b2:	e002      	b.n	800b2ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b2ba:	4a04      	ldr	r2, [pc, #16]	@ (800b2cc <prvSampleTimeNow+0x3c>)
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3710      	adds	r7, #16
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	20009558 	.word	0x20009558

0800b2d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b086      	sub	sp, #24
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	60f8      	str	r0, [r7, #12]
 800b2d8:	60b9      	str	r1, [r7, #8]
 800b2da:	607a      	str	r2, [r7, #4]
 800b2dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	68ba      	ldr	r2, [r7, #8]
 800b2e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	68fa      	ldr	r2, [r7, #12]
 800b2ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b2ee:	68ba      	ldr	r2, [r7, #8]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d812      	bhi.n	800b31c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2f6:	687a      	ldr	r2, [r7, #4]
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	1ad2      	subs	r2, r2, r3
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	699b      	ldr	r3, [r3, #24]
 800b300:	429a      	cmp	r2, r3
 800b302:	d302      	bcc.n	800b30a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b304:	2301      	movs	r3, #1
 800b306:	617b      	str	r3, [r7, #20]
 800b308:	e01b      	b.n	800b342 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b30a:	4b10      	ldr	r3, [pc, #64]	@ (800b34c <prvInsertTimerInActiveList+0x7c>)
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	3304      	adds	r3, #4
 800b312:	4619      	mov	r1, r3
 800b314:	4610      	mov	r0, r2
 800b316:	f7fe f9be 	bl	8009696 <vListInsert>
 800b31a:	e012      	b.n	800b342 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b31c:	687a      	ldr	r2, [r7, #4]
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	429a      	cmp	r2, r3
 800b322:	d206      	bcs.n	800b332 <prvInsertTimerInActiveList+0x62>
 800b324:	68ba      	ldr	r2, [r7, #8]
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	429a      	cmp	r2, r3
 800b32a:	d302      	bcc.n	800b332 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b32c:	2301      	movs	r3, #1
 800b32e:	617b      	str	r3, [r7, #20]
 800b330:	e007      	b.n	800b342 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b332:	4b07      	ldr	r3, [pc, #28]	@ (800b350 <prvInsertTimerInActiveList+0x80>)
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	3304      	adds	r3, #4
 800b33a:	4619      	mov	r1, r3
 800b33c:	4610      	mov	r0, r2
 800b33e:	f7fe f9aa 	bl	8009696 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b342:	697b      	ldr	r3, [r7, #20]
}
 800b344:	4618      	mov	r0, r3
 800b346:	3718      	adds	r7, #24
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	2000954c 	.word	0x2000954c
 800b350:	20009548 	.word	0x20009548

0800b354 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b08e      	sub	sp, #56	@ 0x38
 800b358:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b35a:	e0ce      	b.n	800b4fa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	da19      	bge.n	800b396 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b362:	1d3b      	adds	r3, r7, #4
 800b364:	3304      	adds	r3, #4
 800b366:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d10b      	bne.n	800b386 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b372:	f383 8811 	msr	BASEPRI, r3
 800b376:	f3bf 8f6f 	isb	sy
 800b37a:	f3bf 8f4f 	dsb	sy
 800b37e:	61fb      	str	r3, [r7, #28]
}
 800b380:	bf00      	nop
 800b382:	bf00      	nop
 800b384:	e7fd      	b.n	800b382 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b38c:	6850      	ldr	r0, [r2, #4]
 800b38e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b390:	6892      	ldr	r2, [r2, #8]
 800b392:	4611      	mov	r1, r2
 800b394:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	f2c0 80ae 	blt.w	800b4fa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3a4:	695b      	ldr	r3, [r3, #20]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d004      	beq.n	800b3b4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b3aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ac:	3304      	adds	r3, #4
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7fe f9aa 	bl	8009708 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b3b4:	463b      	mov	r3, r7
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f7ff ff6a 	bl	800b290 <prvSampleTimeNow>
 800b3bc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2b09      	cmp	r3, #9
 800b3c2:	f200 8097 	bhi.w	800b4f4 <prvProcessReceivedCommands+0x1a0>
 800b3c6:	a201      	add	r2, pc, #4	@ (adr r2, 800b3cc <prvProcessReceivedCommands+0x78>)
 800b3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3cc:	0800b3f5 	.word	0x0800b3f5
 800b3d0:	0800b3f5 	.word	0x0800b3f5
 800b3d4:	0800b3f5 	.word	0x0800b3f5
 800b3d8:	0800b46b 	.word	0x0800b46b
 800b3dc:	0800b47f 	.word	0x0800b47f
 800b3e0:	0800b4cb 	.word	0x0800b4cb
 800b3e4:	0800b3f5 	.word	0x0800b3f5
 800b3e8:	0800b3f5 	.word	0x0800b3f5
 800b3ec:	0800b46b 	.word	0x0800b46b
 800b3f0:	0800b47f 	.word	0x0800b47f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3fa:	f043 0301 	orr.w	r3, r3, #1
 800b3fe:	b2da      	uxtb	r2, r3
 800b400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b402:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b406:	68ba      	ldr	r2, [r7, #8]
 800b408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b40a:	699b      	ldr	r3, [r3, #24]
 800b40c:	18d1      	adds	r1, r2, r3
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b412:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b414:	f7ff ff5c 	bl	800b2d0 <prvInsertTimerInActiveList>
 800b418:	4603      	mov	r3, r0
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d06c      	beq.n	800b4f8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b41e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b420:	6a1b      	ldr	r3, [r3, #32]
 800b422:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b424:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b428:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b42c:	f003 0304 	and.w	r3, r3, #4
 800b430:	2b00      	cmp	r3, #0
 800b432:	d061      	beq.n	800b4f8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b434:	68ba      	ldr	r2, [r7, #8]
 800b436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b438:	699b      	ldr	r3, [r3, #24]
 800b43a:	441a      	add	r2, r3
 800b43c:	2300      	movs	r3, #0
 800b43e:	9300      	str	r3, [sp, #0]
 800b440:	2300      	movs	r3, #0
 800b442:	2100      	movs	r1, #0
 800b444:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b446:	f7ff fe01 	bl	800b04c <xTimerGenericCommand>
 800b44a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b44c:	6a3b      	ldr	r3, [r7, #32]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d152      	bne.n	800b4f8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b456:	f383 8811 	msr	BASEPRI, r3
 800b45a:	f3bf 8f6f 	isb	sy
 800b45e:	f3bf 8f4f 	dsb	sy
 800b462:	61bb      	str	r3, [r7, #24]
}
 800b464:	bf00      	nop
 800b466:	bf00      	nop
 800b468:	e7fd      	b.n	800b466 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b46a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b46c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b470:	f023 0301 	bic.w	r3, r3, #1
 800b474:	b2da      	uxtb	r2, r3
 800b476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b478:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b47c:	e03d      	b.n	800b4fa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b47e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b480:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b484:	f043 0301 	orr.w	r3, r3, #1
 800b488:	b2da      	uxtb	r2, r3
 800b48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b48c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b490:	68ba      	ldr	r2, [r7, #8]
 800b492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b494:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b498:	699b      	ldr	r3, [r3, #24]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d10b      	bne.n	800b4b6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4a2:	f383 8811 	msr	BASEPRI, r3
 800b4a6:	f3bf 8f6f 	isb	sy
 800b4aa:	f3bf 8f4f 	dsb	sy
 800b4ae:	617b      	str	r3, [r7, #20]
}
 800b4b0:	bf00      	nop
 800b4b2:	bf00      	nop
 800b4b4:	e7fd      	b.n	800b4b2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b4b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4b8:	699a      	ldr	r2, [r3, #24]
 800b4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4bc:	18d1      	adds	r1, r2, r3
 800b4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4c4:	f7ff ff04 	bl	800b2d0 <prvInsertTimerInActiveList>
					break;
 800b4c8:	e017      	b.n	800b4fa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b4d0:	f003 0302 	and.w	r3, r3, #2
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d103      	bne.n	800b4e0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b4d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4da:	f000 fbe5 	bl	800bca8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b4de:	e00c      	b.n	800b4fa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b4e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b4e6:	f023 0301 	bic.w	r3, r3, #1
 800b4ea:	b2da      	uxtb	r2, r3
 800b4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b4f2:	e002      	b.n	800b4fa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b4f4:	bf00      	nop
 800b4f6:	e000      	b.n	800b4fa <prvProcessReceivedCommands+0x1a6>
					break;
 800b4f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b4fa:	4b08      	ldr	r3, [pc, #32]	@ (800b51c <prvProcessReceivedCommands+0x1c8>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	1d39      	adds	r1, r7, #4
 800b500:	2200      	movs	r2, #0
 800b502:	4618      	mov	r0, r3
 800b504:	f7fe fbd4 	bl	8009cb0 <xQueueReceive>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	f47f af26 	bne.w	800b35c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b510:	bf00      	nop
 800b512:	bf00      	nop
 800b514:	3730      	adds	r7, #48	@ 0x30
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	20009550 	.word	0x20009550

0800b520 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b088      	sub	sp, #32
 800b524:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b526:	e049      	b.n	800b5bc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b528:	4b2e      	ldr	r3, [pc, #184]	@ (800b5e4 <prvSwitchTimerLists+0xc4>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	68db      	ldr	r3, [r3, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b532:	4b2c      	ldr	r3, [pc, #176]	@ (800b5e4 <prvSwitchTimerLists+0xc4>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	3304      	adds	r3, #4
 800b540:	4618      	mov	r0, r3
 800b542:	f7fe f8e1 	bl	8009708 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	6a1b      	ldr	r3, [r3, #32]
 800b54a:	68f8      	ldr	r0, [r7, #12]
 800b54c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b554:	f003 0304 	and.w	r3, r3, #4
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d02f      	beq.n	800b5bc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	699b      	ldr	r3, [r3, #24]
 800b560:	693a      	ldr	r2, [r7, #16]
 800b562:	4413      	add	r3, r2
 800b564:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b566:	68ba      	ldr	r2, [r7, #8]
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d90e      	bls.n	800b58c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	68ba      	ldr	r2, [r7, #8]
 800b572:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	68fa      	ldr	r2, [r7, #12]
 800b578:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b57a:	4b1a      	ldr	r3, [pc, #104]	@ (800b5e4 <prvSwitchTimerLists+0xc4>)
 800b57c:	681a      	ldr	r2, [r3, #0]
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	3304      	adds	r3, #4
 800b582:	4619      	mov	r1, r3
 800b584:	4610      	mov	r0, r2
 800b586:	f7fe f886 	bl	8009696 <vListInsert>
 800b58a:	e017      	b.n	800b5bc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b58c:	2300      	movs	r3, #0
 800b58e:	9300      	str	r3, [sp, #0]
 800b590:	2300      	movs	r3, #0
 800b592:	693a      	ldr	r2, [r7, #16]
 800b594:	2100      	movs	r1, #0
 800b596:	68f8      	ldr	r0, [r7, #12]
 800b598:	f7ff fd58 	bl	800b04c <xTimerGenericCommand>
 800b59c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d10b      	bne.n	800b5bc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b5a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5a8:	f383 8811 	msr	BASEPRI, r3
 800b5ac:	f3bf 8f6f 	isb	sy
 800b5b0:	f3bf 8f4f 	dsb	sy
 800b5b4:	603b      	str	r3, [r7, #0]
}
 800b5b6:	bf00      	nop
 800b5b8:	bf00      	nop
 800b5ba:	e7fd      	b.n	800b5b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b5bc:	4b09      	ldr	r3, [pc, #36]	@ (800b5e4 <prvSwitchTimerLists+0xc4>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d1b0      	bne.n	800b528 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b5c6:	4b07      	ldr	r3, [pc, #28]	@ (800b5e4 <prvSwitchTimerLists+0xc4>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b5cc:	4b06      	ldr	r3, [pc, #24]	@ (800b5e8 <prvSwitchTimerLists+0xc8>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a04      	ldr	r2, [pc, #16]	@ (800b5e4 <prvSwitchTimerLists+0xc4>)
 800b5d2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b5d4:	4a04      	ldr	r2, [pc, #16]	@ (800b5e8 <prvSwitchTimerLists+0xc8>)
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	6013      	str	r3, [r2, #0]
}
 800b5da:	bf00      	nop
 800b5dc:	3718      	adds	r7, #24
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	20009548 	.word	0x20009548
 800b5e8:	2000954c 	.word	0x2000954c

0800b5ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b5f2:	f000 f969 	bl	800b8c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b5f6:	4b15      	ldr	r3, [pc, #84]	@ (800b64c <prvCheckForValidListAndQueue+0x60>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d120      	bne.n	800b640 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b5fe:	4814      	ldr	r0, [pc, #80]	@ (800b650 <prvCheckForValidListAndQueue+0x64>)
 800b600:	f7fd fff8 	bl	80095f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b604:	4813      	ldr	r0, [pc, #76]	@ (800b654 <prvCheckForValidListAndQueue+0x68>)
 800b606:	f7fd fff5 	bl	80095f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b60a:	4b13      	ldr	r3, [pc, #76]	@ (800b658 <prvCheckForValidListAndQueue+0x6c>)
 800b60c:	4a10      	ldr	r2, [pc, #64]	@ (800b650 <prvCheckForValidListAndQueue+0x64>)
 800b60e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b610:	4b12      	ldr	r3, [pc, #72]	@ (800b65c <prvCheckForValidListAndQueue+0x70>)
 800b612:	4a10      	ldr	r2, [pc, #64]	@ (800b654 <prvCheckForValidListAndQueue+0x68>)
 800b614:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b616:	2300      	movs	r3, #0
 800b618:	9300      	str	r3, [sp, #0]
 800b61a:	4b11      	ldr	r3, [pc, #68]	@ (800b660 <prvCheckForValidListAndQueue+0x74>)
 800b61c:	4a11      	ldr	r2, [pc, #68]	@ (800b664 <prvCheckForValidListAndQueue+0x78>)
 800b61e:	2110      	movs	r1, #16
 800b620:	200a      	movs	r0, #10
 800b622:	f7fe f905 	bl	8009830 <xQueueGenericCreateStatic>
 800b626:	4603      	mov	r3, r0
 800b628:	4a08      	ldr	r2, [pc, #32]	@ (800b64c <prvCheckForValidListAndQueue+0x60>)
 800b62a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b62c:	4b07      	ldr	r3, [pc, #28]	@ (800b64c <prvCheckForValidListAndQueue+0x60>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d005      	beq.n	800b640 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b634:	4b05      	ldr	r3, [pc, #20]	@ (800b64c <prvCheckForValidListAndQueue+0x60>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	490b      	ldr	r1, [pc, #44]	@ (800b668 <prvCheckForValidListAndQueue+0x7c>)
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7fe fd2a 	bl	800a094 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b640:	f000 f974 	bl	800b92c <vPortExitCritical>
}
 800b644:	bf00      	nop
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
 800b64a:	bf00      	nop
 800b64c:	20009550 	.word	0x20009550
 800b650:	20009520 	.word	0x20009520
 800b654:	20009534 	.word	0x20009534
 800b658:	20009548 	.word	0x20009548
 800b65c:	2000954c 	.word	0x2000954c
 800b660:	200095fc 	.word	0x200095fc
 800b664:	2000955c 	.word	0x2000955c
 800b668:	0801fce8 	.word	0x0801fce8

0800b66c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b66c:	b480      	push	{r7}
 800b66e:	b085      	sub	sp, #20
 800b670:	af00      	add	r7, sp, #0
 800b672:	60f8      	str	r0, [r7, #12]
 800b674:	60b9      	str	r1, [r7, #8]
 800b676:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	3b04      	subs	r3, #4
 800b67c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b684:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	3b04      	subs	r3, #4
 800b68a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	f023 0201 	bic.w	r2, r3, #1
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	3b04      	subs	r3, #4
 800b69a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b69c:	4a0c      	ldr	r2, [pc, #48]	@ (800b6d0 <pxPortInitialiseStack+0x64>)
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	3b14      	subs	r3, #20
 800b6a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b6a8:	687a      	ldr	r2, [r7, #4]
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	3b04      	subs	r3, #4
 800b6b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f06f 0202 	mvn.w	r2, #2
 800b6ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	3b20      	subs	r3, #32
 800b6c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3714      	adds	r7, #20
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr
 800b6d0:	0800b6d5 	.word	0x0800b6d5

0800b6d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b085      	sub	sp, #20
 800b6d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b6de:	4b13      	ldr	r3, [pc, #76]	@ (800b72c <prvTaskExitError+0x58>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b6e6:	d00b      	beq.n	800b700 <prvTaskExitError+0x2c>
	__asm volatile
 800b6e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ec:	f383 8811 	msr	BASEPRI, r3
 800b6f0:	f3bf 8f6f 	isb	sy
 800b6f4:	f3bf 8f4f 	dsb	sy
 800b6f8:	60fb      	str	r3, [r7, #12]
}
 800b6fa:	bf00      	nop
 800b6fc:	bf00      	nop
 800b6fe:	e7fd      	b.n	800b6fc <prvTaskExitError+0x28>
	__asm volatile
 800b700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b704:	f383 8811 	msr	BASEPRI, r3
 800b708:	f3bf 8f6f 	isb	sy
 800b70c:	f3bf 8f4f 	dsb	sy
 800b710:	60bb      	str	r3, [r7, #8]
}
 800b712:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b714:	bf00      	nop
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d0fc      	beq.n	800b716 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b71c:	bf00      	nop
 800b71e:	bf00      	nop
 800b720:	3714      	adds	r7, #20
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop
 800b72c:	200000a0 	.word	0x200000a0

0800b730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b730:	4b07      	ldr	r3, [pc, #28]	@ (800b750 <pxCurrentTCBConst2>)
 800b732:	6819      	ldr	r1, [r3, #0]
 800b734:	6808      	ldr	r0, [r1, #0]
 800b736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b73a:	f380 8809 	msr	PSP, r0
 800b73e:	f3bf 8f6f 	isb	sy
 800b742:	f04f 0000 	mov.w	r0, #0
 800b746:	f380 8811 	msr	BASEPRI, r0
 800b74a:	4770      	bx	lr
 800b74c:	f3af 8000 	nop.w

0800b750 <pxCurrentTCBConst2>:
 800b750:	20009020 	.word	0x20009020
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b754:	bf00      	nop
 800b756:	bf00      	nop

0800b758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b758:	4808      	ldr	r0, [pc, #32]	@ (800b77c <prvPortStartFirstTask+0x24>)
 800b75a:	6800      	ldr	r0, [r0, #0]
 800b75c:	6800      	ldr	r0, [r0, #0]
 800b75e:	f380 8808 	msr	MSP, r0
 800b762:	f04f 0000 	mov.w	r0, #0
 800b766:	f380 8814 	msr	CONTROL, r0
 800b76a:	b662      	cpsie	i
 800b76c:	b661      	cpsie	f
 800b76e:	f3bf 8f4f 	dsb	sy
 800b772:	f3bf 8f6f 	isb	sy
 800b776:	df00      	svc	0
 800b778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b77a:	bf00      	nop
 800b77c:	e000ed08 	.word	0xe000ed08

0800b780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b086      	sub	sp, #24
 800b784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b786:	4b47      	ldr	r3, [pc, #284]	@ (800b8a4 <xPortStartScheduler+0x124>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4a47      	ldr	r2, [pc, #284]	@ (800b8a8 <xPortStartScheduler+0x128>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d10b      	bne.n	800b7a8 <xPortStartScheduler+0x28>
	__asm volatile
 800b790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b794:	f383 8811 	msr	BASEPRI, r3
 800b798:	f3bf 8f6f 	isb	sy
 800b79c:	f3bf 8f4f 	dsb	sy
 800b7a0:	613b      	str	r3, [r7, #16]
}
 800b7a2:	bf00      	nop
 800b7a4:	bf00      	nop
 800b7a6:	e7fd      	b.n	800b7a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b7a8:	4b3e      	ldr	r3, [pc, #248]	@ (800b8a4 <xPortStartScheduler+0x124>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4a3f      	ldr	r2, [pc, #252]	@ (800b8ac <xPortStartScheduler+0x12c>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d10b      	bne.n	800b7ca <xPortStartScheduler+0x4a>
	__asm volatile
 800b7b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7b6:	f383 8811 	msr	BASEPRI, r3
 800b7ba:	f3bf 8f6f 	isb	sy
 800b7be:	f3bf 8f4f 	dsb	sy
 800b7c2:	60fb      	str	r3, [r7, #12]
}
 800b7c4:	bf00      	nop
 800b7c6:	bf00      	nop
 800b7c8:	e7fd      	b.n	800b7c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b7ca:	4b39      	ldr	r3, [pc, #228]	@ (800b8b0 <xPortStartScheduler+0x130>)
 800b7cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	22ff      	movs	r2, #255	@ 0xff
 800b7da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b7e4:	78fb      	ldrb	r3, [r7, #3]
 800b7e6:	b2db      	uxtb	r3, r3
 800b7e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b7ec:	b2da      	uxtb	r2, r3
 800b7ee:	4b31      	ldr	r3, [pc, #196]	@ (800b8b4 <xPortStartScheduler+0x134>)
 800b7f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b7f2:	4b31      	ldr	r3, [pc, #196]	@ (800b8b8 <xPortStartScheduler+0x138>)
 800b7f4:	2207      	movs	r2, #7
 800b7f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b7f8:	e009      	b.n	800b80e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b7fa:	4b2f      	ldr	r3, [pc, #188]	@ (800b8b8 <xPortStartScheduler+0x138>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	3b01      	subs	r3, #1
 800b800:	4a2d      	ldr	r2, [pc, #180]	@ (800b8b8 <xPortStartScheduler+0x138>)
 800b802:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b804:	78fb      	ldrb	r3, [r7, #3]
 800b806:	b2db      	uxtb	r3, r3
 800b808:	005b      	lsls	r3, r3, #1
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b80e:	78fb      	ldrb	r3, [r7, #3]
 800b810:	b2db      	uxtb	r3, r3
 800b812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b816:	2b80      	cmp	r3, #128	@ 0x80
 800b818:	d0ef      	beq.n	800b7fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b81a:	4b27      	ldr	r3, [pc, #156]	@ (800b8b8 <xPortStartScheduler+0x138>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f1c3 0307 	rsb	r3, r3, #7
 800b822:	2b04      	cmp	r3, #4
 800b824:	d00b      	beq.n	800b83e <xPortStartScheduler+0xbe>
	__asm volatile
 800b826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b82a:	f383 8811 	msr	BASEPRI, r3
 800b82e:	f3bf 8f6f 	isb	sy
 800b832:	f3bf 8f4f 	dsb	sy
 800b836:	60bb      	str	r3, [r7, #8]
}
 800b838:	bf00      	nop
 800b83a:	bf00      	nop
 800b83c:	e7fd      	b.n	800b83a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b83e:	4b1e      	ldr	r3, [pc, #120]	@ (800b8b8 <xPortStartScheduler+0x138>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	021b      	lsls	r3, r3, #8
 800b844:	4a1c      	ldr	r2, [pc, #112]	@ (800b8b8 <xPortStartScheduler+0x138>)
 800b846:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b848:	4b1b      	ldr	r3, [pc, #108]	@ (800b8b8 <xPortStartScheduler+0x138>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b850:	4a19      	ldr	r2, [pc, #100]	@ (800b8b8 <xPortStartScheduler+0x138>)
 800b852:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	b2da      	uxtb	r2, r3
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b85c:	4b17      	ldr	r3, [pc, #92]	@ (800b8bc <xPortStartScheduler+0x13c>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a16      	ldr	r2, [pc, #88]	@ (800b8bc <xPortStartScheduler+0x13c>)
 800b862:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b866:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b868:	4b14      	ldr	r3, [pc, #80]	@ (800b8bc <xPortStartScheduler+0x13c>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4a13      	ldr	r2, [pc, #76]	@ (800b8bc <xPortStartScheduler+0x13c>)
 800b86e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b872:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b874:	f000 f8da 	bl	800ba2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b878:	4b11      	ldr	r3, [pc, #68]	@ (800b8c0 <xPortStartScheduler+0x140>)
 800b87a:	2200      	movs	r2, #0
 800b87c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b87e:	f000 f8f9 	bl	800ba74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b882:	4b10      	ldr	r3, [pc, #64]	@ (800b8c4 <xPortStartScheduler+0x144>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a0f      	ldr	r2, [pc, #60]	@ (800b8c4 <xPortStartScheduler+0x144>)
 800b888:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b88c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b88e:	f7ff ff63 	bl	800b758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b892:	f7ff f817 	bl	800a8c4 <vTaskSwitchContext>
	prvTaskExitError();
 800b896:	f7ff ff1d 	bl	800b6d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b89a:	2300      	movs	r3, #0
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3718      	adds	r7, #24
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	e000ed00 	.word	0xe000ed00
 800b8a8:	410fc271 	.word	0x410fc271
 800b8ac:	410fc270 	.word	0x410fc270
 800b8b0:	e000e400 	.word	0xe000e400
 800b8b4:	2000964c 	.word	0x2000964c
 800b8b8:	20009650 	.word	0x20009650
 800b8bc:	e000ed20 	.word	0xe000ed20
 800b8c0:	200000a0 	.word	0x200000a0
 800b8c4:	e000ef34 	.word	0xe000ef34

0800b8c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b083      	sub	sp, #12
 800b8cc:	af00      	add	r7, sp, #0
	__asm volatile
 800b8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8d2:	f383 8811 	msr	BASEPRI, r3
 800b8d6:	f3bf 8f6f 	isb	sy
 800b8da:	f3bf 8f4f 	dsb	sy
 800b8de:	607b      	str	r3, [r7, #4]
}
 800b8e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b8e2:	4b10      	ldr	r3, [pc, #64]	@ (800b924 <vPortEnterCritical+0x5c>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	4a0e      	ldr	r2, [pc, #56]	@ (800b924 <vPortEnterCritical+0x5c>)
 800b8ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b8ec:	4b0d      	ldr	r3, [pc, #52]	@ (800b924 <vPortEnterCritical+0x5c>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	2b01      	cmp	r3, #1
 800b8f2:	d110      	bne.n	800b916 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b8f4:	4b0c      	ldr	r3, [pc, #48]	@ (800b928 <vPortEnterCritical+0x60>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	b2db      	uxtb	r3, r3
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d00b      	beq.n	800b916 <vPortEnterCritical+0x4e>
	__asm volatile
 800b8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b902:	f383 8811 	msr	BASEPRI, r3
 800b906:	f3bf 8f6f 	isb	sy
 800b90a:	f3bf 8f4f 	dsb	sy
 800b90e:	603b      	str	r3, [r7, #0]
}
 800b910:	bf00      	nop
 800b912:	bf00      	nop
 800b914:	e7fd      	b.n	800b912 <vPortEnterCritical+0x4a>
	}
}
 800b916:	bf00      	nop
 800b918:	370c      	adds	r7, #12
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr
 800b922:	bf00      	nop
 800b924:	200000a0 	.word	0x200000a0
 800b928:	e000ed04 	.word	0xe000ed04

0800b92c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b92c:	b480      	push	{r7}
 800b92e:	b083      	sub	sp, #12
 800b930:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b932:	4b12      	ldr	r3, [pc, #72]	@ (800b97c <vPortExitCritical+0x50>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d10b      	bne.n	800b952 <vPortExitCritical+0x26>
	__asm volatile
 800b93a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b93e:	f383 8811 	msr	BASEPRI, r3
 800b942:	f3bf 8f6f 	isb	sy
 800b946:	f3bf 8f4f 	dsb	sy
 800b94a:	607b      	str	r3, [r7, #4]
}
 800b94c:	bf00      	nop
 800b94e:	bf00      	nop
 800b950:	e7fd      	b.n	800b94e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b952:	4b0a      	ldr	r3, [pc, #40]	@ (800b97c <vPortExitCritical+0x50>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	3b01      	subs	r3, #1
 800b958:	4a08      	ldr	r2, [pc, #32]	@ (800b97c <vPortExitCritical+0x50>)
 800b95a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b95c:	4b07      	ldr	r3, [pc, #28]	@ (800b97c <vPortExitCritical+0x50>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d105      	bne.n	800b970 <vPortExitCritical+0x44>
 800b964:	2300      	movs	r3, #0
 800b966:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	f383 8811 	msr	BASEPRI, r3
}
 800b96e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b970:	bf00      	nop
 800b972:	370c      	adds	r7, #12
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr
 800b97c:	200000a0 	.word	0x200000a0

0800b980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b980:	f3ef 8009 	mrs	r0, PSP
 800b984:	f3bf 8f6f 	isb	sy
 800b988:	4b15      	ldr	r3, [pc, #84]	@ (800b9e0 <pxCurrentTCBConst>)
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	f01e 0f10 	tst.w	lr, #16
 800b990:	bf08      	it	eq
 800b992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b99a:	6010      	str	r0, [r2, #0]
 800b99c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b9a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b9a4:	f380 8811 	msr	BASEPRI, r0
 800b9a8:	f3bf 8f4f 	dsb	sy
 800b9ac:	f3bf 8f6f 	isb	sy
 800b9b0:	f7fe ff88 	bl	800a8c4 <vTaskSwitchContext>
 800b9b4:	f04f 0000 	mov.w	r0, #0
 800b9b8:	f380 8811 	msr	BASEPRI, r0
 800b9bc:	bc09      	pop	{r0, r3}
 800b9be:	6819      	ldr	r1, [r3, #0]
 800b9c0:	6808      	ldr	r0, [r1, #0]
 800b9c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c6:	f01e 0f10 	tst.w	lr, #16
 800b9ca:	bf08      	it	eq
 800b9cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b9d0:	f380 8809 	msr	PSP, r0
 800b9d4:	f3bf 8f6f 	isb	sy
 800b9d8:	4770      	bx	lr
 800b9da:	bf00      	nop
 800b9dc:	f3af 8000 	nop.w

0800b9e0 <pxCurrentTCBConst>:
 800b9e0:	20009020 	.word	0x20009020
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b9e4:	bf00      	nop
 800b9e6:	bf00      	nop

0800b9e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b082      	sub	sp, #8
 800b9ec:	af00      	add	r7, sp, #0
	__asm volatile
 800b9ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9f2:	f383 8811 	msr	BASEPRI, r3
 800b9f6:	f3bf 8f6f 	isb	sy
 800b9fa:	f3bf 8f4f 	dsb	sy
 800b9fe:	607b      	str	r3, [r7, #4]
}
 800ba00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ba02:	f7fe fea5 	bl	800a750 <xTaskIncrementTick>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d003      	beq.n	800ba14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ba0c:	4b06      	ldr	r3, [pc, #24]	@ (800ba28 <xPortSysTickHandler+0x40>)
 800ba0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba12:	601a      	str	r2, [r3, #0]
 800ba14:	2300      	movs	r3, #0
 800ba16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	f383 8811 	msr	BASEPRI, r3
}
 800ba1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ba20:	bf00      	nop
 800ba22:	3708      	adds	r7, #8
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}
 800ba28:	e000ed04 	.word	0xe000ed04

0800ba2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ba30:	4b0b      	ldr	r3, [pc, #44]	@ (800ba60 <vPortSetupTimerInterrupt+0x34>)
 800ba32:	2200      	movs	r2, #0
 800ba34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ba36:	4b0b      	ldr	r3, [pc, #44]	@ (800ba64 <vPortSetupTimerInterrupt+0x38>)
 800ba38:	2200      	movs	r2, #0
 800ba3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ba3c:	4b0a      	ldr	r3, [pc, #40]	@ (800ba68 <vPortSetupTimerInterrupt+0x3c>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a0a      	ldr	r2, [pc, #40]	@ (800ba6c <vPortSetupTimerInterrupt+0x40>)
 800ba42:	fba2 2303 	umull	r2, r3, r2, r3
 800ba46:	099b      	lsrs	r3, r3, #6
 800ba48:	4a09      	ldr	r2, [pc, #36]	@ (800ba70 <vPortSetupTimerInterrupt+0x44>)
 800ba4a:	3b01      	subs	r3, #1
 800ba4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ba4e:	4b04      	ldr	r3, [pc, #16]	@ (800ba60 <vPortSetupTimerInterrupt+0x34>)
 800ba50:	2207      	movs	r2, #7
 800ba52:	601a      	str	r2, [r3, #0]
}
 800ba54:	bf00      	nop
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr
 800ba5e:	bf00      	nop
 800ba60:	e000e010 	.word	0xe000e010
 800ba64:	e000e018 	.word	0xe000e018
 800ba68:	20000004 	.word	0x20000004
 800ba6c:	10624dd3 	.word	0x10624dd3
 800ba70:	e000e014 	.word	0xe000e014

0800ba74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ba74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ba84 <vPortEnableVFP+0x10>
 800ba78:	6801      	ldr	r1, [r0, #0]
 800ba7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ba7e:	6001      	str	r1, [r0, #0]
 800ba80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ba82:	bf00      	nop
 800ba84:	e000ed88 	.word	0xe000ed88

0800ba88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ba88:	b480      	push	{r7}
 800ba8a:	b085      	sub	sp, #20
 800ba8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ba8e:	f3ef 8305 	mrs	r3, IPSR
 800ba92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2b0f      	cmp	r3, #15
 800ba98:	d915      	bls.n	800bac6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ba9a:	4a18      	ldr	r2, [pc, #96]	@ (800bafc <vPortValidateInterruptPriority+0x74>)
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	4413      	add	r3, r2
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800baa4:	4b16      	ldr	r3, [pc, #88]	@ (800bb00 <vPortValidateInterruptPriority+0x78>)
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	7afa      	ldrb	r2, [r7, #11]
 800baaa:	429a      	cmp	r2, r3
 800baac:	d20b      	bcs.n	800bac6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800baae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bab2:	f383 8811 	msr	BASEPRI, r3
 800bab6:	f3bf 8f6f 	isb	sy
 800baba:	f3bf 8f4f 	dsb	sy
 800babe:	607b      	str	r3, [r7, #4]
}
 800bac0:	bf00      	nop
 800bac2:	bf00      	nop
 800bac4:	e7fd      	b.n	800bac2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bac6:	4b0f      	ldr	r3, [pc, #60]	@ (800bb04 <vPortValidateInterruptPriority+0x7c>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bace:	4b0e      	ldr	r3, [pc, #56]	@ (800bb08 <vPortValidateInterruptPriority+0x80>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d90b      	bls.n	800baee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bada:	f383 8811 	msr	BASEPRI, r3
 800bade:	f3bf 8f6f 	isb	sy
 800bae2:	f3bf 8f4f 	dsb	sy
 800bae6:	603b      	str	r3, [r7, #0]
}
 800bae8:	bf00      	nop
 800baea:	bf00      	nop
 800baec:	e7fd      	b.n	800baea <vPortValidateInterruptPriority+0x62>
	}
 800baee:	bf00      	nop
 800baf0:	3714      	adds	r7, #20
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr
 800bafa:	bf00      	nop
 800bafc:	e000e3f0 	.word	0xe000e3f0
 800bb00:	2000964c 	.word	0x2000964c
 800bb04:	e000ed0c 	.word	0xe000ed0c
 800bb08:	20009650 	.word	0x20009650

0800bb0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b08a      	sub	sp, #40	@ 0x28
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bb14:	2300      	movs	r3, #0
 800bb16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bb18:	f7fe fd5e 	bl	800a5d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bb1c:	4b5c      	ldr	r3, [pc, #368]	@ (800bc90 <pvPortMalloc+0x184>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d101      	bne.n	800bb28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bb24:	f000 f924 	bl	800bd70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bb28:	4b5a      	ldr	r3, [pc, #360]	@ (800bc94 <pvPortMalloc+0x188>)
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	4013      	ands	r3, r2
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	f040 8095 	bne.w	800bc60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d01e      	beq.n	800bb7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bb3c:	2208      	movs	r2, #8
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	4413      	add	r3, r2
 800bb42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f003 0307 	and.w	r3, r3, #7
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d015      	beq.n	800bb7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f023 0307 	bic.w	r3, r3, #7
 800bb54:	3308      	adds	r3, #8
 800bb56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f003 0307 	and.w	r3, r3, #7
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d00b      	beq.n	800bb7a <pvPortMalloc+0x6e>
	__asm volatile
 800bb62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb66:	f383 8811 	msr	BASEPRI, r3
 800bb6a:	f3bf 8f6f 	isb	sy
 800bb6e:	f3bf 8f4f 	dsb	sy
 800bb72:	617b      	str	r3, [r7, #20]
}
 800bb74:	bf00      	nop
 800bb76:	bf00      	nop
 800bb78:	e7fd      	b.n	800bb76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d06f      	beq.n	800bc60 <pvPortMalloc+0x154>
 800bb80:	4b45      	ldr	r3, [pc, #276]	@ (800bc98 <pvPortMalloc+0x18c>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d86a      	bhi.n	800bc60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bb8a:	4b44      	ldr	r3, [pc, #272]	@ (800bc9c <pvPortMalloc+0x190>)
 800bb8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bb8e:	4b43      	ldr	r3, [pc, #268]	@ (800bc9c <pvPortMalloc+0x190>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb94:	e004      	b.n	800bba0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bb96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bb9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	687a      	ldr	r2, [r7, #4]
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d903      	bls.n	800bbb2 <pvPortMalloc+0xa6>
 800bbaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d1f1      	bne.n	800bb96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bbb2:	4b37      	ldr	r3, [pc, #220]	@ (800bc90 <pvPortMalloc+0x184>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d051      	beq.n	800bc60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bbbc:	6a3b      	ldr	r3, [r7, #32]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	2208      	movs	r2, #8
 800bbc2:	4413      	add	r3, r2
 800bbc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bbc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	6a3b      	ldr	r3, [r7, #32]
 800bbcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd0:	685a      	ldr	r2, [r3, #4]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	1ad2      	subs	r2, r2, r3
 800bbd6:	2308      	movs	r3, #8
 800bbd8:	005b      	lsls	r3, r3, #1
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d920      	bls.n	800bc20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bbde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	4413      	add	r3, r2
 800bbe4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bbe6:	69bb      	ldr	r3, [r7, #24]
 800bbe8:	f003 0307 	and.w	r3, r3, #7
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d00b      	beq.n	800bc08 <pvPortMalloc+0xfc>
	__asm volatile
 800bbf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbf4:	f383 8811 	msr	BASEPRI, r3
 800bbf8:	f3bf 8f6f 	isb	sy
 800bbfc:	f3bf 8f4f 	dsb	sy
 800bc00:	613b      	str	r3, [r7, #16]
}
 800bc02:	bf00      	nop
 800bc04:	bf00      	nop
 800bc06:	e7fd      	b.n	800bc04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bc08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc0a:	685a      	ldr	r2, [r3, #4]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	1ad2      	subs	r2, r2, r3
 800bc10:	69bb      	ldr	r3, [r7, #24]
 800bc12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bc14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc16:	687a      	ldr	r2, [r7, #4]
 800bc18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bc1a:	69b8      	ldr	r0, [r7, #24]
 800bc1c:	f000 f90a 	bl	800be34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bc20:	4b1d      	ldr	r3, [pc, #116]	@ (800bc98 <pvPortMalloc+0x18c>)
 800bc22:	681a      	ldr	r2, [r3, #0]
 800bc24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	1ad3      	subs	r3, r2, r3
 800bc2a:	4a1b      	ldr	r2, [pc, #108]	@ (800bc98 <pvPortMalloc+0x18c>)
 800bc2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bc2e:	4b1a      	ldr	r3, [pc, #104]	@ (800bc98 <pvPortMalloc+0x18c>)
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	4b1b      	ldr	r3, [pc, #108]	@ (800bca0 <pvPortMalloc+0x194>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d203      	bcs.n	800bc42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bc3a:	4b17      	ldr	r3, [pc, #92]	@ (800bc98 <pvPortMalloc+0x18c>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	4a18      	ldr	r2, [pc, #96]	@ (800bca0 <pvPortMalloc+0x194>)
 800bc40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc44:	685a      	ldr	r2, [r3, #4]
 800bc46:	4b13      	ldr	r3, [pc, #76]	@ (800bc94 <pvPortMalloc+0x188>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	431a      	orrs	r2, r3
 800bc4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bc50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc52:	2200      	movs	r2, #0
 800bc54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bc56:	4b13      	ldr	r3, [pc, #76]	@ (800bca4 <pvPortMalloc+0x198>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	4a11      	ldr	r2, [pc, #68]	@ (800bca4 <pvPortMalloc+0x198>)
 800bc5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bc60:	f7fe fcc8 	bl	800a5f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc64:	69fb      	ldr	r3, [r7, #28]
 800bc66:	f003 0307 	and.w	r3, r3, #7
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d00b      	beq.n	800bc86 <pvPortMalloc+0x17a>
	__asm volatile
 800bc6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc72:	f383 8811 	msr	BASEPRI, r3
 800bc76:	f3bf 8f6f 	isb	sy
 800bc7a:	f3bf 8f4f 	dsb	sy
 800bc7e:	60fb      	str	r3, [r7, #12]
}
 800bc80:	bf00      	nop
 800bc82:	bf00      	nop
 800bc84:	e7fd      	b.n	800bc82 <pvPortMalloc+0x176>
	return pvReturn;
 800bc86:	69fb      	ldr	r3, [r7, #28]
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3728      	adds	r7, #40	@ 0x28
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	2000a25c 	.word	0x2000a25c
 800bc94:	2000a270 	.word	0x2000a270
 800bc98:	2000a260 	.word	0x2000a260
 800bc9c:	2000a254 	.word	0x2000a254
 800bca0:	2000a264 	.word	0x2000a264
 800bca4:	2000a268 	.word	0x2000a268

0800bca8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b086      	sub	sp, #24
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d04f      	beq.n	800bd5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bcba:	2308      	movs	r3, #8
 800bcbc:	425b      	negs	r3, r3
 800bcbe:	697a      	ldr	r2, [r7, #20]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	685a      	ldr	r2, [r3, #4]
 800bccc:	4b25      	ldr	r3, [pc, #148]	@ (800bd64 <vPortFree+0xbc>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4013      	ands	r3, r2
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d10b      	bne.n	800bcee <vPortFree+0x46>
	__asm volatile
 800bcd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcda:	f383 8811 	msr	BASEPRI, r3
 800bcde:	f3bf 8f6f 	isb	sy
 800bce2:	f3bf 8f4f 	dsb	sy
 800bce6:	60fb      	str	r3, [r7, #12]
}
 800bce8:	bf00      	nop
 800bcea:	bf00      	nop
 800bcec:	e7fd      	b.n	800bcea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d00b      	beq.n	800bd0e <vPortFree+0x66>
	__asm volatile
 800bcf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcfa:	f383 8811 	msr	BASEPRI, r3
 800bcfe:	f3bf 8f6f 	isb	sy
 800bd02:	f3bf 8f4f 	dsb	sy
 800bd06:	60bb      	str	r3, [r7, #8]
}
 800bd08:	bf00      	nop
 800bd0a:	bf00      	nop
 800bd0c:	e7fd      	b.n	800bd0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	685a      	ldr	r2, [r3, #4]
 800bd12:	4b14      	ldr	r3, [pc, #80]	@ (800bd64 <vPortFree+0xbc>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4013      	ands	r3, r2
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d01e      	beq.n	800bd5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d11a      	bne.n	800bd5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	685a      	ldr	r2, [r3, #4]
 800bd28:	4b0e      	ldr	r3, [pc, #56]	@ (800bd64 <vPortFree+0xbc>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	43db      	mvns	r3, r3
 800bd2e:	401a      	ands	r2, r3
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bd34:	f7fe fc50 	bl	800a5d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	685a      	ldr	r2, [r3, #4]
 800bd3c:	4b0a      	ldr	r3, [pc, #40]	@ (800bd68 <vPortFree+0xc0>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4413      	add	r3, r2
 800bd42:	4a09      	ldr	r2, [pc, #36]	@ (800bd68 <vPortFree+0xc0>)
 800bd44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bd46:	6938      	ldr	r0, [r7, #16]
 800bd48:	f000 f874 	bl	800be34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bd4c:	4b07      	ldr	r3, [pc, #28]	@ (800bd6c <vPortFree+0xc4>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	3301      	adds	r3, #1
 800bd52:	4a06      	ldr	r2, [pc, #24]	@ (800bd6c <vPortFree+0xc4>)
 800bd54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bd56:	f7fe fc4d 	bl	800a5f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bd5a:	bf00      	nop
 800bd5c:	3718      	adds	r7, #24
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	2000a270 	.word	0x2000a270
 800bd68:	2000a260 	.word	0x2000a260
 800bd6c:	2000a26c 	.word	0x2000a26c

0800bd70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bd70:	b480      	push	{r7}
 800bd72:	b085      	sub	sp, #20
 800bd74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bd76:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800bd7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bd7c:	4b27      	ldr	r3, [pc, #156]	@ (800be1c <prvHeapInit+0xac>)
 800bd7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f003 0307 	and.w	r3, r3, #7
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d00c      	beq.n	800bda4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	3307      	adds	r3, #7
 800bd8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f023 0307 	bic.w	r3, r3, #7
 800bd96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bd98:	68ba      	ldr	r2, [r7, #8]
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	1ad3      	subs	r3, r2, r3
 800bd9e:	4a1f      	ldr	r2, [pc, #124]	@ (800be1c <prvHeapInit+0xac>)
 800bda0:	4413      	add	r3, r2
 800bda2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bda8:	4a1d      	ldr	r2, [pc, #116]	@ (800be20 <prvHeapInit+0xb0>)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bdae:	4b1c      	ldr	r3, [pc, #112]	@ (800be20 <prvHeapInit+0xb0>)
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	68ba      	ldr	r2, [r7, #8]
 800bdb8:	4413      	add	r3, r2
 800bdba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bdbc:	2208      	movs	r2, #8
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	1a9b      	subs	r3, r3, r2
 800bdc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	f023 0307 	bic.w	r3, r3, #7
 800bdca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	4a15      	ldr	r2, [pc, #84]	@ (800be24 <prvHeapInit+0xb4>)
 800bdd0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bdd2:	4b14      	ldr	r3, [pc, #80]	@ (800be24 <prvHeapInit+0xb4>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bdda:	4b12      	ldr	r3, [pc, #72]	@ (800be24 <prvHeapInit+0xb4>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	2200      	movs	r2, #0
 800bde0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	68fa      	ldr	r2, [r7, #12]
 800bdea:	1ad2      	subs	r2, r2, r3
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bdf0:	4b0c      	ldr	r3, [pc, #48]	@ (800be24 <prvHeapInit+0xb4>)
 800bdf2:	681a      	ldr	r2, [r3, #0]
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	4a0a      	ldr	r2, [pc, #40]	@ (800be28 <prvHeapInit+0xb8>)
 800bdfe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	4a09      	ldr	r2, [pc, #36]	@ (800be2c <prvHeapInit+0xbc>)
 800be06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800be08:	4b09      	ldr	r3, [pc, #36]	@ (800be30 <prvHeapInit+0xc0>)
 800be0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800be0e:	601a      	str	r2, [r3, #0]
}
 800be10:	bf00      	nop
 800be12:	3714      	adds	r7, #20
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr
 800be1c:	20009654 	.word	0x20009654
 800be20:	2000a254 	.word	0x2000a254
 800be24:	2000a25c 	.word	0x2000a25c
 800be28:	2000a264 	.word	0x2000a264
 800be2c:	2000a260 	.word	0x2000a260
 800be30:	2000a270 	.word	0x2000a270

0800be34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800be34:	b480      	push	{r7}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800be3c:	4b28      	ldr	r3, [pc, #160]	@ (800bee0 <prvInsertBlockIntoFreeList+0xac>)
 800be3e:	60fb      	str	r3, [r7, #12]
 800be40:	e002      	b.n	800be48 <prvInsertBlockIntoFreeList+0x14>
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	60fb      	str	r3, [r7, #12]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	429a      	cmp	r2, r3
 800be50:	d8f7      	bhi.n	800be42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	68ba      	ldr	r2, [r7, #8]
 800be5c:	4413      	add	r3, r2
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	429a      	cmp	r2, r3
 800be62:	d108      	bne.n	800be76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	685a      	ldr	r2, [r3, #4]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	441a      	add	r2, r3
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	68ba      	ldr	r2, [r7, #8]
 800be80:	441a      	add	r2, r3
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	429a      	cmp	r2, r3
 800be88:	d118      	bne.n	800bebc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681a      	ldr	r2, [r3, #0]
 800be8e:	4b15      	ldr	r3, [pc, #84]	@ (800bee4 <prvInsertBlockIntoFreeList+0xb0>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	429a      	cmp	r2, r3
 800be94:	d00d      	beq.n	800beb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	685a      	ldr	r2, [r3, #4]
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	441a      	add	r2, r3
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	681a      	ldr	r2, [r3, #0]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	601a      	str	r2, [r3, #0]
 800beb0:	e008      	b.n	800bec4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800beb2:	4b0c      	ldr	r3, [pc, #48]	@ (800bee4 <prvInsertBlockIntoFreeList+0xb0>)
 800beb4:	681a      	ldr	r2, [r3, #0]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	601a      	str	r2, [r3, #0]
 800beba:	e003      	b.n	800bec4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681a      	ldr	r2, [r3, #0]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bec4:	68fa      	ldr	r2, [r7, #12]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	429a      	cmp	r2, r3
 800beca:	d002      	beq.n	800bed2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	687a      	ldr	r2, [r7, #4]
 800bed0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bed2:	bf00      	nop
 800bed4:	3714      	adds	r7, #20
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr
 800bede:	bf00      	nop
 800bee0:	2000a254 	.word	0x2000a254
 800bee4:	2000a25c 	.word	0x2000a25c

0800bee8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800bee8:	4b04      	ldr	r3, [pc, #16]	@ (800befc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800beea:	681a      	ldr	r2, [r3, #0]
 800beec:	b10a      	cbz	r2, 800bef2 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800beee:	4803      	ldr	r0, [pc, #12]	@ (800befc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800bef0:	4770      	bx	lr
 800bef2:	4a03      	ldr	r2, [pc, #12]	@ (800bf00 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800bef4:	4801      	ldr	r0, [pc, #4]	@ (800befc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800bef6:	6812      	ldr	r2, [r2, #0]
 800bef8:	601a      	str	r2, [r3, #0]
 800befa:	4770      	bx	lr
 800befc:	200000a4 	.word	0x200000a4
 800bf00:	200005bc 	.word	0x200005bc

0800bf04 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800bf04:	4a02      	ldr	r2, [pc, #8]	@ (800bf10 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800bf06:	4b03      	ldr	r3, [pc, #12]	@ (800bf14 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800bf08:	6812      	ldr	r2, [r2, #0]
 800bf0a:	601a      	str	r2, [r3, #0]
 800bf0c:	4770      	bx	lr
 800bf0e:	bf00      	nop
 800bf10:	200005bc 	.word	0x200005bc
 800bf14:	200000a4 	.word	0x200000a4

0800bf18 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800bf18:	f005 be64 	b.w	8011be4 <geometry_msgs__msg__Twist__init>

0800bf1c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800bf1c:	f005 be82 	b.w	8011c24 <geometry_msgs__msg__Twist__fini>

0800bf20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800bf20:	b510      	push	{r4, lr}
 800bf22:	f000 f819 	bl	800bf58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800bf26:	4c07      	ldr	r4, [pc, #28]	@ (800bf44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800bf28:	60e0      	str	r0, [r4, #12]
 800bf2a:	f000 f815 	bl	800bf58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800bf2e:	4b06      	ldr	r3, [pc, #24]	@ (800bf48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800bf30:	64a0      	str	r0, [r4, #72]	@ 0x48
 800bf32:	681a      	ldr	r2, [r3, #0]
 800bf34:	b10a      	cbz	r2, 800bf3a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800bf36:	4804      	ldr	r0, [pc, #16]	@ (800bf48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800bf38:	bd10      	pop	{r4, pc}
 800bf3a:	4a04      	ldr	r2, [pc, #16]	@ (800bf4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800bf3c:	4802      	ldr	r0, [pc, #8]	@ (800bf48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800bf3e:	6812      	ldr	r2, [r2, #0]
 800bf40:	601a      	str	r2, [r3, #0]
 800bf42:	bd10      	pop	{r4, pc}
 800bf44:	200000dc 	.word	0x200000dc
 800bf48:	200000c4 	.word	0x200000c4
 800bf4c:	200005c0 	.word	0x200005c0

0800bf50 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800bf50:	f005 bea4 	b.w	8011c9c <geometry_msgs__msg__Vector3__init>

0800bf54 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800bf54:	f005 bea6 	b.w	8011ca4 <geometry_msgs__msg__Vector3__fini>

0800bf58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800bf58:	4b04      	ldr	r3, [pc, #16]	@ (800bf6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800bf5a:	681a      	ldr	r2, [r3, #0]
 800bf5c:	b10a      	cbz	r2, 800bf62 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800bf5e:	4803      	ldr	r0, [pc, #12]	@ (800bf6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800bf60:	4770      	bx	lr
 800bf62:	4a03      	ldr	r2, [pc, #12]	@ (800bf70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800bf64:	4801      	ldr	r0, [pc, #4]	@ (800bf6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800bf66:	6812      	ldr	r2, [r2, #0]
 800bf68:	601a      	str	r2, [r3, #0]
 800bf6a:	4770      	bx	lr
 800bf6c:	20000154 	.word	0x20000154
 800bf70:	200005c0 	.word	0x200005c0

0800bf74 <get_serialized_size_geometry_msgs__msg__Twist>:
 800bf74:	b570      	push	{r4, r5, r6, lr}
 800bf76:	4604      	mov	r4, r0
 800bf78:	b148      	cbz	r0, 800bf8e <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800bf7a:	460d      	mov	r5, r1
 800bf7c:	f000 f85c 	bl	800c038 <get_serialized_size_geometry_msgs__msg__Vector3>
 800bf80:	4606      	mov	r6, r0
 800bf82:	1829      	adds	r1, r5, r0
 800bf84:	f104 0018 	add.w	r0, r4, #24
 800bf88:	f000 f856 	bl	800c038 <get_serialized_size_geometry_msgs__msg__Vector3>
 800bf8c:	4430      	add	r0, r6
 800bf8e:	bd70      	pop	{r4, r5, r6, pc}

0800bf90 <_Twist__cdr_deserialize>:
 800bf90:	b570      	push	{r4, r5, r6, lr}
 800bf92:	460c      	mov	r4, r1
 800bf94:	b189      	cbz	r1, 800bfba <_Twist__cdr_deserialize+0x2a>
 800bf96:	4605      	mov	r5, r0
 800bf98:	f000 f8da 	bl	800c150 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800bf9c:	6843      	ldr	r3, [r0, #4]
 800bf9e:	4621      	mov	r1, r4
 800bfa0:	68db      	ldr	r3, [r3, #12]
 800bfa2:	4628      	mov	r0, r5
 800bfa4:	4798      	blx	r3
 800bfa6:	f000 f8d3 	bl	800c150 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800bfaa:	6843      	ldr	r3, [r0, #4]
 800bfac:	f104 0118 	add.w	r1, r4, #24
 800bfb0:	4628      	mov	r0, r5
 800bfb2:	68db      	ldr	r3, [r3, #12]
 800bfb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bfb8:	4718      	bx	r3
 800bfba:	4608      	mov	r0, r1
 800bfbc:	bd70      	pop	{r4, r5, r6, pc}
 800bfbe:	bf00      	nop

0800bfc0 <_Twist__cdr_serialize>:
 800bfc0:	b198      	cbz	r0, 800bfea <_Twist__cdr_serialize+0x2a>
 800bfc2:	b570      	push	{r4, r5, r6, lr}
 800bfc4:	460d      	mov	r5, r1
 800bfc6:	4604      	mov	r4, r0
 800bfc8:	f000 f8c2 	bl	800c150 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800bfcc:	6843      	ldr	r3, [r0, #4]
 800bfce:	4629      	mov	r1, r5
 800bfd0:	689b      	ldr	r3, [r3, #8]
 800bfd2:	4620      	mov	r0, r4
 800bfd4:	4798      	blx	r3
 800bfd6:	f000 f8bb 	bl	800c150 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800bfda:	6843      	ldr	r3, [r0, #4]
 800bfdc:	4629      	mov	r1, r5
 800bfde:	f104 0018 	add.w	r0, r4, #24
 800bfe2:	689b      	ldr	r3, [r3, #8]
 800bfe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bfe8:	4718      	bx	r3
 800bfea:	4770      	bx	lr

0800bfec <_Twist__get_serialized_size>:
 800bfec:	b538      	push	{r3, r4, r5, lr}
 800bfee:	4604      	mov	r4, r0
 800bff0:	b148      	cbz	r0, 800c006 <_Twist__get_serialized_size+0x1a>
 800bff2:	2100      	movs	r1, #0
 800bff4:	f000 f820 	bl	800c038 <get_serialized_size_geometry_msgs__msg__Vector3>
 800bff8:	4605      	mov	r5, r0
 800bffa:	4601      	mov	r1, r0
 800bffc:	f104 0018 	add.w	r0, r4, #24
 800c000:	f000 f81a 	bl	800c038 <get_serialized_size_geometry_msgs__msg__Vector3>
 800c004:	4428      	add	r0, r5
 800c006:	bd38      	pop	{r3, r4, r5, pc}

0800c008 <_Twist__max_serialized_size>:
 800c008:	b510      	push	{r4, lr}
 800c00a:	b082      	sub	sp, #8
 800c00c:	2301      	movs	r3, #1
 800c00e:	2100      	movs	r1, #0
 800c010:	f10d 0007 	add.w	r0, sp, #7
 800c014:	f88d 3007 	strb.w	r3, [sp, #7]
 800c018:	f000 f880 	bl	800c11c <max_serialized_size_geometry_msgs__msg__Vector3>
 800c01c:	4604      	mov	r4, r0
 800c01e:	4601      	mov	r1, r0
 800c020:	f10d 0007 	add.w	r0, sp, #7
 800c024:	f000 f87a 	bl	800c11c <max_serialized_size_geometry_msgs__msg__Vector3>
 800c028:	4420      	add	r0, r4
 800c02a:	b002      	add	sp, #8
 800c02c:	bd10      	pop	{r4, pc}
 800c02e:	bf00      	nop

0800c030 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800c030:	4800      	ldr	r0, [pc, #0]	@ (800c034 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800c032:	4770      	bx	lr
 800c034:	20000220 	.word	0x20000220

0800c038 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800c038:	b1b8      	cbz	r0, 800c06a <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800c03a:	b570      	push	{r4, r5, r6, lr}
 800c03c:	460d      	mov	r5, r1
 800c03e:	4628      	mov	r0, r5
 800c040:	2108      	movs	r1, #8
 800c042:	f002 f811 	bl	800e068 <ucdr_alignment>
 800c046:	2108      	movs	r1, #8
 800c048:	186e      	adds	r6, r5, r1
 800c04a:	4406      	add	r6, r0
 800c04c:	4630      	mov	r0, r6
 800c04e:	f002 f80b 	bl	800e068 <ucdr_alignment>
 800c052:	f100 0408 	add.w	r4, r0, #8
 800c056:	4434      	add	r4, r6
 800c058:	2108      	movs	r1, #8
 800c05a:	4620      	mov	r0, r4
 800c05c:	f002 f804 	bl	800e068 <ucdr_alignment>
 800c060:	f1c5 0508 	rsb	r5, r5, #8
 800c064:	4405      	add	r5, r0
 800c066:	1928      	adds	r0, r5, r4
 800c068:	bd70      	pop	{r4, r5, r6, pc}
 800c06a:	4770      	bx	lr

0800c06c <_Vector3__cdr_deserialize>:
 800c06c:	b538      	push	{r3, r4, r5, lr}
 800c06e:	460c      	mov	r4, r1
 800c070:	b171      	cbz	r1, 800c090 <_Vector3__cdr_deserialize+0x24>
 800c072:	4605      	mov	r5, r0
 800c074:	f001 fe1a 	bl	800dcac <ucdr_deserialize_double>
 800c078:	f104 0108 	add.w	r1, r4, #8
 800c07c:	4628      	mov	r0, r5
 800c07e:	f001 fe15 	bl	800dcac <ucdr_deserialize_double>
 800c082:	f104 0110 	add.w	r1, r4, #16
 800c086:	4628      	mov	r0, r5
 800c088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c08c:	f001 be0e 	b.w	800dcac <ucdr_deserialize_double>
 800c090:	4608      	mov	r0, r1
 800c092:	bd38      	pop	{r3, r4, r5, pc}

0800c094 <_Vector3__cdr_serialize>:
 800c094:	b198      	cbz	r0, 800c0be <_Vector3__cdr_serialize+0x2a>
 800c096:	b538      	push	{r3, r4, r5, lr}
 800c098:	ed90 0b00 	vldr	d0, [r0]
 800c09c:	460d      	mov	r5, r1
 800c09e:	4604      	mov	r4, r0
 800c0a0:	4608      	mov	r0, r1
 800c0a2:	f001 fc73 	bl	800d98c <ucdr_serialize_double>
 800c0a6:	ed94 0b02 	vldr	d0, [r4, #8]
 800c0aa:	4628      	mov	r0, r5
 800c0ac:	f001 fc6e 	bl	800d98c <ucdr_serialize_double>
 800c0b0:	ed94 0b04 	vldr	d0, [r4, #16]
 800c0b4:	4628      	mov	r0, r5
 800c0b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0ba:	f001 bc67 	b.w	800d98c <ucdr_serialize_double>
 800c0be:	4770      	bx	lr

0800c0c0 <_Vector3__get_serialized_size>:
 800c0c0:	b1a0      	cbz	r0, 800c0ec <_Vector3__get_serialized_size+0x2c>
 800c0c2:	b538      	push	{r3, r4, r5, lr}
 800c0c4:	2108      	movs	r1, #8
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	f001 ffce 	bl	800e068 <ucdr_alignment>
 800c0cc:	f100 0508 	add.w	r5, r0, #8
 800c0d0:	2108      	movs	r1, #8
 800c0d2:	4628      	mov	r0, r5
 800c0d4:	f001 ffc8 	bl	800e068 <ucdr_alignment>
 800c0d8:	f100 0408 	add.w	r4, r0, #8
 800c0dc:	442c      	add	r4, r5
 800c0de:	2108      	movs	r1, #8
 800c0e0:	4620      	mov	r0, r4
 800c0e2:	f001 ffc1 	bl	800e068 <ucdr_alignment>
 800c0e6:	3008      	adds	r0, #8
 800c0e8:	4420      	add	r0, r4
 800c0ea:	bd38      	pop	{r3, r4, r5, pc}
 800c0ec:	4770      	bx	lr
 800c0ee:	bf00      	nop

0800c0f0 <_Vector3__max_serialized_size>:
 800c0f0:	b538      	push	{r3, r4, r5, lr}
 800c0f2:	2108      	movs	r1, #8
 800c0f4:	2000      	movs	r0, #0
 800c0f6:	f001 ffb7 	bl	800e068 <ucdr_alignment>
 800c0fa:	f100 0508 	add.w	r5, r0, #8
 800c0fe:	2108      	movs	r1, #8
 800c100:	4628      	mov	r0, r5
 800c102:	f001 ffb1 	bl	800e068 <ucdr_alignment>
 800c106:	f100 0408 	add.w	r4, r0, #8
 800c10a:	442c      	add	r4, r5
 800c10c:	2108      	movs	r1, #8
 800c10e:	4620      	mov	r0, r4
 800c110:	f001 ffaa 	bl	800e068 <ucdr_alignment>
 800c114:	3008      	adds	r0, #8
 800c116:	4420      	add	r0, r4
 800c118:	bd38      	pop	{r3, r4, r5, pc}
 800c11a:	bf00      	nop

0800c11c <max_serialized_size_geometry_msgs__msg__Vector3>:
 800c11c:	b570      	push	{r4, r5, r6, lr}
 800c11e:	2301      	movs	r3, #1
 800c120:	460c      	mov	r4, r1
 800c122:	7003      	strb	r3, [r0, #0]
 800c124:	2108      	movs	r1, #8
 800c126:	4620      	mov	r0, r4
 800c128:	f001 ff9e 	bl	800e068 <ucdr_alignment>
 800c12c:	2108      	movs	r1, #8
 800c12e:	1863      	adds	r3, r4, r1
 800c130:	18c6      	adds	r6, r0, r3
 800c132:	4630      	mov	r0, r6
 800c134:	f001 ff98 	bl	800e068 <ucdr_alignment>
 800c138:	f100 0508 	add.w	r5, r0, #8
 800c13c:	4435      	add	r5, r6
 800c13e:	2108      	movs	r1, #8
 800c140:	4628      	mov	r0, r5
 800c142:	f001 ff91 	bl	800e068 <ucdr_alignment>
 800c146:	f1c4 0408 	rsb	r4, r4, #8
 800c14a:	4420      	add	r0, r4
 800c14c:	4428      	add	r0, r5
 800c14e:	bd70      	pop	{r4, r5, r6, pc}

0800c150 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800c150:	4800      	ldr	r0, [pc, #0]	@ (800c154 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800c152:	4770      	bx	lr
 800c154:	20000254 	.word	0x20000254

0800c158 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800c158:	4b04      	ldr	r3, [pc, #16]	@ (800c16c <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800c15a:	681a      	ldr	r2, [r3, #0]
 800c15c:	b10a      	cbz	r2, 800c162 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xa>
 800c15e:	4803      	ldr	r0, [pc, #12]	@ (800c16c <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800c160:	4770      	bx	lr
 800c162:	4a03      	ldr	r2, [pc, #12]	@ (800c170 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x18>)
 800c164:	4801      	ldr	r0, [pc, #4]	@ (800c16c <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800c166:	6812      	ldr	r2, [r2, #0]
 800c168:	601a      	str	r2, [r3, #0]
 800c16a:	4770      	bx	lr
 800c16c:	20000288 	.word	0x20000288
 800c170:	200005bc 	.word	0x200005bc

0800c174 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800c174:	4b06      	ldr	r3, [pc, #24]	@ (800c190 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x1c>)
 800c176:	4807      	ldr	r0, [pc, #28]	@ (800c194 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800c178:	4907      	ldr	r1, [pc, #28]	@ (800c198 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x24>)
 800c17a:	4a08      	ldr	r2, [pc, #32]	@ (800c19c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x28>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	b410      	push	{r4}
 800c180:	4c07      	ldr	r4, [pc, #28]	@ (800c1a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x2c>)
 800c182:	6003      	str	r3, [r0, #0]
 800c184:	6023      	str	r3, [r4, #0]
 800c186:	600b      	str	r3, [r1, #0]
 800c188:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c18c:	6013      	str	r3, [r2, #0]
 800c18e:	4770      	bx	lr
 800c190:	200005bc 	.word	0x200005bc
 800c194:	200002dc 	.word	0x200002dc
 800c198:	200002bc 	.word	0x200002bc
 800c19c:	20000288 	.word	0x20000288
 800c1a0:	200002fc 	.word	0x200002fc

0800c1a4 <imu_interfaces__srv__ImuCalibration_Event__rosidl_typesupport_introspection_c__size_function__ImuCalibration_Event__request>:
 800c1a4:	6840      	ldr	r0, [r0, #4]
 800c1a6:	4770      	bx	lr

0800c1a8 <imu_interfaces__srv__ImuCalibration_Event__rosidl_typesupport_introspection_c__get_const_function__ImuCalibration_Event__request>:
 800c1a8:	6800      	ldr	r0, [r0, #0]
 800c1aa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c1ae:	eb00 1081 	add.w	r0, r0, r1, lsl #6
 800c1b2:	4770      	bx	lr

0800c1b4 <imu_interfaces__srv__ImuCalibration_Event__rosidl_typesupport_introspection_c__fetch_function__ImuCalibration_Event__request>:
 800c1b4:	b508      	push	{r3, lr}
 800c1b6:	6803      	ldr	r3, [r0, #0]
 800c1b8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c1bc:	4610      	mov	r0, r2
 800c1be:	eb03 1181 	add.w	r1, r3, r1, lsl #6
 800c1c2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800c1c6:	f011 fd92 	bl	801dcee <memcpy>
 800c1ca:	bd08      	pop	{r3, pc}

0800c1cc <imu_interfaces__srv__ImuCalibration_Event__rosidl_typesupport_introspection_c__assign_function__ImuCalibration_Event__request>:
 800c1cc:	b508      	push	{r3, lr}
 800c1ce:	6803      	ldr	r3, [r0, #0]
 800c1d0:	4694      	mov	ip, r2
 800c1d2:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 800c1d6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800c1da:	4661      	mov	r1, ip
 800c1dc:	eb03 1080 	add.w	r0, r3, r0, lsl #6
 800c1e0:	f011 fd85 	bl	801dcee <memcpy>
 800c1e4:	bd08      	pop	{r3, pc}
 800c1e6:	bf00      	nop

0800c1e8 <imu_interfaces__srv__ImuCalibration_Event__rosidl_typesupport_introspection_c__size_function__ImuCalibration_Event__response>:
 800c1e8:	6840      	ldr	r0, [r0, #4]
 800c1ea:	4770      	bx	lr

0800c1ec <imu_interfaces__srv__ImuCalibration_Event__rosidl_typesupport_introspection_c__get_const_function__ImuCalibration_Event__response>:
 800c1ec:	6800      	ldr	r0, [r0, #0]
 800c1ee:	4408      	add	r0, r1
 800c1f0:	4770      	bx	lr
 800c1f2:	bf00      	nop

0800c1f4 <imu_interfaces__srv__ImuCalibration_Event__rosidl_typesupport_introspection_c__fetch_function__ImuCalibration_Event__response>:
 800c1f4:	6803      	ldr	r3, [r0, #0]
 800c1f6:	5c5b      	ldrb	r3, [r3, r1]
 800c1f8:	7013      	strb	r3, [r2, #0]
 800c1fa:	4770      	bx	lr

0800c1fc <imu_interfaces__srv__ImuCalibration_Event__rosidl_typesupport_introspection_c__assign_function__ImuCalibration_Event__response>:
 800c1fc:	6803      	ldr	r3, [r0, #0]
 800c1fe:	7812      	ldrb	r2, [r2, #0]
 800c200:	545a      	strb	r2, [r3, r1]
 800c202:	4770      	bx	lr

0800c204 <imu_interfaces__srv__ImuCalibration_Request__rosidl_typesupport_introspection_c__ImuCalibration_Request_init_function>:
 800c204:	f006 b92c 	b.w	8012460 <imu_interfaces__srv__ImuCalibration_Request__init>

0800c208 <imu_interfaces__srv__ImuCalibration_Request__rosidl_typesupport_introspection_c__ImuCalibration_Request_fini_function>:
 800c208:	f006 b938 	b.w	801247c <imu_interfaces__srv__ImuCalibration_Request__fini>

0800c20c <imu_interfaces__srv__ImuCalibration_Response__rosidl_typesupport_introspection_c__ImuCalibration_Response_init_function>:
 800c20c:	f006 b9ae 	b.w	801256c <imu_interfaces__srv__ImuCalibration_Response__init>

0800c210 <imu_interfaces__srv__ImuCalibration_Response__rosidl_typesupport_introspection_c__ImuCalibration_Response_fini_function>:
 800c210:	f006 b9b0 	b.w	8012574 <imu_interfaces__srv__ImuCalibration_Response__fini>

0800c214 <imu_interfaces__srv__ImuCalibration_Event__rosidl_typesupport_introspection_c__ImuCalibration_Event_init_function>:
 800c214:	f006 b9e8 	b.w	80125e8 <imu_interfaces__srv__ImuCalibration_Event__init>

0800c218 <imu_interfaces__srv__ImuCalibration_Event__rosidl_typesupport_introspection_c__ImuCalibration_Event_fini_function>:
 800c218:	f006 ba32 	b.w	8012680 <imu_interfaces__srv__ImuCalibration_Event__fini>

0800c21c <imu_interfaces__srv__ImuCalibration_Event__rosidl_typesupport_introspection_c__resize_function__ImuCalibration_Event__request>:
 800c21c:	b538      	push	{r3, r4, r5, lr}
 800c21e:	4604      	mov	r4, r0
 800c220:	460d      	mov	r5, r1
 800c222:	f006 f97b 	bl	801251c <imu_interfaces__srv__ImuCalibration_Request__Sequence__fini>
 800c226:	4629      	mov	r1, r5
 800c228:	4620      	mov	r0, r4
 800c22a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c22e:	f006 b92f 	b.w	8012490 <imu_interfaces__srv__ImuCalibration_Request__Sequence__init>
 800c232:	bf00      	nop

0800c234 <imu_interfaces__srv__ImuCalibration_Event__rosidl_typesupport_introspection_c__resize_function__ImuCalibration_Event__response>:
 800c234:	b538      	push	{r3, r4, r5, lr}
 800c236:	4604      	mov	r4, r0
 800c238:	460d      	mov	r5, r1
 800c23a:	f006 f9c1 	bl	80125c0 <imu_interfaces__srv__ImuCalibration_Response__Sequence__fini>
 800c23e:	4629      	mov	r1, r5
 800c240:	4620      	mov	r0, r4
 800c242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c246:	f006 b99f 	b.w	8012588 <imu_interfaces__srv__ImuCalibration_Response__Sequence__init>
 800c24a:	bf00      	nop

0800c24c <imu_interfaces__srv__ImuCalibration_Event__rosidl_typesupport_introspection_c__get_function__ImuCalibration_Event__response>:
 800c24c:	6800      	ldr	r0, [r0, #0]
 800c24e:	4408      	add	r0, r1
 800c250:	4770      	bx	lr
 800c252:	bf00      	nop

0800c254 <imu_interfaces__srv__ImuCalibration_Event__rosidl_typesupport_introspection_c__get_function__ImuCalibration_Event__request>:
 800c254:	6800      	ldr	r0, [r0, #0]
 800c256:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c25a:	eb00 1081 	add.w	r0, r0, r1, lsl #6
 800c25e:	4770      	bx	lr

0800c260 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800c260:	b508      	push	{r3, lr}
 800c262:	f004 fe3d 	bl	8010ee0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800c266:	4b06      	ldr	r3, [pc, #24]	@ (800c280 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800c268:	4906      	ldr	r1, [pc, #24]	@ (800c284 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x24>)
 800c26a:	681a      	ldr	r2, [r3, #0]
 800c26c:	60c8      	str	r0, [r1, #12]
 800c26e:	b10a      	cbz	r2, 800c274 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x14>
 800c270:	4803      	ldr	r0, [pc, #12]	@ (800c280 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800c272:	bd08      	pop	{r3, pc}
 800c274:	4a04      	ldr	r2, [pc, #16]	@ (800c288 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x28>)
 800c276:	4802      	ldr	r0, [pc, #8]	@ (800c280 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800c278:	6812      	ldr	r2, [r2, #0]
 800c27a:	601a      	str	r2, [r3, #0]
 800c27c:	bd08      	pop	{r3, pc}
 800c27e:	bf00      	nop
 800c280:	2000047c 	.word	0x2000047c
 800c284:	20000494 	.word	0x20000494
 800c288:	200005c0 	.word	0x200005c0

0800c28c <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response>:
 800c28c:	4b04      	ldr	r3, [pc, #16]	@ (800c2a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800c28e:	681a      	ldr	r2, [r3, #0]
 800c290:	b10a      	cbz	r2, 800c296 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0xa>
 800c292:	4803      	ldr	r0, [pc, #12]	@ (800c2a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800c294:	4770      	bx	lr
 800c296:	4a03      	ldr	r2, [pc, #12]	@ (800c2a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x18>)
 800c298:	4801      	ldr	r0, [pc, #4]	@ (800c2a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800c29a:	6812      	ldr	r2, [r2, #0]
 800c29c:	601a      	str	r2, [r3, #0]
 800c29e:	4770      	bx	lr
 800c2a0:	20000428 	.word	0x20000428
 800c2a4:	200005c0 	.word	0x200005c0

0800c2a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event>:
 800c2a8:	b510      	push	{r4, lr}
 800c2aa:	f004 ff35 	bl	8011118 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c2ae:	4c15      	ldr	r4, [pc, #84]	@ (800c304 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x5c>)
 800c2b0:	60e0      	str	r0, [r4, #12]
 800c2b2:	f004 fe15 	bl	8010ee0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800c2b6:	4a14      	ldr	r2, [pc, #80]	@ (800c308 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x60>)
 800c2b8:	4914      	ldr	r1, [pc, #80]	@ (800c30c <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x64>)
 800c2ba:	6813      	ldr	r3, [r2, #0]
 800c2bc:	60c8      	str	r0, [r1, #12]
 800c2be:	b153      	cbz	r3, 800c2d6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x2e>
 800c2c0:	4b13      	ldr	r3, [pc, #76]	@ (800c310 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x68>)
 800c2c2:	64a2      	str	r2, [r4, #72]	@ 0x48
 800c2c4:	681a      	ldr	r2, [r3, #0]
 800c2c6:	b172      	cbz	r2, 800c2e6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x3e>
 800c2c8:	4a12      	ldr	r2, [pc, #72]	@ (800c314 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x6c>)
 800c2ca:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 800c2ce:	6813      	ldr	r3, [r2, #0]
 800c2d0:	b193      	cbz	r3, 800c2f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x50>
 800c2d2:	4810      	ldr	r0, [pc, #64]	@ (800c314 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x6c>)
 800c2d4:	bd10      	pop	{r4, pc}
 800c2d6:	4b10      	ldr	r3, [pc, #64]	@ (800c318 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x70>)
 800c2d8:	64a2      	str	r2, [r4, #72]	@ 0x48
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	6013      	str	r3, [r2, #0]
 800c2de:	4b0c      	ldr	r3, [pc, #48]	@ (800c310 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x68>)
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	2a00      	cmp	r2, #0
 800c2e4:	d1f0      	bne.n	800c2c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x20>
 800c2e6:	4a0c      	ldr	r2, [pc, #48]	@ (800c318 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x70>)
 800c2e8:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 800c2ec:	6812      	ldr	r2, [r2, #0]
 800c2ee:	601a      	str	r2, [r3, #0]
 800c2f0:	4a08      	ldr	r2, [pc, #32]	@ (800c314 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x6c>)
 800c2f2:	6813      	ldr	r3, [r2, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d1ec      	bne.n	800c2d2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x2a>
 800c2f8:	4b07      	ldr	r3, [pc, #28]	@ (800c318 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x70>)
 800c2fa:	4806      	ldr	r0, [pc, #24]	@ (800c314 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x6c>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	6013      	str	r3, [r2, #0]
 800c300:	bd10      	pop	{r4, pc}
 800c302:	bf00      	nop
 800c304:	20000374 	.word	0x20000374
 800c308:	2000047c 	.word	0x2000047c
 800c30c:	20000494 	.word	0x20000494
 800c310:	20000428 	.word	0x20000428
 800c314:	2000035c 	.word	0x2000035c
 800c318:	200005c0 	.word	0x200005c0

0800c31c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800c31c:	b538      	push	{r3, r4, r5, lr}
 800c31e:	4b2a      	ldr	r3, [pc, #168]	@ (800c3c8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xac>)
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	b142      	cbz	r2, 800c336 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x1a>
 800c324:	685c      	ldr	r4, [r3, #4]
 800c326:	68a3      	ldr	r3, [r4, #8]
 800c328:	b163      	cbz	r3, 800c344 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x28>
 800c32a:	68e3      	ldr	r3, [r4, #12]
 800c32c:	b1bb      	cbz	r3, 800c35e <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x42>
 800c32e:	6923      	ldr	r3, [r4, #16]
 800c330:	b1eb      	cbz	r3, 800c36e <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x52>
 800c332:	4825      	ldr	r0, [pc, #148]	@ (800c3c8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xac>)
 800c334:	bd38      	pop	{r3, r4, r5, pc}
 800c336:	4a25      	ldr	r2, [pc, #148]	@ (800c3cc <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xb0>)
 800c338:	685c      	ldr	r4, [r3, #4]
 800c33a:	6812      	ldr	r2, [r2, #0]
 800c33c:	601a      	str	r2, [r3, #0]
 800c33e:	68a3      	ldr	r3, [r4, #8]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d1f2      	bne.n	800c32a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xe>
 800c344:	f004 fdcc 	bl	8010ee0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800c348:	4a21      	ldr	r2, [pc, #132]	@ (800c3d0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xb4>)
 800c34a:	4922      	ldr	r1, [pc, #136]	@ (800c3d4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xb8>)
 800c34c:	6813      	ldr	r3, [r2, #0]
 800c34e:	60c8      	str	r0, [r1, #12]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d034      	beq.n	800c3be <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xa2>
 800c354:	6853      	ldr	r3, [r2, #4]
 800c356:	60a3      	str	r3, [r4, #8]
 800c358:	68e3      	ldr	r3, [r4, #12]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d1e7      	bne.n	800c32e <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x12>
 800c35e:	4b1e      	ldr	r3, [pc, #120]	@ (800c3d8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xbc>)
 800c360:	681a      	ldr	r2, [r3, #0]
 800c362:	b1e2      	cbz	r2, 800c39e <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x82>
 800c364:	685b      	ldr	r3, [r3, #4]
 800c366:	60e3      	str	r3, [r4, #12]
 800c368:	6923      	ldr	r3, [r4, #16]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d1e1      	bne.n	800c332 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x16>
 800c36e:	f004 fed3 	bl	8011118 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c372:	4d1a      	ldr	r5, [pc, #104]	@ (800c3dc <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xc0>)
 800c374:	60e8      	str	r0, [r5, #12]
 800c376:	f004 fdb3 	bl	8010ee0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800c37a:	4b16      	ldr	r3, [pc, #88]	@ (800c3d4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xb8>)
 800c37c:	4a14      	ldr	r2, [pc, #80]	@ (800c3d0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xb4>)
 800c37e:	60d8      	str	r0, [r3, #12]
 800c380:	6813      	ldr	r3, [r2, #0]
 800c382:	b1a3      	cbz	r3, 800c3ae <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x92>
 800c384:	4b14      	ldr	r3, [pc, #80]	@ (800c3d8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xbc>)
 800c386:	64aa      	str	r2, [r5, #72]	@ 0x48
 800c388:	681a      	ldr	r2, [r3, #0]
 800c38a:	b162      	cbz	r2, 800c3a6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x8a>
 800c38c:	4a14      	ldr	r2, [pc, #80]	@ (800c3e0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xc4>)
 800c38e:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
 800c392:	6813      	ldr	r3, [r2, #0]
 800c394:	b17b      	cbz	r3, 800c3b6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x9a>
 800c396:	6853      	ldr	r3, [r2, #4]
 800c398:	480b      	ldr	r0, [pc, #44]	@ (800c3c8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xac>)
 800c39a:	6123      	str	r3, [r4, #16]
 800c39c:	bd38      	pop	{r3, r4, r5, pc}
 800c39e:	4a0b      	ldr	r2, [pc, #44]	@ (800c3cc <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xb0>)
 800c3a0:	6812      	ldr	r2, [r2, #0]
 800c3a2:	601a      	str	r2, [r3, #0]
 800c3a4:	e7de      	b.n	800c364 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x48>
 800c3a6:	4a09      	ldr	r2, [pc, #36]	@ (800c3cc <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xb0>)
 800c3a8:	6812      	ldr	r2, [r2, #0]
 800c3aa:	601a      	str	r2, [r3, #0]
 800c3ac:	e7ee      	b.n	800c38c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x70>
 800c3ae:	4b07      	ldr	r3, [pc, #28]	@ (800c3cc <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xb0>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	6013      	str	r3, [r2, #0]
 800c3b4:	e7e6      	b.n	800c384 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x68>
 800c3b6:	4b05      	ldr	r3, [pc, #20]	@ (800c3cc <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xb0>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	6013      	str	r3, [r2, #0]
 800c3bc:	e7eb      	b.n	800c396 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x7a>
 800c3be:	4b03      	ldr	r3, [pc, #12]	@ (800c3cc <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xb0>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	6013      	str	r3, [r2, #0]
 800c3c4:	e7c6      	b.n	800c354 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x38>
 800c3c6:	bf00      	nop
 800c3c8:	2000031c 	.word	0x2000031c
 800c3cc:	200005c0 	.word	0x200005c0
 800c3d0:	2000047c 	.word	0x2000047c
 800c3d4:	20000494 	.word	0x20000494
 800c3d8:	20000428 	.word	0x20000428
 800c3dc:	20000374 	.word	0x20000374
 800c3e0:	2000035c 	.word	0x2000035c

0800c3e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800c3e4:	4800      	ldr	r0, [pc, #0]	@ (800c3e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x4>)
 800c3e6:	4770      	bx	lr
 800c3e8:	20000574 	.word	0x20000574

0800c3ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response>:
 800c3ec:	4800      	ldr	r0, [pc, #0]	@ (800c3f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x4>)
 800c3ee:	4770      	bx	lr
 800c3f0:	20000540 	.word	0x20000540

0800c3f4 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Request>:
 800c3f4:	b108      	cbz	r0, 800c3fa <get_serialized_size_imu_interfaces__srv__ImuCalibration_Request+0x6>
 800c3f6:	f004 bdc3 	b.w	8010f80 <get_serialized_size_sensor_msgs__msg__Imu>
 800c3fa:	4770      	bx	lr

0800c3fc <_ImuCalibration_Request__max_serialized_size>:
 800c3fc:	b500      	push	{lr}
 800c3fe:	b083      	sub	sp, #12
 800c400:	2301      	movs	r3, #1
 800c402:	2100      	movs	r1, #0
 800c404:	f10d 0007 	add.w	r0, sp, #7
 800c408:	f88d 3007 	strb.w	r3, [sp, #7]
 800c40c:	f004 fe36 	bl	801107c <max_serialized_size_sensor_msgs__msg__Imu>
 800c410:	b003      	add	sp, #12
 800c412:	f85d fb04 	ldr.w	pc, [sp], #4
 800c416:	bf00      	nop

0800c418 <_ImuCalibration_Response__max_serialized_size>:
 800c418:	b508      	push	{r3, lr}
 800c41a:	2101      	movs	r1, #1
 800c41c:	2000      	movs	r0, #0
 800c41e:	f001 fe23 	bl	800e068 <ucdr_alignment>
 800c422:	3001      	adds	r0, #1
 800c424:	bd08      	pop	{r3, pc}
 800c426:	bf00      	nop

0800c428 <_ImuCalibration_Response__cdr_deserialize>:
 800c428:	b109      	cbz	r1, 800c42e <_ImuCalibration_Response__cdr_deserialize+0x6>
 800c42a:	f000 b98f 	b.w	800c74c <ucdr_deserialize_bool>
 800c42e:	4608      	mov	r0, r1
 800c430:	4770      	bx	lr
 800c432:	bf00      	nop

0800c434 <_ImuCalibration_Event__max_serialized_size>:
 800c434:	b500      	push	{lr}
 800c436:	b083      	sub	sp, #12
 800c438:	2301      	movs	r3, #1
 800c43a:	2100      	movs	r1, #0
 800c43c:	f10d 0007 	add.w	r0, sp, #7
 800c440:	f88d 3007 	strb.w	r3, [sp, #7]
 800c444:	f004 ff12 	bl	801126c <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800c448:	b003      	add	sp, #12
 800c44a:	f85d fb04 	ldr.w	pc, [sp], #4
 800c44e:	bf00      	nop

0800c450 <_ImuCalibration_Event__cdr_deserialize>:
 800c450:	2900      	cmp	r1, #0
 800c452:	d049      	beq.n	800c4e8 <_ImuCalibration_Event__cdr_deserialize+0x98>
 800c454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c458:	b082      	sub	sp, #8
 800c45a:	4607      	mov	r7, r0
 800c45c:	460c      	mov	r4, r1
 800c45e:	f004 ff25 	bl	80112ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c462:	6843      	ldr	r3, [r0, #4]
 800c464:	4621      	mov	r1, r4
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	4638      	mov	r0, r7
 800c46a:	4798      	blx	r3
 800c46c:	a901      	add	r1, sp, #4
 800c46e:	4638      	mov	r0, r7
 800c470:	f000 fcca 	bl	800ce08 <ucdr_deserialize_uint32_t>
 800c474:	9b01      	ldr	r3, [sp, #4]
 800c476:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800c478:	429a      	cmp	r2, r3
 800c47a:	d331      	bcc.n	800c4e0 <_ImuCalibration_Event__cdr_deserialize+0x90>
 800c47c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c47e:	b19b      	cbz	r3, 800c4a8 <_ImuCalibration_Event__cdr_deserialize+0x58>
 800c480:	2500      	movs	r5, #0
 800c482:	f8df 806c 	ldr.w	r8, [pc, #108]	@ 800c4f0 <_ImuCalibration_Event__cdr_deserialize+0xa0>
 800c486:	462e      	mov	r6, r5
 800c488:	e005      	b.n	800c496 <_ImuCalibration_Event__cdr_deserialize+0x46>
 800c48a:	9b01      	ldr	r3, [sp, #4]
 800c48c:	3601      	adds	r6, #1
 800c48e:	42b3      	cmp	r3, r6
 800c490:	f505 75a0 	add.w	r5, r5, #320	@ 0x140
 800c494:	d908      	bls.n	800c4a8 <_ImuCalibration_Event__cdr_deserialize+0x58>
 800c496:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800c498:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c49c:	4429      	add	r1, r5
 800c49e:	68db      	ldr	r3, [r3, #12]
 800c4a0:	4638      	mov	r0, r7
 800c4a2:	4798      	blx	r3
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	d1f0      	bne.n	800c48a <_ImuCalibration_Event__cdr_deserialize+0x3a>
 800c4a8:	a901      	add	r1, sp, #4
 800c4aa:	4638      	mov	r0, r7
 800c4ac:	f000 fcac 	bl	800ce08 <ucdr_deserialize_uint32_t>
 800c4b0:	9b01      	ldr	r3, [sp, #4]
 800c4b2:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d313      	bcc.n	800c4e0 <_ImuCalibration_Event__cdr_deserialize+0x90>
 800c4b8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c4ba:	b173      	cbz	r3, 800c4da <_ImuCalibration_Event__cdr_deserialize+0x8a>
 800c4bc:	4e0b      	ldr	r6, [pc, #44]	@ (800c4ec <_ImuCalibration_Event__cdr_deserialize+0x9c>)
 800c4be:	2500      	movs	r5, #0
 800c4c0:	e002      	b.n	800c4c8 <_ImuCalibration_Event__cdr_deserialize+0x78>
 800c4c2:	9b01      	ldr	r3, [sp, #4]
 800c4c4:	42ab      	cmp	r3, r5
 800c4c6:	d908      	bls.n	800c4da <_ImuCalibration_Event__cdr_deserialize+0x8a>
 800c4c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c4ca:	6873      	ldr	r3, [r6, #4]
 800c4cc:	4429      	add	r1, r5
 800c4ce:	68db      	ldr	r3, [r3, #12]
 800c4d0:	4638      	mov	r0, r7
 800c4d2:	4798      	blx	r3
 800c4d4:	3501      	adds	r5, #1
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	d1f3      	bne.n	800c4c2 <_ImuCalibration_Event__cdr_deserialize+0x72>
 800c4da:	b002      	add	sp, #8
 800c4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4e0:	2000      	movs	r0, #0
 800c4e2:	b002      	add	sp, #8
 800c4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4e8:	2000      	movs	r0, #0
 800c4ea:	4770      	bx	lr
 800c4ec:	20000540 	.word	0x20000540
 800c4f0:	20000574 	.word	0x20000574

0800c4f4 <_ImuCalibration_Event__cdr_serialize>:
 800c4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4f8:	2800      	cmp	r0, #0
 800c4fa:	d03a      	beq.n	800c572 <_ImuCalibration_Event__cdr_serialize+0x7e>
 800c4fc:	460e      	mov	r6, r1
 800c4fe:	4605      	mov	r5, r0
 800c500:	f004 fed4 	bl	80112ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c504:	6843      	ldr	r3, [r0, #4]
 800c506:	4631      	mov	r1, r6
 800c508:	689b      	ldr	r3, [r3, #8]
 800c50a:	4628      	mov	r0, r5
 800c50c:	4798      	blx	r3
 800c50e:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 800c510:	4630      	mov	r0, r6
 800c512:	4639      	mov	r1, r7
 800c514:	f000 fb4e 	bl	800cbb4 <ucdr_serialize_uint32_t>
 800c518:	b198      	cbz	r0, 800c542 <_ImuCalibration_Event__cdr_serialize+0x4e>
 800c51a:	b197      	cbz	r7, 800c542 <_ImuCalibration_Event__cdr_serialize+0x4e>
 800c51c:	f8df 805c 	ldr.w	r8, [pc, #92]	@ 800c57c <_ImuCalibration_Event__cdr_serialize+0x88>
 800c520:	2400      	movs	r4, #0
 800c522:	e002      	b.n	800c52a <_ImuCalibration_Event__cdr_serialize+0x36>
 800c524:	3401      	adds	r4, #1
 800c526:	42a7      	cmp	r7, r4
 800c528:	d00b      	beq.n	800c542 <_ImuCalibration_Event__cdr_serialize+0x4e>
 800c52a:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800c52c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800c530:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800c534:	6892      	ldr	r2, [r2, #8]
 800c536:	4631      	mov	r1, r6
 800c538:	eb00 1083 	add.w	r0, r0, r3, lsl #6
 800c53c:	4790      	blx	r2
 800c53e:	2800      	cmp	r0, #0
 800c540:	d1f0      	bne.n	800c524 <_ImuCalibration_Event__cdr_serialize+0x30>
 800c542:	6baf      	ldr	r7, [r5, #56]	@ 0x38
 800c544:	4630      	mov	r0, r6
 800c546:	4639      	mov	r1, r7
 800c548:	f000 fb34 	bl	800cbb4 <ucdr_serialize_uint32_t>
 800c54c:	4680      	mov	r8, r0
 800c54e:	b180      	cbz	r0, 800c572 <_ImuCalibration_Event__cdr_serialize+0x7e>
 800c550:	b18f      	cbz	r7, 800c576 <_ImuCalibration_Event__cdr_serialize+0x82>
 800c552:	f8df 902c 	ldr.w	r9, [pc, #44]	@ 800c580 <_ImuCalibration_Event__cdr_serialize+0x8c>
 800c556:	2400      	movs	r4, #0
 800c558:	e002      	b.n	800c560 <_ImuCalibration_Event__cdr_serialize+0x6c>
 800c55a:	3401      	adds	r4, #1
 800c55c:	42a7      	cmp	r7, r4
 800c55e:	d00a      	beq.n	800c576 <_ImuCalibration_Event__cdr_serialize+0x82>
 800c560:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800c562:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c566:	4631      	mov	r1, r6
 800c568:	689b      	ldr	r3, [r3, #8]
 800c56a:	4420      	add	r0, r4
 800c56c:	4798      	blx	r3
 800c56e:	2800      	cmp	r0, #0
 800c570:	d1f3      	bne.n	800c55a <_ImuCalibration_Event__cdr_serialize+0x66>
 800c572:	f04f 0800 	mov.w	r8, #0
 800c576:	4640      	mov	r0, r8
 800c578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c57c:	20000574 	.word	0x20000574
 800c580:	20000540 	.word	0x20000540

0800c584 <_ImuCalibration_Request__get_serialized_size>:
 800c584:	b110      	cbz	r0, 800c58c <_ImuCalibration_Request__get_serialized_size+0x8>
 800c586:	2100      	movs	r1, #0
 800c588:	f004 bcfa 	b.w	8010f80 <get_serialized_size_sensor_msgs__msg__Imu>
 800c58c:	4770      	bx	lr
 800c58e:	bf00      	nop

0800c590 <_ImuCalibration_Request__cdr_deserialize>:
 800c590:	b570      	push	{r4, r5, r6, lr}
 800c592:	460c      	mov	r4, r1
 800c594:	b149      	cbz	r1, 800c5aa <_ImuCalibration_Request__cdr_deserialize+0x1a>
 800c596:	4605      	mov	r5, r0
 800c598:	f004 fda8 	bl	80110ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800c59c:	6843      	ldr	r3, [r0, #4]
 800c59e:	4621      	mov	r1, r4
 800c5a0:	4628      	mov	r0, r5
 800c5a2:	68db      	ldr	r3, [r3, #12]
 800c5a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c5a8:	4718      	bx	r3
 800c5aa:	4608      	mov	r0, r1
 800c5ac:	bd70      	pop	{r4, r5, r6, pc}
 800c5ae:	bf00      	nop

0800c5b0 <_ImuCalibration_Request__cdr_serialize>:
 800c5b0:	b158      	cbz	r0, 800c5ca <_ImuCalibration_Request__cdr_serialize+0x1a>
 800c5b2:	b570      	push	{r4, r5, r6, lr}
 800c5b4:	460d      	mov	r5, r1
 800c5b6:	4604      	mov	r4, r0
 800c5b8:	f004 fd98 	bl	80110ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800c5bc:	6843      	ldr	r3, [r0, #4]
 800c5be:	4629      	mov	r1, r5
 800c5c0:	4620      	mov	r0, r4
 800c5c2:	689b      	ldr	r3, [r3, #8]
 800c5c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c5c8:	4718      	bx	r3
 800c5ca:	4770      	bx	lr

0800c5cc <get_serialized_size_imu_interfaces__srv__ImuCalibration_Response>:
 800c5cc:	b508      	push	{r3, lr}
 800c5ce:	b120      	cbz	r0, 800c5da <get_serialized_size_imu_interfaces__srv__ImuCalibration_Response+0xe>
 800c5d0:	4608      	mov	r0, r1
 800c5d2:	2101      	movs	r1, #1
 800c5d4:	f001 fd48 	bl	800e068 <ucdr_alignment>
 800c5d8:	3001      	adds	r0, #1
 800c5da:	bd08      	pop	{r3, pc}

0800c5dc <_ImuCalibration_Response__cdr_serialize>:
 800c5dc:	460a      	mov	r2, r1
 800c5de:	b118      	cbz	r0, 800c5e8 <_ImuCalibration_Response__cdr_serialize+0xc>
 800c5e0:	7801      	ldrb	r1, [r0, #0]
 800c5e2:	4610      	mov	r0, r2
 800c5e4:	f000 b89c 	b.w	800c720 <ucdr_serialize_bool>
 800c5e8:	4770      	bx	lr
 800c5ea:	bf00      	nop

0800c5ec <get_serialized_size_imu_interfaces__srv__ImuCalibration_Event.part.0>:
 800c5ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5f0:	4689      	mov	r9, r1
 800c5f2:	4607      	mov	r7, r0
 800c5f4:	f004 fda6 	bl	8011144 <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800c5f8:	eb09 0400 	add.w	r4, r9, r0
 800c5fc:	2104      	movs	r1, #4
 800c5fe:	4620      	mov	r0, r4
 800c600:	f8d7 802c 	ldr.w	r8, [r7, #44]	@ 0x2c
 800c604:	f001 fd30 	bl	800e068 <ucdr_alignment>
 800c608:	1d06      	adds	r6, r0, #4
 800c60a:	4426      	add	r6, r4
 800c60c:	f1b8 0f00 	cmp.w	r8, #0
 800c610:	d01a      	beq.n	800c648 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Event.part.0+0x5c>
 800c612:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c698 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Event.part.0+0xac>
 800c616:	2500      	movs	r5, #0
 800c618:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c61a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c61e:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 800c622:	4631      	mov	r1, r6
 800c624:	695b      	ldr	r3, [r3, #20]
 800c626:	eb02 1080 	add.w	r0, r2, r0, lsl #6
 800c62a:	4798      	blx	r3
 800c62c:	2804      	cmp	r0, #4
 800c62e:	4601      	mov	r1, r0
 800c630:	4604      	mov	r4, r0
 800c632:	bf28      	it	cs
 800c634:	2104      	movcs	r1, #4
 800c636:	4630      	mov	r0, r6
 800c638:	f001 fd16 	bl	800e068 <ucdr_alignment>
 800c63c:	3501      	adds	r5, #1
 800c63e:	4434      	add	r4, r6
 800c640:	45a8      	cmp	r8, r5
 800c642:	eb00 0604 	add.w	r6, r0, r4
 800c646:	d1e7      	bne.n	800c618 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Event.part.0+0x2c>
 800c648:	2104      	movs	r1, #4
 800c64a:	4630      	mov	r0, r6
 800c64c:	f8d7 8038 	ldr.w	r8, [r7, #56]	@ 0x38
 800c650:	f001 fd0a 	bl	800e068 <ucdr_alignment>
 800c654:	1985      	adds	r5, r0, r6
 800c656:	3504      	adds	r5, #4
 800c658:	f1b8 0f00 	cmp.w	r8, #0
 800c65c:	d017      	beq.n	800c68e <get_serialized_size_imu_interfaces__srv__ImuCalibration_Event.part.0+0xa2>
 800c65e:	f8df a03c 	ldr.w	sl, [pc, #60]	@ 800c69c <get_serialized_size_imu_interfaces__srv__ImuCalibration_Event.part.0+0xb0>
 800c662:	2600      	movs	r6, #0
 800c664:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c666:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c66a:	4629      	mov	r1, r5
 800c66c:	695b      	ldr	r3, [r3, #20]
 800c66e:	4430      	add	r0, r6
 800c670:	4798      	blx	r3
 800c672:	2804      	cmp	r0, #4
 800c674:	4601      	mov	r1, r0
 800c676:	4604      	mov	r4, r0
 800c678:	bf28      	it	cs
 800c67a:	2104      	movcs	r1, #4
 800c67c:	4628      	mov	r0, r5
 800c67e:	f001 fcf3 	bl	800e068 <ucdr_alignment>
 800c682:	3601      	adds	r6, #1
 800c684:	442c      	add	r4, r5
 800c686:	45b0      	cmp	r8, r6
 800c688:	eb00 0504 	add.w	r5, r0, r4
 800c68c:	d1ea      	bne.n	800c664 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Event.part.0+0x78>
 800c68e:	eba5 0009 	sub.w	r0, r5, r9
 800c692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c696:	bf00      	nop
 800c698:	20000574 	.word	0x20000574
 800c69c:	20000540 	.word	0x20000540

0800c6a0 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Event>:
 800c6a0:	b108      	cbz	r0, 800c6a6 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Event+0x6>
 800c6a2:	f7ff bfa3 	b.w	800c5ec <get_serialized_size_imu_interfaces__srv__ImuCalibration_Event.part.0>
 800c6a6:	4770      	bx	lr

0800c6a8 <_ImuCalibration_Event__get_serialized_size>:
 800c6a8:	b110      	cbz	r0, 800c6b0 <_ImuCalibration_Event__get_serialized_size+0x8>
 800c6aa:	2100      	movs	r1, #0
 800c6ac:	f7ff bf9e 	b.w	800c5ec <get_serialized_size_imu_interfaces__srv__ImuCalibration_Event.part.0>
 800c6b0:	4770      	bx	lr
 800c6b2:	bf00      	nop

0800c6b4 <_ImuCalibration_Response__get_serialized_size>:
 800c6b4:	b130      	cbz	r0, 800c6c4 <_ImuCalibration_Response__get_serialized_size+0x10>
 800c6b6:	b508      	push	{r3, lr}
 800c6b8:	2101      	movs	r1, #1
 800c6ba:	2000      	movs	r0, #0
 800c6bc:	f001 fcd4 	bl	800e068 <ucdr_alignment>
 800c6c0:	3001      	adds	r0, #1
 800c6c2:	bd08      	pop	{r3, pc}
 800c6c4:	4770      	bx	lr
 800c6c6:	bf00      	nop

0800c6c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event>:
 800c6c8:	4800      	ldr	r0, [pc, #0]	@ (800c6cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Event+0x4>)
 800c6ca:	4770      	bx	lr
 800c6cc:	2000050c 	.word	0x2000050c

0800c6d0 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800c6d0:	4800      	ldr	r0, [pc, #0]	@ (800c6d4 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x4>)
 800c6d2:	4770      	bx	lr
 800c6d4:	200004d0 	.word	0x200004d0

0800c6d8 <micro_ros_string_utilities_init>:
 800c6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6dc:	b086      	sub	sp, #24
 800c6de:	460f      	mov	r7, r1
 800c6e0:	4604      	mov	r4, r0
 800c6e2:	a801      	add	r0, sp, #4
 800c6e4:	f002 fe86 	bl	800f3f4 <rcutils_get_default_allocator>
 800c6e8:	4638      	mov	r0, r7
 800c6ea:	f7f3 fdf9 	bl	80002e0 <strlen>
 800c6ee:	f100 0801 	add.w	r8, r0, #1
 800c6f2:	9b01      	ldr	r3, [sp, #4]
 800c6f4:	9905      	ldr	r1, [sp, #20]
 800c6f6:	4605      	mov	r5, r0
 800c6f8:	4640      	mov	r0, r8
 800c6fa:	4798      	blx	r3
 800c6fc:	4642      	mov	r2, r8
 800c6fe:	4606      	mov	r6, r0
 800c700:	2100      	movs	r1, #0
 800c702:	f011 fa19 	bl	801db38 <memset>
 800c706:	462a      	mov	r2, r5
 800c708:	4639      	mov	r1, r7
 800c70a:	4630      	mov	r0, r6
 800c70c:	f011 faef 	bl	801dcee <memcpy>
 800c710:	4620      	mov	r0, r4
 800c712:	e9c4 6500 	strd	r6, r5, [r4]
 800c716:	f8c4 8008 	str.w	r8, [r4, #8]
 800c71a:	b006      	add	sp, #24
 800c71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c720 <ucdr_serialize_bool>:
 800c720:	b538      	push	{r3, r4, r5, lr}
 800c722:	460d      	mov	r5, r1
 800c724:	2101      	movs	r1, #1
 800c726:	4604      	mov	r4, r0
 800c728:	f001 fc52 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800c72c:	b148      	cbz	r0, 800c742 <ucdr_serialize_bool+0x22>
 800c72e:	68a3      	ldr	r3, [r4, #8]
 800c730:	701d      	strb	r5, [r3, #0]
 800c732:	68a2      	ldr	r2, [r4, #8]
 800c734:	6923      	ldr	r3, [r4, #16]
 800c736:	2101      	movs	r1, #1
 800c738:	440a      	add	r2, r1
 800c73a:	440b      	add	r3, r1
 800c73c:	60a2      	str	r2, [r4, #8]
 800c73e:	6123      	str	r3, [r4, #16]
 800c740:	7561      	strb	r1, [r4, #21]
 800c742:	7da0      	ldrb	r0, [r4, #22]
 800c744:	f080 0001 	eor.w	r0, r0, #1
 800c748:	bd38      	pop	{r3, r4, r5, pc}
 800c74a:	bf00      	nop

0800c74c <ucdr_deserialize_bool>:
 800c74c:	b538      	push	{r3, r4, r5, lr}
 800c74e:	460d      	mov	r5, r1
 800c750:	2101      	movs	r1, #1
 800c752:	4604      	mov	r4, r0
 800c754:	f001 fc3c 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800c758:	b160      	cbz	r0, 800c774 <ucdr_deserialize_bool+0x28>
 800c75a:	68a2      	ldr	r2, [r4, #8]
 800c75c:	6923      	ldr	r3, [r4, #16]
 800c75e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800c762:	3900      	subs	r1, #0
 800c764:	bf18      	it	ne
 800c766:	2101      	movne	r1, #1
 800c768:	7029      	strb	r1, [r5, #0]
 800c76a:	3301      	adds	r3, #1
 800c76c:	2101      	movs	r1, #1
 800c76e:	60a2      	str	r2, [r4, #8]
 800c770:	6123      	str	r3, [r4, #16]
 800c772:	7561      	strb	r1, [r4, #21]
 800c774:	7da0      	ldrb	r0, [r4, #22]
 800c776:	f080 0001 	eor.w	r0, r0, #1
 800c77a:	bd38      	pop	{r3, r4, r5, pc}

0800c77c <ucdr_serialize_uint8_t>:
 800c77c:	b538      	push	{r3, r4, r5, lr}
 800c77e:	460d      	mov	r5, r1
 800c780:	2101      	movs	r1, #1
 800c782:	4604      	mov	r4, r0
 800c784:	f001 fc24 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800c788:	b148      	cbz	r0, 800c79e <ucdr_serialize_uint8_t+0x22>
 800c78a:	68a3      	ldr	r3, [r4, #8]
 800c78c:	701d      	strb	r5, [r3, #0]
 800c78e:	68a2      	ldr	r2, [r4, #8]
 800c790:	6923      	ldr	r3, [r4, #16]
 800c792:	2101      	movs	r1, #1
 800c794:	440a      	add	r2, r1
 800c796:	440b      	add	r3, r1
 800c798:	60a2      	str	r2, [r4, #8]
 800c79a:	6123      	str	r3, [r4, #16]
 800c79c:	7561      	strb	r1, [r4, #21]
 800c79e:	7da0      	ldrb	r0, [r4, #22]
 800c7a0:	f080 0001 	eor.w	r0, r0, #1
 800c7a4:	bd38      	pop	{r3, r4, r5, pc}
 800c7a6:	bf00      	nop

0800c7a8 <ucdr_deserialize_uint8_t>:
 800c7a8:	b538      	push	{r3, r4, r5, lr}
 800c7aa:	460d      	mov	r5, r1
 800c7ac:	2101      	movs	r1, #1
 800c7ae:	4604      	mov	r4, r0
 800c7b0:	f001 fc0e 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800c7b4:	b150      	cbz	r0, 800c7cc <ucdr_deserialize_uint8_t+0x24>
 800c7b6:	68a3      	ldr	r3, [r4, #8]
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	702b      	strb	r3, [r5, #0]
 800c7bc:	68a2      	ldr	r2, [r4, #8]
 800c7be:	6923      	ldr	r3, [r4, #16]
 800c7c0:	2101      	movs	r1, #1
 800c7c2:	440a      	add	r2, r1
 800c7c4:	440b      	add	r3, r1
 800c7c6:	60a2      	str	r2, [r4, #8]
 800c7c8:	6123      	str	r3, [r4, #16]
 800c7ca:	7561      	strb	r1, [r4, #21]
 800c7cc:	7da0      	ldrb	r0, [r4, #22]
 800c7ce:	f080 0001 	eor.w	r0, r0, #1
 800c7d2:	bd38      	pop	{r3, r4, r5, pc}

0800c7d4 <ucdr_serialize_uint16_t>:
 800c7d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7d8:	b082      	sub	sp, #8
 800c7da:	460b      	mov	r3, r1
 800c7dc:	2102      	movs	r1, #2
 800c7de:	4604      	mov	r4, r0
 800c7e0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c7e4:	f001 fc48 	bl	800e078 <ucdr_buffer_alignment>
 800c7e8:	4601      	mov	r1, r0
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	7d67      	ldrb	r7, [r4, #21]
 800c7ee:	f001 fc87 	bl	800e100 <ucdr_advance_buffer>
 800c7f2:	2102      	movs	r1, #2
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	f001 fbdf 	bl	800dfb8 <ucdr_check_buffer_available_for>
 800c7fa:	b1c0      	cbz	r0, 800c82e <ucdr_serialize_uint16_t+0x5a>
 800c7fc:	7d22      	ldrb	r2, [r4, #20]
 800c7fe:	68a3      	ldr	r3, [r4, #8]
 800c800:	2a01      	cmp	r2, #1
 800c802:	d04e      	beq.n	800c8a2 <ucdr_serialize_uint16_t+0xce>
 800c804:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c808:	701a      	strb	r2, [r3, #0]
 800c80a:	68a3      	ldr	r3, [r4, #8]
 800c80c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c810:	705a      	strb	r2, [r3, #1]
 800c812:	68a2      	ldr	r2, [r4, #8]
 800c814:	6923      	ldr	r3, [r4, #16]
 800c816:	3202      	adds	r2, #2
 800c818:	3302      	adds	r3, #2
 800c81a:	2102      	movs	r1, #2
 800c81c:	60a2      	str	r2, [r4, #8]
 800c81e:	6123      	str	r3, [r4, #16]
 800c820:	7561      	strb	r1, [r4, #21]
 800c822:	7da0      	ldrb	r0, [r4, #22]
 800c824:	f080 0001 	eor.w	r0, r0, #1
 800c828:	b002      	add	sp, #8
 800c82a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c82e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c832:	42ab      	cmp	r3, r5
 800c834:	d923      	bls.n	800c87e <ucdr_serialize_uint16_t+0xaa>
 800c836:	1b5e      	subs	r6, r3, r5
 800c838:	60a3      	str	r3, [r4, #8]
 800c83a:	6923      	ldr	r3, [r4, #16]
 800c83c:	f1c6 0802 	rsb	r8, r6, #2
 800c840:	4433      	add	r3, r6
 800c842:	6123      	str	r3, [r4, #16]
 800c844:	4641      	mov	r1, r8
 800c846:	4620      	mov	r0, r4
 800c848:	f001 fbc2 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800c84c:	b368      	cbz	r0, 800c8aa <ucdr_serialize_uint16_t+0xd6>
 800c84e:	7d23      	ldrb	r3, [r4, #20]
 800c850:	2b01      	cmp	r3, #1
 800c852:	d03b      	beq.n	800c8cc <ucdr_serialize_uint16_t+0xf8>
 800c854:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c858:	702b      	strb	r3, [r5, #0]
 800c85a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c85e:	706b      	strb	r3, [r5, #1]
 800c860:	6923      	ldr	r3, [r4, #16]
 800c862:	68a2      	ldr	r2, [r4, #8]
 800c864:	7da0      	ldrb	r0, [r4, #22]
 800c866:	3302      	adds	r3, #2
 800c868:	4442      	add	r2, r8
 800c86a:	1b9b      	subs	r3, r3, r6
 800c86c:	2102      	movs	r1, #2
 800c86e:	f080 0001 	eor.w	r0, r0, #1
 800c872:	60a2      	str	r2, [r4, #8]
 800c874:	6123      	str	r3, [r4, #16]
 800c876:	7561      	strb	r1, [r4, #21]
 800c878:	b002      	add	sp, #8
 800c87a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c87e:	2102      	movs	r1, #2
 800c880:	4620      	mov	r0, r4
 800c882:	f001 fba5 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800c886:	2800      	cmp	r0, #0
 800c888:	d0cb      	beq.n	800c822 <ucdr_serialize_uint16_t+0x4e>
 800c88a:	7d23      	ldrb	r3, [r4, #20]
 800c88c:	68a2      	ldr	r2, [r4, #8]
 800c88e:	2b01      	cmp	r3, #1
 800c890:	d018      	beq.n	800c8c4 <ucdr_serialize_uint16_t+0xf0>
 800c892:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c896:	7013      	strb	r3, [r2, #0]
 800c898:	68a3      	ldr	r3, [r4, #8]
 800c89a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c89e:	705a      	strb	r2, [r3, #1]
 800c8a0:	e7b7      	b.n	800c812 <ucdr_serialize_uint16_t+0x3e>
 800c8a2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c8a6:	801a      	strh	r2, [r3, #0]
 800c8a8:	e7b3      	b.n	800c812 <ucdr_serialize_uint16_t+0x3e>
 800c8aa:	68a2      	ldr	r2, [r4, #8]
 800c8ac:	6923      	ldr	r3, [r4, #16]
 800c8ae:	7da0      	ldrb	r0, [r4, #22]
 800c8b0:	7567      	strb	r7, [r4, #21]
 800c8b2:	1b92      	subs	r2, r2, r6
 800c8b4:	1b9b      	subs	r3, r3, r6
 800c8b6:	f080 0001 	eor.w	r0, r0, #1
 800c8ba:	60a2      	str	r2, [r4, #8]
 800c8bc:	6123      	str	r3, [r4, #16]
 800c8be:	b002      	add	sp, #8
 800c8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800c8c8:	8013      	strh	r3, [r2, #0]
 800c8ca:	e7a2      	b.n	800c812 <ucdr_serialize_uint16_t+0x3e>
 800c8cc:	4628      	mov	r0, r5
 800c8ce:	f10d 0506 	add.w	r5, sp, #6
 800c8d2:	4632      	mov	r2, r6
 800c8d4:	4629      	mov	r1, r5
 800c8d6:	f011 fa0a 	bl	801dcee <memcpy>
 800c8da:	68a0      	ldr	r0, [r4, #8]
 800c8dc:	4642      	mov	r2, r8
 800c8de:	19a9      	adds	r1, r5, r6
 800c8e0:	f011 fa05 	bl	801dcee <memcpy>
 800c8e4:	e7bc      	b.n	800c860 <ucdr_serialize_uint16_t+0x8c>
 800c8e6:	bf00      	nop

0800c8e8 <ucdr_serialize_endian_uint16_t>:
 800c8e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8ec:	b083      	sub	sp, #12
 800c8ee:	460d      	mov	r5, r1
 800c8f0:	2102      	movs	r1, #2
 800c8f2:	4604      	mov	r4, r0
 800c8f4:	f8ad 2006 	strh.w	r2, [sp, #6]
 800c8f8:	f001 fbbe 	bl	800e078 <ucdr_buffer_alignment>
 800c8fc:	4601      	mov	r1, r0
 800c8fe:	4620      	mov	r0, r4
 800c900:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c904:	f001 fbfc 	bl	800e100 <ucdr_advance_buffer>
 800c908:	2102      	movs	r1, #2
 800c90a:	4620      	mov	r0, r4
 800c90c:	f001 fb54 	bl	800dfb8 <ucdr_check_buffer_available_for>
 800c910:	bb60      	cbnz	r0, 800c96c <ucdr_serialize_endian_uint16_t+0x84>
 800c912:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c916:	42be      	cmp	r6, r7
 800c918:	d923      	bls.n	800c962 <ucdr_serialize_endian_uint16_t+0x7a>
 800c91a:	6923      	ldr	r3, [r4, #16]
 800c91c:	60a6      	str	r6, [r4, #8]
 800c91e:	1bf6      	subs	r6, r6, r7
 800c920:	4433      	add	r3, r6
 800c922:	f1c6 0902 	rsb	r9, r6, #2
 800c926:	6123      	str	r3, [r4, #16]
 800c928:	4649      	mov	r1, r9
 800c92a:	4620      	mov	r0, r4
 800c92c:	f001 fb50 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800c930:	2800      	cmp	r0, #0
 800c932:	d037      	beq.n	800c9a4 <ucdr_serialize_endian_uint16_t+0xbc>
 800c934:	2d01      	cmp	r5, #1
 800c936:	d043      	beq.n	800c9c0 <ucdr_serialize_endian_uint16_t+0xd8>
 800c938:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c93c:	703b      	strb	r3, [r7, #0]
 800c93e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c942:	707b      	strb	r3, [r7, #1]
 800c944:	6923      	ldr	r3, [r4, #16]
 800c946:	68a2      	ldr	r2, [r4, #8]
 800c948:	7da0      	ldrb	r0, [r4, #22]
 800c94a:	3302      	adds	r3, #2
 800c94c:	444a      	add	r2, r9
 800c94e:	1b9b      	subs	r3, r3, r6
 800c950:	2102      	movs	r1, #2
 800c952:	f080 0001 	eor.w	r0, r0, #1
 800c956:	60a2      	str	r2, [r4, #8]
 800c958:	6123      	str	r3, [r4, #16]
 800c95a:	7561      	strb	r1, [r4, #21]
 800c95c:	b003      	add	sp, #12
 800c95e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c962:	2102      	movs	r1, #2
 800c964:	4620      	mov	r0, r4
 800c966:	f001 fb33 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800c96a:	b188      	cbz	r0, 800c990 <ucdr_serialize_endian_uint16_t+0xa8>
 800c96c:	2d01      	cmp	r5, #1
 800c96e:	68a3      	ldr	r3, [r4, #8]
 800c970:	d014      	beq.n	800c99c <ucdr_serialize_endian_uint16_t+0xb4>
 800c972:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c976:	701a      	strb	r2, [r3, #0]
 800c978:	68a3      	ldr	r3, [r4, #8]
 800c97a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c97e:	705a      	strb	r2, [r3, #1]
 800c980:	68a2      	ldr	r2, [r4, #8]
 800c982:	6923      	ldr	r3, [r4, #16]
 800c984:	3202      	adds	r2, #2
 800c986:	3302      	adds	r3, #2
 800c988:	2102      	movs	r1, #2
 800c98a:	60a2      	str	r2, [r4, #8]
 800c98c:	6123      	str	r3, [r4, #16]
 800c98e:	7561      	strb	r1, [r4, #21]
 800c990:	7da0      	ldrb	r0, [r4, #22]
 800c992:	f080 0001 	eor.w	r0, r0, #1
 800c996:	b003      	add	sp, #12
 800c998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c99c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c9a0:	801a      	strh	r2, [r3, #0]
 800c9a2:	e7ed      	b.n	800c980 <ucdr_serialize_endian_uint16_t+0x98>
 800c9a4:	68a2      	ldr	r2, [r4, #8]
 800c9a6:	6923      	ldr	r3, [r4, #16]
 800c9a8:	7da0      	ldrb	r0, [r4, #22]
 800c9aa:	f884 8015 	strb.w	r8, [r4, #21]
 800c9ae:	1b92      	subs	r2, r2, r6
 800c9b0:	1b9b      	subs	r3, r3, r6
 800c9b2:	f080 0001 	eor.w	r0, r0, #1
 800c9b6:	60a2      	str	r2, [r4, #8]
 800c9b8:	6123      	str	r3, [r4, #16]
 800c9ba:	b003      	add	sp, #12
 800c9bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9c0:	f10d 0506 	add.w	r5, sp, #6
 800c9c4:	4632      	mov	r2, r6
 800c9c6:	4629      	mov	r1, r5
 800c9c8:	4638      	mov	r0, r7
 800c9ca:	f011 f990 	bl	801dcee <memcpy>
 800c9ce:	68a0      	ldr	r0, [r4, #8]
 800c9d0:	464a      	mov	r2, r9
 800c9d2:	19a9      	adds	r1, r5, r6
 800c9d4:	f011 f98b 	bl	801dcee <memcpy>
 800c9d8:	e7b4      	b.n	800c944 <ucdr_serialize_endian_uint16_t+0x5c>
 800c9da:	bf00      	nop

0800c9dc <ucdr_deserialize_uint16_t>:
 800c9dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9e0:	460d      	mov	r5, r1
 800c9e2:	2102      	movs	r1, #2
 800c9e4:	4604      	mov	r4, r0
 800c9e6:	f001 fb47 	bl	800e078 <ucdr_buffer_alignment>
 800c9ea:	4601      	mov	r1, r0
 800c9ec:	4620      	mov	r0, r4
 800c9ee:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c9f2:	f001 fb85 	bl	800e100 <ucdr_advance_buffer>
 800c9f6:	2102      	movs	r1, #2
 800c9f8:	4620      	mov	r0, r4
 800c9fa:	f001 fadd 	bl	800dfb8 <ucdr_check_buffer_available_for>
 800c9fe:	b1a8      	cbz	r0, 800ca2c <ucdr_deserialize_uint16_t+0x50>
 800ca00:	7d22      	ldrb	r2, [r4, #20]
 800ca02:	68a3      	ldr	r3, [r4, #8]
 800ca04:	2a01      	cmp	r2, #1
 800ca06:	d046      	beq.n	800ca96 <ucdr_deserialize_uint16_t+0xba>
 800ca08:	785b      	ldrb	r3, [r3, #1]
 800ca0a:	702b      	strb	r3, [r5, #0]
 800ca0c:	68a3      	ldr	r3, [r4, #8]
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	706b      	strb	r3, [r5, #1]
 800ca12:	68a2      	ldr	r2, [r4, #8]
 800ca14:	6923      	ldr	r3, [r4, #16]
 800ca16:	3202      	adds	r2, #2
 800ca18:	3302      	adds	r3, #2
 800ca1a:	2102      	movs	r1, #2
 800ca1c:	60a2      	str	r2, [r4, #8]
 800ca1e:	6123      	str	r3, [r4, #16]
 800ca20:	7561      	strb	r1, [r4, #21]
 800ca22:	7da0      	ldrb	r0, [r4, #22]
 800ca24:	f080 0001 	eor.w	r0, r0, #1
 800ca28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca2c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ca30:	42be      	cmp	r6, r7
 800ca32:	d920      	bls.n	800ca76 <ucdr_deserialize_uint16_t+0x9a>
 800ca34:	6923      	ldr	r3, [r4, #16]
 800ca36:	60a6      	str	r6, [r4, #8]
 800ca38:	1bf6      	subs	r6, r6, r7
 800ca3a:	4433      	add	r3, r6
 800ca3c:	f1c6 0902 	rsb	r9, r6, #2
 800ca40:	6123      	str	r3, [r4, #16]
 800ca42:	4649      	mov	r1, r9
 800ca44:	4620      	mov	r0, r4
 800ca46:	f001 fac3 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800ca4a:	b338      	cbz	r0, 800ca9c <ucdr_deserialize_uint16_t+0xc0>
 800ca4c:	7d23      	ldrb	r3, [r4, #20]
 800ca4e:	2b01      	cmp	r3, #1
 800ca50:	d034      	beq.n	800cabc <ucdr_deserialize_uint16_t+0xe0>
 800ca52:	787b      	ldrb	r3, [r7, #1]
 800ca54:	702b      	strb	r3, [r5, #0]
 800ca56:	783b      	ldrb	r3, [r7, #0]
 800ca58:	706b      	strb	r3, [r5, #1]
 800ca5a:	6923      	ldr	r3, [r4, #16]
 800ca5c:	68a2      	ldr	r2, [r4, #8]
 800ca5e:	7da0      	ldrb	r0, [r4, #22]
 800ca60:	2102      	movs	r1, #2
 800ca62:	3302      	adds	r3, #2
 800ca64:	444a      	add	r2, r9
 800ca66:	1b9b      	subs	r3, r3, r6
 800ca68:	7561      	strb	r1, [r4, #21]
 800ca6a:	60a2      	str	r2, [r4, #8]
 800ca6c:	6123      	str	r3, [r4, #16]
 800ca6e:	f080 0001 	eor.w	r0, r0, #1
 800ca72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca76:	2102      	movs	r1, #2
 800ca78:	4620      	mov	r0, r4
 800ca7a:	f001 faa9 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	d0cf      	beq.n	800ca22 <ucdr_deserialize_uint16_t+0x46>
 800ca82:	7d23      	ldrb	r3, [r4, #20]
 800ca84:	68a2      	ldr	r2, [r4, #8]
 800ca86:	2b01      	cmp	r3, #1
 800ca88:	d015      	beq.n	800cab6 <ucdr_deserialize_uint16_t+0xda>
 800ca8a:	7853      	ldrb	r3, [r2, #1]
 800ca8c:	702b      	strb	r3, [r5, #0]
 800ca8e:	68a3      	ldr	r3, [r4, #8]
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	706b      	strb	r3, [r5, #1]
 800ca94:	e7bd      	b.n	800ca12 <ucdr_deserialize_uint16_t+0x36>
 800ca96:	881b      	ldrh	r3, [r3, #0]
 800ca98:	802b      	strh	r3, [r5, #0]
 800ca9a:	e7ba      	b.n	800ca12 <ucdr_deserialize_uint16_t+0x36>
 800ca9c:	68a2      	ldr	r2, [r4, #8]
 800ca9e:	6923      	ldr	r3, [r4, #16]
 800caa0:	7da0      	ldrb	r0, [r4, #22]
 800caa2:	f884 8015 	strb.w	r8, [r4, #21]
 800caa6:	1b92      	subs	r2, r2, r6
 800caa8:	1b9b      	subs	r3, r3, r6
 800caaa:	60a2      	str	r2, [r4, #8]
 800caac:	6123      	str	r3, [r4, #16]
 800caae:	f080 0001 	eor.w	r0, r0, #1
 800cab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cab6:	8813      	ldrh	r3, [r2, #0]
 800cab8:	802b      	strh	r3, [r5, #0]
 800caba:	e7aa      	b.n	800ca12 <ucdr_deserialize_uint16_t+0x36>
 800cabc:	4639      	mov	r1, r7
 800cabe:	4632      	mov	r2, r6
 800cac0:	4628      	mov	r0, r5
 800cac2:	f011 f914 	bl	801dcee <memcpy>
 800cac6:	68a1      	ldr	r1, [r4, #8]
 800cac8:	464a      	mov	r2, r9
 800caca:	19a8      	adds	r0, r5, r6
 800cacc:	f011 f90f 	bl	801dcee <memcpy>
 800cad0:	e7c3      	b.n	800ca5a <ucdr_deserialize_uint16_t+0x7e>
 800cad2:	bf00      	nop

0800cad4 <ucdr_deserialize_endian_uint16_t>:
 800cad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cad8:	460e      	mov	r6, r1
 800cada:	2102      	movs	r1, #2
 800cadc:	4604      	mov	r4, r0
 800cade:	4615      	mov	r5, r2
 800cae0:	f001 faca 	bl	800e078 <ucdr_buffer_alignment>
 800cae4:	4601      	mov	r1, r0
 800cae6:	4620      	mov	r0, r4
 800cae8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800caec:	f001 fb08 	bl	800e100 <ucdr_advance_buffer>
 800caf0:	2102      	movs	r1, #2
 800caf2:	4620      	mov	r0, r4
 800caf4:	f001 fa60 	bl	800dfb8 <ucdr_check_buffer_available_for>
 800caf8:	bb60      	cbnz	r0, 800cb54 <ucdr_deserialize_endian_uint16_t+0x80>
 800cafa:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800cafe:	4547      	cmp	r7, r8
 800cb00:	d923      	bls.n	800cb4a <ucdr_deserialize_endian_uint16_t+0x76>
 800cb02:	6923      	ldr	r3, [r4, #16]
 800cb04:	60a7      	str	r7, [r4, #8]
 800cb06:	eba7 0708 	sub.w	r7, r7, r8
 800cb0a:	443b      	add	r3, r7
 800cb0c:	f1c7 0a02 	rsb	sl, r7, #2
 800cb10:	6123      	str	r3, [r4, #16]
 800cb12:	4651      	mov	r1, sl
 800cb14:	4620      	mov	r0, r4
 800cb16:	f001 fa5b 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800cb1a:	2800      	cmp	r0, #0
 800cb1c:	d032      	beq.n	800cb84 <ucdr_deserialize_endian_uint16_t+0xb0>
 800cb1e:	2e01      	cmp	r6, #1
 800cb20:	d03d      	beq.n	800cb9e <ucdr_deserialize_endian_uint16_t+0xca>
 800cb22:	f898 3001 	ldrb.w	r3, [r8, #1]
 800cb26:	702b      	strb	r3, [r5, #0]
 800cb28:	f898 3000 	ldrb.w	r3, [r8]
 800cb2c:	706b      	strb	r3, [r5, #1]
 800cb2e:	6923      	ldr	r3, [r4, #16]
 800cb30:	68a2      	ldr	r2, [r4, #8]
 800cb32:	7da0      	ldrb	r0, [r4, #22]
 800cb34:	2102      	movs	r1, #2
 800cb36:	3302      	adds	r3, #2
 800cb38:	4452      	add	r2, sl
 800cb3a:	1bdb      	subs	r3, r3, r7
 800cb3c:	7561      	strb	r1, [r4, #21]
 800cb3e:	60a2      	str	r2, [r4, #8]
 800cb40:	6123      	str	r3, [r4, #16]
 800cb42:	f080 0001 	eor.w	r0, r0, #1
 800cb46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb4a:	2102      	movs	r1, #2
 800cb4c:	4620      	mov	r0, r4
 800cb4e:	f001 fa3f 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800cb52:	b178      	cbz	r0, 800cb74 <ucdr_deserialize_endian_uint16_t+0xa0>
 800cb54:	2e01      	cmp	r6, #1
 800cb56:	68a3      	ldr	r3, [r4, #8]
 800cb58:	d011      	beq.n	800cb7e <ucdr_deserialize_endian_uint16_t+0xaa>
 800cb5a:	785b      	ldrb	r3, [r3, #1]
 800cb5c:	702b      	strb	r3, [r5, #0]
 800cb5e:	68a3      	ldr	r3, [r4, #8]
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	706b      	strb	r3, [r5, #1]
 800cb64:	68a2      	ldr	r2, [r4, #8]
 800cb66:	6923      	ldr	r3, [r4, #16]
 800cb68:	3202      	adds	r2, #2
 800cb6a:	3302      	adds	r3, #2
 800cb6c:	2102      	movs	r1, #2
 800cb6e:	60a2      	str	r2, [r4, #8]
 800cb70:	6123      	str	r3, [r4, #16]
 800cb72:	7561      	strb	r1, [r4, #21]
 800cb74:	7da0      	ldrb	r0, [r4, #22]
 800cb76:	f080 0001 	eor.w	r0, r0, #1
 800cb7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb7e:	881b      	ldrh	r3, [r3, #0]
 800cb80:	802b      	strh	r3, [r5, #0]
 800cb82:	e7ef      	b.n	800cb64 <ucdr_deserialize_endian_uint16_t+0x90>
 800cb84:	68a2      	ldr	r2, [r4, #8]
 800cb86:	6923      	ldr	r3, [r4, #16]
 800cb88:	7da0      	ldrb	r0, [r4, #22]
 800cb8a:	f884 9015 	strb.w	r9, [r4, #21]
 800cb8e:	1bd2      	subs	r2, r2, r7
 800cb90:	1bdb      	subs	r3, r3, r7
 800cb92:	60a2      	str	r2, [r4, #8]
 800cb94:	6123      	str	r3, [r4, #16]
 800cb96:	f080 0001 	eor.w	r0, r0, #1
 800cb9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb9e:	4641      	mov	r1, r8
 800cba0:	463a      	mov	r2, r7
 800cba2:	4628      	mov	r0, r5
 800cba4:	f011 f8a3 	bl	801dcee <memcpy>
 800cba8:	68a1      	ldr	r1, [r4, #8]
 800cbaa:	4652      	mov	r2, sl
 800cbac:	19e8      	adds	r0, r5, r7
 800cbae:	f011 f89e 	bl	801dcee <memcpy>
 800cbb2:	e7bc      	b.n	800cb2e <ucdr_deserialize_endian_uint16_t+0x5a>

0800cbb4 <ucdr_serialize_uint32_t>:
 800cbb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbb8:	b082      	sub	sp, #8
 800cbba:	4604      	mov	r4, r0
 800cbbc:	9101      	str	r1, [sp, #4]
 800cbbe:	2104      	movs	r1, #4
 800cbc0:	f001 fa5a 	bl	800e078 <ucdr_buffer_alignment>
 800cbc4:	4601      	mov	r1, r0
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	7d67      	ldrb	r7, [r4, #21]
 800cbca:	f001 fa99 	bl	800e100 <ucdr_advance_buffer>
 800cbce:	2104      	movs	r1, #4
 800cbd0:	4620      	mov	r0, r4
 800cbd2:	f001 f9f1 	bl	800dfb8 <ucdr_check_buffer_available_for>
 800cbd6:	b300      	cbz	r0, 800cc1a <ucdr_serialize_uint32_t+0x66>
 800cbd8:	7d22      	ldrb	r2, [r4, #20]
 800cbda:	68a3      	ldr	r3, [r4, #8]
 800cbdc:	2a01      	cmp	r2, #1
 800cbde:	d05d      	beq.n	800cc9c <ucdr_serialize_uint32_t+0xe8>
 800cbe0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cbe4:	701a      	strb	r2, [r3, #0]
 800cbe6:	68a3      	ldr	r3, [r4, #8]
 800cbe8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cbec:	705a      	strb	r2, [r3, #1]
 800cbee:	68a3      	ldr	r3, [r4, #8]
 800cbf0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cbf4:	709a      	strb	r2, [r3, #2]
 800cbf6:	68a3      	ldr	r3, [r4, #8]
 800cbf8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cbfc:	70da      	strb	r2, [r3, #3]
 800cbfe:	68a2      	ldr	r2, [r4, #8]
 800cc00:	6923      	ldr	r3, [r4, #16]
 800cc02:	3204      	adds	r2, #4
 800cc04:	3304      	adds	r3, #4
 800cc06:	2104      	movs	r1, #4
 800cc08:	60a2      	str	r2, [r4, #8]
 800cc0a:	6123      	str	r3, [r4, #16]
 800cc0c:	7561      	strb	r1, [r4, #21]
 800cc0e:	7da0      	ldrb	r0, [r4, #22]
 800cc10:	f080 0001 	eor.w	r0, r0, #1
 800cc14:	b002      	add	sp, #8
 800cc16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc1a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800cc1e:	42ab      	cmp	r3, r5
 800cc20:	d92e      	bls.n	800cc80 <ucdr_serialize_uint32_t+0xcc>
 800cc22:	1b5e      	subs	r6, r3, r5
 800cc24:	60a3      	str	r3, [r4, #8]
 800cc26:	6923      	ldr	r3, [r4, #16]
 800cc28:	f1c6 0804 	rsb	r8, r6, #4
 800cc2c:	4433      	add	r3, r6
 800cc2e:	6123      	str	r3, [r4, #16]
 800cc30:	4641      	mov	r1, r8
 800cc32:	4620      	mov	r0, r4
 800cc34:	f001 f9cc 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800cc38:	b398      	cbz	r0, 800cca2 <ucdr_serialize_uint32_t+0xee>
 800cc3a:	7d23      	ldrb	r3, [r4, #20]
 800cc3c:	2b01      	cmp	r3, #1
 800cc3e:	d046      	beq.n	800ccce <ucdr_serialize_uint32_t+0x11a>
 800cc40:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cc44:	702b      	strb	r3, [r5, #0]
 800cc46:	2e01      	cmp	r6, #1
 800cc48:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cc4c:	706b      	strb	r3, [r5, #1]
 800cc4e:	d035      	beq.n	800ccbc <ucdr_serialize_uint32_t+0x108>
 800cc50:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cc54:	70ab      	strb	r3, [r5, #2]
 800cc56:	2e02      	cmp	r6, #2
 800cc58:	d034      	beq.n	800ccc4 <ucdr_serialize_uint32_t+0x110>
 800cc5a:	3503      	adds	r5, #3
 800cc5c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cc60:	702b      	strb	r3, [r5, #0]
 800cc62:	6923      	ldr	r3, [r4, #16]
 800cc64:	68a2      	ldr	r2, [r4, #8]
 800cc66:	7da0      	ldrb	r0, [r4, #22]
 800cc68:	3304      	adds	r3, #4
 800cc6a:	4442      	add	r2, r8
 800cc6c:	1b9b      	subs	r3, r3, r6
 800cc6e:	2104      	movs	r1, #4
 800cc70:	f080 0001 	eor.w	r0, r0, #1
 800cc74:	60a2      	str	r2, [r4, #8]
 800cc76:	6123      	str	r3, [r4, #16]
 800cc78:	7561      	strb	r1, [r4, #21]
 800cc7a:	b002      	add	sp, #8
 800cc7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc80:	2104      	movs	r1, #4
 800cc82:	4620      	mov	r0, r4
 800cc84:	f001 f9a4 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800cc88:	2800      	cmp	r0, #0
 800cc8a:	d0c0      	beq.n	800cc0e <ucdr_serialize_uint32_t+0x5a>
 800cc8c:	7d23      	ldrb	r3, [r4, #20]
 800cc8e:	68a2      	ldr	r2, [r4, #8]
 800cc90:	2b01      	cmp	r3, #1
 800cc92:	d019      	beq.n	800ccc8 <ucdr_serialize_uint32_t+0x114>
 800cc94:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cc98:	7013      	strb	r3, [r2, #0]
 800cc9a:	e7a4      	b.n	800cbe6 <ucdr_serialize_uint32_t+0x32>
 800cc9c:	9a01      	ldr	r2, [sp, #4]
 800cc9e:	601a      	str	r2, [r3, #0]
 800cca0:	e7ad      	b.n	800cbfe <ucdr_serialize_uint32_t+0x4a>
 800cca2:	68a2      	ldr	r2, [r4, #8]
 800cca4:	6923      	ldr	r3, [r4, #16]
 800cca6:	7da0      	ldrb	r0, [r4, #22]
 800cca8:	7567      	strb	r7, [r4, #21]
 800ccaa:	1b92      	subs	r2, r2, r6
 800ccac:	1b9b      	subs	r3, r3, r6
 800ccae:	f080 0001 	eor.w	r0, r0, #1
 800ccb2:	60a2      	str	r2, [r4, #8]
 800ccb4:	6123      	str	r3, [r4, #16]
 800ccb6:	b002      	add	sp, #8
 800ccb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccbc:	68a3      	ldr	r3, [r4, #8]
 800ccbe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ccc2:	701a      	strb	r2, [r3, #0]
 800ccc4:	68a5      	ldr	r5, [r4, #8]
 800ccc6:	e7c9      	b.n	800cc5c <ucdr_serialize_uint32_t+0xa8>
 800ccc8:	9b01      	ldr	r3, [sp, #4]
 800ccca:	6013      	str	r3, [r2, #0]
 800cccc:	e797      	b.n	800cbfe <ucdr_serialize_uint32_t+0x4a>
 800ccce:	4628      	mov	r0, r5
 800ccd0:	ad01      	add	r5, sp, #4
 800ccd2:	4632      	mov	r2, r6
 800ccd4:	4629      	mov	r1, r5
 800ccd6:	f011 f80a 	bl	801dcee <memcpy>
 800ccda:	68a0      	ldr	r0, [r4, #8]
 800ccdc:	4642      	mov	r2, r8
 800ccde:	19a9      	adds	r1, r5, r6
 800cce0:	f011 f805 	bl	801dcee <memcpy>
 800cce4:	e7bd      	b.n	800cc62 <ucdr_serialize_uint32_t+0xae>
 800cce6:	bf00      	nop

0800cce8 <ucdr_serialize_endian_uint32_t>:
 800cce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ccec:	b083      	sub	sp, #12
 800ccee:	460d      	mov	r5, r1
 800ccf0:	2104      	movs	r1, #4
 800ccf2:	4604      	mov	r4, r0
 800ccf4:	9201      	str	r2, [sp, #4]
 800ccf6:	f001 f9bf 	bl	800e078 <ucdr_buffer_alignment>
 800ccfa:	4601      	mov	r1, r0
 800ccfc:	4620      	mov	r0, r4
 800ccfe:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cd02:	f001 f9fd 	bl	800e100 <ucdr_advance_buffer>
 800cd06:	2104      	movs	r1, #4
 800cd08:	4620      	mov	r0, r4
 800cd0a:	f001 f955 	bl	800dfb8 <ucdr_check_buffer_available_for>
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	d137      	bne.n	800cd82 <ucdr_serialize_endian_uint32_t+0x9a>
 800cd12:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800cd16:	42b7      	cmp	r7, r6
 800cd18:	d92e      	bls.n	800cd78 <ucdr_serialize_endian_uint32_t+0x90>
 800cd1a:	6923      	ldr	r3, [r4, #16]
 800cd1c:	60a7      	str	r7, [r4, #8]
 800cd1e:	1bbf      	subs	r7, r7, r6
 800cd20:	443b      	add	r3, r7
 800cd22:	f1c7 0904 	rsb	r9, r7, #4
 800cd26:	6123      	str	r3, [r4, #16]
 800cd28:	4649      	mov	r1, r9
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	f001 f950 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800cd30:	2800      	cmp	r0, #0
 800cd32:	d049      	beq.n	800cdc8 <ucdr_serialize_endian_uint32_t+0xe0>
 800cd34:	2d01      	cmp	r5, #1
 800cd36:	d05b      	beq.n	800cdf0 <ucdr_serialize_endian_uint32_t+0x108>
 800cd38:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cd3c:	7033      	strb	r3, [r6, #0]
 800cd3e:	2f01      	cmp	r7, #1
 800cd40:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cd44:	7073      	strb	r3, [r6, #1]
 800cd46:	d04d      	beq.n	800cde4 <ucdr_serialize_endian_uint32_t+0xfc>
 800cd48:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cd4c:	70b3      	strb	r3, [r6, #2]
 800cd4e:	2f02      	cmp	r7, #2
 800cd50:	d04c      	beq.n	800cdec <ucdr_serialize_endian_uint32_t+0x104>
 800cd52:	3603      	adds	r6, #3
 800cd54:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cd58:	7033      	strb	r3, [r6, #0]
 800cd5a:	6923      	ldr	r3, [r4, #16]
 800cd5c:	68a2      	ldr	r2, [r4, #8]
 800cd5e:	7da0      	ldrb	r0, [r4, #22]
 800cd60:	3304      	adds	r3, #4
 800cd62:	444a      	add	r2, r9
 800cd64:	1bdb      	subs	r3, r3, r7
 800cd66:	2104      	movs	r1, #4
 800cd68:	f080 0001 	eor.w	r0, r0, #1
 800cd6c:	60a2      	str	r2, [r4, #8]
 800cd6e:	6123      	str	r3, [r4, #16]
 800cd70:	7561      	strb	r1, [r4, #21]
 800cd72:	b003      	add	sp, #12
 800cd74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd78:	2104      	movs	r1, #4
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	f001 f928 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800cd80:	b1c8      	cbz	r0, 800cdb6 <ucdr_serialize_endian_uint32_t+0xce>
 800cd82:	2d01      	cmp	r5, #1
 800cd84:	68a3      	ldr	r3, [r4, #8]
 800cd86:	d01c      	beq.n	800cdc2 <ucdr_serialize_endian_uint32_t+0xda>
 800cd88:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cd8c:	701a      	strb	r2, [r3, #0]
 800cd8e:	68a3      	ldr	r3, [r4, #8]
 800cd90:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cd94:	705a      	strb	r2, [r3, #1]
 800cd96:	68a3      	ldr	r3, [r4, #8]
 800cd98:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cd9c:	709a      	strb	r2, [r3, #2]
 800cd9e:	68a3      	ldr	r3, [r4, #8]
 800cda0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cda4:	70da      	strb	r2, [r3, #3]
 800cda6:	68a2      	ldr	r2, [r4, #8]
 800cda8:	6923      	ldr	r3, [r4, #16]
 800cdaa:	3204      	adds	r2, #4
 800cdac:	3304      	adds	r3, #4
 800cdae:	2104      	movs	r1, #4
 800cdb0:	60a2      	str	r2, [r4, #8]
 800cdb2:	6123      	str	r3, [r4, #16]
 800cdb4:	7561      	strb	r1, [r4, #21]
 800cdb6:	7da0      	ldrb	r0, [r4, #22]
 800cdb8:	f080 0001 	eor.w	r0, r0, #1
 800cdbc:	b003      	add	sp, #12
 800cdbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdc2:	9a01      	ldr	r2, [sp, #4]
 800cdc4:	601a      	str	r2, [r3, #0]
 800cdc6:	e7ee      	b.n	800cda6 <ucdr_serialize_endian_uint32_t+0xbe>
 800cdc8:	68a2      	ldr	r2, [r4, #8]
 800cdca:	6923      	ldr	r3, [r4, #16]
 800cdcc:	7da0      	ldrb	r0, [r4, #22]
 800cdce:	f884 8015 	strb.w	r8, [r4, #21]
 800cdd2:	1bd2      	subs	r2, r2, r7
 800cdd4:	1bdb      	subs	r3, r3, r7
 800cdd6:	f080 0001 	eor.w	r0, r0, #1
 800cdda:	60a2      	str	r2, [r4, #8]
 800cddc:	6123      	str	r3, [r4, #16]
 800cdde:	b003      	add	sp, #12
 800cde0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cde4:	68a3      	ldr	r3, [r4, #8]
 800cde6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cdea:	701a      	strb	r2, [r3, #0]
 800cdec:	68a6      	ldr	r6, [r4, #8]
 800cdee:	e7b1      	b.n	800cd54 <ucdr_serialize_endian_uint32_t+0x6c>
 800cdf0:	ad01      	add	r5, sp, #4
 800cdf2:	463a      	mov	r2, r7
 800cdf4:	4629      	mov	r1, r5
 800cdf6:	4630      	mov	r0, r6
 800cdf8:	f010 ff79 	bl	801dcee <memcpy>
 800cdfc:	68a0      	ldr	r0, [r4, #8]
 800cdfe:	464a      	mov	r2, r9
 800ce00:	19e9      	adds	r1, r5, r7
 800ce02:	f010 ff74 	bl	801dcee <memcpy>
 800ce06:	e7a8      	b.n	800cd5a <ucdr_serialize_endian_uint32_t+0x72>

0800ce08 <ucdr_deserialize_uint32_t>:
 800ce08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce0c:	460d      	mov	r5, r1
 800ce0e:	2104      	movs	r1, #4
 800ce10:	4604      	mov	r4, r0
 800ce12:	f001 f931 	bl	800e078 <ucdr_buffer_alignment>
 800ce16:	4601      	mov	r1, r0
 800ce18:	4620      	mov	r0, r4
 800ce1a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ce1e:	f001 f96f 	bl	800e100 <ucdr_advance_buffer>
 800ce22:	2104      	movs	r1, #4
 800ce24:	4620      	mov	r0, r4
 800ce26:	f001 f8c7 	bl	800dfb8 <ucdr_check_buffer_available_for>
 800ce2a:	b1d8      	cbz	r0, 800ce64 <ucdr_deserialize_uint32_t+0x5c>
 800ce2c:	7d22      	ldrb	r2, [r4, #20]
 800ce2e:	68a3      	ldr	r3, [r4, #8]
 800ce30:	2a01      	cmp	r2, #1
 800ce32:	d052      	beq.n	800ceda <ucdr_deserialize_uint32_t+0xd2>
 800ce34:	78db      	ldrb	r3, [r3, #3]
 800ce36:	702b      	strb	r3, [r5, #0]
 800ce38:	68a3      	ldr	r3, [r4, #8]
 800ce3a:	789b      	ldrb	r3, [r3, #2]
 800ce3c:	706b      	strb	r3, [r5, #1]
 800ce3e:	68a3      	ldr	r3, [r4, #8]
 800ce40:	785b      	ldrb	r3, [r3, #1]
 800ce42:	70ab      	strb	r3, [r5, #2]
 800ce44:	68a3      	ldr	r3, [r4, #8]
 800ce46:	781b      	ldrb	r3, [r3, #0]
 800ce48:	70eb      	strb	r3, [r5, #3]
 800ce4a:	68a2      	ldr	r2, [r4, #8]
 800ce4c:	6923      	ldr	r3, [r4, #16]
 800ce4e:	3204      	adds	r2, #4
 800ce50:	3304      	adds	r3, #4
 800ce52:	2104      	movs	r1, #4
 800ce54:	60a2      	str	r2, [r4, #8]
 800ce56:	6123      	str	r3, [r4, #16]
 800ce58:	7561      	strb	r1, [r4, #21]
 800ce5a:	7da0      	ldrb	r0, [r4, #22]
 800ce5c:	f080 0001 	eor.w	r0, r0, #1
 800ce60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce64:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ce68:	42b7      	cmp	r7, r6
 800ce6a:	d92a      	bls.n	800cec2 <ucdr_deserialize_uint32_t+0xba>
 800ce6c:	6923      	ldr	r3, [r4, #16]
 800ce6e:	60a7      	str	r7, [r4, #8]
 800ce70:	1bbf      	subs	r7, r7, r6
 800ce72:	443b      	add	r3, r7
 800ce74:	f1c7 0904 	rsb	r9, r7, #4
 800ce78:	6123      	str	r3, [r4, #16]
 800ce7a:	4649      	mov	r1, r9
 800ce7c:	4620      	mov	r0, r4
 800ce7e:	f001 f8a7 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800ce82:	b368      	cbz	r0, 800cee0 <ucdr_deserialize_uint32_t+0xd8>
 800ce84:	7d23      	ldrb	r3, [r4, #20]
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	d040      	beq.n	800cf0c <ucdr_deserialize_uint32_t+0x104>
 800ce8a:	78f3      	ldrb	r3, [r6, #3]
 800ce8c:	702b      	strb	r3, [r5, #0]
 800ce8e:	78b3      	ldrb	r3, [r6, #2]
 800ce90:	706b      	strb	r3, [r5, #1]
 800ce92:	2f01      	cmp	r7, #1
 800ce94:	d031      	beq.n	800cefa <ucdr_deserialize_uint32_t+0xf2>
 800ce96:	7873      	ldrb	r3, [r6, #1]
 800ce98:	70ab      	strb	r3, [r5, #2]
 800ce9a:	2f02      	cmp	r7, #2
 800ce9c:	f105 0503 	add.w	r5, r5, #3
 800cea0:	d02f      	beq.n	800cf02 <ucdr_deserialize_uint32_t+0xfa>
 800cea2:	7833      	ldrb	r3, [r6, #0]
 800cea4:	702b      	strb	r3, [r5, #0]
 800cea6:	6923      	ldr	r3, [r4, #16]
 800cea8:	68a2      	ldr	r2, [r4, #8]
 800ceaa:	7da0      	ldrb	r0, [r4, #22]
 800ceac:	2104      	movs	r1, #4
 800ceae:	3304      	adds	r3, #4
 800ceb0:	444a      	add	r2, r9
 800ceb2:	1bdb      	subs	r3, r3, r7
 800ceb4:	7561      	strb	r1, [r4, #21]
 800ceb6:	60a2      	str	r2, [r4, #8]
 800ceb8:	6123      	str	r3, [r4, #16]
 800ceba:	f080 0001 	eor.w	r0, r0, #1
 800cebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cec2:	2104      	movs	r1, #4
 800cec4:	4620      	mov	r0, r4
 800cec6:	f001 f883 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800ceca:	2800      	cmp	r0, #0
 800cecc:	d0c5      	beq.n	800ce5a <ucdr_deserialize_uint32_t+0x52>
 800cece:	7d23      	ldrb	r3, [r4, #20]
 800ced0:	68a2      	ldr	r2, [r4, #8]
 800ced2:	2b01      	cmp	r3, #1
 800ced4:	d017      	beq.n	800cf06 <ucdr_deserialize_uint32_t+0xfe>
 800ced6:	78d3      	ldrb	r3, [r2, #3]
 800ced8:	e7ad      	b.n	800ce36 <ucdr_deserialize_uint32_t+0x2e>
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	602b      	str	r3, [r5, #0]
 800cede:	e7b4      	b.n	800ce4a <ucdr_deserialize_uint32_t+0x42>
 800cee0:	68a2      	ldr	r2, [r4, #8]
 800cee2:	6923      	ldr	r3, [r4, #16]
 800cee4:	7da0      	ldrb	r0, [r4, #22]
 800cee6:	f884 8015 	strb.w	r8, [r4, #21]
 800ceea:	1bd2      	subs	r2, r2, r7
 800ceec:	1bdb      	subs	r3, r3, r7
 800ceee:	60a2      	str	r2, [r4, #8]
 800cef0:	6123      	str	r3, [r4, #16]
 800cef2:	f080 0001 	eor.w	r0, r0, #1
 800cef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cefa:	68a3      	ldr	r3, [r4, #8]
 800cefc:	785b      	ldrb	r3, [r3, #1]
 800cefe:	70ab      	strb	r3, [r5, #2]
 800cf00:	3503      	adds	r5, #3
 800cf02:	68a6      	ldr	r6, [r4, #8]
 800cf04:	e7cd      	b.n	800cea2 <ucdr_deserialize_uint32_t+0x9a>
 800cf06:	6813      	ldr	r3, [r2, #0]
 800cf08:	602b      	str	r3, [r5, #0]
 800cf0a:	e79e      	b.n	800ce4a <ucdr_deserialize_uint32_t+0x42>
 800cf0c:	4631      	mov	r1, r6
 800cf0e:	463a      	mov	r2, r7
 800cf10:	4628      	mov	r0, r5
 800cf12:	f010 feec 	bl	801dcee <memcpy>
 800cf16:	68a1      	ldr	r1, [r4, #8]
 800cf18:	464a      	mov	r2, r9
 800cf1a:	19e8      	adds	r0, r5, r7
 800cf1c:	f010 fee7 	bl	801dcee <memcpy>
 800cf20:	e7c1      	b.n	800cea6 <ucdr_deserialize_uint32_t+0x9e>
 800cf22:	bf00      	nop

0800cf24 <ucdr_deserialize_endian_uint32_t>:
 800cf24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf28:	460e      	mov	r6, r1
 800cf2a:	2104      	movs	r1, #4
 800cf2c:	4604      	mov	r4, r0
 800cf2e:	4615      	mov	r5, r2
 800cf30:	f001 f8a2 	bl	800e078 <ucdr_buffer_alignment>
 800cf34:	4601      	mov	r1, r0
 800cf36:	4620      	mov	r0, r4
 800cf38:	f894 9015 	ldrb.w	r9, [r4, #21]
 800cf3c:	f001 f8e0 	bl	800e100 <ucdr_advance_buffer>
 800cf40:	2104      	movs	r1, #4
 800cf42:	4620      	mov	r0, r4
 800cf44:	f001 f838 	bl	800dfb8 <ucdr_check_buffer_available_for>
 800cf48:	2800      	cmp	r0, #0
 800cf4a:	d137      	bne.n	800cfbc <ucdr_deserialize_endian_uint32_t+0x98>
 800cf4c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800cf50:	42bb      	cmp	r3, r7
 800cf52:	d92e      	bls.n	800cfb2 <ucdr_deserialize_endian_uint32_t+0x8e>
 800cf54:	eba3 0807 	sub.w	r8, r3, r7
 800cf58:	60a3      	str	r3, [r4, #8]
 800cf5a:	6923      	ldr	r3, [r4, #16]
 800cf5c:	f1c8 0a04 	rsb	sl, r8, #4
 800cf60:	4443      	add	r3, r8
 800cf62:	6123      	str	r3, [r4, #16]
 800cf64:	4651      	mov	r1, sl
 800cf66:	4620      	mov	r0, r4
 800cf68:	f001 f832 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800cf6c:	2800      	cmp	r0, #0
 800cf6e:	d043      	beq.n	800cff8 <ucdr_deserialize_endian_uint32_t+0xd4>
 800cf70:	2e01      	cmp	r6, #1
 800cf72:	d056      	beq.n	800d022 <ucdr_deserialize_endian_uint32_t+0xfe>
 800cf74:	78fb      	ldrb	r3, [r7, #3]
 800cf76:	702b      	strb	r3, [r5, #0]
 800cf78:	78bb      	ldrb	r3, [r7, #2]
 800cf7a:	706b      	strb	r3, [r5, #1]
 800cf7c:	f1b8 0f01 	cmp.w	r8, #1
 800cf80:	d049      	beq.n	800d016 <ucdr_deserialize_endian_uint32_t+0xf2>
 800cf82:	787b      	ldrb	r3, [r7, #1]
 800cf84:	70ab      	strb	r3, [r5, #2]
 800cf86:	f1b8 0f02 	cmp.w	r8, #2
 800cf8a:	f105 0503 	add.w	r5, r5, #3
 800cf8e:	d046      	beq.n	800d01e <ucdr_deserialize_endian_uint32_t+0xfa>
 800cf90:	783b      	ldrb	r3, [r7, #0]
 800cf92:	702b      	strb	r3, [r5, #0]
 800cf94:	6923      	ldr	r3, [r4, #16]
 800cf96:	68a2      	ldr	r2, [r4, #8]
 800cf98:	7da0      	ldrb	r0, [r4, #22]
 800cf9a:	2104      	movs	r1, #4
 800cf9c:	3304      	adds	r3, #4
 800cf9e:	4452      	add	r2, sl
 800cfa0:	eba3 0308 	sub.w	r3, r3, r8
 800cfa4:	7561      	strb	r1, [r4, #21]
 800cfa6:	60a2      	str	r2, [r4, #8]
 800cfa8:	6123      	str	r3, [r4, #16]
 800cfaa:	f080 0001 	eor.w	r0, r0, #1
 800cfae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfb2:	2104      	movs	r1, #4
 800cfb4:	4620      	mov	r0, r4
 800cfb6:	f001 f80b 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800cfba:	b1a8      	cbz	r0, 800cfe8 <ucdr_deserialize_endian_uint32_t+0xc4>
 800cfbc:	2e01      	cmp	r6, #1
 800cfbe:	68a3      	ldr	r3, [r4, #8]
 800cfc0:	d017      	beq.n	800cff2 <ucdr_deserialize_endian_uint32_t+0xce>
 800cfc2:	78db      	ldrb	r3, [r3, #3]
 800cfc4:	702b      	strb	r3, [r5, #0]
 800cfc6:	68a3      	ldr	r3, [r4, #8]
 800cfc8:	789b      	ldrb	r3, [r3, #2]
 800cfca:	706b      	strb	r3, [r5, #1]
 800cfcc:	68a3      	ldr	r3, [r4, #8]
 800cfce:	785b      	ldrb	r3, [r3, #1]
 800cfd0:	70ab      	strb	r3, [r5, #2]
 800cfd2:	68a3      	ldr	r3, [r4, #8]
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	70eb      	strb	r3, [r5, #3]
 800cfd8:	68a2      	ldr	r2, [r4, #8]
 800cfda:	6923      	ldr	r3, [r4, #16]
 800cfdc:	3204      	adds	r2, #4
 800cfde:	3304      	adds	r3, #4
 800cfe0:	2104      	movs	r1, #4
 800cfe2:	60a2      	str	r2, [r4, #8]
 800cfe4:	6123      	str	r3, [r4, #16]
 800cfe6:	7561      	strb	r1, [r4, #21]
 800cfe8:	7da0      	ldrb	r0, [r4, #22]
 800cfea:	f080 0001 	eor.w	r0, r0, #1
 800cfee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	602b      	str	r3, [r5, #0]
 800cff6:	e7ef      	b.n	800cfd8 <ucdr_deserialize_endian_uint32_t+0xb4>
 800cff8:	68a2      	ldr	r2, [r4, #8]
 800cffa:	6923      	ldr	r3, [r4, #16]
 800cffc:	7da0      	ldrb	r0, [r4, #22]
 800cffe:	f884 9015 	strb.w	r9, [r4, #21]
 800d002:	eba2 0208 	sub.w	r2, r2, r8
 800d006:	eba3 0308 	sub.w	r3, r3, r8
 800d00a:	60a2      	str	r2, [r4, #8]
 800d00c:	6123      	str	r3, [r4, #16]
 800d00e:	f080 0001 	eor.w	r0, r0, #1
 800d012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d016:	68a3      	ldr	r3, [r4, #8]
 800d018:	785b      	ldrb	r3, [r3, #1]
 800d01a:	70ab      	strb	r3, [r5, #2]
 800d01c:	3503      	adds	r5, #3
 800d01e:	68a7      	ldr	r7, [r4, #8]
 800d020:	e7b6      	b.n	800cf90 <ucdr_deserialize_endian_uint32_t+0x6c>
 800d022:	4639      	mov	r1, r7
 800d024:	4642      	mov	r2, r8
 800d026:	4628      	mov	r0, r5
 800d028:	f010 fe61 	bl	801dcee <memcpy>
 800d02c:	68a1      	ldr	r1, [r4, #8]
 800d02e:	4652      	mov	r2, sl
 800d030:	eb05 0008 	add.w	r0, r5, r8
 800d034:	f010 fe5b 	bl	801dcee <memcpy>
 800d038:	e7ac      	b.n	800cf94 <ucdr_deserialize_endian_uint32_t+0x70>
 800d03a:	bf00      	nop

0800d03c <ucdr_serialize_uint64_t>:
 800d03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d040:	2108      	movs	r1, #8
 800d042:	b082      	sub	sp, #8
 800d044:	4604      	mov	r4, r0
 800d046:	e9cd 2300 	strd	r2, r3, [sp]
 800d04a:	f001 f815 	bl	800e078 <ucdr_buffer_alignment>
 800d04e:	4601      	mov	r1, r0
 800d050:	4620      	mov	r0, r4
 800d052:	7d67      	ldrb	r7, [r4, #21]
 800d054:	f001 f854 	bl	800e100 <ucdr_advance_buffer>
 800d058:	2108      	movs	r1, #8
 800d05a:	4620      	mov	r0, r4
 800d05c:	f000 ffac 	bl	800dfb8 <ucdr_check_buffer_available_for>
 800d060:	2800      	cmp	r0, #0
 800d062:	d14d      	bne.n	800d100 <ucdr_serialize_uint64_t+0xc4>
 800d064:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d068:	42ab      	cmp	r3, r5
 800d06a:	d944      	bls.n	800d0f6 <ucdr_serialize_uint64_t+0xba>
 800d06c:	1b5e      	subs	r6, r3, r5
 800d06e:	60a3      	str	r3, [r4, #8]
 800d070:	6923      	ldr	r3, [r4, #16]
 800d072:	f1c6 0808 	rsb	r8, r6, #8
 800d076:	4433      	add	r3, r6
 800d078:	6123      	str	r3, [r4, #16]
 800d07a:	4641      	mov	r1, r8
 800d07c:	4620      	mov	r0, r4
 800d07e:	f000 ffa7 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800d082:	2800      	cmp	r0, #0
 800d084:	d072      	beq.n	800d16c <ucdr_serialize_uint64_t+0x130>
 800d086:	7d23      	ldrb	r3, [r4, #20]
 800d088:	2b01      	cmp	r3, #1
 800d08a:	f000 8092 	beq.w	800d1b2 <ucdr_serialize_uint64_t+0x176>
 800d08e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d092:	702b      	strb	r3, [r5, #0]
 800d094:	2e01      	cmp	r6, #1
 800d096:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d09a:	706b      	strb	r3, [r5, #1]
 800d09c:	d073      	beq.n	800d186 <ucdr_serialize_uint64_t+0x14a>
 800d09e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d0a2:	70ab      	strb	r3, [r5, #2]
 800d0a4:	2e02      	cmp	r6, #2
 800d0a6:	d072      	beq.n	800d18e <ucdr_serialize_uint64_t+0x152>
 800d0a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d0ac:	70eb      	strb	r3, [r5, #3]
 800d0ae:	2e03      	cmp	r6, #3
 800d0b0:	d071      	beq.n	800d196 <ucdr_serialize_uint64_t+0x15a>
 800d0b2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d0b6:	712b      	strb	r3, [r5, #4]
 800d0b8:	2e04      	cmp	r6, #4
 800d0ba:	d070      	beq.n	800d19e <ucdr_serialize_uint64_t+0x162>
 800d0bc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d0c0:	716b      	strb	r3, [r5, #5]
 800d0c2:	2e05      	cmp	r6, #5
 800d0c4:	d06f      	beq.n	800d1a6 <ucdr_serialize_uint64_t+0x16a>
 800d0c6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d0ca:	71ab      	strb	r3, [r5, #6]
 800d0cc:	2e06      	cmp	r6, #6
 800d0ce:	d06e      	beq.n	800d1ae <ucdr_serialize_uint64_t+0x172>
 800d0d0:	3507      	adds	r5, #7
 800d0d2:	f89d 3000 	ldrb.w	r3, [sp]
 800d0d6:	702b      	strb	r3, [r5, #0]
 800d0d8:	6923      	ldr	r3, [r4, #16]
 800d0da:	68a2      	ldr	r2, [r4, #8]
 800d0dc:	7da0      	ldrb	r0, [r4, #22]
 800d0de:	3308      	adds	r3, #8
 800d0e0:	4442      	add	r2, r8
 800d0e2:	1b9b      	subs	r3, r3, r6
 800d0e4:	2108      	movs	r1, #8
 800d0e6:	f080 0001 	eor.w	r0, r0, #1
 800d0ea:	60a2      	str	r2, [r4, #8]
 800d0ec:	6123      	str	r3, [r4, #16]
 800d0ee:	7561      	strb	r1, [r4, #21]
 800d0f0:	b002      	add	sp, #8
 800d0f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0f6:	2108      	movs	r1, #8
 800d0f8:	4620      	mov	r0, r4
 800d0fa:	f000 ff69 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800d0fe:	b350      	cbz	r0, 800d156 <ucdr_serialize_uint64_t+0x11a>
 800d100:	7d22      	ldrb	r2, [r4, #20]
 800d102:	68a3      	ldr	r3, [r4, #8]
 800d104:	2a01      	cmp	r2, #1
 800d106:	d02c      	beq.n	800d162 <ucdr_serialize_uint64_t+0x126>
 800d108:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d10c:	701a      	strb	r2, [r3, #0]
 800d10e:	68a3      	ldr	r3, [r4, #8]
 800d110:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d114:	705a      	strb	r2, [r3, #1]
 800d116:	68a3      	ldr	r3, [r4, #8]
 800d118:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d11c:	709a      	strb	r2, [r3, #2]
 800d11e:	68a3      	ldr	r3, [r4, #8]
 800d120:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d124:	70da      	strb	r2, [r3, #3]
 800d126:	68a3      	ldr	r3, [r4, #8]
 800d128:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d12c:	711a      	strb	r2, [r3, #4]
 800d12e:	68a3      	ldr	r3, [r4, #8]
 800d130:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d134:	715a      	strb	r2, [r3, #5]
 800d136:	68a3      	ldr	r3, [r4, #8]
 800d138:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d13c:	719a      	strb	r2, [r3, #6]
 800d13e:	68a3      	ldr	r3, [r4, #8]
 800d140:	f89d 2000 	ldrb.w	r2, [sp]
 800d144:	71da      	strb	r2, [r3, #7]
 800d146:	68a2      	ldr	r2, [r4, #8]
 800d148:	6923      	ldr	r3, [r4, #16]
 800d14a:	3208      	adds	r2, #8
 800d14c:	3308      	adds	r3, #8
 800d14e:	2108      	movs	r1, #8
 800d150:	60a2      	str	r2, [r4, #8]
 800d152:	6123      	str	r3, [r4, #16]
 800d154:	7561      	strb	r1, [r4, #21]
 800d156:	7da0      	ldrb	r0, [r4, #22]
 800d158:	f080 0001 	eor.w	r0, r0, #1
 800d15c:	b002      	add	sp, #8
 800d15e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d162:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d166:	6019      	str	r1, [r3, #0]
 800d168:	605a      	str	r2, [r3, #4]
 800d16a:	e7ec      	b.n	800d146 <ucdr_serialize_uint64_t+0x10a>
 800d16c:	68a2      	ldr	r2, [r4, #8]
 800d16e:	6923      	ldr	r3, [r4, #16]
 800d170:	7da0      	ldrb	r0, [r4, #22]
 800d172:	7567      	strb	r7, [r4, #21]
 800d174:	1b92      	subs	r2, r2, r6
 800d176:	1b9b      	subs	r3, r3, r6
 800d178:	f080 0001 	eor.w	r0, r0, #1
 800d17c:	60a2      	str	r2, [r4, #8]
 800d17e:	6123      	str	r3, [r4, #16]
 800d180:	b002      	add	sp, #8
 800d182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d186:	68a3      	ldr	r3, [r4, #8]
 800d188:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d18c:	701a      	strb	r2, [r3, #0]
 800d18e:	68a3      	ldr	r3, [r4, #8]
 800d190:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d194:	701a      	strb	r2, [r3, #0]
 800d196:	68a3      	ldr	r3, [r4, #8]
 800d198:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d19c:	701a      	strb	r2, [r3, #0]
 800d19e:	68a3      	ldr	r3, [r4, #8]
 800d1a0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d1a4:	701a      	strb	r2, [r3, #0]
 800d1a6:	68a3      	ldr	r3, [r4, #8]
 800d1a8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d1ac:	701a      	strb	r2, [r3, #0]
 800d1ae:	68a5      	ldr	r5, [r4, #8]
 800d1b0:	e78f      	b.n	800d0d2 <ucdr_serialize_uint64_t+0x96>
 800d1b2:	4628      	mov	r0, r5
 800d1b4:	466d      	mov	r5, sp
 800d1b6:	4632      	mov	r2, r6
 800d1b8:	4629      	mov	r1, r5
 800d1ba:	f010 fd98 	bl	801dcee <memcpy>
 800d1be:	68a0      	ldr	r0, [r4, #8]
 800d1c0:	4642      	mov	r2, r8
 800d1c2:	19a9      	adds	r1, r5, r6
 800d1c4:	f010 fd93 	bl	801dcee <memcpy>
 800d1c8:	e786      	b.n	800d0d8 <ucdr_serialize_uint64_t+0x9c>
 800d1ca:	bf00      	nop

0800d1cc <ucdr_serialize_int8_t>:
 800d1cc:	b538      	push	{r3, r4, r5, lr}
 800d1ce:	460d      	mov	r5, r1
 800d1d0:	2101      	movs	r1, #1
 800d1d2:	4604      	mov	r4, r0
 800d1d4:	f000 fefc 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800d1d8:	b148      	cbz	r0, 800d1ee <ucdr_serialize_int8_t+0x22>
 800d1da:	68a3      	ldr	r3, [r4, #8]
 800d1dc:	701d      	strb	r5, [r3, #0]
 800d1de:	68a2      	ldr	r2, [r4, #8]
 800d1e0:	6923      	ldr	r3, [r4, #16]
 800d1e2:	2101      	movs	r1, #1
 800d1e4:	440a      	add	r2, r1
 800d1e6:	440b      	add	r3, r1
 800d1e8:	60a2      	str	r2, [r4, #8]
 800d1ea:	6123      	str	r3, [r4, #16]
 800d1ec:	7561      	strb	r1, [r4, #21]
 800d1ee:	7da0      	ldrb	r0, [r4, #22]
 800d1f0:	f080 0001 	eor.w	r0, r0, #1
 800d1f4:	bd38      	pop	{r3, r4, r5, pc}
 800d1f6:	bf00      	nop

0800d1f8 <ucdr_deserialize_int8_t>:
 800d1f8:	b538      	push	{r3, r4, r5, lr}
 800d1fa:	460d      	mov	r5, r1
 800d1fc:	2101      	movs	r1, #1
 800d1fe:	4604      	mov	r4, r0
 800d200:	f000 fee6 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800d204:	b150      	cbz	r0, 800d21c <ucdr_deserialize_int8_t+0x24>
 800d206:	68a3      	ldr	r3, [r4, #8]
 800d208:	781b      	ldrb	r3, [r3, #0]
 800d20a:	702b      	strb	r3, [r5, #0]
 800d20c:	68a2      	ldr	r2, [r4, #8]
 800d20e:	6923      	ldr	r3, [r4, #16]
 800d210:	2101      	movs	r1, #1
 800d212:	440a      	add	r2, r1
 800d214:	440b      	add	r3, r1
 800d216:	60a2      	str	r2, [r4, #8]
 800d218:	6123      	str	r3, [r4, #16]
 800d21a:	7561      	strb	r1, [r4, #21]
 800d21c:	7da0      	ldrb	r0, [r4, #22]
 800d21e:	f080 0001 	eor.w	r0, r0, #1
 800d222:	bd38      	pop	{r3, r4, r5, pc}

0800d224 <ucdr_serialize_int16_t>:
 800d224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d228:	b082      	sub	sp, #8
 800d22a:	460b      	mov	r3, r1
 800d22c:	2102      	movs	r1, #2
 800d22e:	4604      	mov	r4, r0
 800d230:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d234:	f000 ff20 	bl	800e078 <ucdr_buffer_alignment>
 800d238:	4601      	mov	r1, r0
 800d23a:	4620      	mov	r0, r4
 800d23c:	7d67      	ldrb	r7, [r4, #21]
 800d23e:	f000 ff5f 	bl	800e100 <ucdr_advance_buffer>
 800d242:	2102      	movs	r1, #2
 800d244:	4620      	mov	r0, r4
 800d246:	f000 feb7 	bl	800dfb8 <ucdr_check_buffer_available_for>
 800d24a:	b1c0      	cbz	r0, 800d27e <ucdr_serialize_int16_t+0x5a>
 800d24c:	7d22      	ldrb	r2, [r4, #20]
 800d24e:	68a3      	ldr	r3, [r4, #8]
 800d250:	2a01      	cmp	r2, #1
 800d252:	d04e      	beq.n	800d2f2 <ucdr_serialize_int16_t+0xce>
 800d254:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d258:	701a      	strb	r2, [r3, #0]
 800d25a:	68a3      	ldr	r3, [r4, #8]
 800d25c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d260:	705a      	strb	r2, [r3, #1]
 800d262:	68a2      	ldr	r2, [r4, #8]
 800d264:	6923      	ldr	r3, [r4, #16]
 800d266:	3202      	adds	r2, #2
 800d268:	3302      	adds	r3, #2
 800d26a:	2102      	movs	r1, #2
 800d26c:	60a2      	str	r2, [r4, #8]
 800d26e:	6123      	str	r3, [r4, #16]
 800d270:	7561      	strb	r1, [r4, #21]
 800d272:	7da0      	ldrb	r0, [r4, #22]
 800d274:	f080 0001 	eor.w	r0, r0, #1
 800d278:	b002      	add	sp, #8
 800d27a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d27e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d282:	42ab      	cmp	r3, r5
 800d284:	d923      	bls.n	800d2ce <ucdr_serialize_int16_t+0xaa>
 800d286:	1b5e      	subs	r6, r3, r5
 800d288:	60a3      	str	r3, [r4, #8]
 800d28a:	6923      	ldr	r3, [r4, #16]
 800d28c:	f1c6 0802 	rsb	r8, r6, #2
 800d290:	4433      	add	r3, r6
 800d292:	6123      	str	r3, [r4, #16]
 800d294:	4641      	mov	r1, r8
 800d296:	4620      	mov	r0, r4
 800d298:	f000 fe9a 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800d29c:	b368      	cbz	r0, 800d2fa <ucdr_serialize_int16_t+0xd6>
 800d29e:	7d23      	ldrb	r3, [r4, #20]
 800d2a0:	2b01      	cmp	r3, #1
 800d2a2:	d03b      	beq.n	800d31c <ucdr_serialize_int16_t+0xf8>
 800d2a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d2a8:	702b      	strb	r3, [r5, #0]
 800d2aa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d2ae:	706b      	strb	r3, [r5, #1]
 800d2b0:	6923      	ldr	r3, [r4, #16]
 800d2b2:	68a2      	ldr	r2, [r4, #8]
 800d2b4:	7da0      	ldrb	r0, [r4, #22]
 800d2b6:	3302      	adds	r3, #2
 800d2b8:	4442      	add	r2, r8
 800d2ba:	1b9b      	subs	r3, r3, r6
 800d2bc:	2102      	movs	r1, #2
 800d2be:	f080 0001 	eor.w	r0, r0, #1
 800d2c2:	60a2      	str	r2, [r4, #8]
 800d2c4:	6123      	str	r3, [r4, #16]
 800d2c6:	7561      	strb	r1, [r4, #21]
 800d2c8:	b002      	add	sp, #8
 800d2ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2ce:	2102      	movs	r1, #2
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	f000 fe7d 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800d2d6:	2800      	cmp	r0, #0
 800d2d8:	d0cb      	beq.n	800d272 <ucdr_serialize_int16_t+0x4e>
 800d2da:	7d23      	ldrb	r3, [r4, #20]
 800d2dc:	68a2      	ldr	r2, [r4, #8]
 800d2de:	2b01      	cmp	r3, #1
 800d2e0:	d018      	beq.n	800d314 <ucdr_serialize_int16_t+0xf0>
 800d2e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d2e6:	7013      	strb	r3, [r2, #0]
 800d2e8:	68a3      	ldr	r3, [r4, #8]
 800d2ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d2ee:	705a      	strb	r2, [r3, #1]
 800d2f0:	e7b7      	b.n	800d262 <ucdr_serialize_int16_t+0x3e>
 800d2f2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d2f6:	801a      	strh	r2, [r3, #0]
 800d2f8:	e7b3      	b.n	800d262 <ucdr_serialize_int16_t+0x3e>
 800d2fa:	68a2      	ldr	r2, [r4, #8]
 800d2fc:	6923      	ldr	r3, [r4, #16]
 800d2fe:	7da0      	ldrb	r0, [r4, #22]
 800d300:	7567      	strb	r7, [r4, #21]
 800d302:	1b92      	subs	r2, r2, r6
 800d304:	1b9b      	subs	r3, r3, r6
 800d306:	f080 0001 	eor.w	r0, r0, #1
 800d30a:	60a2      	str	r2, [r4, #8]
 800d30c:	6123      	str	r3, [r4, #16]
 800d30e:	b002      	add	sp, #8
 800d310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d314:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800d318:	8013      	strh	r3, [r2, #0]
 800d31a:	e7a2      	b.n	800d262 <ucdr_serialize_int16_t+0x3e>
 800d31c:	4628      	mov	r0, r5
 800d31e:	f10d 0506 	add.w	r5, sp, #6
 800d322:	4632      	mov	r2, r6
 800d324:	4629      	mov	r1, r5
 800d326:	f010 fce2 	bl	801dcee <memcpy>
 800d32a:	68a0      	ldr	r0, [r4, #8]
 800d32c:	4642      	mov	r2, r8
 800d32e:	19a9      	adds	r1, r5, r6
 800d330:	f010 fcdd 	bl	801dcee <memcpy>
 800d334:	e7bc      	b.n	800d2b0 <ucdr_serialize_int16_t+0x8c>
 800d336:	bf00      	nop

0800d338 <ucdr_deserialize_int16_t>:
 800d338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d33c:	460d      	mov	r5, r1
 800d33e:	2102      	movs	r1, #2
 800d340:	4604      	mov	r4, r0
 800d342:	f000 fe99 	bl	800e078 <ucdr_buffer_alignment>
 800d346:	4601      	mov	r1, r0
 800d348:	4620      	mov	r0, r4
 800d34a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d34e:	f000 fed7 	bl	800e100 <ucdr_advance_buffer>
 800d352:	2102      	movs	r1, #2
 800d354:	4620      	mov	r0, r4
 800d356:	f000 fe2f 	bl	800dfb8 <ucdr_check_buffer_available_for>
 800d35a:	b1a8      	cbz	r0, 800d388 <ucdr_deserialize_int16_t+0x50>
 800d35c:	7d22      	ldrb	r2, [r4, #20]
 800d35e:	68a3      	ldr	r3, [r4, #8]
 800d360:	2a01      	cmp	r2, #1
 800d362:	d046      	beq.n	800d3f2 <ucdr_deserialize_int16_t+0xba>
 800d364:	785b      	ldrb	r3, [r3, #1]
 800d366:	702b      	strb	r3, [r5, #0]
 800d368:	68a3      	ldr	r3, [r4, #8]
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	706b      	strb	r3, [r5, #1]
 800d36e:	68a2      	ldr	r2, [r4, #8]
 800d370:	6923      	ldr	r3, [r4, #16]
 800d372:	3202      	adds	r2, #2
 800d374:	3302      	adds	r3, #2
 800d376:	2102      	movs	r1, #2
 800d378:	60a2      	str	r2, [r4, #8]
 800d37a:	6123      	str	r3, [r4, #16]
 800d37c:	7561      	strb	r1, [r4, #21]
 800d37e:	7da0      	ldrb	r0, [r4, #22]
 800d380:	f080 0001 	eor.w	r0, r0, #1
 800d384:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d388:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d38c:	42be      	cmp	r6, r7
 800d38e:	d920      	bls.n	800d3d2 <ucdr_deserialize_int16_t+0x9a>
 800d390:	6923      	ldr	r3, [r4, #16]
 800d392:	60a6      	str	r6, [r4, #8]
 800d394:	1bf6      	subs	r6, r6, r7
 800d396:	4433      	add	r3, r6
 800d398:	f1c6 0902 	rsb	r9, r6, #2
 800d39c:	6123      	str	r3, [r4, #16]
 800d39e:	4649      	mov	r1, r9
 800d3a0:	4620      	mov	r0, r4
 800d3a2:	f000 fe15 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800d3a6:	b338      	cbz	r0, 800d3f8 <ucdr_deserialize_int16_t+0xc0>
 800d3a8:	7d23      	ldrb	r3, [r4, #20]
 800d3aa:	2b01      	cmp	r3, #1
 800d3ac:	d034      	beq.n	800d418 <ucdr_deserialize_int16_t+0xe0>
 800d3ae:	787b      	ldrb	r3, [r7, #1]
 800d3b0:	702b      	strb	r3, [r5, #0]
 800d3b2:	783b      	ldrb	r3, [r7, #0]
 800d3b4:	706b      	strb	r3, [r5, #1]
 800d3b6:	6923      	ldr	r3, [r4, #16]
 800d3b8:	68a2      	ldr	r2, [r4, #8]
 800d3ba:	7da0      	ldrb	r0, [r4, #22]
 800d3bc:	2102      	movs	r1, #2
 800d3be:	3302      	adds	r3, #2
 800d3c0:	444a      	add	r2, r9
 800d3c2:	1b9b      	subs	r3, r3, r6
 800d3c4:	7561      	strb	r1, [r4, #21]
 800d3c6:	60a2      	str	r2, [r4, #8]
 800d3c8:	6123      	str	r3, [r4, #16]
 800d3ca:	f080 0001 	eor.w	r0, r0, #1
 800d3ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3d2:	2102      	movs	r1, #2
 800d3d4:	4620      	mov	r0, r4
 800d3d6:	f000 fdfb 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800d3da:	2800      	cmp	r0, #0
 800d3dc:	d0cf      	beq.n	800d37e <ucdr_deserialize_int16_t+0x46>
 800d3de:	7d23      	ldrb	r3, [r4, #20]
 800d3e0:	68a2      	ldr	r2, [r4, #8]
 800d3e2:	2b01      	cmp	r3, #1
 800d3e4:	d015      	beq.n	800d412 <ucdr_deserialize_int16_t+0xda>
 800d3e6:	7853      	ldrb	r3, [r2, #1]
 800d3e8:	702b      	strb	r3, [r5, #0]
 800d3ea:	68a3      	ldr	r3, [r4, #8]
 800d3ec:	781b      	ldrb	r3, [r3, #0]
 800d3ee:	706b      	strb	r3, [r5, #1]
 800d3f0:	e7bd      	b.n	800d36e <ucdr_deserialize_int16_t+0x36>
 800d3f2:	881b      	ldrh	r3, [r3, #0]
 800d3f4:	802b      	strh	r3, [r5, #0]
 800d3f6:	e7ba      	b.n	800d36e <ucdr_deserialize_int16_t+0x36>
 800d3f8:	68a2      	ldr	r2, [r4, #8]
 800d3fa:	6923      	ldr	r3, [r4, #16]
 800d3fc:	7da0      	ldrb	r0, [r4, #22]
 800d3fe:	f884 8015 	strb.w	r8, [r4, #21]
 800d402:	1b92      	subs	r2, r2, r6
 800d404:	1b9b      	subs	r3, r3, r6
 800d406:	60a2      	str	r2, [r4, #8]
 800d408:	6123      	str	r3, [r4, #16]
 800d40a:	f080 0001 	eor.w	r0, r0, #1
 800d40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d412:	8813      	ldrh	r3, [r2, #0]
 800d414:	802b      	strh	r3, [r5, #0]
 800d416:	e7aa      	b.n	800d36e <ucdr_deserialize_int16_t+0x36>
 800d418:	4639      	mov	r1, r7
 800d41a:	4632      	mov	r2, r6
 800d41c:	4628      	mov	r0, r5
 800d41e:	f010 fc66 	bl	801dcee <memcpy>
 800d422:	68a1      	ldr	r1, [r4, #8]
 800d424:	464a      	mov	r2, r9
 800d426:	19a8      	adds	r0, r5, r6
 800d428:	f010 fc61 	bl	801dcee <memcpy>
 800d42c:	e7c3      	b.n	800d3b6 <ucdr_deserialize_int16_t+0x7e>
 800d42e:	bf00      	nop

0800d430 <ucdr_serialize_int32_t>:
 800d430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d434:	b082      	sub	sp, #8
 800d436:	4604      	mov	r4, r0
 800d438:	9101      	str	r1, [sp, #4]
 800d43a:	2104      	movs	r1, #4
 800d43c:	f000 fe1c 	bl	800e078 <ucdr_buffer_alignment>
 800d440:	4601      	mov	r1, r0
 800d442:	4620      	mov	r0, r4
 800d444:	7d67      	ldrb	r7, [r4, #21]
 800d446:	f000 fe5b 	bl	800e100 <ucdr_advance_buffer>
 800d44a:	2104      	movs	r1, #4
 800d44c:	4620      	mov	r0, r4
 800d44e:	f000 fdb3 	bl	800dfb8 <ucdr_check_buffer_available_for>
 800d452:	b300      	cbz	r0, 800d496 <ucdr_serialize_int32_t+0x66>
 800d454:	7d22      	ldrb	r2, [r4, #20]
 800d456:	68a3      	ldr	r3, [r4, #8]
 800d458:	2a01      	cmp	r2, #1
 800d45a:	d05d      	beq.n	800d518 <ucdr_serialize_int32_t+0xe8>
 800d45c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d460:	701a      	strb	r2, [r3, #0]
 800d462:	68a3      	ldr	r3, [r4, #8]
 800d464:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d468:	705a      	strb	r2, [r3, #1]
 800d46a:	68a3      	ldr	r3, [r4, #8]
 800d46c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d470:	709a      	strb	r2, [r3, #2]
 800d472:	68a3      	ldr	r3, [r4, #8]
 800d474:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d478:	70da      	strb	r2, [r3, #3]
 800d47a:	68a2      	ldr	r2, [r4, #8]
 800d47c:	6923      	ldr	r3, [r4, #16]
 800d47e:	3204      	adds	r2, #4
 800d480:	3304      	adds	r3, #4
 800d482:	2104      	movs	r1, #4
 800d484:	60a2      	str	r2, [r4, #8]
 800d486:	6123      	str	r3, [r4, #16]
 800d488:	7561      	strb	r1, [r4, #21]
 800d48a:	7da0      	ldrb	r0, [r4, #22]
 800d48c:	f080 0001 	eor.w	r0, r0, #1
 800d490:	b002      	add	sp, #8
 800d492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d496:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d49a:	42ab      	cmp	r3, r5
 800d49c:	d92e      	bls.n	800d4fc <ucdr_serialize_int32_t+0xcc>
 800d49e:	1b5e      	subs	r6, r3, r5
 800d4a0:	60a3      	str	r3, [r4, #8]
 800d4a2:	6923      	ldr	r3, [r4, #16]
 800d4a4:	f1c6 0804 	rsb	r8, r6, #4
 800d4a8:	4433      	add	r3, r6
 800d4aa:	6123      	str	r3, [r4, #16]
 800d4ac:	4641      	mov	r1, r8
 800d4ae:	4620      	mov	r0, r4
 800d4b0:	f000 fd8e 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800d4b4:	b398      	cbz	r0, 800d51e <ucdr_serialize_int32_t+0xee>
 800d4b6:	7d23      	ldrb	r3, [r4, #20]
 800d4b8:	2b01      	cmp	r3, #1
 800d4ba:	d046      	beq.n	800d54a <ucdr_serialize_int32_t+0x11a>
 800d4bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d4c0:	702b      	strb	r3, [r5, #0]
 800d4c2:	2e01      	cmp	r6, #1
 800d4c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d4c8:	706b      	strb	r3, [r5, #1]
 800d4ca:	d035      	beq.n	800d538 <ucdr_serialize_int32_t+0x108>
 800d4cc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d4d0:	70ab      	strb	r3, [r5, #2]
 800d4d2:	2e02      	cmp	r6, #2
 800d4d4:	d034      	beq.n	800d540 <ucdr_serialize_int32_t+0x110>
 800d4d6:	3503      	adds	r5, #3
 800d4d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d4dc:	702b      	strb	r3, [r5, #0]
 800d4de:	6923      	ldr	r3, [r4, #16]
 800d4e0:	68a2      	ldr	r2, [r4, #8]
 800d4e2:	7da0      	ldrb	r0, [r4, #22]
 800d4e4:	3304      	adds	r3, #4
 800d4e6:	4442      	add	r2, r8
 800d4e8:	1b9b      	subs	r3, r3, r6
 800d4ea:	2104      	movs	r1, #4
 800d4ec:	f080 0001 	eor.w	r0, r0, #1
 800d4f0:	60a2      	str	r2, [r4, #8]
 800d4f2:	6123      	str	r3, [r4, #16]
 800d4f4:	7561      	strb	r1, [r4, #21]
 800d4f6:	b002      	add	sp, #8
 800d4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4fc:	2104      	movs	r1, #4
 800d4fe:	4620      	mov	r0, r4
 800d500:	f000 fd66 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800d504:	2800      	cmp	r0, #0
 800d506:	d0c0      	beq.n	800d48a <ucdr_serialize_int32_t+0x5a>
 800d508:	7d23      	ldrb	r3, [r4, #20]
 800d50a:	68a2      	ldr	r2, [r4, #8]
 800d50c:	2b01      	cmp	r3, #1
 800d50e:	d019      	beq.n	800d544 <ucdr_serialize_int32_t+0x114>
 800d510:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d514:	7013      	strb	r3, [r2, #0]
 800d516:	e7a4      	b.n	800d462 <ucdr_serialize_int32_t+0x32>
 800d518:	9a01      	ldr	r2, [sp, #4]
 800d51a:	601a      	str	r2, [r3, #0]
 800d51c:	e7ad      	b.n	800d47a <ucdr_serialize_int32_t+0x4a>
 800d51e:	68a2      	ldr	r2, [r4, #8]
 800d520:	6923      	ldr	r3, [r4, #16]
 800d522:	7da0      	ldrb	r0, [r4, #22]
 800d524:	7567      	strb	r7, [r4, #21]
 800d526:	1b92      	subs	r2, r2, r6
 800d528:	1b9b      	subs	r3, r3, r6
 800d52a:	f080 0001 	eor.w	r0, r0, #1
 800d52e:	60a2      	str	r2, [r4, #8]
 800d530:	6123      	str	r3, [r4, #16]
 800d532:	b002      	add	sp, #8
 800d534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d538:	68a3      	ldr	r3, [r4, #8]
 800d53a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d53e:	701a      	strb	r2, [r3, #0]
 800d540:	68a5      	ldr	r5, [r4, #8]
 800d542:	e7c9      	b.n	800d4d8 <ucdr_serialize_int32_t+0xa8>
 800d544:	9b01      	ldr	r3, [sp, #4]
 800d546:	6013      	str	r3, [r2, #0]
 800d548:	e797      	b.n	800d47a <ucdr_serialize_int32_t+0x4a>
 800d54a:	4628      	mov	r0, r5
 800d54c:	ad01      	add	r5, sp, #4
 800d54e:	4632      	mov	r2, r6
 800d550:	4629      	mov	r1, r5
 800d552:	f010 fbcc 	bl	801dcee <memcpy>
 800d556:	68a0      	ldr	r0, [r4, #8]
 800d558:	4642      	mov	r2, r8
 800d55a:	19a9      	adds	r1, r5, r6
 800d55c:	f010 fbc7 	bl	801dcee <memcpy>
 800d560:	e7bd      	b.n	800d4de <ucdr_serialize_int32_t+0xae>
 800d562:	bf00      	nop

0800d564 <ucdr_deserialize_int32_t>:
 800d564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d568:	460d      	mov	r5, r1
 800d56a:	2104      	movs	r1, #4
 800d56c:	4604      	mov	r4, r0
 800d56e:	f000 fd83 	bl	800e078 <ucdr_buffer_alignment>
 800d572:	4601      	mov	r1, r0
 800d574:	4620      	mov	r0, r4
 800d576:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d57a:	f000 fdc1 	bl	800e100 <ucdr_advance_buffer>
 800d57e:	2104      	movs	r1, #4
 800d580:	4620      	mov	r0, r4
 800d582:	f000 fd19 	bl	800dfb8 <ucdr_check_buffer_available_for>
 800d586:	b1d8      	cbz	r0, 800d5c0 <ucdr_deserialize_int32_t+0x5c>
 800d588:	7d22      	ldrb	r2, [r4, #20]
 800d58a:	68a3      	ldr	r3, [r4, #8]
 800d58c:	2a01      	cmp	r2, #1
 800d58e:	d052      	beq.n	800d636 <ucdr_deserialize_int32_t+0xd2>
 800d590:	78db      	ldrb	r3, [r3, #3]
 800d592:	702b      	strb	r3, [r5, #0]
 800d594:	68a3      	ldr	r3, [r4, #8]
 800d596:	789b      	ldrb	r3, [r3, #2]
 800d598:	706b      	strb	r3, [r5, #1]
 800d59a:	68a3      	ldr	r3, [r4, #8]
 800d59c:	785b      	ldrb	r3, [r3, #1]
 800d59e:	70ab      	strb	r3, [r5, #2]
 800d5a0:	68a3      	ldr	r3, [r4, #8]
 800d5a2:	781b      	ldrb	r3, [r3, #0]
 800d5a4:	70eb      	strb	r3, [r5, #3]
 800d5a6:	68a2      	ldr	r2, [r4, #8]
 800d5a8:	6923      	ldr	r3, [r4, #16]
 800d5aa:	3204      	adds	r2, #4
 800d5ac:	3304      	adds	r3, #4
 800d5ae:	2104      	movs	r1, #4
 800d5b0:	60a2      	str	r2, [r4, #8]
 800d5b2:	6123      	str	r3, [r4, #16]
 800d5b4:	7561      	strb	r1, [r4, #21]
 800d5b6:	7da0      	ldrb	r0, [r4, #22]
 800d5b8:	f080 0001 	eor.w	r0, r0, #1
 800d5bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5c0:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d5c4:	42b7      	cmp	r7, r6
 800d5c6:	d92a      	bls.n	800d61e <ucdr_deserialize_int32_t+0xba>
 800d5c8:	6923      	ldr	r3, [r4, #16]
 800d5ca:	60a7      	str	r7, [r4, #8]
 800d5cc:	1bbf      	subs	r7, r7, r6
 800d5ce:	443b      	add	r3, r7
 800d5d0:	f1c7 0904 	rsb	r9, r7, #4
 800d5d4:	6123      	str	r3, [r4, #16]
 800d5d6:	4649      	mov	r1, r9
 800d5d8:	4620      	mov	r0, r4
 800d5da:	f000 fcf9 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800d5de:	b368      	cbz	r0, 800d63c <ucdr_deserialize_int32_t+0xd8>
 800d5e0:	7d23      	ldrb	r3, [r4, #20]
 800d5e2:	2b01      	cmp	r3, #1
 800d5e4:	d040      	beq.n	800d668 <ucdr_deserialize_int32_t+0x104>
 800d5e6:	78f3      	ldrb	r3, [r6, #3]
 800d5e8:	702b      	strb	r3, [r5, #0]
 800d5ea:	78b3      	ldrb	r3, [r6, #2]
 800d5ec:	706b      	strb	r3, [r5, #1]
 800d5ee:	2f01      	cmp	r7, #1
 800d5f0:	d031      	beq.n	800d656 <ucdr_deserialize_int32_t+0xf2>
 800d5f2:	7873      	ldrb	r3, [r6, #1]
 800d5f4:	70ab      	strb	r3, [r5, #2]
 800d5f6:	2f02      	cmp	r7, #2
 800d5f8:	f105 0503 	add.w	r5, r5, #3
 800d5fc:	d02f      	beq.n	800d65e <ucdr_deserialize_int32_t+0xfa>
 800d5fe:	7833      	ldrb	r3, [r6, #0]
 800d600:	702b      	strb	r3, [r5, #0]
 800d602:	6923      	ldr	r3, [r4, #16]
 800d604:	68a2      	ldr	r2, [r4, #8]
 800d606:	7da0      	ldrb	r0, [r4, #22]
 800d608:	2104      	movs	r1, #4
 800d60a:	3304      	adds	r3, #4
 800d60c:	444a      	add	r2, r9
 800d60e:	1bdb      	subs	r3, r3, r7
 800d610:	7561      	strb	r1, [r4, #21]
 800d612:	60a2      	str	r2, [r4, #8]
 800d614:	6123      	str	r3, [r4, #16]
 800d616:	f080 0001 	eor.w	r0, r0, #1
 800d61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d61e:	2104      	movs	r1, #4
 800d620:	4620      	mov	r0, r4
 800d622:	f000 fcd5 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800d626:	2800      	cmp	r0, #0
 800d628:	d0c5      	beq.n	800d5b6 <ucdr_deserialize_int32_t+0x52>
 800d62a:	7d23      	ldrb	r3, [r4, #20]
 800d62c:	68a2      	ldr	r2, [r4, #8]
 800d62e:	2b01      	cmp	r3, #1
 800d630:	d017      	beq.n	800d662 <ucdr_deserialize_int32_t+0xfe>
 800d632:	78d3      	ldrb	r3, [r2, #3]
 800d634:	e7ad      	b.n	800d592 <ucdr_deserialize_int32_t+0x2e>
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	602b      	str	r3, [r5, #0]
 800d63a:	e7b4      	b.n	800d5a6 <ucdr_deserialize_int32_t+0x42>
 800d63c:	68a2      	ldr	r2, [r4, #8]
 800d63e:	6923      	ldr	r3, [r4, #16]
 800d640:	7da0      	ldrb	r0, [r4, #22]
 800d642:	f884 8015 	strb.w	r8, [r4, #21]
 800d646:	1bd2      	subs	r2, r2, r7
 800d648:	1bdb      	subs	r3, r3, r7
 800d64a:	60a2      	str	r2, [r4, #8]
 800d64c:	6123      	str	r3, [r4, #16]
 800d64e:	f080 0001 	eor.w	r0, r0, #1
 800d652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d656:	68a3      	ldr	r3, [r4, #8]
 800d658:	785b      	ldrb	r3, [r3, #1]
 800d65a:	70ab      	strb	r3, [r5, #2]
 800d65c:	3503      	adds	r5, #3
 800d65e:	68a6      	ldr	r6, [r4, #8]
 800d660:	e7cd      	b.n	800d5fe <ucdr_deserialize_int32_t+0x9a>
 800d662:	6813      	ldr	r3, [r2, #0]
 800d664:	602b      	str	r3, [r5, #0]
 800d666:	e79e      	b.n	800d5a6 <ucdr_deserialize_int32_t+0x42>
 800d668:	4631      	mov	r1, r6
 800d66a:	463a      	mov	r2, r7
 800d66c:	4628      	mov	r0, r5
 800d66e:	f010 fb3e 	bl	801dcee <memcpy>
 800d672:	68a1      	ldr	r1, [r4, #8]
 800d674:	464a      	mov	r2, r9
 800d676:	19e8      	adds	r0, r5, r7
 800d678:	f010 fb39 	bl	801dcee <memcpy>
 800d67c:	e7c1      	b.n	800d602 <ucdr_deserialize_int32_t+0x9e>
 800d67e:	bf00      	nop

0800d680 <ucdr_serialize_int64_t>:
 800d680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d684:	2108      	movs	r1, #8
 800d686:	b082      	sub	sp, #8
 800d688:	4604      	mov	r4, r0
 800d68a:	e9cd 2300 	strd	r2, r3, [sp]
 800d68e:	f000 fcf3 	bl	800e078 <ucdr_buffer_alignment>
 800d692:	4601      	mov	r1, r0
 800d694:	4620      	mov	r0, r4
 800d696:	7d67      	ldrb	r7, [r4, #21]
 800d698:	f000 fd32 	bl	800e100 <ucdr_advance_buffer>
 800d69c:	2108      	movs	r1, #8
 800d69e:	4620      	mov	r0, r4
 800d6a0:	f000 fc8a 	bl	800dfb8 <ucdr_check_buffer_available_for>
 800d6a4:	2800      	cmp	r0, #0
 800d6a6:	d14d      	bne.n	800d744 <ucdr_serialize_int64_t+0xc4>
 800d6a8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d6ac:	42ab      	cmp	r3, r5
 800d6ae:	d944      	bls.n	800d73a <ucdr_serialize_int64_t+0xba>
 800d6b0:	1b5e      	subs	r6, r3, r5
 800d6b2:	60a3      	str	r3, [r4, #8]
 800d6b4:	6923      	ldr	r3, [r4, #16]
 800d6b6:	f1c6 0808 	rsb	r8, r6, #8
 800d6ba:	4433      	add	r3, r6
 800d6bc:	6123      	str	r3, [r4, #16]
 800d6be:	4641      	mov	r1, r8
 800d6c0:	4620      	mov	r0, r4
 800d6c2:	f000 fc85 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800d6c6:	2800      	cmp	r0, #0
 800d6c8:	d072      	beq.n	800d7b0 <ucdr_serialize_int64_t+0x130>
 800d6ca:	7d23      	ldrb	r3, [r4, #20]
 800d6cc:	2b01      	cmp	r3, #1
 800d6ce:	f000 8092 	beq.w	800d7f6 <ucdr_serialize_int64_t+0x176>
 800d6d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d6d6:	702b      	strb	r3, [r5, #0]
 800d6d8:	2e01      	cmp	r6, #1
 800d6da:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d6de:	706b      	strb	r3, [r5, #1]
 800d6e0:	d073      	beq.n	800d7ca <ucdr_serialize_int64_t+0x14a>
 800d6e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d6e6:	70ab      	strb	r3, [r5, #2]
 800d6e8:	2e02      	cmp	r6, #2
 800d6ea:	d072      	beq.n	800d7d2 <ucdr_serialize_int64_t+0x152>
 800d6ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d6f0:	70eb      	strb	r3, [r5, #3]
 800d6f2:	2e03      	cmp	r6, #3
 800d6f4:	d071      	beq.n	800d7da <ucdr_serialize_int64_t+0x15a>
 800d6f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d6fa:	712b      	strb	r3, [r5, #4]
 800d6fc:	2e04      	cmp	r6, #4
 800d6fe:	d070      	beq.n	800d7e2 <ucdr_serialize_int64_t+0x162>
 800d700:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d704:	716b      	strb	r3, [r5, #5]
 800d706:	2e05      	cmp	r6, #5
 800d708:	d06f      	beq.n	800d7ea <ucdr_serialize_int64_t+0x16a>
 800d70a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d70e:	71ab      	strb	r3, [r5, #6]
 800d710:	2e06      	cmp	r6, #6
 800d712:	d06e      	beq.n	800d7f2 <ucdr_serialize_int64_t+0x172>
 800d714:	3507      	adds	r5, #7
 800d716:	f89d 3000 	ldrb.w	r3, [sp]
 800d71a:	702b      	strb	r3, [r5, #0]
 800d71c:	6923      	ldr	r3, [r4, #16]
 800d71e:	68a2      	ldr	r2, [r4, #8]
 800d720:	7da0      	ldrb	r0, [r4, #22]
 800d722:	3308      	adds	r3, #8
 800d724:	4442      	add	r2, r8
 800d726:	1b9b      	subs	r3, r3, r6
 800d728:	2108      	movs	r1, #8
 800d72a:	f080 0001 	eor.w	r0, r0, #1
 800d72e:	60a2      	str	r2, [r4, #8]
 800d730:	6123      	str	r3, [r4, #16]
 800d732:	7561      	strb	r1, [r4, #21]
 800d734:	b002      	add	sp, #8
 800d736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d73a:	2108      	movs	r1, #8
 800d73c:	4620      	mov	r0, r4
 800d73e:	f000 fc47 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800d742:	b350      	cbz	r0, 800d79a <ucdr_serialize_int64_t+0x11a>
 800d744:	7d22      	ldrb	r2, [r4, #20]
 800d746:	68a3      	ldr	r3, [r4, #8]
 800d748:	2a01      	cmp	r2, #1
 800d74a:	d02c      	beq.n	800d7a6 <ucdr_serialize_int64_t+0x126>
 800d74c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d750:	701a      	strb	r2, [r3, #0]
 800d752:	68a3      	ldr	r3, [r4, #8]
 800d754:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d758:	705a      	strb	r2, [r3, #1]
 800d75a:	68a3      	ldr	r3, [r4, #8]
 800d75c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d760:	709a      	strb	r2, [r3, #2]
 800d762:	68a3      	ldr	r3, [r4, #8]
 800d764:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d768:	70da      	strb	r2, [r3, #3]
 800d76a:	68a3      	ldr	r3, [r4, #8]
 800d76c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d770:	711a      	strb	r2, [r3, #4]
 800d772:	68a3      	ldr	r3, [r4, #8]
 800d774:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d778:	715a      	strb	r2, [r3, #5]
 800d77a:	68a3      	ldr	r3, [r4, #8]
 800d77c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d780:	719a      	strb	r2, [r3, #6]
 800d782:	68a3      	ldr	r3, [r4, #8]
 800d784:	f89d 2000 	ldrb.w	r2, [sp]
 800d788:	71da      	strb	r2, [r3, #7]
 800d78a:	68a2      	ldr	r2, [r4, #8]
 800d78c:	6923      	ldr	r3, [r4, #16]
 800d78e:	3208      	adds	r2, #8
 800d790:	3308      	adds	r3, #8
 800d792:	2108      	movs	r1, #8
 800d794:	60a2      	str	r2, [r4, #8]
 800d796:	6123      	str	r3, [r4, #16]
 800d798:	7561      	strb	r1, [r4, #21]
 800d79a:	7da0      	ldrb	r0, [r4, #22]
 800d79c:	f080 0001 	eor.w	r0, r0, #1
 800d7a0:	b002      	add	sp, #8
 800d7a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d7aa:	6019      	str	r1, [r3, #0]
 800d7ac:	605a      	str	r2, [r3, #4]
 800d7ae:	e7ec      	b.n	800d78a <ucdr_serialize_int64_t+0x10a>
 800d7b0:	68a2      	ldr	r2, [r4, #8]
 800d7b2:	6923      	ldr	r3, [r4, #16]
 800d7b4:	7da0      	ldrb	r0, [r4, #22]
 800d7b6:	7567      	strb	r7, [r4, #21]
 800d7b8:	1b92      	subs	r2, r2, r6
 800d7ba:	1b9b      	subs	r3, r3, r6
 800d7bc:	f080 0001 	eor.w	r0, r0, #1
 800d7c0:	60a2      	str	r2, [r4, #8]
 800d7c2:	6123      	str	r3, [r4, #16]
 800d7c4:	b002      	add	sp, #8
 800d7c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7ca:	68a3      	ldr	r3, [r4, #8]
 800d7cc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d7d0:	701a      	strb	r2, [r3, #0]
 800d7d2:	68a3      	ldr	r3, [r4, #8]
 800d7d4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d7d8:	701a      	strb	r2, [r3, #0]
 800d7da:	68a3      	ldr	r3, [r4, #8]
 800d7dc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d7e0:	701a      	strb	r2, [r3, #0]
 800d7e2:	68a3      	ldr	r3, [r4, #8]
 800d7e4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d7e8:	701a      	strb	r2, [r3, #0]
 800d7ea:	68a3      	ldr	r3, [r4, #8]
 800d7ec:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d7f0:	701a      	strb	r2, [r3, #0]
 800d7f2:	68a5      	ldr	r5, [r4, #8]
 800d7f4:	e78f      	b.n	800d716 <ucdr_serialize_int64_t+0x96>
 800d7f6:	4628      	mov	r0, r5
 800d7f8:	466d      	mov	r5, sp
 800d7fa:	4632      	mov	r2, r6
 800d7fc:	4629      	mov	r1, r5
 800d7fe:	f010 fa76 	bl	801dcee <memcpy>
 800d802:	68a0      	ldr	r0, [r4, #8]
 800d804:	4642      	mov	r2, r8
 800d806:	19a9      	adds	r1, r5, r6
 800d808:	f010 fa71 	bl	801dcee <memcpy>
 800d80c:	e786      	b.n	800d71c <ucdr_serialize_int64_t+0x9c>
 800d80e:	bf00      	nop

0800d810 <ucdr_deserialize_int64_t>:
 800d810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d814:	460d      	mov	r5, r1
 800d816:	2108      	movs	r1, #8
 800d818:	4604      	mov	r4, r0
 800d81a:	f000 fc2d 	bl	800e078 <ucdr_buffer_alignment>
 800d81e:	4601      	mov	r1, r0
 800d820:	4620      	mov	r0, r4
 800d822:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d826:	f000 fc6b 	bl	800e100 <ucdr_advance_buffer>
 800d82a:	2108      	movs	r1, #8
 800d82c:	4620      	mov	r0, r4
 800d82e:	f000 fbc3 	bl	800dfb8 <ucdr_check_buffer_available_for>
 800d832:	2800      	cmp	r0, #0
 800d834:	d147      	bne.n	800d8c6 <ucdr_deserialize_int64_t+0xb6>
 800d836:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d83a:	42be      	cmp	r6, r7
 800d83c:	d93e      	bls.n	800d8bc <ucdr_deserialize_int64_t+0xac>
 800d83e:	6923      	ldr	r3, [r4, #16]
 800d840:	60a6      	str	r6, [r4, #8]
 800d842:	1bf6      	subs	r6, r6, r7
 800d844:	4433      	add	r3, r6
 800d846:	f1c6 0908 	rsb	r9, r6, #8
 800d84a:	6123      	str	r3, [r4, #16]
 800d84c:	4649      	mov	r1, r9
 800d84e:	4620      	mov	r0, r4
 800d850:	f000 fbbe 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800d854:	2800      	cmp	r0, #0
 800d856:	d063      	beq.n	800d920 <ucdr_deserialize_int64_t+0x110>
 800d858:	7d23      	ldrb	r3, [r4, #20]
 800d85a:	2b01      	cmp	r3, #1
 800d85c:	f000 8083 	beq.w	800d966 <ucdr_deserialize_int64_t+0x156>
 800d860:	79fb      	ldrb	r3, [r7, #7]
 800d862:	702b      	strb	r3, [r5, #0]
 800d864:	79bb      	ldrb	r3, [r7, #6]
 800d866:	706b      	strb	r3, [r5, #1]
 800d868:	2e01      	cmp	r6, #1
 800d86a:	d066      	beq.n	800d93a <ucdr_deserialize_int64_t+0x12a>
 800d86c:	797b      	ldrb	r3, [r7, #5]
 800d86e:	70ab      	strb	r3, [r5, #2]
 800d870:	2e02      	cmp	r6, #2
 800d872:	f000 8089 	beq.w	800d988 <ucdr_deserialize_int64_t+0x178>
 800d876:	793b      	ldrb	r3, [r7, #4]
 800d878:	70eb      	strb	r3, [r5, #3]
 800d87a:	2e03      	cmp	r6, #3
 800d87c:	f000 8082 	beq.w	800d984 <ucdr_deserialize_int64_t+0x174>
 800d880:	78fb      	ldrb	r3, [r7, #3]
 800d882:	712b      	strb	r3, [r5, #4]
 800d884:	2e04      	cmp	r6, #4
 800d886:	d07b      	beq.n	800d980 <ucdr_deserialize_int64_t+0x170>
 800d888:	78bb      	ldrb	r3, [r7, #2]
 800d88a:	716b      	strb	r3, [r5, #5]
 800d88c:	2e05      	cmp	r6, #5
 800d88e:	d075      	beq.n	800d97c <ucdr_deserialize_int64_t+0x16c>
 800d890:	787b      	ldrb	r3, [r7, #1]
 800d892:	71ab      	strb	r3, [r5, #6]
 800d894:	2e06      	cmp	r6, #6
 800d896:	f105 0507 	add.w	r5, r5, #7
 800d89a:	d062      	beq.n	800d962 <ucdr_deserialize_int64_t+0x152>
 800d89c:	783b      	ldrb	r3, [r7, #0]
 800d89e:	702b      	strb	r3, [r5, #0]
 800d8a0:	6923      	ldr	r3, [r4, #16]
 800d8a2:	68a2      	ldr	r2, [r4, #8]
 800d8a4:	7da0      	ldrb	r0, [r4, #22]
 800d8a6:	2108      	movs	r1, #8
 800d8a8:	3308      	adds	r3, #8
 800d8aa:	444a      	add	r2, r9
 800d8ac:	1b9b      	subs	r3, r3, r6
 800d8ae:	7561      	strb	r1, [r4, #21]
 800d8b0:	60a2      	str	r2, [r4, #8]
 800d8b2:	6123      	str	r3, [r4, #16]
 800d8b4:	f080 0001 	eor.w	r0, r0, #1
 800d8b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8bc:	2108      	movs	r1, #8
 800d8be:	4620      	mov	r0, r4
 800d8c0:	f000 fb86 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800d8c4:	b310      	cbz	r0, 800d90c <ucdr_deserialize_int64_t+0xfc>
 800d8c6:	7d22      	ldrb	r2, [r4, #20]
 800d8c8:	68a3      	ldr	r3, [r4, #8]
 800d8ca:	2a01      	cmp	r2, #1
 800d8cc:	d023      	beq.n	800d916 <ucdr_deserialize_int64_t+0x106>
 800d8ce:	79db      	ldrb	r3, [r3, #7]
 800d8d0:	702b      	strb	r3, [r5, #0]
 800d8d2:	68a3      	ldr	r3, [r4, #8]
 800d8d4:	799b      	ldrb	r3, [r3, #6]
 800d8d6:	706b      	strb	r3, [r5, #1]
 800d8d8:	68a3      	ldr	r3, [r4, #8]
 800d8da:	795b      	ldrb	r3, [r3, #5]
 800d8dc:	70ab      	strb	r3, [r5, #2]
 800d8de:	68a3      	ldr	r3, [r4, #8]
 800d8e0:	791b      	ldrb	r3, [r3, #4]
 800d8e2:	70eb      	strb	r3, [r5, #3]
 800d8e4:	68a3      	ldr	r3, [r4, #8]
 800d8e6:	78db      	ldrb	r3, [r3, #3]
 800d8e8:	712b      	strb	r3, [r5, #4]
 800d8ea:	68a3      	ldr	r3, [r4, #8]
 800d8ec:	789b      	ldrb	r3, [r3, #2]
 800d8ee:	716b      	strb	r3, [r5, #5]
 800d8f0:	68a3      	ldr	r3, [r4, #8]
 800d8f2:	785b      	ldrb	r3, [r3, #1]
 800d8f4:	71ab      	strb	r3, [r5, #6]
 800d8f6:	68a3      	ldr	r3, [r4, #8]
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	71eb      	strb	r3, [r5, #7]
 800d8fc:	68a2      	ldr	r2, [r4, #8]
 800d8fe:	6923      	ldr	r3, [r4, #16]
 800d900:	3208      	adds	r2, #8
 800d902:	3308      	adds	r3, #8
 800d904:	2108      	movs	r1, #8
 800d906:	60a2      	str	r2, [r4, #8]
 800d908:	6123      	str	r3, [r4, #16]
 800d90a:	7561      	strb	r1, [r4, #21]
 800d90c:	7da0      	ldrb	r0, [r4, #22]
 800d90e:	f080 0001 	eor.w	r0, r0, #1
 800d912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d916:	681a      	ldr	r2, [r3, #0]
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	606b      	str	r3, [r5, #4]
 800d91c:	602a      	str	r2, [r5, #0]
 800d91e:	e7ed      	b.n	800d8fc <ucdr_deserialize_int64_t+0xec>
 800d920:	68a2      	ldr	r2, [r4, #8]
 800d922:	6923      	ldr	r3, [r4, #16]
 800d924:	7da0      	ldrb	r0, [r4, #22]
 800d926:	f884 8015 	strb.w	r8, [r4, #21]
 800d92a:	1b92      	subs	r2, r2, r6
 800d92c:	1b9b      	subs	r3, r3, r6
 800d92e:	60a2      	str	r2, [r4, #8]
 800d930:	6123      	str	r3, [r4, #16]
 800d932:	f080 0001 	eor.w	r0, r0, #1
 800d936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d93a:	68a3      	ldr	r3, [r4, #8]
 800d93c:	795b      	ldrb	r3, [r3, #5]
 800d93e:	70ab      	strb	r3, [r5, #2]
 800d940:	3503      	adds	r5, #3
 800d942:	68a3      	ldr	r3, [r4, #8]
 800d944:	791b      	ldrb	r3, [r3, #4]
 800d946:	f805 3b01 	strb.w	r3, [r5], #1
 800d94a:	68a3      	ldr	r3, [r4, #8]
 800d94c:	78db      	ldrb	r3, [r3, #3]
 800d94e:	f805 3b01 	strb.w	r3, [r5], #1
 800d952:	68a3      	ldr	r3, [r4, #8]
 800d954:	789b      	ldrb	r3, [r3, #2]
 800d956:	f805 3b01 	strb.w	r3, [r5], #1
 800d95a:	68a3      	ldr	r3, [r4, #8]
 800d95c:	785b      	ldrb	r3, [r3, #1]
 800d95e:	f805 3b01 	strb.w	r3, [r5], #1
 800d962:	68a7      	ldr	r7, [r4, #8]
 800d964:	e79a      	b.n	800d89c <ucdr_deserialize_int64_t+0x8c>
 800d966:	4639      	mov	r1, r7
 800d968:	4632      	mov	r2, r6
 800d96a:	4628      	mov	r0, r5
 800d96c:	f010 f9bf 	bl	801dcee <memcpy>
 800d970:	68a1      	ldr	r1, [r4, #8]
 800d972:	464a      	mov	r2, r9
 800d974:	19a8      	adds	r0, r5, r6
 800d976:	f010 f9ba 	bl	801dcee <memcpy>
 800d97a:	e791      	b.n	800d8a0 <ucdr_deserialize_int64_t+0x90>
 800d97c:	3506      	adds	r5, #6
 800d97e:	e7ec      	b.n	800d95a <ucdr_deserialize_int64_t+0x14a>
 800d980:	3505      	adds	r5, #5
 800d982:	e7e6      	b.n	800d952 <ucdr_deserialize_int64_t+0x142>
 800d984:	3504      	adds	r5, #4
 800d986:	e7e0      	b.n	800d94a <ucdr_deserialize_int64_t+0x13a>
 800d988:	3503      	adds	r5, #3
 800d98a:	e7da      	b.n	800d942 <ucdr_deserialize_int64_t+0x132>

0800d98c <ucdr_serialize_double>:
 800d98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d990:	2108      	movs	r1, #8
 800d992:	b082      	sub	sp, #8
 800d994:	4604      	mov	r4, r0
 800d996:	ed8d 0b00 	vstr	d0, [sp]
 800d99a:	f000 fb6d 	bl	800e078 <ucdr_buffer_alignment>
 800d99e:	4601      	mov	r1, r0
 800d9a0:	4620      	mov	r0, r4
 800d9a2:	7d67      	ldrb	r7, [r4, #21]
 800d9a4:	f000 fbac 	bl	800e100 <ucdr_advance_buffer>
 800d9a8:	2108      	movs	r1, #8
 800d9aa:	4620      	mov	r0, r4
 800d9ac:	f000 fb04 	bl	800dfb8 <ucdr_check_buffer_available_for>
 800d9b0:	2800      	cmp	r0, #0
 800d9b2:	d14d      	bne.n	800da50 <ucdr_serialize_double+0xc4>
 800d9b4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d9b8:	42ab      	cmp	r3, r5
 800d9ba:	d944      	bls.n	800da46 <ucdr_serialize_double+0xba>
 800d9bc:	1b5e      	subs	r6, r3, r5
 800d9be:	60a3      	str	r3, [r4, #8]
 800d9c0:	6923      	ldr	r3, [r4, #16]
 800d9c2:	f1c6 0808 	rsb	r8, r6, #8
 800d9c6:	4433      	add	r3, r6
 800d9c8:	6123      	str	r3, [r4, #16]
 800d9ca:	4641      	mov	r1, r8
 800d9cc:	4620      	mov	r0, r4
 800d9ce:	f000 faff 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800d9d2:	2800      	cmp	r0, #0
 800d9d4:	d072      	beq.n	800dabc <ucdr_serialize_double+0x130>
 800d9d6:	7d23      	ldrb	r3, [r4, #20]
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	f000 8092 	beq.w	800db02 <ucdr_serialize_double+0x176>
 800d9de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d9e2:	702b      	strb	r3, [r5, #0]
 800d9e4:	2e01      	cmp	r6, #1
 800d9e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d9ea:	706b      	strb	r3, [r5, #1]
 800d9ec:	d073      	beq.n	800dad6 <ucdr_serialize_double+0x14a>
 800d9ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d9f2:	70ab      	strb	r3, [r5, #2]
 800d9f4:	2e02      	cmp	r6, #2
 800d9f6:	d072      	beq.n	800dade <ucdr_serialize_double+0x152>
 800d9f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d9fc:	70eb      	strb	r3, [r5, #3]
 800d9fe:	2e03      	cmp	r6, #3
 800da00:	d071      	beq.n	800dae6 <ucdr_serialize_double+0x15a>
 800da02:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800da06:	712b      	strb	r3, [r5, #4]
 800da08:	2e04      	cmp	r6, #4
 800da0a:	d070      	beq.n	800daee <ucdr_serialize_double+0x162>
 800da0c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800da10:	716b      	strb	r3, [r5, #5]
 800da12:	2e05      	cmp	r6, #5
 800da14:	d06f      	beq.n	800daf6 <ucdr_serialize_double+0x16a>
 800da16:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800da1a:	71ab      	strb	r3, [r5, #6]
 800da1c:	2e06      	cmp	r6, #6
 800da1e:	d06e      	beq.n	800dafe <ucdr_serialize_double+0x172>
 800da20:	3507      	adds	r5, #7
 800da22:	f89d 3000 	ldrb.w	r3, [sp]
 800da26:	702b      	strb	r3, [r5, #0]
 800da28:	6923      	ldr	r3, [r4, #16]
 800da2a:	68a2      	ldr	r2, [r4, #8]
 800da2c:	7da0      	ldrb	r0, [r4, #22]
 800da2e:	3308      	adds	r3, #8
 800da30:	4442      	add	r2, r8
 800da32:	1b9b      	subs	r3, r3, r6
 800da34:	2108      	movs	r1, #8
 800da36:	f080 0001 	eor.w	r0, r0, #1
 800da3a:	60a2      	str	r2, [r4, #8]
 800da3c:	6123      	str	r3, [r4, #16]
 800da3e:	7561      	strb	r1, [r4, #21]
 800da40:	b002      	add	sp, #8
 800da42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da46:	2108      	movs	r1, #8
 800da48:	4620      	mov	r0, r4
 800da4a:	f000 fac1 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800da4e:	b350      	cbz	r0, 800daa6 <ucdr_serialize_double+0x11a>
 800da50:	7d22      	ldrb	r2, [r4, #20]
 800da52:	68a3      	ldr	r3, [r4, #8]
 800da54:	2a01      	cmp	r2, #1
 800da56:	d02c      	beq.n	800dab2 <ucdr_serialize_double+0x126>
 800da58:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800da5c:	701a      	strb	r2, [r3, #0]
 800da5e:	68a3      	ldr	r3, [r4, #8]
 800da60:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800da64:	705a      	strb	r2, [r3, #1]
 800da66:	68a3      	ldr	r3, [r4, #8]
 800da68:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800da6c:	709a      	strb	r2, [r3, #2]
 800da6e:	68a3      	ldr	r3, [r4, #8]
 800da70:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800da74:	70da      	strb	r2, [r3, #3]
 800da76:	68a3      	ldr	r3, [r4, #8]
 800da78:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800da7c:	711a      	strb	r2, [r3, #4]
 800da7e:	68a3      	ldr	r3, [r4, #8]
 800da80:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800da84:	715a      	strb	r2, [r3, #5]
 800da86:	68a3      	ldr	r3, [r4, #8]
 800da88:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800da8c:	719a      	strb	r2, [r3, #6]
 800da8e:	68a3      	ldr	r3, [r4, #8]
 800da90:	f89d 2000 	ldrb.w	r2, [sp]
 800da94:	71da      	strb	r2, [r3, #7]
 800da96:	68a2      	ldr	r2, [r4, #8]
 800da98:	6923      	ldr	r3, [r4, #16]
 800da9a:	3208      	adds	r2, #8
 800da9c:	3308      	adds	r3, #8
 800da9e:	2108      	movs	r1, #8
 800daa0:	60a2      	str	r2, [r4, #8]
 800daa2:	6123      	str	r3, [r4, #16]
 800daa4:	7561      	strb	r1, [r4, #21]
 800daa6:	7da0      	ldrb	r0, [r4, #22]
 800daa8:	f080 0001 	eor.w	r0, r0, #1
 800daac:	b002      	add	sp, #8
 800daae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dab2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dab6:	6019      	str	r1, [r3, #0]
 800dab8:	605a      	str	r2, [r3, #4]
 800daba:	e7ec      	b.n	800da96 <ucdr_serialize_double+0x10a>
 800dabc:	68a2      	ldr	r2, [r4, #8]
 800dabe:	6923      	ldr	r3, [r4, #16]
 800dac0:	7da0      	ldrb	r0, [r4, #22]
 800dac2:	7567      	strb	r7, [r4, #21]
 800dac4:	1b92      	subs	r2, r2, r6
 800dac6:	1b9b      	subs	r3, r3, r6
 800dac8:	f080 0001 	eor.w	r0, r0, #1
 800dacc:	60a2      	str	r2, [r4, #8]
 800dace:	6123      	str	r3, [r4, #16]
 800dad0:	b002      	add	sp, #8
 800dad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dad6:	68a3      	ldr	r3, [r4, #8]
 800dad8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dadc:	701a      	strb	r2, [r3, #0]
 800dade:	68a3      	ldr	r3, [r4, #8]
 800dae0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dae4:	701a      	strb	r2, [r3, #0]
 800dae6:	68a3      	ldr	r3, [r4, #8]
 800dae8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800daec:	701a      	strb	r2, [r3, #0]
 800daee:	68a3      	ldr	r3, [r4, #8]
 800daf0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800daf4:	701a      	strb	r2, [r3, #0]
 800daf6:	68a3      	ldr	r3, [r4, #8]
 800daf8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800dafc:	701a      	strb	r2, [r3, #0]
 800dafe:	68a5      	ldr	r5, [r4, #8]
 800db00:	e78f      	b.n	800da22 <ucdr_serialize_double+0x96>
 800db02:	4628      	mov	r0, r5
 800db04:	466d      	mov	r5, sp
 800db06:	4632      	mov	r2, r6
 800db08:	4629      	mov	r1, r5
 800db0a:	f010 f8f0 	bl	801dcee <memcpy>
 800db0e:	68a0      	ldr	r0, [r4, #8]
 800db10:	4642      	mov	r2, r8
 800db12:	19a9      	adds	r1, r5, r6
 800db14:	f010 f8eb 	bl	801dcee <memcpy>
 800db18:	e786      	b.n	800da28 <ucdr_serialize_double+0x9c>
 800db1a:	bf00      	nop

0800db1c <ucdr_serialize_endian_double>:
 800db1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db20:	460e      	mov	r6, r1
 800db22:	b083      	sub	sp, #12
 800db24:	2108      	movs	r1, #8
 800db26:	4604      	mov	r4, r0
 800db28:	ed8d 0b00 	vstr	d0, [sp]
 800db2c:	f000 faa4 	bl	800e078 <ucdr_buffer_alignment>
 800db30:	4601      	mov	r1, r0
 800db32:	4620      	mov	r0, r4
 800db34:	f894 8015 	ldrb.w	r8, [r4, #21]
 800db38:	f000 fae2 	bl	800e100 <ucdr_advance_buffer>
 800db3c:	2108      	movs	r1, #8
 800db3e:	4620      	mov	r0, r4
 800db40:	f000 fa3a 	bl	800dfb8 <ucdr_check_buffer_available_for>
 800db44:	2800      	cmp	r0, #0
 800db46:	d14c      	bne.n	800dbe2 <ucdr_serialize_endian_double+0xc6>
 800db48:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800db4c:	42bd      	cmp	r5, r7
 800db4e:	d943      	bls.n	800dbd8 <ucdr_serialize_endian_double+0xbc>
 800db50:	6923      	ldr	r3, [r4, #16]
 800db52:	60a5      	str	r5, [r4, #8]
 800db54:	1bed      	subs	r5, r5, r7
 800db56:	442b      	add	r3, r5
 800db58:	f1c5 0908 	rsb	r9, r5, #8
 800db5c:	6123      	str	r3, [r4, #16]
 800db5e:	4649      	mov	r1, r9
 800db60:	4620      	mov	r0, r4
 800db62:	f000 fa35 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800db66:	2800      	cmp	r0, #0
 800db68:	d070      	beq.n	800dc4c <ucdr_serialize_endian_double+0x130>
 800db6a:	2e01      	cmp	r6, #1
 800db6c:	f000 8092 	beq.w	800dc94 <ucdr_serialize_endian_double+0x178>
 800db70:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800db74:	703b      	strb	r3, [r7, #0]
 800db76:	2d01      	cmp	r5, #1
 800db78:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800db7c:	707b      	strb	r3, [r7, #1]
 800db7e:	d073      	beq.n	800dc68 <ucdr_serialize_endian_double+0x14c>
 800db80:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800db84:	70bb      	strb	r3, [r7, #2]
 800db86:	2d02      	cmp	r5, #2
 800db88:	d072      	beq.n	800dc70 <ucdr_serialize_endian_double+0x154>
 800db8a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800db8e:	70fb      	strb	r3, [r7, #3]
 800db90:	2d03      	cmp	r5, #3
 800db92:	d071      	beq.n	800dc78 <ucdr_serialize_endian_double+0x15c>
 800db94:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800db98:	713b      	strb	r3, [r7, #4]
 800db9a:	2d04      	cmp	r5, #4
 800db9c:	d070      	beq.n	800dc80 <ucdr_serialize_endian_double+0x164>
 800db9e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800dba2:	717b      	strb	r3, [r7, #5]
 800dba4:	2d05      	cmp	r5, #5
 800dba6:	d06f      	beq.n	800dc88 <ucdr_serialize_endian_double+0x16c>
 800dba8:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800dbac:	71bb      	strb	r3, [r7, #6]
 800dbae:	2d06      	cmp	r5, #6
 800dbb0:	d06e      	beq.n	800dc90 <ucdr_serialize_endian_double+0x174>
 800dbb2:	3707      	adds	r7, #7
 800dbb4:	f89d 3000 	ldrb.w	r3, [sp]
 800dbb8:	703b      	strb	r3, [r7, #0]
 800dbba:	6923      	ldr	r3, [r4, #16]
 800dbbc:	68a2      	ldr	r2, [r4, #8]
 800dbbe:	7da0      	ldrb	r0, [r4, #22]
 800dbc0:	3308      	adds	r3, #8
 800dbc2:	444a      	add	r2, r9
 800dbc4:	1b5b      	subs	r3, r3, r5
 800dbc6:	2108      	movs	r1, #8
 800dbc8:	f080 0001 	eor.w	r0, r0, #1
 800dbcc:	60a2      	str	r2, [r4, #8]
 800dbce:	6123      	str	r3, [r4, #16]
 800dbd0:	7561      	strb	r1, [r4, #21]
 800dbd2:	b003      	add	sp, #12
 800dbd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbd8:	2108      	movs	r1, #8
 800dbda:	4620      	mov	r0, r4
 800dbdc:	f000 f9f8 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800dbe0:	b348      	cbz	r0, 800dc36 <ucdr_serialize_endian_double+0x11a>
 800dbe2:	2e01      	cmp	r6, #1
 800dbe4:	68a3      	ldr	r3, [r4, #8]
 800dbe6:	d02c      	beq.n	800dc42 <ucdr_serialize_endian_double+0x126>
 800dbe8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800dbec:	701a      	strb	r2, [r3, #0]
 800dbee:	68a3      	ldr	r3, [r4, #8]
 800dbf0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dbf4:	705a      	strb	r2, [r3, #1]
 800dbf6:	68a3      	ldr	r3, [r4, #8]
 800dbf8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dbfc:	709a      	strb	r2, [r3, #2]
 800dbfe:	68a3      	ldr	r3, [r4, #8]
 800dc00:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dc04:	70da      	strb	r2, [r3, #3]
 800dc06:	68a3      	ldr	r3, [r4, #8]
 800dc08:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800dc0c:	711a      	strb	r2, [r3, #4]
 800dc0e:	68a3      	ldr	r3, [r4, #8]
 800dc10:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800dc14:	715a      	strb	r2, [r3, #5]
 800dc16:	68a3      	ldr	r3, [r4, #8]
 800dc18:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800dc1c:	719a      	strb	r2, [r3, #6]
 800dc1e:	68a3      	ldr	r3, [r4, #8]
 800dc20:	f89d 2000 	ldrb.w	r2, [sp]
 800dc24:	71da      	strb	r2, [r3, #7]
 800dc26:	68a2      	ldr	r2, [r4, #8]
 800dc28:	6923      	ldr	r3, [r4, #16]
 800dc2a:	3208      	adds	r2, #8
 800dc2c:	3308      	adds	r3, #8
 800dc2e:	2108      	movs	r1, #8
 800dc30:	60a2      	str	r2, [r4, #8]
 800dc32:	6123      	str	r3, [r4, #16]
 800dc34:	7561      	strb	r1, [r4, #21]
 800dc36:	7da0      	ldrb	r0, [r4, #22]
 800dc38:	f080 0001 	eor.w	r0, r0, #1
 800dc3c:	b003      	add	sp, #12
 800dc3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc42:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dc46:	6019      	str	r1, [r3, #0]
 800dc48:	605a      	str	r2, [r3, #4]
 800dc4a:	e7ec      	b.n	800dc26 <ucdr_serialize_endian_double+0x10a>
 800dc4c:	68a2      	ldr	r2, [r4, #8]
 800dc4e:	6923      	ldr	r3, [r4, #16]
 800dc50:	7da0      	ldrb	r0, [r4, #22]
 800dc52:	f884 8015 	strb.w	r8, [r4, #21]
 800dc56:	1b52      	subs	r2, r2, r5
 800dc58:	1b5b      	subs	r3, r3, r5
 800dc5a:	f080 0001 	eor.w	r0, r0, #1
 800dc5e:	60a2      	str	r2, [r4, #8]
 800dc60:	6123      	str	r3, [r4, #16]
 800dc62:	b003      	add	sp, #12
 800dc64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc68:	68a3      	ldr	r3, [r4, #8]
 800dc6a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dc6e:	701a      	strb	r2, [r3, #0]
 800dc70:	68a3      	ldr	r3, [r4, #8]
 800dc72:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dc76:	701a      	strb	r2, [r3, #0]
 800dc78:	68a3      	ldr	r3, [r4, #8]
 800dc7a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800dc7e:	701a      	strb	r2, [r3, #0]
 800dc80:	68a3      	ldr	r3, [r4, #8]
 800dc82:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800dc86:	701a      	strb	r2, [r3, #0]
 800dc88:	68a3      	ldr	r3, [r4, #8]
 800dc8a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800dc8e:	701a      	strb	r2, [r3, #0]
 800dc90:	68a7      	ldr	r7, [r4, #8]
 800dc92:	e78f      	b.n	800dbb4 <ucdr_serialize_endian_double+0x98>
 800dc94:	466e      	mov	r6, sp
 800dc96:	462a      	mov	r2, r5
 800dc98:	4631      	mov	r1, r6
 800dc9a:	4638      	mov	r0, r7
 800dc9c:	f010 f827 	bl	801dcee <memcpy>
 800dca0:	68a0      	ldr	r0, [r4, #8]
 800dca2:	464a      	mov	r2, r9
 800dca4:	1971      	adds	r1, r6, r5
 800dca6:	f010 f822 	bl	801dcee <memcpy>
 800dcaa:	e786      	b.n	800dbba <ucdr_serialize_endian_double+0x9e>

0800dcac <ucdr_deserialize_double>:
 800dcac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcb0:	460d      	mov	r5, r1
 800dcb2:	2108      	movs	r1, #8
 800dcb4:	4604      	mov	r4, r0
 800dcb6:	f000 f9df 	bl	800e078 <ucdr_buffer_alignment>
 800dcba:	4601      	mov	r1, r0
 800dcbc:	4620      	mov	r0, r4
 800dcbe:	f894 8015 	ldrb.w	r8, [r4, #21]
 800dcc2:	f000 fa1d 	bl	800e100 <ucdr_advance_buffer>
 800dcc6:	2108      	movs	r1, #8
 800dcc8:	4620      	mov	r0, r4
 800dcca:	f000 f975 	bl	800dfb8 <ucdr_check_buffer_available_for>
 800dcce:	2800      	cmp	r0, #0
 800dcd0:	d147      	bne.n	800dd62 <ucdr_deserialize_double+0xb6>
 800dcd2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800dcd6:	42be      	cmp	r6, r7
 800dcd8:	d93e      	bls.n	800dd58 <ucdr_deserialize_double+0xac>
 800dcda:	6923      	ldr	r3, [r4, #16]
 800dcdc:	60a6      	str	r6, [r4, #8]
 800dcde:	1bf6      	subs	r6, r6, r7
 800dce0:	4433      	add	r3, r6
 800dce2:	f1c6 0908 	rsb	r9, r6, #8
 800dce6:	6123      	str	r3, [r4, #16]
 800dce8:	4649      	mov	r1, r9
 800dcea:	4620      	mov	r0, r4
 800dcec:	f000 f970 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	d063      	beq.n	800ddbc <ucdr_deserialize_double+0x110>
 800dcf4:	7d23      	ldrb	r3, [r4, #20]
 800dcf6:	2b01      	cmp	r3, #1
 800dcf8:	f000 8083 	beq.w	800de02 <ucdr_deserialize_double+0x156>
 800dcfc:	79fb      	ldrb	r3, [r7, #7]
 800dcfe:	702b      	strb	r3, [r5, #0]
 800dd00:	79bb      	ldrb	r3, [r7, #6]
 800dd02:	706b      	strb	r3, [r5, #1]
 800dd04:	2e01      	cmp	r6, #1
 800dd06:	d066      	beq.n	800ddd6 <ucdr_deserialize_double+0x12a>
 800dd08:	797b      	ldrb	r3, [r7, #5]
 800dd0a:	70ab      	strb	r3, [r5, #2]
 800dd0c:	2e02      	cmp	r6, #2
 800dd0e:	f000 8089 	beq.w	800de24 <ucdr_deserialize_double+0x178>
 800dd12:	793b      	ldrb	r3, [r7, #4]
 800dd14:	70eb      	strb	r3, [r5, #3]
 800dd16:	2e03      	cmp	r6, #3
 800dd18:	f000 8082 	beq.w	800de20 <ucdr_deserialize_double+0x174>
 800dd1c:	78fb      	ldrb	r3, [r7, #3]
 800dd1e:	712b      	strb	r3, [r5, #4]
 800dd20:	2e04      	cmp	r6, #4
 800dd22:	d07b      	beq.n	800de1c <ucdr_deserialize_double+0x170>
 800dd24:	78bb      	ldrb	r3, [r7, #2]
 800dd26:	716b      	strb	r3, [r5, #5]
 800dd28:	2e05      	cmp	r6, #5
 800dd2a:	d075      	beq.n	800de18 <ucdr_deserialize_double+0x16c>
 800dd2c:	787b      	ldrb	r3, [r7, #1]
 800dd2e:	71ab      	strb	r3, [r5, #6]
 800dd30:	2e06      	cmp	r6, #6
 800dd32:	f105 0507 	add.w	r5, r5, #7
 800dd36:	d062      	beq.n	800ddfe <ucdr_deserialize_double+0x152>
 800dd38:	783b      	ldrb	r3, [r7, #0]
 800dd3a:	702b      	strb	r3, [r5, #0]
 800dd3c:	6923      	ldr	r3, [r4, #16]
 800dd3e:	68a2      	ldr	r2, [r4, #8]
 800dd40:	7da0      	ldrb	r0, [r4, #22]
 800dd42:	2108      	movs	r1, #8
 800dd44:	3308      	adds	r3, #8
 800dd46:	444a      	add	r2, r9
 800dd48:	1b9b      	subs	r3, r3, r6
 800dd4a:	7561      	strb	r1, [r4, #21]
 800dd4c:	60a2      	str	r2, [r4, #8]
 800dd4e:	6123      	str	r3, [r4, #16]
 800dd50:	f080 0001 	eor.w	r0, r0, #1
 800dd54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd58:	2108      	movs	r1, #8
 800dd5a:	4620      	mov	r0, r4
 800dd5c:	f000 f938 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800dd60:	b310      	cbz	r0, 800dda8 <ucdr_deserialize_double+0xfc>
 800dd62:	7d22      	ldrb	r2, [r4, #20]
 800dd64:	68a3      	ldr	r3, [r4, #8]
 800dd66:	2a01      	cmp	r2, #1
 800dd68:	d023      	beq.n	800ddb2 <ucdr_deserialize_double+0x106>
 800dd6a:	79db      	ldrb	r3, [r3, #7]
 800dd6c:	702b      	strb	r3, [r5, #0]
 800dd6e:	68a3      	ldr	r3, [r4, #8]
 800dd70:	799b      	ldrb	r3, [r3, #6]
 800dd72:	706b      	strb	r3, [r5, #1]
 800dd74:	68a3      	ldr	r3, [r4, #8]
 800dd76:	795b      	ldrb	r3, [r3, #5]
 800dd78:	70ab      	strb	r3, [r5, #2]
 800dd7a:	68a3      	ldr	r3, [r4, #8]
 800dd7c:	791b      	ldrb	r3, [r3, #4]
 800dd7e:	70eb      	strb	r3, [r5, #3]
 800dd80:	68a3      	ldr	r3, [r4, #8]
 800dd82:	78db      	ldrb	r3, [r3, #3]
 800dd84:	712b      	strb	r3, [r5, #4]
 800dd86:	68a3      	ldr	r3, [r4, #8]
 800dd88:	789b      	ldrb	r3, [r3, #2]
 800dd8a:	716b      	strb	r3, [r5, #5]
 800dd8c:	68a3      	ldr	r3, [r4, #8]
 800dd8e:	785b      	ldrb	r3, [r3, #1]
 800dd90:	71ab      	strb	r3, [r5, #6]
 800dd92:	68a3      	ldr	r3, [r4, #8]
 800dd94:	781b      	ldrb	r3, [r3, #0]
 800dd96:	71eb      	strb	r3, [r5, #7]
 800dd98:	68a2      	ldr	r2, [r4, #8]
 800dd9a:	6923      	ldr	r3, [r4, #16]
 800dd9c:	3208      	adds	r2, #8
 800dd9e:	3308      	adds	r3, #8
 800dda0:	2108      	movs	r1, #8
 800dda2:	60a2      	str	r2, [r4, #8]
 800dda4:	6123      	str	r3, [r4, #16]
 800dda6:	7561      	strb	r1, [r4, #21]
 800dda8:	7da0      	ldrb	r0, [r4, #22]
 800ddaa:	f080 0001 	eor.w	r0, r0, #1
 800ddae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddb2:	681a      	ldr	r2, [r3, #0]
 800ddb4:	685b      	ldr	r3, [r3, #4]
 800ddb6:	606b      	str	r3, [r5, #4]
 800ddb8:	602a      	str	r2, [r5, #0]
 800ddba:	e7ed      	b.n	800dd98 <ucdr_deserialize_double+0xec>
 800ddbc:	68a2      	ldr	r2, [r4, #8]
 800ddbe:	6923      	ldr	r3, [r4, #16]
 800ddc0:	7da0      	ldrb	r0, [r4, #22]
 800ddc2:	f884 8015 	strb.w	r8, [r4, #21]
 800ddc6:	1b92      	subs	r2, r2, r6
 800ddc8:	1b9b      	subs	r3, r3, r6
 800ddca:	60a2      	str	r2, [r4, #8]
 800ddcc:	6123      	str	r3, [r4, #16]
 800ddce:	f080 0001 	eor.w	r0, r0, #1
 800ddd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddd6:	68a3      	ldr	r3, [r4, #8]
 800ddd8:	795b      	ldrb	r3, [r3, #5]
 800ddda:	70ab      	strb	r3, [r5, #2]
 800dddc:	3503      	adds	r5, #3
 800ddde:	68a3      	ldr	r3, [r4, #8]
 800dde0:	791b      	ldrb	r3, [r3, #4]
 800dde2:	f805 3b01 	strb.w	r3, [r5], #1
 800dde6:	68a3      	ldr	r3, [r4, #8]
 800dde8:	78db      	ldrb	r3, [r3, #3]
 800ddea:	f805 3b01 	strb.w	r3, [r5], #1
 800ddee:	68a3      	ldr	r3, [r4, #8]
 800ddf0:	789b      	ldrb	r3, [r3, #2]
 800ddf2:	f805 3b01 	strb.w	r3, [r5], #1
 800ddf6:	68a3      	ldr	r3, [r4, #8]
 800ddf8:	785b      	ldrb	r3, [r3, #1]
 800ddfa:	f805 3b01 	strb.w	r3, [r5], #1
 800ddfe:	68a7      	ldr	r7, [r4, #8]
 800de00:	e79a      	b.n	800dd38 <ucdr_deserialize_double+0x8c>
 800de02:	4639      	mov	r1, r7
 800de04:	4632      	mov	r2, r6
 800de06:	4628      	mov	r0, r5
 800de08:	f00f ff71 	bl	801dcee <memcpy>
 800de0c:	68a1      	ldr	r1, [r4, #8]
 800de0e:	464a      	mov	r2, r9
 800de10:	19a8      	adds	r0, r5, r6
 800de12:	f00f ff6c 	bl	801dcee <memcpy>
 800de16:	e791      	b.n	800dd3c <ucdr_deserialize_double+0x90>
 800de18:	3506      	adds	r5, #6
 800de1a:	e7ec      	b.n	800ddf6 <ucdr_deserialize_double+0x14a>
 800de1c:	3505      	adds	r5, #5
 800de1e:	e7e6      	b.n	800ddee <ucdr_deserialize_double+0x142>
 800de20:	3504      	adds	r5, #4
 800de22:	e7e0      	b.n	800dde6 <ucdr_deserialize_double+0x13a>
 800de24:	3503      	adds	r5, #3
 800de26:	e7da      	b.n	800ddde <ucdr_deserialize_double+0x132>

0800de28 <ucdr_deserialize_endian_double>:
 800de28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de2c:	460f      	mov	r7, r1
 800de2e:	2108      	movs	r1, #8
 800de30:	4604      	mov	r4, r0
 800de32:	4615      	mov	r5, r2
 800de34:	f000 f920 	bl	800e078 <ucdr_buffer_alignment>
 800de38:	4601      	mov	r1, r0
 800de3a:	4620      	mov	r0, r4
 800de3c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800de40:	f000 f95e 	bl	800e100 <ucdr_advance_buffer>
 800de44:	2108      	movs	r1, #8
 800de46:	4620      	mov	r0, r4
 800de48:	f000 f8b6 	bl	800dfb8 <ucdr_check_buffer_available_for>
 800de4c:	2800      	cmp	r0, #0
 800de4e:	d14f      	bne.n	800def0 <ucdr_deserialize_endian_double+0xc8>
 800de50:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800de54:	4546      	cmp	r6, r8
 800de56:	d946      	bls.n	800dee6 <ucdr_deserialize_endian_double+0xbe>
 800de58:	6923      	ldr	r3, [r4, #16]
 800de5a:	60a6      	str	r6, [r4, #8]
 800de5c:	eba6 0608 	sub.w	r6, r6, r8
 800de60:	4433      	add	r3, r6
 800de62:	f1c6 0a08 	rsb	sl, r6, #8
 800de66:	6123      	str	r3, [r4, #16]
 800de68:	4651      	mov	r1, sl
 800de6a:	4620      	mov	r0, r4
 800de6c:	f000 f8b0 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800de70:	2800      	cmp	r0, #0
 800de72:	d069      	beq.n	800df48 <ucdr_deserialize_endian_double+0x120>
 800de74:	2f01      	cmp	r7, #1
 800de76:	f000 808b 	beq.w	800df90 <ucdr_deserialize_endian_double+0x168>
 800de7a:	f898 3007 	ldrb.w	r3, [r8, #7]
 800de7e:	702b      	strb	r3, [r5, #0]
 800de80:	f898 3006 	ldrb.w	r3, [r8, #6]
 800de84:	706b      	strb	r3, [r5, #1]
 800de86:	2e01      	cmp	r6, #1
 800de88:	d06b      	beq.n	800df62 <ucdr_deserialize_endian_double+0x13a>
 800de8a:	f898 3005 	ldrb.w	r3, [r8, #5]
 800de8e:	70ab      	strb	r3, [r5, #2]
 800de90:	2e02      	cmp	r6, #2
 800de92:	f000 808e 	beq.w	800dfb2 <ucdr_deserialize_endian_double+0x18a>
 800de96:	f898 3004 	ldrb.w	r3, [r8, #4]
 800de9a:	70eb      	strb	r3, [r5, #3]
 800de9c:	2e03      	cmp	r6, #3
 800de9e:	f000 8086 	beq.w	800dfae <ucdr_deserialize_endian_double+0x186>
 800dea2:	f898 3003 	ldrb.w	r3, [r8, #3]
 800dea6:	712b      	strb	r3, [r5, #4]
 800dea8:	2e04      	cmp	r6, #4
 800deaa:	d07e      	beq.n	800dfaa <ucdr_deserialize_endian_double+0x182>
 800deac:	f898 3002 	ldrb.w	r3, [r8, #2]
 800deb0:	716b      	strb	r3, [r5, #5]
 800deb2:	2e05      	cmp	r6, #5
 800deb4:	d077      	beq.n	800dfa6 <ucdr_deserialize_endian_double+0x17e>
 800deb6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800deba:	71ab      	strb	r3, [r5, #6]
 800debc:	2e06      	cmp	r6, #6
 800debe:	f105 0507 	add.w	r5, r5, #7
 800dec2:	d062      	beq.n	800df8a <ucdr_deserialize_endian_double+0x162>
 800dec4:	f898 3000 	ldrb.w	r3, [r8]
 800dec8:	702b      	strb	r3, [r5, #0]
 800deca:	6923      	ldr	r3, [r4, #16]
 800decc:	68a2      	ldr	r2, [r4, #8]
 800dece:	7da0      	ldrb	r0, [r4, #22]
 800ded0:	2108      	movs	r1, #8
 800ded2:	3308      	adds	r3, #8
 800ded4:	4452      	add	r2, sl
 800ded6:	1b9b      	subs	r3, r3, r6
 800ded8:	7561      	strb	r1, [r4, #21]
 800deda:	60a2      	str	r2, [r4, #8]
 800dedc:	6123      	str	r3, [r4, #16]
 800dede:	f080 0001 	eor.w	r0, r0, #1
 800dee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dee6:	2108      	movs	r1, #8
 800dee8:	4620      	mov	r0, r4
 800deea:	f000 f871 	bl	800dfd0 <ucdr_check_final_buffer_behavior>
 800deee:	b308      	cbz	r0, 800df34 <ucdr_deserialize_endian_double+0x10c>
 800def0:	2f01      	cmp	r7, #1
 800def2:	68a3      	ldr	r3, [r4, #8]
 800def4:	d023      	beq.n	800df3e <ucdr_deserialize_endian_double+0x116>
 800def6:	79db      	ldrb	r3, [r3, #7]
 800def8:	702b      	strb	r3, [r5, #0]
 800defa:	68a3      	ldr	r3, [r4, #8]
 800defc:	799b      	ldrb	r3, [r3, #6]
 800defe:	706b      	strb	r3, [r5, #1]
 800df00:	68a3      	ldr	r3, [r4, #8]
 800df02:	795b      	ldrb	r3, [r3, #5]
 800df04:	70ab      	strb	r3, [r5, #2]
 800df06:	68a3      	ldr	r3, [r4, #8]
 800df08:	791b      	ldrb	r3, [r3, #4]
 800df0a:	70eb      	strb	r3, [r5, #3]
 800df0c:	68a3      	ldr	r3, [r4, #8]
 800df0e:	78db      	ldrb	r3, [r3, #3]
 800df10:	712b      	strb	r3, [r5, #4]
 800df12:	68a3      	ldr	r3, [r4, #8]
 800df14:	789b      	ldrb	r3, [r3, #2]
 800df16:	716b      	strb	r3, [r5, #5]
 800df18:	68a3      	ldr	r3, [r4, #8]
 800df1a:	785b      	ldrb	r3, [r3, #1]
 800df1c:	71ab      	strb	r3, [r5, #6]
 800df1e:	68a3      	ldr	r3, [r4, #8]
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	71eb      	strb	r3, [r5, #7]
 800df24:	68a2      	ldr	r2, [r4, #8]
 800df26:	6923      	ldr	r3, [r4, #16]
 800df28:	3208      	adds	r2, #8
 800df2a:	3308      	adds	r3, #8
 800df2c:	2108      	movs	r1, #8
 800df2e:	60a2      	str	r2, [r4, #8]
 800df30:	6123      	str	r3, [r4, #16]
 800df32:	7561      	strb	r1, [r4, #21]
 800df34:	7da0      	ldrb	r0, [r4, #22]
 800df36:	f080 0001 	eor.w	r0, r0, #1
 800df3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	685b      	ldr	r3, [r3, #4]
 800df42:	606b      	str	r3, [r5, #4]
 800df44:	602a      	str	r2, [r5, #0]
 800df46:	e7ed      	b.n	800df24 <ucdr_deserialize_endian_double+0xfc>
 800df48:	68a2      	ldr	r2, [r4, #8]
 800df4a:	6923      	ldr	r3, [r4, #16]
 800df4c:	7da0      	ldrb	r0, [r4, #22]
 800df4e:	f884 9015 	strb.w	r9, [r4, #21]
 800df52:	1b92      	subs	r2, r2, r6
 800df54:	1b9b      	subs	r3, r3, r6
 800df56:	60a2      	str	r2, [r4, #8]
 800df58:	6123      	str	r3, [r4, #16]
 800df5a:	f080 0001 	eor.w	r0, r0, #1
 800df5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df62:	68a3      	ldr	r3, [r4, #8]
 800df64:	795b      	ldrb	r3, [r3, #5]
 800df66:	70ab      	strb	r3, [r5, #2]
 800df68:	3503      	adds	r5, #3
 800df6a:	68a3      	ldr	r3, [r4, #8]
 800df6c:	791b      	ldrb	r3, [r3, #4]
 800df6e:	f805 3b01 	strb.w	r3, [r5], #1
 800df72:	68a3      	ldr	r3, [r4, #8]
 800df74:	78db      	ldrb	r3, [r3, #3]
 800df76:	f805 3b01 	strb.w	r3, [r5], #1
 800df7a:	68a3      	ldr	r3, [r4, #8]
 800df7c:	789b      	ldrb	r3, [r3, #2]
 800df7e:	f805 3b01 	strb.w	r3, [r5], #1
 800df82:	68a3      	ldr	r3, [r4, #8]
 800df84:	785b      	ldrb	r3, [r3, #1]
 800df86:	f805 3b01 	strb.w	r3, [r5], #1
 800df8a:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800df8e:	e799      	b.n	800dec4 <ucdr_deserialize_endian_double+0x9c>
 800df90:	4641      	mov	r1, r8
 800df92:	4632      	mov	r2, r6
 800df94:	4628      	mov	r0, r5
 800df96:	f00f feaa 	bl	801dcee <memcpy>
 800df9a:	68a1      	ldr	r1, [r4, #8]
 800df9c:	4652      	mov	r2, sl
 800df9e:	19a8      	adds	r0, r5, r6
 800dfa0:	f00f fea5 	bl	801dcee <memcpy>
 800dfa4:	e791      	b.n	800deca <ucdr_deserialize_endian_double+0xa2>
 800dfa6:	3506      	adds	r5, #6
 800dfa8:	e7eb      	b.n	800df82 <ucdr_deserialize_endian_double+0x15a>
 800dfaa:	3505      	adds	r5, #5
 800dfac:	e7e5      	b.n	800df7a <ucdr_deserialize_endian_double+0x152>
 800dfae:	3504      	adds	r5, #4
 800dfb0:	e7df      	b.n	800df72 <ucdr_deserialize_endian_double+0x14a>
 800dfb2:	3503      	adds	r5, #3
 800dfb4:	e7d9      	b.n	800df6a <ucdr_deserialize_endian_double+0x142>
 800dfb6:	bf00      	nop

0800dfb8 <ucdr_check_buffer_available_for>:
 800dfb8:	7d83      	ldrb	r3, [r0, #22]
 800dfba:	b93b      	cbnz	r3, 800dfcc <ucdr_check_buffer_available_for+0x14>
 800dfbc:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800dfc0:	440b      	add	r3, r1
 800dfc2:	4298      	cmp	r0, r3
 800dfc4:	bf34      	ite	cc
 800dfc6:	2000      	movcc	r0, #0
 800dfc8:	2001      	movcs	r0, #1
 800dfca:	4770      	bx	lr
 800dfcc:	2000      	movs	r0, #0
 800dfce:	4770      	bx	lr

0800dfd0 <ucdr_check_final_buffer_behavior>:
 800dfd0:	7d83      	ldrb	r3, [r0, #22]
 800dfd2:	b943      	cbnz	r3, 800dfe6 <ucdr_check_final_buffer_behavior+0x16>
 800dfd4:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800dfd8:	4291      	cmp	r1, r2
 800dfda:	b510      	push	{r4, lr}
 800dfdc:	4604      	mov	r4, r0
 800dfde:	d205      	bcs.n	800dfec <ucdr_check_final_buffer_behavior+0x1c>
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	bd10      	pop	{r4, pc}
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	4618      	mov	r0, r3
 800dfea:	4770      	bx	lr
 800dfec:	6982      	ldr	r2, [r0, #24]
 800dfee:	b13a      	cbz	r2, 800e000 <ucdr_check_final_buffer_behavior+0x30>
 800dff0:	69c1      	ldr	r1, [r0, #28]
 800dff2:	4790      	blx	r2
 800dff4:	f080 0301 	eor.w	r3, r0, #1
 800dff8:	b2db      	uxtb	r3, r3
 800dffa:	75a0      	strb	r0, [r4, #22]
 800dffc:	4618      	mov	r0, r3
 800dffe:	bd10      	pop	{r4, pc}
 800e000:	2001      	movs	r0, #1
 800e002:	75a0      	strb	r0, [r4, #22]
 800e004:	e7fa      	b.n	800dffc <ucdr_check_final_buffer_behavior+0x2c>
 800e006:	bf00      	nop

0800e008 <ucdr_set_on_full_buffer_callback>:
 800e008:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800e00c:	4770      	bx	lr
 800e00e:	bf00      	nop

0800e010 <ucdr_init_buffer_origin_offset_endian>:
 800e010:	b410      	push	{r4}
 800e012:	9c01      	ldr	r4, [sp, #4]
 800e014:	6001      	str	r1, [r0, #0]
 800e016:	440a      	add	r2, r1
 800e018:	6042      	str	r2, [r0, #4]
 800e01a:	190a      	adds	r2, r1, r4
 800e01c:	441c      	add	r4, r3
 800e01e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800e022:	6082      	str	r2, [r0, #8]
 800e024:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e028:	7503      	strb	r3, [r0, #20]
 800e02a:	2200      	movs	r2, #0
 800e02c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800e030:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e034:	7542      	strb	r2, [r0, #21]
 800e036:	7582      	strb	r2, [r0, #22]
 800e038:	4770      	bx	lr
 800e03a:	bf00      	nop

0800e03c <ucdr_init_buffer_origin_offset>:
 800e03c:	b510      	push	{r4, lr}
 800e03e:	b082      	sub	sp, #8
 800e040:	9c04      	ldr	r4, [sp, #16]
 800e042:	9400      	str	r4, [sp, #0]
 800e044:	2401      	movs	r4, #1
 800e046:	9401      	str	r4, [sp, #4]
 800e048:	f7ff ffe2 	bl	800e010 <ucdr_init_buffer_origin_offset_endian>
 800e04c:	b002      	add	sp, #8
 800e04e:	bd10      	pop	{r4, pc}

0800e050 <ucdr_init_buffer_origin>:
 800e050:	b510      	push	{r4, lr}
 800e052:	b082      	sub	sp, #8
 800e054:	2400      	movs	r4, #0
 800e056:	9400      	str	r4, [sp, #0]
 800e058:	f7ff fff0 	bl	800e03c <ucdr_init_buffer_origin_offset>
 800e05c:	b002      	add	sp, #8
 800e05e:	bd10      	pop	{r4, pc}

0800e060 <ucdr_init_buffer>:
 800e060:	2300      	movs	r3, #0
 800e062:	f7ff bff5 	b.w	800e050 <ucdr_init_buffer_origin>
 800e066:	bf00      	nop

0800e068 <ucdr_alignment>:
 800e068:	fbb0 f3f1 	udiv	r3, r0, r1
 800e06c:	fb03 0011 	mls	r0, r3, r1, r0
 800e070:	1a08      	subs	r0, r1, r0
 800e072:	3901      	subs	r1, #1
 800e074:	4008      	ands	r0, r1
 800e076:	4770      	bx	lr

0800e078 <ucdr_buffer_alignment>:
 800e078:	7d43      	ldrb	r3, [r0, #21]
 800e07a:	428b      	cmp	r3, r1
 800e07c:	d208      	bcs.n	800e090 <ucdr_buffer_alignment+0x18>
 800e07e:	6900      	ldr	r0, [r0, #16]
 800e080:	fbb0 f3f1 	udiv	r3, r0, r1
 800e084:	fb01 0013 	mls	r0, r1, r3, r0
 800e088:	1a08      	subs	r0, r1, r0
 800e08a:	3901      	subs	r1, #1
 800e08c:	4008      	ands	r0, r1
 800e08e:	4770      	bx	lr
 800e090:	2000      	movs	r0, #0
 800e092:	4770      	bx	lr

0800e094 <ucdr_align_to>:
 800e094:	b538      	push	{r3, r4, r5, lr}
 800e096:	4604      	mov	r4, r0
 800e098:	460d      	mov	r5, r1
 800e09a:	f7ff ffed 	bl	800e078 <ucdr_buffer_alignment>
 800e09e:	68a3      	ldr	r3, [r4, #8]
 800e0a0:	6861      	ldr	r1, [r4, #4]
 800e0a2:	6922      	ldr	r2, [r4, #16]
 800e0a4:	7565      	strb	r5, [r4, #21]
 800e0a6:	4403      	add	r3, r0
 800e0a8:	428b      	cmp	r3, r1
 800e0aa:	bf28      	it	cs
 800e0ac:	460b      	movcs	r3, r1
 800e0ae:	4402      	add	r2, r0
 800e0b0:	60a3      	str	r3, [r4, #8]
 800e0b2:	6122      	str	r2, [r4, #16]
 800e0b4:	bd38      	pop	{r3, r4, r5, pc}
 800e0b6:	bf00      	nop

0800e0b8 <ucdr_buffer_length>:
 800e0b8:	6882      	ldr	r2, [r0, #8]
 800e0ba:	6800      	ldr	r0, [r0, #0]
 800e0bc:	1a10      	subs	r0, r2, r0
 800e0be:	4770      	bx	lr

0800e0c0 <ucdr_buffer_remaining>:
 800e0c0:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800e0c4:	1a10      	subs	r0, r2, r0
 800e0c6:	4770      	bx	lr

0800e0c8 <ucdr_check_final_buffer_behavior_array>:
 800e0c8:	b538      	push	{r3, r4, r5, lr}
 800e0ca:	7d83      	ldrb	r3, [r0, #22]
 800e0cc:	b963      	cbnz	r3, 800e0e8 <ucdr_check_final_buffer_behavior_array+0x20>
 800e0ce:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	4604      	mov	r4, r0
 800e0d6:	460d      	mov	r5, r1
 800e0d8:	d308      	bcc.n	800e0ec <ucdr_check_final_buffer_behavior_array+0x24>
 800e0da:	b139      	cbz	r1, 800e0ec <ucdr_check_final_buffer_behavior_array+0x24>
 800e0dc:	6983      	ldr	r3, [r0, #24]
 800e0de:	b163      	cbz	r3, 800e0fa <ucdr_check_final_buffer_behavior_array+0x32>
 800e0e0:	69c1      	ldr	r1, [r0, #28]
 800e0e2:	4798      	blx	r3
 800e0e4:	75a0      	strb	r0, [r4, #22]
 800e0e6:	b108      	cbz	r0, 800e0ec <ucdr_check_final_buffer_behavior_array+0x24>
 800e0e8:	2000      	movs	r0, #0
 800e0ea:	bd38      	pop	{r3, r4, r5, pc}
 800e0ec:	4620      	mov	r0, r4
 800e0ee:	f7ff ffe7 	bl	800e0c0 <ucdr_buffer_remaining>
 800e0f2:	42a8      	cmp	r0, r5
 800e0f4:	bf28      	it	cs
 800e0f6:	4628      	movcs	r0, r5
 800e0f8:	bd38      	pop	{r3, r4, r5, pc}
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	7583      	strb	r3, [r0, #22]
 800e0fe:	e7f3      	b.n	800e0e8 <ucdr_check_final_buffer_behavior_array+0x20>

0800e100 <ucdr_advance_buffer>:
 800e100:	b538      	push	{r3, r4, r5, lr}
 800e102:	4604      	mov	r4, r0
 800e104:	460d      	mov	r5, r1
 800e106:	f7ff ff57 	bl	800dfb8 <ucdr_check_buffer_available_for>
 800e10a:	b178      	cbz	r0, 800e12c <ucdr_advance_buffer+0x2c>
 800e10c:	6923      	ldr	r3, [r4, #16]
 800e10e:	68a2      	ldr	r2, [r4, #8]
 800e110:	442b      	add	r3, r5
 800e112:	6123      	str	r3, [r4, #16]
 800e114:	2301      	movs	r3, #1
 800e116:	442a      	add	r2, r5
 800e118:	7563      	strb	r3, [r4, #21]
 800e11a:	60a2      	str	r2, [r4, #8]
 800e11c:	bd38      	pop	{r3, r4, r5, pc}
 800e11e:	68a2      	ldr	r2, [r4, #8]
 800e120:	6923      	ldr	r3, [r4, #16]
 800e122:	4402      	add	r2, r0
 800e124:	4403      	add	r3, r0
 800e126:	1a2d      	subs	r5, r5, r0
 800e128:	60a2      	str	r2, [r4, #8]
 800e12a:	6123      	str	r3, [r4, #16]
 800e12c:	2201      	movs	r2, #1
 800e12e:	4629      	mov	r1, r5
 800e130:	4620      	mov	r0, r4
 800e132:	f7ff ffc9 	bl	800e0c8 <ucdr_check_final_buffer_behavior_array>
 800e136:	2800      	cmp	r0, #0
 800e138:	d1f1      	bne.n	800e11e <ucdr_advance_buffer+0x1e>
 800e13a:	2301      	movs	r3, #1
 800e13c:	7563      	strb	r3, [r4, #21]
 800e13e:	bd38      	pop	{r3, r4, r5, pc}

0800e140 <rcl_get_zero_initialized_init_options>:
 800e140:	2000      	movs	r0, #0
 800e142:	4770      	bx	lr

0800e144 <rcl_init_options_init>:
 800e144:	b084      	sub	sp, #16
 800e146:	b570      	push	{r4, r5, r6, lr}
 800e148:	b09e      	sub	sp, #120	@ 0x78
 800e14a:	ad23      	add	r5, sp, #140	@ 0x8c
 800e14c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800e150:	2800      	cmp	r0, #0
 800e152:	d046      	beq.n	800e1e2 <rcl_init_options_init+0x9e>
 800e154:	6803      	ldr	r3, [r0, #0]
 800e156:	4604      	mov	r4, r0
 800e158:	b133      	cbz	r3, 800e168 <rcl_init_options_init+0x24>
 800e15a:	2564      	movs	r5, #100	@ 0x64
 800e15c:	4628      	mov	r0, r5
 800e15e:	b01e      	add	sp, #120	@ 0x78
 800e160:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e164:	b004      	add	sp, #16
 800e166:	4770      	bx	lr
 800e168:	4628      	mov	r0, r5
 800e16a:	f001 f96f 	bl	800f44c <rcutils_allocator_is_valid>
 800e16e:	2800      	cmp	r0, #0
 800e170:	d037      	beq.n	800e1e2 <rcl_init_options_init+0x9e>
 800e172:	46ae      	mov	lr, r5
 800e174:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e178:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800e17c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e180:	f8de 3000 	ldr.w	r3, [lr]
 800e184:	f8cc 3000 	str.w	r3, [ip]
 800e188:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 800e18a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e18c:	2070      	movs	r0, #112	@ 0x70
 800e18e:	4798      	blx	r3
 800e190:	4606      	mov	r6, r0
 800e192:	6020      	str	r0, [r4, #0]
 800e194:	b338      	cbz	r0, 800e1e6 <rcl_init_options_init+0xa2>
 800e196:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800e19a:	4686      	mov	lr, r0
 800e19c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e1a0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e1a4:	f8dc 3000 	ldr.w	r3, [ip]
 800e1a8:	f8ce 3000 	str.w	r3, [lr]
 800e1ac:	a802      	add	r0, sp, #8
 800e1ae:	f001 f9e3 	bl	800f578 <rmw_get_zero_initialized_init_options>
 800e1b2:	2258      	movs	r2, #88	@ 0x58
 800e1b4:	a902      	add	r1, sp, #8
 800e1b6:	f106 0018 	add.w	r0, r6, #24
 800e1ba:	f00f fd98 	bl	801dcee <memcpy>
 800e1be:	ab26      	add	r3, sp, #152	@ 0x98
 800e1c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e1c4:	6826      	ldr	r6, [r4, #0]
 800e1c6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e1ca:	f106 0018 	add.w	r0, r6, #24
 800e1ce:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800e1d2:	f001 fa17 	bl	800f604 <rmw_init_options_init>
 800e1d6:	4605      	mov	r5, r0
 800e1d8:	b938      	cbnz	r0, 800e1ea <rcl_init_options_init+0xa6>
 800e1da:	6823      	ldr	r3, [r4, #0]
 800e1dc:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
 800e1e0:	e7bc      	b.n	800e15c <rcl_init_options_init+0x18>
 800e1e2:	250b      	movs	r5, #11
 800e1e4:	e7ba      	b.n	800e15c <rcl_init_options_init+0x18>
 800e1e6:	250a      	movs	r5, #10
 800e1e8:	e7b8      	b.n	800e15c <rcl_init_options_init+0x18>
 800e1ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e1ec:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 800e1ee:	6820      	ldr	r0, [r4, #0]
 800e1f0:	4798      	blx	r3
 800e1f2:	4628      	mov	r0, r5
 800e1f4:	f008 f96e 	bl	80164d4 <rcl_convert_rmw_ret_to_rcl_ret>
 800e1f8:	4605      	mov	r5, r0
 800e1fa:	e7af      	b.n	800e15c <rcl_init_options_init+0x18>

0800e1fc <rcl_init_options_fini>:
 800e1fc:	b530      	push	{r4, r5, lr}
 800e1fe:	b087      	sub	sp, #28
 800e200:	b1f0      	cbz	r0, 800e240 <rcl_init_options_fini+0x44>
 800e202:	6803      	ldr	r3, [r0, #0]
 800e204:	4604      	mov	r4, r0
 800e206:	b1db      	cbz	r3, 800e240 <rcl_init_options_fini+0x44>
 800e208:	469c      	mov	ip, r3
 800e20a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e20e:	f10d 0e04 	add.w	lr, sp, #4
 800e212:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e216:	f8dc 3000 	ldr.w	r3, [ip]
 800e21a:	f8ce 3000 	str.w	r3, [lr]
 800e21e:	a801      	add	r0, sp, #4
 800e220:	f001 f914 	bl	800f44c <rcutils_allocator_is_valid>
 800e224:	b160      	cbz	r0, 800e240 <rcl_init_options_fini+0x44>
 800e226:	6820      	ldr	r0, [r4, #0]
 800e228:	3018      	adds	r0, #24
 800e22a:	f001 fa87 	bl	800f73c <rmw_init_options_fini>
 800e22e:	4605      	mov	r5, r0
 800e230:	b950      	cbnz	r0, 800e248 <rcl_init_options_fini+0x4c>
 800e232:	6820      	ldr	r0, [r4, #0]
 800e234:	9b02      	ldr	r3, [sp, #8]
 800e236:	9905      	ldr	r1, [sp, #20]
 800e238:	4798      	blx	r3
 800e23a:	4628      	mov	r0, r5
 800e23c:	b007      	add	sp, #28
 800e23e:	bd30      	pop	{r4, r5, pc}
 800e240:	250b      	movs	r5, #11
 800e242:	4628      	mov	r0, r5
 800e244:	b007      	add	sp, #28
 800e246:	bd30      	pop	{r4, r5, pc}
 800e248:	f008 f944 	bl	80164d4 <rcl_convert_rmw_ret_to_rcl_ret>
 800e24c:	4605      	mov	r5, r0
 800e24e:	e7f8      	b.n	800e242 <rcl_init_options_fini+0x46>

0800e250 <rcl_init_options_copy>:
 800e250:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e252:	b09d      	sub	sp, #116	@ 0x74
 800e254:	2800      	cmp	r0, #0
 800e256:	d04a      	beq.n	800e2ee <rcl_init_options_copy+0x9e>
 800e258:	4604      	mov	r4, r0
 800e25a:	6800      	ldr	r0, [r0, #0]
 800e25c:	2800      	cmp	r0, #0
 800e25e:	d046      	beq.n	800e2ee <rcl_init_options_copy+0x9e>
 800e260:	460d      	mov	r5, r1
 800e262:	f001 f8f3 	bl	800f44c <rcutils_allocator_is_valid>
 800e266:	2800      	cmp	r0, #0
 800e268:	d041      	beq.n	800e2ee <rcl_init_options_copy+0x9e>
 800e26a:	2d00      	cmp	r5, #0
 800e26c:	d03f      	beq.n	800e2ee <rcl_init_options_copy+0x9e>
 800e26e:	682b      	ldr	r3, [r5, #0]
 800e270:	b11b      	cbz	r3, 800e27a <rcl_init_options_copy+0x2a>
 800e272:	2464      	movs	r4, #100	@ 0x64
 800e274:	4620      	mov	r0, r4
 800e276:	b01d      	add	sp, #116	@ 0x74
 800e278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e27a:	6826      	ldr	r6, [r4, #0]
 800e27c:	46b6      	mov	lr, r6
 800e27e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e282:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800e286:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e28a:	f8de 3000 	ldr.w	r3, [lr]
 800e28e:	6837      	ldr	r7, [r6, #0]
 800e290:	f8cc 3000 	str.w	r3, [ip]
 800e294:	4619      	mov	r1, r3
 800e296:	2070      	movs	r0, #112	@ 0x70
 800e298:	47b8      	blx	r7
 800e29a:	4606      	mov	r6, r0
 800e29c:	6028      	str	r0, [r5, #0]
 800e29e:	b350      	cbz	r0, 800e2f6 <rcl_init_options_copy+0xa6>
 800e2a0:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800e2a4:	4686      	mov	lr, r0
 800e2a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e2aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e2ae:	f8dc 3000 	ldr.w	r3, [ip]
 800e2b2:	f8ce 3000 	str.w	r3, [lr]
 800e2b6:	4668      	mov	r0, sp
 800e2b8:	f001 f95e 	bl	800f578 <rmw_get_zero_initialized_init_options>
 800e2bc:	2258      	movs	r2, #88	@ 0x58
 800e2be:	4669      	mov	r1, sp
 800e2c0:	f106 0018 	add.w	r0, r6, #24
 800e2c4:	f00f fd13 	bl	801dcee <memcpy>
 800e2c8:	6820      	ldr	r0, [r4, #0]
 800e2ca:	6829      	ldr	r1, [r5, #0]
 800e2cc:	3018      	adds	r0, #24
 800e2ce:	3118      	adds	r1, #24
 800e2d0:	f001 fa00 	bl	800f6d4 <rmw_init_options_copy>
 800e2d4:	4604      	mov	r4, r0
 800e2d6:	2800      	cmp	r0, #0
 800e2d8:	d0cc      	beq.n	800e274 <rcl_init_options_copy+0x24>
 800e2da:	f001 f8c5 	bl	800f468 <rcutils_get_error_string>
 800e2de:	f001 f8db 	bl	800f498 <rcutils_reset_error>
 800e2e2:	4628      	mov	r0, r5
 800e2e4:	f7ff ff8a 	bl	800e1fc <rcl_init_options_fini>
 800e2e8:	b138      	cbz	r0, 800e2fa <rcl_init_options_copy+0xaa>
 800e2ea:	4604      	mov	r4, r0
 800e2ec:	e7c2      	b.n	800e274 <rcl_init_options_copy+0x24>
 800e2ee:	240b      	movs	r4, #11
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	b01d      	add	sp, #116	@ 0x74
 800e2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2f6:	240a      	movs	r4, #10
 800e2f8:	e7bc      	b.n	800e274 <rcl_init_options_copy+0x24>
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	b01d      	add	sp, #116	@ 0x74
 800e2fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e302:	f008 b8e7 	b.w	80164d4 <rcl_convert_rmw_ret_to_rcl_ret>
 800e306:	bf00      	nop

0800e308 <rcl_init_options_set_domain_id>:
 800e308:	b120      	cbz	r0, 800e314 <rcl_init_options_set_domain_id+0xc>
 800e30a:	6803      	ldr	r3, [r0, #0]
 800e30c:	b113      	cbz	r3, 800e314 <rcl_init_options_set_domain_id+0xc>
 800e30e:	6259      	str	r1, [r3, #36]	@ 0x24
 800e310:	2000      	movs	r0, #0
 800e312:	4770      	bx	lr
 800e314:	200b      	movs	r0, #11
 800e316:	4770      	bx	lr

0800e318 <rcl_get_zero_initialized_publisher>:
 800e318:	4b01      	ldr	r3, [pc, #4]	@ (800e320 <rcl_get_zero_initialized_publisher+0x8>)
 800e31a:	6818      	ldr	r0, [r3, #0]
 800e31c:	4770      	bx	lr
 800e31e:	bf00      	nop
 800e320:	0802046c 	.word	0x0802046c

0800e324 <rcl_publisher_init>:
 800e324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e328:	b088      	sub	sp, #32
 800e32a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800e32c:	2d00      	cmp	r5, #0
 800e32e:	d06a      	beq.n	800e406 <rcl_publisher_init+0xe2>
 800e330:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800e334:	4604      	mov	r4, r0
 800e336:	4648      	mov	r0, r9
 800e338:	460e      	mov	r6, r1
 800e33a:	4690      	mov	r8, r2
 800e33c:	461f      	mov	r7, r3
 800e33e:	f001 f885 	bl	800f44c <rcutils_allocator_is_valid>
 800e342:	2800      	cmp	r0, #0
 800e344:	d05f      	beq.n	800e406 <rcl_publisher_init+0xe2>
 800e346:	2c00      	cmp	r4, #0
 800e348:	d05d      	beq.n	800e406 <rcl_publisher_init+0xe2>
 800e34a:	f8d4 a000 	ldr.w	sl, [r4]
 800e34e:	f1ba 0f00 	cmp.w	sl, #0
 800e352:	d004      	beq.n	800e35e <rcl_publisher_init+0x3a>
 800e354:	2764      	movs	r7, #100	@ 0x64
 800e356:	4638      	mov	r0, r7
 800e358:	b008      	add	sp, #32
 800e35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e35e:	4630      	mov	r0, r6
 800e360:	f008 fbfa 	bl	8016b58 <rcl_node_is_valid>
 800e364:	2800      	cmp	r0, #0
 800e366:	d053      	beq.n	800e410 <rcl_publisher_init+0xec>
 800e368:	f1b8 0f00 	cmp.w	r8, #0
 800e36c:	d04b      	beq.n	800e406 <rcl_publisher_init+0xe2>
 800e36e:	2f00      	cmp	r7, #0
 800e370:	d049      	beq.n	800e406 <rcl_publisher_init+0xe2>
 800e372:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800e376:	aa07      	add	r2, sp, #28
 800e378:	9205      	str	r2, [sp, #20]
 800e37a:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800e37e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e382:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e386:	f8cd a01c 	str.w	sl, [sp, #28]
 800e38a:	4639      	mov	r1, r7
 800e38c:	e899 000c 	ldmia.w	r9, {r2, r3}
 800e390:	4630      	mov	r0, r6
 800e392:	f008 fc71 	bl	8016c78 <rcl_node_resolve_name>
 800e396:	4607      	mov	r7, r0
 800e398:	2800      	cmp	r0, #0
 800e39a:	d150      	bne.n	800e43e <rcl_publisher_init+0x11a>
 800e39c:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 800e3a0:	21c8      	movs	r1, #200	@ 0xc8
 800e3a2:	2001      	movs	r0, #1
 800e3a4:	4798      	blx	r3
 800e3a6:	6020      	str	r0, [r4, #0]
 800e3a8:	2800      	cmp	r0, #0
 800e3aa:	d04e      	beq.n	800e44a <rcl_publisher_init+0x126>
 800e3ac:	4630      	mov	r0, r6
 800e3ae:	f008 fbf5 	bl	8016b9c <rcl_node_get_rmw_handle>
 800e3b2:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800e3b6:	9300      	str	r3, [sp, #0]
 800e3b8:	9a07      	ldr	r2, [sp, #28]
 800e3ba:	6827      	ldr	r7, [r4, #0]
 800e3bc:	462b      	mov	r3, r5
 800e3be:	4641      	mov	r1, r8
 800e3c0:	f001 fcd0 	bl	800fd64 <rmw_create_publisher>
 800e3c4:	6823      	ldr	r3, [r4, #0]
 800e3c6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800e3ca:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e3ce:	b370      	cbz	r0, 800e42e <rcl_publisher_init+0x10a>
 800e3d0:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800e3d4:	f001 fda2 	bl	800ff1c <rmw_publisher_get_actual_qos>
 800e3d8:	6823      	ldr	r3, [r4, #0]
 800e3da:	4607      	mov	r7, r0
 800e3dc:	b9d0      	cbnz	r0, 800e414 <rcl_publisher_init+0xf0>
 800e3de:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800e3e2:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800e3e6:	4629      	mov	r1, r5
 800e3e8:	2270      	movs	r2, #112	@ 0x70
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f00f fc7f 	bl	801dcee <memcpy>
 800e3f0:	6832      	ldr	r2, [r6, #0]
 800e3f2:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800e3f6:	9807      	ldr	r0, [sp, #28]
 800e3f8:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800e3fa:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800e3fc:	4798      	blx	r3
 800e3fe:	4638      	mov	r0, r7
 800e400:	b008      	add	sp, #32
 800e402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e406:	270b      	movs	r7, #11
 800e408:	4638      	mov	r0, r7
 800e40a:	b008      	add	sp, #32
 800e40c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e410:	27c8      	movs	r7, #200	@ 0xc8
 800e412:	e7a0      	b.n	800e356 <rcl_publisher_init+0x32>
 800e414:	b18b      	cbz	r3, 800e43a <rcl_publisher_init+0x116>
 800e416:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e41a:	b142      	cbz	r2, 800e42e <rcl_publisher_init+0x10a>
 800e41c:	4630      	mov	r0, r6
 800e41e:	f008 fbbd 	bl	8016b9c <rcl_node_get_rmw_handle>
 800e422:	6823      	ldr	r3, [r4, #0]
 800e424:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800e428:	f001 fd86 	bl	800ff38 <rmw_destroy_publisher>
 800e42c:	6823      	ldr	r3, [r4, #0]
 800e42e:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800e430:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800e432:	4618      	mov	r0, r3
 800e434:	4790      	blx	r2
 800e436:	2300      	movs	r3, #0
 800e438:	6023      	str	r3, [r4, #0]
 800e43a:	2701      	movs	r7, #1
 800e43c:	e7db      	b.n	800e3f6 <rcl_publisher_init+0xd2>
 800e43e:	2867      	cmp	r0, #103	@ 0x67
 800e440:	d0d9      	beq.n	800e3f6 <rcl_publisher_init+0xd2>
 800e442:	2869      	cmp	r0, #105	@ 0x69
 800e444:	d003      	beq.n	800e44e <rcl_publisher_init+0x12a>
 800e446:	280a      	cmp	r0, #10
 800e448:	d1f7      	bne.n	800e43a <rcl_publisher_init+0x116>
 800e44a:	270a      	movs	r7, #10
 800e44c:	e7d3      	b.n	800e3f6 <rcl_publisher_init+0xd2>
 800e44e:	2767      	movs	r7, #103	@ 0x67
 800e450:	e7d1      	b.n	800e3f6 <rcl_publisher_init+0xd2>
 800e452:	bf00      	nop

0800e454 <rcl_publisher_get_default_options>:
 800e454:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e456:	4919      	ldr	r1, [pc, #100]	@ (800e4bc <rcl_publisher_get_default_options+0x68>)
 800e458:	4c19      	ldr	r4, [pc, #100]	@ (800e4c0 <rcl_publisher_get_default_options+0x6c>)
 800e45a:	b08b      	sub	sp, #44	@ 0x2c
 800e45c:	2250      	movs	r2, #80	@ 0x50
 800e45e:	4605      	mov	r5, r0
 800e460:	4818      	ldr	r0, [pc, #96]	@ (800e4c4 <rcl_publisher_get_default_options+0x70>)
 800e462:	f00f fc44 	bl	801dcee <memcpy>
 800e466:	a802      	add	r0, sp, #8
 800e468:	f000 ffc4 	bl	800f3f4 <rcutils_get_default_allocator>
 800e46c:	f10d 0c08 	add.w	ip, sp, #8
 800e470:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e474:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e476:	466f      	mov	r7, sp
 800e478:	f8dc 3000 	ldr.w	r3, [ip]
 800e47c:	f844 3b04 	str.w	r3, [r4], #4
 800e480:	4638      	mov	r0, r7
 800e482:	f001 f8a1 	bl	800f5c8 <rmw_get_default_publisher_options>
 800e486:	e897 0003 	ldmia.w	r7, {r0, r1}
 800e48a:	2600      	movs	r6, #0
 800e48c:	e884 0003 	stmia.w	r4, {r0, r1}
 800e490:	f10d 0027 	add.w	r0, sp, #39	@ 0x27
 800e494:	f88d 6027 	strb.w	r6, [sp, #39]	@ 0x27
 800e498:	f008 fb86 	bl	8016ba8 <rcl_get_disable_loaned_message>
 800e49c:	b958      	cbnz	r0, 800e4b6 <rcl_publisher_get_default_options+0x62>
 800e49e:	f89d 6027 	ldrb.w	r6, [sp, #39]	@ 0x27
 800e4a2:	4908      	ldr	r1, [pc, #32]	@ (800e4c4 <rcl_publisher_get_default_options+0x70>)
 800e4a4:	2270      	movs	r2, #112	@ 0x70
 800e4a6:	4628      	mov	r0, r5
 800e4a8:	f881 606c 	strb.w	r6, [r1, #108]	@ 0x6c
 800e4ac:	f00f fc1f 	bl	801dcee <memcpy>
 800e4b0:	4628      	mov	r0, r5
 800e4b2:	b00b      	add	sp, #44	@ 0x2c
 800e4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4b6:	f000 ffef 	bl	800f498 <rcutils_reset_error>
 800e4ba:	e7f2      	b.n	800e4a2 <rcl_publisher_get_default_options+0x4e>
 800e4bc:	08020470 	.word	0x08020470
 800e4c0:	2000a2c8 	.word	0x2000a2c8
 800e4c4:	2000a278 	.word	0x2000a278

0800e4c8 <rcl_publish>:
 800e4c8:	b1f8      	cbz	r0, 800e50a <rcl_publish+0x42>
 800e4ca:	6803      	ldr	r3, [r0, #0]
 800e4cc:	b570      	push	{r4, r5, r6, lr}
 800e4ce:	4604      	mov	r4, r0
 800e4d0:	b1b3      	cbz	r3, 800e500 <rcl_publish+0x38>
 800e4d2:	4616      	mov	r6, r2
 800e4d4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e4d8:	b192      	cbz	r2, 800e500 <rcl_publish+0x38>
 800e4da:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800e4de:	460d      	mov	r5, r1
 800e4e0:	f008 f818 	bl	8016514 <rcl_context_is_valid>
 800e4e4:	b160      	cbz	r0, 800e500 <rcl_publish+0x38>
 800e4e6:	6823      	ldr	r3, [r4, #0]
 800e4e8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e4ec:	b140      	cbz	r0, 800e500 <rcl_publish+0x38>
 800e4ee:	b155      	cbz	r5, 800e506 <rcl_publish+0x3e>
 800e4f0:	4632      	mov	r2, r6
 800e4f2:	4629      	mov	r1, r5
 800e4f4:	f001 fbd6 	bl	800fca4 <rmw_publish>
 800e4f8:	3800      	subs	r0, #0
 800e4fa:	bf18      	it	ne
 800e4fc:	2001      	movne	r0, #1
 800e4fe:	bd70      	pop	{r4, r5, r6, pc}
 800e500:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800e504:	bd70      	pop	{r4, r5, r6, pc}
 800e506:	200b      	movs	r0, #11
 800e508:	bd70      	pop	{r4, r5, r6, pc}
 800e50a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800e50e:	4770      	bx	lr

0800e510 <rcl_publisher_is_valid>:
 800e510:	b1a0      	cbz	r0, 800e53c <rcl_publisher_is_valid+0x2c>
 800e512:	6803      	ldr	r3, [r0, #0]
 800e514:	b510      	push	{r4, lr}
 800e516:	4604      	mov	r4, r0
 800e518:	b173      	cbz	r3, 800e538 <rcl_publisher_is_valid+0x28>
 800e51a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e51e:	b15a      	cbz	r2, 800e538 <rcl_publisher_is_valid+0x28>
 800e520:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800e524:	f007 fff6 	bl	8016514 <rcl_context_is_valid>
 800e528:	b130      	cbz	r0, 800e538 <rcl_publisher_is_valid+0x28>
 800e52a:	6823      	ldr	r3, [r4, #0]
 800e52c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e530:	3800      	subs	r0, #0
 800e532:	bf18      	it	ne
 800e534:	2001      	movne	r0, #1
 800e536:	bd10      	pop	{r4, pc}
 800e538:	2000      	movs	r0, #0
 800e53a:	bd10      	pop	{r4, pc}
 800e53c:	2000      	movs	r0, #0
 800e53e:	4770      	bx	lr

0800e540 <rcl_publisher_is_valid_except_context>:
 800e540:	b130      	cbz	r0, 800e550 <rcl_publisher_is_valid_except_context+0x10>
 800e542:	6800      	ldr	r0, [r0, #0]
 800e544:	b120      	cbz	r0, 800e550 <rcl_publisher_is_valid_except_context+0x10>
 800e546:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800e54a:	3800      	subs	r0, #0
 800e54c:	bf18      	it	ne
 800e54e:	2001      	movne	r0, #1
 800e550:	4770      	bx	lr
 800e552:	bf00      	nop

0800e554 <_rclc_check_for_new_data>:
 800e554:	2800      	cmp	r0, #0
 800e556:	d046      	beq.n	800e5e6 <_rclc_check_for_new_data+0x92>
 800e558:	b510      	push	{r4, lr}
 800e55a:	7802      	ldrb	r2, [r0, #0]
 800e55c:	b084      	sub	sp, #16
 800e55e:	4603      	mov	r3, r0
 800e560:	2a0a      	cmp	r2, #10
 800e562:	d842      	bhi.n	800e5ea <_rclc_check_for_new_data+0x96>
 800e564:	e8df f002 	tbb	[pc, r2]
 800e568:	14181212 	.word	0x14181212
 800e56c:	06060614 	.word	0x06060614
 800e570:	2e1a      	.short	0x2e1a
 800e572:	16          	.byte	0x16
 800e573:	00          	.byte	0x00
 800e574:	6a0a      	ldr	r2, [r1, #32]
 800e576:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800e578:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e57c:	3a00      	subs	r2, #0
 800e57e:	bf18      	it	ne
 800e580:	2201      	movne	r2, #1
 800e582:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800e586:	2000      	movs	r0, #0
 800e588:	b004      	add	sp, #16
 800e58a:	bd10      	pop	{r4, pc}
 800e58c:	680a      	ldr	r2, [r1, #0]
 800e58e:	e7f2      	b.n	800e576 <_rclc_check_for_new_data+0x22>
 800e590:	698a      	ldr	r2, [r1, #24]
 800e592:	e7f0      	b.n	800e576 <_rclc_check_for_new_data+0x22>
 800e594:	688a      	ldr	r2, [r1, #8]
 800e596:	e7ee      	b.n	800e576 <_rclc_check_for_new_data+0x22>
 800e598:	690a      	ldr	r2, [r1, #16]
 800e59a:	e7ec      	b.n	800e576 <_rclc_check_for_new_data+0x22>
 800e59c:	685c      	ldr	r4, [r3, #4]
 800e59e:	4608      	mov	r0, r1
 800e5a0:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800e5a4:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800e5a8:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800e5ac:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800e5b0:	9300      	str	r3, [sp, #0]
 800e5b2:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800e5b6:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800e5ba:	f104 0110 	add.w	r1, r4, #16
 800e5be:	f00a fb43 	bl	8018c48 <rcl_action_client_wait_set_get_entities_ready>
 800e5c2:	e7e1      	b.n	800e588 <_rclc_check_for_new_data+0x34>
 800e5c4:	685c      	ldr	r4, [r3, #4]
 800e5c6:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800e5ca:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800e5ce:	e9cd 3200 	strd	r3, r2, [sp]
 800e5d2:	4608      	mov	r0, r1
 800e5d4:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800e5d8:	f104 0220 	add.w	r2, r4, #32
 800e5dc:	f104 0110 	add.w	r1, r4, #16
 800e5e0:	f00a fd38 	bl	8019054 <rcl_action_server_wait_set_get_entities_ready>
 800e5e4:	e7d0      	b.n	800e588 <_rclc_check_for_new_data+0x34>
 800e5e6:	200b      	movs	r0, #11
 800e5e8:	4770      	bx	lr
 800e5ea:	2001      	movs	r0, #1
 800e5ec:	e7cc      	b.n	800e588 <_rclc_check_for_new_data+0x34>
 800e5ee:	bf00      	nop

0800e5f0 <_rclc_take_new_data>:
 800e5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5f2:	b099      	sub	sp, #100	@ 0x64
 800e5f4:	2800      	cmp	r0, #0
 800e5f6:	f000 8082 	beq.w	800e6fe <_rclc_take_new_data+0x10e>
 800e5fa:	7803      	ldrb	r3, [r0, #0]
 800e5fc:	4604      	mov	r4, r0
 800e5fe:	2b0a      	cmp	r3, #10
 800e600:	f200 815d 	bhi.w	800e8be <_rclc_take_new_data+0x2ce>
 800e604:	e8df f003 	tbb	[pc, r3]
 800e608:	31531f1f 	.word	0x31531f1f
 800e60c:	06060631 	.word	0x06060631
 800e610:	4555      	.short	0x4555
 800e612:	53          	.byte	0x53
 800e613:	00          	.byte	0x00
 800e614:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e616:	6a0b      	ldr	r3, [r1, #32]
 800e618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d046      	beq.n	800e6ae <_rclc_take_new_data+0xbe>
 800e620:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800e624:	f104 0110 	add.w	r1, r4, #16
 800e628:	f008 fd8e 	bl	8017148 <rcl_take_request>
 800e62c:	4605      	mov	r5, r0
 800e62e:	2800      	cmp	r0, #0
 800e630:	d03d      	beq.n	800e6ae <_rclc_take_new_data+0xbe>
 800e632:	f240 2359 	movw	r3, #601	@ 0x259
 800e636:	4298      	cmp	r0, r3
 800e638:	d128      	bne.n	800e68c <_rclc_take_new_data+0x9c>
 800e63a:	2300      	movs	r3, #0
 800e63c:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800e640:	4628      	mov	r0, r5
 800e642:	b019      	add	sp, #100	@ 0x64
 800e644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e646:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e648:	680b      	ldr	r3, [r1, #0]
 800e64a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e64e:	b373      	cbz	r3, 800e6ae <_rclc_take_new_data+0xbe>
 800e650:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800e654:	2300      	movs	r3, #0
 800e656:	aa0a      	add	r2, sp, #40	@ 0x28
 800e658:	f008 fe8a 	bl	8017370 <rcl_take>
 800e65c:	4605      	mov	r5, r0
 800e65e:	b330      	cbz	r0, 800e6ae <_rclc_take_new_data+0xbe>
 800e660:	f240 1391 	movw	r3, #401	@ 0x191
 800e664:	4298      	cmp	r0, r3
 800e666:	d0e8      	beq.n	800e63a <_rclc_take_new_data+0x4a>
 800e668:	e010      	b.n	800e68c <_rclc_take_new_data+0x9c>
 800e66a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e66c:	698b      	ldr	r3, [r1, #24]
 800e66e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e672:	b1e3      	cbz	r3, 800e6ae <_rclc_take_new_data+0xbe>
 800e674:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800e678:	f104 0110 	add.w	r1, r4, #16
 800e67c:	f007 feb4 	bl	80163e8 <rcl_take_response>
 800e680:	4605      	mov	r5, r0
 800e682:	b1a0      	cbz	r0, 800e6ae <_rclc_take_new_data+0xbe>
 800e684:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800e688:	4298      	cmp	r0, r3
 800e68a:	d0d9      	beq.n	800e640 <_rclc_take_new_data+0x50>
 800e68c:	f000 ff04 	bl	800f498 <rcutils_reset_error>
 800e690:	e7d6      	b.n	800e640 <_rclc_take_new_data+0x50>
 800e692:	6840      	ldr	r0, [r0, #4]
 800e694:	f890 3020 	ldrb.w	r3, [r0, #32]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d15f      	bne.n	800e75c <_rclc_take_new_data+0x16c>
 800e69c:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d179      	bne.n	800e798 <_rclc_take_new_data+0x1a8>
 800e6a4:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	f040 8096 	bne.w	800e7da <_rclc_take_new_data+0x1ea>
 800e6ae:	2500      	movs	r5, #0
 800e6b0:	e7c6      	b.n	800e640 <_rclc_take_new_data+0x50>
 800e6b2:	6840      	ldr	r0, [r0, #4]
 800e6b4:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d138      	bne.n	800e72e <_rclc_take_new_data+0x13e>
 800e6bc:	69c3      	ldr	r3, [r0, #28]
 800e6be:	b113      	cbz	r3, 800e6c6 <_rclc_take_new_data+0xd6>
 800e6c0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e6c4:	b9fb      	cbnz	r3, 800e706 <_rclc_take_new_data+0x116>
 800e6c6:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	f040 80a8 	bne.w	800e820 <_rclc_take_new_data+0x230>
 800e6d0:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d0ea      	beq.n	800e6ae <_rclc_take_new_data+0xbe>
 800e6d8:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800e6da:	a90a      	add	r1, sp, #40	@ 0x28
 800e6dc:	3010      	adds	r0, #16
 800e6de:	f00a f997 	bl	8018a10 <rcl_action_take_result_response>
 800e6e2:	4605      	mov	r5, r0
 800e6e4:	2800      	cmp	r0, #0
 800e6e6:	d1d1      	bne.n	800e68c <_rclc_take_new_data+0x9c>
 800e6e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e6ec:	6860      	ldr	r0, [r4, #4]
 800e6ee:	f00a fdd7 	bl	80192a0 <rclc_action_find_handle_by_result_request_sequence_number>
 800e6f2:	2800      	cmp	r0, #0
 800e6f4:	d0db      	beq.n	800e6ae <_rclc_take_new_data+0xbe>
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800e6fc:	e7d7      	b.n	800e6ae <_rclc_take_new_data+0xbe>
 800e6fe:	250b      	movs	r5, #11
 800e700:	4628      	mov	r0, r5
 800e702:	b019      	add	sp, #100	@ 0x64
 800e704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e706:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e708:	3010      	adds	r0, #16
 800e70a:	f00a f9fd 	bl	8018b08 <rcl_action_take_feedback>
 800e70e:	4605      	mov	r5, r0
 800e710:	2800      	cmp	r0, #0
 800e712:	d1bb      	bne.n	800e68c <_rclc_take_new_data+0x9c>
 800e714:	6860      	ldr	r0, [r4, #4]
 800e716:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e718:	f00a fd80 	bl	801921c <rclc_action_find_goal_handle_by_uuid>
 800e71c:	4603      	mov	r3, r0
 800e71e:	2800      	cmp	r0, #0
 800e720:	f000 80c4 	beq.w	800e8ac <_rclc_take_new_data+0x2bc>
 800e724:	2201      	movs	r2, #1
 800e726:	6860      	ldr	r0, [r4, #4]
 800e728:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800e72c:	e7cb      	b.n	800e6c6 <_rclc_take_new_data+0xd6>
 800e72e:	aa04      	add	r2, sp, #16
 800e730:	a90a      	add	r1, sp, #40	@ 0x28
 800e732:	3010      	adds	r0, #16
 800e734:	f00a f8fc 	bl	8018930 <rcl_action_take_goal_response>
 800e738:	4605      	mov	r5, r0
 800e73a:	2800      	cmp	r0, #0
 800e73c:	d1a6      	bne.n	800e68c <_rclc_take_new_data+0x9c>
 800e73e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e742:	6860      	ldr	r0, [r4, #4]
 800e744:	f00a fd9a 	bl	801927c <rclc_action_find_handle_by_goal_request_sequence_number>
 800e748:	b130      	cbz	r0, 800e758 <_rclc_take_new_data+0x168>
 800e74a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800e74e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800e752:	2201      	movs	r2, #1
 800e754:	f880 2020 	strb.w	r2, [r0, #32]
 800e758:	6860      	ldr	r0, [r4, #4]
 800e75a:	e7af      	b.n	800e6bc <_rclc_take_new_data+0xcc>
 800e75c:	f00a fd38 	bl	80191d0 <rclc_action_take_goal_handle>
 800e760:	4606      	mov	r6, r0
 800e762:	6860      	ldr	r0, [r4, #4]
 800e764:	2e00      	cmp	r6, #0
 800e766:	d099      	beq.n	800e69c <_rclc_take_new_data+0xac>
 800e768:	6070      	str	r0, [r6, #4]
 800e76a:	69f2      	ldr	r2, [r6, #28]
 800e76c:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800e770:	3010      	adds	r0, #16
 800e772:	f00a faf9 	bl	8018d68 <rcl_action_take_goal_request>
 800e776:	4605      	mov	r5, r0
 800e778:	2800      	cmp	r0, #0
 800e77a:	f040 8099 	bne.w	800e8b0 <_rclc_take_new_data+0x2c0>
 800e77e:	69f7      	ldr	r7, [r6, #28]
 800e780:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e782:	7235      	strb	r5, [r6, #8]
 800e784:	f8c6 0009 	str.w	r0, [r6, #9]
 800e788:	f8c6 100d 	str.w	r1, [r6, #13]
 800e78c:	6860      	ldr	r0, [r4, #4]
 800e78e:	f8c6 2011 	str.w	r2, [r6, #17]
 800e792:	f8c6 3015 	str.w	r3, [r6, #21]
 800e796:	e781      	b.n	800e69c <_rclc_take_new_data+0xac>
 800e798:	aa04      	add	r2, sp, #16
 800e79a:	3010      	adds	r0, #16
 800e79c:	a90a      	add	r1, sp, #40	@ 0x28
 800e79e:	f00a fb53 	bl	8018e48 <rcl_action_take_result_request>
 800e7a2:	4605      	mov	r5, r0
 800e7a4:	2800      	cmp	r0, #0
 800e7a6:	f47f af71 	bne.w	800e68c <_rclc_take_new_data+0x9c>
 800e7aa:	6860      	ldr	r0, [r4, #4]
 800e7ac:	a904      	add	r1, sp, #16
 800e7ae:	f00a fd35 	bl	801921c <rclc_action_find_goal_handle_by_uuid>
 800e7b2:	4607      	mov	r7, r0
 800e7b4:	b160      	cbz	r0, 800e7d0 <_rclc_take_new_data+0x1e0>
 800e7b6:	ad0a      	add	r5, sp, #40	@ 0x28
 800e7b8:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800e7bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7be:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e7c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e7c4:	f04f 0c02 	mov.w	ip, #2
 800e7c8:	e886 0003 	stmia.w	r6, {r0, r1}
 800e7cc:	f887 c008 	strb.w	ip, [r7, #8]
 800e7d0:	6860      	ldr	r0, [r4, #4]
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800e7d8:	e764      	b.n	800e6a4 <_rclc_take_new_data+0xb4>
 800e7da:	ae04      	add	r6, sp, #16
 800e7dc:	aa0a      	add	r2, sp, #40	@ 0x28
 800e7de:	3010      	adds	r0, #16
 800e7e0:	4631      	mov	r1, r6
 800e7e2:	f00a fb6f 	bl	8018ec4 <rcl_action_take_cancel_request>
 800e7e6:	4605      	mov	r5, r0
 800e7e8:	2800      	cmp	r0, #0
 800e7ea:	f47f af4f 	bne.w	800e68c <_rclc_take_new_data+0x9c>
 800e7ee:	6860      	ldr	r0, [r4, #4]
 800e7f0:	a90a      	add	r1, sp, #40	@ 0x28
 800e7f2:	f00a fd13 	bl	801921c <rclc_action_find_goal_handle_by_uuid>
 800e7f6:	4605      	mov	r5, r0
 800e7f8:	2800      	cmp	r0, #0
 800e7fa:	d04c      	beq.n	800e896 <_rclc_take_new_data+0x2a6>
 800e7fc:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800e800:	2101      	movs	r1, #1
 800e802:	f00a fc93 	bl	801912c <rcl_action_transition_goal_state>
 800e806:	2803      	cmp	r0, #3
 800e808:	4607      	mov	r7, r0
 800e80a:	d139      	bne.n	800e880 <_rclc_take_new_data+0x290>
 800e80c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e80e:	f105 0458 	add.w	r4, r5, #88	@ 0x58
 800e812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e814:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e818:	e884 0003 	stmia.w	r4, {r0, r1}
 800e81c:	722f      	strb	r7, [r5, #8]
 800e81e:	e746      	b.n	800e6ae <_rclc_take_new_data+0xbe>
 800e820:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800e824:	a90a      	add	r1, sp, #40	@ 0x28
 800e826:	3010      	adds	r0, #16
 800e828:	f00a f930 	bl	8018a8c <rcl_action_take_cancel_response>
 800e82c:	4605      	mov	r5, r0
 800e82e:	2800      	cmp	r0, #0
 800e830:	f47f af2c 	bne.w	800e68c <_rclc_take_new_data+0x9c>
 800e834:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e838:	6860      	ldr	r0, [r4, #4]
 800e83a:	f00a fd43 	bl	80192c4 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800e83e:	4606      	mov	r6, r0
 800e840:	6860      	ldr	r0, [r4, #4]
 800e842:	2e00      	cmp	r6, #0
 800e844:	f43f af44 	beq.w	800e6d0 <_rclc_take_new_data+0xe0>
 800e848:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800e84a:	2701      	movs	r7, #1
 800e84c:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800e84e:	2b00      	cmp	r3, #0
 800e850:	f43f af3e 	beq.w	800e6d0 <_rclc_take_new_data+0xe0>
 800e854:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e856:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800e85a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800e85e:	f00a fcdd 	bl	801921c <rclc_action_find_goal_handle_by_uuid>
 800e862:	b138      	cbz	r0, 800e874 <_rclc_take_new_data+0x284>
 800e864:	6860      	ldr	r0, [r4, #4]
 800e866:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800e868:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800e86c:	3501      	adds	r5, #1
 800e86e:	42ab      	cmp	r3, r5
 800e870:	d8f0      	bhi.n	800e854 <_rclc_take_new_data+0x264>
 800e872:	e72d      	b.n	800e6d0 <_rclc_take_new_data+0xe0>
 800e874:	6860      	ldr	r0, [r4, #4]
 800e876:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800e878:	3501      	adds	r5, #1
 800e87a:	42ab      	cmp	r3, r5
 800e87c:	d8ea      	bhi.n	800e854 <_rclc_take_new_data+0x264>
 800e87e:	e727      	b.n	800e6d0 <_rclc_take_new_data+0xe0>
 800e880:	ab06      	add	r3, sp, #24
 800e882:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e884:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e888:	2103      	movs	r1, #3
 800e88a:	e896 000c 	ldmia.w	r6, {r2, r3}
 800e88e:	6860      	ldr	r0, [r4, #4]
 800e890:	f00a fd8e 	bl	80193b0 <rclc_action_server_goal_cancel_reject>
 800e894:	e70b      	b.n	800e6ae <_rclc_take_new_data+0xbe>
 800e896:	ab06      	add	r3, sp, #24
 800e898:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e89a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e89e:	2102      	movs	r1, #2
 800e8a0:	e896 000c 	ldmia.w	r6, {r2, r3}
 800e8a4:	6860      	ldr	r0, [r4, #4]
 800e8a6:	f00a fd83 	bl	80193b0 <rclc_action_server_goal_cancel_reject>
 800e8aa:	e700      	b.n	800e6ae <_rclc_take_new_data+0xbe>
 800e8ac:	6860      	ldr	r0, [r4, #4]
 800e8ae:	e70a      	b.n	800e6c6 <_rclc_take_new_data+0xd6>
 800e8b0:	6860      	ldr	r0, [r4, #4]
 800e8b2:	4631      	mov	r1, r6
 800e8b4:	f00a fc9c 	bl	80191f0 <rclc_action_remove_used_goal_handle>
 800e8b8:	f000 fdee 	bl	800f498 <rcutils_reset_error>
 800e8bc:	e6c0      	b.n	800e640 <_rclc_take_new_data+0x50>
 800e8be:	2501      	movs	r5, #1
 800e8c0:	e6be      	b.n	800e640 <_rclc_take_new_data+0x50>
 800e8c2:	bf00      	nop

0800e8c4 <rclc_executor_trigger_any>:
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	b370      	cbz	r0, 800e926 <rclc_executor_trigger_any+0x62>
 800e8c8:	b379      	cbz	r1, 800e92a <rclc_executor_trigger_any+0x66>
 800e8ca:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	b350      	cbz	r0, 800e928 <rclc_executor_trigger_any+0x64>
 800e8d2:	b430      	push	{r4, r5}
 800e8d4:	f893 c000 	ldrb.w	ip, [r3]
 800e8d8:	f1bc 0f08 	cmp.w	ip, #8
 800e8dc:	d017      	beq.n	800e90e <rclc_executor_trigger_any+0x4a>
 800e8de:	f1bc 0f09 	cmp.w	ip, #9
 800e8e2:	d00d      	beq.n	800e900 <rclc_executor_trigger_any+0x3c>
 800e8e4:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800e8e8:	b940      	cbnz	r0, 800e8fc <rclc_executor_trigger_any+0x38>
 800e8ea:	3201      	adds	r2, #1
 800e8ec:	4291      	cmp	r1, r2
 800e8ee:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800e8f2:	d003      	beq.n	800e8fc <rclc_executor_trigger_any+0x38>
 800e8f4:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800e8f8:	2800      	cmp	r0, #0
 800e8fa:	d1eb      	bne.n	800e8d4 <rclc_executor_trigger_any+0x10>
 800e8fc:	bc30      	pop	{r4, r5}
 800e8fe:	4770      	bx	lr
 800e900:	685c      	ldr	r4, [r3, #4]
 800e902:	6a25      	ldr	r5, [r4, #32]
 800e904:	2d00      	cmp	r5, #0
 800e906:	d1f9      	bne.n	800e8fc <rclc_executor_trigger_any+0x38>
 800e908:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800e90c:	e7ec      	b.n	800e8e8 <rclc_executor_trigger_any+0x24>
 800e90e:	685c      	ldr	r4, [r3, #4]
 800e910:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800e912:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800e916:	d1f1      	bne.n	800e8fc <rclc_executor_trigger_any+0x38>
 800e918:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800e91c:	2800      	cmp	r0, #0
 800e91e:	d1ed      	bne.n	800e8fc <rclc_executor_trigger_any+0x38>
 800e920:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800e924:	e7e0      	b.n	800e8e8 <rclc_executor_trigger_any+0x24>
 800e926:	4770      	bx	lr
 800e928:	4770      	bx	lr
 800e92a:	4608      	mov	r0, r1
 800e92c:	4770      	bx	lr
 800e92e:	bf00      	nop

0800e930 <_rclc_execute>:
 800e930:	2800      	cmp	r0, #0
 800e932:	f000 80da 	beq.w	800eaea <_rclc_execute+0x1ba>
 800e936:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e938:	7843      	ldrb	r3, [r0, #1]
 800e93a:	b087      	sub	sp, #28
 800e93c:	4604      	mov	r4, r0
 800e93e:	b123      	cbz	r3, 800e94a <_rclc_execute+0x1a>
 800e940:	2b01      	cmp	r3, #1
 800e942:	d01c      	beq.n	800e97e <_rclc_execute+0x4e>
 800e944:	2000      	movs	r0, #0
 800e946:	b007      	add	sp, #28
 800e948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e94a:	7803      	ldrb	r3, [r0, #0]
 800e94c:	2b08      	cmp	r3, #8
 800e94e:	f000 809e 	beq.w	800ea8e <_rclc_execute+0x15e>
 800e952:	2b09      	cmp	r3, #9
 800e954:	d024      	beq.n	800e9a0 <_rclc_execute+0x70>
 800e956:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800e95a:	2800      	cmp	r0, #0
 800e95c:	d0f2      	beq.n	800e944 <_rclc_execute+0x14>
 800e95e:	2b0a      	cmp	r3, #10
 800e960:	f200 8158 	bhi.w	800ec14 <_rclc_execute+0x2e4>
 800e964:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e968:	008c0071 	.word	0x008c0071
 800e96c:	0071007e 	.word	0x0071007e
 800e970:	00590075 	.word	0x00590075
 800e974:	00590059 	.word	0x00590059
 800e978:	01560156 	.word	0x01560156
 800e97c:	007b      	.short	0x007b
 800e97e:	7803      	ldrb	r3, [r0, #0]
 800e980:	2b0a      	cmp	r3, #10
 800e982:	f200 8147 	bhi.w	800ec14 <_rclc_execute+0x2e4>
 800e986:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e98a:	00f7      	.short	0x00f7
 800e98c:	006d0079 	.word	0x006d0079
 800e990:	00640060 	.word	0x00640060
 800e994:	00480048 	.word	0x00480048
 800e998:	00fe0048 	.word	0x00fe0048
 800e99c:	006a0100 	.word	0x006a0100
 800e9a0:	6840      	ldr	r0, [r0, #4]
 800e9a2:	6a02      	ldr	r2, [r0, #32]
 800e9a4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800e9a8:	2a00      	cmp	r2, #0
 800e9aa:	f040 80f1 	bne.w	800eb90 <_rclc_execute+0x260>
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d0c8      	beq.n	800e944 <_rclc_execute+0x14>
 800e9b2:	e003      	b.n	800e9bc <_rclc_execute+0x8c>
 800e9b4:	6858      	ldr	r0, [r3, #4]
 800e9b6:	f00a fc1b 	bl	80191f0 <rclc_action_remove_used_goal_handle>
 800e9ba:	6860      	ldr	r0, [r4, #4]
 800e9bc:	f00a fc52 	bl	8019264 <rclc_action_find_first_terminated_handle>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	4601      	mov	r1, r0
 800e9c4:	2800      	cmp	r0, #0
 800e9c6:	d1f5      	bne.n	800e9b4 <_rclc_execute+0x84>
 800e9c8:	6860      	ldr	r0, [r4, #4]
 800e9ca:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 800e9ce:	f890 3020 	ldrb.w	r3, [r0, #32]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	f000 80e9 	beq.w	800ebaa <_rclc_execute+0x27a>
 800e9d8:	f640 0634 	movw	r6, #2100	@ 0x834
 800e9dc:	2701      	movs	r7, #1
 800e9de:	e007      	b.n	800e9f0 <_rclc_execute+0xc0>
 800e9e0:	4628      	mov	r0, r5
 800e9e2:	f00a fc99 	bl	8019318 <rclc_action_server_response_goal_request>
 800e9e6:	6860      	ldr	r0, [r4, #4]
 800e9e8:	4629      	mov	r1, r5
 800e9ea:	f00a fc01 	bl	80191f0 <rclc_action_remove_used_goal_handle>
 800e9ee:	6860      	ldr	r0, [r4, #4]
 800e9f0:	2100      	movs	r1, #0
 800e9f2:	f00a fc2b 	bl	801924c <rclc_action_find_first_handle_by_status>
 800e9f6:	4605      	mov	r5, r0
 800e9f8:	2800      	cmp	r0, #0
 800e9fa:	f000 80d3 	beq.w	800eba4 <_rclc_execute+0x274>
 800e9fe:	6863      	ldr	r3, [r4, #4]
 800ea00:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ea02:	699b      	ldr	r3, [r3, #24]
 800ea04:	4798      	blx	r3
 800ea06:	42b0      	cmp	r0, r6
 800ea08:	f04f 0100 	mov.w	r1, #0
 800ea0c:	d1e8      	bne.n	800e9e0 <_rclc_execute+0xb0>
 800ea0e:	2101      	movs	r1, #1
 800ea10:	4628      	mov	r0, r5
 800ea12:	f00a fc81 	bl	8019318 <rclc_action_server_response_goal_request>
 800ea16:	722f      	strb	r7, [r5, #8]
 800ea18:	e7e9      	b.n	800e9ee <_rclc_execute+0xbe>
 800ea1a:	2b06      	cmp	r3, #6
 800ea1c:	68a0      	ldr	r0, [r4, #8]
 800ea1e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800ea20:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800ea22:	f000 80b9 	beq.w	800eb98 <_rclc_execute+0x268>
 800ea26:	2b07      	cmp	r3, #7
 800ea28:	f000 80ef 	beq.w	800ec0a <_rclc_execute+0x2da>
 800ea2c:	47b0      	blx	r6
 800ea2e:	f104 0510 	add.w	r5, r4, #16
 800ea32:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ea34:	6860      	ldr	r0, [r4, #4]
 800ea36:	4629      	mov	r1, r5
 800ea38:	f008 fbd6 	bl	80171e8 <rcl_send_response>
 800ea3c:	2800      	cmp	r0, #0
 800ea3e:	d082      	beq.n	800e946 <_rclc_execute+0x16>
 800ea40:	9005      	str	r0, [sp, #20]
 800ea42:	f000 fd29 	bl	800f498 <rcutils_reset_error>
 800ea46:	9805      	ldr	r0, [sp, #20]
 800ea48:	e77d      	b.n	800e946 <_rclc_execute+0x16>
 800ea4a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ea4c:	68a0      	ldr	r0, [r4, #8]
 800ea4e:	4798      	blx	r3
 800ea50:	e778      	b.n	800e944 <_rclc_execute+0x14>
 800ea52:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ea54:	68a0      	ldr	r0, [r4, #8]
 800ea56:	f104 0110 	add.w	r1, r4, #16
 800ea5a:	4798      	blx	r3
 800ea5c:	e772      	b.n	800e944 <_rclc_execute+0x14>
 800ea5e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ea60:	4798      	blx	r3
 800ea62:	e76f      	b.n	800e944 <_rclc_execute+0x14>
 800ea64:	6860      	ldr	r0, [r4, #4]
 800ea66:	f008 ffbf 	bl	80179e8 <rcl_timer_call>
 800ea6a:	f240 3321 	movw	r3, #801	@ 0x321
 800ea6e:	4298      	cmp	r0, r3
 800ea70:	f43f af68 	beq.w	800e944 <_rclc_execute+0x14>
 800ea74:	2800      	cmp	r0, #0
 800ea76:	f43f af66 	beq.w	800e946 <_rclc_execute+0x16>
 800ea7a:	e7e1      	b.n	800ea40 <_rclc_execute+0x110>
 800ea7c:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800ea80:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 800ea84:	2800      	cmp	r0, #0
 800ea86:	d0e8      	beq.n	800ea5a <_rclc_execute+0x12a>
 800ea88:	68a0      	ldr	r0, [r4, #8]
 800ea8a:	4798      	blx	r3
 800ea8c:	e75a      	b.n	800e944 <_rclc_execute+0x14>
 800ea8e:	6840      	ldr	r0, [r0, #4]
 800ea90:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800ea92:	f033 437f 	bics.w	r3, r3, #4278190080	@ 0xff000000
 800ea96:	d107      	bne.n	800eaa8 <_rclc_execute+0x178>
 800ea98:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ea9c:	b923      	cbnz	r3, 800eaa8 <_rclc_execute+0x178>
 800ea9e:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	f43f af4e 	beq.w	800e944 <_rclc_execute+0x14>
 800eaa8:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800eaac:	b303      	cbz	r3, 800eaf0 <_rclc_execute+0x1c0>
 800eaae:	2600      	movs	r6, #0
 800eab0:	2701      	movs	r7, #1
 800eab2:	e004      	b.n	800eabe <_rclc_execute+0x18e>
 800eab4:	f00a fb66 	bl	8019184 <rclc_action_send_result_request>
 800eab8:	b990      	cbnz	r0, 800eae0 <_rclc_execute+0x1b0>
 800eaba:	722f      	strb	r7, [r5, #8]
 800eabc:	6860      	ldr	r0, [r4, #4]
 800eabe:	f00a fc13 	bl	80192e8 <rclc_action_find_first_handle_with_goal_response>
 800eac2:	4605      	mov	r5, r0
 800eac4:	b198      	cbz	r0, 800eaee <_rclc_execute+0x1be>
 800eac6:	6863      	ldr	r3, [r4, #4]
 800eac8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800eaca:	699b      	ldr	r3, [r3, #24]
 800eacc:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800ead0:	f885 6020 	strb.w	r6, [r5, #32]
 800ead4:	4798      	blx	r3
 800ead6:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800eada:	4628      	mov	r0, r5
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d1e9      	bne.n	800eab4 <_rclc_execute+0x184>
 800eae0:	6860      	ldr	r0, [r4, #4]
 800eae2:	4629      	mov	r1, r5
 800eae4:	f00a fb84 	bl	80191f0 <rclc_action_remove_used_goal_handle>
 800eae8:	e7e8      	b.n	800eabc <_rclc_execute+0x18c>
 800eaea:	200b      	movs	r0, #11
 800eaec:	4770      	bx	lr
 800eaee:	6860      	ldr	r0, [r4, #4]
 800eaf0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800eaf4:	b18b      	cbz	r3, 800eb1a <_rclc_execute+0x1ea>
 800eaf6:	68c5      	ldr	r5, [r0, #12]
 800eaf8:	b32d      	cbz	r5, 800eb46 <_rclc_execute+0x216>
 800eafa:	2600      	movs	r6, #0
 800eafc:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800eb00:	b143      	cbz	r3, 800eb14 <_rclc_execute+0x1e4>
 800eb02:	69c3      	ldr	r3, [r0, #28]
 800eb04:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800eb08:	b123      	cbz	r3, 800eb14 <_rclc_execute+0x1e4>
 800eb0a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800eb0c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800eb0e:	4628      	mov	r0, r5
 800eb10:	4798      	blx	r3
 800eb12:	6860      	ldr	r0, [r4, #4]
 800eb14:	682d      	ldr	r5, [r5, #0]
 800eb16:	2d00      	cmp	r5, #0
 800eb18:	d1f0      	bne.n	800eafc <_rclc_execute+0x1cc>
 800eb1a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800eb1e:	b193      	cbz	r3, 800eb46 <_rclc_execute+0x216>
 800eb20:	68c5      	ldr	r5, [r0, #12]
 800eb22:	b185      	cbz	r5, 800eb46 <_rclc_execute+0x216>
 800eb24:	2600      	movs	r6, #0
 800eb26:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800eb2a:	b14b      	cbz	r3, 800eb40 <_rclc_execute+0x210>
 800eb2c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800eb2e:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800eb32:	b12b      	cbz	r3, 800eb40 <_rclc_execute+0x210>
 800eb34:	4628      	mov	r0, r5
 800eb36:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800eb38:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800eb3c:	4798      	blx	r3
 800eb3e:	6860      	ldr	r0, [r4, #4]
 800eb40:	682d      	ldr	r5, [r5, #0]
 800eb42:	2d00      	cmp	r5, #0
 800eb44:	d1ef      	bne.n	800eb26 <_rclc_execute+0x1f6>
 800eb46:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	f43f aefa 	beq.w	800e944 <_rclc_execute+0x14>
 800eb50:	2700      	movs	r7, #0
 800eb52:	e00b      	b.n	800eb6c <_rclc_execute+0x23c>
 800eb54:	6863      	ldr	r3, [r4, #4]
 800eb56:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800eb58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800eb5a:	6a1e      	ldr	r6, [r3, #32]
 800eb5c:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800eb60:	47b0      	blx	r6
 800eb62:	6860      	ldr	r0, [r4, #4]
 800eb64:	4629      	mov	r1, r5
 800eb66:	f00a fb43 	bl	80191f0 <rclc_action_remove_used_goal_handle>
 800eb6a:	6860      	ldr	r0, [r4, #4]
 800eb6c:	f00a fbc8 	bl	8019300 <rclc_action_find_first_handle_with_result_response>
 800eb70:	4605      	mov	r5, r0
 800eb72:	2800      	cmp	r0, #0
 800eb74:	d1ee      	bne.n	800eb54 <_rclc_execute+0x224>
 800eb76:	e6e5      	b.n	800e944 <_rclc_execute+0x14>
 800eb78:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800eb7c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800eb7e:	2800      	cmp	r0, #0
 800eb80:	f43f af65 	beq.w	800ea4e <_rclc_execute+0x11e>
 800eb84:	e762      	b.n	800ea4c <_rclc_execute+0x11c>
 800eb86:	6840      	ldr	r0, [r0, #4]
 800eb88:	e78e      	b.n	800eaa8 <_rclc_execute+0x178>
 800eb8a:	6840      	ldr	r0, [r0, #4]
 800eb8c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	f43f af1c 	beq.w	800e9ce <_rclc_execute+0x9e>
 800eb96:	e711      	b.n	800e9bc <_rclc_execute+0x8c>
 800eb98:	f104 0510 	add.w	r5, r4, #16
 800eb9c:	460a      	mov	r2, r1
 800eb9e:	4629      	mov	r1, r5
 800eba0:	47b0      	blx	r6
 800eba2:	e746      	b.n	800ea32 <_rclc_execute+0x102>
 800eba4:	6860      	ldr	r0, [r4, #4]
 800eba6:	f880 5020 	strb.w	r5, [r0, #32]
 800ebaa:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	f43f aec8 	beq.w	800e944 <_rclc_execute+0x14>
 800ebb4:	68c5      	ldr	r5, [r0, #12]
 800ebb6:	b325      	cbz	r5, 800ec02 <_rclc_execute+0x2d2>
 800ebb8:	2602      	movs	r6, #2
 800ebba:	e001      	b.n	800ebc0 <_rclc_execute+0x290>
 800ebbc:	682d      	ldr	r5, [r5, #0]
 800ebbe:	b305      	cbz	r5, 800ec02 <_rclc_execute+0x2d2>
 800ebc0:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800ebc4:	2b03      	cmp	r3, #3
 800ebc6:	d1f9      	bne.n	800ebbc <_rclc_execute+0x28c>
 800ebc8:	69c3      	ldr	r3, [r0, #28]
 800ebca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ebcc:	4628      	mov	r0, r5
 800ebce:	4798      	blx	r3
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800ebd6:	4628      	mov	r0, r5
 800ebd8:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800ebdc:	b11b      	cbz	r3, 800ebe6 <_rclc_execute+0x2b6>
 800ebde:	f00a fbbb 	bl	8019358 <rclc_action_server_goal_cancel_accept>
 800ebe2:	6860      	ldr	r0, [r4, #4]
 800ebe4:	e7ea      	b.n	800ebbc <_rclc_execute+0x28c>
 800ebe6:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800ebe8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ebec:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800ebf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ebf4:	6860      	ldr	r0, [r4, #4]
 800ebf6:	2101      	movs	r1, #1
 800ebf8:	f00a fbda 	bl	80193b0 <rclc_action_server_goal_cancel_reject>
 800ebfc:	722e      	strb	r6, [r5, #8]
 800ebfe:	6860      	ldr	r0, [r4, #4]
 800ec00:	e7dc      	b.n	800ebbc <_rclc_execute+0x28c>
 800ec02:	2300      	movs	r3, #0
 800ec04:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800ec08:	e69c      	b.n	800e944 <_rclc_execute+0x14>
 800ec0a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ec0c:	47b0      	blx	r6
 800ec0e:	f104 0510 	add.w	r5, r4, #16
 800ec12:	e70e      	b.n	800ea32 <_rclc_execute+0x102>
 800ec14:	2001      	movs	r0, #1
 800ec16:	e696      	b.n	800e946 <_rclc_execute+0x16>

0800ec18 <rclc_executor_get_zero_initialized_executor>:
 800ec18:	b510      	push	{r4, lr}
 800ec1a:	4903      	ldr	r1, [pc, #12]	@ (800ec28 <rclc_executor_get_zero_initialized_executor+0x10>)
 800ec1c:	4604      	mov	r4, r0
 800ec1e:	2290      	movs	r2, #144	@ 0x90
 800ec20:	f00f f865 	bl	801dcee <memcpy>
 800ec24:	4620      	mov	r0, r4
 800ec26:	bd10      	pop	{r4, pc}
 800ec28:	080204c0 	.word	0x080204c0
 800ec2c:	00000000 	.word	0x00000000

0800ec30 <rclc_executor_init>:
 800ec30:	2800      	cmp	r0, #0
 800ec32:	d05a      	beq.n	800ecea <rclc_executor_init+0xba>
 800ec34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec38:	460d      	mov	r5, r1
 800ec3a:	b0b2      	sub	sp, #200	@ 0xc8
 800ec3c:	2900      	cmp	r1, #0
 800ec3e:	d050      	beq.n	800ece2 <rclc_executor_init+0xb2>
 800ec40:	4604      	mov	r4, r0
 800ec42:	4618      	mov	r0, r3
 800ec44:	4616      	mov	r6, r2
 800ec46:	461f      	mov	r7, r3
 800ec48:	f000 fc00 	bl	800f44c <rcutils_allocator_is_valid>
 800ec4c:	2800      	cmp	r0, #0
 800ec4e:	d048      	beq.n	800ece2 <rclc_executor_init+0xb2>
 800ec50:	2e00      	cmp	r6, #0
 800ec52:	d046      	beq.n	800ece2 <rclc_executor_init+0xb2>
 800ec54:	492a      	ldr	r1, [pc, #168]	@ (800ed00 <rclc_executor_init+0xd0>)
 800ec56:	2290      	movs	r2, #144	@ 0x90
 800ec58:	a80e      	add	r0, sp, #56	@ 0x38
 800ec5a:	f00f f848 	bl	801dcee <memcpy>
 800ec5e:	a90e      	add	r1, sp, #56	@ 0x38
 800ec60:	2290      	movs	r2, #144	@ 0x90
 800ec62:	4620      	mov	r0, r4
 800ec64:	f00f f843 	bl	801dcee <memcpy>
 800ec68:	6065      	str	r5, [r4, #4]
 800ec6a:	4668      	mov	r0, sp
 800ec6c:	60e6      	str	r6, [r4, #12]
 800ec6e:	466d      	mov	r5, sp
 800ec70:	f009 f808 	bl	8017c84 <rcl_get_zero_initialized_wait_set>
 800ec74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec76:	f104 0c18 	add.w	ip, r4, #24
 800ec7a:	f8d7 8000 	ldr.w	r8, [r7]
 800ec7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec8e:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 800ecf8 <rclc_executor_init+0xc8>
 800ec92:	682b      	ldr	r3, [r5, #0]
 800ec94:	f8cc 3000 	str.w	r3, [ip]
 800ec98:	6939      	ldr	r1, [r7, #16]
 800ec9a:	6167      	str	r7, [r4, #20]
 800ec9c:	ed84 7b1c 	vstr	d7, [r4, #112]	@ 0x70
 800eca0:	01b0      	lsls	r0, r6, #6
 800eca2:	47c0      	blx	r8
 800eca4:	60a0      	str	r0, [r4, #8]
 800eca6:	b310      	cbz	r0, 800ecee <rclc_executor_init+0xbe>
 800eca8:	2500      	movs	r5, #0
 800ecaa:	e000      	b.n	800ecae <rclc_executor_init+0x7e>
 800ecac:	68a0      	ldr	r0, [r4, #8]
 800ecae:	eb00 1085 	add.w	r0, r0, r5, lsl #6
 800ecb2:	4631      	mov	r1, r6
 800ecb4:	3501      	adds	r5, #1
 800ecb6:	f000 fa39 	bl	800f12c <rclc_executor_handle_init>
 800ecba:	42ae      	cmp	r6, r5
 800ecbc:	d1f6      	bne.n	800ecac <rclc_executor_init+0x7c>
 800ecbe:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 800ecc2:	f000 fa29 	bl	800f118 <rclc_executor_handle_counters_zero_init>
 800ecc6:	490f      	ldr	r1, [pc, #60]	@ (800ed04 <rclc_executor_init+0xd4>)
 800ecc8:	68a2      	ldr	r2, [r4, #8]
 800ecca:	2300      	movs	r3, #0
 800eccc:	e9c4 1320 	strd	r1, r3, [r4, #128]	@ 0x80
 800ecd0:	b12a      	cbz	r2, 800ecde <rclc_executor_init+0xae>
 800ecd2:	6962      	ldr	r2, [r4, #20]
 800ecd4:	b11a      	cbz	r2, 800ecde <rclc_executor_init+0xae>
 800ecd6:	68e2      	ldr	r2, [r4, #12]
 800ecd8:	b10a      	cbz	r2, 800ecde <rclc_executor_init+0xae>
 800ecda:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 800ecde:	2000      	movs	r0, #0
 800ece0:	e000      	b.n	800ece4 <rclc_executor_init+0xb4>
 800ece2:	200b      	movs	r0, #11
 800ece4:	b032      	add	sp, #200	@ 0xc8
 800ece6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecea:	200b      	movs	r0, #11
 800ecec:	4770      	bx	lr
 800ecee:	200a      	movs	r0, #10
 800ecf0:	e7f8      	b.n	800ece4 <rclc_executor_init+0xb4>
 800ecf2:	bf00      	nop
 800ecf4:	f3af 8000 	nop.w
 800ecf8:	3b9aca00 	.word	0x3b9aca00
 800ecfc:	00000000 	.word	0x00000000
 800ed00:	080204c0 	.word	0x080204c0
 800ed04:	0800e8c5 	.word	0x0800e8c5

0800ed08 <rclc_executor_add_timer>:
 800ed08:	b300      	cbz	r0, 800ed4c <rclc_executor_add_timer+0x44>
 800ed0a:	b1f9      	cbz	r1, 800ed4c <rclc_executor_add_timer+0x44>
 800ed0c:	b538      	push	{r3, r4, r5, lr}
 800ed0e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800ed12:	4293      	cmp	r3, r2
 800ed14:	4604      	mov	r4, r0
 800ed16:	d301      	bcc.n	800ed1c <rclc_executor_add_timer+0x14>
 800ed18:	2001      	movs	r0, #1
 800ed1a:	bd38      	pop	{r3, r4, r5, pc}
 800ed1c:	6880      	ldr	r0, [r0, #8]
 800ed1e:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800ed22:	019d      	lsls	r5, r3, #6
 800ed24:	6051      	str	r1, [r2, #4]
 800ed26:	2102      	movs	r1, #2
 800ed28:	5341      	strh	r1, [r0, r5]
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	2000      	movs	r0, #0
 800ed2e:	2101      	movs	r1, #1
 800ed30:	f104 0518 	add.w	r5, r4, #24
 800ed34:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800ed36:	8711      	strh	r1, [r2, #56]	@ 0x38
 800ed38:	4628      	mov	r0, r5
 800ed3a:	6123      	str	r3, [r4, #16]
 800ed3c:	f008 ffb6 	bl	8017cac <rcl_wait_set_is_valid>
 800ed40:	b930      	cbnz	r0, 800ed50 <rclc_executor_add_timer+0x48>
 800ed42:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800ed44:	3301      	adds	r3, #1
 800ed46:	2000      	movs	r0, #0
 800ed48:	6523      	str	r3, [r4, #80]	@ 0x50
 800ed4a:	bd38      	pop	{r3, r4, r5, pc}
 800ed4c:	200b      	movs	r0, #11
 800ed4e:	4770      	bx	lr
 800ed50:	4628      	mov	r0, r5
 800ed52:	f008 ffb1 	bl	8017cb8 <rcl_wait_set_fini>
 800ed56:	2800      	cmp	r0, #0
 800ed58:	d0f3      	beq.n	800ed42 <rclc_executor_add_timer+0x3a>
 800ed5a:	bd38      	pop	{r3, r4, r5, pc}

0800ed5c <rclc_executor_add_service>:
 800ed5c:	b370      	cbz	r0, 800edbc <rclc_executor_add_service+0x60>
 800ed5e:	b369      	cbz	r1, 800edbc <rclc_executor_add_service+0x60>
 800ed60:	b362      	cbz	r2, 800edbc <rclc_executor_add_service+0x60>
 800ed62:	b35b      	cbz	r3, 800edbc <rclc_executor_add_service+0x60>
 800ed64:	b538      	push	{r3, r4, r5, lr}
 800ed66:	4604      	mov	r4, r0
 800ed68:	9804      	ldr	r0, [sp, #16]
 800ed6a:	b378      	cbz	r0, 800edcc <rclc_executor_add_service+0x70>
 800ed6c:	e9d4 5003 	ldrd	r5, r0, [r4, #12]
 800ed70:	42a8      	cmp	r0, r5
 800ed72:	d301      	bcc.n	800ed78 <rclc_executor_add_service+0x1c>
 800ed74:	2001      	movs	r0, #1
 800ed76:	bd38      	pop	{r3, r4, r5, pc}
 800ed78:	68a5      	ldr	r5, [r4, #8]
 800ed7a:	eb05 1c80 	add.w	ip, r5, r0, lsl #6
 800ed7e:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800ed82:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
 800ed86:	9b04      	ldr	r3, [sp, #16]
 800ed88:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800ed8c:	2305      	movs	r3, #5
 800ed8e:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800ed92:	3001      	adds	r0, #1
 800ed94:	f825 300e 	strh.w	r3, [r5, lr]
 800ed98:	2201      	movs	r2, #1
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	f104 0518 	add.w	r5, r4, #24
 800eda0:	f88c 2038 	strb.w	r2, [ip, #56]	@ 0x38
 800eda4:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
 800eda8:	6120      	str	r0, [r4, #16]
 800edaa:	4628      	mov	r0, r5
 800edac:	f008 ff7e 	bl	8017cac <rcl_wait_set_is_valid>
 800edb0:	b930      	cbnz	r0, 800edc0 <rclc_executor_add_service+0x64>
 800edb2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800edb4:	3301      	adds	r3, #1
 800edb6:	2000      	movs	r0, #0
 800edb8:	65a3      	str	r3, [r4, #88]	@ 0x58
 800edba:	bd38      	pop	{r3, r4, r5, pc}
 800edbc:	200b      	movs	r0, #11
 800edbe:	4770      	bx	lr
 800edc0:	4628      	mov	r0, r5
 800edc2:	f008 ff79 	bl	8017cb8 <rcl_wait_set_fini>
 800edc6:	2800      	cmp	r0, #0
 800edc8:	d0f3      	beq.n	800edb2 <rclc_executor_add_service+0x56>
 800edca:	e7d4      	b.n	800ed76 <rclc_executor_add_service+0x1a>
 800edcc:	200b      	movs	r0, #11
 800edce:	bd38      	pop	{r3, r4, r5, pc}

0800edd0 <rclc_executor_prepare>:
 800edd0:	2800      	cmp	r0, #0
 800edd2:	d044      	beq.n	800ee5e <rclc_executor_prepare+0x8e>
 800edd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edd6:	f100 0518 	add.w	r5, r0, #24
 800edda:	b09b      	sub	sp, #108	@ 0x6c
 800eddc:	4604      	mov	r4, r0
 800edde:	4628      	mov	r0, r5
 800ede0:	f008 ff64 	bl	8017cac <rcl_wait_set_is_valid>
 800ede4:	b110      	cbz	r0, 800edec <rclc_executor_prepare+0x1c>
 800ede6:	2000      	movs	r0, #0
 800ede8:	b01b      	add	sp, #108	@ 0x6c
 800edea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edec:	4628      	mov	r0, r5
 800edee:	f008 ff63 	bl	8017cb8 <rcl_wait_set_fini>
 800edf2:	2800      	cmp	r0, #0
 800edf4:	d130      	bne.n	800ee58 <rclc_executor_prepare+0x88>
 800edf6:	a80c      	add	r0, sp, #48	@ 0x30
 800edf8:	f008 ff44 	bl	8017c84 <rcl_get_zero_initialized_wait_set>
 800edfc:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800ee00:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ee04:	46ae      	mov	lr, r5
 800ee06:	6967      	ldr	r7, [r4, #20]
 800ee08:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ee0c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ee10:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ee14:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ee18:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ee1c:	f8dc 3000 	ldr.w	r3, [ip]
 800ee20:	f8ce 3000 	str.w	r3, [lr]
 800ee24:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ee26:	ae04      	add	r6, sp, #16
 800ee28:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	6862      	ldr	r2, [r4, #4]
 800ee2e:	6033      	str	r3, [r6, #0]
 800ee30:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800ee32:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800ee34:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800ee38:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 800ee3c:	e9cd 2100 	strd	r2, r1, [sp]
 800ee40:	4628      	mov	r0, r5
 800ee42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ee44:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800ee46:	f009 fa53 	bl	80182f0 <rcl_wait_set_init>
 800ee4a:	2800      	cmp	r0, #0
 800ee4c:	d0cc      	beq.n	800ede8 <rclc_executor_prepare+0x18>
 800ee4e:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ee50:	f000 fb22 	bl	800f498 <rcutils_reset_error>
 800ee54:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ee56:	e7c7      	b.n	800ede8 <rclc_executor_prepare+0x18>
 800ee58:	f000 fb1e 	bl	800f498 <rcutils_reset_error>
 800ee5c:	e7cb      	b.n	800edf6 <rclc_executor_prepare+0x26>
 800ee5e:	200b      	movs	r0, #11
 800ee60:	4770      	bx	lr
 800ee62:	bf00      	nop

0800ee64 <rclc_executor_spin_some>:
 800ee64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee68:	b083      	sub	sp, #12
 800ee6a:	2800      	cmp	r0, #0
 800ee6c:	f000 8091 	beq.w	800ef92 <rclc_executor_spin_some+0x12e>
 800ee70:	4604      	mov	r4, r0
 800ee72:	6840      	ldr	r0, [r0, #4]
 800ee74:	4690      	mov	r8, r2
 800ee76:	4699      	mov	r9, r3
 800ee78:	f007 fb4c 	bl	8016514 <rcl_context_is_valid>
 800ee7c:	2800      	cmp	r0, #0
 800ee7e:	d037      	beq.n	800eef0 <rclc_executor_spin_some+0x8c>
 800ee80:	4620      	mov	r0, r4
 800ee82:	f104 0718 	add.w	r7, r4, #24
 800ee86:	f7ff ffa3 	bl	800edd0 <rclc_executor_prepare>
 800ee8a:	4638      	mov	r0, r7
 800ee8c:	f008 ffe4 	bl	8017e58 <rcl_wait_set_clear>
 800ee90:	4606      	mov	r6, r0
 800ee92:	2800      	cmp	r0, #0
 800ee94:	d177      	bne.n	800ef86 <rclc_executor_spin_some+0x122>
 800ee96:	68e3      	ldr	r3, [r4, #12]
 800ee98:	4605      	mov	r5, r0
 800ee9a:	b1eb      	cbz	r3, 800eed8 <rclc_executor_spin_some+0x74>
 800ee9c:	68a1      	ldr	r1, [r4, #8]
 800ee9e:	eb01 1c85 	add.w	ip, r1, r5, lsl #6
 800eea2:	01aa      	lsls	r2, r5, #6
 800eea4:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800eea8:	b1b3      	cbz	r3, 800eed8 <rclc_executor_spin_some+0x74>
 800eeaa:	5c8b      	ldrb	r3, [r1, r2]
 800eeac:	2b0a      	cmp	r3, #10
 800eeae:	d81f      	bhi.n	800eef0 <rclc_executor_spin_some+0x8c>
 800eeb0:	e8df f003 	tbb	[pc, r3]
 800eeb4:	253e3434 	.word	0x253e3434
 800eeb8:	06060625 	.word	0x06060625
 800eebc:	525d      	.short	0x525d
 800eebe:	48          	.byte	0x48
 800eebf:	00          	.byte	0x00
 800eec0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800eec4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800eec8:	4638      	mov	r0, r7
 800eeca:	f009 fb25 	bl	8018518 <rcl_wait_set_add_service>
 800eece:	b9f8      	cbnz	r0, 800ef10 <rclc_executor_spin_some+0xac>
 800eed0:	68e3      	ldr	r3, [r4, #12]
 800eed2:	3501      	adds	r5, #1
 800eed4:	42ab      	cmp	r3, r5
 800eed6:	d8e1      	bhi.n	800ee9c <rclc_executor_spin_some+0x38>
 800eed8:	4642      	mov	r2, r8
 800eeda:	464b      	mov	r3, r9
 800eedc:	4638      	mov	r0, r7
 800eede:	f009 fb47 	bl	8018570 <rcl_wait>
 800eee2:	f894 5088 	ldrb.w	r5, [r4, #136]	@ 0x88
 800eee6:	2d00      	cmp	r5, #0
 800eee8:	f000 80ab 	beq.w	800f042 <rclc_executor_spin_some+0x1de>
 800eeec:	2d01      	cmp	r5, #1
 800eeee:	d055      	beq.n	800ef9c <rclc_executor_spin_some+0x138>
 800eef0:	f000 fad2 	bl	800f498 <rcutils_reset_error>
 800eef4:	2601      	movs	r6, #1
 800eef6:	4630      	mov	r0, r6
 800eef8:	b003      	add	sp, #12
 800eefa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eefe:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ef02:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ef06:	4638      	mov	r0, r7
 800ef08:	f009 fada 	bl	80184c0 <rcl_wait_set_add_client>
 800ef0c:	2800      	cmp	r0, #0
 800ef0e:	d0df      	beq.n	800eed0 <rclc_executor_spin_some+0x6c>
 800ef10:	9001      	str	r0, [sp, #4]
 800ef12:	f000 fac1 	bl	800f498 <rcutils_reset_error>
 800ef16:	9801      	ldr	r0, [sp, #4]
 800ef18:	4606      	mov	r6, r0
 800ef1a:	e7ec      	b.n	800eef6 <rclc_executor_spin_some+0x92>
 800ef1c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ef20:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ef24:	4638      	mov	r0, r7
 800ef26:	f008 ff6b 	bl	8017e00 <rcl_wait_set_add_subscription>
 800ef2a:	2800      	cmp	r0, #0
 800ef2c:	d0d0      	beq.n	800eed0 <rclc_executor_spin_some+0x6c>
 800ef2e:	e7ef      	b.n	800ef10 <rclc_executor_spin_some+0xac>
 800ef30:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ef34:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ef38:	4638      	mov	r0, r7
 800ef3a:	f009 fa91 	bl	8018460 <rcl_wait_set_add_timer>
 800ef3e:	2800      	cmp	r0, #0
 800ef40:	d0c6      	beq.n	800eed0 <rclc_executor_spin_some+0x6c>
 800ef42:	e7e5      	b.n	800ef10 <rclc_executor_spin_some+0xac>
 800ef44:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ef48:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ef4c:	4638      	mov	r0, r7
 800ef4e:	f009 fa5b 	bl	8018408 <rcl_wait_set_add_guard_condition>
 800ef52:	2800      	cmp	r0, #0
 800ef54:	d0bc      	beq.n	800eed0 <rclc_executor_spin_some+0x6c>
 800ef56:	e7db      	b.n	800ef10 <rclc_executor_spin_some+0xac>
 800ef58:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ef5c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ef60:	3110      	adds	r1, #16
 800ef62:	4638      	mov	r0, r7
 800ef64:	f00a f822 	bl	8018fac <rcl_action_wait_set_add_action_server>
 800ef68:	2800      	cmp	r0, #0
 800ef6a:	d0b1      	beq.n	800eed0 <rclc_executor_spin_some+0x6c>
 800ef6c:	e7d0      	b.n	800ef10 <rclc_executor_spin_some+0xac>
 800ef6e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ef72:	2300      	movs	r3, #0
 800ef74:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ef78:	3110      	adds	r1, #16
 800ef7a:	4638      	mov	r0, r7
 800ef7c:	f009 fe04 	bl	8018b88 <rcl_action_wait_set_add_action_client>
 800ef80:	2800      	cmp	r0, #0
 800ef82:	d0a5      	beq.n	800eed0 <rclc_executor_spin_some+0x6c>
 800ef84:	e7c4      	b.n	800ef10 <rclc_executor_spin_some+0xac>
 800ef86:	f000 fa87 	bl	800f498 <rcutils_reset_error>
 800ef8a:	4630      	mov	r0, r6
 800ef8c:	b003      	add	sp, #12
 800ef8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef92:	260b      	movs	r6, #11
 800ef94:	4630      	mov	r0, r6
 800ef96:	b003      	add	sp, #12
 800ef98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef9c:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 800efa0:	4663      	mov	r3, ip
 800efa2:	4615      	mov	r5, r2
 800efa4:	b1ca      	cbz	r2, 800efda <rclc_executor_spin_some+0x176>
 800efa6:	2500      	movs	r5, #0
 800efa8:	46a8      	mov	r8, r5
 800efaa:	f240 1991 	movw	r9, #401	@ 0x191
 800efae:	e00c      	b.n	800efca <rclc_executor_spin_some+0x166>
 800efb0:	f7ff fad0 	bl	800e554 <_rclc_check_for_new_data>
 800efb4:	f108 0801 	add.w	r8, r8, #1
 800efb8:	4605      	mov	r5, r0
 800efba:	b108      	cbz	r0, 800efc0 <rclc_executor_spin_some+0x15c>
 800efbc:	4548      	cmp	r0, r9
 800efbe:	d13e      	bne.n	800f03e <rclc_executor_spin_some+0x1da>
 800efc0:	68e2      	ldr	r2, [r4, #12]
 800efc2:	4590      	cmp	r8, r2
 800efc4:	f080 808b 	bcs.w	800f0de <rclc_executor_spin_some+0x27a>
 800efc8:	68a3      	ldr	r3, [r4, #8]
 800efca:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800efce:	469c      	mov	ip, r3
 800efd0:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800efd4:	4639      	mov	r1, r7
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d1ea      	bne.n	800efb0 <rclc_executor_spin_some+0x14c>
 800efda:	4611      	mov	r1, r2
 800efdc:	4660      	mov	r0, ip
 800efde:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 800efe2:	4798      	blx	r3
 800efe4:	b358      	cbz	r0, 800f03e <rclc_executor_spin_some+0x1da>
 800efe6:	68e3      	ldr	r3, [r4, #12]
 800efe8:	b34b      	cbz	r3, 800f03e <rclc_executor_spin_some+0x1da>
 800efea:	f04f 0800 	mov.w	r8, #0
 800efee:	f240 1991 	movw	r9, #401	@ 0x191
 800eff2:	e00a      	b.n	800f00a <rclc_executor_spin_some+0x1a6>
 800eff4:	f7ff fafc 	bl	800e5f0 <_rclc_take_new_data>
 800eff8:	f108 0801 	add.w	r8, r8, #1
 800effc:	4605      	mov	r5, r0
 800effe:	b108      	cbz	r0, 800f004 <rclc_executor_spin_some+0x1a0>
 800f000:	4548      	cmp	r0, r9
 800f002:	d11c      	bne.n	800f03e <rclc_executor_spin_some+0x1da>
 800f004:	68e3      	ldr	r3, [r4, #12]
 800f006:	4598      	cmp	r8, r3
 800f008:	d26f      	bcs.n	800f0ea <rclc_executor_spin_some+0x286>
 800f00a:	68a3      	ldr	r3, [r4, #8]
 800f00c:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800f010:	4639      	mov	r1, r7
 800f012:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800f016:	2a00      	cmp	r2, #0
 800f018:	d1ec      	bne.n	800eff4 <rclc_executor_spin_some+0x190>
 800f01a:	2700      	movs	r7, #0
 800f01c:	e009      	b.n	800f032 <rclc_executor_spin_some+0x1ce>
 800f01e:	f7ff fc87 	bl	800e930 <_rclc_execute>
 800f022:	3701      	adds	r7, #1
 800f024:	4605      	mov	r5, r0
 800f026:	b950      	cbnz	r0, 800f03e <rclc_executor_spin_some+0x1da>
 800f028:	68e3      	ldr	r3, [r4, #12]
 800f02a:	429f      	cmp	r7, r3
 800f02c:	f4bf af63 	bcs.w	800eef6 <rclc_executor_spin_some+0x92>
 800f030:	68a3      	ldr	r3, [r4, #8]
 800f032:	eb03 1087 	add.w	r0, r3, r7, lsl #6
 800f036:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d1ef      	bne.n	800f01e <rclc_executor_spin_some+0x1ba>
 800f03e:	462e      	mov	r6, r5
 800f040:	e759      	b.n	800eef6 <rclc_executor_spin_some+0x92>
 800f042:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 800f046:	4663      	mov	r3, ip
 800f048:	2a00      	cmp	r2, #0
 800f04a:	d054      	beq.n	800f0f6 <rclc_executor_spin_some+0x292>
 800f04c:	46a8      	mov	r8, r5
 800f04e:	f240 1991 	movw	r9, #401	@ 0x191
 800f052:	e00b      	b.n	800f06c <rclc_executor_spin_some+0x208>
 800f054:	f7ff fa7e 	bl	800e554 <_rclc_check_for_new_data>
 800f058:	f108 0801 	add.w	r8, r8, #1
 800f05c:	4605      	mov	r5, r0
 800f05e:	b108      	cbz	r0, 800f064 <rclc_executor_spin_some+0x200>
 800f060:	4548      	cmp	r0, r9
 800f062:	d1ec      	bne.n	800f03e <rclc_executor_spin_some+0x1da>
 800f064:	68e2      	ldr	r2, [r4, #12]
 800f066:	4590      	cmp	r8, r2
 800f068:	d23c      	bcs.n	800f0e4 <rclc_executor_spin_some+0x280>
 800f06a:	68a3      	ldr	r3, [r4, #8]
 800f06c:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800f070:	469c      	mov	ip, r3
 800f072:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800f076:	4639      	mov	r1, r7
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d1eb      	bne.n	800f054 <rclc_executor_spin_some+0x1f0>
 800f07c:	4611      	mov	r1, r2
 800f07e:	4660      	mov	r0, ip
 800f080:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 800f084:	4798      	blx	r3
 800f086:	2800      	cmp	r0, #0
 800f088:	d0d9      	beq.n	800f03e <rclc_executor_spin_some+0x1da>
 800f08a:	68e3      	ldr	r3, [r4, #12]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d0d6      	beq.n	800f03e <rclc_executor_spin_some+0x1da>
 800f090:	f04f 0a00 	mov.w	sl, #0
 800f094:	f240 1891 	movw	r8, #401	@ 0x191
 800f098:	f240 2959 	movw	r9, #601	@ 0x259
 800f09c:	e013      	b.n	800f0c6 <rclc_executor_spin_some+0x262>
 800f09e:	f7ff faa7 	bl	800e5f0 <_rclc_take_new_data>
 800f0a2:	b118      	cbz	r0, 800f0ac <rclc_executor_spin_some+0x248>
 800f0a4:	4540      	cmp	r0, r8
 800f0a6:	d001      	beq.n	800f0ac <rclc_executor_spin_some+0x248>
 800f0a8:	4548      	cmp	r0, r9
 800f0aa:	d122      	bne.n	800f0f2 <rclc_executor_spin_some+0x28e>
 800f0ac:	68a0      	ldr	r0, [r4, #8]
 800f0ae:	4458      	add	r0, fp
 800f0b0:	f7ff fc3e 	bl	800e930 <_rclc_execute>
 800f0b4:	f10a 0a01 	add.w	sl, sl, #1
 800f0b8:	4605      	mov	r5, r0
 800f0ba:	2800      	cmp	r0, #0
 800f0bc:	d1bf      	bne.n	800f03e <rclc_executor_spin_some+0x1da>
 800f0be:	68e3      	ldr	r3, [r4, #12]
 800f0c0:	459a      	cmp	sl, r3
 800f0c2:	f4bf af18 	bcs.w	800eef6 <rclc_executor_spin_some+0x92>
 800f0c6:	68a0      	ldr	r0, [r4, #8]
 800f0c8:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800f0cc:	4639      	mov	r1, r7
 800f0ce:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800f0d2:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d1e1      	bne.n	800f09e <rclc_executor_spin_some+0x23a>
 800f0da:	462e      	mov	r6, r5
 800f0dc:	e70b      	b.n	800eef6 <rclc_executor_spin_some+0x92>
 800f0de:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800f0e2:	e77a      	b.n	800efda <rclc_executor_spin_some+0x176>
 800f0e4:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800f0e8:	e7c8      	b.n	800f07c <rclc_executor_spin_some+0x218>
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d0a7      	beq.n	800f03e <rclc_executor_spin_some+0x1da>
 800f0ee:	68a3      	ldr	r3, [r4, #8]
 800f0f0:	e793      	b.n	800f01a <rclc_executor_spin_some+0x1b6>
 800f0f2:	4606      	mov	r6, r0
 800f0f4:	e6ff      	b.n	800eef6 <rclc_executor_spin_some+0x92>
 800f0f6:	4615      	mov	r5, r2
 800f0f8:	e7c0      	b.n	800f07c <rclc_executor_spin_some+0x218>
 800f0fa:	bf00      	nop

0800f0fc <rclc_executor_spin>:
 800f0fc:	b150      	cbz	r0, 800f114 <rclc_executor_spin+0x18>
 800f0fe:	b510      	push	{r4, lr}
 800f100:	4604      	mov	r4, r0
 800f102:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	@ 0x70
 800f106:	4620      	mov	r0, r4
 800f108:	f7ff feac 	bl	800ee64 <rclc_executor_spin_some>
 800f10c:	f030 0302 	bics.w	r3, r0, #2
 800f110:	d0f7      	beq.n	800f102 <rclc_executor_spin+0x6>
 800f112:	bd10      	pop	{r4, pc}
 800f114:	200b      	movs	r0, #11
 800f116:	4770      	bx	lr

0800f118 <rclc_executor_handle_counters_zero_init>:
 800f118:	b130      	cbz	r0, 800f128 <rclc_executor_handle_counters_zero_init+0x10>
 800f11a:	b508      	push	{r3, lr}
 800f11c:	2220      	movs	r2, #32
 800f11e:	2100      	movs	r1, #0
 800f120:	f00e fd0a 	bl	801db38 <memset>
 800f124:	2000      	movs	r0, #0
 800f126:	bd08      	pop	{r3, pc}
 800f128:	200b      	movs	r0, #11
 800f12a:	4770      	bx	lr

0800f12c <rclc_executor_handle_init>:
 800f12c:	b158      	cbz	r0, 800f146 <rclc_executor_handle_init+0x1a>
 800f12e:	2300      	movs	r3, #0
 800f130:	220b      	movs	r2, #11
 800f132:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800f136:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 800f13a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800f13e:	8002      	strh	r2, [r0, #0]
 800f140:	8703      	strh	r3, [r0, #56]	@ 0x38
 800f142:	4618      	mov	r0, r3
 800f144:	4770      	bx	lr
 800f146:	200b      	movs	r0, #11
 800f148:	4770      	bx	lr
 800f14a:	bf00      	nop

0800f14c <rclc_support_init_with_options>:
 800f14c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f150:	b083      	sub	sp, #12
 800f152:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f154:	b340      	cbz	r0, 800f1a8 <rclc_support_init_with_options+0x5c>
 800f156:	461d      	mov	r5, r3
 800f158:	b333      	cbz	r3, 800f1a8 <rclc_support_init_with_options+0x5c>
 800f15a:	b32e      	cbz	r6, 800f1a8 <rclc_support_init_with_options+0x5c>
 800f15c:	46e9      	mov	r9, sp
 800f15e:	4604      	mov	r4, r0
 800f160:	4648      	mov	r0, r9
 800f162:	460f      	mov	r7, r1
 800f164:	4690      	mov	r8, r2
 800f166:	f007 f9cb 	bl	8016500 <rcl_get_zero_initialized_context>
 800f16a:	e899 0003 	ldmia.w	r9, {r0, r1}
 800f16e:	462a      	mov	r2, r5
 800f170:	e884 0003 	stmia.w	r4, {r0, r1}
 800f174:	4623      	mov	r3, r4
 800f176:	4641      	mov	r1, r8
 800f178:	4638      	mov	r0, r7
 800f17a:	f007 fa31 	bl	80165e0 <rcl_init>
 800f17e:	4605      	mov	r5, r0
 800f180:	b960      	cbnz	r0, 800f19c <rclc_support_init_with_options+0x50>
 800f182:	60a6      	str	r6, [r4, #8]
 800f184:	4632      	mov	r2, r6
 800f186:	f104 010c 	add.w	r1, r4, #12
 800f18a:	2003      	movs	r0, #3
 800f18c:	f008 f97c 	bl	8017488 <rcl_clock_init>
 800f190:	4605      	mov	r5, r0
 800f192:	b918      	cbnz	r0, 800f19c <rclc_support_init_with_options+0x50>
 800f194:	4628      	mov	r0, r5
 800f196:	b003      	add	sp, #12
 800f198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f19c:	f000 f97c 	bl	800f498 <rcutils_reset_error>
 800f1a0:	4628      	mov	r0, r5
 800f1a2:	b003      	add	sp, #12
 800f1a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1a8:	250b      	movs	r5, #11
 800f1aa:	4628      	mov	r0, r5
 800f1ac:	b003      	add	sp, #12
 800f1ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1b2:	bf00      	nop

0800f1b4 <rclc_node_init_default>:
 800f1b4:	b3b8      	cbz	r0, 800f226 <rclc_node_init_default+0x72>
 800f1b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f1ba:	460d      	mov	r5, r1
 800f1bc:	b0a1      	sub	sp, #132	@ 0x84
 800f1be:	b329      	cbz	r1, 800f20c <rclc_node_init_default+0x58>
 800f1c0:	4616      	mov	r6, r2
 800f1c2:	b31a      	cbz	r2, 800f20c <rclc_node_init_default+0x58>
 800f1c4:	461f      	mov	r7, r3
 800f1c6:	b30b      	cbz	r3, 800f20c <rclc_node_init_default+0x58>
 800f1c8:	f10d 0810 	add.w	r8, sp, #16
 800f1cc:	4604      	mov	r4, r0
 800f1ce:	4640      	mov	r0, r8
 800f1d0:	f007 fb62 	bl	8016898 <rcl_get_zero_initialized_node>
 800f1d4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800f1d8:	f10d 0918 	add.w	r9, sp, #24
 800f1dc:	e884 0003 	stmia.w	r4, {r0, r1}
 800f1e0:	4648      	mov	r0, r9
 800f1e2:	f007 fd01 	bl	8016be8 <rcl_node_get_default_options>
 800f1e6:	4640      	mov	r0, r8
 800f1e8:	f007 fb56 	bl	8016898 <rcl_get_zero_initialized_node>
 800f1ec:	f8cd 9000 	str.w	r9, [sp]
 800f1f0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800f1f4:	463b      	mov	r3, r7
 800f1f6:	e884 0003 	stmia.w	r4, {r0, r1}
 800f1fa:	4632      	mov	r2, r6
 800f1fc:	4629      	mov	r1, r5
 800f1fe:	4620      	mov	r0, r4
 800f200:	f007 fb54 	bl	80168ac <rcl_node_init>
 800f204:	b930      	cbnz	r0, 800f214 <rclc_node_init_default+0x60>
 800f206:	b021      	add	sp, #132	@ 0x84
 800f208:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f20c:	200b      	movs	r0, #11
 800f20e:	b021      	add	sp, #132	@ 0x84
 800f210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f214:	9003      	str	r0, [sp, #12]
 800f216:	f000 f93f 	bl	800f498 <rcutils_reset_error>
 800f21a:	f000 f93d 	bl	800f498 <rcutils_reset_error>
 800f21e:	9803      	ldr	r0, [sp, #12]
 800f220:	b021      	add	sp, #132	@ 0x84
 800f222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f226:	200b      	movs	r0, #11
 800f228:	4770      	bx	lr
 800f22a:	bf00      	nop

0800f22c <rclc_publisher_init_default>:
 800f22c:	b368      	cbz	r0, 800f28a <rclc_publisher_init_default+0x5e>
 800f22e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f232:	460d      	mov	r5, r1
 800f234:	b0a0      	sub	sp, #128	@ 0x80
 800f236:	b321      	cbz	r1, 800f282 <rclc_publisher_init_default+0x56>
 800f238:	4616      	mov	r6, r2
 800f23a:	b312      	cbz	r2, 800f282 <rclc_publisher_init_default+0x56>
 800f23c:	461f      	mov	r7, r3
 800f23e:	b303      	cbz	r3, 800f282 <rclc_publisher_init_default+0x56>
 800f240:	4604      	mov	r4, r0
 800f242:	f7ff f869 	bl	800e318 <rcl_get_zero_initialized_publisher>
 800f246:	f10d 0810 	add.w	r8, sp, #16
 800f24a:	6020      	str	r0, [r4, #0]
 800f24c:	4640      	mov	r0, r8
 800f24e:	f7ff f901 	bl	800e454 <rcl_publisher_get_default_options>
 800f252:	490f      	ldr	r1, [pc, #60]	@ (800f290 <rclc_publisher_init_default+0x64>)
 800f254:	2250      	movs	r2, #80	@ 0x50
 800f256:	4640      	mov	r0, r8
 800f258:	f00e fd49 	bl	801dcee <memcpy>
 800f25c:	f8cd 8000 	str.w	r8, [sp]
 800f260:	463b      	mov	r3, r7
 800f262:	4632      	mov	r2, r6
 800f264:	4629      	mov	r1, r5
 800f266:	4620      	mov	r0, r4
 800f268:	f7ff f85c 	bl	800e324 <rcl_publisher_init>
 800f26c:	b910      	cbnz	r0, 800f274 <rclc_publisher_init_default+0x48>
 800f26e:	b020      	add	sp, #128	@ 0x80
 800f270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f274:	9003      	str	r0, [sp, #12]
 800f276:	f000 f90f 	bl	800f498 <rcutils_reset_error>
 800f27a:	9803      	ldr	r0, [sp, #12]
 800f27c:	b020      	add	sp, #128	@ 0x80
 800f27e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f282:	200b      	movs	r0, #11
 800f284:	b020      	add	sp, #128	@ 0x80
 800f286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f28a:	200b      	movs	r0, #11
 800f28c:	4770      	bx	lr
 800f28e:	bf00      	nop
 800f290:	08020550 	.word	0x08020550

0800f294 <rclc_publisher_init_best_effort>:
 800f294:	b368      	cbz	r0, 800f2f2 <rclc_publisher_init_best_effort+0x5e>
 800f296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f29a:	460d      	mov	r5, r1
 800f29c:	b0a0      	sub	sp, #128	@ 0x80
 800f29e:	b321      	cbz	r1, 800f2ea <rclc_publisher_init_best_effort+0x56>
 800f2a0:	4616      	mov	r6, r2
 800f2a2:	b312      	cbz	r2, 800f2ea <rclc_publisher_init_best_effort+0x56>
 800f2a4:	461f      	mov	r7, r3
 800f2a6:	b303      	cbz	r3, 800f2ea <rclc_publisher_init_best_effort+0x56>
 800f2a8:	4604      	mov	r4, r0
 800f2aa:	f7ff f835 	bl	800e318 <rcl_get_zero_initialized_publisher>
 800f2ae:	f10d 0810 	add.w	r8, sp, #16
 800f2b2:	6020      	str	r0, [r4, #0]
 800f2b4:	4640      	mov	r0, r8
 800f2b6:	f7ff f8cd 	bl	800e454 <rcl_publisher_get_default_options>
 800f2ba:	490f      	ldr	r1, [pc, #60]	@ (800f2f8 <rclc_publisher_init_best_effort+0x64>)
 800f2bc:	2250      	movs	r2, #80	@ 0x50
 800f2be:	4640      	mov	r0, r8
 800f2c0:	f00e fd15 	bl	801dcee <memcpy>
 800f2c4:	f8cd 8000 	str.w	r8, [sp]
 800f2c8:	463b      	mov	r3, r7
 800f2ca:	4632      	mov	r2, r6
 800f2cc:	4629      	mov	r1, r5
 800f2ce:	4620      	mov	r0, r4
 800f2d0:	f7ff f828 	bl	800e324 <rcl_publisher_init>
 800f2d4:	b910      	cbnz	r0, 800f2dc <rclc_publisher_init_best_effort+0x48>
 800f2d6:	b020      	add	sp, #128	@ 0x80
 800f2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2dc:	9003      	str	r0, [sp, #12]
 800f2de:	f000 f8db 	bl	800f498 <rcutils_reset_error>
 800f2e2:	9803      	ldr	r0, [sp, #12]
 800f2e4:	b020      	add	sp, #128	@ 0x80
 800f2e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2ea:	200b      	movs	r0, #11
 800f2ec:	b020      	add	sp, #128	@ 0x80
 800f2ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2f2:	200b      	movs	r0, #11
 800f2f4:	4770      	bx	lr
 800f2f6:	bf00      	nop
 800f2f8:	080205a0 	.word	0x080205a0

0800f2fc <rclc_service_init_default>:
 800f2fc:	b368      	cbz	r0, 800f35a <rclc_service_init_default+0x5e>
 800f2fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f302:	460d      	mov	r5, r1
 800f304:	b09e      	sub	sp, #120	@ 0x78
 800f306:	b321      	cbz	r1, 800f352 <rclc_service_init_default+0x56>
 800f308:	4616      	mov	r6, r2
 800f30a:	b312      	cbz	r2, 800f352 <rclc_service_init_default+0x56>
 800f30c:	461f      	mov	r7, r3
 800f30e:	b303      	cbz	r3, 800f352 <rclc_service_init_default+0x56>
 800f310:	4604      	mov	r4, r0
 800f312:	f007 fe45 	bl	8016fa0 <rcl_get_zero_initialized_service>
 800f316:	f10d 0810 	add.w	r8, sp, #16
 800f31a:	6020      	str	r0, [r4, #0]
 800f31c:	4640      	mov	r0, r8
 800f31e:	f007 fee9 	bl	80170f4 <rcl_service_get_default_options>
 800f322:	490f      	ldr	r1, [pc, #60]	@ (800f360 <rclc_service_init_default+0x64>)
 800f324:	2250      	movs	r2, #80	@ 0x50
 800f326:	4640      	mov	r0, r8
 800f328:	f00e fce1 	bl	801dcee <memcpy>
 800f32c:	f8cd 8000 	str.w	r8, [sp]
 800f330:	463b      	mov	r3, r7
 800f332:	4632      	mov	r2, r6
 800f334:	4629      	mov	r1, r5
 800f336:	4620      	mov	r0, r4
 800f338:	f007 fe38 	bl	8016fac <rcl_service_init>
 800f33c:	b910      	cbnz	r0, 800f344 <rclc_service_init_default+0x48>
 800f33e:	b01e      	add	sp, #120	@ 0x78
 800f340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f344:	9003      	str	r0, [sp, #12]
 800f346:	f000 f8a7 	bl	800f498 <rcutils_reset_error>
 800f34a:	9803      	ldr	r0, [sp, #12]
 800f34c:	b01e      	add	sp, #120	@ 0x78
 800f34e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f352:	200b      	movs	r0, #11
 800f354:	b01e      	add	sp, #120	@ 0x78
 800f356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f35a:	200b      	movs	r0, #11
 800f35c:	4770      	bx	lr
 800f35e:	bf00      	nop
 800f360:	080205f0 	.word	0x080205f0

0800f364 <rclc_timer_init_default>:
 800f364:	b370      	cbz	r0, 800f3c4 <rclc_timer_init_default+0x60>
 800f366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f36a:	460e      	mov	r6, r1
 800f36c:	b08c      	sub	sp, #48	@ 0x30
 800f36e:	b329      	cbz	r1, 800f3bc <rclc_timer_init_default+0x58>
 800f370:	4690      	mov	r8, r2
 800f372:	461f      	mov	r7, r3
 800f374:	4605      	mov	r5, r0
 800f376:	f008 fa71 	bl	801785c <rcl_get_zero_initialized_timer>
 800f37a:	2301      	movs	r3, #1
 800f37c:	6028      	str	r0, [r5, #0]
 800f37e:	9308      	str	r3, [sp, #32]
 800f380:	68b4      	ldr	r4, [r6, #8]
 800f382:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f384:	f10d 0c0c 	add.w	ip, sp, #12
 800f388:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f38c:	6823      	ldr	r3, [r4, #0]
 800f38e:	f8cc 3000 	str.w	r3, [ip]
 800f392:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f394:	9302      	str	r3, [sp, #8]
 800f396:	e9cd 8700 	strd	r8, r7, [sp]
 800f39a:	4628      	mov	r0, r5
 800f39c:	4632      	mov	r2, r6
 800f39e:	f106 010c 	add.w	r1, r6, #12
 800f3a2:	f008 fa61 	bl	8017868 <rcl_timer_init2>
 800f3a6:	b910      	cbnz	r0, 800f3ae <rclc_timer_init_default+0x4a>
 800f3a8:	b00c      	add	sp, #48	@ 0x30
 800f3aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3ae:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f3b0:	f000 f872 	bl	800f498 <rcutils_reset_error>
 800f3b4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800f3b6:	b00c      	add	sp, #48	@ 0x30
 800f3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3bc:	200b      	movs	r0, #11
 800f3be:	b00c      	add	sp, #48	@ 0x30
 800f3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3c4:	200b      	movs	r0, #11
 800f3c6:	4770      	bx	lr

0800f3c8 <__default_zero_allocate>:
 800f3c8:	f00d becc 	b.w	801d164 <calloc>

0800f3cc <__default_reallocate>:
 800f3cc:	f00e b86a 	b.w	801d4a4 <realloc>

0800f3d0 <__default_deallocate>:
 800f3d0:	f00d bf46 	b.w	801d260 <free>

0800f3d4 <__default_allocate>:
 800f3d4:	f00d bf3c 	b.w	801d250 <malloc>

0800f3d8 <rcutils_get_zero_initialized_allocator>:
 800f3d8:	b510      	push	{r4, lr}
 800f3da:	4c05      	ldr	r4, [pc, #20]	@ (800f3f0 <rcutils_get_zero_initialized_allocator+0x18>)
 800f3dc:	4686      	mov	lr, r0
 800f3de:	4684      	mov	ip, r0
 800f3e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f3e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f3e6:	6823      	ldr	r3, [r4, #0]
 800f3e8:	f8cc 3000 	str.w	r3, [ip]
 800f3ec:	4670      	mov	r0, lr
 800f3ee:	bd10      	pop	{r4, pc}
 800f3f0:	08020640 	.word	0x08020640

0800f3f4 <rcutils_get_default_allocator>:
 800f3f4:	b510      	push	{r4, lr}
 800f3f6:	4c05      	ldr	r4, [pc, #20]	@ (800f40c <rcutils_get_default_allocator+0x18>)
 800f3f8:	4686      	mov	lr, r0
 800f3fa:	4684      	mov	ip, r0
 800f3fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f3fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f402:	6823      	ldr	r3, [r4, #0]
 800f404:	f8cc 3000 	str.w	r3, [ip]
 800f408:	4670      	mov	r0, lr
 800f40a:	bd10      	pop	{r4, pc}
 800f40c:	200005a8 	.word	0x200005a8

0800f410 <rcutils_set_default_allocator>:
 800f410:	b1a8      	cbz	r0, 800f43e <rcutils_set_default_allocator+0x2e>
 800f412:	6802      	ldr	r2, [r0, #0]
 800f414:	b1a2      	cbz	r2, 800f440 <rcutils_set_default_allocator+0x30>
 800f416:	6841      	ldr	r1, [r0, #4]
 800f418:	b1a1      	cbz	r1, 800f444 <rcutils_set_default_allocator+0x34>
 800f41a:	b410      	push	{r4}
 800f41c:	68c4      	ldr	r4, [r0, #12]
 800f41e:	b164      	cbz	r4, 800f43a <rcutils_set_default_allocator+0x2a>
 800f420:	6880      	ldr	r0, [r0, #8]
 800f422:	b138      	cbz	r0, 800f434 <rcutils_set_default_allocator+0x24>
 800f424:	4b08      	ldr	r3, [pc, #32]	@ (800f448 <rcutils_set_default_allocator+0x38>)
 800f426:	601a      	str	r2, [r3, #0]
 800f428:	2200      	movs	r2, #0
 800f42a:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800f42e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800f432:	2001      	movs	r0, #1
 800f434:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f438:	4770      	bx	lr
 800f43a:	4620      	mov	r0, r4
 800f43c:	e7fa      	b.n	800f434 <rcutils_set_default_allocator+0x24>
 800f43e:	4770      	bx	lr
 800f440:	4610      	mov	r0, r2
 800f442:	4770      	bx	lr
 800f444:	4608      	mov	r0, r1
 800f446:	4770      	bx	lr
 800f448:	200005a8 	.word	0x200005a8

0800f44c <rcutils_allocator_is_valid>:
 800f44c:	b158      	cbz	r0, 800f466 <rcutils_allocator_is_valid+0x1a>
 800f44e:	6803      	ldr	r3, [r0, #0]
 800f450:	b143      	cbz	r3, 800f464 <rcutils_allocator_is_valid+0x18>
 800f452:	6843      	ldr	r3, [r0, #4]
 800f454:	b133      	cbz	r3, 800f464 <rcutils_allocator_is_valid+0x18>
 800f456:	68c3      	ldr	r3, [r0, #12]
 800f458:	b123      	cbz	r3, 800f464 <rcutils_allocator_is_valid+0x18>
 800f45a:	6880      	ldr	r0, [r0, #8]
 800f45c:	3800      	subs	r0, #0
 800f45e:	bf18      	it	ne
 800f460:	2001      	movne	r0, #1
 800f462:	4770      	bx	lr
 800f464:	4618      	mov	r0, r3
 800f466:	4770      	bx	lr

0800f468 <rcutils_get_error_string>:
 800f468:	4b06      	ldr	r3, [pc, #24]	@ (800f484 <rcutils_get_error_string+0x1c>)
 800f46a:	781b      	ldrb	r3, [r3, #0]
 800f46c:	b13b      	cbz	r3, 800f47e <rcutils_get_error_string+0x16>
 800f46e:	4b06      	ldr	r3, [pc, #24]	@ (800f488 <rcutils_get_error_string+0x20>)
 800f470:	781a      	ldrb	r2, [r3, #0]
 800f472:	b90a      	cbnz	r2, 800f478 <rcutils_get_error_string+0x10>
 800f474:	2201      	movs	r2, #1
 800f476:	701a      	strb	r2, [r3, #0]
 800f478:	4b04      	ldr	r3, [pc, #16]	@ (800f48c <rcutils_get_error_string+0x24>)
 800f47a:	7818      	ldrb	r0, [r3, #0]
 800f47c:	4770      	bx	lr
 800f47e:	4b04      	ldr	r3, [pc, #16]	@ (800f490 <rcutils_get_error_string+0x28>)
 800f480:	7818      	ldrb	r0, [r3, #0]
 800f482:	4770      	bx	lr
 800f484:	2000a2e8 	.word	0x2000a2e8
 800f488:	2000a2ed 	.word	0x2000a2ed
 800f48c:	2000a2ec 	.word	0x2000a2ec
 800f490:	08020170 	.word	0x08020170
 800f494:	00000000 	.word	0x00000000

0800f498 <rcutils_reset_error>:
 800f498:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800f4b8 <rcutils_reset_error+0x20>
 800f49c:	4a08      	ldr	r2, [pc, #32]	@ (800f4c0 <rcutils_reset_error+0x28>)
 800f49e:	4809      	ldr	r0, [pc, #36]	@ (800f4c4 <rcutils_reset_error+0x2c>)
 800f4a0:	4909      	ldr	r1, [pc, #36]	@ (800f4c8 <rcutils_reset_error+0x30>)
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	8013      	strh	r3, [r2, #0]
 800f4a6:	ed82 7b02 	vstr	d7, [r2, #8]
 800f4aa:	4a08      	ldr	r2, [pc, #32]	@ (800f4cc <rcutils_reset_error+0x34>)
 800f4ac:	7003      	strb	r3, [r0, #0]
 800f4ae:	700b      	strb	r3, [r1, #0]
 800f4b0:	7013      	strb	r3, [r2, #0]
 800f4b2:	4770      	bx	lr
 800f4b4:	f3af 8000 	nop.w
	...
 800f4c0:	2000a2f0 	.word	0x2000a2f0
 800f4c4:	2000a2ed 	.word	0x2000a2ed
 800f4c8:	2000a2ec 	.word	0x2000a2ec
 800f4cc:	2000a2e8 	.word	0x2000a2e8

0800f4d0 <rcutils_system_time_now>:
 800f4d0:	b318      	cbz	r0, 800f51a <rcutils_system_time_now+0x4a>
 800f4d2:	b570      	push	{r4, r5, r6, lr}
 800f4d4:	b084      	sub	sp, #16
 800f4d6:	4604      	mov	r4, r0
 800f4d8:	4669      	mov	r1, sp
 800f4da:	2001      	movs	r0, #1
 800f4dc:	f7f3 ffd8 	bl	8003490 <clock_gettime>
 800f4e0:	2800      	cmp	r0, #0
 800f4e2:	db17      	blt.n	800f514 <rcutils_system_time_now+0x44>
 800f4e4:	e9dd 3100 	ldrd	r3, r1, [sp]
 800f4e8:	2900      	cmp	r1, #0
 800f4ea:	db13      	blt.n	800f514 <rcutils_system_time_now+0x44>
 800f4ec:	9d02      	ldr	r5, [sp, #8]
 800f4ee:	2d00      	cmp	r5, #0
 800f4f0:	db0d      	blt.n	800f50e <rcutils_system_time_now+0x3e>
 800f4f2:	4e0b      	ldr	r6, [pc, #44]	@ (800f520 <rcutils_system_time_now+0x50>)
 800f4f4:	fba3 3206 	umull	r3, r2, r3, r6
 800f4f8:	195b      	adds	r3, r3, r5
 800f4fa:	fb06 2201 	mla	r2, r6, r1, r2
 800f4fe:	f04f 0000 	mov.w	r0, #0
 800f502:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800f506:	e9c4 3200 	strd	r3, r2, [r4]
 800f50a:	b004      	add	sp, #16
 800f50c:	bd70      	pop	{r4, r5, r6, pc}
 800f50e:	ea53 0201 	orrs.w	r2, r3, r1
 800f512:	d1ee      	bne.n	800f4f2 <rcutils_system_time_now+0x22>
 800f514:	2002      	movs	r0, #2
 800f516:	b004      	add	sp, #16
 800f518:	bd70      	pop	{r4, r5, r6, pc}
 800f51a:	200b      	movs	r0, #11
 800f51c:	4770      	bx	lr
 800f51e:	bf00      	nop
 800f520:	3b9aca00 	.word	0x3b9aca00

0800f524 <rcutils_steady_time_now>:
 800f524:	b318      	cbz	r0, 800f56e <rcutils_steady_time_now+0x4a>
 800f526:	b570      	push	{r4, r5, r6, lr}
 800f528:	b084      	sub	sp, #16
 800f52a:	4604      	mov	r4, r0
 800f52c:	4669      	mov	r1, sp
 800f52e:	2000      	movs	r0, #0
 800f530:	f7f3 ffae 	bl	8003490 <clock_gettime>
 800f534:	2800      	cmp	r0, #0
 800f536:	db17      	blt.n	800f568 <rcutils_steady_time_now+0x44>
 800f538:	e9dd 3100 	ldrd	r3, r1, [sp]
 800f53c:	2900      	cmp	r1, #0
 800f53e:	db13      	blt.n	800f568 <rcutils_steady_time_now+0x44>
 800f540:	9d02      	ldr	r5, [sp, #8]
 800f542:	2d00      	cmp	r5, #0
 800f544:	db0d      	blt.n	800f562 <rcutils_steady_time_now+0x3e>
 800f546:	4e0b      	ldr	r6, [pc, #44]	@ (800f574 <rcutils_steady_time_now+0x50>)
 800f548:	fba3 3206 	umull	r3, r2, r3, r6
 800f54c:	195b      	adds	r3, r3, r5
 800f54e:	fb06 2201 	mla	r2, r6, r1, r2
 800f552:	f04f 0000 	mov.w	r0, #0
 800f556:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800f55a:	e9c4 3200 	strd	r3, r2, [r4]
 800f55e:	b004      	add	sp, #16
 800f560:	bd70      	pop	{r4, r5, r6, pc}
 800f562:	ea53 0201 	orrs.w	r2, r3, r1
 800f566:	d1ee      	bne.n	800f546 <rcutils_steady_time_now+0x22>
 800f568:	2002      	movs	r0, #2
 800f56a:	b004      	add	sp, #16
 800f56c:	bd70      	pop	{r4, r5, r6, pc}
 800f56e:	200b      	movs	r0, #11
 800f570:	4770      	bx	lr
 800f572:	bf00      	nop
 800f574:	3b9aca00 	.word	0x3b9aca00

0800f578 <rmw_get_zero_initialized_init_options>:
 800f578:	b530      	push	{r4, r5, lr}
 800f57a:	b08b      	sub	sp, #44	@ 0x2c
 800f57c:	466d      	mov	r5, sp
 800f57e:	4604      	mov	r4, r0
 800f580:	4628      	mov	r0, r5
 800f582:	f000 f825 	bl	800f5d0 <rmw_get_default_security_options>
 800f586:	a802      	add	r0, sp, #8
 800f588:	f00a fa9a 	bl	8019ac0 <rmw_get_zero_initialized_discovery_options>
 800f58c:	2258      	movs	r2, #88	@ 0x58
 800f58e:	2100      	movs	r1, #0
 800f590:	4620      	mov	r0, r4
 800f592:	f00e fad1 	bl	801db38 <memset>
 800f596:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f59a:	f104 0310 	add.w	r3, r4, #16
 800f59e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f5a2:	f10d 0c08 	add.w	ip, sp, #8
 800f5a6:	e883 0003 	stmia.w	r3, {r0, r1}
 800f5aa:	60e2      	str	r2, [r4, #12]
 800f5ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f5b0:	f104 0e1c 	add.w	lr, r4, #28
 800f5b4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f5b8:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800f5bc:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800f5c0:	4620      	mov	r0, r4
 800f5c2:	b00b      	add	sp, #44	@ 0x2c
 800f5c4:	bd30      	pop	{r4, r5, pc}
 800f5c6:	bf00      	nop

0800f5c8 <rmw_get_default_publisher_options>:
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	6002      	str	r2, [r0, #0]
 800f5cc:	7102      	strb	r2, [r0, #4]
 800f5ce:	4770      	bx	lr

0800f5d0 <rmw_get_default_security_options>:
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	7002      	strb	r2, [r0, #0]
 800f5d4:	6042      	str	r2, [r0, #4]
 800f5d6:	4770      	bx	lr

0800f5d8 <rmw_uros_set_custom_transport>:
 800f5d8:	b470      	push	{r4, r5, r6}
 800f5da:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800f5de:	b162      	cbz	r2, 800f5fa <rmw_uros_set_custom_transport+0x22>
 800f5e0:	b15b      	cbz	r3, 800f5fa <rmw_uros_set_custom_transport+0x22>
 800f5e2:	b155      	cbz	r5, 800f5fa <rmw_uros_set_custom_transport+0x22>
 800f5e4:	b14e      	cbz	r6, 800f5fa <rmw_uros_set_custom_transport+0x22>
 800f5e6:	4c06      	ldr	r4, [pc, #24]	@ (800f600 <rmw_uros_set_custom_transport+0x28>)
 800f5e8:	7020      	strb	r0, [r4, #0]
 800f5ea:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800f5ee:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f5f2:	6166      	str	r6, [r4, #20]
 800f5f4:	2000      	movs	r0, #0
 800f5f6:	bc70      	pop	{r4, r5, r6}
 800f5f8:	4770      	bx	lr
 800f5fa:	200b      	movs	r0, #11
 800f5fc:	bc70      	pop	{r4, r5, r6}
 800f5fe:	4770      	bx	lr
 800f600:	2000a300 	.word	0x2000a300

0800f604 <rmw_init_options_init>:
 800f604:	b084      	sub	sp, #16
 800f606:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f608:	b083      	sub	sp, #12
 800f60a:	ad09      	add	r5, sp, #36	@ 0x24
 800f60c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800f610:	b130      	cbz	r0, 800f620 <rmw_init_options_init+0x1c>
 800f612:	4604      	mov	r4, r0
 800f614:	4628      	mov	r0, r5
 800f616:	f7ff ff19 	bl	800f44c <rcutils_allocator_is_valid>
 800f61a:	b108      	cbz	r0, 800f620 <rmw_init_options_init+0x1c>
 800f61c:	68a6      	ldr	r6, [r4, #8]
 800f61e:	b12e      	cbz	r6, 800f62c <rmw_init_options_init+0x28>
 800f620:	200b      	movs	r0, #11
 800f622:	b003      	add	sp, #12
 800f624:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f628:	b004      	add	sp, #16
 800f62a:	4770      	bx	lr
 800f62c:	2200      	movs	r2, #0
 800f62e:	2300      	movs	r3, #0
 800f630:	e9c4 2300 	strd	r2, r3, [r4]
 800f634:	4b22      	ldr	r3, [pc, #136]	@ (800f6c0 <rmw_init_options_init+0xbc>)
 800f636:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800f6d0 <rmw_init_options_init+0xcc>
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	60a3      	str	r3, [r4, #8]
 800f63e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f640:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 800f644:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f648:	466f      	mov	r7, sp
 800f64a:	682b      	ldr	r3, [r5, #0]
 800f64c:	f8cc 3000 	str.w	r3, [ip]
 800f650:	4638      	mov	r0, r7
 800f652:	f8c4 e03c 	str.w	lr, [r4, #60]	@ 0x3c
 800f656:	60e6      	str	r6, [r4, #12]
 800f658:	f7ff ffba 	bl	800f5d0 <rmw_get_default_security_options>
 800f65c:	e897 0003 	ldmia.w	r7, {r0, r1}
 800f660:	f104 0310 	add.w	r3, r4, #16
 800f664:	e883 0003 	stmia.w	r3, {r0, r1}
 800f668:	2203      	movs	r2, #3
 800f66a:	4816      	ldr	r0, [pc, #88]	@ (800f6c4 <rmw_init_options_init+0xc0>)
 800f66c:	4916      	ldr	r1, [pc, #88]	@ (800f6c8 <rmw_init_options_init+0xc4>)
 800f66e:	7626      	strb	r6, [r4, #24]
 800f670:	f000 ff8c 	bl	801058c <rmw_uxrce_init_init_options_impl_memory>
 800f674:	4813      	ldr	r0, [pc, #76]	@ (800f6c4 <rmw_init_options_init+0xc0>)
 800f676:	f00a fd13 	bl	801a0a0 <get_memory>
 800f67a:	b1f0      	cbz	r0, 800f6ba <rmw_init_options_init+0xb6>
 800f67c:	4a13      	ldr	r2, [pc, #76]	@ (800f6cc <rmw_init_options_init+0xc8>)
 800f67e:	6883      	ldr	r3, [r0, #8]
 800f680:	6851      	ldr	r1, [r2, #4]
 800f682:	7810      	ldrb	r0, [r2, #0]
 800f684:	6563      	str	r3, [r4, #84]	@ 0x54
 800f686:	7418      	strb	r0, [r3, #16]
 800f688:	6159      	str	r1, [r3, #20]
 800f68a:	68d1      	ldr	r1, [r2, #12]
 800f68c:	61d9      	str	r1, [r3, #28]
 800f68e:	6911      	ldr	r1, [r2, #16]
 800f690:	6219      	str	r1, [r3, #32]
 800f692:	6951      	ldr	r1, [r2, #20]
 800f694:	6892      	ldr	r2, [r2, #8]
 800f696:	619a      	str	r2, [r3, #24]
 800f698:	6259      	str	r1, [r3, #36]	@ 0x24
 800f69a:	f005 fcf9 	bl	8015090 <uxr_nanos>
 800f69e:	f00d fe95 	bl	801d3cc <srand>
 800f6a2:	f00d fec1 	bl	801d428 <rand>
 800f6a6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800f6a8:	6298      	str	r0, [r3, #40]	@ 0x28
 800f6aa:	2800      	cmp	r0, #0
 800f6ac:	d0f9      	beq.n	800f6a2 <rmw_init_options_init+0x9e>
 800f6ae:	2000      	movs	r0, #0
 800f6b0:	b003      	add	sp, #12
 800f6b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f6b6:	b004      	add	sp, #16
 800f6b8:	4770      	bx	lr
 800f6ba:	2001      	movs	r0, #1
 800f6bc:	e7b1      	b.n	800f622 <rmw_init_options_init+0x1e>
 800f6be:	bf00      	nop
 800f6c0:	08021a10 	.word	0x08021a10
 800f6c4:	2000a62c 	.word	0x2000a62c
 800f6c8:	2000a5a8 	.word	0x2000a5a8
 800f6cc:	2000a300 	.word	0x2000a300
 800f6d0:	08020654 	.word	0x08020654

0800f6d4 <rmw_init_options_copy>:
 800f6d4:	b570      	push	{r4, r5, r6, lr}
 800f6d6:	b158      	cbz	r0, 800f6f0 <rmw_init_options_copy+0x1c>
 800f6d8:	460d      	mov	r5, r1
 800f6da:	b149      	cbz	r1, 800f6f0 <rmw_init_options_copy+0x1c>
 800f6dc:	4604      	mov	r4, r0
 800f6de:	6880      	ldr	r0, [r0, #8]
 800f6e0:	b120      	cbz	r0, 800f6ec <rmw_init_options_copy+0x18>
 800f6e2:	4b14      	ldr	r3, [pc, #80]	@ (800f734 <rmw_init_options_copy+0x60>)
 800f6e4:	6819      	ldr	r1, [r3, #0]
 800f6e6:	f7f0 fd9b 	bl	8000220 <strcmp>
 800f6ea:	b9e8      	cbnz	r0, 800f728 <rmw_init_options_copy+0x54>
 800f6ec:	68ae      	ldr	r6, [r5, #8]
 800f6ee:	b116      	cbz	r6, 800f6f6 <rmw_init_options_copy+0x22>
 800f6f0:	260b      	movs	r6, #11
 800f6f2:	4630      	mov	r0, r6
 800f6f4:	bd70      	pop	{r4, r5, r6, pc}
 800f6f6:	2258      	movs	r2, #88	@ 0x58
 800f6f8:	4621      	mov	r1, r4
 800f6fa:	4628      	mov	r0, r5
 800f6fc:	f00e faf7 	bl	801dcee <memcpy>
 800f700:	480d      	ldr	r0, [pc, #52]	@ (800f738 <rmw_init_options_copy+0x64>)
 800f702:	f00a fccd 	bl	801a0a0 <get_memory>
 800f706:	b190      	cbz	r0, 800f72e <rmw_init_options_copy+0x5a>
 800f708:	6883      	ldr	r3, [r0, #8]
 800f70a:	656b      	str	r3, [r5, #84]	@ 0x54
 800f70c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f70e:	f102 0c10 	add.w	ip, r2, #16
 800f712:	f103 0510 	add.w	r5, r3, #16
 800f716:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f71a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f71c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800f720:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800f724:	4630      	mov	r0, r6
 800f726:	bd70      	pop	{r4, r5, r6, pc}
 800f728:	260c      	movs	r6, #12
 800f72a:	4630      	mov	r0, r6
 800f72c:	bd70      	pop	{r4, r5, r6, pc}
 800f72e:	2601      	movs	r6, #1
 800f730:	e7df      	b.n	800f6f2 <rmw_init_options_copy+0x1e>
 800f732:	bf00      	nop
 800f734:	08021a10 	.word	0x08021a10
 800f738:	2000a62c 	.word	0x2000a62c

0800f73c <rmw_init_options_fini>:
 800f73c:	b368      	cbz	r0, 800f79a <rmw_init_options_fini+0x5e>
 800f73e:	b510      	push	{r4, lr}
 800f740:	4604      	mov	r4, r0
 800f742:	b096      	sub	sp, #88	@ 0x58
 800f744:	3040      	adds	r0, #64	@ 0x40
 800f746:	f7ff fe81 	bl	800f44c <rcutils_allocator_is_valid>
 800f74a:	b1f0      	cbz	r0, 800f78a <rmw_init_options_fini+0x4e>
 800f74c:	68a0      	ldr	r0, [r4, #8]
 800f74e:	b120      	cbz	r0, 800f75a <rmw_init_options_fini+0x1e>
 800f750:	4b13      	ldr	r3, [pc, #76]	@ (800f7a0 <rmw_init_options_fini+0x64>)
 800f752:	6819      	ldr	r1, [r3, #0]
 800f754:	f7f0 fd64 	bl	8000220 <strcmp>
 800f758:	b9e8      	cbnz	r0, 800f796 <rmw_init_options_fini+0x5a>
 800f75a:	4b12      	ldr	r3, [pc, #72]	@ (800f7a4 <rmw_init_options_fini+0x68>)
 800f75c:	6819      	ldr	r1, [r3, #0]
 800f75e:	b1b9      	cbz	r1, 800f790 <rmw_init_options_fini+0x54>
 800f760:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f762:	e001      	b.n	800f768 <rmw_init_options_fini+0x2c>
 800f764:	6849      	ldr	r1, [r1, #4]
 800f766:	b199      	cbz	r1, 800f790 <rmw_init_options_fini+0x54>
 800f768:	688b      	ldr	r3, [r1, #8]
 800f76a:	429a      	cmp	r2, r3
 800f76c:	d1fa      	bne.n	800f764 <rmw_init_options_fini+0x28>
 800f76e:	480d      	ldr	r0, [pc, #52]	@ (800f7a4 <rmw_init_options_fini+0x68>)
 800f770:	f00a fca6 	bl	801a0c0 <put_memory>
 800f774:	4668      	mov	r0, sp
 800f776:	f7ff feff 	bl	800f578 <rmw_get_zero_initialized_init_options>
 800f77a:	2258      	movs	r2, #88	@ 0x58
 800f77c:	4669      	mov	r1, sp
 800f77e:	4620      	mov	r0, r4
 800f780:	f00e fab5 	bl	801dcee <memcpy>
 800f784:	2000      	movs	r0, #0
 800f786:	b016      	add	sp, #88	@ 0x58
 800f788:	bd10      	pop	{r4, pc}
 800f78a:	200b      	movs	r0, #11
 800f78c:	b016      	add	sp, #88	@ 0x58
 800f78e:	bd10      	pop	{r4, pc}
 800f790:	2001      	movs	r0, #1
 800f792:	b016      	add	sp, #88	@ 0x58
 800f794:	bd10      	pop	{r4, pc}
 800f796:	200c      	movs	r0, #12
 800f798:	e7f5      	b.n	800f786 <rmw_init_options_fini+0x4a>
 800f79a:	200b      	movs	r0, #11
 800f79c:	4770      	bx	lr
 800f79e:	bf00      	nop
 800f7a0:	08021a10 	.word	0x08021a10
 800f7a4:	2000a62c 	.word	0x2000a62c

0800f7a8 <rmw_init>:
 800f7a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f7ac:	b083      	sub	sp, #12
 800f7ae:	2800      	cmp	r0, #0
 800f7b0:	f000 80d4 	beq.w	800f95c <rmw_init+0x1b4>
 800f7b4:	460e      	mov	r6, r1
 800f7b6:	2900      	cmp	r1, #0
 800f7b8:	f000 80d0 	beq.w	800f95c <rmw_init+0x1b4>
 800f7bc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800f7be:	4605      	mov	r5, r0
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	f000 80cb 	beq.w	800f95c <rmw_init+0x1b4>
 800f7c6:	4b77      	ldr	r3, [pc, #476]	@ (800f9a4 <rmw_init+0x1fc>)
 800f7c8:	6880      	ldr	r0, [r0, #8]
 800f7ca:	681f      	ldr	r7, [r3, #0]
 800f7cc:	b128      	cbz	r0, 800f7da <rmw_init+0x32>
 800f7ce:	4639      	mov	r1, r7
 800f7d0:	f7f0 fd26 	bl	8000220 <strcmp>
 800f7d4:	2800      	cmp	r0, #0
 800f7d6:	f040 80d3 	bne.w	800f980 <rmw_init+0x1d8>
 800f7da:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f7de:	4c72      	ldr	r4, [pc, #456]	@ (800f9a8 <rmw_init+0x200>)
 800f7e0:	4972      	ldr	r1, [pc, #456]	@ (800f9ac <rmw_init+0x204>)
 800f7e2:	4873      	ldr	r0, [pc, #460]	@ (800f9b0 <rmw_init+0x208>)
 800f7e4:	60b7      	str	r7, [r6, #8]
 800f7e6:	e9c6 2300 	strd	r2, r3, [r6]
 800f7ea:	68eb      	ldr	r3, [r5, #12]
 800f7ec:	66b3      	str	r3, [r6, #104]	@ 0x68
 800f7ee:	2201      	movs	r2, #1
 800f7f0:	f000 fe6c 	bl	80104cc <rmw_uxrce_init_session_memory>
 800f7f4:	4620      	mov	r0, r4
 800f7f6:	496f      	ldr	r1, [pc, #444]	@ (800f9b4 <rmw_init+0x20c>)
 800f7f8:	2204      	movs	r2, #4
 800f7fa:	f000 fea7 	bl	801054c <rmw_uxrce_init_static_input_buffer_memory>
 800f7fe:	f04f 0800 	mov.w	r8, #0
 800f802:	486b      	ldr	r0, [pc, #428]	@ (800f9b0 <rmw_init+0x208>)
 800f804:	f884 800d 	strb.w	r8, [r4, #13]
 800f808:	f00a fc4a 	bl	801a0a0 <get_memory>
 800f80c:	2800      	cmp	r0, #0
 800f80e:	f000 80b2 	beq.w	800f976 <rmw_init+0x1ce>
 800f812:	6884      	ldr	r4, [r0, #8]
 800f814:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 800f816:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800f818:	f890 c010 	ldrb.w	ip, [r0, #16]
 800f81c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800f820:	9101      	str	r1, [sp, #4]
 800f822:	6a00      	ldr	r0, [r0, #32]
 800f824:	9000      	str	r0, [sp, #0]
 800f826:	f104 0910 	add.w	r9, r4, #16
 800f82a:	4661      	mov	r1, ip
 800f82c:	4648      	mov	r0, r9
 800f82e:	f003 fbe9 	bl	8013004 <uxr_set_custom_transport_callbacks>
 800f832:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f836:	e9c4 33e3 	strd	r3, r3, [r4, #908]	@ 0x38c
 800f83a:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800f83e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800f842:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800f846:	495c      	ldr	r1, [pc, #368]	@ (800f9b8 <rmw_init+0x210>)
 800f848:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800f84c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800f850:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800f854:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800f858:	4858      	ldr	r0, [pc, #352]	@ (800f9bc <rmw_init+0x214>)
 800f85a:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800f85e:	2201      	movs	r2, #1
 800f860:	66f4      	str	r4, [r6, #108]	@ 0x6c
 800f862:	f000 fe13 	bl	801048c <rmw_uxrce_init_node_memory>
 800f866:	4956      	ldr	r1, [pc, #344]	@ (800f9c0 <rmw_init+0x218>)
 800f868:	4856      	ldr	r0, [pc, #344]	@ (800f9c4 <rmw_init+0x21c>)
 800f86a:	2205      	movs	r2, #5
 800f86c:	f000 fdee 	bl	801044c <rmw_uxrce_init_subscription_memory>
 800f870:	4955      	ldr	r1, [pc, #340]	@ (800f9c8 <rmw_init+0x220>)
 800f872:	4856      	ldr	r0, [pc, #344]	@ (800f9cc <rmw_init+0x224>)
 800f874:	220a      	movs	r2, #10
 800f876:	f000 fdc9 	bl	801040c <rmw_uxrce_init_publisher_memory>
 800f87a:	4955      	ldr	r1, [pc, #340]	@ (800f9d0 <rmw_init+0x228>)
 800f87c:	4855      	ldr	r0, [pc, #340]	@ (800f9d4 <rmw_init+0x22c>)
 800f87e:	2202      	movs	r2, #2
 800f880:	f000 fd84 	bl	801038c <rmw_uxrce_init_service_memory>
 800f884:	4954      	ldr	r1, [pc, #336]	@ (800f9d8 <rmw_init+0x230>)
 800f886:	4855      	ldr	r0, [pc, #340]	@ (800f9dc <rmw_init+0x234>)
 800f888:	2202      	movs	r2, #2
 800f88a:	f000 fd9f 	bl	80103cc <rmw_uxrce_init_client_memory>
 800f88e:	4954      	ldr	r1, [pc, #336]	@ (800f9e0 <rmw_init+0x238>)
 800f890:	4854      	ldr	r0, [pc, #336]	@ (800f9e4 <rmw_init+0x23c>)
 800f892:	220f      	movs	r2, #15
 800f894:	f000 fe3a 	bl	801050c <rmw_uxrce_init_topic_memory>
 800f898:	4953      	ldr	r1, [pc, #332]	@ (800f9e8 <rmw_init+0x240>)
 800f89a:	4854      	ldr	r0, [pc, #336]	@ (800f9ec <rmw_init+0x244>)
 800f89c:	2203      	movs	r2, #3
 800f89e:	f000 fe75 	bl	801058c <rmw_uxrce_init_init_options_impl_memory>
 800f8a2:	4953      	ldr	r1, [pc, #332]	@ (800f9f0 <rmw_init+0x248>)
 800f8a4:	4853      	ldr	r0, [pc, #332]	@ (800f9f4 <rmw_init+0x24c>)
 800f8a6:	2204      	movs	r2, #4
 800f8a8:	f000 fe90 	bl	80105cc <rmw_uxrce_init_wait_set_memory>
 800f8ac:	4952      	ldr	r1, [pc, #328]	@ (800f9f8 <rmw_init+0x250>)
 800f8ae:	4853      	ldr	r0, [pc, #332]	@ (800f9fc <rmw_init+0x254>)
 800f8b0:	2204      	movs	r2, #4
 800f8b2:	f000 feab 	bl	801060c <rmw_uxrce_init_guard_condition_memory>
 800f8b6:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800f8b8:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800f8ba:	4642      	mov	r2, r8
 800f8bc:	f000 fd20 	bl	8010300 <rmw_uxrce_transport_init>
 800f8c0:	4607      	mov	r7, r0
 800f8c2:	2800      	cmp	r0, #0
 800f8c4:	d161      	bne.n	800f98a <rmw_init+0x1e2>
 800f8c6:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800f8c8:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800f8cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f8ce:	4628      	mov	r0, r5
 800f8d0:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800f8d4:	f003 fdd0 	bl	8013478 <uxr_init_session>
 800f8d8:	4628      	mov	r0, r5
 800f8da:	4949      	ldr	r1, [pc, #292]	@ (800fa00 <rmw_init+0x258>)
 800f8dc:	4622      	mov	r2, r4
 800f8de:	f003 fdef 	bl	80134c0 <uxr_set_topic_callback>
 800f8e2:	4628      	mov	r0, r5
 800f8e4:	4947      	ldr	r1, [pc, #284]	@ (800fa04 <rmw_init+0x25c>)
 800f8e6:	463a      	mov	r2, r7
 800f8e8:	f003 fde6 	bl	80134b8 <uxr_set_status_callback>
 800f8ec:	4628      	mov	r0, r5
 800f8ee:	4946      	ldr	r1, [pc, #280]	@ (800fa08 <rmw_init+0x260>)
 800f8f0:	463a      	mov	r2, r7
 800f8f2:	f003 fde9 	bl	80134c8 <uxr_set_request_callback>
 800f8f6:	4628      	mov	r0, r5
 800f8f8:	4944      	ldr	r1, [pc, #272]	@ (800fa0c <rmw_init+0x264>)
 800f8fa:	463a      	mov	r2, r7
 800f8fc:	f003 fde8 	bl	80134d0 <uxr_set_reply_callback>
 800f900:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800f904:	2304      	movs	r3, #4
 800f906:	0092      	lsls	r2, r2, #2
 800f908:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800f90c:	4628      	mov	r0, r5
 800f90e:	f003 fe0d 	bl	801352c <uxr_create_input_reliable_stream>
 800f912:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800f916:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800f91a:	2304      	movs	r3, #4
 800f91c:	0092      	lsls	r2, r2, #2
 800f91e:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800f922:	4628      	mov	r0, r5
 800f924:	f003 fdea 	bl	80134fc <uxr_create_output_reliable_stream>
 800f928:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800f92c:	4628      	mov	r0, r5
 800f92e:	f003 fdf7 	bl	8013520 <uxr_create_input_best_effort_stream>
 800f932:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800f936:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800f93a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800f93e:	3114      	adds	r1, #20
 800f940:	4628      	mov	r0, r5
 800f942:	f003 fdc9 	bl	80134d8 <uxr_create_output_best_effort_stream>
 800f946:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800f94a:	4628      	mov	r0, r5
 800f94c:	f004 fb70 	bl	8014030 <uxr_create_session>
 800f950:	4605      	mov	r5, r0
 800f952:	b140      	cbz	r0, 800f966 <rmw_init+0x1be>
 800f954:	4638      	mov	r0, r7
 800f956:	b003      	add	sp, #12
 800f958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f95c:	270b      	movs	r7, #11
 800f95e:	4638      	mov	r0, r7
 800f960:	b003      	add	sp, #12
 800f962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f966:	4648      	mov	r0, r9
 800f968:	f003 fb8e 	bl	8013088 <uxr_close_custom_transport>
 800f96c:	4810      	ldr	r0, [pc, #64]	@ (800f9b0 <rmw_init+0x208>)
 800f96e:	4621      	mov	r1, r4
 800f970:	f00a fba6 	bl	801a0c0 <put_memory>
 800f974:	66f5      	str	r5, [r6, #108]	@ 0x6c
 800f976:	2701      	movs	r7, #1
 800f978:	4638      	mov	r0, r7
 800f97a:	b003      	add	sp, #12
 800f97c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f980:	270c      	movs	r7, #12
 800f982:	4638      	mov	r0, r7
 800f984:	b003      	add	sp, #12
 800f986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f98a:	4648      	mov	r0, r9
 800f98c:	f003 fb7c 	bl	8013088 <uxr_close_custom_transport>
 800f990:	4807      	ldr	r0, [pc, #28]	@ (800f9b0 <rmw_init+0x208>)
 800f992:	4621      	mov	r1, r4
 800f994:	f00a fb94 	bl	801a0c0 <put_memory>
 800f998:	4638      	mov	r0, r7
 800f99a:	f8c6 806c 	str.w	r8, [r6, #108]	@ 0x6c
 800f99e:	b003      	add	sp, #12
 800f9a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9a4:	08021a10 	.word	0x08021a10
 800f9a8:	2000c740 	.word	0x2000c740
 800f9ac:	2000d9c8 	.word	0x2000d9c8
 800f9b0:	2000ef70 	.word	0x2000ef70
 800f9b4:	2000a640 	.word	0x2000a640
 800f9b8:	2000d910 	.word	0x2000d910
 800f9bc:	2000d9b4 	.word	0x2000d9b4
 800f9c0:	2000cc48 	.word	0x2000cc48
 800f9c4:	2000d080 	.word	0x2000d080
 800f9c8:	2000d090 	.word	0x2000d090
 800f9cc:	2000d900 	.word	0x2000d900
 800f9d0:	2000caa8 	.word	0x2000caa8
 800f9d4:	2000cc38 	.word	0x2000cc38
 800f9d8:	2000c908 	.word	0x2000c908
 800f9dc:	2000ca98 	.word	0x2000ca98
 800f9e0:	2000c750 	.word	0x2000c750
 800f9e4:	2000c8f4 	.word	0x2000c8f4
 800f9e8:	2000a5a8 	.word	0x2000a5a8
 800f9ec:	2000a62c 	.word	0x2000a62c
 800f9f0:	2000a528 	.word	0x2000a528
 800f9f4:	2000a598 	.word	0x2000a598
 800f9f8:	2000a498 	.word	0x2000a498
 800f9fc:	2000a518 	.word	0x2000a518
 800fa00:	08019ed9 	.word	0x08019ed9
 800fa04:	08019ed1 	.word	0x08019ed1
 800fa08:	08019f71 	.word	0x08019f71
 800fa0c:	0801a00d 	.word	0x0801a00d

0800fa10 <rmw_context_fini>:
 800fa10:	4b17      	ldr	r3, [pc, #92]	@ (800fa70 <rmw_context_fini+0x60>)
 800fa12:	b570      	push	{r4, r5, r6, lr}
 800fa14:	681c      	ldr	r4, [r3, #0]
 800fa16:	4605      	mov	r5, r0
 800fa18:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 800fa1a:	b33c      	cbz	r4, 800fa6c <rmw_context_fini+0x5c>
 800fa1c:	2600      	movs	r6, #0
 800fa1e:	e9d4 4301 	ldrd	r4, r3, [r4, #4]
 800fa22:	691a      	ldr	r2, [r3, #16]
 800fa24:	4282      	cmp	r2, r0
 800fa26:	d018      	beq.n	800fa5a <rmw_context_fini+0x4a>
 800fa28:	2c00      	cmp	r4, #0
 800fa2a:	d1f8      	bne.n	800fa1e <rmw_context_fini+0xe>
 800fa2c:	b188      	cbz	r0, 800fa52 <rmw_context_fini+0x42>
 800fa2e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fa32:	789b      	ldrb	r3, [r3, #2]
 800fa34:	2b01      	cmp	r3, #1
 800fa36:	bf14      	ite	ne
 800fa38:	210a      	movne	r1, #10
 800fa3a:	2100      	moveq	r1, #0
 800fa3c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fa40:	f004 face 	bl	8013fe0 <uxr_delete_session_retries>
 800fa44:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 800fa46:	f000 fe01 	bl	801064c <rmw_uxrce_fini_session_memory>
 800fa4a:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 800fa4c:	3010      	adds	r0, #16
 800fa4e:	f003 fb1b 	bl	8013088 <uxr_close_custom_transport>
 800fa52:	2300      	movs	r3, #0
 800fa54:	66eb      	str	r3, [r5, #108]	@ 0x6c
 800fa56:	4630      	mov	r0, r6
 800fa58:	bd70      	pop	{r4, r5, r6, pc}
 800fa5a:	f103 0018 	add.w	r0, r3, #24
 800fa5e:	f000 f89b 	bl	800fb98 <rmw_destroy_node>
 800fa62:	4606      	mov	r6, r0
 800fa64:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 800fa66:	2c00      	cmp	r4, #0
 800fa68:	d1d9      	bne.n	800fa1e <rmw_context_fini+0xe>
 800fa6a:	e7df      	b.n	800fa2c <rmw_context_fini+0x1c>
 800fa6c:	4626      	mov	r6, r4
 800fa6e:	e7dd      	b.n	800fa2c <rmw_context_fini+0x1c>
 800fa70:	2000d9b4 	.word	0x2000d9b4

0800fa74 <create_node>:
 800fa74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa78:	b083      	sub	sp, #12
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d063      	beq.n	800fb46 <create_node+0xd2>
 800fa7e:	4606      	mov	r6, r0
 800fa80:	4836      	ldr	r0, [pc, #216]	@ (800fb5c <create_node+0xe8>)
 800fa82:	460f      	mov	r7, r1
 800fa84:	4690      	mov	r8, r2
 800fa86:	461d      	mov	r5, r3
 800fa88:	f00a fb0a 	bl	801a0a0 <get_memory>
 800fa8c:	2800      	cmp	r0, #0
 800fa8e:	d05a      	beq.n	800fb46 <create_node+0xd2>
 800fa90:	6884      	ldr	r4, [r0, #8]
 800fa92:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 800fa94:	6123      	str	r3, [r4, #16]
 800fa96:	f00a fb89 	bl	801a1ac <rmw_get_implementation_identifier>
 800fa9a:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800fa9e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800faa2:	f8c4 9020 	str.w	r9, [r4, #32]
 800faa6:	4630      	mov	r0, r6
 800faa8:	f7f0 fc1a 	bl	80002e0 <strlen>
 800faac:	1c42      	adds	r2, r0, #1
 800faae:	2a3c      	cmp	r2, #60	@ 0x3c
 800fab0:	f104 0518 	add.w	r5, r4, #24
 800fab4:	d844      	bhi.n	800fb40 <create_node+0xcc>
 800fab6:	4648      	mov	r0, r9
 800fab8:	4631      	mov	r1, r6
 800faba:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800fabe:	f00e f916 	bl	801dcee <memcpy>
 800fac2:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800fac6:	4638      	mov	r0, r7
 800fac8:	f7f0 fc0a 	bl	80002e0 <strlen>
 800facc:	1c42      	adds	r2, r0, #1
 800face:	2a3c      	cmp	r2, #60	@ 0x3c
 800fad0:	d836      	bhi.n	800fb40 <create_node+0xcc>
 800fad2:	4639      	mov	r1, r7
 800fad4:	4648      	mov	r0, r9
 800fad6:	f00e f90a 	bl	801dcee <memcpy>
 800fada:	6923      	ldr	r3, [r4, #16]
 800fadc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fae0:	2101      	movs	r1, #1
 800fae2:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800fae6:	1842      	adds	r2, r0, r1
 800fae8:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800faec:	f003 fad0 	bl	8013090 <uxr_object_id>
 800faf0:	6160      	str	r0, [r4, #20]
 800faf2:	783b      	ldrb	r3, [r7, #0]
 800faf4:	2b2f      	cmp	r3, #47	@ 0x2f
 800faf6:	d128      	bne.n	800fb4a <create_node+0xd6>
 800faf8:	787b      	ldrb	r3, [r7, #1]
 800fafa:	bb33      	cbnz	r3, 800fb4a <create_node+0xd6>
 800fafc:	4a18      	ldr	r2, [pc, #96]	@ (800fb60 <create_node+0xec>)
 800fafe:	4819      	ldr	r0, [pc, #100]	@ (800fb64 <create_node+0xf0>)
 800fb00:	4633      	mov	r3, r6
 800fb02:	213c      	movs	r1, #60	@ 0x3c
 800fb04:	f00d feaa 	bl	801d85c <sniprintf>
 800fb08:	6920      	ldr	r0, [r4, #16]
 800fb0a:	4916      	ldr	r1, [pc, #88]	@ (800fb64 <create_node+0xf0>)
 800fb0c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800fb10:	9100      	str	r1, [sp, #0]
 800fb12:	2106      	movs	r1, #6
 800fb14:	9101      	str	r1, [sp, #4]
 800fb16:	6811      	ldr	r1, [r2, #0]
 800fb18:	6962      	ldr	r2, [r4, #20]
 800fb1a:	fa1f f388 	uxth.w	r3, r8
 800fb1e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fb22:	f003 f8c1 	bl	8012ca8 <uxr_buffer_create_participant_bin>
 800fb26:	4602      	mov	r2, r0
 800fb28:	6920      	ldr	r0, [r4, #16]
 800fb2a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800fb2e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800fb32:	f000 ff0b 	bl	801094c <run_xrce_session>
 800fb36:	b118      	cbz	r0, 800fb40 <create_node+0xcc>
 800fb38:	4628      	mov	r0, r5
 800fb3a:	b003      	add	sp, #12
 800fb3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb40:	4628      	mov	r0, r5
 800fb42:	f000 fd89 	bl	8010658 <rmw_uxrce_fini_node_memory>
 800fb46:	2500      	movs	r5, #0
 800fb48:	e7f6      	b.n	800fb38 <create_node+0xc4>
 800fb4a:	4a07      	ldr	r2, [pc, #28]	@ (800fb68 <create_node+0xf4>)
 800fb4c:	9600      	str	r6, [sp, #0]
 800fb4e:	463b      	mov	r3, r7
 800fb50:	213c      	movs	r1, #60	@ 0x3c
 800fb52:	4804      	ldr	r0, [pc, #16]	@ (800fb64 <create_node+0xf0>)
 800fb54:	f00d fe82 	bl	801d85c <sniprintf>
 800fb58:	e7d6      	b.n	800fb08 <create_node+0x94>
 800fb5a:	bf00      	nop
 800fb5c:	2000d9b4 	.word	0x2000d9b4
 800fb60:	08020670 	.word	0x08020670
 800fb64:	2000a31c 	.word	0x2000a31c
 800fb68:	08020658 	.word	0x08020658

0800fb6c <rmw_create_node>:
 800fb6c:	b191      	cbz	r1, 800fb94 <rmw_create_node+0x28>
 800fb6e:	b410      	push	{r4}
 800fb70:	4614      	mov	r4, r2
 800fb72:	780a      	ldrb	r2, [r1, #0]
 800fb74:	4603      	mov	r3, r0
 800fb76:	4608      	mov	r0, r1
 800fb78:	b142      	cbz	r2, 800fb8c <rmw_create_node+0x20>
 800fb7a:	b13c      	cbz	r4, 800fb8c <rmw_create_node+0x20>
 800fb7c:	7822      	ldrb	r2, [r4, #0]
 800fb7e:	b12a      	cbz	r2, 800fb8c <rmw_create_node+0x20>
 800fb80:	4621      	mov	r1, r4
 800fb82:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800fb84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb88:	f7ff bf74 	b.w	800fa74 <create_node>
 800fb8c:	2000      	movs	r0, #0
 800fb8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb92:	4770      	bx	lr
 800fb94:	2000      	movs	r0, #0
 800fb96:	4770      	bx	lr

0800fb98 <rmw_destroy_node>:
 800fb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb9a:	b328      	cbz	r0, 800fbe8 <rmw_destroy_node+0x50>
 800fb9c:	4607      	mov	r7, r0
 800fb9e:	6800      	ldr	r0, [r0, #0]
 800fba0:	b120      	cbz	r0, 800fbac <rmw_destroy_node+0x14>
 800fba2:	4b36      	ldr	r3, [pc, #216]	@ (800fc7c <rmw_destroy_node+0xe4>)
 800fba4:	6819      	ldr	r1, [r3, #0]
 800fba6:	f7f0 fb3b 	bl	8000220 <strcmp>
 800fbaa:	b9e8      	cbnz	r0, 800fbe8 <rmw_destroy_node+0x50>
 800fbac:	687d      	ldr	r5, [r7, #4]
 800fbae:	b1dd      	cbz	r5, 800fbe8 <rmw_destroy_node+0x50>
 800fbb0:	4b33      	ldr	r3, [pc, #204]	@ (800fc80 <rmw_destroy_node+0xe8>)
 800fbb2:	681c      	ldr	r4, [r3, #0]
 800fbb4:	2c00      	cmp	r4, #0
 800fbb6:	d05f      	beq.n	800fc78 <rmw_destroy_node+0xe0>
 800fbb8:	2600      	movs	r6, #0
 800fbba:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800fbbe:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800fbc2:	429d      	cmp	r5, r3
 800fbc4:	d013      	beq.n	800fbee <rmw_destroy_node+0x56>
 800fbc6:	2c00      	cmp	r4, #0
 800fbc8:	d1f7      	bne.n	800fbba <rmw_destroy_node+0x22>
 800fbca:	4b2e      	ldr	r3, [pc, #184]	@ (800fc84 <rmw_destroy_node+0xec>)
 800fbcc:	681c      	ldr	r4, [r3, #0]
 800fbce:	b1c4      	cbz	r4, 800fc02 <rmw_destroy_node+0x6a>
 800fbd0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800fbd4:	6a0b      	ldr	r3, [r1, #32]
 800fbd6:	429d      	cmp	r5, r3
 800fbd8:	d1f9      	bne.n	800fbce <rmw_destroy_node+0x36>
 800fbda:	317c      	adds	r1, #124	@ 0x7c
 800fbdc:	4638      	mov	r0, r7
 800fbde:	f000 fb2f 	bl	8010240 <rmw_destroy_subscription>
 800fbe2:	2801      	cmp	r0, #1
 800fbe4:	4606      	mov	r6, r0
 800fbe6:	d1f2      	bne.n	800fbce <rmw_destroy_node+0x36>
 800fbe8:	2601      	movs	r6, #1
 800fbea:	4630      	mov	r0, r6
 800fbec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbee:	3184      	adds	r1, #132	@ 0x84
 800fbf0:	4638      	mov	r0, r7
 800fbf2:	f000 f9a1 	bl	800ff38 <rmw_destroy_publisher>
 800fbf6:	2801      	cmp	r0, #1
 800fbf8:	4606      	mov	r6, r0
 800fbfa:	d0f5      	beq.n	800fbe8 <rmw_destroy_node+0x50>
 800fbfc:	2c00      	cmp	r4, #0
 800fbfe:	d1dc      	bne.n	800fbba <rmw_destroy_node+0x22>
 800fc00:	e7e3      	b.n	800fbca <rmw_destroy_node+0x32>
 800fc02:	4b21      	ldr	r3, [pc, #132]	@ (800fc88 <rmw_destroy_node+0xf0>)
 800fc04:	681c      	ldr	r4, [r3, #0]
 800fc06:	b16c      	cbz	r4, 800fc24 <rmw_destroy_node+0x8c>
 800fc08:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800fc0c:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800fc0e:	429d      	cmp	r5, r3
 800fc10:	d1f9      	bne.n	800fc06 <rmw_destroy_node+0x6e>
 800fc12:	317c      	adds	r1, #124	@ 0x7c
 800fc14:	4638      	mov	r0, r7
 800fc16:	f000 fab3 	bl	8010180 <rmw_destroy_service>
 800fc1a:	2801      	cmp	r0, #1
 800fc1c:	4606      	mov	r6, r0
 800fc1e:	d0e3      	beq.n	800fbe8 <rmw_destroy_node+0x50>
 800fc20:	2c00      	cmp	r4, #0
 800fc22:	d1f1      	bne.n	800fc08 <rmw_destroy_node+0x70>
 800fc24:	4b19      	ldr	r3, [pc, #100]	@ (800fc8c <rmw_destroy_node+0xf4>)
 800fc26:	681c      	ldr	r4, [r3, #0]
 800fc28:	b16c      	cbz	r4, 800fc46 <rmw_destroy_node+0xae>
 800fc2a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800fc2e:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800fc30:	429d      	cmp	r5, r3
 800fc32:	d1f9      	bne.n	800fc28 <rmw_destroy_node+0x90>
 800fc34:	317c      	adds	r1, #124	@ 0x7c
 800fc36:	4638      	mov	r0, r7
 800fc38:	f00a fa56 	bl	801a0e8 <rmw_destroy_client>
 800fc3c:	2801      	cmp	r0, #1
 800fc3e:	4606      	mov	r6, r0
 800fc40:	d0d2      	beq.n	800fbe8 <rmw_destroy_node+0x50>
 800fc42:	2c00      	cmp	r4, #0
 800fc44:	d1f1      	bne.n	800fc2a <rmw_destroy_node+0x92>
 800fc46:	6928      	ldr	r0, [r5, #16]
 800fc48:	696a      	ldr	r2, [r5, #20]
 800fc4a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fc4e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fc52:	6819      	ldr	r1, [r3, #0]
 800fc54:	f002 ffde 	bl	8012c14 <uxr_buffer_delete_entity>
 800fc58:	4602      	mov	r2, r0
 800fc5a:	6928      	ldr	r0, [r5, #16]
 800fc5c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fc60:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fc64:	f000 fe72 	bl	801094c <run_xrce_session>
 800fc68:	2800      	cmp	r0, #0
 800fc6a:	bf08      	it	eq
 800fc6c:	2602      	moveq	r6, #2
 800fc6e:	4638      	mov	r0, r7
 800fc70:	f000 fcf2 	bl	8010658 <rmw_uxrce_fini_node_memory>
 800fc74:	4630      	mov	r0, r6
 800fc76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc78:	4626      	mov	r6, r4
 800fc7a:	e7a6      	b.n	800fbca <rmw_destroy_node+0x32>
 800fc7c:	08021a10 	.word	0x08021a10
 800fc80:	2000d900 	.word	0x2000d900
 800fc84:	2000d080 	.word	0x2000d080
 800fc88:	2000cc38 	.word	0x2000cc38
 800fc8c:	2000ca98 	.word	0x2000ca98

0800fc90 <rmw_node_get_graph_guard_condition>:
 800fc90:	6843      	ldr	r3, [r0, #4]
 800fc92:	6918      	ldr	r0, [r3, #16]
 800fc94:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800fc98:	4770      	bx	lr
 800fc9a:	bf00      	nop

0800fc9c <flush_session>:
 800fc9c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800fc9e:	f004 b805 	b.w	8013cac <uxr_run_session_until_confirm_delivery>
 800fca2:	bf00      	nop

0800fca4 <rmw_publish>:
 800fca4:	2800      	cmp	r0, #0
 800fca6:	d053      	beq.n	800fd50 <rmw_publish+0xac>
 800fca8:	b570      	push	{r4, r5, r6, lr}
 800fcaa:	460d      	mov	r5, r1
 800fcac:	b08e      	sub	sp, #56	@ 0x38
 800fcae:	2900      	cmp	r1, #0
 800fcb0:	d04b      	beq.n	800fd4a <rmw_publish+0xa6>
 800fcb2:	4604      	mov	r4, r0
 800fcb4:	6800      	ldr	r0, [r0, #0]
 800fcb6:	f000 ff69 	bl	8010b8c <is_uxrce_rmw_identifier_valid>
 800fcba:	2800      	cmp	r0, #0
 800fcbc:	d045      	beq.n	800fd4a <rmw_publish+0xa6>
 800fcbe:	6866      	ldr	r6, [r4, #4]
 800fcc0:	2e00      	cmp	r6, #0
 800fcc2:	d042      	beq.n	800fd4a <rmw_publish+0xa6>
 800fcc4:	69b4      	ldr	r4, [r6, #24]
 800fcc6:	4628      	mov	r0, r5
 800fcc8:	6923      	ldr	r3, [r4, #16]
 800fcca:	4798      	blx	r3
 800fccc:	69f3      	ldr	r3, [r6, #28]
 800fcce:	9005      	str	r0, [sp, #20]
 800fcd0:	b113      	cbz	r3, 800fcd8 <rmw_publish+0x34>
 800fcd2:	a805      	add	r0, sp, #20
 800fcd4:	4798      	blx	r3
 800fcd6:	9805      	ldr	r0, [sp, #20]
 800fcd8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800fcdc:	691b      	ldr	r3, [r3, #16]
 800fcde:	9000      	str	r0, [sp, #0]
 800fce0:	6972      	ldr	r2, [r6, #20]
 800fce2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800fce4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800fce8:	ab06      	add	r3, sp, #24
 800fcea:	f005 fa73 	bl	80151d4 <uxr_prepare_output_stream>
 800fcee:	b1d8      	cbz	r0, 800fd28 <rmw_publish+0x84>
 800fcf0:	68a3      	ldr	r3, [r4, #8]
 800fcf2:	a906      	add	r1, sp, #24
 800fcf4:	4628      	mov	r0, r5
 800fcf6:	4798      	blx	r3
 800fcf8:	6a33      	ldr	r3, [r6, #32]
 800fcfa:	4604      	mov	r4, r0
 800fcfc:	b10b      	cbz	r3, 800fd02 <rmw_publish+0x5e>
 800fcfe:	a806      	add	r0, sp, #24
 800fd00:	4798      	blx	r3
 800fd02:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800fd06:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
 800fd0a:	2b01      	cmp	r3, #1
 800fd0c:	6910      	ldr	r0, [r2, #16]
 800fd0e:	d021      	beq.n	800fd54 <rmw_publish+0xb0>
 800fd10:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800fd12:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fd16:	f003 ffc9 	bl	8013cac <uxr_run_session_until_confirm_delivery>
 800fd1a:	4004      	ands	r4, r0
 800fd1c:	b2e4      	uxtb	r4, r4
 800fd1e:	f084 0001 	eor.w	r0, r4, #1
 800fd22:	b2c0      	uxtb	r0, r0
 800fd24:	b00e      	add	sp, #56	@ 0x38
 800fd26:	bd70      	pop	{r4, r5, r6, pc}
 800fd28:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800fd2c:	6918      	ldr	r0, [r3, #16]
 800fd2e:	4b0c      	ldr	r3, [pc, #48]	@ (800fd60 <rmw_publish+0xbc>)
 800fd30:	9301      	str	r3, [sp, #4]
 800fd32:	9b05      	ldr	r3, [sp, #20]
 800fd34:	9300      	str	r3, [sp, #0]
 800fd36:	9602      	str	r6, [sp, #8]
 800fd38:	6972      	ldr	r2, [r6, #20]
 800fd3a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800fd3c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fd40:	ab06      	add	r3, sp, #24
 800fd42:	f005 fa77 	bl	8015234 <uxr_prepare_output_stream_fragmented>
 800fd46:	2800      	cmp	r0, #0
 800fd48:	d1d2      	bne.n	800fcf0 <rmw_publish+0x4c>
 800fd4a:	2001      	movs	r0, #1
 800fd4c:	b00e      	add	sp, #56	@ 0x38
 800fd4e:	bd70      	pop	{r4, r5, r6, pc}
 800fd50:	2001      	movs	r0, #1
 800fd52:	4770      	bx	lr
 800fd54:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fd58:	f003 fc10 	bl	801357c <uxr_flash_output_streams>
 800fd5c:	e7df      	b.n	800fd1e <rmw_publish+0x7a>
 800fd5e:	bf00      	nop
 800fd60:	0800fc9d 	.word	0x0800fc9d

0800fd64 <rmw_create_publisher>:
 800fd64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd68:	b087      	sub	sp, #28
 800fd6a:	2800      	cmp	r0, #0
 800fd6c:	f000 80c9 	beq.w	800ff02 <rmw_create_publisher+0x19e>
 800fd70:	460f      	mov	r7, r1
 800fd72:	2900      	cmp	r1, #0
 800fd74:	f000 80c5 	beq.w	800ff02 <rmw_create_publisher+0x19e>
 800fd78:	4604      	mov	r4, r0
 800fd7a:	6800      	ldr	r0, [r0, #0]
 800fd7c:	4615      	mov	r5, r2
 800fd7e:	461e      	mov	r6, r3
 800fd80:	f000 ff04 	bl	8010b8c <is_uxrce_rmw_identifier_valid>
 800fd84:	2800      	cmp	r0, #0
 800fd86:	f000 80bc 	beq.w	800ff02 <rmw_create_publisher+0x19e>
 800fd8a:	2d00      	cmp	r5, #0
 800fd8c:	f000 80b9 	beq.w	800ff02 <rmw_create_publisher+0x19e>
 800fd90:	782b      	ldrb	r3, [r5, #0]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	f000 80b5 	beq.w	800ff02 <rmw_create_publisher+0x19e>
 800fd98:	2e00      	cmp	r6, #0
 800fd9a:	f000 80b2 	beq.w	800ff02 <rmw_create_publisher+0x19e>
 800fd9e:	485c      	ldr	r0, [pc, #368]	@ (800ff10 <rmw_create_publisher+0x1ac>)
 800fda0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800fda4:	f00a f97c 	bl	801a0a0 <get_memory>
 800fda8:	2800      	cmp	r0, #0
 800fdaa:	f000 80aa 	beq.w	800ff02 <rmw_create_publisher+0x19e>
 800fdae:	6884      	ldr	r4, [r0, #8]
 800fdb0:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800fdb4:	f00a f9fa 	bl	801a1ac <rmw_get_implementation_identifier>
 800fdb8:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800fdbc:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800fdc0:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800fdc4:	4628      	mov	r0, r5
 800fdc6:	f7f0 fa8b 	bl	80002e0 <strlen>
 800fdca:	3001      	adds	r0, #1
 800fdcc:	283c      	cmp	r0, #60	@ 0x3c
 800fdce:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 800fdd2:	f200 808f 	bhi.w	800fef4 <rmw_create_publisher+0x190>
 800fdd6:	4a4f      	ldr	r2, [pc, #316]	@ (800ff14 <rmw_create_publisher+0x1b0>)
 800fdd8:	462b      	mov	r3, r5
 800fdda:	213c      	movs	r1, #60	@ 0x3c
 800fddc:	4650      	mov	r0, sl
 800fdde:	f00d fd3d 	bl	801d85c <sniprintf>
 800fde2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fde6:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800fde8:	4631      	mov	r1, r6
 800fdea:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800fdee:	2250      	movs	r2, #80	@ 0x50
 800fdf0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800fdf4:	f00d ff7b 	bl	801dcee <memcpy>
 800fdf8:	7a33      	ldrb	r3, [r6, #8]
 800fdfa:	4947      	ldr	r1, [pc, #284]	@ (800ff18 <rmw_create_publisher+0x1b4>)
 800fdfc:	2b02      	cmp	r3, #2
 800fdfe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fe02:	bf0c      	ite	eq
 800fe04:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800fe08:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800fe0c:	67a3      	str	r3, [r4, #120]	@ 0x78
 800fe0e:	2300      	movs	r3, #0
 800fe10:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800fe14:	4638      	mov	r0, r7
 800fe16:	f000 fec7 	bl	8010ba8 <get_message_typesupport_handle>
 800fe1a:	2800      	cmp	r0, #0
 800fe1c:	d06a      	beq.n	800fef4 <rmw_create_publisher+0x190>
 800fe1e:	6842      	ldr	r2, [r0, #4]
 800fe20:	61a2      	str	r2, [r4, #24]
 800fe22:	2a00      	cmp	r2, #0
 800fe24:	d066      	beq.n	800fef4 <rmw_create_publisher+0x190>
 800fe26:	4629      	mov	r1, r5
 800fe28:	4633      	mov	r3, r6
 800fe2a:	4648      	mov	r0, r9
 800fe2c:	f00a f9c4 	bl	801a1b8 <create_topic>
 800fe30:	6260      	str	r0, [r4, #36]	@ 0x24
 800fe32:	2800      	cmp	r0, #0
 800fe34:	d062      	beq.n	800fefc <rmw_create_publisher+0x198>
 800fe36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fe3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fe3e:	2103      	movs	r1, #3
 800fe40:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800fe44:	1c42      	adds	r2, r0, #1
 800fe46:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800fe4a:	f003 f921 	bl	8013090 <uxr_object_id>
 800fe4e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800fe52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fe56:	6120      	str	r0, [r4, #16]
 800fe58:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800fe5c:	6910      	ldr	r0, [r2, #16]
 800fe5e:	2506      	movs	r5, #6
 800fe60:	9500      	str	r5, [sp, #0]
 800fe62:	6819      	ldr	r1, [r3, #0]
 800fe64:	6922      	ldr	r2, [r4, #16]
 800fe66:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800fe6a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fe6e:	f002 ff81 	bl	8012d74 <uxr_buffer_create_publisher_bin>
 800fe72:	4602      	mov	r2, r0
 800fe74:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fe78:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800fe7c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800fe80:	f000 fd64 	bl	801094c <run_xrce_session>
 800fe84:	b3b0      	cbz	r0, 800fef4 <rmw_create_publisher+0x190>
 800fe86:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fe8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fe8e:	2105      	movs	r1, #5
 800fe90:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800fe94:	1c42      	adds	r2, r0, #1
 800fe96:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800fe9a:	f003 f8f9 	bl	8013090 <uxr_object_id>
 800fe9e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800fea2:	6160      	str	r0, [r4, #20]
 800fea4:	4631      	mov	r1, r6
 800fea6:	af04      	add	r7, sp, #16
 800fea8:	691e      	ldr	r6, [r3, #16]
 800feaa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800feae:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800feb2:	f8d3 a384 	ldr.w	sl, [r3, #900]	@ 0x384
 800feb6:	4638      	mov	r0, r7
 800feb8:	f000 fd68 	bl	801098c <convert_qos_profile>
 800febc:	9503      	str	r5, [sp, #12]
 800febe:	e897 0003 	ldmia.w	r7, {r0, r1}
 800fec2:	9001      	str	r0, [sp, #4]
 800fec4:	f8ad 1008 	strh.w	r1, [sp, #8]
 800fec8:	f8db 3010 	ldr.w	r3, [fp, #16]
 800fecc:	9300      	str	r3, [sp, #0]
 800fece:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800fed2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800fed6:	f8da 1000 	ldr.w	r1, [sl]
 800feda:	4630      	mov	r0, r6
 800fedc:	f002 ff78 	bl	8012dd0 <uxr_buffer_create_datawriter_bin>
 800fee0:	4602      	mov	r2, r0
 800fee2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fee6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800feea:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800feee:	f000 fd2d 	bl	801094c <run_xrce_session>
 800fef2:	b940      	cbnz	r0, 800ff06 <rmw_create_publisher+0x1a2>
 800fef4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800fef6:	b108      	cbz	r0, 800fefc <rmw_create_publisher+0x198>
 800fef8:	f000 fc1e 	bl	8010738 <rmw_uxrce_fini_topic_memory>
 800fefc:	4640      	mov	r0, r8
 800fefe:	f000 fbc3 	bl	8010688 <rmw_uxrce_fini_publisher_memory>
 800ff02:	f04f 0800 	mov.w	r8, #0
 800ff06:	4640      	mov	r0, r8
 800ff08:	b007      	add	sp, #28
 800ff0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff0e:	bf00      	nop
 800ff10:	2000d900 	.word	0x2000d900
 800ff14:	08020670 	.word	0x08020670
 800ff18:	0801fe68 	.word	0x0801fe68

0800ff1c <rmw_publisher_get_actual_qos>:
 800ff1c:	b508      	push	{r3, lr}
 800ff1e:	4603      	mov	r3, r0
 800ff20:	b140      	cbz	r0, 800ff34 <rmw_publisher_get_actual_qos+0x18>
 800ff22:	4608      	mov	r0, r1
 800ff24:	b131      	cbz	r1, 800ff34 <rmw_publisher_get_actual_qos+0x18>
 800ff26:	6859      	ldr	r1, [r3, #4]
 800ff28:	2250      	movs	r2, #80	@ 0x50
 800ff2a:	3128      	adds	r1, #40	@ 0x28
 800ff2c:	f00d fedf 	bl	801dcee <memcpy>
 800ff30:	2000      	movs	r0, #0
 800ff32:	bd08      	pop	{r3, pc}
 800ff34:	200b      	movs	r0, #11
 800ff36:	bd08      	pop	{r3, pc}

0800ff38 <rmw_destroy_publisher>:
 800ff38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff3c:	b128      	cbz	r0, 800ff4a <rmw_destroy_publisher+0x12>
 800ff3e:	4604      	mov	r4, r0
 800ff40:	6800      	ldr	r0, [r0, #0]
 800ff42:	460d      	mov	r5, r1
 800ff44:	f000 fe22 	bl	8010b8c <is_uxrce_rmw_identifier_valid>
 800ff48:	b918      	cbnz	r0, 800ff52 <rmw_destroy_publisher+0x1a>
 800ff4a:	2401      	movs	r4, #1
 800ff4c:	4620      	mov	r0, r4
 800ff4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff52:	6863      	ldr	r3, [r4, #4]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d0f8      	beq.n	800ff4a <rmw_destroy_publisher+0x12>
 800ff58:	2d00      	cmp	r5, #0
 800ff5a:	d0f6      	beq.n	800ff4a <rmw_destroy_publisher+0x12>
 800ff5c:	6828      	ldr	r0, [r5, #0]
 800ff5e:	f000 fe15 	bl	8010b8c <is_uxrce_rmw_identifier_valid>
 800ff62:	2800      	cmp	r0, #0
 800ff64:	d0f1      	beq.n	800ff4a <rmw_destroy_publisher+0x12>
 800ff66:	686c      	ldr	r4, [r5, #4]
 800ff68:	2c00      	cmp	r4, #0
 800ff6a:	d0ee      	beq.n	800ff4a <rmw_destroy_publisher+0x12>
 800ff6c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800ff6e:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800ff72:	f00a f975 	bl	801a260 <destroy_topic>
 800ff76:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ff7a:	6962      	ldr	r2, [r4, #20]
 800ff7c:	6918      	ldr	r0, [r3, #16]
 800ff7e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ff82:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ff86:	6819      	ldr	r1, [r3, #0]
 800ff88:	f002 fe44 	bl	8012c14 <uxr_buffer_delete_entity>
 800ff8c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ff90:	6922      	ldr	r2, [r4, #16]
 800ff92:	4680      	mov	r8, r0
 800ff94:	6918      	ldr	r0, [r3, #16]
 800ff96:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ff9a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ff9e:	6819      	ldr	r1, [r3, #0]
 800ffa0:	f002 fe38 	bl	8012c14 <uxr_buffer_delete_entity>
 800ffa4:	4606      	mov	r6, r0
 800ffa6:	6938      	ldr	r0, [r7, #16]
 800ffa8:	4642      	mov	r2, r8
 800ffaa:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ffae:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ffb2:	f000 fccb 	bl	801094c <run_xrce_session>
 800ffb6:	4604      	mov	r4, r0
 800ffb8:	6938      	ldr	r0, [r7, #16]
 800ffba:	4632      	mov	r2, r6
 800ffbc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ffc0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ffc4:	f000 fcc2 	bl	801094c <run_xrce_session>
 800ffc8:	4004      	ands	r4, r0
 800ffca:	f084 0401 	eor.w	r4, r4, #1
 800ffce:	b2e4      	uxtb	r4, r4
 800ffd0:	4628      	mov	r0, r5
 800ffd2:	0064      	lsls	r4, r4, #1
 800ffd4:	f000 fb58 	bl	8010688 <rmw_uxrce_fini_publisher_memory>
 800ffd8:	e7b8      	b.n	800ff4c <rmw_destroy_publisher+0x14>
 800ffda:	bf00      	nop

0800ffdc <rmw_create_service>:
 800ffdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffe0:	b091      	sub	sp, #68	@ 0x44
 800ffe2:	2800      	cmp	r0, #0
 800ffe4:	f000 80ba 	beq.w	801015c <rmw_create_service+0x180>
 800ffe8:	4689      	mov	r9, r1
 800ffea:	2900      	cmp	r1, #0
 800ffec:	f000 80b6 	beq.w	801015c <rmw_create_service+0x180>
 800fff0:	4606      	mov	r6, r0
 800fff2:	6800      	ldr	r0, [r0, #0]
 800fff4:	4614      	mov	r4, r2
 800fff6:	461d      	mov	r5, r3
 800fff8:	f000 fdc8 	bl	8010b8c <is_uxrce_rmw_identifier_valid>
 800fffc:	2800      	cmp	r0, #0
 800fffe:	f000 80ad 	beq.w	801015c <rmw_create_service+0x180>
 8010002:	2c00      	cmp	r4, #0
 8010004:	f000 80aa 	beq.w	801015c <rmw_create_service+0x180>
 8010008:	7823      	ldrb	r3, [r4, #0]
 801000a:	2b00      	cmp	r3, #0
 801000c:	f000 80a6 	beq.w	801015c <rmw_create_service+0x180>
 8010010:	2d00      	cmp	r5, #0
 8010012:	f000 80a3 	beq.w	801015c <rmw_create_service+0x180>
 8010016:	4854      	ldr	r0, [pc, #336]	@ (8010168 <rmw_create_service+0x18c>)
 8010018:	f8d6 8004 	ldr.w	r8, [r6, #4]
 801001c:	f00a f840 	bl	801a0a0 <get_memory>
 8010020:	2800      	cmp	r0, #0
 8010022:	f000 809b 	beq.w	801015c <rmw_create_service+0x180>
 8010026:	6886      	ldr	r6, [r0, #8]
 8010028:	f8c6 6080 	str.w	r6, [r6, #128]	@ 0x80
 801002c:	f00a f8be 	bl	801a1ac <rmw_get_implementation_identifier>
 8010030:	f106 0a88 	add.w	sl, r6, #136	@ 0x88
 8010034:	67f0      	str	r0, [r6, #124]	@ 0x7c
 8010036:	f8c6 a084 	str.w	sl, [r6, #132]	@ 0x84
 801003a:	4620      	mov	r0, r4
 801003c:	f7f0 f950 	bl	80002e0 <strlen>
 8010040:	1c42      	adds	r2, r0, #1
 8010042:	2a3c      	cmp	r2, #60	@ 0x3c
 8010044:	f106 077c 	add.w	r7, r6, #124	@ 0x7c
 8010048:	f200 8085 	bhi.w	8010156 <rmw_create_service+0x17a>
 801004c:	4621      	mov	r1, r4
 801004e:	4650      	mov	r0, sl
 8010050:	f00d fe4d 	bl	801dcee <memcpy>
 8010054:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010058:	4629      	mov	r1, r5
 801005a:	f8c6 8078 	str.w	r8, [r6, #120]	@ 0x78
 801005e:	6773      	str	r3, [r6, #116]	@ 0x74
 8010060:	2250      	movs	r2, #80	@ 0x50
 8010062:	f106 0020 	add.w	r0, r6, #32
 8010066:	f00d fe42 	bl	801dcee <memcpy>
 801006a:	4940      	ldr	r1, [pc, #256]	@ (801016c <rmw_create_service+0x190>)
 801006c:	4648      	mov	r0, r9
 801006e:	f000 fda7 	bl	8010bc0 <get_service_typesupport_handle>
 8010072:	2800      	cmp	r0, #0
 8010074:	d06f      	beq.n	8010156 <rmw_create_service+0x17a>
 8010076:	6843      	ldr	r3, [r0, #4]
 8010078:	6173      	str	r3, [r6, #20]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d06b      	beq.n	8010156 <rmw_create_service+0x17a>
 801007e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010082:	f8df a0f0 	ldr.w	sl, [pc, #240]	@ 8010174 <rmw_create_service+0x198>
 8010086:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8010178 <rmw_create_service+0x19c>
 801008a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801008e:	2108      	movs	r1, #8
 8010090:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 8010094:	1c42      	adds	r2, r0, #1
 8010096:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 801009a:	f002 fff9 	bl	8013090 <uxr_object_id>
 801009e:	2364      	movs	r3, #100	@ 0x64
 80100a0:	6130      	str	r0, [r6, #16]
 80100a2:	4652      	mov	r2, sl
 80100a4:	6970      	ldr	r0, [r6, #20]
 80100a6:	4649      	mov	r1, r9
 80100a8:	f000 fcbe 	bl	8010a28 <generate_service_types>
 80100ac:	2800      	cmp	r0, #0
 80100ae:	d052      	beq.n	8010156 <rmw_create_service+0x17a>
 80100b0:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 801017c <rmw_create_service+0x1a0>
 80100b4:	492e      	ldr	r1, [pc, #184]	@ (8010170 <rmw_create_service+0x194>)
 80100b6:	233c      	movs	r3, #60	@ 0x3c
 80100b8:	465a      	mov	r2, fp
 80100ba:	4620      	mov	r0, r4
 80100bc:	f000 fc82 	bl	80109c4 <generate_service_topics>
 80100c0:	2800      	cmp	r0, #0
 80100c2:	d048      	beq.n	8010156 <rmw_create_service+0x17a>
 80100c4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80100c8:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80100cc:	a80c      	add	r0, sp, #48	@ 0x30
 80100ce:	4629      	mov	r1, r5
 80100d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80100d4:	f000 fc5a 	bl	801098c <convert_qos_profile>
 80100d8:	4b25      	ldr	r3, [pc, #148]	@ (8010170 <rmw_create_service+0x194>)
 80100da:	f8cd b010 	str.w	fp, [sp, #16]
 80100de:	e9cd a302 	strd	sl, r3, [sp, #8]
 80100e2:	e9cd 4900 	strd	r4, r9, [sp]
 80100e6:	a80c      	add	r0, sp, #48	@ 0x30
 80100e8:	c803      	ldmia	r0, {r0, r1}
 80100ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100ec:	9005      	str	r0, [sp, #20]
 80100ee:	9a08      	ldr	r2, [sp, #32]
 80100f0:	f8ad 1018 	strh.w	r1, [sp, #24]
 80100f4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80100f8:	2306      	movs	r3, #6
 80100fa:	9307      	str	r3, [sp, #28]
 80100fc:	6811      	ldr	r1, [r2, #0]
 80100fe:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8010102:	6932      	ldr	r2, [r6, #16]
 8010104:	f002 fec8 	bl	8012e98 <uxr_buffer_create_replier_bin>
 8010108:	4602      	mov	r2, r0
 801010a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801010e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8010112:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8010116:	f000 fc19 	bl	801094c <run_xrce_session>
 801011a:	b1e0      	cbz	r0, 8010156 <rmw_create_service+0x17a>
 801011c:	7a2b      	ldrb	r3, [r5, #8]
 801011e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8010122:	2200      	movs	r2, #0
 8010124:	2b02      	cmp	r3, #2
 8010126:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801012a:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 801012e:	bf0c      	ite	eq
 8010130:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 8010134:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 8010138:	6732      	str	r2, [r6, #112]	@ 0x70
 801013a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801013c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8010140:	ab0e      	add	r3, sp, #56	@ 0x38
 8010142:	9300      	str	r3, [sp, #0]
 8010144:	6811      	ldr	r1, [r2, #0]
 8010146:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010148:	6932      	ldr	r2, [r6, #16]
 801014a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801014e:	f002 ffcd 	bl	80130ec <uxr_buffer_request_data>
 8010152:	8330      	strh	r0, [r6, #24]
 8010154:	e003      	b.n	801015e <rmw_create_service+0x182>
 8010156:	4638      	mov	r0, r7
 8010158:	f000 fac2 	bl	80106e0 <rmw_uxrce_fini_service_memory>
 801015c:	2700      	movs	r7, #0
 801015e:	4638      	mov	r0, r7
 8010160:	b011      	add	sp, #68	@ 0x44
 8010162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010166:	bf00      	nop
 8010168:	2000cc38 	.word	0x2000cc38
 801016c:	0801fe68 	.word	0x0801fe68
 8010170:	2000a394 	.word	0x2000a394
 8010174:	2000a3d0 	.word	0x2000a3d0
 8010178:	2000a434 	.word	0x2000a434
 801017c:	2000a358 	.word	0x2000a358

08010180 <rmw_destroy_service>:
 8010180:	b570      	push	{r4, r5, r6, lr}
 8010182:	b128      	cbz	r0, 8010190 <rmw_destroy_service+0x10>
 8010184:	4604      	mov	r4, r0
 8010186:	6800      	ldr	r0, [r0, #0]
 8010188:	460d      	mov	r5, r1
 801018a:	f000 fcff 	bl	8010b8c <is_uxrce_rmw_identifier_valid>
 801018e:	b910      	cbnz	r0, 8010196 <rmw_destroy_service+0x16>
 8010190:	2401      	movs	r4, #1
 8010192:	4620      	mov	r0, r4
 8010194:	bd70      	pop	{r4, r5, r6, pc}
 8010196:	6863      	ldr	r3, [r4, #4]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d0f9      	beq.n	8010190 <rmw_destroy_service+0x10>
 801019c:	2d00      	cmp	r5, #0
 801019e:	d0f7      	beq.n	8010190 <rmw_destroy_service+0x10>
 80101a0:	6828      	ldr	r0, [r5, #0]
 80101a2:	f000 fcf3 	bl	8010b8c <is_uxrce_rmw_identifier_valid>
 80101a6:	2800      	cmp	r0, #0
 80101a8:	d0f2      	beq.n	8010190 <rmw_destroy_service+0x10>
 80101aa:	686e      	ldr	r6, [r5, #4]
 80101ac:	2e00      	cmp	r6, #0
 80101ae:	d0ef      	beq.n	8010190 <rmw_destroy_service+0x10>
 80101b0:	6864      	ldr	r4, [r4, #4]
 80101b2:	6932      	ldr	r2, [r6, #16]
 80101b4:	6920      	ldr	r0, [r4, #16]
 80101b6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80101ba:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80101be:	6819      	ldr	r1, [r3, #0]
 80101c0:	f002 ffcc 	bl	801315c <uxr_buffer_cancel_data>
 80101c4:	4602      	mov	r2, r0
 80101c6:	6920      	ldr	r0, [r4, #16]
 80101c8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80101cc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80101d0:	f000 fbbc 	bl	801094c <run_xrce_session>
 80101d4:	6920      	ldr	r0, [r4, #16]
 80101d6:	6932      	ldr	r2, [r6, #16]
 80101d8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80101dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80101e0:	6819      	ldr	r1, [r3, #0]
 80101e2:	f002 fd17 	bl	8012c14 <uxr_buffer_delete_entity>
 80101e6:	4602      	mov	r2, r0
 80101e8:	6920      	ldr	r0, [r4, #16]
 80101ea:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80101ee:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80101f2:	f000 fbab 	bl	801094c <run_xrce_session>
 80101f6:	f080 0401 	eor.w	r4, r0, #1
 80101fa:	b2e4      	uxtb	r4, r4
 80101fc:	4628      	mov	r0, r5
 80101fe:	0064      	lsls	r4, r4, #1
 8010200:	f000 fa6e 	bl	80106e0 <rmw_uxrce_fini_service_memory>
 8010204:	e7c5      	b.n	8010192 <rmw_destroy_service+0x12>
 8010206:	bf00      	nop

08010208 <rmw_service_response_publisher_get_actual_qos>:
 8010208:	b508      	push	{r3, lr}
 801020a:	4603      	mov	r3, r0
 801020c:	b140      	cbz	r0, 8010220 <rmw_service_response_publisher_get_actual_qos+0x18>
 801020e:	4608      	mov	r0, r1
 8010210:	b131      	cbz	r1, 8010220 <rmw_service_response_publisher_get_actual_qos+0x18>
 8010212:	6859      	ldr	r1, [r3, #4]
 8010214:	2250      	movs	r2, #80	@ 0x50
 8010216:	3120      	adds	r1, #32
 8010218:	f00d fd69 	bl	801dcee <memcpy>
 801021c:	2000      	movs	r0, #0
 801021e:	bd08      	pop	{r3, pc}
 8010220:	200b      	movs	r0, #11
 8010222:	bd08      	pop	{r3, pc}

08010224 <rmw_service_request_subscription_get_actual_qos>:
 8010224:	b508      	push	{r3, lr}
 8010226:	4603      	mov	r3, r0
 8010228:	b140      	cbz	r0, 801023c <rmw_service_request_subscription_get_actual_qos+0x18>
 801022a:	4608      	mov	r0, r1
 801022c:	b131      	cbz	r1, 801023c <rmw_service_request_subscription_get_actual_qos+0x18>
 801022e:	6859      	ldr	r1, [r3, #4]
 8010230:	2250      	movs	r2, #80	@ 0x50
 8010232:	3120      	adds	r1, #32
 8010234:	f00d fd5b 	bl	801dcee <memcpy>
 8010238:	2000      	movs	r0, #0
 801023a:	bd08      	pop	{r3, pc}
 801023c:	200b      	movs	r0, #11
 801023e:	bd08      	pop	{r3, pc}

08010240 <rmw_destroy_subscription>:
 8010240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010244:	b128      	cbz	r0, 8010252 <rmw_destroy_subscription+0x12>
 8010246:	4604      	mov	r4, r0
 8010248:	6800      	ldr	r0, [r0, #0]
 801024a:	460d      	mov	r5, r1
 801024c:	f000 fc9e 	bl	8010b8c <is_uxrce_rmw_identifier_valid>
 8010250:	b918      	cbnz	r0, 801025a <rmw_destroy_subscription+0x1a>
 8010252:	2401      	movs	r4, #1
 8010254:	4620      	mov	r0, r4
 8010256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801025a:	6863      	ldr	r3, [r4, #4]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d0f8      	beq.n	8010252 <rmw_destroy_subscription+0x12>
 8010260:	2d00      	cmp	r5, #0
 8010262:	d0f6      	beq.n	8010252 <rmw_destroy_subscription+0x12>
 8010264:	6828      	ldr	r0, [r5, #0]
 8010266:	f000 fc91 	bl	8010b8c <is_uxrce_rmw_identifier_valid>
 801026a:	2800      	cmp	r0, #0
 801026c:	d0f1      	beq.n	8010252 <rmw_destroy_subscription+0x12>
 801026e:	686c      	ldr	r4, [r5, #4]
 8010270:	2c00      	cmp	r4, #0
 8010272:	d0ee      	beq.n	8010252 <rmw_destroy_subscription+0x12>
 8010274:	6a26      	ldr	r6, [r4, #32]
 8010276:	6962      	ldr	r2, [r4, #20]
 8010278:	6930      	ldr	r0, [r6, #16]
 801027a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801027e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010282:	6819      	ldr	r1, [r3, #0]
 8010284:	f002 ff6a 	bl	801315c <uxr_buffer_cancel_data>
 8010288:	4602      	mov	r2, r0
 801028a:	6930      	ldr	r0, [r6, #16]
 801028c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010290:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010294:	f000 fb5a 	bl	801094c <run_xrce_session>
 8010298:	69e0      	ldr	r0, [r4, #28]
 801029a:	f009 ffe1 	bl	801a260 <destroy_topic>
 801029e:	6a23      	ldr	r3, [r4, #32]
 80102a0:	6962      	ldr	r2, [r4, #20]
 80102a2:	6918      	ldr	r0, [r3, #16]
 80102a4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80102a8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80102ac:	6819      	ldr	r1, [r3, #0]
 80102ae:	f002 fcb1 	bl	8012c14 <uxr_buffer_delete_entity>
 80102b2:	6a23      	ldr	r3, [r4, #32]
 80102b4:	6922      	ldr	r2, [r4, #16]
 80102b6:	4680      	mov	r8, r0
 80102b8:	6918      	ldr	r0, [r3, #16]
 80102ba:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80102be:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80102c2:	6819      	ldr	r1, [r3, #0]
 80102c4:	f002 fca6 	bl	8012c14 <uxr_buffer_delete_entity>
 80102c8:	4607      	mov	r7, r0
 80102ca:	6930      	ldr	r0, [r6, #16]
 80102cc:	4642      	mov	r2, r8
 80102ce:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80102d2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80102d6:	f000 fb39 	bl	801094c <run_xrce_session>
 80102da:	4604      	mov	r4, r0
 80102dc:	6930      	ldr	r0, [r6, #16]
 80102de:	463a      	mov	r2, r7
 80102e0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80102e4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80102e8:	f000 fb30 	bl	801094c <run_xrce_session>
 80102ec:	4004      	ands	r4, r0
 80102ee:	f084 0401 	eor.w	r4, r4, #1
 80102f2:	b2e4      	uxtb	r4, r4
 80102f4:	4628      	mov	r0, r5
 80102f6:	0064      	lsls	r4, r4, #1
 80102f8:	f000 f9dc 	bl	80106b4 <rmw_uxrce_fini_subscription_memory>
 80102fc:	e7aa      	b.n	8010254 <rmw_destroy_subscription+0x14>
 80102fe:	bf00      	nop

08010300 <rmw_uxrce_transport_init>:
 8010300:	b508      	push	{r3, lr}
 8010302:	b108      	cbz	r0, 8010308 <rmw_uxrce_transport_init+0x8>
 8010304:	f100 0210 	add.w	r2, r0, #16
 8010308:	b139      	cbz	r1, 801031a <rmw_uxrce_transport_init+0x1a>
 801030a:	6949      	ldr	r1, [r1, #20]
 801030c:	4610      	mov	r0, r2
 801030e:	f002 fe87 	bl	8013020 <uxr_init_custom_transport>
 8010312:	f080 0001 	eor.w	r0, r0, #1
 8010316:	b2c0      	uxtb	r0, r0
 8010318:	bd08      	pop	{r3, pc}
 801031a:	4b04      	ldr	r3, [pc, #16]	@ (801032c <rmw_uxrce_transport_init+0x2c>)
 801031c:	4610      	mov	r0, r2
 801031e:	6859      	ldr	r1, [r3, #4]
 8010320:	f002 fe7e 	bl	8013020 <uxr_init_custom_transport>
 8010324:	f080 0001 	eor.w	r0, r0, #1
 8010328:	b2c0      	uxtb	r0, r0
 801032a:	bd08      	pop	{r3, pc}
 801032c:	2000a300 	.word	0x2000a300

08010330 <rmw_uros_epoch_millis>:
 8010330:	4b05      	ldr	r3, [pc, #20]	@ (8010348 <rmw_uros_epoch_millis+0x18>)
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	b123      	cbz	r3, 8010340 <rmw_uros_epoch_millis+0x10>
 8010336:	6898      	ldr	r0, [r3, #8]
 8010338:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801033c:	f003 b902 	b.w	8013544 <uxr_epoch_millis>
 8010340:	2000      	movs	r0, #0
 8010342:	2100      	movs	r1, #0
 8010344:	4770      	bx	lr
 8010346:	bf00      	nop
 8010348:	2000ef70 	.word	0x2000ef70

0801034c <rmw_uros_epoch_nanos>:
 801034c:	4b05      	ldr	r3, [pc, #20]	@ (8010364 <rmw_uros_epoch_nanos+0x18>)
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	b123      	cbz	r3, 801035c <rmw_uros_epoch_nanos+0x10>
 8010352:	6898      	ldr	r0, [r3, #8]
 8010354:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010358:	f003 b906 	b.w	8013568 <uxr_epoch_nanos>
 801035c:	2000      	movs	r0, #0
 801035e:	2100      	movs	r1, #0
 8010360:	4770      	bx	lr
 8010362:	bf00      	nop
 8010364:	2000ef70 	.word	0x2000ef70

08010368 <rmw_uros_sync_session>:
 8010368:	b508      	push	{r3, lr}
 801036a:	4b07      	ldr	r3, [pc, #28]	@ (8010388 <rmw_uros_sync_session+0x20>)
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	b14b      	cbz	r3, 8010384 <rmw_uros_sync_session+0x1c>
 8010370:	4601      	mov	r1, r0
 8010372:	6898      	ldr	r0, [r3, #8]
 8010374:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010378:	f003 fd12 	bl	8013da0 <uxr_sync_session>
 801037c:	f080 0001 	eor.w	r0, r0, #1
 8010380:	b2c0      	uxtb	r0, r0
 8010382:	bd08      	pop	{r3, pc}
 8010384:	2001      	movs	r0, #1
 8010386:	bd08      	pop	{r3, pc}
 8010388:	2000ef70 	.word	0x2000ef70

0801038c <rmw_uxrce_init_service_memory>:
 801038c:	b1e2      	cbz	r2, 80103c8 <rmw_uxrce_init_service_memory+0x3c>
 801038e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010392:	7b05      	ldrb	r5, [r0, #12]
 8010394:	4606      	mov	r6, r0
 8010396:	b9ad      	cbnz	r5, 80103c4 <rmw_uxrce_init_service_memory+0x38>
 8010398:	23c8      	movs	r3, #200	@ 0xc8
 801039a:	e9c0 5500 	strd	r5, r5, [r0]
 801039e:	6083      	str	r3, [r0, #8]
 80103a0:	f240 1301 	movw	r3, #257	@ 0x101
 80103a4:	4617      	mov	r7, r2
 80103a6:	8183      	strh	r3, [r0, #12]
 80103a8:	460c      	mov	r4, r1
 80103aa:	46a8      	mov	r8, r5
 80103ac:	4621      	mov	r1, r4
 80103ae:	4630      	mov	r0, r6
 80103b0:	3501      	adds	r5, #1
 80103b2:	f009 fe85 	bl	801a0c0 <put_memory>
 80103b6:	42af      	cmp	r7, r5
 80103b8:	60a4      	str	r4, [r4, #8]
 80103ba:	f884 800c 	strb.w	r8, [r4, #12]
 80103be:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 80103c2:	d1f3      	bne.n	80103ac <rmw_uxrce_init_service_memory+0x20>
 80103c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103c8:	4770      	bx	lr
 80103ca:	bf00      	nop

080103cc <rmw_uxrce_init_client_memory>:
 80103cc:	b1e2      	cbz	r2, 8010408 <rmw_uxrce_init_client_memory+0x3c>
 80103ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103d2:	7b05      	ldrb	r5, [r0, #12]
 80103d4:	4606      	mov	r6, r0
 80103d6:	b9ad      	cbnz	r5, 8010404 <rmw_uxrce_init_client_memory+0x38>
 80103d8:	23c8      	movs	r3, #200	@ 0xc8
 80103da:	e9c0 5500 	strd	r5, r5, [r0]
 80103de:	6083      	str	r3, [r0, #8]
 80103e0:	f240 1301 	movw	r3, #257	@ 0x101
 80103e4:	4617      	mov	r7, r2
 80103e6:	8183      	strh	r3, [r0, #12]
 80103e8:	460c      	mov	r4, r1
 80103ea:	46a8      	mov	r8, r5
 80103ec:	4621      	mov	r1, r4
 80103ee:	4630      	mov	r0, r6
 80103f0:	3501      	adds	r5, #1
 80103f2:	f009 fe65 	bl	801a0c0 <put_memory>
 80103f6:	42af      	cmp	r7, r5
 80103f8:	60a4      	str	r4, [r4, #8]
 80103fa:	f884 800c 	strb.w	r8, [r4, #12]
 80103fe:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8010402:	d1f3      	bne.n	80103ec <rmw_uxrce_init_client_memory+0x20>
 8010404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010408:	4770      	bx	lr
 801040a:	bf00      	nop

0801040c <rmw_uxrce_init_publisher_memory>:
 801040c:	b1e2      	cbz	r2, 8010448 <rmw_uxrce_init_publisher_memory+0x3c>
 801040e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010412:	7b05      	ldrb	r5, [r0, #12]
 8010414:	4606      	mov	r6, r0
 8010416:	b9ad      	cbnz	r5, 8010444 <rmw_uxrce_init_publisher_memory+0x38>
 8010418:	23d8      	movs	r3, #216	@ 0xd8
 801041a:	e9c0 5500 	strd	r5, r5, [r0]
 801041e:	6083      	str	r3, [r0, #8]
 8010420:	f240 1301 	movw	r3, #257	@ 0x101
 8010424:	4617      	mov	r7, r2
 8010426:	8183      	strh	r3, [r0, #12]
 8010428:	460c      	mov	r4, r1
 801042a:	46a8      	mov	r8, r5
 801042c:	4621      	mov	r1, r4
 801042e:	4630      	mov	r0, r6
 8010430:	3501      	adds	r5, #1
 8010432:	f009 fe45 	bl	801a0c0 <put_memory>
 8010436:	42af      	cmp	r7, r5
 8010438:	60a4      	str	r4, [r4, #8]
 801043a:	f884 800c 	strb.w	r8, [r4, #12]
 801043e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8010442:	d1f3      	bne.n	801042c <rmw_uxrce_init_publisher_memory+0x20>
 8010444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010448:	4770      	bx	lr
 801044a:	bf00      	nop

0801044c <rmw_uxrce_init_subscription_memory>:
 801044c:	b1e2      	cbz	r2, 8010488 <rmw_uxrce_init_subscription_memory+0x3c>
 801044e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010452:	7b05      	ldrb	r5, [r0, #12]
 8010454:	4606      	mov	r6, r0
 8010456:	b9ad      	cbnz	r5, 8010484 <rmw_uxrce_init_subscription_memory+0x38>
 8010458:	23d8      	movs	r3, #216	@ 0xd8
 801045a:	e9c0 5500 	strd	r5, r5, [r0]
 801045e:	6083      	str	r3, [r0, #8]
 8010460:	f240 1301 	movw	r3, #257	@ 0x101
 8010464:	4617      	mov	r7, r2
 8010466:	8183      	strh	r3, [r0, #12]
 8010468:	460c      	mov	r4, r1
 801046a:	46a8      	mov	r8, r5
 801046c:	4621      	mov	r1, r4
 801046e:	4630      	mov	r0, r6
 8010470:	3501      	adds	r5, #1
 8010472:	f009 fe25 	bl	801a0c0 <put_memory>
 8010476:	42af      	cmp	r7, r5
 8010478:	60a4      	str	r4, [r4, #8]
 801047a:	f884 800c 	strb.w	r8, [r4, #12]
 801047e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8010482:	d1f3      	bne.n	801046c <rmw_uxrce_init_subscription_memory+0x20>
 8010484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010488:	4770      	bx	lr
 801048a:	bf00      	nop

0801048c <rmw_uxrce_init_node_memory>:
 801048c:	b1e2      	cbz	r2, 80104c8 <rmw_uxrce_init_node_memory+0x3c>
 801048e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010492:	7b05      	ldrb	r5, [r0, #12]
 8010494:	4606      	mov	r6, r0
 8010496:	b9ad      	cbnz	r5, 80104c4 <rmw_uxrce_init_node_memory+0x38>
 8010498:	23a4      	movs	r3, #164	@ 0xa4
 801049a:	e9c0 5500 	strd	r5, r5, [r0]
 801049e:	6083      	str	r3, [r0, #8]
 80104a0:	f240 1301 	movw	r3, #257	@ 0x101
 80104a4:	4617      	mov	r7, r2
 80104a6:	8183      	strh	r3, [r0, #12]
 80104a8:	460c      	mov	r4, r1
 80104aa:	46a8      	mov	r8, r5
 80104ac:	4621      	mov	r1, r4
 80104ae:	4630      	mov	r0, r6
 80104b0:	3501      	adds	r5, #1
 80104b2:	f009 fe05 	bl	801a0c0 <put_memory>
 80104b6:	42af      	cmp	r7, r5
 80104b8:	60a4      	str	r4, [r4, #8]
 80104ba:	f884 800c 	strb.w	r8, [r4, #12]
 80104be:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 80104c2:	d1f3      	bne.n	80104ac <rmw_uxrce_init_node_memory+0x20>
 80104c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104c8:	4770      	bx	lr
 80104ca:	bf00      	nop

080104cc <rmw_uxrce_init_session_memory>:
 80104cc:	b1ea      	cbz	r2, 801050a <rmw_uxrce_init_session_memory+0x3e>
 80104ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104d2:	7b05      	ldrb	r5, [r0, #12]
 80104d4:	4606      	mov	r6, r0
 80104d6:	b9b5      	cbnz	r5, 8010506 <rmw_uxrce_init_session_memory+0x3a>
 80104d8:	e9c0 5500 	strd	r5, r5, [r0]
 80104dc:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 80104e0:	f240 1301 	movw	r3, #257	@ 0x101
 80104e4:	4617      	mov	r7, r2
 80104e6:	f8c0 8008 	str.w	r8, [r0, #8]
 80104ea:	460c      	mov	r4, r1
 80104ec:	8183      	strh	r3, [r0, #12]
 80104ee:	46a9      	mov	r9, r5
 80104f0:	4621      	mov	r1, r4
 80104f2:	4630      	mov	r0, r6
 80104f4:	3501      	adds	r5, #1
 80104f6:	f009 fde3 	bl	801a0c0 <put_memory>
 80104fa:	42af      	cmp	r7, r5
 80104fc:	60a4      	str	r4, [r4, #8]
 80104fe:	f884 900c 	strb.w	r9, [r4, #12]
 8010502:	4444      	add	r4, r8
 8010504:	d1f4      	bne.n	80104f0 <rmw_uxrce_init_session_memory+0x24>
 8010506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801050a:	4770      	bx	lr

0801050c <rmw_uxrce_init_topic_memory>:
 801050c:	b1e2      	cbz	r2, 8010548 <rmw_uxrce_init_topic_memory+0x3c>
 801050e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010512:	7b05      	ldrb	r5, [r0, #12]
 8010514:	4606      	mov	r6, r0
 8010516:	b9ad      	cbnz	r5, 8010544 <rmw_uxrce_init_topic_memory+0x38>
 8010518:	231c      	movs	r3, #28
 801051a:	e9c0 5500 	strd	r5, r5, [r0]
 801051e:	6083      	str	r3, [r0, #8]
 8010520:	f240 1301 	movw	r3, #257	@ 0x101
 8010524:	4617      	mov	r7, r2
 8010526:	8183      	strh	r3, [r0, #12]
 8010528:	460c      	mov	r4, r1
 801052a:	46a8      	mov	r8, r5
 801052c:	4621      	mov	r1, r4
 801052e:	4630      	mov	r0, r6
 8010530:	3501      	adds	r5, #1
 8010532:	f009 fdc5 	bl	801a0c0 <put_memory>
 8010536:	42af      	cmp	r7, r5
 8010538:	60a4      	str	r4, [r4, #8]
 801053a:	f884 800c 	strb.w	r8, [r4, #12]
 801053e:	f104 041c 	add.w	r4, r4, #28
 8010542:	d1f3      	bne.n	801052c <rmw_uxrce_init_topic_memory+0x20>
 8010544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010548:	4770      	bx	lr
 801054a:	bf00      	nop

0801054c <rmw_uxrce_init_static_input_buffer_memory>:
 801054c:	b1ea      	cbz	r2, 801058a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 801054e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010552:	7b05      	ldrb	r5, [r0, #12]
 8010554:	4606      	mov	r6, r0
 8010556:	b9b5      	cbnz	r5, 8010586 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8010558:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 801055c:	e9c0 5500 	strd	r5, r5, [r0]
 8010560:	6083      	str	r3, [r0, #8]
 8010562:	f240 1301 	movw	r3, #257	@ 0x101
 8010566:	4617      	mov	r7, r2
 8010568:	8183      	strh	r3, [r0, #12]
 801056a:	460c      	mov	r4, r1
 801056c:	46a8      	mov	r8, r5
 801056e:	4621      	mov	r1, r4
 8010570:	4630      	mov	r0, r6
 8010572:	3501      	adds	r5, #1
 8010574:	f009 fda4 	bl	801a0c0 <put_memory>
 8010578:	42af      	cmp	r7, r5
 801057a:	60a4      	str	r4, [r4, #8]
 801057c:	f884 800c 	strb.w	r8, [r4, #12]
 8010580:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8010584:	d1f3      	bne.n	801056e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8010586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801058a:	4770      	bx	lr

0801058c <rmw_uxrce_init_init_options_impl_memory>:
 801058c:	b1e2      	cbz	r2, 80105c8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 801058e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010592:	7b05      	ldrb	r5, [r0, #12]
 8010594:	4606      	mov	r6, r0
 8010596:	b9ad      	cbnz	r5, 80105c4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8010598:	232c      	movs	r3, #44	@ 0x2c
 801059a:	e9c0 5500 	strd	r5, r5, [r0]
 801059e:	6083      	str	r3, [r0, #8]
 80105a0:	f240 1301 	movw	r3, #257	@ 0x101
 80105a4:	4617      	mov	r7, r2
 80105a6:	8183      	strh	r3, [r0, #12]
 80105a8:	460c      	mov	r4, r1
 80105aa:	46a8      	mov	r8, r5
 80105ac:	4621      	mov	r1, r4
 80105ae:	4630      	mov	r0, r6
 80105b0:	3501      	adds	r5, #1
 80105b2:	f009 fd85 	bl	801a0c0 <put_memory>
 80105b6:	42af      	cmp	r7, r5
 80105b8:	60a4      	str	r4, [r4, #8]
 80105ba:	f884 800c 	strb.w	r8, [r4, #12]
 80105be:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 80105c2:	d1f3      	bne.n	80105ac <rmw_uxrce_init_init_options_impl_memory+0x20>
 80105c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105c8:	4770      	bx	lr
 80105ca:	bf00      	nop

080105cc <rmw_uxrce_init_wait_set_memory>:
 80105cc:	b1e2      	cbz	r2, 8010608 <rmw_uxrce_init_wait_set_memory+0x3c>
 80105ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105d2:	7b05      	ldrb	r5, [r0, #12]
 80105d4:	4606      	mov	r6, r0
 80105d6:	b9ad      	cbnz	r5, 8010604 <rmw_uxrce_init_wait_set_memory+0x38>
 80105d8:	231c      	movs	r3, #28
 80105da:	e9c0 5500 	strd	r5, r5, [r0]
 80105de:	6083      	str	r3, [r0, #8]
 80105e0:	f240 1301 	movw	r3, #257	@ 0x101
 80105e4:	4617      	mov	r7, r2
 80105e6:	8183      	strh	r3, [r0, #12]
 80105e8:	460c      	mov	r4, r1
 80105ea:	46a8      	mov	r8, r5
 80105ec:	4621      	mov	r1, r4
 80105ee:	4630      	mov	r0, r6
 80105f0:	3501      	adds	r5, #1
 80105f2:	f009 fd65 	bl	801a0c0 <put_memory>
 80105f6:	42af      	cmp	r7, r5
 80105f8:	60a4      	str	r4, [r4, #8]
 80105fa:	f884 800c 	strb.w	r8, [r4, #12]
 80105fe:	f104 041c 	add.w	r4, r4, #28
 8010602:	d1f3      	bne.n	80105ec <rmw_uxrce_init_wait_set_memory+0x20>
 8010604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010608:	4770      	bx	lr
 801060a:	bf00      	nop

0801060c <rmw_uxrce_init_guard_condition_memory>:
 801060c:	b1e2      	cbz	r2, 8010648 <rmw_uxrce_init_guard_condition_memory+0x3c>
 801060e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010612:	7b05      	ldrb	r5, [r0, #12]
 8010614:	4606      	mov	r6, r0
 8010616:	b9ad      	cbnz	r5, 8010644 <rmw_uxrce_init_guard_condition_memory+0x38>
 8010618:	2320      	movs	r3, #32
 801061a:	e9c0 5500 	strd	r5, r5, [r0]
 801061e:	6083      	str	r3, [r0, #8]
 8010620:	f240 1301 	movw	r3, #257	@ 0x101
 8010624:	4617      	mov	r7, r2
 8010626:	8183      	strh	r3, [r0, #12]
 8010628:	460c      	mov	r4, r1
 801062a:	46a8      	mov	r8, r5
 801062c:	4621      	mov	r1, r4
 801062e:	4630      	mov	r0, r6
 8010630:	3501      	adds	r5, #1
 8010632:	f009 fd45 	bl	801a0c0 <put_memory>
 8010636:	42af      	cmp	r7, r5
 8010638:	60a4      	str	r4, [r4, #8]
 801063a:	f884 800c 	strb.w	r8, [r4, #12]
 801063e:	f104 0420 	add.w	r4, r4, #32
 8010642:	d1f3      	bne.n	801062c <rmw_uxrce_init_guard_condition_memory+0x20>
 8010644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010648:	4770      	bx	lr
 801064a:	bf00      	nop

0801064c <rmw_uxrce_fini_session_memory>:
 801064c:	4601      	mov	r1, r0
 801064e:	4801      	ldr	r0, [pc, #4]	@ (8010654 <rmw_uxrce_fini_session_memory+0x8>)
 8010650:	f009 bd36 	b.w	801a0c0 <put_memory>
 8010654:	2000ef70 	.word	0x2000ef70

08010658 <rmw_uxrce_fini_node_memory>:
 8010658:	b538      	push	{r3, r4, r5, lr}
 801065a:	4604      	mov	r4, r0
 801065c:	6800      	ldr	r0, [r0, #0]
 801065e:	b128      	cbz	r0, 801066c <rmw_uxrce_fini_node_memory+0x14>
 8010660:	4b07      	ldr	r3, [pc, #28]	@ (8010680 <rmw_uxrce_fini_node_memory+0x28>)
 8010662:	6819      	ldr	r1, [r3, #0]
 8010664:	f7ef fddc 	bl	8000220 <strcmp>
 8010668:	b940      	cbnz	r0, 801067c <rmw_uxrce_fini_node_memory+0x24>
 801066a:	6020      	str	r0, [r4, #0]
 801066c:	6861      	ldr	r1, [r4, #4]
 801066e:	b129      	cbz	r1, 801067c <rmw_uxrce_fini_node_memory+0x24>
 8010670:	2500      	movs	r5, #0
 8010672:	4804      	ldr	r0, [pc, #16]	@ (8010684 <rmw_uxrce_fini_node_memory+0x2c>)
 8010674:	610d      	str	r5, [r1, #16]
 8010676:	f009 fd23 	bl	801a0c0 <put_memory>
 801067a:	6065      	str	r5, [r4, #4]
 801067c:	bd38      	pop	{r3, r4, r5, pc}
 801067e:	bf00      	nop
 8010680:	08021a10 	.word	0x08021a10
 8010684:	2000d9b4 	.word	0x2000d9b4

08010688 <rmw_uxrce_fini_publisher_memory>:
 8010688:	b510      	push	{r4, lr}
 801068a:	4604      	mov	r4, r0
 801068c:	6800      	ldr	r0, [r0, #0]
 801068e:	b128      	cbz	r0, 801069c <rmw_uxrce_fini_publisher_memory+0x14>
 8010690:	4b06      	ldr	r3, [pc, #24]	@ (80106ac <rmw_uxrce_fini_publisher_memory+0x24>)
 8010692:	6819      	ldr	r1, [r3, #0]
 8010694:	f7ef fdc4 	bl	8000220 <strcmp>
 8010698:	b938      	cbnz	r0, 80106aa <rmw_uxrce_fini_publisher_memory+0x22>
 801069a:	6020      	str	r0, [r4, #0]
 801069c:	6861      	ldr	r1, [r4, #4]
 801069e:	b121      	cbz	r1, 80106aa <rmw_uxrce_fini_publisher_memory+0x22>
 80106a0:	4803      	ldr	r0, [pc, #12]	@ (80106b0 <rmw_uxrce_fini_publisher_memory+0x28>)
 80106a2:	f009 fd0d 	bl	801a0c0 <put_memory>
 80106a6:	2300      	movs	r3, #0
 80106a8:	6063      	str	r3, [r4, #4]
 80106aa:	bd10      	pop	{r4, pc}
 80106ac:	08021a10 	.word	0x08021a10
 80106b0:	2000d900 	.word	0x2000d900

080106b4 <rmw_uxrce_fini_subscription_memory>:
 80106b4:	b510      	push	{r4, lr}
 80106b6:	4604      	mov	r4, r0
 80106b8:	6800      	ldr	r0, [r0, #0]
 80106ba:	b128      	cbz	r0, 80106c8 <rmw_uxrce_fini_subscription_memory+0x14>
 80106bc:	4b06      	ldr	r3, [pc, #24]	@ (80106d8 <rmw_uxrce_fini_subscription_memory+0x24>)
 80106be:	6819      	ldr	r1, [r3, #0]
 80106c0:	f7ef fdae 	bl	8000220 <strcmp>
 80106c4:	b938      	cbnz	r0, 80106d6 <rmw_uxrce_fini_subscription_memory+0x22>
 80106c6:	6020      	str	r0, [r4, #0]
 80106c8:	6861      	ldr	r1, [r4, #4]
 80106ca:	b121      	cbz	r1, 80106d6 <rmw_uxrce_fini_subscription_memory+0x22>
 80106cc:	4803      	ldr	r0, [pc, #12]	@ (80106dc <rmw_uxrce_fini_subscription_memory+0x28>)
 80106ce:	f009 fcf7 	bl	801a0c0 <put_memory>
 80106d2:	2300      	movs	r3, #0
 80106d4:	6063      	str	r3, [r4, #4]
 80106d6:	bd10      	pop	{r4, pc}
 80106d8:	08021a10 	.word	0x08021a10
 80106dc:	2000d080 	.word	0x2000d080

080106e0 <rmw_uxrce_fini_service_memory>:
 80106e0:	b510      	push	{r4, lr}
 80106e2:	4604      	mov	r4, r0
 80106e4:	6800      	ldr	r0, [r0, #0]
 80106e6:	b128      	cbz	r0, 80106f4 <rmw_uxrce_fini_service_memory+0x14>
 80106e8:	4b06      	ldr	r3, [pc, #24]	@ (8010704 <rmw_uxrce_fini_service_memory+0x24>)
 80106ea:	6819      	ldr	r1, [r3, #0]
 80106ec:	f7ef fd98 	bl	8000220 <strcmp>
 80106f0:	b938      	cbnz	r0, 8010702 <rmw_uxrce_fini_service_memory+0x22>
 80106f2:	6020      	str	r0, [r4, #0]
 80106f4:	6861      	ldr	r1, [r4, #4]
 80106f6:	b121      	cbz	r1, 8010702 <rmw_uxrce_fini_service_memory+0x22>
 80106f8:	4803      	ldr	r0, [pc, #12]	@ (8010708 <rmw_uxrce_fini_service_memory+0x28>)
 80106fa:	f009 fce1 	bl	801a0c0 <put_memory>
 80106fe:	2300      	movs	r3, #0
 8010700:	6063      	str	r3, [r4, #4]
 8010702:	bd10      	pop	{r4, pc}
 8010704:	08021a10 	.word	0x08021a10
 8010708:	2000cc38 	.word	0x2000cc38

0801070c <rmw_uxrce_fini_client_memory>:
 801070c:	b510      	push	{r4, lr}
 801070e:	4604      	mov	r4, r0
 8010710:	6800      	ldr	r0, [r0, #0]
 8010712:	b128      	cbz	r0, 8010720 <rmw_uxrce_fini_client_memory+0x14>
 8010714:	4b06      	ldr	r3, [pc, #24]	@ (8010730 <rmw_uxrce_fini_client_memory+0x24>)
 8010716:	6819      	ldr	r1, [r3, #0]
 8010718:	f7ef fd82 	bl	8000220 <strcmp>
 801071c:	b938      	cbnz	r0, 801072e <rmw_uxrce_fini_client_memory+0x22>
 801071e:	6020      	str	r0, [r4, #0]
 8010720:	6861      	ldr	r1, [r4, #4]
 8010722:	b121      	cbz	r1, 801072e <rmw_uxrce_fini_client_memory+0x22>
 8010724:	4803      	ldr	r0, [pc, #12]	@ (8010734 <rmw_uxrce_fini_client_memory+0x28>)
 8010726:	f009 fccb 	bl	801a0c0 <put_memory>
 801072a:	2300      	movs	r3, #0
 801072c:	6063      	str	r3, [r4, #4]
 801072e:	bd10      	pop	{r4, pc}
 8010730:	08021a10 	.word	0x08021a10
 8010734:	2000ca98 	.word	0x2000ca98

08010738 <rmw_uxrce_fini_topic_memory>:
 8010738:	b510      	push	{r4, lr}
 801073a:	4604      	mov	r4, r0
 801073c:	4621      	mov	r1, r4
 801073e:	4803      	ldr	r0, [pc, #12]	@ (801074c <rmw_uxrce_fini_topic_memory+0x14>)
 8010740:	f009 fcbe 	bl	801a0c0 <put_memory>
 8010744:	2300      	movs	r3, #0
 8010746:	61a3      	str	r3, [r4, #24]
 8010748:	bd10      	pop	{r4, pc}
 801074a:	bf00      	nop
 801074c:	2000c8f4 	.word	0x2000c8f4

08010750 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8010750:	b082      	sub	sp, #8
 8010752:	b530      	push	{r4, r5, lr}
 8010754:	4929      	ldr	r1, [pc, #164]	@ (80107fc <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 8010756:	ac03      	add	r4, sp, #12
 8010758:	e884 000c 	stmia.w	r4, {r2, r3}
 801075c:	680c      	ldr	r4, [r1, #0]
 801075e:	461d      	mov	r5, r3
 8010760:	4602      	mov	r2, r0
 8010762:	2c00      	cmp	r4, #0
 8010764:	d043      	beq.n	80107ee <rmw_uxrce_get_static_input_buffer_for_entity+0x9e>
 8010766:	4620      	mov	r0, r4
 8010768:	2100      	movs	r1, #0
 801076a:	6883      	ldr	r3, [r0, #8]
 801076c:	6840      	ldr	r0, [r0, #4]
 801076e:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 8010772:	429a      	cmp	r2, r3
 8010774:	bf08      	it	eq
 8010776:	3101      	addeq	r1, #1
 8010778:	2800      	cmp	r0, #0
 801077a:	d1f6      	bne.n	801076a <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 801077c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8010780:	2b02      	cmp	r3, #2
 8010782:	d027      	beq.n	80107d4 <rmw_uxrce_get_static_input_buffer_for_entity+0x84>
 8010784:	d906      	bls.n	8010794 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8010786:	2b03      	cmp	r3, #3
 8010788:	d004      	beq.n	8010794 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 801078a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801078e:	2000      	movs	r0, #0
 8010790:	b002      	add	sp, #8
 8010792:	4770      	bx	lr
 8010794:	b1fd      	cbz	r5, 80107d6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8010796:	428d      	cmp	r5, r1
 8010798:	d81d      	bhi.n	80107d6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 801079a:	2c00      	cmp	r4, #0
 801079c:	d0f5      	beq.n	801078a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 801079e:	2000      	movs	r0, #0
 80107a0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80107a4:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 80107a8:	e001      	b.n	80107ae <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 80107aa:	6864      	ldr	r4, [r4, #4]
 80107ac:	b1dc      	cbz	r4, 80107e6 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 80107ae:	68a3      	ldr	r3, [r4, #8]
 80107b0:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 80107b4:	428a      	cmp	r2, r1
 80107b6:	d1f8      	bne.n	80107aa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 80107b8:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 80107bc:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 80107c0:	4561      	cmp	r1, ip
 80107c2:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80107c6:	eb73 0e05 	sbcs.w	lr, r3, r5
 80107ca:	daee      	bge.n	80107aa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 80107cc:	468c      	mov	ip, r1
 80107ce:	461d      	mov	r5, r3
 80107d0:	4620      	mov	r0, r4
 80107d2:	e7ea      	b.n	80107aa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 80107d4:	b92d      	cbnz	r5, 80107e2 <rmw_uxrce_get_static_input_buffer_for_entity+0x92>
 80107d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80107da:	4808      	ldr	r0, [pc, #32]	@ (80107fc <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 80107dc:	b002      	add	sp, #8
 80107de:	f009 bc5f 	b.w	801a0a0 <get_memory>
 80107e2:	428d      	cmp	r5, r1
 80107e4:	d8f7      	bhi.n	80107d6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80107e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80107ea:	b002      	add	sp, #8
 80107ec:	4770      	bx	lr
 80107ee:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80107f2:	2b02      	cmp	r3, #2
 80107f4:	d0ef      	beq.n	80107d6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80107f6:	d9ee      	bls.n	80107d6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80107f8:	4621      	mov	r1, r4
 80107fa:	e7c4      	b.n	8010786 <rmw_uxrce_get_static_input_buffer_for_entity+0x36>
 80107fc:	2000c740 	.word	0x2000c740

08010800 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8010800:	4b11      	ldr	r3, [pc, #68]	@ (8010848 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	b1eb      	cbz	r3, 8010842 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8010806:	b530      	push	{r4, r5, lr}
 8010808:	4684      	mov	ip, r0
 801080a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801080e:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 8010812:	2000      	movs	r0, #0
 8010814:	e001      	b.n	801081a <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 8010816:	685b      	ldr	r3, [r3, #4]
 8010818:	b193      	cbz	r3, 8010840 <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 801081a:	689a      	ldr	r2, [r3, #8]
 801081c:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8010820:	458c      	cmp	ip, r1
 8010822:	d1f8      	bne.n	8010816 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 8010824:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8010828:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 801082c:	42a1      	cmp	r1, r4
 801082e:	eb72 050e 	sbcs.w	r5, r2, lr
 8010832:	daf0      	bge.n	8010816 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 8010834:	4618      	mov	r0, r3
 8010836:	685b      	ldr	r3, [r3, #4]
 8010838:	460c      	mov	r4, r1
 801083a:	4696      	mov	lr, r2
 801083c:	2b00      	cmp	r3, #0
 801083e:	d1ec      	bne.n	801081a <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 8010840:	bd30      	pop	{r4, r5, pc}
 8010842:	4618      	mov	r0, r3
 8010844:	4770      	bx	lr
 8010846:	bf00      	nop
 8010848:	2000c740 	.word	0x2000c740
 801084c:	00000000 	.word	0x00000000

08010850 <rmw_uxrce_clean_expired_static_input_buffer>:
 8010850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010854:	4b3c      	ldr	r3, [pc, #240]	@ (8010948 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8010856:	ed2d 8b06 	vpush	{d8-d10}
 801085a:	f8d3 8000 	ldr.w	r8, [r3]
 801085e:	b08d      	sub	sp, #52	@ 0x34
 8010860:	f7ff fd74 	bl	801034c <rmw_uros_epoch_nanos>
 8010864:	f1b8 0f00 	cmp.w	r8, #0
 8010868:	d05c      	beq.n	8010924 <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 801086a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801086e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8010872:	2b04      	cmp	r3, #4
 8010874:	ed9f 8b2e 	vldr	d8, [pc, #184]	@ 8010930 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8010878:	ed9f ab2f 	vldr	d10, [pc, #188]	@ 8010938 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 801087c:	ed9f 9b30 	vldr	d9, [pc, #192]	@ 8010940 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8010880:	4683      	mov	fp, r0
 8010882:	ac04      	add	r4, sp, #16
 8010884:	468a      	mov	sl, r1
 8010886:	d03f      	beq.n	8010908 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 8010888:	2b05      	cmp	r3, #5
 801088a:	d044      	beq.n	8010916 <rmw_uxrce_clean_expired_static_input_buffer+0xc6>
 801088c:	2b03      	cmp	r3, #3
 801088e:	d03b      	beq.n	8010908 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 8010890:	ed8d 8b04 	vstr	d8, [sp, #16]
 8010894:	ed8d ab06 	vstr	d10, [sp, #24]
 8010898:	ed8d 8b08 	vstr	d8, [sp, #32]
 801089c:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 80108a0:	ab08      	add	r3, sp, #32
 80108a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80108a4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80108a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80108ac:	f009 f954 	bl	8019b58 <rmw_time_equal>
 80108b0:	b118      	cbz	r0, 80108ba <rmw_uxrce_clean_expired_static_input_buffer+0x6a>
 80108b2:	ed8d 9b04 	vstr	d9, [sp, #16]
 80108b6:	ed8d 8b06 	vstr	d8, [sp, #24]
 80108ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80108be:	f8d5 7818 	ldr.w	r7, [r5, #2072]	@ 0x818
 80108c2:	f8d5 681c 	ldr.w	r6, [r5, #2076]	@ 0x81c
 80108c6:	f8d8 9004 	ldr.w	r9, [r8, #4]
 80108ca:	f009 f999 	bl	8019c00 <rmw_time_total_nsec>
 80108ce:	183f      	adds	r7, r7, r0
 80108d0:	eb46 0601 	adc.w	r6, r6, r1
 80108d4:	455f      	cmp	r7, fp
 80108d6:	eb76 060a 	sbcs.w	r6, r6, sl
 80108da:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 80108de:	db05      	blt.n	80108ec <rmw_uxrce_clean_expired_static_input_buffer+0x9c>
 80108e0:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 80108e4:	4593      	cmp	fp, r2
 80108e6:	eb7a 0303 	sbcs.w	r3, sl, r3
 80108ea:	da03      	bge.n	80108f4 <rmw_uxrce_clean_expired_static_input_buffer+0xa4>
 80108ec:	4816      	ldr	r0, [pc, #88]	@ (8010948 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80108ee:	4641      	mov	r1, r8
 80108f0:	f009 fbe6 	bl	801a0c0 <put_memory>
 80108f4:	f1b9 0f00 	cmp.w	r9, #0
 80108f8:	d014      	beq.n	8010924 <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 80108fa:	46c8      	mov	r8, r9
 80108fc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8010900:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8010904:	2b04      	cmp	r3, #4
 8010906:	d1bf      	bne.n	8010888 <rmw_uxrce_clean_expired_static_input_buffer+0x38>
 8010908:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 801090c:	3340      	adds	r3, #64	@ 0x40
 801090e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010910:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010914:	e7c0      	b.n	8010898 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 8010916:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 801091a:	3348      	adds	r3, #72	@ 0x48
 801091c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801091e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010922:	e7b9      	b.n	8010898 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 8010924:	b00d      	add	sp, #52	@ 0x34
 8010926:	ecbd 8b06 	vpop	{d8-d10}
 801092a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801092e:	bf00      	nop
	...
 8010938:	00000001 	.word	0x00000001
 801093c:	00000000 	.word	0x00000000
 8010940:	0000001e 	.word	0x0000001e
 8010944:	00000000 	.word	0x00000000
 8010948:	2000c740 	.word	0x2000c740

0801094c <run_xrce_session>:
 801094c:	b500      	push	{lr}
 801094e:	f891 c002 	ldrb.w	ip, [r1, #2]
 8010952:	b087      	sub	sp, #28
 8010954:	f1bc 0f01 	cmp.w	ip, #1
 8010958:	f8ad 200e 	strh.w	r2, [sp, #14]
 801095c:	d00f      	beq.n	801097e <run_xrce_session+0x32>
 801095e:	4619      	mov	r1, r3
 8010960:	2301      	movs	r3, #1
 8010962:	9300      	str	r3, [sp, #0]
 8010964:	f10d 020e 	add.w	r2, sp, #14
 8010968:	f10d 0317 	add.w	r3, sp, #23
 801096c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010970:	f003 f9c2 	bl	8013cf8 <uxr_run_session_until_all_status>
 8010974:	b100      	cbz	r0, 8010978 <run_xrce_session+0x2c>
 8010976:	2001      	movs	r0, #1
 8010978:	b007      	add	sp, #28
 801097a:	f85d fb04 	ldr.w	pc, [sp], #4
 801097e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010982:	f002 fdfb 	bl	801357c <uxr_flash_output_streams>
 8010986:	2001      	movs	r0, #1
 8010988:	e7f6      	b.n	8010978 <run_xrce_session+0x2c>
 801098a:	bf00      	nop

0801098c <convert_qos_profile>:
 801098c:	780a      	ldrb	r2, [r1, #0]
 801098e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8010992:	f1a2 0202 	sub.w	r2, r2, #2
 8010996:	fab2 f282 	clz	r2, r2
 801099a:	0952      	lsrs	r2, r2, #5
 801099c:	7082      	strb	r2, [r0, #2]
 801099e:	7a4a      	ldrb	r2, [r1, #9]
 80109a0:	8889      	ldrh	r1, [r1, #4]
 80109a2:	8081      	strh	r1, [r0, #4]
 80109a4:	f1a2 0202 	sub.w	r2, r2, #2
 80109a8:	f1ac 0c02 	sub.w	ip, ip, #2
 80109ac:	fab2 f282 	clz	r2, r2
 80109b0:	fabc fc8c 	clz	ip, ip
 80109b4:	0952      	lsrs	r2, r2, #5
 80109b6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80109ba:	0052      	lsls	r2, r2, #1
 80109bc:	f880 c001 	strb.w	ip, [r0, #1]
 80109c0:	7002      	strb	r2, [r0, #0]
 80109c2:	4770      	bx	lr

080109c4 <generate_service_topics>:
 80109c4:	b570      	push	{r4, r5, r6, lr}
 80109c6:	b082      	sub	sp, #8
 80109c8:	461c      	mov	r4, r3
 80109ca:	4e12      	ldr	r6, [pc, #72]	@ (8010a14 <generate_service_topics+0x50>)
 80109cc:	4b12      	ldr	r3, [pc, #72]	@ (8010a18 <generate_service_topics+0x54>)
 80109ce:	9601      	str	r6, [sp, #4]
 80109d0:	4605      	mov	r5, r0
 80109d2:	9000      	str	r0, [sp, #0]
 80109d4:	4616      	mov	r6, r2
 80109d6:	4608      	mov	r0, r1
 80109d8:	4a10      	ldr	r2, [pc, #64]	@ (8010a1c <generate_service_topics+0x58>)
 80109da:	4621      	mov	r1, r4
 80109dc:	f00c ff3e 	bl	801d85c <sniprintf>
 80109e0:	4b0f      	ldr	r3, [pc, #60]	@ (8010a20 <generate_service_topics+0x5c>)
 80109e2:	9301      	str	r3, [sp, #4]
 80109e4:	4601      	mov	r1, r0
 80109e6:	9500      	str	r5, [sp, #0]
 80109e8:	4b0e      	ldr	r3, [pc, #56]	@ (8010a24 <generate_service_topics+0x60>)
 80109ea:	4a0c      	ldr	r2, [pc, #48]	@ (8010a1c <generate_service_topics+0x58>)
 80109ec:	460d      	mov	r5, r1
 80109ee:	4630      	mov	r0, r6
 80109f0:	4621      	mov	r1, r4
 80109f2:	f00c ff33 	bl	801d85c <sniprintf>
 80109f6:	2d00      	cmp	r5, #0
 80109f8:	db01      	blt.n	80109fe <generate_service_topics+0x3a>
 80109fa:	42ac      	cmp	r4, r5
 80109fc:	dc02      	bgt.n	8010a04 <generate_service_topics+0x40>
 80109fe:	2000      	movs	r0, #0
 8010a00:	b002      	add	sp, #8
 8010a02:	bd70      	pop	{r4, r5, r6, pc}
 8010a04:	2800      	cmp	r0, #0
 8010a06:	dbfa      	blt.n	80109fe <generate_service_topics+0x3a>
 8010a08:	4284      	cmp	r4, r0
 8010a0a:	bfd4      	ite	le
 8010a0c:	2000      	movle	r0, #0
 8010a0e:	2001      	movgt	r0, #1
 8010a10:	b002      	add	sp, #8
 8010a12:	bd70      	pop	{r4, r5, r6, pc}
 8010a14:	0802068c 	.word	0x0802068c
 8010a18:	08020698 	.word	0x08020698
 8010a1c:	0802066c 	.word	0x0802066c
 8010a20:	08020684 	.word	0x08020684
 8010a24:	08020694 	.word	0x08020694

08010a28 <generate_service_types>:
 8010a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a2c:	4605      	mov	r5, r0
 8010a2e:	b086      	sub	sp, #24
 8010a30:	6880      	ldr	r0, [r0, #8]
 8010a32:	460c      	mov	r4, r1
 8010a34:	4617      	mov	r7, r2
 8010a36:	461e      	mov	r6, r3
 8010a38:	4780      	blx	r0
 8010a3a:	68eb      	ldr	r3, [r5, #12]
 8010a3c:	4680      	mov	r8, r0
 8010a3e:	4798      	blx	r3
 8010a40:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8010a44:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8010a48:	2300      	movs	r3, #0
 8010a4a:	7023      	strb	r3, [r4, #0]
 8010a4c:	6813      	ldr	r3, [r2, #0]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d043      	beq.n	8010ada <generate_service_types+0xb2>
 8010a52:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8010aec <generate_service_types+0xc4>
 8010a56:	4641      	mov	r1, r8
 8010a58:	4620      	mov	r0, r4
 8010a5a:	4c22      	ldr	r4, [pc, #136]	@ (8010ae4 <generate_service_types+0xbc>)
 8010a5c:	9405      	str	r4, [sp, #20]
 8010a5e:	6852      	ldr	r2, [r2, #4]
 8010a60:	f8df a090 	ldr.w	sl, [pc, #144]	@ 8010af4 <generate_service_types+0xcc>
 8010a64:	9204      	str	r2, [sp, #16]
 8010a66:	9100      	str	r1, [sp, #0]
 8010a68:	e9cd 4802 	strd	r4, r8, [sp, #8]
 8010a6c:	4a1e      	ldr	r2, [pc, #120]	@ (8010ae8 <generate_service_types+0xc0>)
 8010a6e:	f8cd a004 	str.w	sl, [sp, #4]
 8010a72:	4631      	mov	r1, r6
 8010a74:	f00c fef2 	bl	801d85c <sniprintf>
 8010a78:	2800      	cmp	r0, #0
 8010a7a:	db20      	blt.n	8010abe <generate_service_types+0x96>
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	703b      	strb	r3, [r7, #0]
 8010a80:	f8d9 3000 	ldr.w	r3, [r9]
 8010a84:	42b0      	cmp	r0, r6
 8010a86:	bfac      	ite	ge
 8010a88:	2500      	movge	r5, #0
 8010a8a:	2501      	movlt	r5, #1
 8010a8c:	b1f3      	cbz	r3, 8010acc <generate_service_types+0xa4>
 8010a8e:	4a17      	ldr	r2, [pc, #92]	@ (8010aec <generate_service_types+0xc4>)
 8010a90:	9405      	str	r4, [sp, #20]
 8010a92:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010a96:	9200      	str	r2, [sp, #0]
 8010a98:	e9cd 8103 	strd	r8, r1, [sp, #12]
 8010a9c:	4a12      	ldr	r2, [pc, #72]	@ (8010ae8 <generate_service_types+0xc0>)
 8010a9e:	e9cd a401 	strd	sl, r4, [sp, #4]
 8010aa2:	4638      	mov	r0, r7
 8010aa4:	4631      	mov	r1, r6
 8010aa6:	f00c fed9 	bl	801d85c <sniprintf>
 8010aaa:	1e02      	subs	r2, r0, #0
 8010aac:	db11      	blt.n	8010ad2 <generate_service_types+0xaa>
 8010aae:	42b2      	cmp	r2, r6
 8010ab0:	bfac      	ite	ge
 8010ab2:	2000      	movge	r0, #0
 8010ab4:	f005 0001 	andlt.w	r0, r5, #1
 8010ab8:	b006      	add	sp, #24
 8010aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010abe:	2300      	movs	r3, #0
 8010ac0:	703b      	strb	r3, [r7, #0]
 8010ac2:	f8d9 3000 	ldr.w	r3, [r9]
 8010ac6:	2500      	movs	r5, #0
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d1e0      	bne.n	8010a8e <generate_service_types+0x66>
 8010acc:	4b08      	ldr	r3, [pc, #32]	@ (8010af0 <generate_service_types+0xc8>)
 8010ace:	461a      	mov	r2, r3
 8010ad0:	e7de      	b.n	8010a90 <generate_service_types+0x68>
 8010ad2:	2000      	movs	r0, #0
 8010ad4:	b006      	add	sp, #24
 8010ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ada:	4b05      	ldr	r3, [pc, #20]	@ (8010af0 <generate_service_types+0xc8>)
 8010adc:	f8df 800c 	ldr.w	r8, [pc, #12]	@ 8010aec <generate_service_types+0xc4>
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	e7b9      	b.n	8010a58 <generate_service_types+0x30>
 8010ae4:	08020674 	.word	0x08020674
 8010ae8:	08020664 	.word	0x08020664
 8010aec:	08020660 	.word	0x08020660
 8010af0:	080206ec 	.word	0x080206ec
 8010af4:	08020678 	.word	0x08020678

08010af8 <generate_type_name>:
 8010af8:	b530      	push	{r4, r5, lr}
 8010afa:	2300      	movs	r3, #0
 8010afc:	700b      	strb	r3, [r1, #0]
 8010afe:	6803      	ldr	r3, [r0, #0]
 8010b00:	b087      	sub	sp, #28
 8010b02:	4614      	mov	r4, r2
 8010b04:	b1d3      	cbz	r3, 8010b3c <generate_type_name+0x44>
 8010b06:	4a0f      	ldr	r2, [pc, #60]	@ (8010b44 <generate_type_name+0x4c>)
 8010b08:	4615      	mov	r5, r2
 8010b0a:	9203      	str	r2, [sp, #12]
 8010b0c:	9500      	str	r5, [sp, #0]
 8010b0e:	6842      	ldr	r2, [r0, #4]
 8010b10:	480d      	ldr	r0, [pc, #52]	@ (8010b48 <generate_type_name+0x50>)
 8010b12:	9001      	str	r0, [sp, #4]
 8010b14:	4608      	mov	r0, r1
 8010b16:	490d      	ldr	r1, [pc, #52]	@ (8010b4c <generate_type_name+0x54>)
 8010b18:	9204      	str	r2, [sp, #16]
 8010b1a:	9105      	str	r1, [sp, #20]
 8010b1c:	9102      	str	r1, [sp, #8]
 8010b1e:	4a0c      	ldr	r2, [pc, #48]	@ (8010b50 <generate_type_name+0x58>)
 8010b20:	4621      	mov	r1, r4
 8010b22:	f00c fe9b 	bl	801d85c <sniprintf>
 8010b26:	2800      	cmp	r0, #0
 8010b28:	db05      	blt.n	8010b36 <generate_type_name+0x3e>
 8010b2a:	4284      	cmp	r4, r0
 8010b2c:	bfd4      	ite	le
 8010b2e:	2000      	movle	r0, #0
 8010b30:	2001      	movgt	r0, #1
 8010b32:	b007      	add	sp, #28
 8010b34:	bd30      	pop	{r4, r5, pc}
 8010b36:	2000      	movs	r0, #0
 8010b38:	b007      	add	sp, #28
 8010b3a:	bd30      	pop	{r4, r5, pc}
 8010b3c:	4b05      	ldr	r3, [pc, #20]	@ (8010b54 <generate_type_name+0x5c>)
 8010b3e:	4a01      	ldr	r2, [pc, #4]	@ (8010b44 <generate_type_name+0x4c>)
 8010b40:	461d      	mov	r5, r3
 8010b42:	e7e2      	b.n	8010b0a <generate_type_name+0x12>
 8010b44:	08020660 	.word	0x08020660
 8010b48:	08020678 	.word	0x08020678
 8010b4c:	08020674 	.word	0x08020674
 8010b50:	08020664 	.word	0x08020664
 8010b54:	080206ec 	.word	0x080206ec

08010b58 <generate_topic_name>:
 8010b58:	b510      	push	{r4, lr}
 8010b5a:	b082      	sub	sp, #8
 8010b5c:	4614      	mov	r4, r2
 8010b5e:	9000      	str	r0, [sp, #0]
 8010b60:	4b08      	ldr	r3, [pc, #32]	@ (8010b84 <generate_topic_name+0x2c>)
 8010b62:	4a09      	ldr	r2, [pc, #36]	@ (8010b88 <generate_topic_name+0x30>)
 8010b64:	4608      	mov	r0, r1
 8010b66:	4621      	mov	r1, r4
 8010b68:	f00c fe78 	bl	801d85c <sniprintf>
 8010b6c:	2800      	cmp	r0, #0
 8010b6e:	db05      	blt.n	8010b7c <generate_topic_name+0x24>
 8010b70:	4284      	cmp	r4, r0
 8010b72:	bfd4      	ite	le
 8010b74:	2000      	movle	r0, #0
 8010b76:	2001      	movgt	r0, #1
 8010b78:	b002      	add	sp, #8
 8010b7a:	bd10      	pop	{r4, pc}
 8010b7c:	2000      	movs	r0, #0
 8010b7e:	b002      	add	sp, #8
 8010b80:	bd10      	pop	{r4, pc}
 8010b82:	bf00      	nop
 8010b84:	0802069c 	.word	0x0802069c
 8010b88:	0802067c 	.word	0x0802067c

08010b8c <is_uxrce_rmw_identifier_valid>:
 8010b8c:	b510      	push	{r4, lr}
 8010b8e:	4604      	mov	r4, r0
 8010b90:	b140      	cbz	r0, 8010ba4 <is_uxrce_rmw_identifier_valid+0x18>
 8010b92:	f009 fb0b 	bl	801a1ac <rmw_get_implementation_identifier>
 8010b96:	4601      	mov	r1, r0
 8010b98:	4620      	mov	r0, r4
 8010b9a:	f7ef fb41 	bl	8000220 <strcmp>
 8010b9e:	fab0 f080 	clz	r0, r0
 8010ba2:	0940      	lsrs	r0, r0, #5
 8010ba4:	bd10      	pop	{r4, pc}
 8010ba6:	bf00      	nop

08010ba8 <get_message_typesupport_handle>:
 8010ba8:	6883      	ldr	r3, [r0, #8]
 8010baa:	4718      	bx	r3

08010bac <get_message_typesupport_handle_function>:
 8010bac:	b510      	push	{r4, lr}
 8010bae:	4604      	mov	r4, r0
 8010bb0:	6800      	ldr	r0, [r0, #0]
 8010bb2:	f7ef fb35 	bl	8000220 <strcmp>
 8010bb6:	2800      	cmp	r0, #0
 8010bb8:	bf0c      	ite	eq
 8010bba:	4620      	moveq	r0, r4
 8010bbc:	2000      	movne	r0, #0
 8010bbe:	bd10      	pop	{r4, pc}

08010bc0 <get_service_typesupport_handle>:
 8010bc0:	6883      	ldr	r3, [r0, #8]
 8010bc2:	4718      	bx	r3

08010bc4 <get_service_typesupport_handle_function>:
 8010bc4:	b510      	push	{r4, lr}
 8010bc6:	4604      	mov	r4, r0
 8010bc8:	6800      	ldr	r0, [r0, #0]
 8010bca:	f7ef fb29 	bl	8000220 <strcmp>
 8010bce:	2800      	cmp	r0, #0
 8010bd0:	bf0c      	ite	eq
 8010bd2:	4620      	moveq	r0, r4
 8010bd4:	2000      	movne	r0, #0
 8010bd6:	bd10      	pop	{r4, pc}

08010bd8 <rosidl_runtime_c__String__init>:
 8010bd8:	b1b0      	cbz	r0, 8010c08 <rosidl_runtime_c__String__init+0x30>
 8010bda:	b510      	push	{r4, lr}
 8010bdc:	b086      	sub	sp, #24
 8010bde:	4604      	mov	r4, r0
 8010be0:	a801      	add	r0, sp, #4
 8010be2:	f7fe fc07 	bl	800f3f4 <rcutils_get_default_allocator>
 8010be6:	9b01      	ldr	r3, [sp, #4]
 8010be8:	9905      	ldr	r1, [sp, #20]
 8010bea:	2001      	movs	r0, #1
 8010bec:	4798      	blx	r3
 8010bee:	6020      	str	r0, [r4, #0]
 8010bf0:	b138      	cbz	r0, 8010c02 <rosidl_runtime_c__String__init+0x2a>
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	2301      	movs	r3, #1
 8010bf6:	7002      	strb	r2, [r0, #0]
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	e9c4 2301 	strd	r2, r3, [r4, #4]
 8010bfe:	b006      	add	sp, #24
 8010c00:	bd10      	pop	{r4, pc}
 8010c02:	2000      	movs	r0, #0
 8010c04:	b006      	add	sp, #24
 8010c06:	bd10      	pop	{r4, pc}
 8010c08:	2000      	movs	r0, #0
 8010c0a:	4770      	bx	lr

08010c0c <rosidl_runtime_c__String__fini>:
 8010c0c:	b320      	cbz	r0, 8010c58 <rosidl_runtime_c__String__fini+0x4c>
 8010c0e:	b510      	push	{r4, lr}
 8010c10:	6803      	ldr	r3, [r0, #0]
 8010c12:	b086      	sub	sp, #24
 8010c14:	4604      	mov	r4, r0
 8010c16:	b173      	cbz	r3, 8010c36 <rosidl_runtime_c__String__fini+0x2a>
 8010c18:	6883      	ldr	r3, [r0, #8]
 8010c1a:	b1f3      	cbz	r3, 8010c5a <rosidl_runtime_c__String__fini+0x4e>
 8010c1c:	a801      	add	r0, sp, #4
 8010c1e:	f7fe fbe9 	bl	800f3f4 <rcutils_get_default_allocator>
 8010c22:	9b02      	ldr	r3, [sp, #8]
 8010c24:	9905      	ldr	r1, [sp, #20]
 8010c26:	6820      	ldr	r0, [r4, #0]
 8010c28:	4798      	blx	r3
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	e9c4 3300 	strd	r3, r3, [r4]
 8010c30:	60a3      	str	r3, [r4, #8]
 8010c32:	b006      	add	sp, #24
 8010c34:	bd10      	pop	{r4, pc}
 8010c36:	6843      	ldr	r3, [r0, #4]
 8010c38:	b9db      	cbnz	r3, 8010c72 <rosidl_runtime_c__String__fini+0x66>
 8010c3a:	6883      	ldr	r3, [r0, #8]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d0f8      	beq.n	8010c32 <rosidl_runtime_c__String__fini+0x26>
 8010c40:	4b12      	ldr	r3, [pc, #72]	@ (8010c8c <rosidl_runtime_c__String__fini+0x80>)
 8010c42:	4813      	ldr	r0, [pc, #76]	@ (8010c90 <rosidl_runtime_c__String__fini+0x84>)
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	2251      	movs	r2, #81	@ 0x51
 8010c48:	68db      	ldr	r3, [r3, #12]
 8010c4a:	2101      	movs	r1, #1
 8010c4c:	f00c fde6 	bl	801d81c <fwrite>
 8010c50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c54:	f00c faa2 	bl	801d19c <exit>
 8010c58:	4770      	bx	lr
 8010c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8010c8c <rosidl_runtime_c__String__fini+0x80>)
 8010c5c:	480d      	ldr	r0, [pc, #52]	@ (8010c94 <rosidl_runtime_c__String__fini+0x88>)
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	224c      	movs	r2, #76	@ 0x4c
 8010c62:	68db      	ldr	r3, [r3, #12]
 8010c64:	2101      	movs	r1, #1
 8010c66:	f00c fdd9 	bl	801d81c <fwrite>
 8010c6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c6e:	f00c fa95 	bl	801d19c <exit>
 8010c72:	4b06      	ldr	r3, [pc, #24]	@ (8010c8c <rosidl_runtime_c__String__fini+0x80>)
 8010c74:	4808      	ldr	r0, [pc, #32]	@ (8010c98 <rosidl_runtime_c__String__fini+0x8c>)
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	224e      	movs	r2, #78	@ 0x4e
 8010c7a:	68db      	ldr	r3, [r3, #12]
 8010c7c:	2101      	movs	r1, #1
 8010c7e:	f00c fdcd 	bl	801d81c <fwrite>
 8010c82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c86:	f00c fa89 	bl	801d19c <exit>
 8010c8a:	bf00      	nop
 8010c8c:	200034bc 	.word	0x200034bc
 8010c90:	08020740 	.word	0x08020740
 8010c94:	080206a0 	.word	0x080206a0
 8010c98:	080206f0 	.word	0x080206f0

08010c9c <rosidl_runtime_c__String__assign>:
 8010c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ca0:	460c      	mov	r4, r1
 8010ca2:	b086      	sub	sp, #24
 8010ca4:	b319      	cbz	r1, 8010cee <rosidl_runtime_c__String__assign+0x52>
 8010ca6:	4605      	mov	r5, r0
 8010ca8:	4608      	mov	r0, r1
 8010caa:	f7ef fb19 	bl	80002e0 <strlen>
 8010cae:	4606      	mov	r6, r0
 8010cb0:	b1cd      	cbz	r5, 8010ce6 <rosidl_runtime_c__String__assign+0x4a>
 8010cb2:	a801      	add	r0, sp, #4
 8010cb4:	f106 0801 	add.w	r8, r6, #1
 8010cb8:	f7fe fb9c 	bl	800f3f4 <rcutils_get_default_allocator>
 8010cbc:	9b03      	ldr	r3, [sp, #12]
 8010cbe:	9a05      	ldr	r2, [sp, #20]
 8010cc0:	6828      	ldr	r0, [r5, #0]
 8010cc2:	4641      	mov	r1, r8
 8010cc4:	4798      	blx	r3
 8010cc6:	4607      	mov	r7, r0
 8010cc8:	b168      	cbz	r0, 8010ce6 <rosidl_runtime_c__String__assign+0x4a>
 8010cca:	4621      	mov	r1, r4
 8010ccc:	4632      	mov	r2, r6
 8010cce:	f00d f80e 	bl	801dcee <memcpy>
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	2001      	movs	r0, #1
 8010cd6:	55bb      	strb	r3, [r7, r6]
 8010cd8:	e9c5 7600 	strd	r7, r6, [r5]
 8010cdc:	f8c5 8008 	str.w	r8, [r5, #8]
 8010ce0:	b006      	add	sp, #24
 8010ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ce6:	2000      	movs	r0, #0
 8010ce8:	b006      	add	sp, #24
 8010cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cee:	4608      	mov	r0, r1
 8010cf0:	b006      	add	sp, #24
 8010cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cf6:	bf00      	nop

08010cf8 <rosidl_runtime_c__String__copy>:
 8010cf8:	b338      	cbz	r0, 8010d4a <rosidl_runtime_c__String__copy+0x52>
 8010cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cfe:	e9d0 7500 	ldrd	r7, r5, [r0]
 8010d02:	b086      	sub	sp, #24
 8010d04:	460c      	mov	r4, r1
 8010d06:	b1e1      	cbz	r1, 8010d42 <rosidl_runtime_c__String__copy+0x4a>
 8010d08:	b1df      	cbz	r7, 8010d42 <rosidl_runtime_c__String__copy+0x4a>
 8010d0a:	1c6b      	adds	r3, r5, #1
 8010d0c:	d019      	beq.n	8010d42 <rosidl_runtime_c__String__copy+0x4a>
 8010d0e:	a801      	add	r0, sp, #4
 8010d10:	f105 0801 	add.w	r8, r5, #1
 8010d14:	f7fe fb6e 	bl	800f3f4 <rcutils_get_default_allocator>
 8010d18:	9b03      	ldr	r3, [sp, #12]
 8010d1a:	9a05      	ldr	r2, [sp, #20]
 8010d1c:	6820      	ldr	r0, [r4, #0]
 8010d1e:	4641      	mov	r1, r8
 8010d20:	4798      	blx	r3
 8010d22:	4606      	mov	r6, r0
 8010d24:	b168      	cbz	r0, 8010d42 <rosidl_runtime_c__String__copy+0x4a>
 8010d26:	4639      	mov	r1, r7
 8010d28:	462a      	mov	r2, r5
 8010d2a:	f00c ffe0 	bl	801dcee <memcpy>
 8010d2e:	2300      	movs	r3, #0
 8010d30:	2001      	movs	r0, #1
 8010d32:	5573      	strb	r3, [r6, r5]
 8010d34:	e9c4 6500 	strd	r6, r5, [r4]
 8010d38:	f8c4 8008 	str.w	r8, [r4, #8]
 8010d3c:	b006      	add	sp, #24
 8010d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d42:	2000      	movs	r0, #0
 8010d44:	b006      	add	sp, #24
 8010d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d4a:	4770      	bx	lr

08010d4c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8010d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d50:	6805      	ldr	r5, [r0, #0]
 8010d52:	4604      	mov	r4, r0
 8010d54:	4628      	mov	r0, r5
 8010d56:	460e      	mov	r6, r1
 8010d58:	f7ef fa62 	bl	8000220 <strcmp>
 8010d5c:	b308      	cbz	r0, 8010da2 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 8010d5e:	4b12      	ldr	r3, [pc, #72]	@ (8010da8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x5c>)
 8010d60:	4628      	mov	r0, r5
 8010d62:	6819      	ldr	r1, [r3, #0]
 8010d64:	f7ef fa5c 	bl	8000220 <strcmp>
 8010d68:	4605      	mov	r5, r0
 8010d6a:	b980      	cbnz	r0, 8010d8e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x42>
 8010d6c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8010d70:	f8d8 4000 	ldr.w	r4, [r8]
 8010d74:	b1ac      	cbz	r4, 8010da2 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 8010d76:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8010d7a:	3f04      	subs	r7, #4
 8010d7c:	f857 0f04 	ldr.w	r0, [r7, #4]!
 8010d80:	4631      	mov	r1, r6
 8010d82:	f7ef fa4d 	bl	8000220 <strcmp>
 8010d86:	b128      	cbz	r0, 8010d94 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x48>
 8010d88:	3501      	adds	r5, #1
 8010d8a:	42a5      	cmp	r5, r4
 8010d8c:	d1f6      	bne.n	8010d7c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x30>
 8010d8e:	2000      	movs	r0, #0
 8010d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d94:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010d98:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8010d9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010da0:	4718      	bx	r3
 8010da2:	4620      	mov	r0, r4
 8010da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010da8:	200005bc 	.word	0x200005bc

08010dac <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 8010dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010db0:	6805      	ldr	r5, [r0, #0]
 8010db2:	4604      	mov	r4, r0
 8010db4:	4628      	mov	r0, r5
 8010db6:	460e      	mov	r6, r1
 8010db8:	f7ef fa32 	bl	8000220 <strcmp>
 8010dbc:	b308      	cbz	r0, 8010e02 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x56>
 8010dbe:	4b12      	ldr	r3, [pc, #72]	@ (8010e08 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x5c>)
 8010dc0:	4628      	mov	r0, r5
 8010dc2:	6819      	ldr	r1, [r3, #0]
 8010dc4:	f7ef fa2c 	bl	8000220 <strcmp>
 8010dc8:	4605      	mov	r5, r0
 8010dca:	b980      	cbnz	r0, 8010dee <rosidl_typesupport_c__get_service_typesupport_handle_function+0x42>
 8010dcc:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8010dd0:	f8d8 4000 	ldr.w	r4, [r8]
 8010dd4:	b1ac      	cbz	r4, 8010e02 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x56>
 8010dd6:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8010dda:	3f04      	subs	r7, #4
 8010ddc:	f857 0f04 	ldr.w	r0, [r7, #4]!
 8010de0:	4631      	mov	r1, r6
 8010de2:	f7ef fa1d 	bl	8000220 <strcmp>
 8010de6:	b128      	cbz	r0, 8010df4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x48>
 8010de8:	3501      	adds	r5, #1
 8010dea:	42a5      	cmp	r5, r4
 8010dec:	d1f6      	bne.n	8010ddc <rosidl_typesupport_c__get_service_typesupport_handle_function+0x30>
 8010dee:	2000      	movs	r0, #0
 8010df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010df4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010df8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8010dfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e00:	4718      	bx	r3
 8010e02:	4620      	mov	r0, r4
 8010e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e08:	200005bc 	.word	0x200005bc

08010e0c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8010e0c:	4b04      	ldr	r3, [pc, #16]	@ (8010e20 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 8010e0e:	681a      	ldr	r2, [r3, #0]
 8010e10:	b10a      	cbz	r2, 8010e16 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 8010e12:	4803      	ldr	r0, [pc, #12]	@ (8010e20 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 8010e14:	4770      	bx	lr
 8010e16:	4a03      	ldr	r2, [pc, #12]	@ (8010e24 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 8010e18:	4801      	ldr	r0, [pc, #4]	@ (8010e20 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 8010e1a:	6812      	ldr	r2, [r2, #0]
 8010e1c:	601a      	str	r2, [r3, #0]
 8010e1e:	4770      	bx	lr
 8010e20:	200005c4 	.word	0x200005c4
 8010e24:	200005bc 	.word	0x200005bc

08010e28 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8010e28:	4a02      	ldr	r2, [pc, #8]	@ (8010e34 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 8010e2a:	4b03      	ldr	r3, [pc, #12]	@ (8010e38 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 8010e2c:	6812      	ldr	r2, [r2, #0]
 8010e2e:	601a      	str	r2, [r3, #0]
 8010e30:	4770      	bx	lr
 8010e32:	bf00      	nop
 8010e34:	200005bc 	.word	0x200005bc
 8010e38:	200005c4 	.word	0x200005c4

08010e3c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 8010e3c:	2009      	movs	r0, #9
 8010e3e:	4770      	bx	lr

08010e40 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 8010e40:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010e44:	4770      	bx	lr
 8010e46:	bf00      	nop

08010e48 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 8010e48:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010e4c:	e9d0 0100 	ldrd	r0, r1, [r0]
 8010e50:	e9c2 0100 	strd	r0, r1, [r2]
 8010e54:	4770      	bx	lr
 8010e56:	bf00      	nop

08010e58 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 8010e58:	e9d2 2300 	ldrd	r2, r3, [r2]
 8010e5c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010e60:	e9c0 2300 	strd	r2, r3, [r0]
 8010e64:	4770      	bx	lr
 8010e66:	bf00      	nop

08010e68 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 8010e68:	f009 bde8 	b.w	801aa3c <sensor_msgs__msg__Imu__init>

08010e6c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 8010e6c:	f009 be32 	b.w	801aad4 <sensor_msgs__msg__Imu__fini>

08010e70 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 8010e70:	2009      	movs	r0, #9
 8010e72:	4770      	bx	lr

08010e74 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 8010e74:	2009      	movs	r0, #9
 8010e76:	4770      	bx	lr

08010e78 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 8010e78:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010e7c:	4770      	bx	lr
 8010e7e:	bf00      	nop

08010e80 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 8010e80:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010e84:	4770      	bx	lr
 8010e86:	bf00      	nop

08010e88 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 8010e88:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010e8c:	4770      	bx	lr
 8010e8e:	bf00      	nop

08010e90 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 8010e90:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010e94:	4770      	bx	lr
 8010e96:	bf00      	nop

08010e98 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 8010e98:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010e9c:	4770      	bx	lr
 8010e9e:	bf00      	nop

08010ea0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 8010ea0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010ea4:	e9d0 0100 	ldrd	r0, r1, [r0]
 8010ea8:	e9c2 0100 	strd	r0, r1, [r2]
 8010eac:	4770      	bx	lr
 8010eae:	bf00      	nop

08010eb0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 8010eb0:	e9d2 2300 	ldrd	r2, r3, [r2]
 8010eb4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010eb8:	e9c0 2300 	strd	r2, r3, [r0]
 8010ebc:	4770      	bx	lr
 8010ebe:	bf00      	nop

08010ec0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 8010ec0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010ec4:	e9d0 0100 	ldrd	r0, r1, [r0]
 8010ec8:	e9c2 0100 	strd	r0, r1, [r2]
 8010ecc:	4770      	bx	lr
 8010ece:	bf00      	nop

08010ed0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 8010ed0:	e9d2 2300 	ldrd	r2, r3, [r2]
 8010ed4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010ed8:	e9c0 2300 	strd	r2, r3, [r0]
 8010edc:	4770      	bx	lr
 8010ede:	bf00      	nop

08010ee0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8010ee0:	b510      	push	{r4, lr}
 8010ee2:	f000 fa03 	bl	80112ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010ee6:	4c0b      	ldr	r4, [pc, #44]	@ (8010f14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 8010ee8:	60e0      	str	r0, [r4, #12]
 8010eea:	f000 fef5 	bl	8011cd8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8010eee:	64a0      	str	r0, [r4, #72]	@ 0x48
 8010ef0:	f7fb f832 	bl	800bf58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8010ef4:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 8010ef8:	f7fb f82e 	bl	800bf58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8010efc:	4b06      	ldr	r3, [pc, #24]	@ (8010f18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 8010efe:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 8010f02:	681a      	ldr	r2, [r3, #0]
 8010f04:	b10a      	cbz	r2, 8010f0a <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 8010f06:	4804      	ldr	r0, [pc, #16]	@ (8010f18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 8010f08:	bd10      	pop	{r4, pc}
 8010f0a:	4a04      	ldr	r2, [pc, #16]	@ (8010f1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 8010f0c:	4802      	ldr	r0, [pc, #8]	@ (8010f18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 8010f0e:	6812      	ldr	r2, [r2, #0]
 8010f10:	601a      	str	r2, [r3, #0]
 8010f12:	bd10      	pop	{r4, pc}
 8010f14:	200005fc 	.word	0x200005fc
 8010f18:	200005e4 	.word	0x200005e4
 8010f1c:	200005c0 	.word	0x200005c0

08010f20 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 8010f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f22:	4607      	mov	r7, r0
 8010f24:	460e      	mov	r6, r1
 8010f26:	f000 fa17 	bl	8011358 <get_serialized_size_std_msgs__msg__Header>
 8010f2a:	1834      	adds	r4, r6, r0
 8010f2c:	4621      	mov	r1, r4
 8010f2e:	f107 0018 	add.w	r0, r7, #24
 8010f32:	f000 fedf 	bl	8011cf4 <get_serialized_size_geometry_msgs__msg__Quaternion>
 8010f36:	4404      	add	r4, r0
 8010f38:	2108      	movs	r1, #8
 8010f3a:	4620      	mov	r0, r4
 8010f3c:	f7fd f894 	bl	800e068 <ucdr_alignment>
 8010f40:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 8010f44:	4425      	add	r5, r4
 8010f46:	4629      	mov	r1, r5
 8010f48:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8010f4c:	f7fb f874 	bl	800c038 <get_serialized_size_geometry_msgs__msg__Vector3>
 8010f50:	4405      	add	r5, r0
 8010f52:	2108      	movs	r1, #8
 8010f54:	4628      	mov	r0, r5
 8010f56:	f7fd f887 	bl	800e068 <ucdr_alignment>
 8010f5a:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 8010f5e:	442c      	add	r4, r5
 8010f60:	4621      	mov	r1, r4
 8010f62:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8010f66:	f7fb f867 	bl	800c038 <get_serialized_size_geometry_msgs__msg__Vector3>
 8010f6a:	4404      	add	r4, r0
 8010f6c:	2108      	movs	r1, #8
 8010f6e:	4620      	mov	r0, r4
 8010f70:	f7fd f87a 	bl	800e068 <ucdr_alignment>
 8010f74:	f1c6 0648 	rsb	r6, r6, #72	@ 0x48
 8010f78:	4430      	add	r0, r6
 8010f7a:	4420      	add	r0, r4
 8010f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f7e:	bf00      	nop

08010f80 <get_serialized_size_sensor_msgs__msg__Imu>:
 8010f80:	b108      	cbz	r0, 8010f86 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 8010f82:	f7ff bfcd 	b.w	8010f20 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 8010f86:	4770      	bx	lr

08010f88 <_Imu__get_serialized_size>:
 8010f88:	b110      	cbz	r0, 8010f90 <_Imu__get_serialized_size+0x8>
 8010f8a:	2100      	movs	r1, #0
 8010f8c:	f7ff bfc8 	b.w	8010f20 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 8010f90:	4770      	bx	lr
 8010f92:	bf00      	nop

08010f94 <_Imu__cdr_deserialize>:
 8010f94:	b538      	push	{r3, r4, r5, lr}
 8010f96:	460c      	mov	r4, r1
 8010f98:	b399      	cbz	r1, 8011002 <_Imu__cdr_deserialize+0x6e>
 8010f9a:	4605      	mov	r5, r0
 8010f9c:	f000 fa5e 	bl	801145c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010fa0:	6843      	ldr	r3, [r0, #4]
 8010fa2:	4621      	mov	r1, r4
 8010fa4:	68db      	ldr	r3, [r3, #12]
 8010fa6:	4628      	mov	r0, r5
 8010fa8:	4798      	blx	r3
 8010faa:	f000 ff57 	bl	8011e5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8010fae:	6843      	ldr	r3, [r0, #4]
 8010fb0:	f104 0118 	add.w	r1, r4, #24
 8010fb4:	68db      	ldr	r3, [r3, #12]
 8010fb6:	4628      	mov	r0, r5
 8010fb8:	4798      	blx	r3
 8010fba:	2209      	movs	r2, #9
 8010fbc:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8010fc0:	4628      	mov	r0, r5
 8010fc2:	f001 fd75 	bl	8012ab0 <ucdr_deserialize_array_double>
 8010fc6:	f7fb f8c3 	bl	800c150 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8010fca:	6843      	ldr	r3, [r0, #4]
 8010fcc:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 8010fd0:	68db      	ldr	r3, [r3, #12]
 8010fd2:	4628      	mov	r0, r5
 8010fd4:	4798      	blx	r3
 8010fd6:	2209      	movs	r2, #9
 8010fd8:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 8010fdc:	4628      	mov	r0, r5
 8010fde:	f001 fd67 	bl	8012ab0 <ucdr_deserialize_array_double>
 8010fe2:	f7fb f8b5 	bl	800c150 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8010fe6:	6843      	ldr	r3, [r0, #4]
 8010fe8:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 8010fec:	68db      	ldr	r3, [r3, #12]
 8010fee:	4628      	mov	r0, r5
 8010ff0:	4798      	blx	r3
 8010ff2:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 8010ff6:	4628      	mov	r0, r5
 8010ff8:	2209      	movs	r2, #9
 8010ffa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ffe:	f001 bd57 	b.w	8012ab0 <ucdr_deserialize_array_double>
 8011002:	4608      	mov	r0, r1
 8011004:	bd38      	pop	{r3, r4, r5, pc}
 8011006:	bf00      	nop

08011008 <_Imu__cdr_serialize>:
 8011008:	2800      	cmp	r0, #0
 801100a:	d035      	beq.n	8011078 <_Imu__cdr_serialize+0x70>
 801100c:	b538      	push	{r3, r4, r5, lr}
 801100e:	4604      	mov	r4, r0
 8011010:	460d      	mov	r5, r1
 8011012:	f000 fa23 	bl	801145c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011016:	6843      	ldr	r3, [r0, #4]
 8011018:	4629      	mov	r1, r5
 801101a:	689b      	ldr	r3, [r3, #8]
 801101c:	4620      	mov	r0, r4
 801101e:	4798      	blx	r3
 8011020:	f000 ff1c 	bl	8011e5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8011024:	6843      	ldr	r3, [r0, #4]
 8011026:	4629      	mov	r1, r5
 8011028:	689b      	ldr	r3, [r3, #8]
 801102a:	f104 0018 	add.w	r0, r4, #24
 801102e:	4798      	blx	r3
 8011030:	2209      	movs	r2, #9
 8011032:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8011036:	4628      	mov	r0, r5
 8011038:	f001 fce6 	bl	8012a08 <ucdr_serialize_array_double>
 801103c:	f7fb f888 	bl	800c150 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8011040:	6843      	ldr	r3, [r0, #4]
 8011042:	4629      	mov	r1, r5
 8011044:	689b      	ldr	r3, [r3, #8]
 8011046:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801104a:	4798      	blx	r3
 801104c:	2209      	movs	r2, #9
 801104e:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 8011052:	4628      	mov	r0, r5
 8011054:	f001 fcd8 	bl	8012a08 <ucdr_serialize_array_double>
 8011058:	f7fb f87a 	bl	800c150 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 801105c:	6843      	ldr	r3, [r0, #4]
 801105e:	4629      	mov	r1, r5
 8011060:	689b      	ldr	r3, [r3, #8]
 8011062:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8011066:	4798      	blx	r3
 8011068:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 801106c:	4628      	mov	r0, r5
 801106e:	2209      	movs	r2, #9
 8011070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011074:	f001 bcc8 	b.w	8012a08 <ucdr_serialize_array_double>
 8011078:	4770      	bx	lr
 801107a:	bf00      	nop

0801107c <max_serialized_size_sensor_msgs__msg__Imu>:
 801107c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801107e:	2301      	movs	r3, #1
 8011080:	7003      	strb	r3, [r0, #0]
 8011082:	4607      	mov	r7, r0
 8011084:	460e      	mov	r6, r1
 8011086:	f000 f9df 	bl	8011448 <max_serialized_size_std_msgs__msg__Header>
 801108a:	1834      	adds	r4, r6, r0
 801108c:	4621      	mov	r1, r4
 801108e:	4638      	mov	r0, r7
 8011090:	f000 fec2 	bl	8011e18 <max_serialized_size_geometry_msgs__msg__Quaternion>
 8011094:	4404      	add	r4, r0
 8011096:	2108      	movs	r1, #8
 8011098:	4620      	mov	r0, r4
 801109a:	f7fc ffe5 	bl	800e068 <ucdr_alignment>
 801109e:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 80110a2:	4425      	add	r5, r4
 80110a4:	4629      	mov	r1, r5
 80110a6:	4638      	mov	r0, r7
 80110a8:	f7fb f838 	bl	800c11c <max_serialized_size_geometry_msgs__msg__Vector3>
 80110ac:	4405      	add	r5, r0
 80110ae:	2108      	movs	r1, #8
 80110b0:	4628      	mov	r0, r5
 80110b2:	f7fc ffd9 	bl	800e068 <ucdr_alignment>
 80110b6:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 80110ba:	442c      	add	r4, r5
 80110bc:	4621      	mov	r1, r4
 80110be:	4638      	mov	r0, r7
 80110c0:	f7fb f82c 	bl	800c11c <max_serialized_size_geometry_msgs__msg__Vector3>
 80110c4:	4404      	add	r4, r0
 80110c6:	2108      	movs	r1, #8
 80110c8:	4620      	mov	r0, r4
 80110ca:	f7fc ffcd 	bl	800e068 <ucdr_alignment>
 80110ce:	f1c6 0648 	rsb	r6, r6, #72	@ 0x48
 80110d2:	4430      	add	r0, r6
 80110d4:	4420      	add	r0, r4
 80110d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080110d8 <_Imu__max_serialized_size>:
 80110d8:	b500      	push	{lr}
 80110da:	b083      	sub	sp, #12
 80110dc:	2100      	movs	r1, #0
 80110de:	f10d 0007 	add.w	r0, sp, #7
 80110e2:	f7ff ffcb 	bl	801107c <max_serialized_size_sensor_msgs__msg__Imu>
 80110e6:	b003      	add	sp, #12
 80110e8:	f85d fb04 	ldr.w	pc, [sp], #4

080110ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 80110ec:	4800      	ldr	r0, [pc, #0]	@ (80110f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 80110ee:	4770      	bx	lr
 80110f0:	200007a0 	.word	0x200007a0

080110f4 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__size_function__ServiceEventInfo__client_gid>:
 80110f4:	2010      	movs	r0, #16
 80110f6:	4770      	bx	lr

080110f8 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_const_function__ServiceEventInfo__client_gid>:
 80110f8:	4408      	add	r0, r1
 80110fa:	4770      	bx	lr

080110fc <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__fetch_function__ServiceEventInfo__client_gid>:
 80110fc:	5c43      	ldrb	r3, [r0, r1]
 80110fe:	7013      	strb	r3, [r2, #0]
 8011100:	4770      	bx	lr
 8011102:	bf00      	nop

08011104 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__assign_function__ServiceEventInfo__client_gid>:
 8011104:	7813      	ldrb	r3, [r2, #0]
 8011106:	5443      	strb	r3, [r0, r1]
 8011108:	4770      	bx	lr
 801110a:	bf00      	nop

0801110c <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_init_function>:
 801110c:	f009 bd78 	b.w	801ac00 <service_msgs__msg__ServiceEventInfo__init>

08011110 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_fini_function>:
 8011110:	f009 bd86 	b.w	801ac20 <service_msgs__msg__ServiceEventInfo__fini>

08011114 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_function__ServiceEventInfo__client_gid>:
 8011114:	4408      	add	r0, r1
 8011116:	4770      	bx	lr

08011118 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 8011118:	b508      	push	{r3, lr}
 801111a:	f000 fca9 	bl	8011a70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801111e:	4b06      	ldr	r3, [pc, #24]	@ (8011138 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 8011120:	4906      	ldr	r1, [pc, #24]	@ (801113c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x24>)
 8011122:	681a      	ldr	r2, [r3, #0]
 8011124:	6488      	str	r0, [r1, #72]	@ 0x48
 8011126:	b10a      	cbz	r2, 801112c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x14>
 8011128:	4803      	ldr	r0, [pc, #12]	@ (8011138 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 801112a:	bd08      	pop	{r3, pc}
 801112c:	4a04      	ldr	r2, [pc, #16]	@ (8011140 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x28>)
 801112e:	4802      	ldr	r0, [pc, #8]	@ (8011138 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 8011130:	6812      	ldr	r2, [r2, #0]
 8011132:	601a      	str	r2, [r3, #0]
 8011134:	bd08      	pop	{r3, pc}
 8011136:	bf00      	nop
 8011138:	200007d4 	.word	0x200007d4
 801113c:	200007ec 	.word	0x200007ec
 8011140:	200005c0 	.word	0x200005c0

08011144 <get_serialized_size_service_msgs__msg__ServiceEventInfo>:
 8011144:	b570      	push	{r4, r5, r6, lr}
 8011146:	4604      	mov	r4, r0
 8011148:	b1d0      	cbz	r0, 8011180 <get_serialized_size_service_msgs__msg__ServiceEventInfo+0x3c>
 801114a:	460d      	mov	r5, r1
 801114c:	4628      	mov	r0, r5
 801114e:	2101      	movs	r1, #1
 8011150:	f7fc ff8a 	bl	800e068 <ucdr_alignment>
 8011154:	1c6e      	adds	r6, r5, #1
 8011156:	4406      	add	r6, r0
 8011158:	4631      	mov	r1, r6
 801115a:	1d20      	adds	r0, r4, #4
 801115c:	f000 fc96 	bl	8011a8c <get_serialized_size_builtin_interfaces__msg__Time>
 8011160:	4406      	add	r6, r0
 8011162:	2101      	movs	r1, #1
 8011164:	4630      	mov	r0, r6
 8011166:	f7fc ff7f 	bl	800e068 <ucdr_alignment>
 801116a:	f100 0410 	add.w	r4, r0, #16
 801116e:	4434      	add	r4, r6
 8011170:	2108      	movs	r1, #8
 8011172:	4620      	mov	r0, r4
 8011174:	f7fc ff78 	bl	800e068 <ucdr_alignment>
 8011178:	f1c5 0508 	rsb	r5, r5, #8
 801117c:	4405      	add	r5, r0
 801117e:	1928      	adds	r0, r5, r4
 8011180:	bd70      	pop	{r4, r5, r6, pc}
 8011182:	bf00      	nop

08011184 <_ServiceEventInfo__cdr_deserialize>:
 8011184:	b538      	push	{r3, r4, r5, lr}
 8011186:	460c      	mov	r4, r1
 8011188:	b1b1      	cbz	r1, 80111b8 <_ServiceEventInfo__cdr_deserialize+0x34>
 801118a:	4605      	mov	r5, r0
 801118c:	f7fb fb0c 	bl	800c7a8 <ucdr_deserialize_uint8_t>
 8011190:	f000 fce0 	bl	8011b54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011194:	6843      	ldr	r3, [r0, #4]
 8011196:	1d21      	adds	r1, r4, #4
 8011198:	68db      	ldr	r3, [r3, #12]
 801119a:	4628      	mov	r0, r5
 801119c:	4798      	blx	r3
 801119e:	f104 010c 	add.w	r1, r4, #12
 80111a2:	4628      	mov	r0, r5
 80111a4:	2210      	movs	r2, #16
 80111a6:	f001 fbcb 	bl	8012940 <ucdr_deserialize_array_uint8_t>
 80111aa:	f104 0120 	add.w	r1, r4, #32
 80111ae:	4628      	mov	r0, r5
 80111b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80111b4:	f7fc bb2c 	b.w	800d810 <ucdr_deserialize_int64_t>
 80111b8:	4608      	mov	r0, r1
 80111ba:	bd38      	pop	{r3, r4, r5, pc}

080111bc <_ServiceEventInfo__cdr_serialize>:
 80111bc:	b1e0      	cbz	r0, 80111f8 <_ServiceEventInfo__cdr_serialize+0x3c>
 80111be:	b570      	push	{r4, r5, r6, lr}
 80111c0:	4606      	mov	r6, r0
 80111c2:	460d      	mov	r5, r1
 80111c4:	4604      	mov	r4, r0
 80111c6:	4608      	mov	r0, r1
 80111c8:	f816 1b04 	ldrb.w	r1, [r6], #4
 80111cc:	f7fb fad6 	bl	800c77c <ucdr_serialize_uint8_t>
 80111d0:	f000 fcc0 	bl	8011b54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80111d4:	6843      	ldr	r3, [r0, #4]
 80111d6:	4629      	mov	r1, r5
 80111d8:	689b      	ldr	r3, [r3, #8]
 80111da:	4630      	mov	r0, r6
 80111dc:	4798      	blx	r3
 80111de:	2210      	movs	r2, #16
 80111e0:	f104 010c 	add.w	r1, r4, #12
 80111e4:	4628      	mov	r0, r5
 80111e6:	f001 fb47 	bl	8012878 <ucdr_serialize_array_uint8_t>
 80111ea:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80111ee:	4628      	mov	r0, r5
 80111f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80111f4:	f7fc ba44 	b.w	800d680 <ucdr_serialize_int64_t>
 80111f8:	4770      	bx	lr
 80111fa:	bf00      	nop

080111fc <_ServiceEventInfo__get_serialized_size>:
 80111fc:	b538      	push	{r3, r4, r5, lr}
 80111fe:	4604      	mov	r4, r0
 8011200:	b1a8      	cbz	r0, 801122e <_ServiceEventInfo__get_serialized_size+0x32>
 8011202:	2101      	movs	r1, #1
 8011204:	2000      	movs	r0, #0
 8011206:	f7fc ff2f 	bl	800e068 <ucdr_alignment>
 801120a:	1c45      	adds	r5, r0, #1
 801120c:	4629      	mov	r1, r5
 801120e:	1d20      	adds	r0, r4, #4
 8011210:	f000 fc3c 	bl	8011a8c <get_serialized_size_builtin_interfaces__msg__Time>
 8011214:	182c      	adds	r4, r5, r0
 8011216:	2101      	movs	r1, #1
 8011218:	4620      	mov	r0, r4
 801121a:	f7fc ff25 	bl	800e068 <ucdr_alignment>
 801121e:	3010      	adds	r0, #16
 8011220:	4404      	add	r4, r0
 8011222:	2108      	movs	r1, #8
 8011224:	4620      	mov	r0, r4
 8011226:	f7fc ff1f 	bl	800e068 <ucdr_alignment>
 801122a:	3008      	adds	r0, #8
 801122c:	4420      	add	r0, r4
 801122e:	bd38      	pop	{r3, r4, r5, pc}

08011230 <_ServiceEventInfo__max_serialized_size>:
 8011230:	b530      	push	{r4, r5, lr}
 8011232:	2501      	movs	r5, #1
 8011234:	b083      	sub	sp, #12
 8011236:	4629      	mov	r1, r5
 8011238:	2000      	movs	r0, #0
 801123a:	f88d 5007 	strb.w	r5, [sp, #7]
 801123e:	f7fc ff13 	bl	800e068 <ucdr_alignment>
 8011242:	1944      	adds	r4, r0, r5
 8011244:	4621      	mov	r1, r4
 8011246:	f10d 0007 	add.w	r0, sp, #7
 801124a:	f000 fc6f 	bl	8011b2c <max_serialized_size_builtin_interfaces__msg__Time>
 801124e:	4404      	add	r4, r0
 8011250:	4629      	mov	r1, r5
 8011252:	4620      	mov	r0, r4
 8011254:	f7fc ff08 	bl	800e068 <ucdr_alignment>
 8011258:	3010      	adds	r0, #16
 801125a:	4404      	add	r4, r0
 801125c:	2108      	movs	r1, #8
 801125e:	4620      	mov	r0, r4
 8011260:	f7fc ff02 	bl	800e068 <ucdr_alignment>
 8011264:	3008      	adds	r0, #8
 8011266:	4420      	add	r0, r4
 8011268:	b003      	add	sp, #12
 801126a:	bd30      	pop	{r4, r5, pc}

0801126c <max_serialized_size_service_msgs__msg__ServiceEventInfo>:
 801126c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801126e:	2701      	movs	r7, #1
 8011270:	460c      	mov	r4, r1
 8011272:	4606      	mov	r6, r0
 8011274:	7007      	strb	r7, [r0, #0]
 8011276:	4639      	mov	r1, r7
 8011278:	4620      	mov	r0, r4
 801127a:	f7fc fef5 	bl	800e068 <ucdr_alignment>
 801127e:	19e3      	adds	r3, r4, r7
 8011280:	18c5      	adds	r5, r0, r3
 8011282:	4629      	mov	r1, r5
 8011284:	4630      	mov	r0, r6
 8011286:	f000 fc51 	bl	8011b2c <max_serialized_size_builtin_interfaces__msg__Time>
 801128a:	4405      	add	r5, r0
 801128c:	4639      	mov	r1, r7
 801128e:	4628      	mov	r0, r5
 8011290:	f7fc feea 	bl	800e068 <ucdr_alignment>
 8011294:	3010      	adds	r0, #16
 8011296:	4405      	add	r5, r0
 8011298:	2108      	movs	r1, #8
 801129a:	4628      	mov	r0, r5
 801129c:	f7fc fee4 	bl	800e068 <ucdr_alignment>
 80112a0:	f1c4 0408 	rsb	r4, r4, #8
 80112a4:	4420      	add	r0, r4
 80112a6:	4428      	add	r0, r5
 80112a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112aa:	bf00      	nop

080112ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 80112ac:	4800      	ldr	r0, [pc, #0]	@ (80112b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x4>)
 80112ae:	4770      	bx	lr
 80112b0:	200008dc 	.word	0x200008dc

080112b4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int8>:
 80112b4:	4b04      	ldr	r3, [pc, #16]	@ (80112c8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int8+0x14>)
 80112b6:	681a      	ldr	r2, [r3, #0]
 80112b8:	b10a      	cbz	r2, 80112be <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int8+0xa>
 80112ba:	4803      	ldr	r0, [pc, #12]	@ (80112c8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int8+0x14>)
 80112bc:	4770      	bx	lr
 80112be:	4a03      	ldr	r2, [pc, #12]	@ (80112cc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int8+0x18>)
 80112c0:	4801      	ldr	r0, [pc, #4]	@ (80112c8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int8+0x14>)
 80112c2:	6812      	ldr	r2, [r2, #0]
 80112c4:	601a      	str	r2, [r3, #0]
 80112c6:	4770      	bx	lr
 80112c8:	20000910 	.word	0x20000910
 80112cc:	200005bc 	.word	0x200005bc

080112d0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int8>:
 80112d0:	4a02      	ldr	r2, [pc, #8]	@ (80112dc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int8+0xc>)
 80112d2:	4b03      	ldr	r3, [pc, #12]	@ (80112e0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int8+0x10>)
 80112d4:	6812      	ldr	r2, [r2, #0]
 80112d6:	601a      	str	r2, [r3, #0]
 80112d8:	4770      	bx	lr
 80112da:	bf00      	nop
 80112dc:	200005bc 	.word	0x200005bc
 80112e0:	20000910 	.word	0x20000910

080112e4 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 80112e4:	f009 bcea 	b.w	801acbc <std_msgs__msg__Header__init>

080112e8 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 80112e8:	f009 bd08 	b.w	801acfc <std_msgs__msg__Header__fini>

080112ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 80112ec:	b508      	push	{r3, lr}
 80112ee:	f000 fbbf 	bl	8011a70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80112f2:	4b06      	ldr	r3, [pc, #24]	@ (801130c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80112f4:	4906      	ldr	r1, [pc, #24]	@ (8011310 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 80112f6:	681a      	ldr	r2, [r3, #0]
 80112f8:	60c8      	str	r0, [r1, #12]
 80112fa:	b10a      	cbz	r2, 8011300 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 80112fc:	4803      	ldr	r0, [pc, #12]	@ (801130c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80112fe:	bd08      	pop	{r3, pc}
 8011300:	4a04      	ldr	r2, [pc, #16]	@ (8011314 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 8011302:	4802      	ldr	r0, [pc, #8]	@ (801130c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8011304:	6812      	ldr	r2, [r2, #0]
 8011306:	601a      	str	r2, [r3, #0]
 8011308:	bd08      	pop	{r3, pc}
 801130a:	bf00      	nop
 801130c:	20000930 	.word	0x20000930
 8011310:	20000948 	.word	0x20000948
 8011314:	200005c0 	.word	0x200005c0

08011318 <std_msgs__msg__Int8__rosidl_typesupport_introspection_c__Int8_init_function>:
 8011318:	f009 bd3c 	b.w	801ad94 <std_msgs__msg__Int8__init>

0801131c <std_msgs__msg__Int8__rosidl_typesupport_introspection_c__Int8_fini_function>:
 801131c:	f009 bd3e 	b.w	801ad9c <std_msgs__msg__Int8__fini>

08011320 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int8>:
 8011320:	4b04      	ldr	r3, [pc, #16]	@ (8011334 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int8+0x14>)
 8011322:	681a      	ldr	r2, [r3, #0]
 8011324:	b10a      	cbz	r2, 801132a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int8+0xa>
 8011326:	4803      	ldr	r0, [pc, #12]	@ (8011334 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int8+0x14>)
 8011328:	4770      	bx	lr
 801132a:	4a03      	ldr	r2, [pc, #12]	@ (8011338 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int8+0x18>)
 801132c:	4801      	ldr	r0, [pc, #4]	@ (8011334 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int8+0x14>)
 801132e:	6812      	ldr	r2, [r2, #0]
 8011330:	601a      	str	r2, [r3, #0]
 8011332:	4770      	bx	lr
 8011334:	200009c0 	.word	0x200009c0
 8011338:	200005c0 	.word	0x200005c0

0801133c <_Header__max_serialized_size>:
 801133c:	b500      	push	{lr}
 801133e:	b083      	sub	sp, #12
 8011340:	2301      	movs	r3, #1
 8011342:	2100      	movs	r1, #0
 8011344:	f10d 0007 	add.w	r0, sp, #7
 8011348:	f88d 3007 	strb.w	r3, [sp, #7]
 801134c:	f000 fbee 	bl	8011b2c <max_serialized_size_builtin_interfaces__msg__Time>
 8011350:	b003      	add	sp, #12
 8011352:	f85d fb04 	ldr.w	pc, [sp], #4
 8011356:	bf00      	nop

08011358 <get_serialized_size_std_msgs__msg__Header>:
 8011358:	b570      	push	{r4, r5, r6, lr}
 801135a:	4605      	mov	r5, r0
 801135c:	b168      	cbz	r0, 801137a <get_serialized_size_std_msgs__msg__Header+0x22>
 801135e:	460c      	mov	r4, r1
 8011360:	f000 fb94 	bl	8011a8c <get_serialized_size_builtin_interfaces__msg__Time>
 8011364:	1826      	adds	r6, r4, r0
 8011366:	2104      	movs	r1, #4
 8011368:	4630      	mov	r0, r6
 801136a:	f7fc fe7d 	bl	800e068 <ucdr_alignment>
 801136e:	68eb      	ldr	r3, [r5, #12]
 8011370:	f1c4 0405 	rsb	r4, r4, #5
 8011374:	441c      	add	r4, r3
 8011376:	4404      	add	r4, r0
 8011378:	19a0      	adds	r0, r4, r6
 801137a:	bd70      	pop	{r4, r5, r6, pc}

0801137c <_Header__cdr_deserialize>:
 801137c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801137e:	460c      	mov	r4, r1
 8011380:	b083      	sub	sp, #12
 8011382:	b1e1      	cbz	r1, 80113be <_Header__cdr_deserialize+0x42>
 8011384:	4606      	mov	r6, r0
 8011386:	f000 fbe5 	bl	8011b54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801138a:	6843      	ldr	r3, [r0, #4]
 801138c:	4621      	mov	r1, r4
 801138e:	68db      	ldr	r3, [r3, #12]
 8011390:	4630      	mov	r0, r6
 8011392:	4798      	blx	r3
 8011394:	6927      	ldr	r7, [r4, #16]
 8011396:	68a1      	ldr	r1, [r4, #8]
 8011398:	ab01      	add	r3, sp, #4
 801139a:	463a      	mov	r2, r7
 801139c:	4630      	mov	r0, r6
 801139e:	f001 fbef 	bl	8012b80 <ucdr_deserialize_sequence_char>
 80113a2:	9b01      	ldr	r3, [sp, #4]
 80113a4:	4605      	mov	r5, r0
 80113a6:	b920      	cbnz	r0, 80113b2 <_Header__cdr_deserialize+0x36>
 80113a8:	429f      	cmp	r7, r3
 80113aa:	d30c      	bcc.n	80113c6 <_Header__cdr_deserialize+0x4a>
 80113ac:	4628      	mov	r0, r5
 80113ae:	b003      	add	sp, #12
 80113b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113b2:	b103      	cbz	r3, 80113b6 <_Header__cdr_deserialize+0x3a>
 80113b4:	3b01      	subs	r3, #1
 80113b6:	4628      	mov	r0, r5
 80113b8:	60e3      	str	r3, [r4, #12]
 80113ba:	b003      	add	sp, #12
 80113bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113be:	460d      	mov	r5, r1
 80113c0:	4628      	mov	r0, r5
 80113c2:	b003      	add	sp, #12
 80113c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113c6:	2101      	movs	r1, #1
 80113c8:	75b0      	strb	r0, [r6, #22]
 80113ca:	7571      	strb	r1, [r6, #21]
 80113cc:	60e0      	str	r0, [r4, #12]
 80113ce:	4630      	mov	r0, r6
 80113d0:	f7fc fe60 	bl	800e094 <ucdr_align_to>
 80113d4:	4630      	mov	r0, r6
 80113d6:	9901      	ldr	r1, [sp, #4]
 80113d8:	f7fc fe92 	bl	800e100 <ucdr_advance_buffer>
 80113dc:	4628      	mov	r0, r5
 80113de:	b003      	add	sp, #12
 80113e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113e2:	bf00      	nop

080113e4 <_Header__cdr_serialize>:
 80113e4:	b1f8      	cbz	r0, 8011426 <_Header__cdr_serialize+0x42>
 80113e6:	b570      	push	{r4, r5, r6, lr}
 80113e8:	4604      	mov	r4, r0
 80113ea:	460d      	mov	r5, r1
 80113ec:	f000 fbb2 	bl	8011b54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80113f0:	6843      	ldr	r3, [r0, #4]
 80113f2:	4629      	mov	r1, r5
 80113f4:	689b      	ldr	r3, [r3, #8]
 80113f6:	4620      	mov	r0, r4
 80113f8:	4798      	blx	r3
 80113fa:	68a6      	ldr	r6, [r4, #8]
 80113fc:	b156      	cbz	r6, 8011414 <_Header__cdr_serialize+0x30>
 80113fe:	4630      	mov	r0, r6
 8011400:	f7ee ff6e 	bl	80002e0 <strlen>
 8011404:	4631      	mov	r1, r6
 8011406:	60e0      	str	r0, [r4, #12]
 8011408:	1c42      	adds	r2, r0, #1
 801140a:	4628      	mov	r0, r5
 801140c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011410:	f001 bba4 	b.w	8012b5c <ucdr_serialize_sequence_char>
 8011414:	4630      	mov	r0, r6
 8011416:	60e0      	str	r0, [r4, #12]
 8011418:	4632      	mov	r2, r6
 801141a:	4631      	mov	r1, r6
 801141c:	4628      	mov	r0, r5
 801141e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011422:	f001 bb9b 	b.w	8012b5c <ucdr_serialize_sequence_char>
 8011426:	4770      	bx	lr

08011428 <_Header__get_serialized_size>:
 8011428:	b538      	push	{r3, r4, r5, lr}
 801142a:	4604      	mov	r4, r0
 801142c:	b150      	cbz	r0, 8011444 <_Header__get_serialized_size+0x1c>
 801142e:	2100      	movs	r1, #0
 8011430:	f000 fb2c 	bl	8011a8c <get_serialized_size_builtin_interfaces__msg__Time>
 8011434:	2104      	movs	r1, #4
 8011436:	4605      	mov	r5, r0
 8011438:	f7fc fe16 	bl	800e068 <ucdr_alignment>
 801143c:	68e4      	ldr	r4, [r4, #12]
 801143e:	3405      	adds	r4, #5
 8011440:	442c      	add	r4, r5
 8011442:	4420      	add	r0, r4
 8011444:	bd38      	pop	{r3, r4, r5, pc}
 8011446:	bf00      	nop

08011448 <max_serialized_size_std_msgs__msg__Header>:
 8011448:	b510      	push	{r4, lr}
 801144a:	2301      	movs	r3, #1
 801144c:	4604      	mov	r4, r0
 801144e:	7003      	strb	r3, [r0, #0]
 8011450:	f000 fb6c 	bl	8011b2c <max_serialized_size_builtin_interfaces__msg__Time>
 8011454:	2300      	movs	r3, #0
 8011456:	7023      	strb	r3, [r4, #0]
 8011458:	bd10      	pop	{r4, pc}
 801145a:	bf00      	nop

0801145c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 801145c:	4800      	ldr	r0, [pc, #0]	@ (8011460 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 801145e:	4770      	bx	lr
 8011460:	20000a14 	.word	0x20000a14

08011464 <_Int8__max_serialized_size>:
 8011464:	b508      	push	{r3, lr}
 8011466:	2101      	movs	r1, #1
 8011468:	2000      	movs	r0, #0
 801146a:	f7fc fdfd 	bl	800e068 <ucdr_alignment>
 801146e:	3001      	adds	r0, #1
 8011470:	bd08      	pop	{r3, pc}
 8011472:	bf00      	nop

08011474 <_Int8__cdr_deserialize>:
 8011474:	b109      	cbz	r1, 801147a <_Int8__cdr_deserialize+0x6>
 8011476:	f7fb bebf 	b.w	800d1f8 <ucdr_deserialize_int8_t>
 801147a:	4608      	mov	r0, r1
 801147c:	4770      	bx	lr
 801147e:	bf00      	nop

08011480 <get_serialized_size_std_msgs__msg__Int8>:
 8011480:	b508      	push	{r3, lr}
 8011482:	b120      	cbz	r0, 801148e <get_serialized_size_std_msgs__msg__Int8+0xe>
 8011484:	4608      	mov	r0, r1
 8011486:	2101      	movs	r1, #1
 8011488:	f7fc fdee 	bl	800e068 <ucdr_alignment>
 801148c:	3001      	adds	r0, #1
 801148e:	bd08      	pop	{r3, pc}

08011490 <_Int8__cdr_serialize>:
 8011490:	460a      	mov	r2, r1
 8011492:	b120      	cbz	r0, 801149e <_Int8__cdr_serialize+0xe>
 8011494:	f990 1000 	ldrsb.w	r1, [r0]
 8011498:	4610      	mov	r0, r2
 801149a:	f7fb be97 	b.w	800d1cc <ucdr_serialize_int8_t>
 801149e:	4770      	bx	lr

080114a0 <_Int8__get_serialized_size>:
 80114a0:	b130      	cbz	r0, 80114b0 <_Int8__get_serialized_size+0x10>
 80114a2:	b508      	push	{r3, lr}
 80114a4:	2101      	movs	r1, #1
 80114a6:	2000      	movs	r0, #0
 80114a8:	f7fc fdde 	bl	800e068 <ucdr_alignment>
 80114ac:	3001      	adds	r0, #1
 80114ae:	bd08      	pop	{r3, pc}
 80114b0:	4770      	bx	lr
 80114b2:	bf00      	nop

080114b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int8>:
 80114b4:	4800      	ldr	r0, [pc, #0]	@ (80114b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int8+0x4>)
 80114b6:	4770      	bx	lr
 80114b8:	20000a48 	.word	0x20000a48

080114bc <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Trigger>:
 80114bc:	4b04      	ldr	r3, [pc, #16]	@ (80114d0 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x14>)
 80114be:	681a      	ldr	r2, [r3, #0]
 80114c0:	b10a      	cbz	r2, 80114c6 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Trigger+0xa>
 80114c2:	4803      	ldr	r0, [pc, #12]	@ (80114d0 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x14>)
 80114c4:	4770      	bx	lr
 80114c6:	4a03      	ldr	r2, [pc, #12]	@ (80114d4 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x18>)
 80114c8:	4801      	ldr	r0, [pc, #4]	@ (80114d0 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x14>)
 80114ca:	6812      	ldr	r2, [r2, #0]
 80114cc:	601a      	str	r2, [r3, #0]
 80114ce:	4770      	bx	lr
 80114d0:	20000a7c 	.word	0x20000a7c
 80114d4:	200005bc 	.word	0x200005bc

080114d8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request>:
 80114d8:	4b06      	ldr	r3, [pc, #24]	@ (80114f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x1c>)
 80114da:	4807      	ldr	r0, [pc, #28]	@ (80114f8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x20>)
 80114dc:	4907      	ldr	r1, [pc, #28]	@ (80114fc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x24>)
 80114de:	4a08      	ldr	r2, [pc, #32]	@ (8011500 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x28>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	b410      	push	{r4}
 80114e4:	4c07      	ldr	r4, [pc, #28]	@ (8011504 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x2c>)
 80114e6:	6003      	str	r3, [r0, #0]
 80114e8:	6023      	str	r3, [r4, #0]
 80114ea:	600b      	str	r3, [r1, #0]
 80114ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114f0:	6013      	str	r3, [r2, #0]
 80114f2:	4770      	bx	lr
 80114f4:	200005bc 	.word	0x200005bc
 80114f8:	20000ad0 	.word	0x20000ad0
 80114fc:	20000ab0 	.word	0x20000ab0
 8011500:	20000a7c 	.word	0x20000a7c
 8011504:	20000af0 	.word	0x20000af0

08011508 <std_srvs__srv__Trigger_Event__rosidl_typesupport_introspection_c__size_function__Trigger_Event__request>:
 8011508:	6840      	ldr	r0, [r0, #4]
 801150a:	4770      	bx	lr

0801150c <std_srvs__srv__Trigger_Event__rosidl_typesupport_introspection_c__get_const_function__Trigger_Event__request>:
 801150c:	6800      	ldr	r0, [r0, #0]
 801150e:	4408      	add	r0, r1
 8011510:	4770      	bx	lr
 8011512:	bf00      	nop

08011514 <std_srvs__srv__Trigger_Event__rosidl_typesupport_introspection_c__fetch_function__Trigger_Event__request>:
 8011514:	6803      	ldr	r3, [r0, #0]
 8011516:	5c5b      	ldrb	r3, [r3, r1]
 8011518:	7013      	strb	r3, [r2, #0]
 801151a:	4770      	bx	lr

0801151c <std_srvs__srv__Trigger_Event__rosidl_typesupport_introspection_c__assign_function__Trigger_Event__request>:
 801151c:	6803      	ldr	r3, [r0, #0]
 801151e:	7812      	ldrb	r2, [r2, #0]
 8011520:	545a      	strb	r2, [r3, r1]
 8011522:	4770      	bx	lr

08011524 <std_srvs__srv__Trigger_Event__rosidl_typesupport_introspection_c__size_function__Trigger_Event__response>:
 8011524:	6840      	ldr	r0, [r0, #4]
 8011526:	4770      	bx	lr

08011528 <std_srvs__srv__Trigger_Event__rosidl_typesupport_introspection_c__get_const_function__Trigger_Event__response>:
 8011528:	6800      	ldr	r0, [r0, #0]
 801152a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 801152e:	4770      	bx	lr

08011530 <std_srvs__srv__Trigger_Event__rosidl_typesupport_introspection_c__fetch_function__Trigger_Event__response>:
 8011530:	6803      	ldr	r3, [r0, #0]
 8011532:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8011536:	4694      	mov	ip, r2
 8011538:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 801153a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 801153e:	4770      	bx	lr

08011540 <std_srvs__srv__Trigger_Event__rosidl_typesupport_introspection_c__assign_function__Trigger_Event__response>:
 8011540:	6803      	ldr	r3, [r0, #0]
 8011542:	eb03 1c01 	add.w	ip, r3, r1, lsl #4
 8011546:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8011548:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 801154c:	4770      	bx	lr
 801154e:	bf00      	nop

08011550 <std_srvs__srv__Trigger_Request__rosidl_typesupport_introspection_c__Trigger_Request_init_function>:
 8011550:	f009 be18 	b.w	801b184 <std_srvs__srv__Trigger_Request__init>

08011554 <std_srvs__srv__Trigger_Request__rosidl_typesupport_introspection_c__Trigger_Request_fini_function>:
 8011554:	f009 be1a 	b.w	801b18c <std_srvs__srv__Trigger_Request__fini>

08011558 <std_srvs__srv__Trigger_Response__rosidl_typesupport_introspection_c__Trigger_Response_init_function>:
 8011558:	f009 be52 	b.w	801b200 <std_srvs__srv__Trigger_Response__init>

0801155c <std_srvs__srv__Trigger_Response__rosidl_typesupport_introspection_c__Trigger_Response_fini_function>:
 801155c:	f009 be60 	b.w	801b220 <std_srvs__srv__Trigger_Response__fini>

08011560 <std_srvs__srv__Trigger_Event__rosidl_typesupport_introspection_c__Trigger_Event_init_function>:
 8011560:	f009 bed8 	b.w	801b314 <std_srvs__srv__Trigger_Event__init>

08011564 <std_srvs__srv__Trigger_Event__rosidl_typesupport_introspection_c__Trigger_Event_fini_function>:
 8011564:	f009 bef6 	b.w	801b354 <std_srvs__srv__Trigger_Event__fini>

08011568 <std_srvs__srv__Trigger_Event__rosidl_typesupport_introspection_c__resize_function__Trigger_Event__request>:
 8011568:	b538      	push	{r3, r4, r5, lr}
 801156a:	4604      	mov	r4, r0
 801156c:	460d      	mov	r5, r1
 801156e:	f009 fe33 	bl	801b1d8 <std_srvs__srv__Trigger_Request__Sequence__fini>
 8011572:	4629      	mov	r1, r5
 8011574:	4620      	mov	r0, r4
 8011576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801157a:	f009 be11 	b.w	801b1a0 <std_srvs__srv__Trigger_Request__Sequence__init>
 801157e:	bf00      	nop

08011580 <std_srvs__srv__Trigger_Event__rosidl_typesupport_introspection_c__resize_function__Trigger_Event__response>:
 8011580:	b538      	push	{r3, r4, r5, lr}
 8011582:	4604      	mov	r4, r0
 8011584:	460d      	mov	r5, r1
 8011586:	f009 fe9d 	bl	801b2c4 <std_srvs__srv__Trigger_Response__Sequence__fini>
 801158a:	4629      	mov	r1, r5
 801158c:	4620      	mov	r0, r4
 801158e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011592:	f009 be55 	b.w	801b240 <std_srvs__srv__Trigger_Response__Sequence__init>
 8011596:	bf00      	nop

08011598 <std_srvs__srv__Trigger_Event__rosidl_typesupport_introspection_c__get_function__Trigger_Event__request>:
 8011598:	6800      	ldr	r0, [r0, #0]
 801159a:	4408      	add	r0, r1
 801159c:	4770      	bx	lr
 801159e:	bf00      	nop

080115a0 <std_srvs__srv__Trigger_Event__rosidl_typesupport_introspection_c__get_function__Trigger_Event__response>:
 80115a0:	6800      	ldr	r0, [r0, #0]
 80115a2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 80115a6:	4770      	bx	lr

080115a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request>:
 80115a8:	4b04      	ldr	r3, [pc, #16]	@ (80115bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x14>)
 80115aa:	681a      	ldr	r2, [r3, #0]
 80115ac:	b10a      	cbz	r2, 80115b2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0xa>
 80115ae:	4803      	ldr	r0, [pc, #12]	@ (80115bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x14>)
 80115b0:	4770      	bx	lr
 80115b2:	4a03      	ldr	r2, [pc, #12]	@ (80115c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x18>)
 80115b4:	4801      	ldr	r0, [pc, #4]	@ (80115bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x14>)
 80115b6:	6812      	ldr	r2, [r2, #0]
 80115b8:	601a      	str	r2, [r3, #0]
 80115ba:	4770      	bx	lr
 80115bc:	20000cac 	.word	0x20000cac
 80115c0:	200005c0 	.word	0x200005c0

080115c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response>:
 80115c4:	4b04      	ldr	r3, [pc, #16]	@ (80115d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response+0x14>)
 80115c6:	681a      	ldr	r2, [r3, #0]
 80115c8:	b10a      	cbz	r2, 80115ce <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response+0xa>
 80115ca:	4803      	ldr	r0, [pc, #12]	@ (80115d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response+0x14>)
 80115cc:	4770      	bx	lr
 80115ce:	4a03      	ldr	r2, [pc, #12]	@ (80115dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response+0x18>)
 80115d0:	4801      	ldr	r0, [pc, #4]	@ (80115d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response+0x14>)
 80115d2:	6812      	ldr	r2, [r2, #0]
 80115d4:	601a      	str	r2, [r3, #0]
 80115d6:	4770      	bx	lr
 80115d8:	20000c1c 	.word	0x20000c1c
 80115dc:	200005c0 	.word	0x200005c0

080115e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event>:
 80115e0:	b508      	push	{r3, lr}
 80115e2:	f7ff fd99 	bl	8011118 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 80115e6:	4913      	ldr	r1, [pc, #76]	@ (8011634 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x54>)
 80115e8:	4b13      	ldr	r3, [pc, #76]	@ (8011638 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x58>)
 80115ea:	680a      	ldr	r2, [r1, #0]
 80115ec:	60d8      	str	r0, [r3, #12]
 80115ee:	b152      	cbz	r2, 8011606 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x26>
 80115f0:	4a12      	ldr	r2, [pc, #72]	@ (801163c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x5c>)
 80115f2:	6499      	str	r1, [r3, #72]	@ 0x48
 80115f4:	6811      	ldr	r1, [r2, #0]
 80115f6:	b171      	cbz	r1, 8011616 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x36>
 80115f8:	4911      	ldr	r1, [pc, #68]	@ (8011640 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x60>)
 80115fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80115fe:	680b      	ldr	r3, [r1, #0]
 8011600:	b193      	cbz	r3, 8011628 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x48>
 8011602:	480f      	ldr	r0, [pc, #60]	@ (8011640 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x60>)
 8011604:	bd08      	pop	{r3, pc}
 8011606:	4a0f      	ldr	r2, [pc, #60]	@ (8011644 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x64>)
 8011608:	6499      	str	r1, [r3, #72]	@ 0x48
 801160a:	6812      	ldr	r2, [r2, #0]
 801160c:	600a      	str	r2, [r1, #0]
 801160e:	4a0b      	ldr	r2, [pc, #44]	@ (801163c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x5c>)
 8011610:	6811      	ldr	r1, [r2, #0]
 8011612:	2900      	cmp	r1, #0
 8011614:	d1f0      	bne.n	80115f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x18>
 8011616:	490b      	ldr	r1, [pc, #44]	@ (8011644 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x64>)
 8011618:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 801161c:	6809      	ldr	r1, [r1, #0]
 801161e:	6011      	str	r1, [r2, #0]
 8011620:	4907      	ldr	r1, [pc, #28]	@ (8011640 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x60>)
 8011622:	680b      	ldr	r3, [r1, #0]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d1ec      	bne.n	8011602 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x22>
 8011628:	4b06      	ldr	r3, [pc, #24]	@ (8011644 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x64>)
 801162a:	4805      	ldr	r0, [pc, #20]	@ (8011640 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x60>)
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	600b      	str	r3, [r1, #0]
 8011630:	bd08      	pop	{r3, pc}
 8011632:	bf00      	nop
 8011634:	20000cac 	.word	0x20000cac
 8011638:	20000b68 	.word	0x20000b68
 801163c:	20000c1c 	.word	0x20000c1c
 8011640:	20000b50 	.word	0x20000b50
 8011644:	200005c0 	.word	0x200005c0

08011648 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger>:
 8011648:	4b25      	ldr	r3, [pc, #148]	@ (80116e0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x98>)
 801164a:	681a      	ldr	r2, [r3, #0]
 801164c:	b510      	push	{r4, lr}
 801164e:	b142      	cbz	r2, 8011662 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x1a>
 8011650:	685c      	ldr	r4, [r3, #4]
 8011652:	68a3      	ldr	r3, [r4, #8]
 8011654:	b163      	cbz	r3, 8011670 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x28>
 8011656:	68e3      	ldr	r3, [r4, #12]
 8011658:	b193      	cbz	r3, 8011680 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x38>
 801165a:	6923      	ldr	r3, [r4, #16]
 801165c:	b1c3      	cbz	r3, 8011690 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x48>
 801165e:	4820      	ldr	r0, [pc, #128]	@ (80116e0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x98>)
 8011660:	bd10      	pop	{r4, pc}
 8011662:	4a20      	ldr	r2, [pc, #128]	@ (80116e4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x9c>)
 8011664:	685c      	ldr	r4, [r3, #4]
 8011666:	6812      	ldr	r2, [r2, #0]
 8011668:	601a      	str	r2, [r3, #0]
 801166a:	68a3      	ldr	r3, [r4, #8]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d1f2      	bne.n	8011656 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0xe>
 8011670:	4a1d      	ldr	r2, [pc, #116]	@ (80116e8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0xa0>)
 8011672:	6813      	ldr	r3, [r2, #0]
 8011674:	b303      	cbz	r3, 80116b8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x70>
 8011676:	6853      	ldr	r3, [r2, #4]
 8011678:	60a3      	str	r3, [r4, #8]
 801167a:	68e3      	ldr	r3, [r4, #12]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d1ec      	bne.n	801165a <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x12>
 8011680:	4b1a      	ldr	r3, [pc, #104]	@ (80116ec <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0xa4>)
 8011682:	681a      	ldr	r2, [r3, #0]
 8011684:	b1e2      	cbz	r2, 80116c0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x78>
 8011686:	685b      	ldr	r3, [r3, #4]
 8011688:	60e3      	str	r3, [r4, #12]
 801168a:	6923      	ldr	r3, [r4, #16]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d1e6      	bne.n	801165e <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x16>
 8011690:	f7ff fd42 	bl	8011118 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 8011694:	4a14      	ldr	r2, [pc, #80]	@ (80116e8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0xa0>)
 8011696:	4916      	ldr	r1, [pc, #88]	@ (80116f0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0xa8>)
 8011698:	6813      	ldr	r3, [r2, #0]
 801169a:	60c8      	str	r0, [r1, #12]
 801169c:	b1e3      	cbz	r3, 80116d8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x90>
 801169e:	4b13      	ldr	r3, [pc, #76]	@ (80116ec <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0xa4>)
 80116a0:	648a      	str	r2, [r1, #72]	@ 0x48
 80116a2:	681a      	ldr	r2, [r3, #0]
 80116a4:	b1a2      	cbz	r2, 80116d0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x88>
 80116a6:	4a13      	ldr	r2, [pc, #76]	@ (80116f4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0xac>)
 80116a8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 80116ac:	6813      	ldr	r3, [r2, #0]
 80116ae:	b15b      	cbz	r3, 80116c8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x80>
 80116b0:	6853      	ldr	r3, [r2, #4]
 80116b2:	480b      	ldr	r0, [pc, #44]	@ (80116e0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x98>)
 80116b4:	6123      	str	r3, [r4, #16]
 80116b6:	bd10      	pop	{r4, pc}
 80116b8:	4b0a      	ldr	r3, [pc, #40]	@ (80116e4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x9c>)
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	6013      	str	r3, [r2, #0]
 80116be:	e7da      	b.n	8011676 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x2e>
 80116c0:	4a08      	ldr	r2, [pc, #32]	@ (80116e4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x9c>)
 80116c2:	6812      	ldr	r2, [r2, #0]
 80116c4:	601a      	str	r2, [r3, #0]
 80116c6:	e7de      	b.n	8011686 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x3e>
 80116c8:	4b06      	ldr	r3, [pc, #24]	@ (80116e4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x9c>)
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	6013      	str	r3, [r2, #0]
 80116ce:	e7ef      	b.n	80116b0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x68>
 80116d0:	4a04      	ldr	r2, [pc, #16]	@ (80116e4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x9c>)
 80116d2:	6812      	ldr	r2, [r2, #0]
 80116d4:	601a      	str	r2, [r3, #0]
 80116d6:	e7e6      	b.n	80116a6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x5e>
 80116d8:	4b02      	ldr	r3, [pc, #8]	@ (80116e4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x9c>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	6013      	str	r3, [r2, #0]
 80116de:	e7de      	b.n	801169e <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x56>
 80116e0:	20000b10 	.word	0x20000b10
 80116e4:	200005c0 	.word	0x200005c0
 80116e8:	20000cac 	.word	0x20000cac
 80116ec:	20000c1c 	.word	0x20000c1c
 80116f0:	20000b68 	.word	0x20000b68
 80116f4:	20000b50 	.word	0x20000b50

080116f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request>:
 80116f8:	4800      	ldr	r0, [pc, #0]	@ (80116fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x4>)
 80116fa:	4770      	bx	lr
 80116fc:	20000da4 	.word	0x20000da4

08011700 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response>:
 8011700:	4800      	ldr	r0, [pc, #0]	@ (8011704 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response+0x4>)
 8011702:	4770      	bx	lr
 8011704:	20000d70 	.word	0x20000d70

08011708 <_Trigger_Request__max_serialized_size>:
 8011708:	b508      	push	{r3, lr}
 801170a:	2101      	movs	r1, #1
 801170c:	2000      	movs	r0, #0
 801170e:	f7fc fcab 	bl	800e068 <ucdr_alignment>
 8011712:	3001      	adds	r0, #1
 8011714:	bd08      	pop	{r3, pc}
 8011716:	bf00      	nop

08011718 <_Trigger_Request__cdr_deserialize>:
 8011718:	b109      	cbz	r1, 801171e <_Trigger_Request__cdr_deserialize+0x6>
 801171a:	f7fb b845 	b.w	800c7a8 <ucdr_deserialize_uint8_t>
 801171e:	4608      	mov	r0, r1
 8011720:	4770      	bx	lr
 8011722:	bf00      	nop

08011724 <_Trigger_Event__max_serialized_size>:
 8011724:	b500      	push	{lr}
 8011726:	b083      	sub	sp, #12
 8011728:	2301      	movs	r3, #1
 801172a:	2100      	movs	r1, #0
 801172c:	f10d 0007 	add.w	r0, sp, #7
 8011730:	f88d 3007 	strb.w	r3, [sp, #7]
 8011734:	f7ff fd9a 	bl	801126c <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 8011738:	b003      	add	sp, #12
 801173a:	f85d fb04 	ldr.w	pc, [sp], #4
 801173e:	bf00      	nop

08011740 <_Trigger_Event__cdr_deserialize>:
 8011740:	2900      	cmp	r1, #0
 8011742:	d042      	beq.n	80117ca <_Trigger_Event__cdr_deserialize+0x8a>
 8011744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011746:	b083      	sub	sp, #12
 8011748:	4606      	mov	r6, r0
 801174a:	460d      	mov	r5, r1
 801174c:	f7ff fdae 	bl	80112ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 8011750:	6843      	ldr	r3, [r0, #4]
 8011752:	4629      	mov	r1, r5
 8011754:	68db      	ldr	r3, [r3, #12]
 8011756:	4630      	mov	r0, r6
 8011758:	4798      	blx	r3
 801175a:	a901      	add	r1, sp, #4
 801175c:	4630      	mov	r0, r6
 801175e:	f7fb fb53 	bl	800ce08 <ucdr_deserialize_uint32_t>
 8011762:	9b01      	ldr	r3, [sp, #4]
 8011764:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8011766:	429a      	cmp	r2, r3
 8011768:	d32c      	bcc.n	80117c4 <_Trigger_Event__cdr_deserialize+0x84>
 801176a:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801176c:	b173      	cbz	r3, 801178c <_Trigger_Event__cdr_deserialize+0x4c>
 801176e:	4f18      	ldr	r7, [pc, #96]	@ (80117d0 <_Trigger_Event__cdr_deserialize+0x90>)
 8011770:	2400      	movs	r4, #0
 8011772:	e003      	b.n	801177c <_Trigger_Event__cdr_deserialize+0x3c>
 8011774:	9b01      	ldr	r3, [sp, #4]
 8011776:	3401      	adds	r4, #1
 8011778:	42a3      	cmp	r3, r4
 801177a:	d907      	bls.n	801178c <_Trigger_Event__cdr_deserialize+0x4c>
 801177c:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	4421      	add	r1, r4
 8011782:	68db      	ldr	r3, [r3, #12]
 8011784:	4630      	mov	r0, r6
 8011786:	4798      	blx	r3
 8011788:	2800      	cmp	r0, #0
 801178a:	d1f3      	bne.n	8011774 <_Trigger_Event__cdr_deserialize+0x34>
 801178c:	a901      	add	r1, sp, #4
 801178e:	4630      	mov	r0, r6
 8011790:	f7fb fb3a 	bl	800ce08 <ucdr_deserialize_uint32_t>
 8011794:	9b01      	ldr	r3, [sp, #4]
 8011796:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8011798:	429a      	cmp	r2, r3
 801179a:	d313      	bcc.n	80117c4 <_Trigger_Event__cdr_deserialize+0x84>
 801179c:	63ab      	str	r3, [r5, #56]	@ 0x38
 801179e:	b17b      	cbz	r3, 80117c0 <_Trigger_Event__cdr_deserialize+0x80>
 80117a0:	4f0c      	ldr	r7, [pc, #48]	@ (80117d4 <_Trigger_Event__cdr_deserialize+0x94>)
 80117a2:	2400      	movs	r4, #0
 80117a4:	e002      	b.n	80117ac <_Trigger_Event__cdr_deserialize+0x6c>
 80117a6:	9b01      	ldr	r3, [sp, #4]
 80117a8:	42a3      	cmp	r3, r4
 80117aa:	d909      	bls.n	80117c0 <_Trigger_Event__cdr_deserialize+0x80>
 80117ac:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 80117b4:	68db      	ldr	r3, [r3, #12]
 80117b6:	4630      	mov	r0, r6
 80117b8:	4798      	blx	r3
 80117ba:	3401      	adds	r4, #1
 80117bc:	2800      	cmp	r0, #0
 80117be:	d1f2      	bne.n	80117a6 <_Trigger_Event__cdr_deserialize+0x66>
 80117c0:	b003      	add	sp, #12
 80117c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117c4:	2000      	movs	r0, #0
 80117c6:	b003      	add	sp, #12
 80117c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117ca:	2000      	movs	r0, #0
 80117cc:	4770      	bx	lr
 80117ce:	bf00      	nop
 80117d0:	20000da4 	.word	0x20000da4
 80117d4:	20000d70 	.word	0x20000d70

080117d8 <_Trigger_Event__cdr_serialize>:
 80117d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80117dc:	2800      	cmp	r0, #0
 80117de:	d038      	beq.n	8011852 <_Trigger_Event__cdr_serialize+0x7a>
 80117e0:	460e      	mov	r6, r1
 80117e2:	4604      	mov	r4, r0
 80117e4:	f7ff fd62 	bl	80112ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 80117e8:	6843      	ldr	r3, [r0, #4]
 80117ea:	4631      	mov	r1, r6
 80117ec:	689b      	ldr	r3, [r3, #8]
 80117ee:	4620      	mov	r0, r4
 80117f0:	4798      	blx	r3
 80117f2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80117f4:	4630      	mov	r0, r6
 80117f6:	4639      	mov	r1, r7
 80117f8:	f7fb f9dc 	bl	800cbb4 <ucdr_serialize_uint32_t>
 80117fc:	b180      	cbz	r0, 8011820 <_Trigger_Event__cdr_serialize+0x48>
 80117fe:	b17f      	cbz	r7, 8011820 <_Trigger_Event__cdr_serialize+0x48>
 8011800:	f8df 8058 	ldr.w	r8, [pc, #88]	@ 801185c <_Trigger_Event__cdr_serialize+0x84>
 8011804:	2500      	movs	r5, #0
 8011806:	e002      	b.n	801180e <_Trigger_Event__cdr_serialize+0x36>
 8011808:	3501      	adds	r5, #1
 801180a:	42af      	cmp	r7, r5
 801180c:	d008      	beq.n	8011820 <_Trigger_Event__cdr_serialize+0x48>
 801180e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8011810:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011814:	4631      	mov	r1, r6
 8011816:	689b      	ldr	r3, [r3, #8]
 8011818:	4428      	add	r0, r5
 801181a:	4798      	blx	r3
 801181c:	2800      	cmp	r0, #0
 801181e:	d1f3      	bne.n	8011808 <_Trigger_Event__cdr_serialize+0x30>
 8011820:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
 8011822:	4630      	mov	r0, r6
 8011824:	4639      	mov	r1, r7
 8011826:	f7fb f9c5 	bl	800cbb4 <ucdr_serialize_uint32_t>
 801182a:	4680      	mov	r8, r0
 801182c:	b188      	cbz	r0, 8011852 <_Trigger_Event__cdr_serialize+0x7a>
 801182e:	b197      	cbz	r7, 8011856 <_Trigger_Event__cdr_serialize+0x7e>
 8011830:	f8df 902c 	ldr.w	r9, [pc, #44]	@ 8011860 <_Trigger_Event__cdr_serialize+0x88>
 8011834:	2500      	movs	r5, #0
 8011836:	e002      	b.n	801183e <_Trigger_Event__cdr_serialize+0x66>
 8011838:	3501      	adds	r5, #1
 801183a:	42af      	cmp	r7, r5
 801183c:	d00b      	beq.n	8011856 <_Trigger_Event__cdr_serialize+0x7e>
 801183e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8011840:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011844:	4631      	mov	r1, r6
 8011846:	689b      	ldr	r3, [r3, #8]
 8011848:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 801184c:	4798      	blx	r3
 801184e:	2800      	cmp	r0, #0
 8011850:	d1f2      	bne.n	8011838 <_Trigger_Event__cdr_serialize+0x60>
 8011852:	f04f 0800 	mov.w	r8, #0
 8011856:	4640      	mov	r0, r8
 8011858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801185c:	20000da4 	.word	0x20000da4
 8011860:	20000d70 	.word	0x20000d70

08011864 <get_serialized_size_std_srvs__srv__Trigger_Request>:
 8011864:	b508      	push	{r3, lr}
 8011866:	b120      	cbz	r0, 8011872 <get_serialized_size_std_srvs__srv__Trigger_Request+0xe>
 8011868:	4608      	mov	r0, r1
 801186a:	2101      	movs	r1, #1
 801186c:	f7fc fbfc 	bl	800e068 <ucdr_alignment>
 8011870:	3001      	adds	r0, #1
 8011872:	bd08      	pop	{r3, pc}

08011874 <get_serialized_size_std_srvs__srv__Trigger_Response>:
 8011874:	b570      	push	{r4, r5, r6, lr}
 8011876:	4605      	mov	r5, r0
 8011878:	b180      	cbz	r0, 801189c <get_serialized_size_std_srvs__srv__Trigger_Response+0x28>
 801187a:	460c      	mov	r4, r1
 801187c:	4620      	mov	r0, r4
 801187e:	2101      	movs	r1, #1
 8011880:	f7fc fbf2 	bl	800e068 <ucdr_alignment>
 8011884:	1c66      	adds	r6, r4, #1
 8011886:	4406      	add	r6, r0
 8011888:	2104      	movs	r1, #4
 801188a:	4630      	mov	r0, r6
 801188c:	f7fc fbec 	bl	800e068 <ucdr_alignment>
 8011890:	68ab      	ldr	r3, [r5, #8]
 8011892:	f1c4 0405 	rsb	r4, r4, #5
 8011896:	441c      	add	r4, r3
 8011898:	4404      	add	r4, r0
 801189a:	19a0      	adds	r0, r4, r6
 801189c:	bd70      	pop	{r4, r5, r6, pc}
 801189e:	bf00      	nop

080118a0 <_Trigger_Request__cdr_serialize>:
 80118a0:	460a      	mov	r2, r1
 80118a2:	b118      	cbz	r0, 80118ac <_Trigger_Request__cdr_serialize+0xc>
 80118a4:	7801      	ldrb	r1, [r0, #0]
 80118a6:	4610      	mov	r0, r2
 80118a8:	f7fa bf68 	b.w	800c77c <ucdr_serialize_uint8_t>
 80118ac:	4770      	bx	lr
 80118ae:	bf00      	nop

080118b0 <_Trigger_Response__cdr_deserialize>:
 80118b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118b2:	460c      	mov	r4, r1
 80118b4:	b083      	sub	sp, #12
 80118b6:	b1b9      	cbz	r1, 80118e8 <_Trigger_Response__cdr_deserialize+0x38>
 80118b8:	4606      	mov	r6, r0
 80118ba:	f7fa ff47 	bl	800c74c <ucdr_deserialize_bool>
 80118be:	68e7      	ldr	r7, [r4, #12]
 80118c0:	6861      	ldr	r1, [r4, #4]
 80118c2:	ab01      	add	r3, sp, #4
 80118c4:	463a      	mov	r2, r7
 80118c6:	4630      	mov	r0, r6
 80118c8:	f001 f95a 	bl	8012b80 <ucdr_deserialize_sequence_char>
 80118cc:	9b01      	ldr	r3, [sp, #4]
 80118ce:	4605      	mov	r5, r0
 80118d0:	b920      	cbnz	r0, 80118dc <_Trigger_Response__cdr_deserialize+0x2c>
 80118d2:	429f      	cmp	r7, r3
 80118d4:	d30c      	bcc.n	80118f0 <_Trigger_Response__cdr_deserialize+0x40>
 80118d6:	4628      	mov	r0, r5
 80118d8:	b003      	add	sp, #12
 80118da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118dc:	b103      	cbz	r3, 80118e0 <_Trigger_Response__cdr_deserialize+0x30>
 80118de:	3b01      	subs	r3, #1
 80118e0:	4628      	mov	r0, r5
 80118e2:	60a3      	str	r3, [r4, #8]
 80118e4:	b003      	add	sp, #12
 80118e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118e8:	460d      	mov	r5, r1
 80118ea:	4628      	mov	r0, r5
 80118ec:	b003      	add	sp, #12
 80118ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118f0:	2101      	movs	r1, #1
 80118f2:	75b0      	strb	r0, [r6, #22]
 80118f4:	7571      	strb	r1, [r6, #21]
 80118f6:	60a0      	str	r0, [r4, #8]
 80118f8:	4630      	mov	r0, r6
 80118fa:	f7fc fbcb 	bl	800e094 <ucdr_align_to>
 80118fe:	4630      	mov	r0, r6
 8011900:	9901      	ldr	r1, [sp, #4]
 8011902:	f7fc fbfd 	bl	800e100 <ucdr_advance_buffer>
 8011906:	4628      	mov	r0, r5
 8011908:	b003      	add	sp, #12
 801190a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801190c <_Trigger_Response__cdr_serialize>:
 801190c:	b1e0      	cbz	r0, 8011948 <_Trigger_Response__cdr_serialize+0x3c>
 801190e:	b570      	push	{r4, r5, r6, lr}
 8011910:	460d      	mov	r5, r1
 8011912:	4604      	mov	r4, r0
 8011914:	7801      	ldrb	r1, [r0, #0]
 8011916:	4628      	mov	r0, r5
 8011918:	f7fa ff02 	bl	800c720 <ucdr_serialize_bool>
 801191c:	6866      	ldr	r6, [r4, #4]
 801191e:	b156      	cbz	r6, 8011936 <_Trigger_Response__cdr_serialize+0x2a>
 8011920:	4630      	mov	r0, r6
 8011922:	f7ee fcdd 	bl	80002e0 <strlen>
 8011926:	4631      	mov	r1, r6
 8011928:	60a0      	str	r0, [r4, #8]
 801192a:	1c42      	adds	r2, r0, #1
 801192c:	4628      	mov	r0, r5
 801192e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011932:	f001 b913 	b.w	8012b5c <ucdr_serialize_sequence_char>
 8011936:	4630      	mov	r0, r6
 8011938:	60a0      	str	r0, [r4, #8]
 801193a:	4632      	mov	r2, r6
 801193c:	4631      	mov	r1, r6
 801193e:	4628      	mov	r0, r5
 8011940:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011944:	f001 b90a 	b.w	8012b5c <ucdr_serialize_sequence_char>
 8011948:	4770      	bx	lr
 801194a:	bf00      	nop

0801194c <get_serialized_size_std_srvs__srv__Trigger_Event.part.0>:
 801194c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011950:	4689      	mov	r9, r1
 8011952:	4607      	mov	r7, r0
 8011954:	f7ff fbf6 	bl	8011144 <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 8011958:	eb09 0400 	add.w	r4, r9, r0
 801195c:	2104      	movs	r1, #4
 801195e:	4620      	mov	r0, r4
 8011960:	f8d7 802c 	ldr.w	r8, [r7, #44]	@ 0x2c
 8011964:	f7fc fb80 	bl	800e068 <ucdr_alignment>
 8011968:	1d06      	adds	r6, r0, #4
 801196a:	4426      	add	r6, r4
 801196c:	f1b8 0f00 	cmp.w	r8, #0
 8011970:	d017      	beq.n	80119a2 <get_serialized_size_std_srvs__srv__Trigger_Event.part.0+0x56>
 8011972:	f8df a080 	ldr.w	sl, [pc, #128]	@ 80119f4 <get_serialized_size_std_srvs__srv__Trigger_Event.part.0+0xa8>
 8011976:	2500      	movs	r5, #0
 8011978:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801197a:	f8da 3004 	ldr.w	r3, [sl, #4]
 801197e:	4631      	mov	r1, r6
 8011980:	695b      	ldr	r3, [r3, #20]
 8011982:	4428      	add	r0, r5
 8011984:	4798      	blx	r3
 8011986:	2804      	cmp	r0, #4
 8011988:	4601      	mov	r1, r0
 801198a:	4604      	mov	r4, r0
 801198c:	bf28      	it	cs
 801198e:	2104      	movcs	r1, #4
 8011990:	4630      	mov	r0, r6
 8011992:	f7fc fb69 	bl	800e068 <ucdr_alignment>
 8011996:	3501      	adds	r5, #1
 8011998:	4434      	add	r4, r6
 801199a:	45a8      	cmp	r8, r5
 801199c:	eb00 0604 	add.w	r6, r0, r4
 80119a0:	d1ea      	bne.n	8011978 <get_serialized_size_std_srvs__srv__Trigger_Event.part.0+0x2c>
 80119a2:	2104      	movs	r1, #4
 80119a4:	4630      	mov	r0, r6
 80119a6:	f8d7 8038 	ldr.w	r8, [r7, #56]	@ 0x38
 80119aa:	f7fc fb5d 	bl	800e068 <ucdr_alignment>
 80119ae:	1985      	adds	r5, r0, r6
 80119b0:	3504      	adds	r5, #4
 80119b2:	f1b8 0f00 	cmp.w	r8, #0
 80119b6:	d018      	beq.n	80119ea <get_serialized_size_std_srvs__srv__Trigger_Event.part.0+0x9e>
 80119b8:	f8df a03c 	ldr.w	sl, [pc, #60]	@ 80119f8 <get_serialized_size_std_srvs__srv__Trigger_Event.part.0+0xac>
 80119bc:	2600      	movs	r6, #0
 80119be:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80119c0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80119c4:	4629      	mov	r1, r5
 80119c6:	695b      	ldr	r3, [r3, #20]
 80119c8:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 80119cc:	4798      	blx	r3
 80119ce:	2804      	cmp	r0, #4
 80119d0:	4601      	mov	r1, r0
 80119d2:	4604      	mov	r4, r0
 80119d4:	bf28      	it	cs
 80119d6:	2104      	movcs	r1, #4
 80119d8:	4628      	mov	r0, r5
 80119da:	f7fc fb45 	bl	800e068 <ucdr_alignment>
 80119de:	3601      	adds	r6, #1
 80119e0:	442c      	add	r4, r5
 80119e2:	45b0      	cmp	r8, r6
 80119e4:	eb00 0504 	add.w	r5, r0, r4
 80119e8:	d1e9      	bne.n	80119be <get_serialized_size_std_srvs__srv__Trigger_Event.part.0+0x72>
 80119ea:	eba5 0009 	sub.w	r0, r5, r9
 80119ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119f2:	bf00      	nop
 80119f4:	20000da4 	.word	0x20000da4
 80119f8:	20000d70 	.word	0x20000d70

080119fc <get_serialized_size_std_srvs__srv__Trigger_Event>:
 80119fc:	b108      	cbz	r0, 8011a02 <get_serialized_size_std_srvs__srv__Trigger_Event+0x6>
 80119fe:	f7ff bfa5 	b.w	801194c <get_serialized_size_std_srvs__srv__Trigger_Event.part.0>
 8011a02:	4770      	bx	lr

08011a04 <_Trigger_Event__get_serialized_size>:
 8011a04:	b110      	cbz	r0, 8011a0c <_Trigger_Event__get_serialized_size+0x8>
 8011a06:	2100      	movs	r1, #0
 8011a08:	f7ff bfa0 	b.w	801194c <get_serialized_size_std_srvs__srv__Trigger_Event.part.0>
 8011a0c:	4770      	bx	lr
 8011a0e:	bf00      	nop

08011a10 <_Trigger_Request__get_serialized_size>:
 8011a10:	b130      	cbz	r0, 8011a20 <_Trigger_Request__get_serialized_size+0x10>
 8011a12:	b508      	push	{r3, lr}
 8011a14:	2101      	movs	r1, #1
 8011a16:	2000      	movs	r0, #0
 8011a18:	f7fc fb26 	bl	800e068 <ucdr_alignment>
 8011a1c:	3001      	adds	r0, #1
 8011a1e:	bd08      	pop	{r3, pc}
 8011a20:	4770      	bx	lr
 8011a22:	bf00      	nop

08011a24 <_Trigger_Response__max_serialized_size>:
 8011a24:	b508      	push	{r3, lr}
 8011a26:	2101      	movs	r1, #1
 8011a28:	2000      	movs	r0, #0
 8011a2a:	f7fc fb1d 	bl	800e068 <ucdr_alignment>
 8011a2e:	3001      	adds	r0, #1
 8011a30:	bd08      	pop	{r3, pc}
 8011a32:	bf00      	nop

08011a34 <_Trigger_Response__get_serialized_size>:
 8011a34:	b538      	push	{r3, r4, r5, lr}
 8011a36:	4604      	mov	r4, r0
 8011a38:	b160      	cbz	r0, 8011a54 <_Trigger_Response__get_serialized_size+0x20>
 8011a3a:	2101      	movs	r1, #1
 8011a3c:	2000      	movs	r0, #0
 8011a3e:	f7fc fb13 	bl	800e068 <ucdr_alignment>
 8011a42:	1c45      	adds	r5, r0, #1
 8011a44:	2104      	movs	r1, #4
 8011a46:	4628      	mov	r0, r5
 8011a48:	f7fc fb0e 	bl	800e068 <ucdr_alignment>
 8011a4c:	68a4      	ldr	r4, [r4, #8]
 8011a4e:	3405      	adds	r4, #5
 8011a50:	4404      	add	r4, r0
 8011a52:	1960      	adds	r0, r4, r5
 8011a54:	bd38      	pop	{r3, r4, r5, pc}
 8011a56:	bf00      	nop

08011a58 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event>:
 8011a58:	4800      	ldr	r0, [pc, #0]	@ (8011a5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__Trigger_Event+0x4>)
 8011a5a:	4770      	bx	lr
 8011a5c:	20000d3c 	.word	0x20000d3c

08011a60 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__Trigger>:
 8011a60:	4800      	ldr	r0, [pc, #0]	@ (8011a64 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x4>)
 8011a62:	4770      	bx	lr
 8011a64:	20000d00 	.word	0x20000d00

08011a68 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8011a68:	f009 bd3c 	b.w	801b4e4 <builtin_interfaces__msg__Time__init>

08011a6c <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8011a6c:	f009 bd3e 	b.w	801b4ec <builtin_interfaces__msg__Time__fini>

08011a70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8011a70:	4b04      	ldr	r3, [pc, #16]	@ (8011a84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8011a72:	681a      	ldr	r2, [r3, #0]
 8011a74:	b10a      	cbz	r2, 8011a7a <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 8011a76:	4803      	ldr	r0, [pc, #12]	@ (8011a84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8011a78:	4770      	bx	lr
 8011a7a:	4a03      	ldr	r2, [pc, #12]	@ (8011a88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8011a7c:	4801      	ldr	r0, [pc, #4]	@ (8011a84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8011a7e:	6812      	ldr	r2, [r2, #0]
 8011a80:	601a      	str	r2, [r3, #0]
 8011a82:	4770      	bx	lr
 8011a84:	20000dd8 	.word	0x20000dd8
 8011a88:	200005c0 	.word	0x200005c0

08011a8c <get_serialized_size_builtin_interfaces__msg__Time>:
 8011a8c:	b180      	cbz	r0, 8011ab0 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8011a8e:	b538      	push	{r3, r4, r5, lr}
 8011a90:	460d      	mov	r5, r1
 8011a92:	4628      	mov	r0, r5
 8011a94:	2104      	movs	r1, #4
 8011a96:	f7fc fae7 	bl	800e068 <ucdr_alignment>
 8011a9a:	2104      	movs	r1, #4
 8011a9c:	186c      	adds	r4, r5, r1
 8011a9e:	4404      	add	r4, r0
 8011aa0:	4620      	mov	r0, r4
 8011aa2:	f7fc fae1 	bl	800e068 <ucdr_alignment>
 8011aa6:	f1c5 0504 	rsb	r5, r5, #4
 8011aaa:	4405      	add	r5, r0
 8011aac:	1928      	adds	r0, r5, r4
 8011aae:	bd38      	pop	{r3, r4, r5, pc}
 8011ab0:	4770      	bx	lr
 8011ab2:	bf00      	nop

08011ab4 <_Time__cdr_deserialize>:
 8011ab4:	b538      	push	{r3, r4, r5, lr}
 8011ab6:	460c      	mov	r4, r1
 8011ab8:	b141      	cbz	r1, 8011acc <_Time__cdr_deserialize+0x18>
 8011aba:	4605      	mov	r5, r0
 8011abc:	f7fb fd52 	bl	800d564 <ucdr_deserialize_int32_t>
 8011ac0:	1d21      	adds	r1, r4, #4
 8011ac2:	4628      	mov	r0, r5
 8011ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ac8:	f7fb b99e 	b.w	800ce08 <ucdr_deserialize_uint32_t>
 8011acc:	4608      	mov	r0, r1
 8011ace:	bd38      	pop	{r3, r4, r5, pc}

08011ad0 <_Time__cdr_serialize>:
 8011ad0:	b160      	cbz	r0, 8011aec <_Time__cdr_serialize+0x1c>
 8011ad2:	b538      	push	{r3, r4, r5, lr}
 8011ad4:	460d      	mov	r5, r1
 8011ad6:	4604      	mov	r4, r0
 8011ad8:	6801      	ldr	r1, [r0, #0]
 8011ada:	4628      	mov	r0, r5
 8011adc:	f7fb fca8 	bl	800d430 <ucdr_serialize_int32_t>
 8011ae0:	6861      	ldr	r1, [r4, #4]
 8011ae2:	4628      	mov	r0, r5
 8011ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ae8:	f7fb b864 	b.w	800cbb4 <ucdr_serialize_uint32_t>
 8011aec:	4770      	bx	lr
 8011aee:	bf00      	nop

08011af0 <_Time__get_serialized_size>:
 8011af0:	b160      	cbz	r0, 8011b0c <_Time__get_serialized_size+0x1c>
 8011af2:	b510      	push	{r4, lr}
 8011af4:	2104      	movs	r1, #4
 8011af6:	2000      	movs	r0, #0
 8011af8:	f7fc fab6 	bl	800e068 <ucdr_alignment>
 8011afc:	1d04      	adds	r4, r0, #4
 8011afe:	2104      	movs	r1, #4
 8011b00:	4620      	mov	r0, r4
 8011b02:	f7fc fab1 	bl	800e068 <ucdr_alignment>
 8011b06:	3004      	adds	r0, #4
 8011b08:	4420      	add	r0, r4
 8011b0a:	bd10      	pop	{r4, pc}
 8011b0c:	4770      	bx	lr
 8011b0e:	bf00      	nop

08011b10 <_Time__max_serialized_size>:
 8011b10:	b510      	push	{r4, lr}
 8011b12:	2104      	movs	r1, #4
 8011b14:	2000      	movs	r0, #0
 8011b16:	f7fc faa7 	bl	800e068 <ucdr_alignment>
 8011b1a:	1d04      	adds	r4, r0, #4
 8011b1c:	2104      	movs	r1, #4
 8011b1e:	4620      	mov	r0, r4
 8011b20:	f7fc faa2 	bl	800e068 <ucdr_alignment>
 8011b24:	3004      	adds	r0, #4
 8011b26:	4420      	add	r0, r4
 8011b28:	bd10      	pop	{r4, pc}
 8011b2a:	bf00      	nop

08011b2c <max_serialized_size_builtin_interfaces__msg__Time>:
 8011b2c:	b538      	push	{r3, r4, r5, lr}
 8011b2e:	460c      	mov	r4, r1
 8011b30:	2301      	movs	r3, #1
 8011b32:	7003      	strb	r3, [r0, #0]
 8011b34:	2104      	movs	r1, #4
 8011b36:	4620      	mov	r0, r4
 8011b38:	f7fc fa96 	bl	800e068 <ucdr_alignment>
 8011b3c:	2104      	movs	r1, #4
 8011b3e:	1863      	adds	r3, r4, r1
 8011b40:	18c5      	adds	r5, r0, r3
 8011b42:	4628      	mov	r0, r5
 8011b44:	f7fc fa90 	bl	800e068 <ucdr_alignment>
 8011b48:	f1c4 0404 	rsb	r4, r4, #4
 8011b4c:	4420      	add	r0, r4
 8011b4e:	4428      	add	r0, r5
 8011b50:	bd38      	pop	{r3, r4, r5, pc}
 8011b52:	bf00      	nop

08011b54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8011b54:	4800      	ldr	r0, [pc, #0]	@ (8011b58 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 8011b56:	4770      	bx	lr
 8011b58:	20000e68 	.word	0x20000e68

08011b5c <geometry_msgs__msg__Twist__get_type_hash>:
 8011b5c:	4800      	ldr	r0, [pc, #0]	@ (8011b60 <geometry_msgs__msg__Twist__get_type_hash+0x4>)
 8011b5e:	4770      	bx	lr
 8011b60:	20000e9c 	.word	0x20000e9c

08011b64 <geometry_msgs__msg__Twist__get_type_description>:
 8011b64:	b510      	push	{r4, lr}
 8011b66:	4c08      	ldr	r4, [pc, #32]	@ (8011b88 <geometry_msgs__msg__Twist__get_type_description+0x24>)
 8011b68:	7820      	ldrb	r0, [r4, #0]
 8011b6a:	b108      	cbz	r0, 8011b70 <geometry_msgs__msg__Twist__get_type_description+0xc>
 8011b6c:	4807      	ldr	r0, [pc, #28]	@ (8011b8c <geometry_msgs__msg__Twist__get_type_description+0x28>)
 8011b6e:	bd10      	pop	{r4, pc}
 8011b70:	f000 f868 	bl	8011c44 <geometry_msgs__msg__Vector3__get_type_description>
 8011b74:	300c      	adds	r0, #12
 8011b76:	c807      	ldmia	r0, {r0, r1, r2}
 8011b78:	4b05      	ldr	r3, [pc, #20]	@ (8011b90 <geometry_msgs__msg__Twist__get_type_description+0x2c>)
 8011b7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011b7e:	2301      	movs	r3, #1
 8011b80:	4802      	ldr	r0, [pc, #8]	@ (8011b8c <geometry_msgs__msg__Twist__get_type_description+0x28>)
 8011b82:	7023      	strb	r3, [r4, #0]
 8011b84:	bd10      	pop	{r4, pc}
 8011b86:	bf00      	nop
 8011b88:	2000efc9 	.word	0x2000efc9
 8011b8c:	08021048 	.word	0x08021048
 8011b90:	20000f44 	.word	0x20000f44

08011b94 <geometry_msgs__msg__Twist__get_type_description_sources>:
 8011b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b96:	4e0f      	ldr	r6, [pc, #60]	@ (8011bd4 <geometry_msgs__msg__Twist__get_type_description_sources+0x40>)
 8011b98:	7837      	ldrb	r7, [r6, #0]
 8011b9a:	b10f      	cbz	r7, 8011ba0 <geometry_msgs__msg__Twist__get_type_description_sources+0xc>
 8011b9c:	480e      	ldr	r0, [pc, #56]	@ (8011bd8 <geometry_msgs__msg__Twist__get_type_description_sources+0x44>)
 8011b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ba0:	4d0e      	ldr	r5, [pc, #56]	@ (8011bdc <geometry_msgs__msg__Twist__get_type_description_sources+0x48>)
 8011ba2:	4c0f      	ldr	r4, [pc, #60]	@ (8011be0 <geometry_msgs__msg__Twist__get_type_description_sources+0x4c>)
 8011ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011bac:	682b      	ldr	r3, [r5, #0]
 8011bae:	f844 3b04 	str.w	r3, [r4], #4
 8011bb2:	4638      	mov	r0, r7
 8011bb4:	f000 f852 	bl	8011c5c <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 8011bb8:	2301      	movs	r3, #1
 8011bba:	4684      	mov	ip, r0
 8011bbc:	7033      	strb	r3, [r6, #0]
 8011bbe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011bc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011bc4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011bc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011bca:	f8dc 3000 	ldr.w	r3, [ip]
 8011bce:	4802      	ldr	r0, [pc, #8]	@ (8011bd8 <geometry_msgs__msg__Twist__get_type_description_sources+0x44>)
 8011bd0:	6023      	str	r3, [r4, #0]
 8011bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011bd4:	2000efc8 	.word	0x2000efc8
 8011bd8:	08021018 	.word	0x08021018
 8011bdc:	08021024 	.word	0x08021024
 8011be0:	2000ef80 	.word	0x2000ef80

08011be4 <geometry_msgs__msg__Twist__init>:
 8011be4:	b1d8      	cbz	r0, 8011c1e <geometry_msgs__msg__Twist__init+0x3a>
 8011be6:	b538      	push	{r3, r4, r5, lr}
 8011be8:	4604      	mov	r4, r0
 8011bea:	f000 f857 	bl	8011c9c <geometry_msgs__msg__Vector3__init>
 8011bee:	b130      	cbz	r0, 8011bfe <geometry_msgs__msg__Twist__init+0x1a>
 8011bf0:	f104 0518 	add.w	r5, r4, #24
 8011bf4:	4628      	mov	r0, r5
 8011bf6:	f000 f851 	bl	8011c9c <geometry_msgs__msg__Vector3__init>
 8011bfa:	b148      	cbz	r0, 8011c10 <geometry_msgs__msg__Twist__init+0x2c>
 8011bfc:	bd38      	pop	{r3, r4, r5, pc}
 8011bfe:	4620      	mov	r0, r4
 8011c00:	f000 f850 	bl	8011ca4 <geometry_msgs__msg__Vector3__fini>
 8011c04:	f104 0018 	add.w	r0, r4, #24
 8011c08:	f000 f84c 	bl	8011ca4 <geometry_msgs__msg__Vector3__fini>
 8011c0c:	2000      	movs	r0, #0
 8011c0e:	bd38      	pop	{r3, r4, r5, pc}
 8011c10:	4620      	mov	r0, r4
 8011c12:	f000 f847 	bl	8011ca4 <geometry_msgs__msg__Vector3__fini>
 8011c16:	4628      	mov	r0, r5
 8011c18:	f000 f844 	bl	8011ca4 <geometry_msgs__msg__Vector3__fini>
 8011c1c:	e7f6      	b.n	8011c0c <geometry_msgs__msg__Twist__init+0x28>
 8011c1e:	2000      	movs	r0, #0
 8011c20:	4770      	bx	lr
 8011c22:	bf00      	nop

08011c24 <geometry_msgs__msg__Twist__fini>:
 8011c24:	b148      	cbz	r0, 8011c3a <geometry_msgs__msg__Twist__fini+0x16>
 8011c26:	b510      	push	{r4, lr}
 8011c28:	4604      	mov	r4, r0
 8011c2a:	f000 f83b 	bl	8011ca4 <geometry_msgs__msg__Vector3__fini>
 8011c2e:	f104 0018 	add.w	r0, r4, #24
 8011c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c36:	f000 b835 	b.w	8011ca4 <geometry_msgs__msg__Vector3__fini>
 8011c3a:	4770      	bx	lr

08011c3c <geometry_msgs__msg__Vector3__get_type_hash>:
 8011c3c:	4800      	ldr	r0, [pc, #0]	@ (8011c40 <geometry_msgs__msg__Vector3__get_type_hash+0x4>)
 8011c3e:	4770      	bx	lr
 8011c40:	20001024 	.word	0x20001024

08011c44 <geometry_msgs__msg__Vector3__get_type_description>:
 8011c44:	4b03      	ldr	r3, [pc, #12]	@ (8011c54 <geometry_msgs__msg__Vector3__get_type_description+0x10>)
 8011c46:	781a      	ldrb	r2, [r3, #0]
 8011c48:	b90a      	cbnz	r2, 8011c4e <geometry_msgs__msg__Vector3__get_type_description+0xa>
 8011c4a:	2201      	movs	r2, #1
 8011c4c:	701a      	strb	r2, [r3, #0]
 8011c4e:	4802      	ldr	r0, [pc, #8]	@ (8011c58 <geometry_msgs__msg__Vector3__get_type_description+0x14>)
 8011c50:	4770      	bx	lr
 8011c52:	bf00      	nop
 8011c54:	2000eff1 	.word	0x2000eff1
 8011c58:	0802109c 	.word	0x0802109c

08011c5c <geometry_msgs__msg__Vector3__get_individual_type_description_source>:
 8011c5c:	4800      	ldr	r0, [pc, #0]	@ (8011c60 <geometry_msgs__msg__Vector3__get_individual_type_description_source+0x4>)
 8011c5e:	4770      	bx	lr
 8011c60:	08021078 	.word	0x08021078

08011c64 <geometry_msgs__msg__Vector3__get_type_description_sources>:
 8011c64:	4b09      	ldr	r3, [pc, #36]	@ (8011c8c <geometry_msgs__msg__Vector3__get_type_description_sources+0x28>)
 8011c66:	781a      	ldrb	r2, [r3, #0]
 8011c68:	b96a      	cbnz	r2, 8011c86 <geometry_msgs__msg__Vector3__get_type_description_sources+0x22>
 8011c6a:	b430      	push	{r4, r5}
 8011c6c:	4d08      	ldr	r5, [pc, #32]	@ (8011c90 <geometry_msgs__msg__Vector3__get_type_description_sources+0x2c>)
 8011c6e:	4c09      	ldr	r4, [pc, #36]	@ (8011c94 <geometry_msgs__msg__Vector3__get_type_description_sources+0x30>)
 8011c70:	2201      	movs	r2, #1
 8011c72:	701a      	strb	r2, [r3, #0]
 8011c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c7c:	682b      	ldr	r3, [r5, #0]
 8011c7e:	4806      	ldr	r0, [pc, #24]	@ (8011c98 <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 8011c80:	6023      	str	r3, [r4, #0]
 8011c82:	bc30      	pop	{r4, r5}
 8011c84:	4770      	bx	lr
 8011c86:	4804      	ldr	r0, [pc, #16]	@ (8011c98 <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 8011c88:	4770      	bx	lr
 8011c8a:	bf00      	nop
 8011c8c:	2000eff0 	.word	0x2000eff0
 8011c90:	08021078 	.word	0x08021078
 8011c94:	2000efcc 	.word	0x2000efcc
 8011c98:	0802106c 	.word	0x0802106c

08011c9c <geometry_msgs__msg__Vector3__init>:
 8011c9c:	3800      	subs	r0, #0
 8011c9e:	bf18      	it	ne
 8011ca0:	2001      	movne	r0, #1
 8011ca2:	4770      	bx	lr

08011ca4 <geometry_msgs__msg__Vector3__fini>:
 8011ca4:	4770      	bx	lr
 8011ca6:	bf00      	nop

08011ca8 <geometry_msgs__msg__Vector3__copy>:
 8011ca8:	4603      	mov	r3, r0
 8011caa:	b170      	cbz	r0, 8011cca <geometry_msgs__msg__Vector3__copy+0x22>
 8011cac:	b171      	cbz	r1, 8011ccc <geometry_msgs__msg__Vector3__copy+0x24>
 8011cae:	ed90 7b00 	vldr	d7, [r0]
 8011cb2:	ed81 7b00 	vstr	d7, [r1]
 8011cb6:	ed93 7b02 	vldr	d7, [r3, #8]
 8011cba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8011cbe:	ed81 7b02 	vstr	d7, [r1, #8]
 8011cc2:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8011cc6:	2001      	movs	r0, #1
 8011cc8:	4770      	bx	lr
 8011cca:	4770      	bx	lr
 8011ccc:	4608      	mov	r0, r1
 8011cce:	4770      	bx	lr

08011cd0 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 8011cd0:	f009 bc4a 	b.w	801b568 <geometry_msgs__msg__Quaternion__init>

08011cd4 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 8011cd4:	f009 bc5c 	b.w	801b590 <geometry_msgs__msg__Quaternion__fini>

08011cd8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8011cd8:	4b04      	ldr	r3, [pc, #16]	@ (8011cec <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8011cda:	681a      	ldr	r2, [r3, #0]
 8011cdc:	b10a      	cbz	r2, 8011ce2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 8011cde:	4803      	ldr	r0, [pc, #12]	@ (8011cec <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8011ce0:	4770      	bx	lr
 8011ce2:	4a03      	ldr	r2, [pc, #12]	@ (8011cf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 8011ce4:	4801      	ldr	r0, [pc, #4]	@ (8011cec <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8011ce6:	6812      	ldr	r2, [r2, #0]
 8011ce8:	601a      	str	r2, [r3, #0]
 8011cea:	4770      	bx	lr
 8011cec:	20001248 	.word	0x20001248
 8011cf0:	200005c0 	.word	0x200005c0

08011cf4 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 8011cf4:	b1f0      	cbz	r0, 8011d34 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 8011cf6:	b570      	push	{r4, r5, r6, lr}
 8011cf8:	460d      	mov	r5, r1
 8011cfa:	4628      	mov	r0, r5
 8011cfc:	2108      	movs	r1, #8
 8011cfe:	f7fc f9b3 	bl	800e068 <ucdr_alignment>
 8011d02:	2108      	movs	r1, #8
 8011d04:	186c      	adds	r4, r5, r1
 8011d06:	4404      	add	r4, r0
 8011d08:	4620      	mov	r0, r4
 8011d0a:	f7fc f9ad 	bl	800e068 <ucdr_alignment>
 8011d0e:	f100 0608 	add.w	r6, r0, #8
 8011d12:	4426      	add	r6, r4
 8011d14:	2108      	movs	r1, #8
 8011d16:	4630      	mov	r0, r6
 8011d18:	f7fc f9a6 	bl	800e068 <ucdr_alignment>
 8011d1c:	f100 0408 	add.w	r4, r0, #8
 8011d20:	4434      	add	r4, r6
 8011d22:	2108      	movs	r1, #8
 8011d24:	4620      	mov	r0, r4
 8011d26:	f7fc f99f 	bl	800e068 <ucdr_alignment>
 8011d2a:	f1c5 0508 	rsb	r5, r5, #8
 8011d2e:	4405      	add	r5, r0
 8011d30:	1928      	adds	r0, r5, r4
 8011d32:	bd70      	pop	{r4, r5, r6, pc}
 8011d34:	4770      	bx	lr
 8011d36:	bf00      	nop

08011d38 <_Quaternion__cdr_deserialize>:
 8011d38:	b538      	push	{r3, r4, r5, lr}
 8011d3a:	460c      	mov	r4, r1
 8011d3c:	b199      	cbz	r1, 8011d66 <_Quaternion__cdr_deserialize+0x2e>
 8011d3e:	4605      	mov	r5, r0
 8011d40:	f7fb ffb4 	bl	800dcac <ucdr_deserialize_double>
 8011d44:	f104 0108 	add.w	r1, r4, #8
 8011d48:	4628      	mov	r0, r5
 8011d4a:	f7fb ffaf 	bl	800dcac <ucdr_deserialize_double>
 8011d4e:	f104 0110 	add.w	r1, r4, #16
 8011d52:	4628      	mov	r0, r5
 8011d54:	f7fb ffaa 	bl	800dcac <ucdr_deserialize_double>
 8011d58:	f104 0118 	add.w	r1, r4, #24
 8011d5c:	4628      	mov	r0, r5
 8011d5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d62:	f7fb bfa3 	b.w	800dcac <ucdr_deserialize_double>
 8011d66:	4608      	mov	r0, r1
 8011d68:	bd38      	pop	{r3, r4, r5, pc}
 8011d6a:	bf00      	nop

08011d6c <_Quaternion__cdr_serialize>:
 8011d6c:	b1c0      	cbz	r0, 8011da0 <_Quaternion__cdr_serialize+0x34>
 8011d6e:	b538      	push	{r3, r4, r5, lr}
 8011d70:	ed90 0b00 	vldr	d0, [r0]
 8011d74:	460d      	mov	r5, r1
 8011d76:	4604      	mov	r4, r0
 8011d78:	4608      	mov	r0, r1
 8011d7a:	f7fb fe07 	bl	800d98c <ucdr_serialize_double>
 8011d7e:	ed94 0b02 	vldr	d0, [r4, #8]
 8011d82:	4628      	mov	r0, r5
 8011d84:	f7fb fe02 	bl	800d98c <ucdr_serialize_double>
 8011d88:	ed94 0b04 	vldr	d0, [r4, #16]
 8011d8c:	4628      	mov	r0, r5
 8011d8e:	f7fb fdfd 	bl	800d98c <ucdr_serialize_double>
 8011d92:	ed94 0b06 	vldr	d0, [r4, #24]
 8011d96:	4628      	mov	r0, r5
 8011d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d9c:	f7fb bdf6 	b.w	800d98c <ucdr_serialize_double>
 8011da0:	4770      	bx	lr
 8011da2:	bf00      	nop

08011da4 <_Quaternion__get_serialized_size>:
 8011da4:	b1d8      	cbz	r0, 8011dde <_Quaternion__get_serialized_size+0x3a>
 8011da6:	b538      	push	{r3, r4, r5, lr}
 8011da8:	2108      	movs	r1, #8
 8011daa:	2000      	movs	r0, #0
 8011dac:	f7fc f95c 	bl	800e068 <ucdr_alignment>
 8011db0:	f100 0408 	add.w	r4, r0, #8
 8011db4:	2108      	movs	r1, #8
 8011db6:	4620      	mov	r0, r4
 8011db8:	f7fc f956 	bl	800e068 <ucdr_alignment>
 8011dbc:	f100 0508 	add.w	r5, r0, #8
 8011dc0:	4425      	add	r5, r4
 8011dc2:	2108      	movs	r1, #8
 8011dc4:	4628      	mov	r0, r5
 8011dc6:	f7fc f94f 	bl	800e068 <ucdr_alignment>
 8011dca:	f100 0408 	add.w	r4, r0, #8
 8011dce:	442c      	add	r4, r5
 8011dd0:	2108      	movs	r1, #8
 8011dd2:	4620      	mov	r0, r4
 8011dd4:	f7fc f948 	bl	800e068 <ucdr_alignment>
 8011dd8:	3008      	adds	r0, #8
 8011dda:	4420      	add	r0, r4
 8011ddc:	bd38      	pop	{r3, r4, r5, pc}
 8011dde:	4770      	bx	lr

08011de0 <_Quaternion__max_serialized_size>:
 8011de0:	b538      	push	{r3, r4, r5, lr}
 8011de2:	2108      	movs	r1, #8
 8011de4:	2000      	movs	r0, #0
 8011de6:	f7fc f93f 	bl	800e068 <ucdr_alignment>
 8011dea:	f100 0408 	add.w	r4, r0, #8
 8011dee:	2108      	movs	r1, #8
 8011df0:	4620      	mov	r0, r4
 8011df2:	f7fc f939 	bl	800e068 <ucdr_alignment>
 8011df6:	f100 0508 	add.w	r5, r0, #8
 8011dfa:	4425      	add	r5, r4
 8011dfc:	2108      	movs	r1, #8
 8011dfe:	4628      	mov	r0, r5
 8011e00:	f7fc f932 	bl	800e068 <ucdr_alignment>
 8011e04:	f100 0408 	add.w	r4, r0, #8
 8011e08:	442c      	add	r4, r5
 8011e0a:	2108      	movs	r1, #8
 8011e0c:	4620      	mov	r0, r4
 8011e0e:	f7fc f92b 	bl	800e068 <ucdr_alignment>
 8011e12:	3008      	adds	r0, #8
 8011e14:	4420      	add	r0, r4
 8011e16:	bd38      	pop	{r3, r4, r5, pc}

08011e18 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 8011e18:	b570      	push	{r4, r5, r6, lr}
 8011e1a:	2301      	movs	r3, #1
 8011e1c:	460c      	mov	r4, r1
 8011e1e:	7003      	strb	r3, [r0, #0]
 8011e20:	2108      	movs	r1, #8
 8011e22:	4620      	mov	r0, r4
 8011e24:	f7fc f920 	bl	800e068 <ucdr_alignment>
 8011e28:	2108      	movs	r1, #8
 8011e2a:	1863      	adds	r3, r4, r1
 8011e2c:	18c5      	adds	r5, r0, r3
 8011e2e:	4628      	mov	r0, r5
 8011e30:	f7fc f91a 	bl	800e068 <ucdr_alignment>
 8011e34:	f100 0608 	add.w	r6, r0, #8
 8011e38:	442e      	add	r6, r5
 8011e3a:	2108      	movs	r1, #8
 8011e3c:	4630      	mov	r0, r6
 8011e3e:	f7fc f913 	bl	800e068 <ucdr_alignment>
 8011e42:	f100 0508 	add.w	r5, r0, #8
 8011e46:	4435      	add	r5, r6
 8011e48:	2108      	movs	r1, #8
 8011e4a:	4628      	mov	r0, r5
 8011e4c:	f7fc f90c 	bl	800e068 <ucdr_alignment>
 8011e50:	f1c4 0408 	rsb	r4, r4, #8
 8011e54:	4420      	add	r0, r4
 8011e56:	4428      	add	r0, r5
 8011e58:	bd70      	pop	{r4, r5, r6, pc}
 8011e5a:	bf00      	nop

08011e5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8011e5c:	4800      	ldr	r0, [pc, #0]	@ (8011e60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 8011e5e:	4770      	bx	lr
 8011e60:	20001350 	.word	0x20001350

08011e64 <imu_interfaces__srv__ImuCalibration_Request__get_type_description.part.0>:
 8011e64:	b510      	push	{r4, lr}
 8011e66:	2000      	movs	r0, #0
 8011e68:	f009 fb10 	bl	801b48c <builtin_interfaces__msg__Time__get_type_description>
 8011e6c:	300c      	adds	r0, #12
 8011e6e:	c807      	ldmia	r0, {r0, r1, r2}
 8011e70:	4c15      	ldr	r4, [pc, #84]	@ (8011ec8 <imu_interfaces__srv__ImuCalibration_Request__get_type_description.part.0+0x64>)
 8011e72:	f104 030c 	add.w	r3, r4, #12
 8011e76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011e7a:	2000      	movs	r0, #0
 8011e7c:	f009 fb46 	bl	801b50c <geometry_msgs__msg__Quaternion__get_type_description>
 8011e80:	300c      	adds	r0, #12
 8011e82:	c807      	ldmia	r0, {r0, r1, r2}
 8011e84:	f104 0324 	add.w	r3, r4, #36	@ 0x24
 8011e88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011e8c:	2000      	movs	r0, #0
 8011e8e:	f7ff fed9 	bl	8011c44 <geometry_msgs__msg__Vector3__get_type_description>
 8011e92:	300c      	adds	r0, #12
 8011e94:	c807      	ldmia	r0, {r0, r1, r2}
 8011e96:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 8011e9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011e9e:	2000      	movs	r0, #0
 8011ea0:	f008 fd40 	bl	801a924 <sensor_msgs__msg__Imu__get_type_description>
 8011ea4:	300c      	adds	r0, #12
 8011ea6:	c807      	ldmia	r0, {r0, r1, r2}
 8011ea8:	f104 0354 	add.w	r3, r4, #84	@ 0x54
 8011eac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011eb0:	2000      	movs	r0, #0
 8011eb2:	f008 febf 	bl	801ac34 <std_msgs__msg__Header__get_type_description>
 8011eb6:	300c      	adds	r0, #12
 8011eb8:	c807      	ldmia	r0, {r0, r1, r2}
 8011eba:	4b04      	ldr	r3, [pc, #16]	@ (8011ecc <imu_interfaces__srv__ImuCalibration_Request__get_type_description.part.0+0x68>)
 8011ebc:	346c      	adds	r4, #108	@ 0x6c
 8011ebe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011ec2:	2201      	movs	r2, #1
 8011ec4:	701a      	strb	r2, [r3, #0]
 8011ec6:	bd10      	pop	{r4, pc}
 8011ec8:	20001658 	.word	0x20001658
 8011ecc:	2000f3ab 	.word	0x2000f3ab

08011ed0 <imu_interfaces__srv__ImuCalibration_Event__get_type_description.part.0>:
 8011ed0:	b510      	push	{r4, lr}
 8011ed2:	2000      	movs	r0, #0
 8011ed4:	f009 fada 	bl	801b48c <builtin_interfaces__msg__Time__get_type_description>
 8011ed8:	300c      	adds	r0, #12
 8011eda:	c807      	ldmia	r0, {r0, r1, r2}
 8011edc:	4c24      	ldr	r4, [pc, #144]	@ (8011f70 <imu_interfaces__srv__ImuCalibration_Event__get_type_description.part.0+0xa0>)
 8011ede:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011ee2:	2000      	movs	r0, #0
 8011ee4:	f009 fb12 	bl	801b50c <geometry_msgs__msg__Quaternion__get_type_description>
 8011ee8:	300c      	adds	r0, #12
 8011eea:	c807      	ldmia	r0, {r0, r1, r2}
 8011eec:	f104 0318 	add.w	r3, r4, #24
 8011ef0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011ef4:	2000      	movs	r0, #0
 8011ef6:	f7ff fea5 	bl	8011c44 <geometry_msgs__msg__Vector3__get_type_description>
 8011efa:	300c      	adds	r0, #12
 8011efc:	c807      	ldmia	r0, {r0, r1, r2}
 8011efe:	4b1d      	ldr	r3, [pc, #116]	@ (8011f74 <imu_interfaces__srv__ImuCalibration_Event__get_type_description.part.0+0xa4>)
 8011f00:	781b      	ldrb	r3, [r3, #0]
 8011f02:	3430      	adds	r4, #48	@ 0x30
 8011f04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011f08:	b373      	cbz	r3, 8011f68 <imu_interfaces__srv__ImuCalibration_Event__get_type_description.part.0+0x98>
 8011f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8011f78 <imu_interfaces__srv__ImuCalibration_Event__get_type_description.part.0+0xa8>)
 8011f0c:	4c1b      	ldr	r4, [pc, #108]	@ (8011f7c <imu_interfaces__srv__ImuCalibration_Event__get_type_description.part.0+0xac>)
 8011f0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011f12:	4b1b      	ldr	r3, [pc, #108]	@ (8011f80 <imu_interfaces__srv__ImuCalibration_Event__get_type_description.part.0+0xb0>)
 8011f14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011f18:	7823      	ldrb	r3, [r4, #0]
 8011f1a:	b90b      	cbnz	r3, 8011f20 <imu_interfaces__srv__ImuCalibration_Event__get_type_description.part.0+0x50>
 8011f1c:	2301      	movs	r3, #1
 8011f1e:	7023      	strb	r3, [r4, #0]
 8011f20:	4b18      	ldr	r3, [pc, #96]	@ (8011f84 <imu_interfaces__srv__ImuCalibration_Event__get_type_description.part.0+0xb4>)
 8011f22:	4c19      	ldr	r4, [pc, #100]	@ (8011f88 <imu_interfaces__srv__ImuCalibration_Event__get_type_description.part.0+0xb8>)
 8011f24:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011f28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011f2c:	2000      	movs	r0, #0
 8011f2e:	f008 fcf9 	bl	801a924 <sensor_msgs__msg__Imu__get_type_description>
 8011f32:	300c      	adds	r0, #12
 8011f34:	c807      	ldmia	r0, {r0, r1, r2}
 8011f36:	f104 0318 	add.w	r3, r4, #24
 8011f3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011f3e:	2000      	movs	r0, #0
 8011f40:	f008 fe1a 	bl	801ab78 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8011f44:	300c      	adds	r0, #12
 8011f46:	c807      	ldmia	r0, {r0, r1, r2}
 8011f48:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8011f4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011f50:	2000      	movs	r0, #0
 8011f52:	f008 fe6f 	bl	801ac34 <std_msgs__msg__Header__get_type_description>
 8011f56:	300c      	adds	r0, #12
 8011f58:	c807      	ldmia	r0, {r0, r1, r2}
 8011f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8011f8c <imu_interfaces__srv__ImuCalibration_Event__get_type_description.part.0+0xbc>)
 8011f5c:	3448      	adds	r4, #72	@ 0x48
 8011f5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011f62:	2201      	movs	r2, #1
 8011f64:	701a      	strb	r2, [r3, #0]
 8011f66:	bd10      	pop	{r4, pc}
 8011f68:	f7ff ff7c 	bl	8011e64 <imu_interfaces__srv__ImuCalibration_Request__get_type_description.part.0>
 8011f6c:	e7cd      	b.n	8011f0a <imu_interfaces__srv__ImuCalibration_Event__get_type_description.part.0+0x3a>
 8011f6e:	bf00      	nop
 8011f70:	2000145c 	.word	0x2000145c
 8011f74:	2000f3ab 	.word	0x2000f3ab
 8011f78:	08021204 	.word	0x08021204
 8011f7c:	2000f3aa 	.word	0x2000f3aa
 8011f80:	200014a4 	.word	0x200014a4
 8011f84:	080211e0 	.word	0x080211e0
 8011f88:	200014bc 	.word	0x200014bc
 8011f8c:	2000f3a9 	.word	0x2000f3a9

08011f90 <imu_interfaces__srv__ImuCalibration__get_type_hash>:
 8011f90:	4800      	ldr	r0, [pc, #0]	@ (8011f94 <imu_interfaces__srv__ImuCalibration__get_type_hash+0x4>)
 8011f92:	4770      	bx	lr
 8011f94:	200013f0 	.word	0x200013f0

08011f98 <imu_interfaces__srv__ImuCalibration_Request__get_type_hash>:
 8011f98:	4800      	ldr	r0, [pc, #0]	@ (8011f9c <imu_interfaces__srv__ImuCalibration_Request__get_type_hash+0x4>)
 8011f9a:	4770      	bx	lr
 8011f9c:	200013cc 	.word	0x200013cc

08011fa0 <imu_interfaces__srv__ImuCalibration_Response__get_type_hash>:
 8011fa0:	4800      	ldr	r0, [pc, #0]	@ (8011fa4 <imu_interfaces__srv__ImuCalibration_Response__get_type_hash+0x4>)
 8011fa2:	4770      	bx	lr
 8011fa4:	200013a8 	.word	0x200013a8

08011fa8 <imu_interfaces__srv__ImuCalibration_Event__get_type_hash>:
 8011fa8:	4800      	ldr	r0, [pc, #0]	@ (8011fac <imu_interfaces__srv__ImuCalibration_Event__get_type_hash+0x4>)
 8011faa:	4770      	bx	lr
 8011fac:	20001384 	.word	0x20001384

08011fb0 <imu_interfaces__srv__ImuCalibration__get_type_description>:
 8011fb0:	b570      	push	{r4, r5, r6, lr}
 8011fb2:	4e30      	ldr	r6, [pc, #192]	@ (8012074 <imu_interfaces__srv__ImuCalibration__get_type_description+0xc4>)
 8011fb4:	7835      	ldrb	r5, [r6, #0]
 8011fb6:	b10d      	cbz	r5, 8011fbc <imu_interfaces__srv__ImuCalibration__get_type_description+0xc>
 8011fb8:	482f      	ldr	r0, [pc, #188]	@ (8012078 <imu_interfaces__srv__ImuCalibration__get_type_description+0xc8>)
 8011fba:	bd70      	pop	{r4, r5, r6, pc}
 8011fbc:	4628      	mov	r0, r5
 8011fbe:	f009 fa65 	bl	801b48c <builtin_interfaces__msg__Time__get_type_description>
 8011fc2:	300c      	adds	r0, #12
 8011fc4:	c807      	ldmia	r0, {r0, r1, r2}
 8011fc6:	4c2d      	ldr	r4, [pc, #180]	@ (801207c <imu_interfaces__srv__ImuCalibration__get_type_description+0xcc>)
 8011fc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011fcc:	4628      	mov	r0, r5
 8011fce:	f009 fa9d 	bl	801b50c <geometry_msgs__msg__Quaternion__get_type_description>
 8011fd2:	300c      	adds	r0, #12
 8011fd4:	c807      	ldmia	r0, {r0, r1, r2}
 8011fd6:	f104 0318 	add.w	r3, r4, #24
 8011fda:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011fde:	4628      	mov	r0, r5
 8011fe0:	f7ff fe30 	bl	8011c44 <geometry_msgs__msg__Vector3__get_type_description>
 8011fe4:	300c      	adds	r0, #12
 8011fe6:	c807      	ldmia	r0, {r0, r1, r2}
 8011fe8:	4b25      	ldr	r3, [pc, #148]	@ (8012080 <imu_interfaces__srv__ImuCalibration__get_type_description+0xd0>)
 8011fea:	781b      	ldrb	r3, [r3, #0]
 8011fec:	3430      	adds	r4, #48	@ 0x30
 8011fee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d03a      	beq.n	801206c <imu_interfaces__srv__ImuCalibration__get_type_description+0xbc>
 8011ff6:	4b23      	ldr	r3, [pc, #140]	@ (8012084 <imu_interfaces__srv__ImuCalibration__get_type_description+0xd4>)
 8011ff8:	4c23      	ldr	r4, [pc, #140]	@ (8012088 <imu_interfaces__srv__ImuCalibration__get_type_description+0xd8>)
 8011ffa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011ffe:	4b23      	ldr	r3, [pc, #140]	@ (801208c <imu_interfaces__srv__ImuCalibration__get_type_description+0xdc>)
 8012000:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012004:	7823      	ldrb	r3, [r4, #0]
 8012006:	b373      	cbz	r3, 8012066 <imu_interfaces__srv__ImuCalibration__get_type_description+0xb6>
 8012008:	4b21      	ldr	r3, [pc, #132]	@ (8012090 <imu_interfaces__srv__ImuCalibration__get_type_description+0xe0>)
 801200a:	4c22      	ldr	r4, [pc, #136]	@ (8012094 <imu_interfaces__srv__ImuCalibration__get_type_description+0xe4>)
 801200c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012010:	4b21      	ldr	r3, [pc, #132]	@ (8012098 <imu_interfaces__srv__ImuCalibration__get_type_description+0xe8>)
 8012012:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012016:	7823      	ldrb	r3, [r4, #0]
 8012018:	b90b      	cbnz	r3, 801201e <imu_interfaces__srv__ImuCalibration__get_type_description+0x6e>
 801201a:	2301      	movs	r3, #1
 801201c:	7023      	strb	r3, [r4, #0]
 801201e:	4b1f      	ldr	r3, [pc, #124]	@ (801209c <imu_interfaces__srv__ImuCalibration__get_type_description+0xec>)
 8012020:	4c1f      	ldr	r4, [pc, #124]	@ (80120a0 <imu_interfaces__srv__ImuCalibration__get_type_description+0xf0>)
 8012022:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012026:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801202a:	2000      	movs	r0, #0
 801202c:	f008 fc7a 	bl	801a924 <sensor_msgs__msg__Imu__get_type_description>
 8012030:	300c      	adds	r0, #12
 8012032:	c807      	ldmia	r0, {r0, r1, r2}
 8012034:	f104 0318 	add.w	r3, r4, #24
 8012038:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801203c:	2000      	movs	r0, #0
 801203e:	f008 fd9b 	bl	801ab78 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8012042:	300c      	adds	r0, #12
 8012044:	c807      	ldmia	r0, {r0, r1, r2}
 8012046:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801204a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801204e:	2000      	movs	r0, #0
 8012050:	f008 fdf0 	bl	801ac34 <std_msgs__msg__Header__get_type_description>
 8012054:	300c      	adds	r0, #12
 8012056:	c807      	ldmia	r0, {r0, r1, r2}
 8012058:	3448      	adds	r4, #72	@ 0x48
 801205a:	2301      	movs	r3, #1
 801205c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012060:	7033      	strb	r3, [r6, #0]
 8012062:	4805      	ldr	r0, [pc, #20]	@ (8012078 <imu_interfaces__srv__ImuCalibration__get_type_description+0xc8>)
 8012064:	bd70      	pop	{r4, r5, r6, pc}
 8012066:	f7ff fefd 	bl	8011e64 <imu_interfaces__srv__ImuCalibration_Request__get_type_description.part.0>
 801206a:	e7cd      	b.n	8012008 <imu_interfaces__srv__ImuCalibration__get_type_description+0x58>
 801206c:	f7ff ff30 	bl	8011ed0 <imu_interfaces__srv__ImuCalibration_Event__get_type_description.part.0>
 8012070:	e7c1      	b.n	8011ff6 <imu_interfaces__srv__ImuCalibration__get_type_description+0x46>
 8012072:	bf00      	nop
 8012074:	2000f3ac 	.word	0x2000f3ac
 8012078:	0802121c 	.word	0x0802121c
 801207c:	20001730 	.word	0x20001730
 8012080:	2000f3a9 	.word	0x2000f3a9
 8012084:	080211bc 	.word	0x080211bc
 8012088:	2000f3ab 	.word	0x2000f3ab
 801208c:	20001778 	.word	0x20001778
 8012090:	08021204 	.word	0x08021204
 8012094:	2000f3aa 	.word	0x2000f3aa
 8012098:	20001790 	.word	0x20001790
 801209c:	080211e0 	.word	0x080211e0
 80120a0:	200017a8 	.word	0x200017a8

080120a4 <imu_interfaces__srv__ImuCalibration_Request__get_type_description>:
 80120a4:	b508      	push	{r3, lr}
 80120a6:	4b04      	ldr	r3, [pc, #16]	@ (80120b8 <imu_interfaces__srv__ImuCalibration_Request__get_type_description+0x14>)
 80120a8:	781b      	ldrb	r3, [r3, #0]
 80120aa:	b10b      	cbz	r3, 80120b0 <imu_interfaces__srv__ImuCalibration_Request__get_type_description+0xc>
 80120ac:	4803      	ldr	r0, [pc, #12]	@ (80120bc <imu_interfaces__srv__ImuCalibration_Request__get_type_description+0x18>)
 80120ae:	bd08      	pop	{r3, pc}
 80120b0:	f7ff fed8 	bl	8011e64 <imu_interfaces__srv__ImuCalibration_Request__get_type_description.part.0>
 80120b4:	4801      	ldr	r0, [pc, #4]	@ (80120bc <imu_interfaces__srv__ImuCalibration_Request__get_type_description+0x18>)
 80120b6:	bd08      	pop	{r3, pc}
 80120b8:	2000f3ab 	.word	0x2000f3ab
 80120bc:	080211f8 	.word	0x080211f8

080120c0 <imu_interfaces__srv__ImuCalibration_Response__get_type_description>:
 80120c0:	4b03      	ldr	r3, [pc, #12]	@ (80120d0 <imu_interfaces__srv__ImuCalibration_Response__get_type_description+0x10>)
 80120c2:	781a      	ldrb	r2, [r3, #0]
 80120c4:	b90a      	cbnz	r2, 80120ca <imu_interfaces__srv__ImuCalibration_Response__get_type_description+0xa>
 80120c6:	2201      	movs	r2, #1
 80120c8:	701a      	strb	r2, [r3, #0]
 80120ca:	4802      	ldr	r0, [pc, #8]	@ (80120d4 <imu_interfaces__srv__ImuCalibration_Response__get_type_description+0x14>)
 80120cc:	4770      	bx	lr
 80120ce:	bf00      	nop
 80120d0:	2000f3aa 	.word	0x2000f3aa
 80120d4:	080211d4 	.word	0x080211d4

080120d8 <imu_interfaces__srv__ImuCalibration_Event__get_type_description>:
 80120d8:	b508      	push	{r3, lr}
 80120da:	4b04      	ldr	r3, [pc, #16]	@ (80120ec <imu_interfaces__srv__ImuCalibration_Event__get_type_description+0x14>)
 80120dc:	781b      	ldrb	r3, [r3, #0]
 80120de:	b10b      	cbz	r3, 80120e4 <imu_interfaces__srv__ImuCalibration_Event__get_type_description+0xc>
 80120e0:	4803      	ldr	r0, [pc, #12]	@ (80120f0 <imu_interfaces__srv__ImuCalibration_Event__get_type_description+0x18>)
 80120e2:	bd08      	pop	{r3, pc}
 80120e4:	f7ff fef4 	bl	8011ed0 <imu_interfaces__srv__ImuCalibration_Event__get_type_description.part.0>
 80120e8:	4801      	ldr	r0, [pc, #4]	@ (80120f0 <imu_interfaces__srv__ImuCalibration_Event__get_type_description+0x18>)
 80120ea:	bd08      	pop	{r3, pc}
 80120ec:	2000f3a9 	.word	0x2000f3a9
 80120f0:	080211b0 	.word	0x080211b0

080120f4 <imu_interfaces__srv__ImuCalibration__get_type_description_sources>:
 80120f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120f8:	4b44      	ldr	r3, [pc, #272]	@ (801220c <imu_interfaces__srv__ImuCalibration__get_type_description_sources+0x118>)
 80120fa:	f893 9000 	ldrb.w	r9, [r3]
 80120fe:	f1b9 0f00 	cmp.w	r9, #0
 8012102:	d002      	beq.n	801210a <imu_interfaces__srv__ImuCalibration__get_type_description_sources+0x16>
 8012104:	4842      	ldr	r0, [pc, #264]	@ (8012210 <imu_interfaces__srv__ImuCalibration__get_type_description_sources+0x11c>)
 8012106:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801210a:	4d42      	ldr	r5, [pc, #264]	@ (8012214 <imu_interfaces__srv__ImuCalibration__get_type_description_sources+0x120>)
 801210c:	4c42      	ldr	r4, [pc, #264]	@ (8012218 <imu_interfaces__srv__ImuCalibration__get_type_description_sources+0x124>)
 801210e:	f8df a114 	ldr.w	sl, [pc, #276]	@ 8012224 <imu_interfaces__srv__ImuCalibration__get_type_description_sources+0x130>
 8012112:	4f42      	ldr	r7, [pc, #264]	@ (801221c <imu_interfaces__srv__ImuCalibration__get_type_description_sources+0x128>)
 8012114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801211a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801211c:	682b      	ldr	r3, [r5, #0]
 801211e:	4625      	mov	r5, r4
 8012120:	4648      	mov	r0, r9
 8012122:	f845 3b04 	str.w	r3, [r5], #4
 8012126:	f009 f9bd 	bl	801b4a4 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801212a:	4606      	mov	r6, r0
 801212c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801212e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012130:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012134:	4648      	mov	r0, r9
 8012136:	6833      	ldr	r3, [r6, #0]
 8012138:	602b      	str	r3, [r5, #0]
 801213a:	f009 f9f3 	bl	801b524 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 801213e:	4605      	mov	r5, r0
 8012140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012142:	f104 0628 	add.w	r6, r4, #40	@ 0x28
 8012146:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801214a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801214c:	4648      	mov	r0, r9
 801214e:	682b      	ldr	r3, [r5, #0]
 8012150:	6033      	str	r3, [r6, #0]
 8012152:	f7ff fd83 	bl	8011c5c <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 8012156:	4684      	mov	ip, r0
 8012158:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801215c:	f104 0b4c 	add.w	fp, r4, #76	@ 0x4c
 8012160:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 8012164:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012168:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 801216c:	f8dc 3000 	ldr.w	r3, [ip]
 8012170:	f8cb 3000 	str.w	r3, [fp]
 8012174:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8012178:	f104 0870 	add.w	r8, r4, #112	@ 0x70
 801217c:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8012180:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8012184:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8012188:	f8da 3000 	ldr.w	r3, [sl]
 801218c:	f8c8 3000 	str.w	r3, [r8]
 8012190:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012192:	f104 0694 	add.w	r6, r4, #148	@ 0x94
 8012196:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012198:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801219a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801219c:	4d20      	ldr	r5, [pc, #128]	@ (8012220 <imu_interfaces__srv__ImuCalibration__get_type_description_sources+0x12c>)
 801219e:	683b      	ldr	r3, [r7, #0]
 80121a0:	6033      	str	r3, [r6, #0]
 80121a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80121a4:	f104 0eb8 	add.w	lr, r4, #184	@ 0xb8
 80121a8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80121ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80121ae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80121b2:	682b      	ldr	r3, [r5, #0]
 80121b4:	f8ce 3000 	str.w	r3, [lr]
 80121b8:	4648      	mov	r0, r9
 80121ba:	f008 fbe5 	bl	801a988 <sensor_msgs__msg__Imu__get_individual_type_description_source>
 80121be:	4605      	mov	r5, r0
 80121c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80121c2:	f104 06dc 	add.w	r6, r4, #220	@ 0xdc
 80121c6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80121c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80121ca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80121cc:	4648      	mov	r0, r9
 80121ce:	682b      	ldr	r3, [r5, #0]
 80121d0:	6033      	str	r3, [r6, #0]
 80121d2:	f008 fce9 	bl	801aba8 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 80121d6:	4605      	mov	r5, r0
 80121d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80121da:	f504 7680 	add.w	r6, r4, #256	@ 0x100
 80121de:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80121e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80121e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80121e4:	4648      	mov	r0, r9
 80121e6:	682b      	ldr	r3, [r5, #0]
 80121e8:	6033      	str	r3, [r6, #0]
 80121ea:	f008 fd3b 	bl	801ac64 <std_msgs__msg__Header__get_individual_type_description_source>
 80121ee:	4a07      	ldr	r2, [pc, #28]	@ (801220c <imu_interfaces__srv__ImuCalibration__get_type_description_sources+0x118>)
 80121f0:	2301      	movs	r3, #1
 80121f2:	4605      	mov	r5, r0
 80121f4:	7013      	strb	r3, [r2, #0]
 80121f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80121f8:	f504 7492 	add.w	r4, r4, #292	@ 0x124
 80121fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80121fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012200:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012202:	682b      	ldr	r3, [r5, #0]
 8012204:	4802      	ldr	r0, [pc, #8]	@ (8012210 <imu_interfaces__srv__ImuCalibration__get_type_description_sources+0x11c>)
 8012206:	6023      	str	r3, [r4, #0]
 8012208:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801220c:	2000f3a8 	.word	0x2000f3a8
 8012210:	08021114 	.word	0x08021114
 8012214:	0802118c 	.word	0x0802118c
 8012218:	2000f240 	.word	0x2000f240
 801221c:	08021168 	.word	0x08021168
 8012220:	08021144 	.word	0x08021144
 8012224:	08021120 	.word	0x08021120

08012228 <imu_interfaces__srv__ImuCalibration_Request__get_type_description_sources>:
 8012228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801222a:	4d2d      	ldr	r5, [pc, #180]	@ (80122e0 <imu_interfaces__srv__ImuCalibration_Request__get_type_description_sources+0xb8>)
 801222c:	782e      	ldrb	r6, [r5, #0]
 801222e:	b10e      	cbz	r6, 8012234 <imu_interfaces__srv__ImuCalibration_Request__get_type_description_sources+0xc>
 8012230:	482c      	ldr	r0, [pc, #176]	@ (80122e4 <imu_interfaces__srv__ImuCalibration_Request__get_type_description_sources+0xbc>)
 8012232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012234:	4f2c      	ldr	r7, [pc, #176]	@ (80122e8 <imu_interfaces__srv__ImuCalibration_Request__get_type_description_sources+0xc0>)
 8012236:	4c2d      	ldr	r4, [pc, #180]	@ (80122ec <imu_interfaces__srv__ImuCalibration_Request__get_type_description_sources+0xc4>)
 8012238:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801223a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801223c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801223e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012240:	683b      	ldr	r3, [r7, #0]
 8012242:	4627      	mov	r7, r4
 8012244:	4630      	mov	r0, r6
 8012246:	f847 3b04 	str.w	r3, [r7], #4
 801224a:	f009 f92b 	bl	801b4a4 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801224e:	4684      	mov	ip, r0
 8012250:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012254:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012256:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801225a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801225c:	4630      	mov	r0, r6
 801225e:	f8dc 3000 	ldr.w	r3, [ip]
 8012262:	603b      	str	r3, [r7, #0]
 8012264:	f009 f95e 	bl	801b524 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 8012268:	4684      	mov	ip, r0
 801226a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801226e:	f104 0728 	add.w	r7, r4, #40	@ 0x28
 8012272:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012274:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012278:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801227a:	4630      	mov	r0, r6
 801227c:	f8dc 3000 	ldr.w	r3, [ip]
 8012280:	603b      	str	r3, [r7, #0]
 8012282:	f7ff fceb 	bl	8011c5c <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 8012286:	4684      	mov	ip, r0
 8012288:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801228c:	f104 074c 	add.w	r7, r4, #76	@ 0x4c
 8012290:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012292:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012296:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012298:	4630      	mov	r0, r6
 801229a:	f8dc 3000 	ldr.w	r3, [ip]
 801229e:	603b      	str	r3, [r7, #0]
 80122a0:	f008 fb72 	bl	801a988 <sensor_msgs__msg__Imu__get_individual_type_description_source>
 80122a4:	4684      	mov	ip, r0
 80122a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80122aa:	f104 0770 	add.w	r7, r4, #112	@ 0x70
 80122ae:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80122b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80122b4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80122b6:	4630      	mov	r0, r6
 80122b8:	f8dc 3000 	ldr.w	r3, [ip]
 80122bc:	603b      	str	r3, [r7, #0]
 80122be:	f008 fcd1 	bl	801ac64 <std_msgs__msg__Header__get_individual_type_description_source>
 80122c2:	2301      	movs	r3, #1
 80122c4:	4684      	mov	ip, r0
 80122c6:	702b      	strb	r3, [r5, #0]
 80122c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80122cc:	3494      	adds	r4, #148	@ 0x94
 80122ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80122d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80122d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80122d6:	f8dc 3000 	ldr.w	r3, [ip]
 80122da:	4802      	ldr	r0, [pc, #8]	@ (80122e4 <imu_interfaces__srv__ImuCalibration_Request__get_type_description_sources+0xbc>)
 80122dc:	6023      	str	r3, [r4, #0]
 80122de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122e0:	2000f23c 	.word	0x2000f23c
 80122e4:	08021108 	.word	0x08021108
 80122e8:	08021168 	.word	0x08021168
 80122ec:	2000f164 	.word	0x2000f164

080122f0 <imu_interfaces__srv__ImuCalibration_Response__get_type_description_sources>:
 80122f0:	4b09      	ldr	r3, [pc, #36]	@ (8012318 <imu_interfaces__srv__ImuCalibration_Response__get_type_description_sources+0x28>)
 80122f2:	781a      	ldrb	r2, [r3, #0]
 80122f4:	b96a      	cbnz	r2, 8012312 <imu_interfaces__srv__ImuCalibration_Response__get_type_description_sources+0x22>
 80122f6:	b430      	push	{r4, r5}
 80122f8:	4d08      	ldr	r5, [pc, #32]	@ (801231c <imu_interfaces__srv__ImuCalibration_Response__get_type_description_sources+0x2c>)
 80122fa:	4c09      	ldr	r4, [pc, #36]	@ (8012320 <imu_interfaces__srv__ImuCalibration_Response__get_type_description_sources+0x30>)
 80122fc:	2201      	movs	r2, #1
 80122fe:	701a      	strb	r2, [r3, #0]
 8012300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012308:	682b      	ldr	r3, [r5, #0]
 801230a:	4806      	ldr	r0, [pc, #24]	@ (8012324 <imu_interfaces__srv__ImuCalibration_Response__get_type_description_sources+0x34>)
 801230c:	6023      	str	r3, [r4, #0]
 801230e:	bc30      	pop	{r4, r5}
 8012310:	4770      	bx	lr
 8012312:	4804      	ldr	r0, [pc, #16]	@ (8012324 <imu_interfaces__srv__ImuCalibration_Response__get_type_description_sources+0x34>)
 8012314:	4770      	bx	lr
 8012316:	bf00      	nop
 8012318:	2000f160 	.word	0x2000f160
 801231c:	08021144 	.word	0x08021144
 8012320:	2000f13c 	.word	0x2000f13c
 8012324:	080210fc 	.word	0x080210fc

08012328 <imu_interfaces__srv__ImuCalibration_Event__get_type_description_sources>:
 8012328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801232c:	4d46      	ldr	r5, [pc, #280]	@ (8012448 <imu_interfaces__srv__ImuCalibration_Event__get_type_description_sources+0x120>)
 801232e:	782e      	ldrb	r6, [r5, #0]
 8012330:	b116      	cbz	r6, 8012338 <imu_interfaces__srv__ImuCalibration_Event__get_type_description_sources+0x10>
 8012332:	4846      	ldr	r0, [pc, #280]	@ (801244c <imu_interfaces__srv__ImuCalibration_Event__get_type_description_sources+0x124>)
 8012334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012338:	4f45      	ldr	r7, [pc, #276]	@ (8012450 <imu_interfaces__srv__ImuCalibration_Event__get_type_description_sources+0x128>)
 801233a:	4c46      	ldr	r4, [pc, #280]	@ (8012454 <imu_interfaces__srv__ImuCalibration_Event__get_type_description_sources+0x12c>)
 801233c:	f8df 9118 	ldr.w	r9, [pc, #280]	@ 8012458 <imu_interfaces__srv__ImuCalibration_Event__get_type_description_sources+0x130>
 8012340:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012344:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012348:	683b      	ldr	r3, [r7, #0]
 801234a:	4627      	mov	r7, r4
 801234c:	4630      	mov	r0, r6
 801234e:	f847 3b04 	str.w	r3, [r7], #4
 8012352:	f009 f8a7 	bl	801b4a4 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8012356:	4684      	mov	ip, r0
 8012358:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801235c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801235e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012362:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012364:	4630      	mov	r0, r6
 8012366:	f8dc 3000 	ldr.w	r3, [ip]
 801236a:	603b      	str	r3, [r7, #0]
 801236c:	f009 f8da 	bl	801b524 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 8012370:	4684      	mov	ip, r0
 8012372:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012376:	f104 0728 	add.w	r7, r4, #40	@ 0x28
 801237a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801237c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012380:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012382:	4630      	mov	r0, r6
 8012384:	f8dc 3000 	ldr.w	r3, [ip]
 8012388:	603b      	str	r3, [r7, #0]
 801238a:	f7ff fc67 	bl	8011c5c <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 801238e:	4684      	mov	ip, r0
 8012390:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012394:	f104 0a4c 	add.w	sl, r4, #76	@ 0x4c
 8012398:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 801239c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80123a0:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 80123a4:	f8dc 3000 	ldr.w	r3, [ip]
 80123a8:	f8ca 3000 	str.w	r3, [sl]
 80123ac:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 80123b0:	f104 0870 	add.w	r8, r4, #112	@ 0x70
 80123b4:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 80123b8:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 80123bc:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 80123c0:	f8df e098 	ldr.w	lr, [pc, #152]	@ 801245c <imu_interfaces__srv__ImuCalibration_Event__get_type_description_sources+0x134>
 80123c4:	f8d9 3000 	ldr.w	r3, [r9]
 80123c8:	f8c8 3000 	str.w	r3, [r8]
 80123cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80123d0:	f104 0794 	add.w	r7, r4, #148	@ 0x94
 80123d4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80123d6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80123da:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80123dc:	f8de 3000 	ldr.w	r3, [lr]
 80123e0:	603b      	str	r3, [r7, #0]
 80123e2:	4630      	mov	r0, r6
 80123e4:	f008 fad0 	bl	801a988 <sensor_msgs__msg__Imu__get_individual_type_description_source>
 80123e8:	4684      	mov	ip, r0
 80123ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80123ee:	f104 07b8 	add.w	r7, r4, #184	@ 0xb8
 80123f2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80123f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80123f8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80123fa:	4630      	mov	r0, r6
 80123fc:	f8dc 3000 	ldr.w	r3, [ip]
 8012400:	603b      	str	r3, [r7, #0]
 8012402:	f008 fbd1 	bl	801aba8 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 8012406:	4684      	mov	ip, r0
 8012408:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801240c:	f104 07dc 	add.w	r7, r4, #220	@ 0xdc
 8012410:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012412:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012416:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012418:	4630      	mov	r0, r6
 801241a:	f8dc 3000 	ldr.w	r3, [ip]
 801241e:	603b      	str	r3, [r7, #0]
 8012420:	f008 fc20 	bl	801ac64 <std_msgs__msg__Header__get_individual_type_description_source>
 8012424:	2301      	movs	r3, #1
 8012426:	4684      	mov	ip, r0
 8012428:	702b      	strb	r3, [r5, #0]
 801242a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801242e:	f504 7480 	add.w	r4, r4, #256	@ 0x100
 8012432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012434:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801243a:	f8dc 3000 	ldr.w	r3, [ip]
 801243e:	4803      	ldr	r0, [pc, #12]	@ (801244c <imu_interfaces__srv__ImuCalibration_Event__get_type_description_sources+0x124>)
 8012440:	6023      	str	r3, [r4, #0]
 8012442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012446:	bf00      	nop
 8012448:	2000f138 	.word	0x2000f138
 801244c:	080210f0 	.word	0x080210f0
 8012450:	08021120 	.word	0x08021120
 8012454:	2000eff4 	.word	0x2000eff4
 8012458:	08021168 	.word	0x08021168
 801245c:	08021144 	.word	0x08021144

08012460 <imu_interfaces__srv__ImuCalibration_Request__init>:
 8012460:	b150      	cbz	r0, 8012478 <imu_interfaces__srv__ImuCalibration_Request__init+0x18>
 8012462:	b510      	push	{r4, lr}
 8012464:	4604      	mov	r4, r0
 8012466:	f008 fae9 	bl	801aa3c <sensor_msgs__msg__Imu__init>
 801246a:	b100      	cbz	r0, 801246e <imu_interfaces__srv__ImuCalibration_Request__init+0xe>
 801246c:	bd10      	pop	{r4, pc}
 801246e:	4620      	mov	r0, r4
 8012470:	f008 fb30 	bl	801aad4 <sensor_msgs__msg__Imu__fini>
 8012474:	2000      	movs	r0, #0
 8012476:	bd10      	pop	{r4, pc}
 8012478:	2000      	movs	r0, #0
 801247a:	4770      	bx	lr

0801247c <imu_interfaces__srv__ImuCalibration_Request__fini>:
 801247c:	b108      	cbz	r0, 8012482 <imu_interfaces__srv__ImuCalibration_Request__fini+0x6>
 801247e:	f008 bb29 	b.w	801aad4 <sensor_msgs__msg__Imu__fini>
 8012482:	4770      	bx	lr

08012484 <imu_interfaces__srv__ImuCalibration_Request__copy>:
 8012484:	b110      	cbz	r0, 801248c <imu_interfaces__srv__ImuCalibration_Request__copy+0x8>
 8012486:	b109      	cbz	r1, 801248c <imu_interfaces__srv__ImuCalibration_Request__copy+0x8>
 8012488:	f008 bb38 	b.w	801aafc <sensor_msgs__msg__Imu__copy>
 801248c:	2000      	movs	r0, #0
 801248e:	4770      	bx	lr

08012490 <imu_interfaces__srv__ImuCalibration_Request__Sequence__init>:
 8012490:	2800      	cmp	r0, #0
 8012492:	d041      	beq.n	8012518 <imu_interfaces__srv__ImuCalibration_Request__Sequence__init+0x88>
 8012494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012498:	b087      	sub	sp, #28
 801249a:	460d      	mov	r5, r1
 801249c:	4681      	mov	r9, r0
 801249e:	a801      	add	r0, sp, #4
 80124a0:	f7fc ffa8 	bl	800f3f4 <rcutils_get_default_allocator>
 80124a4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80124a8:	b36d      	cbz	r5, 8012506 <imu_interfaces__srv__ImuCalibration_Request__Sequence__init+0x76>
 80124aa:	9b04      	ldr	r3, [sp, #16]
 80124ac:	4642      	mov	r2, r8
 80124ae:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80124b2:	4628      	mov	r0, r5
 80124b4:	4798      	blx	r3
 80124b6:	4607      	mov	r7, r0
 80124b8:	b318      	cbz	r0, 8012502 <imu_interfaces__srv__ImuCalibration_Request__Sequence__init+0x72>
 80124ba:	4606      	mov	r6, r0
 80124bc:	2400      	movs	r4, #0
 80124be:	e004      	b.n	80124ca <imu_interfaces__srv__ImuCalibration_Request__Sequence__init+0x3a>
 80124c0:	3401      	adds	r4, #1
 80124c2:	42a5      	cmp	r5, r4
 80124c4:	f506 76a0 	add.w	r6, r6, #320	@ 0x140
 80124c8:	d01e      	beq.n	8012508 <imu_interfaces__srv__ImuCalibration_Request__Sequence__init+0x78>
 80124ca:	4630      	mov	r0, r6
 80124cc:	f008 fab6 	bl	801aa3c <sensor_msgs__msg__Imu__init>
 80124d0:	2800      	cmp	r0, #0
 80124d2:	d1f5      	bne.n	80124c0 <imu_interfaces__srv__ImuCalibration_Request__Sequence__init+0x30>
 80124d4:	4630      	mov	r0, r6
 80124d6:	f008 fafd 	bl	801aad4 <sensor_msgs__msg__Imu__fini>
 80124da:	42a5      	cmp	r5, r4
 80124dc:	d914      	bls.n	8012508 <imu_interfaces__srv__ImuCalibration_Request__Sequence__init+0x78>
 80124de:	b164      	cbz	r4, 80124fa <imu_interfaces__srv__ImuCalibration_Request__Sequence__init+0x6a>
 80124e0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80124e4:	eb07 1484 	add.w	r4, r7, r4, lsl #6
 80124e8:	f5a4 74a0 	sub.w	r4, r4, #320	@ 0x140
 80124ec:	4620      	mov	r0, r4
 80124ee:	f008 faf1 	bl	801aad4 <sensor_msgs__msg__Imu__fini>
 80124f2:	42bc      	cmp	r4, r7
 80124f4:	f5a4 74a0 	sub.w	r4, r4, #320	@ 0x140
 80124f8:	d1f8      	bne.n	80124ec <imu_interfaces__srv__ImuCalibration_Request__Sequence__init+0x5c>
 80124fa:	9b02      	ldr	r3, [sp, #8]
 80124fc:	4641      	mov	r1, r8
 80124fe:	4638      	mov	r0, r7
 8012500:	4798      	blx	r3
 8012502:	2000      	movs	r0, #0
 8012504:	e005      	b.n	8012512 <imu_interfaces__srv__ImuCalibration_Request__Sequence__init+0x82>
 8012506:	462f      	mov	r7, r5
 8012508:	e9c9 7500 	strd	r7, r5, [r9]
 801250c:	f8c9 5008 	str.w	r5, [r9, #8]
 8012510:	2001      	movs	r0, #1
 8012512:	b007      	add	sp, #28
 8012514:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012518:	2000      	movs	r0, #0
 801251a:	4770      	bx	lr

0801251c <imu_interfaces__srv__ImuCalibration_Request__Sequence__fini>:
 801251c:	b320      	cbz	r0, 8012568 <imu_interfaces__srv__ImuCalibration_Request__Sequence__fini+0x4c>
 801251e:	b530      	push	{r4, r5, lr}
 8012520:	4605      	mov	r5, r0
 8012522:	b087      	sub	sp, #28
 8012524:	a801      	add	r0, sp, #4
 8012526:	f7fc ff65 	bl	800f3f4 <rcutils_get_default_allocator>
 801252a:	682a      	ldr	r2, [r5, #0]
 801252c:	b1b2      	cbz	r2, 801255c <imu_interfaces__srv__ImuCalibration_Request__Sequence__fini+0x40>
 801252e:	68a9      	ldr	r1, [r5, #8]
 8012530:	b161      	cbz	r1, 801254c <imu_interfaces__srv__ImuCalibration_Request__Sequence__fini+0x30>
 8012532:	2400      	movs	r4, #0
 8012534:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8012538:	eb12 1083 	adds.w	r0, r2, r3, lsl #6
 801253c:	d010      	beq.n	8012560 <imu_interfaces__srv__ImuCalibration_Request__Sequence__fini+0x44>
 801253e:	f008 fac9 	bl	801aad4 <sensor_msgs__msg__Imu__fini>
 8012542:	68a9      	ldr	r1, [r5, #8]
 8012544:	682a      	ldr	r2, [r5, #0]
 8012546:	3401      	adds	r4, #1
 8012548:	428c      	cmp	r4, r1
 801254a:	d3f3      	bcc.n	8012534 <imu_interfaces__srv__ImuCalibration_Request__Sequence__fini+0x18>
 801254c:	9b02      	ldr	r3, [sp, #8]
 801254e:	9905      	ldr	r1, [sp, #20]
 8012550:	4610      	mov	r0, r2
 8012552:	4798      	blx	r3
 8012554:	2300      	movs	r3, #0
 8012556:	e9c5 3300 	strd	r3, r3, [r5]
 801255a:	60ab      	str	r3, [r5, #8]
 801255c:	b007      	add	sp, #28
 801255e:	bd30      	pop	{r4, r5, pc}
 8012560:	3401      	adds	r4, #1
 8012562:	428c      	cmp	r4, r1
 8012564:	d3e6      	bcc.n	8012534 <imu_interfaces__srv__ImuCalibration_Request__Sequence__fini+0x18>
 8012566:	e7f1      	b.n	801254c <imu_interfaces__srv__ImuCalibration_Request__Sequence__fini+0x30>
 8012568:	4770      	bx	lr
 801256a:	bf00      	nop

0801256c <imu_interfaces__srv__ImuCalibration_Response__init>:
 801256c:	3800      	subs	r0, #0
 801256e:	bf18      	it	ne
 8012570:	2001      	movne	r0, #1
 8012572:	4770      	bx	lr

08012574 <imu_interfaces__srv__ImuCalibration_Response__fini>:
 8012574:	4770      	bx	lr
 8012576:	bf00      	nop

08012578 <imu_interfaces__srv__ImuCalibration_Response__copy>:
 8012578:	b128      	cbz	r0, 8012586 <imu_interfaces__srv__ImuCalibration_Response__copy+0xe>
 801257a:	b119      	cbz	r1, 8012584 <imu_interfaces__srv__ImuCalibration_Response__copy+0xc>
 801257c:	7803      	ldrb	r3, [r0, #0]
 801257e:	700b      	strb	r3, [r1, #0]
 8012580:	2001      	movs	r0, #1
 8012582:	4770      	bx	lr
 8012584:	4608      	mov	r0, r1
 8012586:	4770      	bx	lr

08012588 <imu_interfaces__srv__ImuCalibration_Response__Sequence__init>:
 8012588:	b1c0      	cbz	r0, 80125bc <imu_interfaces__srv__ImuCalibration_Response__Sequence__init+0x34>
 801258a:	b530      	push	{r4, r5, lr}
 801258c:	b087      	sub	sp, #28
 801258e:	460d      	mov	r5, r1
 8012590:	4604      	mov	r4, r0
 8012592:	a801      	add	r0, sp, #4
 8012594:	f7fc ff2e 	bl	800f3f4 <rcutils_get_default_allocator>
 8012598:	9a05      	ldr	r2, [sp, #20]
 801259a:	b935      	cbnz	r5, 80125aa <imu_interfaces__srv__ImuCalibration_Response__Sequence__init+0x22>
 801259c:	4628      	mov	r0, r5
 801259e:	e9c4 0500 	strd	r0, r5, [r4]
 80125a2:	2001      	movs	r0, #1
 80125a4:	60a5      	str	r5, [r4, #8]
 80125a6:	b007      	add	sp, #28
 80125a8:	bd30      	pop	{r4, r5, pc}
 80125aa:	9b04      	ldr	r3, [sp, #16]
 80125ac:	2101      	movs	r1, #1
 80125ae:	4628      	mov	r0, r5
 80125b0:	4798      	blx	r3
 80125b2:	2800      	cmp	r0, #0
 80125b4:	d1f3      	bne.n	801259e <imu_interfaces__srv__ImuCalibration_Response__Sequence__init+0x16>
 80125b6:	2000      	movs	r0, #0
 80125b8:	b007      	add	sp, #28
 80125ba:	bd30      	pop	{r4, r5, pc}
 80125bc:	2000      	movs	r0, #0
 80125be:	4770      	bx	lr

080125c0 <imu_interfaces__srv__ImuCalibration_Response__Sequence__fini>:
 80125c0:	b180      	cbz	r0, 80125e4 <imu_interfaces__srv__ImuCalibration_Response__Sequence__fini+0x24>
 80125c2:	b510      	push	{r4, lr}
 80125c4:	4604      	mov	r4, r0
 80125c6:	b086      	sub	sp, #24
 80125c8:	a801      	add	r0, sp, #4
 80125ca:	f7fc ff13 	bl	800f3f4 <rcutils_get_default_allocator>
 80125ce:	6820      	ldr	r0, [r4, #0]
 80125d0:	b130      	cbz	r0, 80125e0 <imu_interfaces__srv__ImuCalibration_Response__Sequence__fini+0x20>
 80125d2:	9b02      	ldr	r3, [sp, #8]
 80125d4:	9905      	ldr	r1, [sp, #20]
 80125d6:	4798      	blx	r3
 80125d8:	2300      	movs	r3, #0
 80125da:	e9c4 3300 	strd	r3, r3, [r4]
 80125de:	60a3      	str	r3, [r4, #8]
 80125e0:	b006      	add	sp, #24
 80125e2:	bd10      	pop	{r4, pc}
 80125e4:	4770      	bx	lr
 80125e6:	bf00      	nop

080125e8 <imu_interfaces__srv__ImuCalibration_Event__init>:
 80125e8:	b570      	push	{r4, r5, r6, lr}
 80125ea:	b08c      	sub	sp, #48	@ 0x30
 80125ec:	2800      	cmp	r0, #0
 80125ee:	d03e      	beq.n	801266e <imu_interfaces__srv__ImuCalibration_Event__init+0x86>
 80125f0:	4605      	mov	r5, r0
 80125f2:	f008 fb05 	bl	801ac00 <service_msgs__msg__ServiceEventInfo__init>
 80125f6:	4604      	mov	r4, r0
 80125f8:	b178      	cbz	r0, 801261a <imu_interfaces__srv__ImuCalibration_Event__init+0x32>
 80125fa:	2600      	movs	r6, #0
 80125fc:	4668      	mov	r0, sp
 80125fe:	f7fc fef9 	bl	800f3f4 <rcutils_get_default_allocator>
 8012602:	4668      	mov	r0, sp
 8012604:	e9c5 660a 	strd	r6, r6, [r5, #40]	@ 0x28
 8012608:	632e      	str	r6, [r5, #48]	@ 0x30
 801260a:	f7fc fef3 	bl	800f3f4 <rcutils_get_default_allocator>
 801260e:	4620      	mov	r0, r4
 8012610:	e9c5 660d 	strd	r6, r6, [r5, #52]	@ 0x34
 8012614:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8012616:	b00c      	add	sp, #48	@ 0x30
 8012618:	bd70      	pop	{r4, r5, r6, pc}
 801261a:	4628      	mov	r0, r5
 801261c:	f008 fb00 	bl	801ac20 <service_msgs__msg__ServiceEventInfo__fini>
 8012620:	a807      	add	r0, sp, #28
 8012622:	f7fc fee7 	bl	800f3f4 <rcutils_get_default_allocator>
 8012626:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8012628:	b1ab      	cbz	r3, 8012656 <imu_interfaces__srv__ImuCalibration_Event__init+0x6e>
 801262a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801262c:	b15a      	cbz	r2, 8012646 <imu_interfaces__srv__ImuCalibration_Event__init+0x5e>
 801262e:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8012632:	eb13 1080 	adds.w	r0, r3, r0, lsl #6
 8012636:	d01e      	beq.n	8012676 <imu_interfaces__srv__ImuCalibration_Event__init+0x8e>
 8012638:	f008 fa4c 	bl	801aad4 <sensor_msgs__msg__Imu__fini>
 801263c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801263e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8012640:	3401      	adds	r4, #1
 8012642:	4294      	cmp	r4, r2
 8012644:	d3f3      	bcc.n	801262e <imu_interfaces__srv__ImuCalibration_Event__init+0x46>
 8012646:	4618      	mov	r0, r3
 8012648:	9a08      	ldr	r2, [sp, #32]
 801264a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801264c:	4790      	blx	r2
 801264e:	2300      	movs	r3, #0
 8012650:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8012654:	632b      	str	r3, [r5, #48]	@ 0x30
 8012656:	a807      	add	r0, sp, #28
 8012658:	f7fc fecc 	bl	800f3f4 <rcutils_get_default_allocator>
 801265c:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 801265e:	b130      	cbz	r0, 801266e <imu_interfaces__srv__ImuCalibration_Event__init+0x86>
 8012660:	9b08      	ldr	r3, [sp, #32]
 8012662:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012664:	4798      	blx	r3
 8012666:	2300      	movs	r3, #0
 8012668:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801266c:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801266e:	2400      	movs	r4, #0
 8012670:	4620      	mov	r0, r4
 8012672:	b00c      	add	sp, #48	@ 0x30
 8012674:	bd70      	pop	{r4, r5, r6, pc}
 8012676:	3401      	adds	r4, #1
 8012678:	42a2      	cmp	r2, r4
 801267a:	d8d8      	bhi.n	801262e <imu_interfaces__srv__ImuCalibration_Event__init+0x46>
 801267c:	e7e3      	b.n	8012646 <imu_interfaces__srv__ImuCalibration_Event__init+0x5e>
 801267e:	bf00      	nop

08012680 <imu_interfaces__srv__ImuCalibration_Event__fini>:
 8012680:	2800      	cmp	r0, #0
 8012682:	d032      	beq.n	80126ea <imu_interfaces__srv__ImuCalibration_Event__fini+0x6a>
 8012684:	b530      	push	{r4, r5, lr}
 8012686:	4605      	mov	r5, r0
 8012688:	b087      	sub	sp, #28
 801268a:	f008 fac9 	bl	801ac20 <service_msgs__msg__ServiceEventInfo__fini>
 801268e:	a801      	add	r0, sp, #4
 8012690:	f7fc feb0 	bl	800f3f4 <rcutils_get_default_allocator>
 8012694:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8012696:	b1b3      	cbz	r3, 80126c6 <imu_interfaces__srv__ImuCalibration_Event__fini+0x46>
 8012698:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801269a:	b162      	cbz	r2, 80126b6 <imu_interfaces__srv__ImuCalibration_Event__fini+0x36>
 801269c:	2400      	movs	r4, #0
 801269e:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 80126a2:	eb13 1080 	adds.w	r0, r3, r0, lsl #6
 80126a6:	d01c      	beq.n	80126e2 <imu_interfaces__srv__ImuCalibration_Event__fini+0x62>
 80126a8:	f008 fa14 	bl	801aad4 <sensor_msgs__msg__Imu__fini>
 80126ac:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80126ae:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80126b0:	3401      	adds	r4, #1
 80126b2:	4294      	cmp	r4, r2
 80126b4:	d3f3      	bcc.n	801269e <imu_interfaces__srv__ImuCalibration_Event__fini+0x1e>
 80126b6:	4618      	mov	r0, r3
 80126b8:	9a02      	ldr	r2, [sp, #8]
 80126ba:	9905      	ldr	r1, [sp, #20]
 80126bc:	4790      	blx	r2
 80126be:	2300      	movs	r3, #0
 80126c0:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80126c4:	632b      	str	r3, [r5, #48]	@ 0x30
 80126c6:	a801      	add	r0, sp, #4
 80126c8:	f7fc fe94 	bl	800f3f4 <rcutils_get_default_allocator>
 80126cc:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 80126ce:	b130      	cbz	r0, 80126de <imu_interfaces__srv__ImuCalibration_Event__fini+0x5e>
 80126d0:	9b02      	ldr	r3, [sp, #8]
 80126d2:	9905      	ldr	r1, [sp, #20]
 80126d4:	4798      	blx	r3
 80126d6:	2300      	movs	r3, #0
 80126d8:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80126dc:	63eb      	str	r3, [r5, #60]	@ 0x3c
 80126de:	b007      	add	sp, #28
 80126e0:	bd30      	pop	{r4, r5, pc}
 80126e2:	3401      	adds	r4, #1
 80126e4:	4294      	cmp	r4, r2
 80126e6:	d3da      	bcc.n	801269e <imu_interfaces__srv__ImuCalibration_Event__fini+0x1e>
 80126e8:	e7e5      	b.n	80126b6 <imu_interfaces__srv__ImuCalibration_Event__fini+0x36>
 80126ea:	4770      	bx	lr

080126ec <rosidl_typesupport_c__create_service_event_message__imu_interfaces__srv__ImuCalibration>:
 80126ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126f0:	2900      	cmp	r1, #0
 80126f2:	d03e      	beq.n	8012772 <rosidl_typesupport_c__create_service_event_message__imu_interfaces__srv__ImuCalibration+0x86>
 80126f4:	4605      	mov	r5, r0
 80126f6:	2800      	cmp	r0, #0
 80126f8:	d03b      	beq.n	8012772 <rosidl_typesupport_c__create_service_event_message__imu_interfaces__srv__ImuCalibration+0x86>
 80126fa:	4698      	mov	r8, r3
 80126fc:	460e      	mov	r6, r1
 80126fe:	680b      	ldr	r3, [r1, #0]
 8012700:	6909      	ldr	r1, [r1, #16]
 8012702:	2040      	movs	r0, #64	@ 0x40
 8012704:	4617      	mov	r7, r2
 8012706:	4798      	blx	r3
 8012708:	4604      	mov	r4, r0
 801270a:	f7ff ff6d 	bl	80125e8 <imu_interfaces__srv__ImuCalibration_Event__init>
 801270e:	b360      	cbz	r0, 801276a <rosidl_typesupport_c__create_service_event_message__imu_interfaces__srv__ImuCalibration+0x7e>
 8012710:	782b      	ldrb	r3, [r5, #0]
 8012712:	7023      	strb	r3, [r4, #0]
 8012714:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8012718:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 801271c:	e9c4 2301 	strd	r2, r3, [r4, #4]
 8012720:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8012724:	68e9      	ldr	r1, [r5, #12]
 8012726:	692a      	ldr	r2, [r5, #16]
 8012728:	696b      	ldr	r3, [r5, #20]
 801272a:	69a8      	ldr	r0, [r5, #24]
 801272c:	61a0      	str	r0, [r4, #24]
 801272e:	60e1      	str	r1, [r4, #12]
 8012730:	6122      	str	r2, [r4, #16]
 8012732:	6163      	str	r3, [r4, #20]
 8012734:	b14f      	cbz	r7, 801274a <rosidl_typesupport_c__create_service_event_message__imu_interfaces__srv__ImuCalibration+0x5e>
 8012736:	2101      	movs	r1, #1
 8012738:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801273c:	f7ff fea8 	bl	8012490 <imu_interfaces__srv__ImuCalibration_Request__Sequence__init>
 8012740:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8012742:	4638      	mov	r0, r7
 8012744:	f7ff fe9e 	bl	8012484 <imu_interfaces__srv__ImuCalibration_Request__copy>
 8012748:	b178      	cbz	r0, 801276a <rosidl_typesupport_c__create_service_event_message__imu_interfaces__srv__ImuCalibration+0x7e>
 801274a:	f1b8 0f00 	cmp.w	r8, #0
 801274e:	d009      	beq.n	8012764 <rosidl_typesupport_c__create_service_event_message__imu_interfaces__srv__ImuCalibration+0x78>
 8012750:	2101      	movs	r1, #1
 8012752:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8012756:	f7ff ff17 	bl	8012588 <imu_interfaces__srv__ImuCalibration_Response__Sequence__init>
 801275a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801275c:	4640      	mov	r0, r8
 801275e:	f7ff ff0b 	bl	8012578 <imu_interfaces__srv__ImuCalibration_Response__copy>
 8012762:	b110      	cbz	r0, 801276a <rosidl_typesupport_c__create_service_event_message__imu_interfaces__srv__ImuCalibration+0x7e>
 8012764:	4620      	mov	r0, r4
 8012766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801276a:	6873      	ldr	r3, [r6, #4]
 801276c:	6931      	ldr	r1, [r6, #16]
 801276e:	4620      	mov	r0, r4
 8012770:	4798      	blx	r3
 8012772:	2400      	movs	r4, #0
 8012774:	4620      	mov	r0, r4
 8012776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801277a:	bf00      	nop

0801277c <rosidl_typesupport_c__destroy_service_event_message__imu_interfaces__srv__ImuCalibration>:
 801277c:	b538      	push	{r3, r4, r5, lr}
 801277e:	460d      	mov	r5, r1
 8012780:	b199      	cbz	r1, 80127aa <rosidl_typesupport_c__destroy_service_event_message__imu_interfaces__srv__ImuCalibration+0x2e>
 8012782:	4604      	mov	r4, r0
 8012784:	b180      	cbz	r0, 80127a8 <rosidl_typesupport_c__destroy_service_event_message__imu_interfaces__srv__ImuCalibration+0x2c>
 8012786:	f7ff ff7b 	bl	8012680 <imu_interfaces__srv__ImuCalibration_Event__fini>
 801278a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801278c:	b110      	cbz	r0, 8012794 <rosidl_typesupport_c__destroy_service_event_message__imu_interfaces__srv__ImuCalibration+0x18>
 801278e:	686b      	ldr	r3, [r5, #4]
 8012790:	6929      	ldr	r1, [r5, #16]
 8012792:	4798      	blx	r3
 8012794:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8012796:	b110      	cbz	r0, 801279e <rosidl_typesupport_c__destroy_service_event_message__imu_interfaces__srv__ImuCalibration+0x22>
 8012798:	686b      	ldr	r3, [r5, #4]
 801279a:	6929      	ldr	r1, [r5, #16]
 801279c:	4798      	blx	r3
 801279e:	4620      	mov	r0, r4
 80127a0:	686b      	ldr	r3, [r5, #4]
 80127a2:	6929      	ldr	r1, [r5, #16]
 80127a4:	4798      	blx	r3
 80127a6:	2001      	movs	r0, #1
 80127a8:	bd38      	pop	{r3, r4, r5, pc}
 80127aa:	4608      	mov	r0, r1
 80127ac:	bd38      	pop	{r3, r4, r5, pc}
 80127ae:	bf00      	nop

080127b0 <ucdr_serialize_endian_array_char>:
 80127b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127b4:	4619      	mov	r1, r3
 80127b6:	461f      	mov	r7, r3
 80127b8:	4605      	mov	r5, r0
 80127ba:	4690      	mov	r8, r2
 80127bc:	f7fb fbfc 	bl	800dfb8 <ucdr_check_buffer_available_for>
 80127c0:	b9e0      	cbnz	r0, 80127fc <ucdr_serialize_endian_array_char+0x4c>
 80127c2:	463e      	mov	r6, r7
 80127c4:	e009      	b.n	80127da <ucdr_serialize_endian_array_char+0x2a>
 80127c6:	68a8      	ldr	r0, [r5, #8]
 80127c8:	f00b fa91 	bl	801dcee <memcpy>
 80127cc:	68ab      	ldr	r3, [r5, #8]
 80127ce:	6928      	ldr	r0, [r5, #16]
 80127d0:	4423      	add	r3, r4
 80127d2:	4420      	add	r0, r4
 80127d4:	1b36      	subs	r6, r6, r4
 80127d6:	60ab      	str	r3, [r5, #8]
 80127d8:	6128      	str	r0, [r5, #16]
 80127da:	2201      	movs	r2, #1
 80127dc:	4631      	mov	r1, r6
 80127de:	4628      	mov	r0, r5
 80127e0:	f7fb fc72 	bl	800e0c8 <ucdr_check_final_buffer_behavior_array>
 80127e4:	1bb9      	subs	r1, r7, r6
 80127e6:	4604      	mov	r4, r0
 80127e8:	4602      	mov	r2, r0
 80127ea:	4441      	add	r1, r8
 80127ec:	2800      	cmp	r0, #0
 80127ee:	d1ea      	bne.n	80127c6 <ucdr_serialize_endian_array_char+0x16>
 80127f0:	2301      	movs	r3, #1
 80127f2:	7da8      	ldrb	r0, [r5, #22]
 80127f4:	756b      	strb	r3, [r5, #21]
 80127f6:	4058      	eors	r0, r3
 80127f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127fc:	463a      	mov	r2, r7
 80127fe:	68a8      	ldr	r0, [r5, #8]
 8012800:	4641      	mov	r1, r8
 8012802:	f00b fa74 	bl	801dcee <memcpy>
 8012806:	68aa      	ldr	r2, [r5, #8]
 8012808:	692b      	ldr	r3, [r5, #16]
 801280a:	443a      	add	r2, r7
 801280c:	443b      	add	r3, r7
 801280e:	60aa      	str	r2, [r5, #8]
 8012810:	612b      	str	r3, [r5, #16]
 8012812:	e7ed      	b.n	80127f0 <ucdr_serialize_endian_array_char+0x40>

08012814 <ucdr_deserialize_endian_array_char>:
 8012814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012818:	4619      	mov	r1, r3
 801281a:	461f      	mov	r7, r3
 801281c:	4605      	mov	r5, r0
 801281e:	4690      	mov	r8, r2
 8012820:	f7fb fbca 	bl	800dfb8 <ucdr_check_buffer_available_for>
 8012824:	b9e0      	cbnz	r0, 8012860 <ucdr_deserialize_endian_array_char+0x4c>
 8012826:	463e      	mov	r6, r7
 8012828:	e009      	b.n	801283e <ucdr_deserialize_endian_array_char+0x2a>
 801282a:	68a9      	ldr	r1, [r5, #8]
 801282c:	f00b fa5f 	bl	801dcee <memcpy>
 8012830:	68aa      	ldr	r2, [r5, #8]
 8012832:	692b      	ldr	r3, [r5, #16]
 8012834:	4422      	add	r2, r4
 8012836:	4423      	add	r3, r4
 8012838:	1b36      	subs	r6, r6, r4
 801283a:	60aa      	str	r2, [r5, #8]
 801283c:	612b      	str	r3, [r5, #16]
 801283e:	2201      	movs	r2, #1
 8012840:	4631      	mov	r1, r6
 8012842:	4628      	mov	r0, r5
 8012844:	f7fb fc40 	bl	800e0c8 <ucdr_check_final_buffer_behavior_array>
 8012848:	4604      	mov	r4, r0
 801284a:	1bb8      	subs	r0, r7, r6
 801284c:	4622      	mov	r2, r4
 801284e:	4440      	add	r0, r8
 8012850:	2c00      	cmp	r4, #0
 8012852:	d1ea      	bne.n	801282a <ucdr_deserialize_endian_array_char+0x16>
 8012854:	2301      	movs	r3, #1
 8012856:	7da8      	ldrb	r0, [r5, #22]
 8012858:	756b      	strb	r3, [r5, #21]
 801285a:	4058      	eors	r0, r3
 801285c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012860:	463a      	mov	r2, r7
 8012862:	68a9      	ldr	r1, [r5, #8]
 8012864:	4640      	mov	r0, r8
 8012866:	f00b fa42 	bl	801dcee <memcpy>
 801286a:	68aa      	ldr	r2, [r5, #8]
 801286c:	692b      	ldr	r3, [r5, #16]
 801286e:	443a      	add	r2, r7
 8012870:	443b      	add	r3, r7
 8012872:	60aa      	str	r2, [r5, #8]
 8012874:	612b      	str	r3, [r5, #16]
 8012876:	e7ed      	b.n	8012854 <ucdr_deserialize_endian_array_char+0x40>

08012878 <ucdr_serialize_array_uint8_t>:
 8012878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801287c:	4688      	mov	r8, r1
 801287e:	4611      	mov	r1, r2
 8012880:	4617      	mov	r7, r2
 8012882:	4605      	mov	r5, r0
 8012884:	f7fb fb98 	bl	800dfb8 <ucdr_check_buffer_available_for>
 8012888:	b9e0      	cbnz	r0, 80128c4 <ucdr_serialize_array_uint8_t+0x4c>
 801288a:	463e      	mov	r6, r7
 801288c:	e009      	b.n	80128a2 <ucdr_serialize_array_uint8_t+0x2a>
 801288e:	68a8      	ldr	r0, [r5, #8]
 8012890:	f00b fa2d 	bl	801dcee <memcpy>
 8012894:	68aa      	ldr	r2, [r5, #8]
 8012896:	692b      	ldr	r3, [r5, #16]
 8012898:	4422      	add	r2, r4
 801289a:	4423      	add	r3, r4
 801289c:	1b36      	subs	r6, r6, r4
 801289e:	60aa      	str	r2, [r5, #8]
 80128a0:	612b      	str	r3, [r5, #16]
 80128a2:	2201      	movs	r2, #1
 80128a4:	4631      	mov	r1, r6
 80128a6:	4628      	mov	r0, r5
 80128a8:	f7fb fc0e 	bl	800e0c8 <ucdr_check_final_buffer_behavior_array>
 80128ac:	1bb9      	subs	r1, r7, r6
 80128ae:	4604      	mov	r4, r0
 80128b0:	4602      	mov	r2, r0
 80128b2:	4441      	add	r1, r8
 80128b4:	2800      	cmp	r0, #0
 80128b6:	d1ea      	bne.n	801288e <ucdr_serialize_array_uint8_t+0x16>
 80128b8:	2301      	movs	r3, #1
 80128ba:	7da8      	ldrb	r0, [r5, #22]
 80128bc:	756b      	strb	r3, [r5, #21]
 80128be:	4058      	eors	r0, r3
 80128c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128c4:	463a      	mov	r2, r7
 80128c6:	68a8      	ldr	r0, [r5, #8]
 80128c8:	4641      	mov	r1, r8
 80128ca:	f00b fa10 	bl	801dcee <memcpy>
 80128ce:	68aa      	ldr	r2, [r5, #8]
 80128d0:	692b      	ldr	r3, [r5, #16]
 80128d2:	443a      	add	r2, r7
 80128d4:	443b      	add	r3, r7
 80128d6:	60aa      	str	r2, [r5, #8]
 80128d8:	612b      	str	r3, [r5, #16]
 80128da:	e7ed      	b.n	80128b8 <ucdr_serialize_array_uint8_t+0x40>

080128dc <ucdr_serialize_endian_array_uint8_t>:
 80128dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128e0:	4619      	mov	r1, r3
 80128e2:	461f      	mov	r7, r3
 80128e4:	4605      	mov	r5, r0
 80128e6:	4690      	mov	r8, r2
 80128e8:	f7fb fb66 	bl	800dfb8 <ucdr_check_buffer_available_for>
 80128ec:	b9e0      	cbnz	r0, 8012928 <ucdr_serialize_endian_array_uint8_t+0x4c>
 80128ee:	463e      	mov	r6, r7
 80128f0:	e009      	b.n	8012906 <ucdr_serialize_endian_array_uint8_t+0x2a>
 80128f2:	68a8      	ldr	r0, [r5, #8]
 80128f4:	f00b f9fb 	bl	801dcee <memcpy>
 80128f8:	68ab      	ldr	r3, [r5, #8]
 80128fa:	6928      	ldr	r0, [r5, #16]
 80128fc:	4423      	add	r3, r4
 80128fe:	4420      	add	r0, r4
 8012900:	1b36      	subs	r6, r6, r4
 8012902:	60ab      	str	r3, [r5, #8]
 8012904:	6128      	str	r0, [r5, #16]
 8012906:	2201      	movs	r2, #1
 8012908:	4631      	mov	r1, r6
 801290a:	4628      	mov	r0, r5
 801290c:	f7fb fbdc 	bl	800e0c8 <ucdr_check_final_buffer_behavior_array>
 8012910:	1bb9      	subs	r1, r7, r6
 8012912:	4604      	mov	r4, r0
 8012914:	4602      	mov	r2, r0
 8012916:	4441      	add	r1, r8
 8012918:	2800      	cmp	r0, #0
 801291a:	d1ea      	bne.n	80128f2 <ucdr_serialize_endian_array_uint8_t+0x16>
 801291c:	2301      	movs	r3, #1
 801291e:	7da8      	ldrb	r0, [r5, #22]
 8012920:	756b      	strb	r3, [r5, #21]
 8012922:	4058      	eors	r0, r3
 8012924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012928:	463a      	mov	r2, r7
 801292a:	68a8      	ldr	r0, [r5, #8]
 801292c:	4641      	mov	r1, r8
 801292e:	f00b f9de 	bl	801dcee <memcpy>
 8012932:	68aa      	ldr	r2, [r5, #8]
 8012934:	692b      	ldr	r3, [r5, #16]
 8012936:	443a      	add	r2, r7
 8012938:	443b      	add	r3, r7
 801293a:	60aa      	str	r2, [r5, #8]
 801293c:	612b      	str	r3, [r5, #16]
 801293e:	e7ed      	b.n	801291c <ucdr_serialize_endian_array_uint8_t+0x40>

08012940 <ucdr_deserialize_array_uint8_t>:
 8012940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012944:	4688      	mov	r8, r1
 8012946:	4611      	mov	r1, r2
 8012948:	4617      	mov	r7, r2
 801294a:	4605      	mov	r5, r0
 801294c:	f7fb fb34 	bl	800dfb8 <ucdr_check_buffer_available_for>
 8012950:	b9e0      	cbnz	r0, 801298c <ucdr_deserialize_array_uint8_t+0x4c>
 8012952:	463e      	mov	r6, r7
 8012954:	e009      	b.n	801296a <ucdr_deserialize_array_uint8_t+0x2a>
 8012956:	68a9      	ldr	r1, [r5, #8]
 8012958:	f00b f9c9 	bl	801dcee <memcpy>
 801295c:	68aa      	ldr	r2, [r5, #8]
 801295e:	692b      	ldr	r3, [r5, #16]
 8012960:	4422      	add	r2, r4
 8012962:	4423      	add	r3, r4
 8012964:	1b36      	subs	r6, r6, r4
 8012966:	60aa      	str	r2, [r5, #8]
 8012968:	612b      	str	r3, [r5, #16]
 801296a:	2201      	movs	r2, #1
 801296c:	4631      	mov	r1, r6
 801296e:	4628      	mov	r0, r5
 8012970:	f7fb fbaa 	bl	800e0c8 <ucdr_check_final_buffer_behavior_array>
 8012974:	4604      	mov	r4, r0
 8012976:	1bb8      	subs	r0, r7, r6
 8012978:	4622      	mov	r2, r4
 801297a:	4440      	add	r0, r8
 801297c:	2c00      	cmp	r4, #0
 801297e:	d1ea      	bne.n	8012956 <ucdr_deserialize_array_uint8_t+0x16>
 8012980:	2301      	movs	r3, #1
 8012982:	7da8      	ldrb	r0, [r5, #22]
 8012984:	756b      	strb	r3, [r5, #21]
 8012986:	4058      	eors	r0, r3
 8012988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801298c:	463a      	mov	r2, r7
 801298e:	68a9      	ldr	r1, [r5, #8]
 8012990:	4640      	mov	r0, r8
 8012992:	f00b f9ac 	bl	801dcee <memcpy>
 8012996:	68aa      	ldr	r2, [r5, #8]
 8012998:	692b      	ldr	r3, [r5, #16]
 801299a:	443a      	add	r2, r7
 801299c:	443b      	add	r3, r7
 801299e:	60aa      	str	r2, [r5, #8]
 80129a0:	612b      	str	r3, [r5, #16]
 80129a2:	e7ed      	b.n	8012980 <ucdr_deserialize_array_uint8_t+0x40>

080129a4 <ucdr_deserialize_endian_array_uint8_t>:
 80129a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129a8:	4619      	mov	r1, r3
 80129aa:	461f      	mov	r7, r3
 80129ac:	4605      	mov	r5, r0
 80129ae:	4690      	mov	r8, r2
 80129b0:	f7fb fb02 	bl	800dfb8 <ucdr_check_buffer_available_for>
 80129b4:	b9e0      	cbnz	r0, 80129f0 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80129b6:	463e      	mov	r6, r7
 80129b8:	e009      	b.n	80129ce <ucdr_deserialize_endian_array_uint8_t+0x2a>
 80129ba:	68a9      	ldr	r1, [r5, #8]
 80129bc:	f00b f997 	bl	801dcee <memcpy>
 80129c0:	68aa      	ldr	r2, [r5, #8]
 80129c2:	692b      	ldr	r3, [r5, #16]
 80129c4:	4422      	add	r2, r4
 80129c6:	4423      	add	r3, r4
 80129c8:	1b36      	subs	r6, r6, r4
 80129ca:	60aa      	str	r2, [r5, #8]
 80129cc:	612b      	str	r3, [r5, #16]
 80129ce:	2201      	movs	r2, #1
 80129d0:	4631      	mov	r1, r6
 80129d2:	4628      	mov	r0, r5
 80129d4:	f7fb fb78 	bl	800e0c8 <ucdr_check_final_buffer_behavior_array>
 80129d8:	4604      	mov	r4, r0
 80129da:	1bb8      	subs	r0, r7, r6
 80129dc:	4622      	mov	r2, r4
 80129de:	4440      	add	r0, r8
 80129e0:	2c00      	cmp	r4, #0
 80129e2:	d1ea      	bne.n	80129ba <ucdr_deserialize_endian_array_uint8_t+0x16>
 80129e4:	2301      	movs	r3, #1
 80129e6:	7da8      	ldrb	r0, [r5, #22]
 80129e8:	756b      	strb	r3, [r5, #21]
 80129ea:	4058      	eors	r0, r3
 80129ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129f0:	463a      	mov	r2, r7
 80129f2:	68a9      	ldr	r1, [r5, #8]
 80129f4:	4640      	mov	r0, r8
 80129f6:	f00b f97a 	bl	801dcee <memcpy>
 80129fa:	68aa      	ldr	r2, [r5, #8]
 80129fc:	692b      	ldr	r3, [r5, #16]
 80129fe:	443a      	add	r2, r7
 8012a00:	443b      	add	r3, r7
 8012a02:	60aa      	str	r2, [r5, #8]
 8012a04:	612b      	str	r3, [r5, #16]
 8012a06:	e7ed      	b.n	80129e4 <ucdr_deserialize_endian_array_uint8_t+0x40>

08012a08 <ucdr_serialize_array_double>:
 8012a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a0c:	460e      	mov	r6, r1
 8012a0e:	2108      	movs	r1, #8
 8012a10:	4604      	mov	r4, r0
 8012a12:	4617      	mov	r7, r2
 8012a14:	f7fb fb30 	bl	800e078 <ucdr_buffer_alignment>
 8012a18:	4601      	mov	r1, r0
 8012a1a:	4620      	mov	r0, r4
 8012a1c:	7d65      	ldrb	r5, [r4, #21]
 8012a1e:	f7fb fb6f 	bl	800e100 <ucdr_advance_buffer>
 8012a22:	7d21      	ldrb	r1, [r4, #20]
 8012a24:	7565      	strb	r5, [r4, #21]
 8012a26:	2901      	cmp	r1, #1
 8012a28:	d010      	beq.n	8012a4c <ucdr_serialize_array_double+0x44>
 8012a2a:	b157      	cbz	r7, 8012a42 <ucdr_serialize_array_double+0x3a>
 8012a2c:	2500      	movs	r5, #0
 8012a2e:	e000      	b.n	8012a32 <ucdr_serialize_array_double+0x2a>
 8012a30:	7d21      	ldrb	r1, [r4, #20]
 8012a32:	ecb6 0b02 	vldmia	r6!, {d0}
 8012a36:	4620      	mov	r0, r4
 8012a38:	3501      	adds	r5, #1
 8012a3a:	f7fb f86f 	bl	800db1c <ucdr_serialize_endian_double>
 8012a3e:	42af      	cmp	r7, r5
 8012a40:	d1f6      	bne.n	8012a30 <ucdr_serialize_array_double+0x28>
 8012a42:	7da0      	ldrb	r0, [r4, #22]
 8012a44:	f080 0001 	eor.w	r0, r0, #1
 8012a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a4c:	00ff      	lsls	r7, r7, #3
 8012a4e:	4639      	mov	r1, r7
 8012a50:	4620      	mov	r0, r4
 8012a52:	f7fb fab1 	bl	800dfb8 <ucdr_check_buffer_available_for>
 8012a56:	b9f8      	cbnz	r0, 8012a98 <ucdr_serialize_array_double+0x90>
 8012a58:	46b8      	mov	r8, r7
 8012a5a:	e00a      	b.n	8012a72 <ucdr_serialize_array_double+0x6a>
 8012a5c:	68a0      	ldr	r0, [r4, #8]
 8012a5e:	f00b f946 	bl	801dcee <memcpy>
 8012a62:	68a2      	ldr	r2, [r4, #8]
 8012a64:	6923      	ldr	r3, [r4, #16]
 8012a66:	442a      	add	r2, r5
 8012a68:	442b      	add	r3, r5
 8012a6a:	eba8 0805 	sub.w	r8, r8, r5
 8012a6e:	60a2      	str	r2, [r4, #8]
 8012a70:	6123      	str	r3, [r4, #16]
 8012a72:	2208      	movs	r2, #8
 8012a74:	4641      	mov	r1, r8
 8012a76:	4620      	mov	r0, r4
 8012a78:	f7fb fb26 	bl	800e0c8 <ucdr_check_final_buffer_behavior_array>
 8012a7c:	eba7 0108 	sub.w	r1, r7, r8
 8012a80:	4605      	mov	r5, r0
 8012a82:	4602      	mov	r2, r0
 8012a84:	4431      	add	r1, r6
 8012a86:	2800      	cmp	r0, #0
 8012a88:	d1e8      	bne.n	8012a5c <ucdr_serialize_array_double+0x54>
 8012a8a:	7da0      	ldrb	r0, [r4, #22]
 8012a8c:	2308      	movs	r3, #8
 8012a8e:	7563      	strb	r3, [r4, #21]
 8012a90:	f080 0001 	eor.w	r0, r0, #1
 8012a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a98:	463a      	mov	r2, r7
 8012a9a:	68a0      	ldr	r0, [r4, #8]
 8012a9c:	4631      	mov	r1, r6
 8012a9e:	f00b f926 	bl	801dcee <memcpy>
 8012aa2:	68a2      	ldr	r2, [r4, #8]
 8012aa4:	6923      	ldr	r3, [r4, #16]
 8012aa6:	443a      	add	r2, r7
 8012aa8:	443b      	add	r3, r7
 8012aaa:	60a2      	str	r2, [r4, #8]
 8012aac:	6123      	str	r3, [r4, #16]
 8012aae:	e7ec      	b.n	8012a8a <ucdr_serialize_array_double+0x82>

08012ab0 <ucdr_deserialize_array_double>:
 8012ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ab4:	460e      	mov	r6, r1
 8012ab6:	2108      	movs	r1, #8
 8012ab8:	4604      	mov	r4, r0
 8012aba:	4617      	mov	r7, r2
 8012abc:	f7fb fadc 	bl	800e078 <ucdr_buffer_alignment>
 8012ac0:	4601      	mov	r1, r0
 8012ac2:	4620      	mov	r0, r4
 8012ac4:	7d65      	ldrb	r5, [r4, #21]
 8012ac6:	f7fb fb1b 	bl	800e100 <ucdr_advance_buffer>
 8012aca:	7d21      	ldrb	r1, [r4, #20]
 8012acc:	7565      	strb	r5, [r4, #21]
 8012ace:	2901      	cmp	r1, #1
 8012ad0:	d011      	beq.n	8012af6 <ucdr_deserialize_array_double+0x46>
 8012ad2:	b15f      	cbz	r7, 8012aec <ucdr_deserialize_array_double+0x3c>
 8012ad4:	2500      	movs	r5, #0
 8012ad6:	e000      	b.n	8012ada <ucdr_deserialize_array_double+0x2a>
 8012ad8:	7d21      	ldrb	r1, [r4, #20]
 8012ada:	4632      	mov	r2, r6
 8012adc:	4620      	mov	r0, r4
 8012ade:	3501      	adds	r5, #1
 8012ae0:	f7fb f9a2 	bl	800de28 <ucdr_deserialize_endian_double>
 8012ae4:	42af      	cmp	r7, r5
 8012ae6:	f106 0608 	add.w	r6, r6, #8
 8012aea:	d1f5      	bne.n	8012ad8 <ucdr_deserialize_array_double+0x28>
 8012aec:	7da0      	ldrb	r0, [r4, #22]
 8012aee:	f080 0001 	eor.w	r0, r0, #1
 8012af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012af6:	00ff      	lsls	r7, r7, #3
 8012af8:	4639      	mov	r1, r7
 8012afa:	4620      	mov	r0, r4
 8012afc:	f7fb fa5c 	bl	800dfb8 <ucdr_check_buffer_available_for>
 8012b00:	b9f8      	cbnz	r0, 8012b42 <ucdr_deserialize_array_double+0x92>
 8012b02:	46b8      	mov	r8, r7
 8012b04:	e00a      	b.n	8012b1c <ucdr_deserialize_array_double+0x6c>
 8012b06:	68a1      	ldr	r1, [r4, #8]
 8012b08:	f00b f8f1 	bl	801dcee <memcpy>
 8012b0c:	68a2      	ldr	r2, [r4, #8]
 8012b0e:	6923      	ldr	r3, [r4, #16]
 8012b10:	442a      	add	r2, r5
 8012b12:	442b      	add	r3, r5
 8012b14:	eba8 0805 	sub.w	r8, r8, r5
 8012b18:	60a2      	str	r2, [r4, #8]
 8012b1a:	6123      	str	r3, [r4, #16]
 8012b1c:	2208      	movs	r2, #8
 8012b1e:	4641      	mov	r1, r8
 8012b20:	4620      	mov	r0, r4
 8012b22:	f7fb fad1 	bl	800e0c8 <ucdr_check_final_buffer_behavior_array>
 8012b26:	4605      	mov	r5, r0
 8012b28:	eba7 0008 	sub.w	r0, r7, r8
 8012b2c:	462a      	mov	r2, r5
 8012b2e:	4430      	add	r0, r6
 8012b30:	2d00      	cmp	r5, #0
 8012b32:	d1e8      	bne.n	8012b06 <ucdr_deserialize_array_double+0x56>
 8012b34:	7da0      	ldrb	r0, [r4, #22]
 8012b36:	2308      	movs	r3, #8
 8012b38:	7563      	strb	r3, [r4, #21]
 8012b3a:	f080 0001 	eor.w	r0, r0, #1
 8012b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b42:	463a      	mov	r2, r7
 8012b44:	68a1      	ldr	r1, [r4, #8]
 8012b46:	4630      	mov	r0, r6
 8012b48:	f00b f8d1 	bl	801dcee <memcpy>
 8012b4c:	68a2      	ldr	r2, [r4, #8]
 8012b4e:	6923      	ldr	r3, [r4, #16]
 8012b50:	443a      	add	r2, r7
 8012b52:	443b      	add	r3, r7
 8012b54:	60a2      	str	r2, [r4, #8]
 8012b56:	6123      	str	r3, [r4, #16]
 8012b58:	e7ec      	b.n	8012b34 <ucdr_deserialize_array_double+0x84>
 8012b5a:	bf00      	nop

08012b5c <ucdr_serialize_sequence_char>:
 8012b5c:	b570      	push	{r4, r5, r6, lr}
 8012b5e:	460e      	mov	r6, r1
 8012b60:	4615      	mov	r5, r2
 8012b62:	7d01      	ldrb	r1, [r0, #20]
 8012b64:	4604      	mov	r4, r0
 8012b66:	f7fa f8bf 	bl	800cce8 <ucdr_serialize_endian_uint32_t>
 8012b6a:	b90d      	cbnz	r5, 8012b70 <ucdr_serialize_sequence_char+0x14>
 8012b6c:	2001      	movs	r0, #1
 8012b6e:	bd70      	pop	{r4, r5, r6, pc}
 8012b70:	7d21      	ldrb	r1, [r4, #20]
 8012b72:	462b      	mov	r3, r5
 8012b74:	4632      	mov	r2, r6
 8012b76:	4620      	mov	r0, r4
 8012b78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b7c:	f7ff be18 	b.w	80127b0 <ucdr_serialize_endian_array_char>

08012b80 <ucdr_deserialize_sequence_char>:
 8012b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b84:	461d      	mov	r5, r3
 8012b86:	4616      	mov	r6, r2
 8012b88:	460f      	mov	r7, r1
 8012b8a:	461a      	mov	r2, r3
 8012b8c:	7d01      	ldrb	r1, [r0, #20]
 8012b8e:	4604      	mov	r4, r0
 8012b90:	f7fa f9c8 	bl	800cf24 <ucdr_deserialize_endian_uint32_t>
 8012b94:	682b      	ldr	r3, [r5, #0]
 8012b96:	429e      	cmp	r6, r3
 8012b98:	d208      	bcs.n	8012bac <ucdr_deserialize_sequence_char+0x2c>
 8012b9a:	2201      	movs	r2, #1
 8012b9c:	75a2      	strb	r2, [r4, #22]
 8012b9e:	7d21      	ldrb	r1, [r4, #20]
 8012ba0:	463a      	mov	r2, r7
 8012ba2:	4620      	mov	r0, r4
 8012ba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ba8:	f7ff be34 	b.w	8012814 <ucdr_deserialize_endian_array_char>
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d1f6      	bne.n	8012b9e <ucdr_deserialize_sequence_char+0x1e>
 8012bb0:	2001      	movs	r0, #1
 8012bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bb6:	bf00      	nop

08012bb8 <ucdr_serialize_sequence_uint8_t>:
 8012bb8:	b570      	push	{r4, r5, r6, lr}
 8012bba:	460e      	mov	r6, r1
 8012bbc:	4615      	mov	r5, r2
 8012bbe:	7d01      	ldrb	r1, [r0, #20]
 8012bc0:	4604      	mov	r4, r0
 8012bc2:	f7fa f891 	bl	800cce8 <ucdr_serialize_endian_uint32_t>
 8012bc6:	b90d      	cbnz	r5, 8012bcc <ucdr_serialize_sequence_uint8_t+0x14>
 8012bc8:	2001      	movs	r0, #1
 8012bca:	bd70      	pop	{r4, r5, r6, pc}
 8012bcc:	7d21      	ldrb	r1, [r4, #20]
 8012bce:	462b      	mov	r3, r5
 8012bd0:	4632      	mov	r2, r6
 8012bd2:	4620      	mov	r0, r4
 8012bd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012bd8:	f7ff be80 	b.w	80128dc <ucdr_serialize_endian_array_uint8_t>

08012bdc <ucdr_deserialize_sequence_uint8_t>:
 8012bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012be0:	461d      	mov	r5, r3
 8012be2:	4616      	mov	r6, r2
 8012be4:	460f      	mov	r7, r1
 8012be6:	461a      	mov	r2, r3
 8012be8:	7d01      	ldrb	r1, [r0, #20]
 8012bea:	4604      	mov	r4, r0
 8012bec:	f7fa f99a 	bl	800cf24 <ucdr_deserialize_endian_uint32_t>
 8012bf0:	682b      	ldr	r3, [r5, #0]
 8012bf2:	429e      	cmp	r6, r3
 8012bf4:	d208      	bcs.n	8012c08 <ucdr_deserialize_sequence_uint8_t+0x2c>
 8012bf6:	2201      	movs	r2, #1
 8012bf8:	75a2      	strb	r2, [r4, #22]
 8012bfa:	7d21      	ldrb	r1, [r4, #20]
 8012bfc:	463a      	mov	r2, r7
 8012bfe:	4620      	mov	r0, r4
 8012c00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c04:	f7ff bece 	b.w	80129a4 <ucdr_deserialize_endian_array_uint8_t>
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d1f6      	bne.n	8012bfa <ucdr_deserialize_sequence_uint8_t+0x1e>
 8012c0c:	2001      	movs	r0, #1
 8012c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c12:	bf00      	nop

08012c14 <uxr_buffer_delete_entity>:
 8012c14:	b510      	push	{r4, lr}
 8012c16:	2300      	movs	r3, #0
 8012c18:	b08e      	sub	sp, #56	@ 0x38
 8012c1a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012c1e:	2303      	movs	r3, #3
 8012c20:	9300      	str	r3, [sp, #0]
 8012c22:	2204      	movs	r2, #4
 8012c24:	ab06      	add	r3, sp, #24
 8012c26:	4604      	mov	r4, r0
 8012c28:	f001 fae8 	bl	80141fc <uxr_prepare_stream_to_write_submessage>
 8012c2c:	b918      	cbnz	r0, 8012c36 <uxr_buffer_delete_entity+0x22>
 8012c2e:	4604      	mov	r4, r0
 8012c30:	4620      	mov	r0, r4
 8012c32:	b00e      	add	sp, #56	@ 0x38
 8012c34:	bd10      	pop	{r4, pc}
 8012c36:	9902      	ldr	r1, [sp, #8]
 8012c38:	aa05      	add	r2, sp, #20
 8012c3a:	4620      	mov	r0, r4
 8012c3c:	f001 fc18 	bl	8014470 <uxr_init_base_object_request>
 8012c40:	a905      	add	r1, sp, #20
 8012c42:	4604      	mov	r4, r0
 8012c44:	a806      	add	r0, sp, #24
 8012c46:	f003 f9cd 	bl	8015fe4 <uxr_serialize_DELETE_Payload>
 8012c4a:	4620      	mov	r0, r4
 8012c4c:	b00e      	add	sp, #56	@ 0x38
 8012c4e:	bd10      	pop	{r4, pc}

08012c50 <uxr_common_create_entity>:
 8012c50:	b510      	push	{r4, lr}
 8012c52:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8012c56:	b08c      	sub	sp, #48	@ 0x30
 8012c58:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8012c5c:	f1bc 0f01 	cmp.w	ip, #1
 8012c60:	bf08      	it	eq
 8012c62:	f003 0201 	andeq.w	r2, r3, #1
 8012c66:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8012c6a:	bf18      	it	ne
 8012c6c:	2200      	movne	r2, #0
 8012c6e:	330e      	adds	r3, #14
 8012c70:	441a      	add	r2, r3
 8012c72:	2301      	movs	r3, #1
 8012c74:	e9cd 3100 	strd	r3, r1, [sp]
 8012c78:	b292      	uxth	r2, r2
 8012c7a:	9903      	ldr	r1, [sp, #12]
 8012c7c:	ab04      	add	r3, sp, #16
 8012c7e:	4604      	mov	r4, r0
 8012c80:	f001 fabc 	bl	80141fc <uxr_prepare_stream_to_write_submessage>
 8012c84:	b918      	cbnz	r0, 8012c8e <uxr_common_create_entity+0x3e>
 8012c86:	4604      	mov	r4, r0
 8012c88:	4620      	mov	r0, r4
 8012c8a:	b00c      	add	sp, #48	@ 0x30
 8012c8c:	bd10      	pop	{r4, pc}
 8012c8e:	9902      	ldr	r1, [sp, #8]
 8012c90:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012c92:	4620      	mov	r0, r4
 8012c94:	f001 fbec 	bl	8014470 <uxr_init_base_object_request>
 8012c98:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012c9a:	4604      	mov	r4, r0
 8012c9c:	a804      	add	r0, sp, #16
 8012c9e:	f003 f8ff 	bl	8015ea0 <uxr_serialize_CREATE_Payload>
 8012ca2:	4620      	mov	r0, r4
 8012ca4:	b00c      	add	sp, #48	@ 0x30
 8012ca6:	bd10      	pop	{r4, pc}

08012ca8 <uxr_buffer_create_participant_bin>:
 8012ca8:	b570      	push	{r4, r5, r6, lr}
 8012caa:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8012cae:	ac11      	add	r4, sp, #68	@ 0x44
 8012cb0:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8012cb4:	2303      	movs	r3, #3
 8012cb6:	7223      	strb	r3, [r4, #8]
 8012cb8:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8012cba:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8012cbe:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8012cc2:	2201      	movs	r2, #1
 8012cc4:	2100      	movs	r1, #0
 8012cc6:	4605      	mov	r5, r0
 8012cc8:	7122      	strb	r2, [r4, #4]
 8012cca:	f88d 1014 	strb.w	r1, [sp, #20]
 8012cce:	b1cb      	cbz	r3, 8012d04 <uxr_buffer_create_participant_bin+0x5c>
 8012cd0:	f88d 201c 	strb.w	r2, [sp, #28]
 8012cd4:	9308      	str	r3, [sp, #32]
 8012cd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012cda:	a915      	add	r1, sp, #84	@ 0x54
 8012cdc:	a809      	add	r0, sp, #36	@ 0x24
 8012cde:	f7fb f9bf 	bl	800e060 <ucdr_init_buffer>
 8012ce2:	a905      	add	r1, sp, #20
 8012ce4:	a809      	add	r0, sp, #36	@ 0x24
 8012ce6:	f002 fda1 	bl	801582c <uxr_serialize_OBJK_DomainParticipant_Binary>
 8012cea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012cec:	9600      	str	r6, [sp, #0]
 8012cee:	9401      	str	r4, [sp, #4]
 8012cf0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012cf4:	60e3      	str	r3, [r4, #12]
 8012cf6:	4628      	mov	r0, r5
 8012cf8:	b29b      	uxth	r3, r3
 8012cfa:	f7ff ffa9 	bl	8012c50 <uxr_common_create_entity>
 8012cfe:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8012d02:	bd70      	pop	{r4, r5, r6, pc}
 8012d04:	f88d 301c 	strb.w	r3, [sp, #28]
 8012d08:	e7e5      	b.n	8012cd6 <uxr_buffer_create_participant_bin+0x2e>
 8012d0a:	bf00      	nop

08012d0c <uxr_buffer_create_topic_bin>:
 8012d0c:	b570      	push	{r4, r5, r6, lr}
 8012d0e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8012d12:	4605      	mov	r5, r0
 8012d14:	9105      	str	r1, [sp, #20]
 8012d16:	4618      	mov	r0, r3
 8012d18:	a997      	add	r1, sp, #604	@ 0x25c
 8012d1a:	2302      	movs	r3, #2
 8012d1c:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8012d20:	9204      	str	r2, [sp, #16]
 8012d22:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8012d26:	f000 f9d5 	bl	80130d4 <uxr_object_id_to_raw>
 8012d2a:	2303      	movs	r3, #3
 8012d2c:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8012d30:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8012d32:	9306      	str	r3, [sp, #24]
 8012d34:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8012d36:	930a      	str	r3, [sp, #40]	@ 0x28
 8012d38:	2301      	movs	r3, #1
 8012d3a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8012d3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012d42:	2300      	movs	r3, #0
 8012d44:	a917      	add	r1, sp, #92	@ 0x5c
 8012d46:	a80b      	add	r0, sp, #44	@ 0x2c
 8012d48:	f88d 301c 	strb.w	r3, [sp, #28]
 8012d4c:	f7fb f988 	bl	800e060 <ucdr_init_buffer>
 8012d50:	a906      	add	r1, sp, #24
 8012d52:	a80b      	add	r0, sp, #44	@ 0x2c
 8012d54:	f002 fd8c 	bl	8015870 <uxr_serialize_OBJK_Topic_Binary>
 8012d58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d5a:	9316      	str	r3, [sp, #88]	@ 0x58
 8012d5c:	ac13      	add	r4, sp, #76	@ 0x4c
 8012d5e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012d62:	9600      	str	r6, [sp, #0]
 8012d64:	9401      	str	r4, [sp, #4]
 8012d66:	b29b      	uxth	r3, r3
 8012d68:	4628      	mov	r0, r5
 8012d6a:	f7ff ff71 	bl	8012c50 <uxr_common_create_entity>
 8012d6e:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8012d72:	bd70      	pop	{r4, r5, r6, pc}

08012d74 <uxr_buffer_create_publisher_bin>:
 8012d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d76:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8012d7a:	4605      	mov	r5, r0
 8012d7c:	9105      	str	r1, [sp, #20]
 8012d7e:	4618      	mov	r0, r3
 8012d80:	2603      	movs	r6, #3
 8012d82:	a992      	add	r1, sp, #584	@ 0x248
 8012d84:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8012d88:	9204      	str	r2, [sp, #16]
 8012d8a:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8012d8e:	f000 f9a1 	bl	80130d4 <uxr_object_id_to_raw>
 8012d92:	2300      	movs	r3, #0
 8012d94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012d98:	a912      	add	r1, sp, #72	@ 0x48
 8012d9a:	a806      	add	r0, sp, #24
 8012d9c:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8012da0:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8012da4:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8012da8:	f7fb f95a 	bl	800e060 <ucdr_init_buffer>
 8012dac:	a993      	add	r1, sp, #588	@ 0x24c
 8012dae:	a806      	add	r0, sp, #24
 8012db0:	f002 fe14 	bl	80159dc <uxr_serialize_OBJK_Publisher_Binary>
 8012db4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012db6:	9311      	str	r3, [sp, #68]	@ 0x44
 8012db8:	ac0e      	add	r4, sp, #56	@ 0x38
 8012dba:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012dbe:	9700      	str	r7, [sp, #0]
 8012dc0:	9401      	str	r4, [sp, #4]
 8012dc2:	b29b      	uxth	r3, r3
 8012dc4:	4628      	mov	r0, r5
 8012dc6:	f7ff ff43 	bl	8012c50 <uxr_common_create_entity>
 8012dca:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8012dce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012dd0 <uxr_buffer_create_datawriter_bin>:
 8012dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012dd2:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8012dd6:	ac1d      	add	r4, sp, #116	@ 0x74
 8012dd8:	9105      	str	r1, [sp, #20]
 8012dda:	4605      	mov	r5, r0
 8012ddc:	a9a1      	add	r1, sp, #644	@ 0x284
 8012dde:	4618      	mov	r0, r3
 8012de0:	2305      	movs	r3, #5
 8012de2:	f8bd 72a8 	ldrh.w	r7, [sp, #680]	@ 0x2a8
 8012de6:	9204      	str	r2, [sp, #16]
 8012de8:	7123      	strb	r3, [r4, #4]
 8012dea:	f89d 62ac 	ldrb.w	r6, [sp, #684]	@ 0x2ac
 8012dee:	f000 f971 	bl	80130d4 <uxr_object_id_to_raw>
 8012df2:	2303      	movs	r3, #3
 8012df4:	a90e      	add	r1, sp, #56	@ 0x38
 8012df6:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8012df8:	7223      	strb	r3, [r4, #8]
 8012dfa:	f000 f96b 	bl	80130d4 <uxr_object_id_to_raw>
 8012dfe:	f89d 32a5 	ldrb.w	r3, [sp, #677]	@ 0x2a5
 8012e02:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 8012e06:	2200      	movs	r2, #0
 8012e08:	3f00      	subs	r7, #0
 8012e0a:	fab3 f383 	clz	r3, r3
 8012e0e:	f89d 12a6 	ldrb.w	r1, [sp, #678]	@ 0x2a6
 8012e12:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 8012e16:	bf18      	it	ne
 8012e18:	2701      	movne	r7, #1
 8012e1a:	095b      	lsrs	r3, r3, #5
 8012e1c:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 8012e20:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 8012e24:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 8012e28:	2201      	movs	r2, #1
 8012e2a:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 8012e2e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012e32:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 8012e36:	b919      	cbnz	r1, 8012e40 <uxr_buffer_create_datawriter_bin+0x70>
 8012e38:	f043 0302 	orr.w	r3, r3, #2
 8012e3c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012e40:	f89d 22a4 	ldrb.w	r2, [sp, #676]	@ 0x2a4
 8012e44:	2a01      	cmp	r2, #1
 8012e46:	d022      	beq.n	8012e8e <uxr_buffer_create_datawriter_bin+0xbe>
 8012e48:	2a03      	cmp	r2, #3
 8012e4a:	d01b      	beq.n	8012e84 <uxr_buffer_create_datawriter_bin+0xb4>
 8012e4c:	b91a      	cbnz	r2, 8012e56 <uxr_buffer_create_datawriter_bin+0x86>
 8012e4e:	f043 0308 	orr.w	r3, r3, #8
 8012e52:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012e56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012e5a:	a921      	add	r1, sp, #132	@ 0x84
 8012e5c:	a806      	add	r0, sp, #24
 8012e5e:	f7fb f8ff 	bl	800e060 <ucdr_init_buffer>
 8012e62:	a90e      	add	r1, sp, #56	@ 0x38
 8012e64:	a806      	add	r0, sp, #24
 8012e66:	f002 fe1f 	bl	8015aa8 <uxr_serialize_OBJK_DataWriter_Binary>
 8012e6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012e6c:	9600      	str	r6, [sp, #0]
 8012e6e:	9401      	str	r4, [sp, #4]
 8012e70:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012e74:	60e3      	str	r3, [r4, #12]
 8012e76:	4628      	mov	r0, r5
 8012e78:	b29b      	uxth	r3, r3
 8012e7a:	f7ff fee9 	bl	8012c50 <uxr_common_create_entity>
 8012e7e:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8012e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e84:	f043 0320 	orr.w	r3, r3, #32
 8012e88:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012e8c:	e7e3      	b.n	8012e56 <uxr_buffer_create_datawriter_bin+0x86>
 8012e8e:	f043 0310 	orr.w	r3, r3, #16
 8012e92:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012e96:	e7de      	b.n	8012e56 <uxr_buffer_create_datawriter_bin+0x86>

08012e98 <uxr_buffer_create_replier_bin>:
 8012e98:	b570      	push	{r4, r5, r6, lr}
 8012e9a:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8012e9e:	4605      	mov	r5, r0
 8012ea0:	9105      	str	r1, [sp, #20]
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	a999      	add	r1, sp, #612	@ 0x264
 8012ea6:	2308      	movs	r3, #8
 8012ea8:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 8012eac:	9204      	str	r2, [sp, #16]
 8012eae:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 8012eb2:	f000 f90f 	bl	80130d4 <uxr_object_id_to_raw>
 8012eb6:	2203      	movs	r2, #3
 8012eb8:	f88d 205c 	strb.w	r2, [sp, #92]	@ 0x5c
 8012ebc:	9a9e      	ldr	r2, [sp, #632]	@ 0x278
 8012ebe:	9206      	str	r2, [sp, #24]
 8012ec0:	9a9f      	ldr	r2, [sp, #636]	@ 0x27c
 8012ec2:	9207      	str	r2, [sp, #28]
 8012ec4:	9aa0      	ldr	r2, [sp, #640]	@ 0x280
 8012ec6:	9208      	str	r2, [sp, #32]
 8012ec8:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8012eca:	920c      	str	r2, [sp, #48]	@ 0x30
 8012ecc:	9aa1      	ldr	r2, [sp, #644]	@ 0x284
 8012ece:	920a      	str	r2, [sp, #40]	@ 0x28
 8012ed0:	2301      	movs	r3, #1
 8012ed2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012ed6:	a919      	add	r1, sp, #100	@ 0x64
 8012ed8:	a80d      	add	r0, sp, #52	@ 0x34
 8012eda:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8012ede:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8012ee2:	f7fb f8bd 	bl	800e060 <ucdr_init_buffer>
 8012ee6:	a906      	add	r1, sp, #24
 8012ee8:	a80d      	add	r0, sp, #52	@ 0x34
 8012eea:	f002 fe09 	bl	8015b00 <uxr_serialize_OBJK_Replier_Binary>
 8012eee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012ef0:	9318      	str	r3, [sp, #96]	@ 0x60
 8012ef2:	ac15      	add	r4, sp, #84	@ 0x54
 8012ef4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012ef8:	9600      	str	r6, [sp, #0]
 8012efa:	9401      	str	r4, [sp, #4]
 8012efc:	b29b      	uxth	r3, r3
 8012efe:	4628      	mov	r0, r5
 8012f00:	f7ff fea6 	bl	8012c50 <uxr_common_create_entity>
 8012f04:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 8012f08:	bd70      	pop	{r4, r5, r6, pc}
 8012f0a:	bf00      	nop

08012f0c <get_custom_error>:
 8012f0c:	4b01      	ldr	r3, [pc, #4]	@ (8012f14 <get_custom_error+0x8>)
 8012f0e:	7818      	ldrb	r0, [r3, #0]
 8012f10:	4770      	bx	lr
 8012f12:	bf00      	nop
 8012f14:	2000f3ad 	.word	0x2000f3ad

08012f18 <recv_custom_msg>:
 8012f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f1c:	b089      	sub	sp, #36	@ 0x24
 8012f1e:	4693      	mov	fp, r2
 8012f20:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8012f24:	9104      	str	r1, [sp, #16]
 8012f26:	2100      	movs	r1, #0
 8012f28:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8012f2c:	9305      	str	r3, [sp, #20]
 8012f2e:	4604      	mov	r4, r0
 8012f30:	f88d 101e 	strb.w	r1, [sp, #30]
 8012f34:	b332      	cbz	r2, 8012f84 <recv_custom_msg+0x6c>
 8012f36:	f200 2a02 	addw	sl, r0, #514	@ 0x202
 8012f3a:	f10d 091f 	add.w	r9, sp, #31
 8012f3e:	f10d 0814 	add.w	r8, sp, #20
 8012f42:	f10d 071e 	add.w	r7, sp, #30
 8012f46:	f44f 7600 	mov.w	r6, #512	@ 0x200
 8012f4a:	e004      	b.n	8012f56 <recv_custom_msg+0x3e>
 8012f4c:	9b05      	ldr	r3, [sp, #20]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	dd10      	ble.n	8012f74 <recv_custom_msg+0x5c>
 8012f52:	f8d4 5274 	ldr.w	r5, [r4, #628]	@ 0x274
 8012f56:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8012f5a:	e9cd 6700 	strd	r6, r7, [sp]
 8012f5e:	4623      	mov	r3, r4
 8012f60:	4622      	mov	r2, r4
 8012f62:	4629      	mov	r1, r5
 8012f64:	4650      	mov	r0, sl
 8012f66:	f001 fc95 	bl	8014894 <uxr_read_framed_msg>
 8012f6a:	2800      	cmp	r0, #0
 8012f6c:	d0ee      	beq.n	8012f4c <recv_custom_msg+0x34>
 8012f6e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012f72:	b1a3      	cbz	r3, 8012f9e <recv_custom_msg+0x86>
 8012f74:	4b0e      	ldr	r3, [pc, #56]	@ (8012fb0 <recv_custom_msg+0x98>)
 8012f76:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8012f7a:	701a      	strb	r2, [r3, #0]
 8012f7c:	2000      	movs	r0, #0
 8012f7e:	b009      	add	sp, #36	@ 0x24
 8012f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f84:	f10d 021f 	add.w	r2, sp, #31
 8012f88:	9200      	str	r2, [sp, #0]
 8012f8a:	4601      	mov	r1, r0
 8012f8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012f90:	47a8      	blx	r5
 8012f92:	2800      	cmp	r0, #0
 8012f94:	d0ee      	beq.n	8012f74 <recv_custom_msg+0x5c>
 8012f96:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d1ea      	bne.n	8012f74 <recv_custom_msg+0x5c>
 8012f9e:	9b04      	ldr	r3, [sp, #16]
 8012fa0:	f8cb 0000 	str.w	r0, [fp]
 8012fa4:	2001      	movs	r0, #1
 8012fa6:	601c      	str	r4, [r3, #0]
 8012fa8:	b009      	add	sp, #36	@ 0x24
 8012faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fae:	bf00      	nop
 8012fb0:	2000f3ad 	.word	0x2000f3ad

08012fb4 <send_custom_msg>:
 8012fb4:	b570      	push	{r4, r5, r6, lr}
 8012fb6:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8012fba:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8012fbe:	b086      	sub	sp, #24
 8012fc0:	4616      	mov	r6, r2
 8012fc2:	b965      	cbnz	r5, 8012fde <send_custom_msg+0x2a>
 8012fc4:	f10d 0317 	add.w	r3, sp, #23
 8012fc8:	47a0      	blx	r4
 8012fca:	b108      	cbz	r0, 8012fd0 <send_custom_msg+0x1c>
 8012fcc:	42b0      	cmp	r0, r6
 8012fce:	d014      	beq.n	8012ffa <send_custom_msg+0x46>
 8012fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8013000 <send_custom_msg+0x4c>)
 8012fd2:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8012fd6:	701a      	strb	r2, [r3, #0]
 8012fd8:	2000      	movs	r0, #0
 8012fda:	b006      	add	sp, #24
 8012fdc:	bd70      	pop	{r4, r5, r6, pc}
 8012fde:	f10d 0217 	add.w	r2, sp, #23
 8012fe2:	9202      	str	r2, [sp, #8]
 8012fe4:	2200      	movs	r2, #0
 8012fe6:	e9cd 6200 	strd	r6, r2, [sp]
 8012fea:	460b      	mov	r3, r1
 8012fec:	4602      	mov	r2, r0
 8012fee:	4621      	mov	r1, r4
 8012ff0:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8012ff4:	f001 fa70 	bl	80144d8 <uxr_write_framed_msg>
 8012ff8:	e7e7      	b.n	8012fca <send_custom_msg+0x16>
 8012ffa:	2001      	movs	r0, #1
 8012ffc:	b006      	add	sp, #24
 8012ffe:	bd70      	pop	{r4, r5, r6, pc}
 8013000:	2000f3ad 	.word	0x2000f3ad

08013004 <uxr_set_custom_transport_callbacks>:
 8013004:	b410      	push	{r4}
 8013006:	9c01      	ldr	r4, [sp, #4]
 8013008:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 801300c:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8013010:	9b02      	ldr	r3, [sp, #8]
 8013012:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8013016:	f85d 4b04 	ldr.w	r4, [sp], #4
 801301a:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 801301e:	4770      	bx	lr

08013020 <uxr_init_custom_transport>:
 8013020:	b538      	push	{r3, r4, r5, lr}
 8013022:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8013026:	b303      	cbz	r3, 801306a <uxr_init_custom_transport+0x4a>
 8013028:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 801302c:	4604      	mov	r4, r0
 801302e:	b1e2      	cbz	r2, 801306a <uxr_init_custom_transport+0x4a>
 8013030:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8013034:	b1ca      	cbz	r2, 801306a <uxr_init_custom_transport+0x4a>
 8013036:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801303a:	b1b2      	cbz	r2, 801306a <uxr_init_custom_transport+0x4a>
 801303c:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8013040:	4798      	blx	r3
 8013042:	4605      	mov	r5, r0
 8013044:	b188      	cbz	r0, 801306a <uxr_init_custom_transport+0x4a>
 8013046:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801304a:	b98b      	cbnz	r3, 8013070 <uxr_init_custom_transport+0x50>
 801304c:	490b      	ldr	r1, [pc, #44]	@ (801307c <uxr_init_custom_transport+0x5c>)
 801304e:	4b0c      	ldr	r3, [pc, #48]	@ (8013080 <uxr_init_custom_transport+0x60>)
 8013050:	4a0c      	ldr	r2, [pc, #48]	@ (8013084 <uxr_init_custom_transport+0x64>)
 8013052:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8013056:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801305a:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 801305e:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8013062:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8013066:	4628      	mov	r0, r5
 8013068:	bd38      	pop	{r3, r4, r5, pc}
 801306a:	2500      	movs	r5, #0
 801306c:	4628      	mov	r0, r5
 801306e:	bd38      	pop	{r3, r4, r5, pc}
 8013070:	2100      	movs	r1, #0
 8013072:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8013076:	f001 fa29 	bl	80144cc <uxr_init_framing_io>
 801307a:	e7e7      	b.n	801304c <uxr_init_custom_transport+0x2c>
 801307c:	08012fb5 	.word	0x08012fb5
 8013080:	08012f19 	.word	0x08012f19
 8013084:	08012f0d 	.word	0x08012f0d

08013088 <uxr_close_custom_transport>:
 8013088:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 801308c:	4718      	bx	r3
 801308e:	bf00      	nop

08013090 <uxr_object_id>:
 8013090:	b082      	sub	sp, #8
 8013092:	2300      	movs	r3, #0
 8013094:	f88d 1006 	strb.w	r1, [sp, #6]
 8013098:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801309c:	f360 030f 	bfi	r3, r0, #0, #16
 80130a0:	f362 431f 	bfi	r3, r2, #16, #16
 80130a4:	4618      	mov	r0, r3
 80130a6:	b002      	add	sp, #8
 80130a8:	4770      	bx	lr
 80130aa:	bf00      	nop

080130ac <uxr_object_id_from_raw>:
 80130ac:	7843      	ldrb	r3, [r0, #1]
 80130ae:	7801      	ldrb	r1, [r0, #0]
 80130b0:	b082      	sub	sp, #8
 80130b2:	f003 020f 	and.w	r2, r3, #15
 80130b6:	f88d 2006 	strb.w	r2, [sp, #6]
 80130ba:	091b      	lsrs	r3, r3, #4
 80130bc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80130c0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80130c4:	2000      	movs	r0, #0
 80130c6:	f363 000f 	bfi	r0, r3, #0, #16
 80130ca:	f362 401f 	bfi	r0, r2, #16, #16
 80130ce:	b002      	add	sp, #8
 80130d0:	4770      	bx	lr
 80130d2:	bf00      	nop

080130d4 <uxr_object_id_to_raw>:
 80130d4:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80130d8:	b082      	sub	sp, #8
 80130da:	f3c0 120b 	ubfx	r2, r0, #4, #12
 80130de:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80130e2:	700a      	strb	r2, [r1, #0]
 80130e4:	704b      	strb	r3, [r1, #1]
 80130e6:	b002      	add	sp, #8
 80130e8:	4770      	bx	lr
 80130ea:	bf00      	nop

080130ec <uxr_buffer_request_data>:
 80130ec:	b530      	push	{r4, r5, lr}
 80130ee:	b095      	sub	sp, #84	@ 0x54
 80130f0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80130f4:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80130f6:	f88d 301c 	strb.w	r3, [sp, #28]
 80130fa:	2200      	movs	r2, #0
 80130fc:	2d00      	cmp	r5, #0
 80130fe:	bf14      	ite	ne
 8013100:	2101      	movne	r1, #1
 8013102:	4611      	moveq	r1, r2
 8013104:	4604      	mov	r4, r0
 8013106:	f88d 201d 	strb.w	r2, [sp, #29]
 801310a:	f88d 201e 	strb.w	r2, [sp, #30]
 801310e:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8013112:	d021      	beq.n	8013158 <uxr_buffer_request_data+0x6c>
 8013114:	682a      	ldr	r2, [r5, #0]
 8013116:	686b      	ldr	r3, [r5, #4]
 8013118:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 801311c:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8013120:	2210      	movs	r2, #16
 8013122:	2308      	movs	r3, #8
 8013124:	2100      	movs	r1, #0
 8013126:	e9cd 3100 	strd	r3, r1, [sp]
 801312a:	4620      	mov	r0, r4
 801312c:	9905      	ldr	r1, [sp, #20]
 801312e:	ab0c      	add	r3, sp, #48	@ 0x30
 8013130:	f001 f864 	bl	80141fc <uxr_prepare_stream_to_write_submessage>
 8013134:	b918      	cbnz	r0, 801313e <uxr_buffer_request_data+0x52>
 8013136:	4604      	mov	r4, r0
 8013138:	4620      	mov	r0, r4
 801313a:	b015      	add	sp, #84	@ 0x54
 801313c:	bd30      	pop	{r4, r5, pc}
 801313e:	9904      	ldr	r1, [sp, #16]
 8013140:	aa06      	add	r2, sp, #24
 8013142:	4620      	mov	r0, r4
 8013144:	f001 f994 	bl	8014470 <uxr_init_base_object_request>
 8013148:	a906      	add	r1, sp, #24
 801314a:	4604      	mov	r4, r0
 801314c:	a80c      	add	r0, sp, #48	@ 0x30
 801314e:	f002 fff3 	bl	8016138 <uxr_serialize_READ_DATA_Payload>
 8013152:	4620      	mov	r0, r4
 8013154:	b015      	add	sp, #84	@ 0x54
 8013156:	bd30      	pop	{r4, r5, pc}
 8013158:	2208      	movs	r2, #8
 801315a:	e7e2      	b.n	8013122 <uxr_buffer_request_data+0x36>

0801315c <uxr_buffer_cancel_data>:
 801315c:	b510      	push	{r4, lr}
 801315e:	b094      	sub	sp, #80	@ 0x50
 8013160:	2300      	movs	r3, #0
 8013162:	9301      	str	r3, [sp, #4]
 8013164:	9205      	str	r2, [sp, #20]
 8013166:	f8ad 301c 	strh.w	r3, [sp, #28]
 801316a:	2201      	movs	r2, #1
 801316c:	f88d 301e 	strb.w	r3, [sp, #30]
 8013170:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8013174:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8013178:	2308      	movs	r3, #8
 801317a:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 801317e:	9300      	str	r3, [sp, #0]
 8013180:	2210      	movs	r2, #16
 8013182:	ab0c      	add	r3, sp, #48	@ 0x30
 8013184:	4604      	mov	r4, r0
 8013186:	f001 f839 	bl	80141fc <uxr_prepare_stream_to_write_submessage>
 801318a:	b918      	cbnz	r0, 8013194 <uxr_buffer_cancel_data+0x38>
 801318c:	4604      	mov	r4, r0
 801318e:	4620      	mov	r0, r4
 8013190:	b014      	add	sp, #80	@ 0x50
 8013192:	bd10      	pop	{r4, pc}
 8013194:	9905      	ldr	r1, [sp, #20]
 8013196:	aa06      	add	r2, sp, #24
 8013198:	4620      	mov	r0, r4
 801319a:	f001 f969 	bl	8014470 <uxr_init_base_object_request>
 801319e:	a906      	add	r1, sp, #24
 80131a0:	4604      	mov	r4, r0
 80131a2:	a80c      	add	r0, sp, #48	@ 0x30
 80131a4:	f002 ffc8 	bl	8016138 <uxr_serialize_READ_DATA_Payload>
 80131a8:	4620      	mov	r0, r4
 80131aa:	b014      	add	sp, #80	@ 0x50
 80131ac:	bd10      	pop	{r4, pc}
 80131ae:	bf00      	nop

080131b0 <read_submessage_format>:
 80131b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80131b4:	b095      	sub	sp, #84	@ 0x54
 80131b6:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 80131ba:	b113      	cbz	r3, 80131c2 <read_submessage_format+0x12>
 80131bc:	b015      	add	sp, #84	@ 0x54
 80131be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131c2:	460c      	mov	r4, r1
 80131c4:	4616      	mov	r6, r2
 80131c6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80131ca:	461d      	mov	r5, r3
 80131cc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80131ce:	9304      	str	r3, [sp, #16]
 80131d0:	1a52      	subs	r2, r2, r1
 80131d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80131d4:	9305      	str	r3, [sp, #20]
 80131d6:	4680      	mov	r8, r0
 80131d8:	a80c      	add	r0, sp, #48	@ 0x30
 80131da:	f89d 9076 	ldrb.w	r9, [sp, #118]	@ 0x76
 80131de:	f7fa ff3f 	bl	800e060 <ucdr_init_buffer>
 80131e2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80131e6:	a80c      	add	r0, sp, #48	@ 0x30
 80131e8:	f7fa ff0e 	bl	800e008 <ucdr_set_on_full_buffer_callback>
 80131ec:	69e3      	ldr	r3, [r4, #28]
 80131ee:	b35b      	cbz	r3, 8013248 <read_submessage_format+0x98>
 80131f0:	f1b9 0f07 	cmp.w	r9, #7
 80131f4:	751d      	strb	r5, [r3, #20]
 80131f6:	d043      	beq.n	8013280 <read_submessage_format+0xd0>
 80131f8:	f1b9 0f08 	cmp.w	r9, #8
 80131fc:	d032      	beq.n	8013264 <read_submessage_format+0xb4>
 80131fe:	f1b9 0f06 	cmp.w	r9, #6
 8013202:	d008      	beq.n	8013216 <read_submessage_format+0x66>
 8013204:	2201      	movs	r2, #1
 8013206:	751a      	strb	r2, [r3, #20]
 8013208:	4631      	mov	r1, r6
 801320a:	4620      	mov	r0, r4
 801320c:	f7fa ff78 	bl	800e100 <ucdr_advance_buffer>
 8013210:	b015      	add	sp, #84	@ 0x54
 8013212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013216:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 801321a:	2d00      	cmp	r5, #0
 801321c:	d0f2      	beq.n	8013204 <read_submessage_format+0x54>
 801321e:	ab0c      	add	r3, sp, #48	@ 0x30
 8013220:	e9cd 3600 	strd	r3, r6, [sp]
 8013224:	2306      	movs	r3, #6
 8013226:	f88d 3016 	strb.w	r3, [sp, #22]
 801322a:	f8d8 308c 	ldr.w	r3, [r8, #140]	@ 0x8c
 801322e:	9302      	str	r3, [sp, #8]
 8013230:	463a      	mov	r2, r7
 8013232:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8013236:	4640      	mov	r0, r8
 8013238:	47a8      	blx	r5
 801323a:	69e3      	ldr	r3, [r4, #28]
 801323c:	2201      	movs	r2, #1
 801323e:	f888 20b4 	strb.w	r2, [r8, #180]	@ 0xb4
 8013242:	2b00      	cmp	r3, #0
 8013244:	d1de      	bne.n	8013204 <read_submessage_format+0x54>
 8013246:	e7df      	b.n	8013208 <read_submessage_format+0x58>
 8013248:	f1b9 0f07 	cmp.w	r9, #7
 801324c:	d032      	beq.n	80132b4 <read_submessage_format+0x104>
 801324e:	f1b9 0f08 	cmp.w	r9, #8
 8013252:	d02a      	beq.n	80132aa <read_submessage_format+0xfa>
 8013254:	f1b9 0f06 	cmp.w	r9, #6
 8013258:	d1d6      	bne.n	8013208 <read_submessage_format+0x58>
 801325a:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 801325e:	2d00      	cmp	r5, #0
 8013260:	d1dd      	bne.n	801321e <read_submessage_format+0x6e>
 8013262:	e7d1      	b.n	8013208 <read_submessage_format+0x58>
 8013264:	f8d8 20a4 	ldr.w	r2, [r8, #164]	@ 0xa4
 8013268:	2a00      	cmp	r2, #0
 801326a:	d0cb      	beq.n	8013204 <read_submessage_format+0x54>
 801326c:	a906      	add	r1, sp, #24
 801326e:	a80c      	add	r0, sp, #48	@ 0x30
 8013270:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8013272:	f003 f835 	bl	80162e0 <uxr_deserialize_SampleIdentity>
 8013276:	bb28      	cbnz	r0, 80132c4 <read_submessage_format+0x114>
 8013278:	69e3      	ldr	r3, [r4, #28]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d1c2      	bne.n	8013204 <read_submessage_format+0x54>
 801327e:	e7c3      	b.n	8013208 <read_submessage_format+0x58>
 8013280:	f8d8 20ac 	ldr.w	r2, [r8, #172]	@ 0xac
 8013284:	b16a      	cbz	r2, 80132a2 <read_submessage_format+0xf2>
 8013286:	a906      	add	r1, sp, #24
 8013288:	a80c      	add	r0, sp, #48	@ 0x30
 801328a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801328c:	f002 fd08 	bl	8015ca0 <uxr_deserialize_BaseObjectRequest>
 8013290:	2800      	cmp	r0, #0
 8013292:	d13a      	bne.n	801330a <read_submessage_format+0x15a>
 8013294:	68a2      	ldr	r2, [r4, #8]
 8013296:	69e3      	ldr	r3, [r4, #28]
 8013298:	4432      	add	r2, r6
 801329a:	60a2      	str	r2, [r4, #8]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d1b1      	bne.n	8013204 <read_submessage_format+0x54>
 80132a0:	e7b2      	b.n	8013208 <read_submessage_format+0x58>
 80132a2:	68a2      	ldr	r2, [r4, #8]
 80132a4:	4432      	add	r2, r6
 80132a6:	60a2      	str	r2, [r4, #8]
 80132a8:	e7ac      	b.n	8013204 <read_submessage_format+0x54>
 80132aa:	f8d8 30a4 	ldr.w	r3, [r8, #164]	@ 0xa4
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d1dc      	bne.n	801326c <read_submessage_format+0xbc>
 80132b2:	e7a9      	b.n	8013208 <read_submessage_format+0x58>
 80132b4:	f8d8 30ac 	ldr.w	r3, [r8, #172]	@ 0xac
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d1e4      	bne.n	8013286 <read_submessage_format+0xd6>
 80132bc:	68a3      	ldr	r3, [r4, #8]
 80132be:	4433      	add	r3, r6
 80132c0:	60a3      	str	r3, [r4, #8]
 80132c2:	e7a1      	b.n	8013208 <read_submessage_format+0x58>
 80132c4:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80132c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80132ca:	1a52      	subs	r2, r2, r1
 80132cc:	1aed      	subs	r5, r5, r3
 80132ce:	a80c      	add	r0, sp, #48	@ 0x30
 80132d0:	f7fa fec6 	bl	800e060 <ucdr_init_buffer>
 80132d4:	4435      	add	r5, r6
 80132d6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80132da:	a80c      	add	r0, sp, #48	@ 0x30
 80132dc:	f7fa fe94 	bl	800e008 <ucdr_set_on_full_buffer_callback>
 80132e0:	b2ad      	uxth	r5, r5
 80132e2:	ab0c      	add	r3, sp, #48	@ 0x30
 80132e4:	9300      	str	r3, [sp, #0]
 80132e6:	9501      	str	r5, [sp, #4]
 80132e8:	2108      	movs	r1, #8
 80132ea:	f88d 1016 	strb.w	r1, [sp, #22]
 80132ee:	f8d8 10a8 	ldr.w	r1, [r8, #168]	@ 0xa8
 80132f2:	9102      	str	r1, [sp, #8]
 80132f4:	ab06      	add	r3, sp, #24
 80132f6:	f8d8 50a4 	ldr.w	r5, [r8, #164]	@ 0xa4
 80132fa:	9905      	ldr	r1, [sp, #20]
 80132fc:	463a      	mov	r2, r7
 80132fe:	4640      	mov	r0, r8
 8013300:	47a8      	blx	r5
 8013302:	2301      	movs	r3, #1
 8013304:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 8013308:	e7b6      	b.n	8013278 <read_submessage_format+0xc8>
 801330a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801330e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013310:	1a52      	subs	r2, r2, r1
 8013312:	1aed      	subs	r5, r5, r3
 8013314:	a80c      	add	r0, sp, #48	@ 0x30
 8013316:	f7fa fea3 	bl	800e060 <ucdr_init_buffer>
 801331a:	4435      	add	r5, r6
 801331c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013320:	a80c      	add	r0, sp, #48	@ 0x30
 8013322:	f7fa fe71 	bl	800e008 <ucdr_set_on_full_buffer_callback>
 8013326:	b2ad      	uxth	r5, r5
 8013328:	ab0c      	add	r3, sp, #48	@ 0x30
 801332a:	9300      	str	r3, [sp, #0]
 801332c:	9501      	str	r5, [sp, #4]
 801332e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8013332:	2107      	movs	r1, #7
 8013334:	f88d 1016 	strb.w	r1, [sp, #22]
 8013338:	f8d8 10b0 	ldr.w	r1, [r8, #176]	@ 0xb0
 801333c:	9102      	str	r1, [sp, #8]
 801333e:	ba5b      	rev16	r3, r3
 8013340:	b29b      	uxth	r3, r3
 8013342:	f8d8 50ac 	ldr.w	r5, [r8, #172]	@ 0xac
 8013346:	9905      	ldr	r1, [sp, #20]
 8013348:	463a      	mov	r2, r7
 801334a:	4640      	mov	r0, r8
 801334c:	47a8      	blx	r5
 801334e:	2301      	movs	r3, #1
 8013350:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 8013354:	e79e      	b.n	8013294 <read_submessage_format+0xe4>
 8013356:	bf00      	nop

08013358 <on_get_fragmentation_info>:
 8013358:	b500      	push	{lr}
 801335a:	b08b      	sub	sp, #44	@ 0x2c
 801335c:	4601      	mov	r1, r0
 801335e:	2204      	movs	r2, #4
 8013360:	a802      	add	r0, sp, #8
 8013362:	f7fa fe7d 	bl	800e060 <ucdr_init_buffer>
 8013366:	f10d 0305 	add.w	r3, sp, #5
 801336a:	f10d 0206 	add.w	r2, sp, #6
 801336e:	a901      	add	r1, sp, #4
 8013370:	a802      	add	r0, sp, #8
 8013372:	f001 fe47 	bl	8015004 <uxr_read_submessage_header>
 8013376:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801337a:	2b0d      	cmp	r3, #13
 801337c:	d003      	beq.n	8013386 <on_get_fragmentation_info+0x2e>
 801337e:	2000      	movs	r0, #0
 8013380:	b00b      	add	sp, #44	@ 0x2c
 8013382:	f85d fb04 	ldr.w	pc, [sp], #4
 8013386:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801338a:	f013 0f02 	tst.w	r3, #2
 801338e:	bf0c      	ite	eq
 8013390:	2001      	moveq	r0, #1
 8013392:	2002      	movne	r0, #2
 8013394:	b00b      	add	sp, #44	@ 0x2c
 8013396:	f85d fb04 	ldr.w	pc, [sp], #4
 801339a:	bf00      	nop

0801339c <read_submessage_get_info>:
 801339c:	b570      	push	{r4, r5, r6, lr}
 801339e:	2500      	movs	r5, #0
 80133a0:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 80133a4:	4604      	mov	r4, r0
 80133a6:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80133aa:	460e      	mov	r6, r1
 80133ac:	a810      	add	r0, sp, #64	@ 0x40
 80133ae:	4629      	mov	r1, r5
 80133b0:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80133b4:	f00a fbc0 	bl	801db38 <memset>
 80133b8:	a903      	add	r1, sp, #12
 80133ba:	4630      	mov	r0, r6
 80133bc:	f002 fdfe 	bl	8015fbc <uxr_deserialize_GET_INFO_Payload>
 80133c0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80133c4:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80133c8:	4620      	mov	r0, r4
 80133ca:	f001 f849 	bl	8014460 <uxr_session_header_offset>
 80133ce:	462b      	mov	r3, r5
 80133d0:	9000      	str	r0, [sp, #0]
 80133d2:	220c      	movs	r2, #12
 80133d4:	a905      	add	r1, sp, #20
 80133d6:	a808      	add	r0, sp, #32
 80133d8:	f7fa fe30 	bl	800e03c <ucdr_init_buffer_origin_offset>
 80133dc:	a910      	add	r1, sp, #64	@ 0x40
 80133de:	a808      	add	r0, sp, #32
 80133e0:	f002 fe5e 	bl	80160a0 <uxr_serialize_INFO_Payload>
 80133e4:	9b08      	ldr	r3, [sp, #32]
 80133e6:	462a      	mov	r2, r5
 80133e8:	4629      	mov	r1, r5
 80133ea:	4620      	mov	r0, r4
 80133ec:	f000 ffe4 	bl	80143b8 <uxr_stamp_session_header>
 80133f0:	a808      	add	r0, sp, #32
 80133f2:	f7fa fe61 	bl	800e0b8 <ucdr_buffer_length>
 80133f6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80133f8:	4602      	mov	r2, r0
 80133fa:	a905      	add	r1, sp, #20
 80133fc:	e9d3 0400 	ldrd	r0, r4, [r3]
 8013400:	47a0      	blx	r4
 8013402:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8013406:	bd70      	pop	{r4, r5, r6, pc}

08013408 <write_submessage_acknack.isra.0>:
 8013408:	b570      	push	{r4, r5, r6, lr}
 801340a:	b092      	sub	sp, #72	@ 0x48
 801340c:	4605      	mov	r5, r0
 801340e:	460e      	mov	r6, r1
 8013410:	4614      	mov	r4, r2
 8013412:	f001 f825 	bl	8014460 <uxr_session_header_offset>
 8013416:	a905      	add	r1, sp, #20
 8013418:	9000      	str	r0, [sp, #0]
 801341a:	2300      	movs	r3, #0
 801341c:	a80a      	add	r0, sp, #40	@ 0x28
 801341e:	2211      	movs	r2, #17
 8013420:	f7fa fe0c 	bl	800e03c <ucdr_init_buffer_origin_offset>
 8013424:	2318      	movs	r3, #24
 8013426:	fb03 5404 	mla	r4, r3, r4, r5
 801342a:	2205      	movs	r2, #5
 801342c:	2300      	movs	r3, #0
 801342e:	3450      	adds	r4, #80	@ 0x50
 8013430:	210a      	movs	r1, #10
 8013432:	a80a      	add	r0, sp, #40	@ 0x28
 8013434:	f001 fdcc 	bl	8014fd0 <uxr_buffer_submessage_header>
 8013438:	a903      	add	r1, sp, #12
 801343a:	4620      	mov	r0, r4
 801343c:	f008 fa6e 	bl	801b91c <uxr_compute_acknack>
 8013440:	ba40      	rev16	r0, r0
 8013442:	f8ad 000e 	strh.w	r0, [sp, #14]
 8013446:	a903      	add	r1, sp, #12
 8013448:	a80a      	add	r0, sp, #40	@ 0x28
 801344a:	f88d 6010 	strb.w	r6, [sp, #16]
 801344e:	f002 fe97 	bl	8016180 <uxr_serialize_ACKNACK_Payload>
 8013452:	2200      	movs	r2, #0
 8013454:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013456:	4611      	mov	r1, r2
 8013458:	4628      	mov	r0, r5
 801345a:	f000 ffad 	bl	80143b8 <uxr_stamp_session_header>
 801345e:	a80a      	add	r0, sp, #40	@ 0x28
 8013460:	f7fa fe2a 	bl	800e0b8 <ucdr_buffer_length>
 8013464:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8013466:	4602      	mov	r2, r0
 8013468:	a905      	add	r1, sp, #20
 801346a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801346e:	47a0      	blx	r4
 8013470:	b012      	add	sp, #72	@ 0x48
 8013472:	bd70      	pop	{r4, r5, r6, pc}
 8013474:	0000      	movs	r0, r0
	...

08013478 <uxr_init_session>:
 8013478:	b510      	push	{r4, lr}
 801347a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80134b0 <uxr_init_session+0x38>
 801347e:	2300      	movs	r3, #0
 8013480:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8013484:	4604      	mov	r4, r0
 8013486:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 801348a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 801348e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8013492:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8013496:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 801349a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 801349e:	2181      	movs	r1, #129	@ 0x81
 80134a0:	f000 feee 	bl	8014280 <uxr_init_session_info>
 80134a4:	f104 0008 	add.w	r0, r4, #8
 80134a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80134ac:	f001 bcac 	b.w	8014e08 <uxr_init_stream_storage>
	...

080134b8 <uxr_set_status_callback>:
 80134b8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 80134bc:	4770      	bx	lr
 80134be:	bf00      	nop

080134c0 <uxr_set_topic_callback>:
 80134c0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 80134c4:	4770      	bx	lr
 80134c6:	bf00      	nop

080134c8 <uxr_set_request_callback>:
 80134c8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 80134cc:	4770      	bx	lr
 80134ce:	bf00      	nop

080134d0 <uxr_set_reply_callback>:
 80134d0:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 80134d4:	4770      	bx	lr
 80134d6:	bf00      	nop

080134d8 <uxr_create_output_best_effort_stream>:
 80134d8:	b570      	push	{r4, r5, r6, lr}
 80134da:	b082      	sub	sp, #8
 80134dc:	4604      	mov	r4, r0
 80134de:	460d      	mov	r5, r1
 80134e0:	4616      	mov	r6, r2
 80134e2:	f000 ffbd 	bl	8014460 <uxr_session_header_offset>
 80134e6:	4632      	mov	r2, r6
 80134e8:	4603      	mov	r3, r0
 80134ea:	4629      	mov	r1, r5
 80134ec:	f104 0008 	add.w	r0, r4, #8
 80134f0:	b002      	add	sp, #8
 80134f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80134f6:	f001 bcd1 	b.w	8014e9c <uxr_add_output_best_effort_buffer>
 80134fa:	bf00      	nop

080134fc <uxr_create_output_reliable_stream>:
 80134fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134fe:	b085      	sub	sp, #20
 8013500:	4604      	mov	r4, r0
 8013502:	460d      	mov	r5, r1
 8013504:	4616      	mov	r6, r2
 8013506:	461f      	mov	r7, r3
 8013508:	f000 ffaa 	bl	8014460 <uxr_session_header_offset>
 801350c:	463b      	mov	r3, r7
 801350e:	9000      	str	r0, [sp, #0]
 8013510:	4632      	mov	r2, r6
 8013512:	4629      	mov	r1, r5
 8013514:	f104 0008 	add.w	r0, r4, #8
 8013518:	f001 fcd4 	bl	8014ec4 <uxr_add_output_reliable_buffer>
 801351c:	b005      	add	sp, #20
 801351e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013520 <uxr_create_input_best_effort_stream>:
 8013520:	b082      	sub	sp, #8
 8013522:	3008      	adds	r0, #8
 8013524:	b002      	add	sp, #8
 8013526:	f001 bce7 	b.w	8014ef8 <uxr_add_input_best_effort_buffer>
 801352a:	bf00      	nop

0801352c <uxr_create_input_reliable_stream>:
 801352c:	b510      	push	{r4, lr}
 801352e:	b084      	sub	sp, #16
 8013530:	4c03      	ldr	r4, [pc, #12]	@ (8013540 <uxr_create_input_reliable_stream+0x14>)
 8013532:	9400      	str	r4, [sp, #0]
 8013534:	3008      	adds	r0, #8
 8013536:	f001 fcf5 	bl	8014f24 <uxr_add_input_reliable_buffer>
 801353a:	b004      	add	sp, #16
 801353c:	bd10      	pop	{r4, pc}
 801353e:	bf00      	nop
 8013540:	08013359 	.word	0x08013359

08013544 <uxr_epoch_millis>:
 8013544:	b510      	push	{r4, lr}
 8013546:	4604      	mov	r4, r0
 8013548:	f001 fda2 	bl	8015090 <uxr_nanos>
 801354c:	e9d4 3426 	ldrd	r3, r4, [r4, #152]	@ 0x98
 8013550:	1ac0      	subs	r0, r0, r3
 8013552:	4a04      	ldr	r2, [pc, #16]	@ (8013564 <uxr_epoch_millis+0x20>)
 8013554:	f04f 0300 	mov.w	r3, #0
 8013558:	eb61 0104 	sbc.w	r1, r1, r4
 801355c:	f7ed fb84 	bl	8000c68 <__aeabi_ldivmod>
 8013560:	bd10      	pop	{r4, pc}
 8013562:	bf00      	nop
 8013564:	000f4240 	.word	0x000f4240

08013568 <uxr_epoch_nanos>:
 8013568:	b510      	push	{r4, lr}
 801356a:	4604      	mov	r4, r0
 801356c:	f001 fd90 	bl	8015090 <uxr_nanos>
 8013570:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8013574:	1ac0      	subs	r0, r0, r3
 8013576:	eb61 0102 	sbc.w	r1, r1, r2
 801357a:	bd10      	pop	{r4, pc}

0801357c <uxr_flash_output_streams>:
 801357c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013580:	7e03      	ldrb	r3, [r0, #24]
 8013582:	b084      	sub	sp, #16
 8013584:	4604      	mov	r4, r0
 8013586:	b373      	cbz	r3, 80135e6 <uxr_flash_output_streams+0x6a>
 8013588:	2500      	movs	r5, #0
 801358a:	f100 0908 	add.w	r9, r0, #8
 801358e:	f10d 0802 	add.w	r8, sp, #2
 8013592:	4628      	mov	r0, r5
 8013594:	af03      	add	r7, sp, #12
 8013596:	ae02      	add	r6, sp, #8
 8013598:	e006      	b.n	80135a8 <uxr_flash_output_streams+0x2c>
 801359a:	7e23      	ldrb	r3, [r4, #24]
 801359c:	3501      	adds	r5, #1
 801359e:	b2e8      	uxtb	r0, r5
 80135a0:	4283      	cmp	r3, r0
 80135a2:	f109 0910 	add.w	r9, r9, #16
 80135a6:	d91e      	bls.n	80135e6 <uxr_flash_output_streams+0x6a>
 80135a8:	2201      	movs	r2, #1
 80135aa:	4611      	mov	r1, r2
 80135ac:	f001 fbf4 	bl	8014d98 <uxr_stream_id>
 80135b0:	4643      	mov	r3, r8
 80135b2:	4684      	mov	ip, r0
 80135b4:	463a      	mov	r2, r7
 80135b6:	4631      	mov	r1, r6
 80135b8:	4648      	mov	r0, r9
 80135ba:	f8cd c004 	str.w	ip, [sp, #4]
 80135be:	f008 fa31 	bl	801ba24 <uxr_prepare_best_effort_buffer_to_send>
 80135c2:	2800      	cmp	r0, #0
 80135c4:	d0e9      	beq.n	801359a <uxr_flash_output_streams+0x1e>
 80135c6:	9b02      	ldr	r3, [sp, #8]
 80135c8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80135cc:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80135d0:	4620      	mov	r0, r4
 80135d2:	f000 fef1 	bl	80143b8 <uxr_stamp_session_header>
 80135d6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80135d8:	9a03      	ldr	r2, [sp, #12]
 80135da:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80135de:	9902      	ldr	r1, [sp, #8]
 80135e0:	6818      	ldr	r0, [r3, #0]
 80135e2:	47d0      	blx	sl
 80135e4:	e7d9      	b.n	801359a <uxr_flash_output_streams+0x1e>
 80135e6:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80135ea:	b37b      	cbz	r3, 801364c <uxr_flash_output_streams+0xd0>
 80135ec:	f04f 0900 	mov.w	r9, #0
 80135f0:	f104 0520 	add.w	r5, r4, #32
 80135f4:	f10d 0802 	add.w	r8, sp, #2
 80135f8:	af03      	add	r7, sp, #12
 80135fa:	ae02      	add	r6, sp, #8
 80135fc:	4648      	mov	r0, r9
 80135fe:	2201      	movs	r2, #1
 8013600:	2102      	movs	r1, #2
 8013602:	f001 fbc9 	bl	8014d98 <uxr_stream_id>
 8013606:	9001      	str	r0, [sp, #4]
 8013608:	e00e      	b.n	8013628 <uxr_flash_output_streams+0xac>
 801360a:	9b02      	ldr	r3, [sp, #8]
 801360c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8013610:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8013614:	4620      	mov	r0, r4
 8013616:	f000 fecf 	bl	80143b8 <uxr_stamp_session_header>
 801361a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801361c:	9a03      	ldr	r2, [sp, #12]
 801361e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8013622:	9902      	ldr	r1, [sp, #8]
 8013624:	6818      	ldr	r0, [r3, #0]
 8013626:	47d0      	blx	sl
 8013628:	4643      	mov	r3, r8
 801362a:	463a      	mov	r2, r7
 801362c:	4631      	mov	r1, r6
 801362e:	4628      	mov	r0, r5
 8013630:	f008 fc0c 	bl	801be4c <uxr_prepare_next_reliable_buffer_to_send>
 8013634:	2800      	cmp	r0, #0
 8013636:	d1e8      	bne.n	801360a <uxr_flash_output_streams+0x8e>
 8013638:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801363c:	f109 0901 	add.w	r9, r9, #1
 8013640:	fa5f f089 	uxtb.w	r0, r9
 8013644:	4283      	cmp	r3, r0
 8013646:	f105 0528 	add.w	r5, r5, #40	@ 0x28
 801364a:	d8d8      	bhi.n	80135fe <uxr_flash_output_streams+0x82>
 801364c:	b004      	add	sp, #16
 801364e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013652:	bf00      	nop

08013654 <read_submessage_info>:
 8013654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013658:	460d      	mov	r5, r1
 801365a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801365e:	4669      	mov	r1, sp
 8013660:	4607      	mov	r7, r0
 8013662:	4628      	mov	r0, r5
 8013664:	f002 fbba 	bl	8015ddc <uxr_deserialize_BaseObjectReply>
 8013668:	a902      	add	r1, sp, #8
 801366a:	4604      	mov	r4, r0
 801366c:	4628      	mov	r0, r5
 801366e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8013672:	f7f9 f86b 	bl	800c74c <ucdr_deserialize_bool>
 8013676:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801367a:	4004      	ands	r4, r0
 801367c:	b2e4      	uxtb	r4, r4
 801367e:	b95b      	cbnz	r3, 8013698 <read_submessage_info+0x44>
 8013680:	a987      	add	r1, sp, #540	@ 0x21c
 8013682:	4628      	mov	r0, r5
 8013684:	f7f9 f862 	bl	800c74c <ucdr_deserialize_bool>
 8013688:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 801368c:	4606      	mov	r6, r0
 801368e:	b94b      	cbnz	r3, 80136a4 <read_submessage_info+0x50>
 8013690:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8013694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013698:	a903      	add	r1, sp, #12
 801369a:	4628      	mov	r0, r5
 801369c:	f002 fa60 	bl	8015b60 <uxr_deserialize_ObjectVariant>
 80136a0:	4004      	ands	r4, r0
 80136a2:	e7ed      	b.n	8013680 <read_submessage_info+0x2c>
 80136a4:	a988      	add	r1, sp, #544	@ 0x220
 80136a6:	4628      	mov	r0, r5
 80136a8:	f7f9 f87e 	bl	800c7a8 <ucdr_deserialize_uint8_t>
 80136ac:	4234      	tst	r4, r6
 80136ae:	d0ef      	beq.n	8013690 <read_submessage_info+0x3c>
 80136b0:	2800      	cmp	r0, #0
 80136b2:	d0ed      	beq.n	8013690 <read_submessage_info+0x3c>
 80136b4:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 80136b8:	2b0d      	cmp	r3, #13
 80136ba:	d1e9      	bne.n	8013690 <read_submessage_info+0x3c>
 80136bc:	a98a      	add	r1, sp, #552	@ 0x228
 80136be:	4628      	mov	r0, r5
 80136c0:	f7f9 fe3a 	bl	800d338 <ucdr_deserialize_int16_t>
 80136c4:	b140      	cbz	r0, 80136d8 <read_submessage_info+0x84>
 80136c6:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	dd07      	ble.n	80136de <read_submessage_info+0x8a>
 80136ce:	f1b8 0f00 	cmp.w	r8, #0
 80136d2:	bf0c      	ite	eq
 80136d4:	2002      	moveq	r0, #2
 80136d6:	2001      	movne	r0, #1
 80136d8:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 80136dc:	e7d8      	b.n	8013690 <read_submessage_info+0x3c>
 80136de:	2000      	movs	r0, #0
 80136e0:	e7fa      	b.n	80136d8 <read_submessage_info+0x84>
 80136e2:	bf00      	nop

080136e4 <read_submessage_list>:
 80136e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80136e8:	b097      	sub	sp, #92	@ 0x5c
 80136ea:	4604      	mov	r4, r0
 80136ec:	460d      	mov	r5, r1
 80136ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80136f0:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 80136f4:	aa0c      	add	r2, sp, #48	@ 0x30
 80136f6:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 80136fa:	4628      	mov	r0, r5
 80136fc:	f001 fc82 	bl	8015004 <uxr_read_submessage_header>
 8013700:	2800      	cmp	r0, #0
 8013702:	f000 812c 	beq.w	801395e <read_submessage_list+0x27a>
 8013706:	f89d 102e 	ldrb.w	r1, [sp, #46]	@ 0x2e
 801370a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801370c:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 8013710:	f89d 702f 	ldrb.w	r7, [sp, #47]	@ 0x2f
 8013714:	3902      	subs	r1, #2
 8013716:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801371a:	290d      	cmp	r1, #13
 801371c:	d8e8      	bhi.n	80136f0 <read_submessage_list+0xc>
 801371e:	a201      	add	r2, pc, #4	@ (adr r2, 8013724 <read_submessage_list+0x40>)
 8013720:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8013724:	08013955 	.word	0x08013955
 8013728:	080136f1 	.word	0x080136f1
 801372c:	08013945 	.word	0x08013945
 8013730:	080138e7 	.word	0x080138e7
 8013734:	080138dd 	.word	0x080138dd
 8013738:	080136f1 	.word	0x080136f1
 801373c:	080136f1 	.word	0x080136f1
 8013740:	08013861 	.word	0x08013861
 8013744:	080137f9 	.word	0x080137f9
 8013748:	080137b9 	.word	0x080137b9
 801374c:	080136f1 	.word	0x080136f1
 8013750:	080136f1 	.word	0x080136f1
 8013754:	080136f1 	.word	0x080136f1
 8013758:	0801375d 	.word	0x0801375d
 801375c:	a910      	add	r1, sp, #64	@ 0x40
 801375e:	4628      	mov	r0, r5
 8013760:	f002 fd6c 	bl	801623c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8013764:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 8013768:	2e00      	cmp	r6, #0
 801376a:	f000 8100 	beq.w	801396e <read_submessage_list+0x28a>
 801376e:	f001 fc8f 	bl	8015090 <uxr_nanos>
 8013772:	f04f 0800 	mov.w	r8, #0
 8013776:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8013778:	4602      	mov	r2, r0
 801377a:	460b      	mov	r3, r1
 801377c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801377e:	4990      	ldr	r1, [pc, #576]	@ (80139c0 <read_submessage_list+0x2dc>)
 8013780:	46c4      	mov	ip, r8
 8013782:	fbc0 7c01 	smlal	r7, ip, r0, r1
 8013786:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 801378a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801378c:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801378e:	46c6      	mov	lr, r8
 8013790:	fbc0 7e01 	smlal	r7, lr, r0, r1
 8013794:	46bc      	mov	ip, r7
 8013796:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 801379a:	fbc0 7801 	smlal	r7, r8, r0, r1
 801379e:	e9cd ce02 	strd	ip, lr, [sp, #8]
 80137a2:	e9cd 7800 	strd	r7, r8, [sp]
 80137a6:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 80137aa:	9106      	str	r1, [sp, #24]
 80137ac:	4620      	mov	r0, r4
 80137ae:	47b0      	blx	r6
 80137b0:	2301      	movs	r3, #1
 80137b2:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 80137b6:	e79b      	b.n	80136f0 <read_submessage_list+0xc>
 80137b8:	a910      	add	r1, sp, #64	@ 0x40
 80137ba:	4628      	mov	r0, r5
 80137bc:	f002 fd1e 	bl	80161fc <uxr_deserialize_HEARTBEAT_Payload>
 80137c0:	2100      	movs	r1, #0
 80137c2:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80137c6:	f001 fb03 	bl	8014dd0 <uxr_stream_id_from_raw>
 80137ca:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80137ce:	900f      	str	r0, [sp, #60]	@ 0x3c
 80137d0:	4631      	mov	r1, r6
 80137d2:	f104 0008 	add.w	r0, r4, #8
 80137d6:	f001 fbdb 	bl	8014f90 <uxr_get_input_reliable_stream>
 80137da:	2800      	cmp	r0, #0
 80137dc:	d088      	beq.n	80136f0 <read_submessage_list+0xc>
 80137de:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80137e2:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80137e6:	f008 f88d 	bl	801b904 <uxr_process_heartbeat>
 80137ea:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 80137ee:	4632      	mov	r2, r6
 80137f0:	4620      	mov	r0, r4
 80137f2:	f7ff fe09 	bl	8013408 <write_submessage_acknack.isra.0>
 80137f6:	e77b      	b.n	80136f0 <read_submessage_list+0xc>
 80137f8:	a910      	add	r1, sp, #64	@ 0x40
 80137fa:	4628      	mov	r0, r5
 80137fc:	f002 fcd6 	bl	80161ac <uxr_deserialize_ACKNACK_Payload>
 8013800:	2100      	movs	r1, #0
 8013802:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8013806:	f001 fae3 	bl	8014dd0 <uxr_stream_id_from_raw>
 801380a:	900d      	str	r0, [sp, #52]	@ 0x34
 801380c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8013810:	f104 0008 	add.w	r0, r4, #8
 8013814:	f001 fba8 	bl	8014f68 <uxr_get_output_reliable_stream>
 8013818:	4606      	mov	r6, r0
 801381a:	2800      	cmp	r0, #0
 801381c:	f43f af68 	beq.w	80136f0 <read_submessage_list+0xc>
 8013820:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 8013824:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8013828:	ba49      	rev16	r1, r1
 801382a:	b289      	uxth	r1, r1
 801382c:	f008 fbb8 	bl	801bfa0 <uxr_process_acknack>
 8013830:	4630      	mov	r0, r6
 8013832:	f008 fb79 	bl	801bf28 <uxr_begin_output_nack_buffer_it>
 8013836:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 801383a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801383e:	e005      	b.n	801384c <read_submessage_list+0x168>
 8013840:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013842:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013844:	685f      	ldr	r7, [r3, #4]
 8013846:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013848:	6818      	ldr	r0, [r3, #0]
 801384a:	47b8      	blx	r7
 801384c:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8013850:	aa0f      	add	r2, sp, #60	@ 0x3c
 8013852:	4641      	mov	r1, r8
 8013854:	4630      	mov	r0, r6
 8013856:	f008 fb69 	bl	801bf2c <uxr_next_reliable_nack_buffer_to_send>
 801385a:	2800      	cmp	r0, #0
 801385c:	d1f0      	bne.n	8013840 <read_submessage_list+0x15c>
 801385e:	e747      	b.n	80136f0 <read_submessage_list+0xc>
 8013860:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8013864:	4641      	mov	r1, r8
 8013866:	900d      	str	r0, [sp, #52]	@ 0x34
 8013868:	4628      	mov	r0, r5
 801386a:	f002 fa19 	bl	8015ca0 <uxr_deserialize_BaseObjectRequest>
 801386e:	3e04      	subs	r6, #4
 8013870:	4640      	mov	r0, r8
 8013872:	a90f      	add	r1, sp, #60	@ 0x3c
 8013874:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8013878:	f000 fe18 	bl	80144ac <uxr_parse_base_object_request>
 801387c:	fa1f f886 	uxth.w	r8, r6
 8013880:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 8013884:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013886:	f8bd 9032 	ldrh.w	r9, [sp, #50]	@ 0x32
 801388a:	9110      	str	r1, [sp, #64]	@ 0x40
 801388c:	f007 070e 	and.w	r7, r7, #14
 8013890:	b136      	cbz	r6, 80138a0 <read_submessage_list+0x1bc>
 8013892:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8013896:	9300      	str	r3, [sp, #0]
 8013898:	464a      	mov	r2, r9
 801389a:	2300      	movs	r3, #0
 801389c:	4620      	mov	r0, r4
 801389e:	47b0      	blx	r6
 80138a0:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 80138a2:	b16b      	cbz	r3, 80138c0 <read_submessage_list+0x1dc>
 80138a4:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80138a6:	2100      	movs	r1, #0
 80138a8:	3802      	subs	r0, #2
 80138aa:	e002      	b.n	80138b2 <read_submessage_list+0x1ce>
 80138ac:	3101      	adds	r1, #1
 80138ae:	428b      	cmp	r3, r1
 80138b0:	d006      	beq.n	80138c0 <read_submessage_list+0x1dc>
 80138b2:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 80138b6:	454e      	cmp	r6, r9
 80138b8:	d1f8      	bne.n	80138ac <read_submessage_list+0x1c8>
 80138ba:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80138bc:	2200      	movs	r2, #0
 80138be:	545a      	strb	r2, [r3, r1]
 80138c0:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 80138c4:	9102      	str	r1, [sp, #8]
 80138c6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80138c8:	9101      	str	r1, [sp, #4]
 80138ca:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80138cc:	9100      	str	r1, [sp, #0]
 80138ce:	463b      	mov	r3, r7
 80138d0:	4642      	mov	r2, r8
 80138d2:	4629      	mov	r1, r5
 80138d4:	4620      	mov	r0, r4
 80138d6:	f7ff fc6b 	bl	80131b0 <read_submessage_format>
 80138da:	e709      	b.n	80136f0 <read_submessage_list+0xc>
 80138dc:	4629      	mov	r1, r5
 80138de:	4620      	mov	r0, r4
 80138e0:	f7ff feb8 	bl	8013654 <read_submessage_info>
 80138e4:	e704      	b.n	80136f0 <read_submessage_list+0xc>
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d03c      	beq.n	8013964 <read_submessage_list+0x280>
 80138ea:	a910      	add	r1, sp, #64	@ 0x40
 80138ec:	4628      	mov	r0, r5
 80138ee:	f002 fbb9 	bl	8016064 <uxr_deserialize_STATUS_Payload>
 80138f2:	a90e      	add	r1, sp, #56	@ 0x38
 80138f4:	a810      	add	r0, sp, #64	@ 0x40
 80138f6:	aa0d      	add	r2, sp, #52	@ 0x34
 80138f8:	f000 fdd8 	bl	80144ac <uxr_parse_base_object_request>
 80138fc:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 8013900:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013902:	f89d 8044 	ldrb.w	r8, [sp, #68]	@ 0x44
 8013906:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 801390a:	910f      	str	r1, [sp, #60]	@ 0x3c
 801390c:	b136      	cbz	r6, 801391c <read_submessage_list+0x238>
 801390e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8013912:	9300      	str	r3, [sp, #0]
 8013914:	463a      	mov	r2, r7
 8013916:	4643      	mov	r3, r8
 8013918:	4620      	mov	r0, r4
 801391a:	47b0      	blx	r6
 801391c:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801391e:	2a00      	cmp	r2, #0
 8013920:	f43f aee6 	beq.w	80136f0 <read_submessage_list+0xc>
 8013924:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8013926:	2100      	movs	r1, #0
 8013928:	3802      	subs	r0, #2
 801392a:	e003      	b.n	8013934 <read_submessage_list+0x250>
 801392c:	3101      	adds	r1, #1
 801392e:	4291      	cmp	r1, r2
 8013930:	f43f aede 	beq.w	80136f0 <read_submessage_list+0xc>
 8013934:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 8013938:	42be      	cmp	r6, r7
 801393a:	d1f7      	bne.n	801392c <read_submessage_list+0x248>
 801393c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801393e:	f803 8001 	strb.w	r8, [r3, r1]
 8013942:	e6d5      	b.n	80136f0 <read_submessage_list+0xc>
 8013944:	2b00      	cmp	r3, #0
 8013946:	f47f aed3 	bne.w	80136f0 <read_submessage_list+0xc>
 801394a:	4629      	mov	r1, r5
 801394c:	4620      	mov	r0, r4
 801394e:	f000 fcf5 	bl	801433c <uxr_read_create_session_status>
 8013952:	e6cd      	b.n	80136f0 <read_submessage_list+0xc>
 8013954:	4629      	mov	r1, r5
 8013956:	4620      	mov	r0, r4
 8013958:	f7ff fd20 	bl	801339c <read_submessage_get_info>
 801395c:	e6c8      	b.n	80136f0 <read_submessage_list+0xc>
 801395e:	b017      	add	sp, #92	@ 0x5c
 8013960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013964:	4629      	mov	r1, r5
 8013966:	4620      	mov	r0, r4
 8013968:	f000 fcf6 	bl	8014358 <uxr_read_delete_session_status>
 801396c:	e6c0      	b.n	80136f0 <read_submessage_list+0xc>
 801396e:	f001 fb8f 	bl	8015090 <uxr_nanos>
 8013972:	e9dd 7214 	ldrd	r7, r2, [sp, #80]	@ 0x50
 8013976:	f8df c048 	ldr.w	ip, [pc, #72]	@ 80139c0 <read_submessage_list+0x2dc>
 801397a:	4633      	mov	r3, r6
 801397c:	fbc7 230c 	smlal	r2, r3, r7, ip
 8013980:	1810      	adds	r0, r2, r0
 8013982:	eb43 0301 	adc.w	r3, r3, r1
 8013986:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	@ 0x48
 801398a:	46b6      	mov	lr, r6
 801398c:	fbc1 2e0c 	smlal	r2, lr, r1, ip
 8013990:	e9dd 1710 	ldrd	r1, r7, [sp, #64]	@ 0x40
 8013994:	fbc1 760c 	smlal	r7, r6, r1, ip
 8013998:	19d2      	adds	r2, r2, r7
 801399a:	eb4e 0106 	adc.w	r1, lr, r6
 801399e:	1a80      	subs	r0, r0, r2
 80139a0:	eb63 0301 	sbc.w	r3, r3, r1
 80139a4:	0fda      	lsrs	r2, r3, #31
 80139a6:	1812      	adds	r2, r2, r0
 80139a8:	f143 0300 	adc.w	r3, r3, #0
 80139ac:	0852      	lsrs	r2, r2, #1
 80139ae:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 80139b2:	105b      	asrs	r3, r3, #1
 80139b4:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 80139b8:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 80139bc:	e6f8      	b.n	80137b0 <read_submessage_list+0xcc>
 80139be:	bf00      	nop
 80139c0:	3b9aca00 	.word	0x3b9aca00

080139c4 <listen_message_reliably>:
 80139c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139c8:	f1b1 0b00 	subs.w	fp, r1, #0
 80139cc:	b09f      	sub	sp, #124	@ 0x7c
 80139ce:	4606      	mov	r6, r0
 80139d0:	bfb8      	it	lt
 80139d2:	f06f 4b00 	mvnlt.w	fp, #2147483648	@ 0x80000000
 80139d6:	f001 fb41 	bl	801505c <uxr_millis>
 80139da:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 80139de:	9003      	str	r0, [sp, #12]
 80139e0:	9104      	str	r1, [sp, #16]
 80139e2:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 80139e6:	f10d 0a24 	add.w	sl, sp, #36	@ 0x24
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	f000 80a4 	beq.w	8013b38 <listen_message_reliably+0x174>
 80139f0:	2500      	movs	r5, #0
 80139f2:	e9cd b806 	strd	fp, r8, [sp, #24]
 80139f6:	f106 0420 	add.w	r4, r6, #32
 80139fa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80139fe:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 8013a02:	4628      	mov	r0, r5
 8013a04:	e011      	b.n	8013a2a <listen_message_reliably+0x66>
 8013a06:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8013a0a:	42ba      	cmp	r2, r7
 8013a0c:	eb73 0109 	sbcs.w	r1, r3, r9
 8013a10:	bfb8      	it	lt
 8013a12:	4699      	movlt	r9, r3
 8013a14:	f105 0501 	add.w	r5, r5, #1
 8013a18:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8013a1c:	b2e8      	uxtb	r0, r5
 8013a1e:	bfb8      	it	lt
 8013a20:	4617      	movlt	r7, r2
 8013a22:	4283      	cmp	r3, r0
 8013a24:	f104 0428 	add.w	r4, r4, #40	@ 0x28
 8013a28:	d94a      	bls.n	8013ac0 <listen_message_reliably+0xfc>
 8013a2a:	2201      	movs	r2, #1
 8013a2c:	2102      	movs	r1, #2
 8013a2e:	f001 f9b3 	bl	8014d98 <uxr_stream_id>
 8013a32:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8013a36:	4601      	mov	r1, r0
 8013a38:	4620      	mov	r0, r4
 8013a3a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013a3c:	f008 fa44 	bl	801bec8 <uxr_update_output_stream_heartbeat_timestamp>
 8013a40:	2800      	cmp	r0, #0
 8013a42:	d0e0      	beq.n	8013a06 <listen_message_reliably+0x42>
 8013a44:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8013a48:	f89d b02d 	ldrb.w	fp, [sp, #45]	@ 0x2d
 8013a4c:	9305      	str	r3, [sp, #20]
 8013a4e:	4630      	mov	r0, r6
 8013a50:	f000 fd06 	bl	8014460 <uxr_session_header_offset>
 8013a54:	f10d 0858 	add.w	r8, sp, #88	@ 0x58
 8013a58:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 8013a5c:	9000      	str	r0, [sp, #0]
 8013a5e:	a90e      	add	r1, sp, #56	@ 0x38
 8013a60:	4640      	mov	r0, r8
 8013a62:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
 8013a66:	2300      	movs	r3, #0
 8013a68:	2211      	movs	r2, #17
 8013a6a:	f7fa fae7 	bl	800e03c <ucdr_init_buffer_origin_offset>
 8013a6e:	2300      	movs	r3, #0
 8013a70:	2205      	movs	r2, #5
 8013a72:	210b      	movs	r1, #11
 8013a74:	4640      	mov	r0, r8
 8013a76:	f001 faab 	bl	8014fd0 <uxr_buffer_submessage_header>
 8013a7a:	f8bb 0032 	ldrh.w	r0, [fp, #50]	@ 0x32
 8013a7e:	2101      	movs	r1, #1
 8013a80:	f008 fae4 	bl	801c04c <uxr_seq_num_add>
 8013a84:	f8bb 3030 	ldrh.w	r3, [fp, #48]	@ 0x30
 8013a88:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8013a8c:	4602      	mov	r2, r0
 8013a8e:	9b05      	ldr	r3, [sp, #20]
 8013a90:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8013a94:	a90c      	add	r1, sp, #48	@ 0x30
 8013a96:	4640      	mov	r0, r8
 8013a98:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8013a9c:	f002 fb9a 	bl	80161d4 <uxr_serialize_HEARTBEAT_Payload>
 8013aa0:	2200      	movs	r2, #0
 8013aa2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013aa4:	4611      	mov	r1, r2
 8013aa6:	4630      	mov	r0, r6
 8013aa8:	f000 fc86 	bl	80143b8 <uxr_stamp_session_header>
 8013aac:	4640      	mov	r0, r8
 8013aae:	f7fa fb03 	bl	800e0b8 <ucdr_buffer_length>
 8013ab2:	4602      	mov	r2, r0
 8013ab4:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 8013ab6:	a90e      	add	r1, sp, #56	@ 0x38
 8013ab8:	e9d0 0300 	ldrd	r0, r3, [r0]
 8013abc:	4798      	blx	r3
 8013abe:	e7a2      	b.n	8013a06 <listen_message_reliably+0x42>
 8013ac0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013ac4:	4599      	cmp	r9, r3
 8013ac6:	bf08      	it	eq
 8013ac8:	f1b7 3fff 	cmpeq.w	r7, #4294967295	@ 0xffffffff
 8013acc:	e9dd b806 	ldrd	fp, r8, [sp, #24]
 8013ad0:	d032      	beq.n	8013b38 <listen_message_reliably+0x174>
 8013ad2:	9b03      	ldr	r3, [sp, #12]
 8013ad4:	1aff      	subs	r7, r7, r3
 8013ad6:	2f00      	cmp	r7, #0
 8013ad8:	bf08      	it	eq
 8013ada:	2701      	moveq	r7, #1
 8013adc:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8013ade:	455f      	cmp	r7, fp
 8013ae0:	bfa8      	it	ge
 8013ae2:	465f      	movge	r7, fp
 8013ae4:	689c      	ldr	r4, [r3, #8]
 8013ae6:	6818      	ldr	r0, [r3, #0]
 8013ae8:	4642      	mov	r2, r8
 8013aea:	463b      	mov	r3, r7
 8013aec:	4651      	mov	r1, sl
 8013aee:	47a0      	blx	r4
 8013af0:	ebab 0b07 	sub.w	fp, fp, r7
 8013af4:	b958      	cbnz	r0, 8013b0e <listen_message_reliably+0x14a>
 8013af6:	f1bb 0f00 	cmp.w	fp, #0
 8013afa:	dd44      	ble.n	8013b86 <listen_message_reliably+0x1c2>
 8013afc:	f001 faae 	bl	801505c <uxr_millis>
 8013b00:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d03c      	beq.n	8013b82 <listen_message_reliably+0x1be>
 8013b08:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8013b0c:	e770      	b.n	80139f0 <listen_message_reliably+0x2c>
 8013b0e:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 8013b12:	4604      	mov	r4, r0
 8013b14:	a80e      	add	r0, sp, #56	@ 0x38
 8013b16:	f7fa faa3 	bl	800e060 <ucdr_init_buffer>
 8013b1a:	2500      	movs	r5, #0
 8013b1c:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 8013b20:	aa08      	add	r2, sp, #32
 8013b22:	a90e      	add	r1, sp, #56	@ 0x38
 8013b24:	4630      	mov	r0, r6
 8013b26:	f88d 5020 	strb.w	r5, [sp, #32]
 8013b2a:	f000 fc5b 	bl	80143e4 <uxr_read_session_header>
 8013b2e:	b928      	cbnz	r0, 8013b3c <listen_message_reliably+0x178>
 8013b30:	4620      	mov	r0, r4
 8013b32:	b01f      	add	sp, #124	@ 0x7c
 8013b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b38:	465f      	mov	r7, fp
 8013b3a:	e7cc      	b.n	8013ad6 <listen_message_reliably+0x112>
 8013b3c:	4629      	mov	r1, r5
 8013b3e:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8013b42:	f001 f945 	bl	8014dd0 <uxr_stream_id_from_raw>
 8013b46:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8013b4a:	2f01      	cmp	r7, #1
 8013b4c:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 8013b50:	f8bd a022 	ldrh.w	sl, [sp, #34]	@ 0x22
 8013b54:	fa5f f880 	uxtb.w	r8, r0
 8013b58:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8013b5c:	d050      	beq.n	8013c00 <listen_message_reliably+0x23c>
 8013b5e:	2f02      	cmp	r7, #2
 8013b60:	d016      	beq.n	8013b90 <listen_message_reliably+0x1cc>
 8013b62:	2f00      	cmp	r7, #0
 8013b64:	d1e4      	bne.n	8013b30 <listen_message_reliably+0x16c>
 8013b66:	4639      	mov	r1, r7
 8013b68:	4638      	mov	r0, r7
 8013b6a:	f001 f931 	bl	8014dd0 <uxr_stream_id_from_raw>
 8013b6e:	a90e      	add	r1, sp, #56	@ 0x38
 8013b70:	4602      	mov	r2, r0
 8013b72:	4630      	mov	r0, r6
 8013b74:	920c      	str	r2, [sp, #48]	@ 0x30
 8013b76:	f7ff fdb5 	bl	80136e4 <read_submessage_list>
 8013b7a:	4620      	mov	r0, r4
 8013b7c:	b01f      	add	sp, #124	@ 0x7c
 8013b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b82:	465f      	mov	r7, fp
 8013b84:	e7aa      	b.n	8013adc <listen_message_reliably+0x118>
 8013b86:	4604      	mov	r4, r0
 8013b88:	4620      	mov	r0, r4
 8013b8a:	b01f      	add	sp, #124	@ 0x7c
 8013b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b90:	4629      	mov	r1, r5
 8013b92:	f106 0008 	add.w	r0, r6, #8
 8013b96:	f001 f9fb 	bl	8014f90 <uxr_get_input_reliable_stream>
 8013b9a:	4681      	mov	r9, r0
 8013b9c:	b338      	cbz	r0, 8013bee <listen_message_reliably+0x22a>
 8013b9e:	a80e      	add	r0, sp, #56	@ 0x38
 8013ba0:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 8013ba4:	f7fa fa8c 	bl	800e0c0 <ucdr_buffer_remaining>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	f10d 0021 	add.w	r0, sp, #33	@ 0x21
 8013bae:	9000      	str	r0, [sp, #0]
 8013bb0:	465a      	mov	r2, fp
 8013bb2:	4651      	mov	r1, sl
 8013bb4:	4648      	mov	r0, r9
 8013bb6:	f007 fdb3 	bl	801b720 <uxr_receive_reliable_message>
 8013bba:	b1c0      	cbz	r0, 8013bee <listen_message_reliably+0x22a>
 8013bbc:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8013bc0:	b393      	cbz	r3, 8013c28 <listen_message_reliably+0x264>
 8013bc2:	af16      	add	r7, sp, #88	@ 0x58
 8013bc4:	f04f 0a02 	mov.w	sl, #2
 8013bc8:	e00a      	b.n	8013be0 <listen_message_reliably+0x21c>
 8013bca:	f88d 8030 	strb.w	r8, [sp, #48]	@ 0x30
 8013bce:	f88d 5031 	strb.w	r5, [sp, #49]	@ 0x31
 8013bd2:	f88d a032 	strb.w	sl, [sp, #50]	@ 0x32
 8013bd6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013bd8:	4639      	mov	r1, r7
 8013bda:	4630      	mov	r0, r6
 8013bdc:	f7ff fd82 	bl	80136e4 <read_submessage_list>
 8013be0:	2204      	movs	r2, #4
 8013be2:	4639      	mov	r1, r7
 8013be4:	4648      	mov	r0, r9
 8013be6:	f007 fe15 	bl	801b814 <uxr_next_input_reliable_buffer_available>
 8013bea:	2800      	cmp	r0, #0
 8013bec:	d1ed      	bne.n	8013bca <listen_message_reliably+0x206>
 8013bee:	4630      	mov	r0, r6
 8013bf0:	462a      	mov	r2, r5
 8013bf2:	4641      	mov	r1, r8
 8013bf4:	f7ff fc08 	bl	8013408 <write_submessage_acknack.isra.0>
 8013bf8:	4620      	mov	r0, r4
 8013bfa:	b01f      	add	sp, #124	@ 0x7c
 8013bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c00:	4629      	mov	r1, r5
 8013c02:	f106 0008 	add.w	r0, r6, #8
 8013c06:	f001 f9b9 	bl	8014f7c <uxr_get_input_best_effort_stream>
 8013c0a:	2800      	cmp	r0, #0
 8013c0c:	d090      	beq.n	8013b30 <listen_message_reliably+0x16c>
 8013c0e:	4651      	mov	r1, sl
 8013c10:	f007 fcf6 	bl	801b600 <uxr_receive_best_effort_message>
 8013c14:	2800      	cmp	r0, #0
 8013c16:	d08b      	beq.n	8013b30 <listen_message_reliably+0x16c>
 8013c18:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 8013c1c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013c1e:	a90e      	add	r1, sp, #56	@ 0x38
 8013c20:	4630      	mov	r0, r6
 8013c22:	f7ff fd5f 	bl	80136e4 <read_submessage_list>
 8013c26:	e783      	b.n	8013b30 <listen_message_reliably+0x16c>
 8013c28:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 8013c2c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013c2e:	a90e      	add	r1, sp, #56	@ 0x38
 8013c30:	4630      	mov	r0, r6
 8013c32:	f7ff fd57 	bl	80136e4 <read_submessage_list>
 8013c36:	e7c4      	b.n	8013bc2 <listen_message_reliably+0x1fe>

08013c38 <uxr_run_session_timeout>:
 8013c38:	b570      	push	{r4, r5, r6, lr}
 8013c3a:	4604      	mov	r4, r0
 8013c3c:	460d      	mov	r5, r1
 8013c3e:	f001 fa0d 	bl	801505c <uxr_millis>
 8013c42:	4606      	mov	r6, r0
 8013c44:	4620      	mov	r0, r4
 8013c46:	f7ff fc99 	bl	801357c <uxr_flash_output_streams>
 8013c4a:	4629      	mov	r1, r5
 8013c4c:	4620      	mov	r0, r4
 8013c4e:	f7ff feb9 	bl	80139c4 <listen_message_reliably>
 8013c52:	f001 fa03 	bl	801505c <uxr_millis>
 8013c56:	1b81      	subs	r1, r0, r6
 8013c58:	1a69      	subs	r1, r5, r1
 8013c5a:	2900      	cmp	r1, #0
 8013c5c:	dcf6      	bgt.n	8013c4c <uxr_run_session_timeout+0x14>
 8013c5e:	f104 0008 	add.w	r0, r4, #8
 8013c62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013c66:	f001 b99d 	b.w	8014fa4 <uxr_output_streams_confirmed>
 8013c6a:	bf00      	nop

08013c6c <uxr_run_session_until_data>:
 8013c6c:	b570      	push	{r4, r5, r6, lr}
 8013c6e:	4604      	mov	r4, r0
 8013c70:	460d      	mov	r5, r1
 8013c72:	f001 f9f3 	bl	801505c <uxr_millis>
 8013c76:	4606      	mov	r6, r0
 8013c78:	4620      	mov	r0, r4
 8013c7a:	f7ff fc7f 	bl	801357c <uxr_flash_output_streams>
 8013c7e:	2300      	movs	r3, #0
 8013c80:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8013c84:	4629      	mov	r1, r5
 8013c86:	e005      	b.n	8013c94 <uxr_run_session_until_data+0x28>
 8013c88:	f001 f9e8 	bl	801505c <uxr_millis>
 8013c8c:	1b81      	subs	r1, r0, r6
 8013c8e:	1a69      	subs	r1, r5, r1
 8013c90:	2900      	cmp	r1, #0
 8013c92:	dd07      	ble.n	8013ca4 <uxr_run_session_until_data+0x38>
 8013c94:	4620      	mov	r0, r4
 8013c96:	f7ff fe95 	bl	80139c4 <listen_message_reliably>
 8013c9a:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8013c9e:	2800      	cmp	r0, #0
 8013ca0:	d0f2      	beq.n	8013c88 <uxr_run_session_until_data+0x1c>
 8013ca2:	bd70      	pop	{r4, r5, r6, pc}
 8013ca4:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8013ca8:	bd70      	pop	{r4, r5, r6, pc}
 8013caa:	bf00      	nop

08013cac <uxr_run_session_until_confirm_delivery>:
 8013cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cb0:	4606      	mov	r6, r0
 8013cb2:	460d      	mov	r5, r1
 8013cb4:	f001 f9d2 	bl	801505c <uxr_millis>
 8013cb8:	4607      	mov	r7, r0
 8013cba:	4630      	mov	r0, r6
 8013cbc:	f7ff fc5e 	bl	801357c <uxr_flash_output_streams>
 8013cc0:	2d00      	cmp	r5, #0
 8013cc2:	db16      	blt.n	8013cf2 <uxr_run_session_until_confirm_delivery+0x46>
 8013cc4:	462c      	mov	r4, r5
 8013cc6:	f106 0808 	add.w	r8, r6, #8
 8013cca:	e008      	b.n	8013cde <uxr_run_session_until_confirm_delivery+0x32>
 8013ccc:	4621      	mov	r1, r4
 8013cce:	4630      	mov	r0, r6
 8013cd0:	f7ff fe78 	bl	80139c4 <listen_message_reliably>
 8013cd4:	f001 f9c2 	bl	801505c <uxr_millis>
 8013cd8:	1bc1      	subs	r1, r0, r7
 8013cda:	1a6c      	subs	r4, r5, r1
 8013cdc:	d404      	bmi.n	8013ce8 <uxr_run_session_until_confirm_delivery+0x3c>
 8013cde:	4640      	mov	r0, r8
 8013ce0:	f001 f960 	bl	8014fa4 <uxr_output_streams_confirmed>
 8013ce4:	2800      	cmp	r0, #0
 8013ce6:	d0f1      	beq.n	8013ccc <uxr_run_session_until_confirm_delivery+0x20>
 8013ce8:	4640      	mov	r0, r8
 8013cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013cee:	f001 b959 	b.w	8014fa4 <uxr_output_streams_confirmed>
 8013cf2:	f106 0808 	add.w	r8, r6, #8
 8013cf6:	e7f7      	b.n	8013ce8 <uxr_run_session_until_confirm_delivery+0x3c>

08013cf8 <uxr_run_session_until_all_status>:
 8013cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013cfc:	9c08      	ldr	r4, [sp, #32]
 8013cfe:	4605      	mov	r5, r0
 8013d00:	460f      	mov	r7, r1
 8013d02:	4690      	mov	r8, r2
 8013d04:	461e      	mov	r6, r3
 8013d06:	f7ff fc39 	bl	801357c <uxr_flash_output_streams>
 8013d0a:	b124      	cbz	r4, 8013d16 <uxr_run_session_until_all_status+0x1e>
 8013d0c:	4622      	mov	r2, r4
 8013d0e:	21ff      	movs	r1, #255	@ 0xff
 8013d10:	4630      	mov	r0, r6
 8013d12:	f009 ff11 	bl	801db38 <memset>
 8013d16:	e9c5 861d 	strd	r8, r6, [r5, #116]	@ 0x74
 8013d1a:	67ec      	str	r4, [r5, #124]	@ 0x7c
 8013d1c:	f001 f99e 	bl	801505c <uxr_millis>
 8013d20:	4639      	mov	r1, r7
 8013d22:	4681      	mov	r9, r0
 8013d24:	4628      	mov	r0, r5
 8013d26:	f7ff fe4d 	bl	80139c4 <listen_message_reliably>
 8013d2a:	f001 f997 	bl	801505c <uxr_millis>
 8013d2e:	eba0 0109 	sub.w	r1, r0, r9
 8013d32:	1a79      	subs	r1, r7, r1
 8013d34:	b36c      	cbz	r4, 8013d92 <uxr_run_session_until_all_status+0x9a>
 8013d36:	1e70      	subs	r0, r6, #1
 8013d38:	46c6      	mov	lr, r8
 8013d3a:	1902      	adds	r2, r0, r4
 8013d3c:	4684      	mov	ip, r0
 8013d3e:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8013d42:	2bff      	cmp	r3, #255	@ 0xff
 8013d44:	d007      	beq.n	8013d56 <uxr_run_session_until_all_status+0x5e>
 8013d46:	4594      	cmp	ip, r2
 8013d48:	d00f      	beq.n	8013d6a <uxr_run_session_until_all_status+0x72>
 8013d4a:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8013d4e:	2bff      	cmp	r3, #255	@ 0xff
 8013d50:	f10e 0e02 	add.w	lr, lr, #2
 8013d54:	d1f7      	bne.n	8013d46 <uxr_run_session_until_all_status+0x4e>
 8013d56:	4594      	cmp	ip, r2
 8013d58:	f8be 3000 	ldrh.w	r3, [lr]
 8013d5c:	d014      	beq.n	8013d88 <uxr_run_session_until_all_status+0x90>
 8013d5e:	f10e 0e02 	add.w	lr, lr, #2
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d0eb      	beq.n	8013d3e <uxr_run_session_until_all_status+0x46>
 8013d66:	2900      	cmp	r1, #0
 8013d68:	dcdc      	bgt.n	8013d24 <uxr_run_session_until_all_status+0x2c>
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8013d6e:	e001      	b.n	8013d74 <uxr_run_session_until_all_status+0x7c>
 8013d70:	2b01      	cmp	r3, #1
 8013d72:	d812      	bhi.n	8013d9a <uxr_run_session_until_all_status+0xa2>
 8013d74:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8013d78:	4290      	cmp	r0, r2
 8013d7a:	d1f9      	bne.n	8013d70 <uxr_run_session_until_all_status+0x78>
 8013d7c:	2b01      	cmp	r3, #1
 8013d7e:	bf8c      	ite	hi
 8013d80:	2000      	movhi	r0, #0
 8013d82:	2001      	movls	r0, #1
 8013d84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d88:	2900      	cmp	r1, #0
 8013d8a:	ddee      	ble.n	8013d6a <uxr_run_session_until_all_status+0x72>
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d1c9      	bne.n	8013d24 <uxr_run_session_until_all_status+0x2c>
 8013d90:	e7eb      	b.n	8013d6a <uxr_run_session_until_all_status+0x72>
 8013d92:	67ec      	str	r4, [r5, #124]	@ 0x7c
 8013d94:	2001      	movs	r0, #1
 8013d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d9a:	2000      	movs	r0, #0
 8013d9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013da0 <uxr_sync_session>:
 8013da0:	b570      	push	{r4, r5, r6, lr}
 8013da2:	b092      	sub	sp, #72	@ 0x48
 8013da4:	4604      	mov	r4, r0
 8013da6:	460d      	mov	r5, r1
 8013da8:	f000 fb5a 	bl	8014460 <uxr_session_header_offset>
 8013dac:	2214      	movs	r2, #20
 8013dae:	eb0d 0102 	add.w	r1, sp, r2
 8013db2:	9000      	str	r0, [sp, #0]
 8013db4:	2300      	movs	r3, #0
 8013db6:	a80a      	add	r0, sp, #40	@ 0x28
 8013db8:	f7fa f940 	bl	800e03c <ucdr_init_buffer_origin_offset>
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	2208      	movs	r2, #8
 8013dc0:	210e      	movs	r1, #14
 8013dc2:	a80a      	add	r0, sp, #40	@ 0x28
 8013dc4:	f001 f904 	bl	8014fd0 <uxr_buffer_submessage_header>
 8013dc8:	f001 f962 	bl	8015090 <uxr_nanos>
 8013dcc:	a318      	add	r3, pc, #96	@ (adr r3, 8013e30 <uxr_sync_session+0x90>)
 8013dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dd2:	f7ec ff49 	bl	8000c68 <__aeabi_ldivmod>
 8013dd6:	a903      	add	r1, sp, #12
 8013dd8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8013ddc:	a80a      	add	r0, sp, #40	@ 0x28
 8013dde:	f002 fa1f 	bl	8016220 <uxr_serialize_TIMESTAMP_Payload>
 8013de2:	2200      	movs	r2, #0
 8013de4:	4611      	mov	r1, r2
 8013de6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013de8:	4620      	mov	r0, r4
 8013dea:	f000 fae5 	bl	80143b8 <uxr_stamp_session_header>
 8013dee:	a80a      	add	r0, sp, #40	@ 0x28
 8013df0:	f7fa f962 	bl	800e0b8 <ucdr_buffer_length>
 8013df4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013df6:	4602      	mov	r2, r0
 8013df8:	a905      	add	r1, sp, #20
 8013dfa:	e9d3 0600 	ldrd	r0, r6, [r3]
 8013dfe:	47b0      	blx	r6
 8013e00:	f001 f92c 	bl	801505c <uxr_millis>
 8013e04:	2300      	movs	r3, #0
 8013e06:	4606      	mov	r6, r0
 8013e08:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8013e0c:	4629      	mov	r1, r5
 8013e0e:	e000      	b.n	8013e12 <uxr_sync_session+0x72>
 8013e10:	b950      	cbnz	r0, 8013e28 <uxr_sync_session+0x88>
 8013e12:	4620      	mov	r0, r4
 8013e14:	f7ff fdd6 	bl	80139c4 <listen_message_reliably>
 8013e18:	f001 f920 	bl	801505c <uxr_millis>
 8013e1c:	1b81      	subs	r1, r0, r6
 8013e1e:	1a69      	subs	r1, r5, r1
 8013e20:	2900      	cmp	r1, #0
 8013e22:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 8013e26:	dcf3      	bgt.n	8013e10 <uxr_sync_session+0x70>
 8013e28:	b012      	add	sp, #72	@ 0x48
 8013e2a:	bd70      	pop	{r4, r5, r6, pc}
 8013e2c:	f3af 8000 	nop.w
 8013e30:	3b9aca00 	.word	0x3b9aca00
 8013e34:	00000000 	.word	0x00000000

08013e38 <wait_session_status>:
 8013e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e3c:	4604      	mov	r4, r0
 8013e3e:	20ff      	movs	r0, #255	@ 0xff
 8013e40:	b09f      	sub	sp, #124	@ 0x7c
 8013e42:	7160      	strb	r0, [r4, #5]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	f000 80bb 	beq.w	8013fc0 <wait_session_status+0x188>
 8013e4a:	4692      	mov	sl, r2
 8013e4c:	469b      	mov	fp, r3
 8013e4e:	f04f 0800 	mov.w	r8, #0
 8013e52:	9105      	str	r1, [sp, #20]
 8013e54:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013e56:	9905      	ldr	r1, [sp, #20]
 8013e58:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013e5c:	4652      	mov	r2, sl
 8013e5e:	47a8      	blx	r5
 8013e60:	f001 f8fc 	bl	801505c <uxr_millis>
 8013e64:	2700      	movs	r7, #0
 8013e66:	4605      	mov	r5, r0
 8013e68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013e6c:	e009      	b.n	8013e82 <wait_session_status+0x4a>
 8013e6e:	f001 f8f5 	bl	801505c <uxr_millis>
 8013e72:	1b43      	subs	r3, r0, r5
 8013e74:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	7962      	ldrb	r2, [r4, #5]
 8013e7c:	dd3d      	ble.n	8013efa <wait_session_status+0xc2>
 8013e7e:	2aff      	cmp	r2, #255	@ 0xff
 8013e80:	d13b      	bne.n	8013efa <wait_session_status+0xc2>
 8013e82:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8013e84:	a90a      	add	r1, sp, #40	@ 0x28
 8013e86:	6896      	ldr	r6, [r2, #8]
 8013e88:	6810      	ldr	r0, [r2, #0]
 8013e8a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013e8c:	47b0      	blx	r6
 8013e8e:	2800      	cmp	r0, #0
 8013e90:	d0ed      	beq.n	8013e6e <wait_session_status+0x36>
 8013e92:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 8013e96:	a80e      	add	r0, sp, #56	@ 0x38
 8013e98:	f7fa f8e2 	bl	800e060 <ucdr_init_buffer>
 8013e9c:	f10d 0326 	add.w	r3, sp, #38	@ 0x26
 8013ea0:	aa09      	add	r2, sp, #36	@ 0x24
 8013ea2:	a90e      	add	r1, sp, #56	@ 0x38
 8013ea4:	4620      	mov	r0, r4
 8013ea6:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
 8013eaa:	f000 fa9b 	bl	80143e4 <uxr_read_session_header>
 8013eae:	2800      	cmp	r0, #0
 8013eb0:	d0dd      	beq.n	8013e6e <wait_session_status+0x36>
 8013eb2:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8013eb6:	2100      	movs	r1, #0
 8013eb8:	f000 ff8a 	bl	8014dd0 <uxr_stream_id_from_raw>
 8013ebc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8013ec0:	9304      	str	r3, [sp, #16]
 8013ec2:	f3c0 4907 	ubfx	r9, r0, #16, #8
 8013ec6:	b2c3      	uxtb	r3, r0
 8013ec8:	f1b9 0f01 	cmp.w	r9, #1
 8013ecc:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 8013ed0:	9303      	str	r3, [sp, #12]
 8013ed2:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8013ed6:	d05d      	beq.n	8013f94 <wait_session_status+0x15c>
 8013ed8:	f1b9 0f02 	cmp.w	r9, #2
 8013edc:	d01a      	beq.n	8013f14 <wait_session_status+0xdc>
 8013ede:	f1b9 0f00 	cmp.w	r9, #0
 8013ee2:	d1c4      	bne.n	8013e6e <wait_session_status+0x36>
 8013ee4:	4649      	mov	r1, r9
 8013ee6:	4648      	mov	r0, r9
 8013ee8:	f000 ff72 	bl	8014dd0 <uxr_stream_id_from_raw>
 8013eec:	a90e      	add	r1, sp, #56	@ 0x38
 8013eee:	4602      	mov	r2, r0
 8013ef0:	900d      	str	r0, [sp, #52]	@ 0x34
 8013ef2:	4620      	mov	r0, r4
 8013ef4:	f7ff fbf6 	bl	80136e4 <read_submessage_list>
 8013ef8:	e7b9      	b.n	8013e6e <wait_session_status+0x36>
 8013efa:	f108 0801 	add.w	r8, r8, #1
 8013efe:	45c3      	cmp	fp, r8
 8013f00:	d001      	beq.n	8013f06 <wait_session_status+0xce>
 8013f02:	2aff      	cmp	r2, #255	@ 0xff
 8013f04:	d0a6      	beq.n	8013e54 <wait_session_status+0x1c>
 8013f06:	f1b2 00ff 	subs.w	r0, r2, #255	@ 0xff
 8013f0a:	bf18      	it	ne
 8013f0c:	2001      	movne	r0, #1
 8013f0e:	b01f      	add	sp, #124	@ 0x7c
 8013f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f14:	4631      	mov	r1, r6
 8013f16:	f104 0008 	add.w	r0, r4, #8
 8013f1a:	f001 f839 	bl	8014f90 <uxr_get_input_reliable_stream>
 8013f1e:	9006      	str	r0, [sp, #24]
 8013f20:	2800      	cmp	r0, #0
 8013f22:	d031      	beq.n	8013f88 <wait_session_status+0x150>
 8013f24:	aa0e      	add	r2, sp, #56	@ 0x38
 8013f26:	4610      	mov	r0, r2
 8013f28:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8013f2a:	9207      	str	r2, [sp, #28]
 8013f2c:	f7fa f8c8 	bl	800e0c0 <ucdr_buffer_remaining>
 8013f30:	4603      	mov	r3, r0
 8013f32:	f10d 0025 	add.w	r0, sp, #37	@ 0x25
 8013f36:	9000      	str	r0, [sp, #0]
 8013f38:	9a07      	ldr	r2, [sp, #28]
 8013f3a:	9904      	ldr	r1, [sp, #16]
 8013f3c:	9806      	ldr	r0, [sp, #24]
 8013f3e:	f007 fbef 	bl	801b720 <uxr_receive_reliable_message>
 8013f42:	b308      	cbz	r0, 8013f88 <wait_session_status+0x150>
 8013f44:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d041      	beq.n	8013fd0 <wait_session_status+0x198>
 8013f4c:	f8cd 8010 	str.w	r8, [sp, #16]
 8013f50:	9507      	str	r5, [sp, #28]
 8013f52:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8013f56:	9d06      	ldr	r5, [sp, #24]
 8013f58:	f04f 0902 	mov.w	r9, #2
 8013f5c:	e00a      	b.n	8013f74 <wait_session_status+0x13c>
 8013f5e:	f88d 8034 	strb.w	r8, [sp, #52]	@ 0x34
 8013f62:	f88d 6035 	strb.w	r6, [sp, #53]	@ 0x35
 8013f66:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 8013f6a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013f6c:	a916      	add	r1, sp, #88	@ 0x58
 8013f6e:	4620      	mov	r0, r4
 8013f70:	f7ff fbb8 	bl	80136e4 <read_submessage_list>
 8013f74:	2204      	movs	r2, #4
 8013f76:	a916      	add	r1, sp, #88	@ 0x58
 8013f78:	4628      	mov	r0, r5
 8013f7a:	f007 fc4b 	bl	801b814 <uxr_next_input_reliable_buffer_available>
 8013f7e:	2800      	cmp	r0, #0
 8013f80:	d1ed      	bne.n	8013f5e <wait_session_status+0x126>
 8013f82:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013f86:	9d07      	ldr	r5, [sp, #28]
 8013f88:	9903      	ldr	r1, [sp, #12]
 8013f8a:	4632      	mov	r2, r6
 8013f8c:	4620      	mov	r0, r4
 8013f8e:	f7ff fa3b 	bl	8013408 <write_submessage_acknack.isra.0>
 8013f92:	e76c      	b.n	8013e6e <wait_session_status+0x36>
 8013f94:	4631      	mov	r1, r6
 8013f96:	f104 0008 	add.w	r0, r4, #8
 8013f9a:	f000 ffef 	bl	8014f7c <uxr_get_input_best_effort_stream>
 8013f9e:	2800      	cmp	r0, #0
 8013fa0:	f43f af65 	beq.w	8013e6e <wait_session_status+0x36>
 8013fa4:	9904      	ldr	r1, [sp, #16]
 8013fa6:	f007 fb2b 	bl	801b600 <uxr_receive_best_effort_message>
 8013faa:	2800      	cmp	r0, #0
 8013fac:	f43f af5f 	beq.w	8013e6e <wait_session_status+0x36>
 8013fb0:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 8013fb4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013fb6:	a90e      	add	r1, sp, #56	@ 0x38
 8013fb8:	4620      	mov	r0, r4
 8013fba:	f7ff fb93 	bl	80136e4 <read_submessage_list>
 8013fbe:	e756      	b.n	8013e6e <wait_session_status+0x36>
 8013fc0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013fc2:	e9d3 0400 	ldrd	r0, r4, [r3]
 8013fc6:	47a0      	blx	r4
 8013fc8:	2001      	movs	r0, #1
 8013fca:	b01f      	add	sp, #124	@ 0x7c
 8013fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fd0:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 8013fd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013fd6:	a90e      	add	r1, sp, #56	@ 0x38
 8013fd8:	4620      	mov	r0, r4
 8013fda:	f7ff fb83 	bl	80136e4 <read_submessage_list>
 8013fde:	e7b5      	b.n	8013f4c <wait_session_status+0x114>

08013fe0 <uxr_delete_session_retries>:
 8013fe0:	b530      	push	{r4, r5, lr}
 8013fe2:	b08f      	sub	sp, #60	@ 0x3c
 8013fe4:	4604      	mov	r4, r0
 8013fe6:	460d      	mov	r5, r1
 8013fe8:	f000 fa3a 	bl	8014460 <uxr_session_header_offset>
 8013fec:	2300      	movs	r3, #0
 8013fee:	2210      	movs	r2, #16
 8013ff0:	9000      	str	r0, [sp, #0]
 8013ff2:	a902      	add	r1, sp, #8
 8013ff4:	a806      	add	r0, sp, #24
 8013ff6:	f7fa f821 	bl	800e03c <ucdr_init_buffer_origin_offset>
 8013ffa:	a906      	add	r1, sp, #24
 8013ffc:	4620      	mov	r0, r4
 8013ffe:	f000 f981 	bl	8014304 <uxr_buffer_delete_session>
 8014002:	2200      	movs	r2, #0
 8014004:	4611      	mov	r1, r2
 8014006:	9b06      	ldr	r3, [sp, #24]
 8014008:	4620      	mov	r0, r4
 801400a:	f000 f9d5 	bl	80143b8 <uxr_stamp_session_header>
 801400e:	a806      	add	r0, sp, #24
 8014010:	f7fa f852 	bl	800e0b8 <ucdr_buffer_length>
 8014014:	462b      	mov	r3, r5
 8014016:	4602      	mov	r2, r0
 8014018:	a902      	add	r1, sp, #8
 801401a:	4620      	mov	r0, r4
 801401c:	f7ff ff0c 	bl	8013e38 <wait_session_status>
 8014020:	b118      	cbz	r0, 801402a <uxr_delete_session_retries+0x4a>
 8014022:	7960      	ldrb	r0, [r4, #5]
 8014024:	fab0 f080 	clz	r0, r0
 8014028:	0940      	lsrs	r0, r0, #5
 801402a:	b00f      	add	sp, #60	@ 0x3c
 801402c:	bd30      	pop	{r4, r5, pc}
 801402e:	bf00      	nop

08014030 <uxr_create_session>:
 8014030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014034:	f100 0308 	add.w	r3, r0, #8
 8014038:	b0ab      	sub	sp, #172	@ 0xac
 801403a:	4604      	mov	r4, r0
 801403c:	4618      	mov	r0, r3
 801403e:	9303      	str	r3, [sp, #12]
 8014040:	f000 feec 	bl	8014e1c <uxr_reset_stream_storage>
 8014044:	4620      	mov	r0, r4
 8014046:	f000 fa0b 	bl	8014460 <uxr_session_header_offset>
 801404a:	2300      	movs	r3, #0
 801404c:	9000      	str	r0, [sp, #0]
 801404e:	221c      	movs	r2, #28
 8014050:	a90b      	add	r1, sp, #44	@ 0x2c
 8014052:	a812      	add	r0, sp, #72	@ 0x48
 8014054:	f7f9 fff2 	bl	800e03c <ucdr_init_buffer_origin_offset>
 8014058:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801405a:	8a1a      	ldrh	r2, [r3, #16]
 801405c:	3a04      	subs	r2, #4
 801405e:	b292      	uxth	r2, r2
 8014060:	a912      	add	r1, sp, #72	@ 0x48
 8014062:	4620      	mov	r0, r4
 8014064:	f000 f924 	bl	80142b0 <uxr_buffer_create_session>
 8014068:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801406a:	4620      	mov	r0, r4
 801406c:	f000 f990 	bl	8014390 <uxr_stamp_create_session_header>
 8014070:	a812      	add	r0, sp, #72	@ 0x48
 8014072:	f7fa f821 	bl	800e0b8 <ucdr_buffer_length>
 8014076:	23ff      	movs	r3, #255	@ 0xff
 8014078:	4683      	mov	fp, r0
 801407a:	7163      	strb	r3, [r4, #5]
 801407c:	f04f 080a 	mov.w	r8, #10
 8014080:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8014082:	465a      	mov	r2, fp
 8014084:	e9d3 0500 	ldrd	r0, r5, [r3]
 8014088:	a90b      	add	r1, sp, #44	@ 0x2c
 801408a:	47a8      	blx	r5
 801408c:	f000 ffe6 	bl	801505c <uxr_millis>
 8014090:	2700      	movs	r7, #0
 8014092:	4605      	mov	r5, r0
 8014094:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014098:	e009      	b.n	80140ae <uxr_create_session+0x7e>
 801409a:	f000 ffdf 	bl	801505c <uxr_millis>
 801409e:	1b43      	subs	r3, r0, r5
 80140a0:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	7962      	ldrb	r2, [r4, #5]
 80140a8:	dd3d      	ble.n	8014126 <uxr_create_session+0xf6>
 80140aa:	2aff      	cmp	r2, #255	@ 0xff
 80140ac:	d13b      	bne.n	8014126 <uxr_create_session+0xf6>
 80140ae:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80140b0:	a907      	add	r1, sp, #28
 80140b2:	6896      	ldr	r6, [r2, #8]
 80140b4:	6810      	ldr	r0, [r2, #0]
 80140b6:	aa08      	add	r2, sp, #32
 80140b8:	47b0      	blx	r6
 80140ba:	2800      	cmp	r0, #0
 80140bc:	d0ed      	beq.n	801409a <uxr_create_session+0x6a>
 80140be:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80140c2:	a81a      	add	r0, sp, #104	@ 0x68
 80140c4:	f7f9 ffcc 	bl	800e060 <ucdr_init_buffer>
 80140c8:	f10d 031a 	add.w	r3, sp, #26
 80140cc:	aa06      	add	r2, sp, #24
 80140ce:	a91a      	add	r1, sp, #104	@ 0x68
 80140d0:	4620      	mov	r0, r4
 80140d2:	f88d 7018 	strb.w	r7, [sp, #24]
 80140d6:	f000 f985 	bl	80143e4 <uxr_read_session_header>
 80140da:	2800      	cmp	r0, #0
 80140dc:	d0dd      	beq.n	801409a <uxr_create_session+0x6a>
 80140de:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80140e2:	2100      	movs	r1, #0
 80140e4:	f000 fe74 	bl	8014dd0 <uxr_stream_id_from_raw>
 80140e8:	f3c0 4907 	ubfx	r9, r0, #16, #8
 80140ec:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80140f0:	9302      	str	r3, [sp, #8]
 80140f2:	f1b9 0f01 	cmp.w	r9, #1
 80140f6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80140fa:	fa5f fa80 	uxtb.w	sl, r0
 80140fe:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8014102:	d056      	beq.n	80141b2 <uxr_create_session+0x182>
 8014104:	f1b9 0f02 	cmp.w	r9, #2
 8014108:	d018      	beq.n	801413c <uxr_create_session+0x10c>
 801410a:	f1b9 0f00 	cmp.w	r9, #0
 801410e:	d1c4      	bne.n	801409a <uxr_create_session+0x6a>
 8014110:	4649      	mov	r1, r9
 8014112:	4648      	mov	r0, r9
 8014114:	f000 fe5c 	bl	8014dd0 <uxr_stream_id_from_raw>
 8014118:	a91a      	add	r1, sp, #104	@ 0x68
 801411a:	4602      	mov	r2, r0
 801411c:	900a      	str	r0, [sp, #40]	@ 0x28
 801411e:	4620      	mov	r0, r4
 8014120:	f7ff fae0 	bl	80136e4 <read_submessage_list>
 8014124:	e7b9      	b.n	801409a <uxr_create_session+0x6a>
 8014126:	f1b8 0801 	subs.w	r8, r8, #1
 801412a:	d001      	beq.n	8014130 <uxr_create_session+0x100>
 801412c:	2aff      	cmp	r2, #255	@ 0xff
 801412e:	d0a7      	beq.n	8014080 <uxr_create_session+0x50>
 8014130:	2a00      	cmp	r2, #0
 8014132:	d05b      	beq.n	80141ec <uxr_create_session+0x1bc>
 8014134:	2000      	movs	r0, #0
 8014136:	b02b      	add	sp, #172	@ 0xac
 8014138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801413c:	9803      	ldr	r0, [sp, #12]
 801413e:	4631      	mov	r1, r6
 8014140:	f000 ff26 	bl	8014f90 <uxr_get_input_reliable_stream>
 8014144:	9004      	str	r0, [sp, #16]
 8014146:	b370      	cbz	r0, 80141a6 <uxr_create_session+0x176>
 8014148:	aa1a      	add	r2, sp, #104	@ 0x68
 801414a:	4610      	mov	r0, r2
 801414c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801414e:	9205      	str	r2, [sp, #20]
 8014150:	f7f9 ffb6 	bl	800e0c0 <ucdr_buffer_remaining>
 8014154:	4603      	mov	r3, r0
 8014156:	f10d 0019 	add.w	r0, sp, #25
 801415a:	9000      	str	r0, [sp, #0]
 801415c:	9a05      	ldr	r2, [sp, #20]
 801415e:	9902      	ldr	r1, [sp, #8]
 8014160:	9804      	ldr	r0, [sp, #16]
 8014162:	f007 fadd 	bl	801b720 <uxr_receive_reliable_message>
 8014166:	b1f0      	cbz	r0, 80141a6 <uxr_create_session+0x176>
 8014168:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d035      	beq.n	80141dc <uxr_create_session+0x1ac>
 8014170:	f8cd b008 	str.w	fp, [sp, #8]
 8014174:	f04f 0902 	mov.w	r9, #2
 8014178:	f8dd b010 	ldr.w	fp, [sp, #16]
 801417c:	e00a      	b.n	8014194 <uxr_create_session+0x164>
 801417e:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 8014182:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8014186:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 801418a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801418c:	a922      	add	r1, sp, #136	@ 0x88
 801418e:	4620      	mov	r0, r4
 8014190:	f7ff faa8 	bl	80136e4 <read_submessage_list>
 8014194:	2204      	movs	r2, #4
 8014196:	a922      	add	r1, sp, #136	@ 0x88
 8014198:	4658      	mov	r0, fp
 801419a:	f007 fb3b 	bl	801b814 <uxr_next_input_reliable_buffer_available>
 801419e:	2800      	cmp	r0, #0
 80141a0:	d1ed      	bne.n	801417e <uxr_create_session+0x14e>
 80141a2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80141a6:	4632      	mov	r2, r6
 80141a8:	4651      	mov	r1, sl
 80141aa:	4620      	mov	r0, r4
 80141ac:	f7ff f92c 	bl	8013408 <write_submessage_acknack.isra.0>
 80141b0:	e773      	b.n	801409a <uxr_create_session+0x6a>
 80141b2:	9803      	ldr	r0, [sp, #12]
 80141b4:	4631      	mov	r1, r6
 80141b6:	f000 fee1 	bl	8014f7c <uxr_get_input_best_effort_stream>
 80141ba:	2800      	cmp	r0, #0
 80141bc:	f43f af6d 	beq.w	801409a <uxr_create_session+0x6a>
 80141c0:	9902      	ldr	r1, [sp, #8]
 80141c2:	f007 fa1d 	bl	801b600 <uxr_receive_best_effort_message>
 80141c6:	2800      	cmp	r0, #0
 80141c8:	f43f af67 	beq.w	801409a <uxr_create_session+0x6a>
 80141cc:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 80141d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80141d2:	a91a      	add	r1, sp, #104	@ 0x68
 80141d4:	4620      	mov	r0, r4
 80141d6:	f7ff fa85 	bl	80136e4 <read_submessage_list>
 80141da:	e75e      	b.n	801409a <uxr_create_session+0x6a>
 80141dc:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 80141e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80141e2:	a91a      	add	r1, sp, #104	@ 0x68
 80141e4:	4620      	mov	r0, r4
 80141e6:	f7ff fa7d 	bl	80136e4 <read_submessage_list>
 80141ea:	e7c1      	b.n	8014170 <uxr_create_session+0x140>
 80141ec:	9803      	ldr	r0, [sp, #12]
 80141ee:	f000 fe15 	bl	8014e1c <uxr_reset_stream_storage>
 80141f2:	2001      	movs	r0, #1
 80141f4:	b02b      	add	sp, #172	@ 0xac
 80141f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141fa:	bf00      	nop

080141fc <uxr_prepare_stream_to_write_submessage>:
 80141fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014200:	b082      	sub	sp, #8
 8014202:	4606      	mov	r6, r0
 8014204:	4610      	mov	r0, r2
 8014206:	4614      	mov	r4, r2
 8014208:	9101      	str	r1, [sp, #4]
 801420a:	461f      	mov	r7, r3
 801420c:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8014210:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 8014214:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8014218:	f000 ff1a 	bl	8015050 <uxr_submessage_padding>
 801421c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014220:	1d21      	adds	r1, r4, #4
 8014222:	2b01      	cmp	r3, #1
 8014224:	eb01 0a00 	add.w	sl, r1, r0
 8014228:	d012      	beq.n	8014250 <uxr_prepare_stream_to_write_submessage+0x54>
 801422a:	2b02      	cmp	r3, #2
 801422c:	d003      	beq.n	8014236 <uxr_prepare_stream_to_write_submessage+0x3a>
 801422e:	2000      	movs	r0, #0
 8014230:	b002      	add	sp, #8
 8014232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014236:	4629      	mov	r1, r5
 8014238:	f106 0008 	add.w	r0, r6, #8
 801423c:	f000 fe94 	bl	8014f68 <uxr_get_output_reliable_stream>
 8014240:	2800      	cmp	r0, #0
 8014242:	d0f4      	beq.n	801422e <uxr_prepare_stream_to_write_submessage+0x32>
 8014244:	4651      	mov	r1, sl
 8014246:	463a      	mov	r2, r7
 8014248:	f007 fc9a 	bl	801bb80 <uxr_prepare_reliable_buffer_to_write>
 801424c:	b968      	cbnz	r0, 801426a <uxr_prepare_stream_to_write_submessage+0x6e>
 801424e:	e7ee      	b.n	801422e <uxr_prepare_stream_to_write_submessage+0x32>
 8014250:	4629      	mov	r1, r5
 8014252:	f106 0008 	add.w	r0, r6, #8
 8014256:	f000 fe7f 	bl	8014f58 <uxr_get_output_best_effort_stream>
 801425a:	2800      	cmp	r0, #0
 801425c:	d0e7      	beq.n	801422e <uxr_prepare_stream_to_write_submessage+0x32>
 801425e:	4651      	mov	r1, sl
 8014260:	463a      	mov	r2, r7
 8014262:	f007 fbbf 	bl	801b9e4 <uxr_prepare_best_effort_buffer_to_write>
 8014266:	2800      	cmp	r0, #0
 8014268:	d0e1      	beq.n	801422e <uxr_prepare_stream_to_write_submessage+0x32>
 801426a:	464b      	mov	r3, r9
 801426c:	b2a2      	uxth	r2, r4
 801426e:	4641      	mov	r1, r8
 8014270:	4638      	mov	r0, r7
 8014272:	f000 fead 	bl	8014fd0 <uxr_buffer_submessage_header>
 8014276:	2001      	movs	r0, #1
 8014278:	b002      	add	sp, #8
 801427a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801427e:	bf00      	nop

08014280 <uxr_init_session_info>:
 8014280:	2300      	movs	r3, #0
 8014282:	f361 0307 	bfi	r3, r1, #0, #8
 8014286:	0e11      	lsrs	r1, r2, #24
 8014288:	f361 230f 	bfi	r3, r1, #8, #8
 801428c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8014290:	f361 4317 	bfi	r3, r1, #16, #8
 8014294:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8014298:	f361 631f 	bfi	r3, r1, #24, #8
 801429c:	f04f 0c09 	mov.w	ip, #9
 80142a0:	21ff      	movs	r1, #255	@ 0xff
 80142a2:	6003      	str	r3, [r0, #0]
 80142a4:	7102      	strb	r2, [r0, #4]
 80142a6:	f8a0 c006 	strh.w	ip, [r0, #6]
 80142aa:	7141      	strb	r1, [r0, #5]
 80142ac:	4770      	bx	lr
 80142ae:	bf00      	nop

080142b0 <uxr_buffer_create_session>:
 80142b0:	b530      	push	{r4, r5, lr}
 80142b2:	4d13      	ldr	r5, [pc, #76]	@ (8014300 <uxr_buffer_create_session+0x50>)
 80142b4:	b089      	sub	sp, #36	@ 0x24
 80142b6:	2300      	movs	r3, #0
 80142b8:	9307      	str	r3, [sp, #28]
 80142ba:	f8ad 201c 	strh.w	r2, [sp, #28]
 80142be:	682a      	ldr	r2, [r5, #0]
 80142c0:	9200      	str	r2, [sp, #0]
 80142c2:	460c      	mov	r4, r1
 80142c4:	2201      	movs	r2, #1
 80142c6:	88a9      	ldrh	r1, [r5, #4]
 80142c8:	9301      	str	r3, [sp, #4]
 80142ca:	80c2      	strh	r2, [r0, #6]
 80142cc:	f8ad 1006 	strh.w	r1, [sp, #6]
 80142d0:	f8d0 1001 	ldr.w	r1, [r0, #1]
 80142d4:	7800      	ldrb	r0, [r0, #0]
 80142d6:	9303      	str	r3, [sp, #12]
 80142d8:	f88d 2004 	strb.w	r2, [sp, #4]
 80142dc:	9102      	str	r1, [sp, #8]
 80142de:	2210      	movs	r2, #16
 80142e0:	4619      	mov	r1, r3
 80142e2:	f88d 000c 	strb.w	r0, [sp, #12]
 80142e6:	4620      	mov	r0, r4
 80142e8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80142ec:	9306      	str	r3, [sp, #24]
 80142ee:	f000 fe6f 	bl	8014fd0 <uxr_buffer_submessage_header>
 80142f2:	4669      	mov	r1, sp
 80142f4:	4620      	mov	r0, r4
 80142f6:	f001 fdd1 	bl	8015e9c <uxr_serialize_CREATE_CLIENT_Payload>
 80142fa:	b009      	add	sp, #36	@ 0x24
 80142fc:	bd30      	pop	{r4, r5, pc}
 80142fe:	bf00      	nop
 8014300:	0801fcf0 	.word	0x0801fcf0

08014304 <uxr_buffer_delete_session>:
 8014304:	b510      	push	{r4, lr}
 8014306:	4a0c      	ldr	r2, [pc, #48]	@ (8014338 <uxr_buffer_delete_session+0x34>)
 8014308:	b082      	sub	sp, #8
 801430a:	460c      	mov	r4, r1
 801430c:	2302      	movs	r3, #2
 801430e:	8911      	ldrh	r1, [r2, #8]
 8014310:	80c3      	strh	r3, [r0, #6]
 8014312:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 8014316:	2300      	movs	r3, #0
 8014318:	2204      	movs	r2, #4
 801431a:	f8ad 1006 	strh.w	r1, [sp, #6]
 801431e:	4620      	mov	r0, r4
 8014320:	2103      	movs	r1, #3
 8014322:	f8ad c004 	strh.w	ip, [sp, #4]
 8014326:	f000 fe53 	bl	8014fd0 <uxr_buffer_submessage_header>
 801432a:	a901      	add	r1, sp, #4
 801432c:	4620      	mov	r0, r4
 801432e:	f001 fe59 	bl	8015fe4 <uxr_serialize_DELETE_Payload>
 8014332:	b002      	add	sp, #8
 8014334:	bd10      	pop	{r4, pc}
 8014336:	bf00      	nop
 8014338:	0801fcf0 	.word	0x0801fcf0

0801433c <uxr_read_create_session_status>:
 801433c:	b510      	push	{r4, lr}
 801433e:	460b      	mov	r3, r1
 8014340:	b088      	sub	sp, #32
 8014342:	4604      	mov	r4, r0
 8014344:	a901      	add	r1, sp, #4
 8014346:	4618      	mov	r0, r3
 8014348:	f001 fe5c 	bl	8016004 <uxr_deserialize_STATUS_AGENT_Payload>
 801434c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014350:	7163      	strb	r3, [r4, #5]
 8014352:	b008      	add	sp, #32
 8014354:	bd10      	pop	{r4, pc}
 8014356:	bf00      	nop

08014358 <uxr_read_delete_session_status>:
 8014358:	b510      	push	{r4, lr}
 801435a:	460b      	mov	r3, r1
 801435c:	b082      	sub	sp, #8
 801435e:	4604      	mov	r4, r0
 8014360:	4669      	mov	r1, sp
 8014362:	4618      	mov	r0, r3
 8014364:	f001 fe7e 	bl	8016064 <uxr_deserialize_STATUS_Payload>
 8014368:	88e3      	ldrh	r3, [r4, #6]
 801436a:	2b02      	cmp	r3, #2
 801436c:	d001      	beq.n	8014372 <uxr_read_delete_session_status+0x1a>
 801436e:	b002      	add	sp, #8
 8014370:	bd10      	pop	{r4, pc}
 8014372:	f10d 0002 	add.w	r0, sp, #2
 8014376:	f7fe fe99 	bl	80130ac <uxr_object_id_from_raw>
 801437a:	f8bd 3000 	ldrh.w	r3, [sp]
 801437e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014382:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014386:	bf08      	it	eq
 8014388:	7162      	strbeq	r2, [r4, #5]
 801438a:	b002      	add	sp, #8
 801438c:	bd10      	pop	{r4, pc}
 801438e:	bf00      	nop

08014390 <uxr_stamp_create_session_header>:
 8014390:	b510      	push	{r4, lr}
 8014392:	2208      	movs	r2, #8
 8014394:	b08a      	sub	sp, #40	@ 0x28
 8014396:	4604      	mov	r4, r0
 8014398:	eb0d 0002 	add.w	r0, sp, r2
 801439c:	f7f9 fe60 	bl	800e060 <ucdr_init_buffer>
 80143a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143a4:	9400      	str	r4, [sp, #0]
 80143a6:	2300      	movs	r3, #0
 80143a8:	461a      	mov	r2, r3
 80143aa:	a802      	add	r0, sp, #8
 80143ac:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80143b0:	f001 f80c 	bl	80153cc <uxr_serialize_message_header>
 80143b4:	b00a      	add	sp, #40	@ 0x28
 80143b6:	bd10      	pop	{r4, pc}

080143b8 <uxr_stamp_session_header>:
 80143b8:	b570      	push	{r4, r5, r6, lr}
 80143ba:	4604      	mov	r4, r0
 80143bc:	b08a      	sub	sp, #40	@ 0x28
 80143be:	4616      	mov	r6, r2
 80143c0:	2208      	movs	r2, #8
 80143c2:	eb0d 0002 	add.w	r0, sp, r2
 80143c6:	460d      	mov	r5, r1
 80143c8:	4619      	mov	r1, r3
 80143ca:	f7f9 fe49 	bl	800e060 <ucdr_init_buffer>
 80143ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143d2:	9400      	str	r4, [sp, #0]
 80143d4:	4633      	mov	r3, r6
 80143d6:	462a      	mov	r2, r5
 80143d8:	a802      	add	r0, sp, #8
 80143da:	f000 fff7 	bl	80153cc <uxr_serialize_message_header>
 80143de:	b00a      	add	sp, #40	@ 0x28
 80143e0:	bd70      	pop	{r4, r5, r6, pc}
 80143e2:	bf00      	nop

080143e4 <uxr_read_session_header>:
 80143e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143e6:	4607      	mov	r7, r0
 80143e8:	b085      	sub	sp, #20
 80143ea:	4608      	mov	r0, r1
 80143ec:	460c      	mov	r4, r1
 80143ee:	4615      	mov	r5, r2
 80143f0:	461e      	mov	r6, r3
 80143f2:	f7f9 fe65 	bl	800e0c0 <ucdr_buffer_remaining>
 80143f6:	2808      	cmp	r0, #8
 80143f8:	d802      	bhi.n	8014400 <uxr_read_session_header+0x1c>
 80143fa:	2000      	movs	r0, #0
 80143fc:	b005      	add	sp, #20
 80143fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014400:	ab03      	add	r3, sp, #12
 8014402:	9300      	str	r3, [sp, #0]
 8014404:	462a      	mov	r2, r5
 8014406:	4633      	mov	r3, r6
 8014408:	f10d 010b 	add.w	r1, sp, #11
 801440c:	4620      	mov	r0, r4
 801440e:	f000 fffb 	bl	8015408 <uxr_deserialize_message_header>
 8014412:	783a      	ldrb	r2, [r7, #0]
 8014414:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8014418:	4293      	cmp	r3, r2
 801441a:	d1ee      	bne.n	80143fa <uxr_read_session_header+0x16>
 801441c:	061b      	lsls	r3, r3, #24
 801441e:	d41c      	bmi.n	801445a <uxr_read_session_header+0x76>
 8014420:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8014424:	787b      	ldrb	r3, [r7, #1]
 8014426:	429a      	cmp	r2, r3
 8014428:	d003      	beq.n	8014432 <uxr_read_session_header+0x4e>
 801442a:	2001      	movs	r0, #1
 801442c:	f080 0001 	eor.w	r0, r0, #1
 8014430:	e7e4      	b.n	80143fc <uxr_read_session_header+0x18>
 8014432:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8014436:	78bb      	ldrb	r3, [r7, #2]
 8014438:	429a      	cmp	r2, r3
 801443a:	f107 0102 	add.w	r1, r7, #2
 801443e:	d1f4      	bne.n	801442a <uxr_read_session_header+0x46>
 8014440:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8014444:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014448:	429a      	cmp	r2, r3
 801444a:	d1ee      	bne.n	801442a <uxr_read_session_header+0x46>
 801444c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8014450:	784b      	ldrb	r3, [r1, #1]
 8014452:	429a      	cmp	r2, r3
 8014454:	d1e9      	bne.n	801442a <uxr_read_session_header+0x46>
 8014456:	2000      	movs	r0, #0
 8014458:	e7e8      	b.n	801442c <uxr_read_session_header+0x48>
 801445a:	2001      	movs	r0, #1
 801445c:	e7ce      	b.n	80143fc <uxr_read_session_header+0x18>
 801445e:	bf00      	nop

08014460 <uxr_session_header_offset>:
 8014460:	f990 3000 	ldrsb.w	r3, [r0]
 8014464:	2b00      	cmp	r3, #0
 8014466:	bfb4      	ite	lt
 8014468:	2004      	movlt	r0, #4
 801446a:	2008      	movge	r0, #8
 801446c:	4770      	bx	lr
 801446e:	bf00      	nop

08014470 <uxr_init_base_object_request>:
 8014470:	b510      	push	{r4, lr}
 8014472:	88c3      	ldrh	r3, [r0, #6]
 8014474:	b082      	sub	sp, #8
 8014476:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 801447a:	9101      	str	r1, [sp, #4]
 801447c:	f1a3 010a 	sub.w	r1, r3, #10
 8014480:	b289      	uxth	r1, r1
 8014482:	42a1      	cmp	r1, r4
 8014484:	d80e      	bhi.n	80144a4 <uxr_init_base_object_request+0x34>
 8014486:	3301      	adds	r3, #1
 8014488:	b29c      	uxth	r4, r3
 801448a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801448e:	b2db      	uxtb	r3, r3
 8014490:	80c4      	strh	r4, [r0, #6]
 8014492:	9801      	ldr	r0, [sp, #4]
 8014494:	7011      	strb	r1, [r2, #0]
 8014496:	7053      	strb	r3, [r2, #1]
 8014498:	1c91      	adds	r1, r2, #2
 801449a:	f7fe fe1b 	bl	80130d4 <uxr_object_id_to_raw>
 801449e:	4620      	mov	r0, r4
 80144a0:	b002      	add	sp, #8
 80144a2:	bd10      	pop	{r4, pc}
 80144a4:	230a      	movs	r3, #10
 80144a6:	2100      	movs	r1, #0
 80144a8:	461c      	mov	r4, r3
 80144aa:	e7f1      	b.n	8014490 <uxr_init_base_object_request+0x20>

080144ac <uxr_parse_base_object_request>:
 80144ac:	b570      	push	{r4, r5, r6, lr}
 80144ae:	4604      	mov	r4, r0
 80144b0:	3002      	adds	r0, #2
 80144b2:	460d      	mov	r5, r1
 80144b4:	4616      	mov	r6, r2
 80144b6:	f7fe fdf9 	bl	80130ac <uxr_object_id_from_raw>
 80144ba:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80144be:	8028      	strh	r0, [r5, #0]
 80144c0:	806b      	strh	r3, [r5, #2]
 80144c2:	8823      	ldrh	r3, [r4, #0]
 80144c4:	ba5b      	rev16	r3, r3
 80144c6:	8033      	strh	r3, [r6, #0]
 80144c8:	bd70      	pop	{r4, r5, r6, pc}
 80144ca:	bf00      	nop

080144cc <uxr_init_framing_io>:
 80144cc:	2300      	movs	r3, #0
 80144ce:	7041      	strb	r1, [r0, #1]
 80144d0:	7003      	strb	r3, [r0, #0]
 80144d2:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80144d4:	4770      	bx	lr
 80144d6:	bf00      	nop

080144d8 <uxr_write_framed_msg>:
 80144d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144dc:	f890 c001 	ldrb.w	ip, [r0, #1]
 80144e0:	4617      	mov	r7, r2
 80144e2:	227e      	movs	r2, #126	@ 0x7e
 80144e4:	b085      	sub	sp, #20
 80144e6:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
 80144ea:	f1ac 027d 	sub.w	r2, ip, #125	@ 0x7d
 80144ee:	2a01      	cmp	r2, #1
 80144f0:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 80144f4:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 80144f8:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80144fc:	4604      	mov	r4, r0
 80144fe:	460e      	mov	r6, r1
 8014500:	469a      	mov	sl, r3
 8014502:	f240 812e 	bls.w	8014762 <uxr_write_framed_msg+0x28a>
 8014506:	2003      	movs	r0, #3
 8014508:	2102      	movs	r1, #2
 801450a:	f04f 0905 	mov.w	r9, #5
 801450e:	2204      	movs	r2, #4
 8014510:	4686      	mov	lr, r0
 8014512:	460b      	mov	r3, r1
 8014514:	f884 c039 	strb.w	ip, [r4, #57]	@ 0x39
 8014518:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 801451c:	f1bc 0f01 	cmp.w	ip, #1
 8014520:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014524:	4421      	add	r1, r4
 8014526:	f240 8110 	bls.w	801474a <uxr_write_framed_msg+0x272>
 801452a:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 801452e:	fa5f fc8b 	uxtb.w	ip, fp
 8014532:	f3cb 2107 	ubfx	r1, fp, #8, #8
 8014536:	f1ac 0e7d 	sub.w	lr, ip, #125	@ 0x7d
 801453a:	f1a1 057d 	sub.w	r5, r1, #125	@ 0x7d
 801453e:	f1be 0f01 	cmp.w	lr, #1
 8014542:	f884 0062 	strb.w	r0, [r4, #98]	@ 0x62
 8014546:	b2ed      	uxtb	r5, r5
 8014548:	d94c      	bls.n	80145e4 <uxr_write_framed_msg+0x10c>
 801454a:	4420      	add	r0, r4
 801454c:	2d01      	cmp	r5, #1
 801454e:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8014552:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014556:	d95d      	bls.n	8014614 <uxr_write_framed_msg+0x13c>
 8014558:	18a0      	adds	r0, r4, r2
 801455a:	3201      	adds	r2, #1
 801455c:	b2d2      	uxtb	r2, r2
 801455e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8014562:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014566:	f1bb 0f00 	cmp.w	fp, #0
 801456a:	f000 8108 	beq.w	801477e <uxr_write_framed_msg+0x2a6>
 801456e:	f04f 0c00 	mov.w	ip, #0
 8014572:	4661      	mov	r1, ip
 8014574:	46de      	mov	lr, fp
 8014576:	46e3      	mov	fp, ip
 8014578:	46d4      	mov	ip, sl
 801457a:	468a      	mov	sl, r1
 801457c:	f8df 9208 	ldr.w	r9, [pc, #520]	@ 8014788 <uxr_write_framed_msg+0x2b0>
 8014580:	f81c 300a 	ldrb.w	r3, [ip, sl]
 8014584:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8014588:	2901      	cmp	r1, #1
 801458a:	d91b      	bls.n	80145c4 <uxr_write_framed_msg+0xec>
 801458c:	2a29      	cmp	r2, #41	@ 0x29
 801458e:	d84e      	bhi.n	801462e <uxr_write_framed_msg+0x156>
 8014590:	18a1      	adds	r1, r4, r2
 8014592:	3201      	adds	r2, #1
 8014594:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8014598:	b2d2      	uxtb	r2, r2
 801459a:	ea8b 0303 	eor.w	r3, fp, r3
 801459e:	b2db      	uxtb	r3, r3
 80145a0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80145a4:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 80145a8:	f10a 0a01 	add.w	sl, sl, #1
 80145ac:	ea83 2b1b 	eor.w	fp, r3, fp, lsr #8
 80145b0:	45d6      	cmp	lr, sl
 80145b2:	d95a      	bls.n	801466a <uxr_write_framed_msg+0x192>
 80145b4:	f81c 300a 	ldrb.w	r3, [ip, sl]
 80145b8:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80145bc:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80145c0:	2901      	cmp	r1, #1
 80145c2:	d8e3      	bhi.n	801458c <uxr_write_framed_msg+0xb4>
 80145c4:	1c51      	adds	r1, r2, #1
 80145c6:	b2c9      	uxtb	r1, r1
 80145c8:	2929      	cmp	r1, #41	@ 0x29
 80145ca:	d830      	bhi.n	801462e <uxr_write_framed_msg+0x156>
 80145cc:	18a1      	adds	r1, r4, r2
 80145ce:	f04f 007d 	mov.w	r0, #125	@ 0x7d
 80145d2:	3202      	adds	r2, #2
 80145d4:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80145d8:	f083 0020 	eor.w	r0, r3, #32
 80145dc:	b2d2      	uxtb	r2, r2
 80145de:	f881 0039 	strb.w	r0, [r1, #57]	@ 0x39
 80145e2:	e7da      	b.n	801459a <uxr_write_framed_msg+0xc2>
 80145e4:	eb04 0e00 	add.w	lr, r4, r0
 80145e8:	f08c 0c20 	eor.w	ip, ip, #32
 80145ec:	1c82      	adds	r2, r0, #2
 80145ee:	f88e c039 	strb.w	ip, [lr, #57]	@ 0x39
 80145f2:	b2d2      	uxtb	r2, r2
 80145f4:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80145f8:	2d01      	cmp	r5, #1
 80145fa:	f88e c038 	strb.w	ip, [lr, #56]	@ 0x38
 80145fe:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014602:	d907      	bls.n	8014614 <uxr_write_framed_msg+0x13c>
 8014604:	4422      	add	r2, r4
 8014606:	3003      	adds	r0, #3
 8014608:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
 801460c:	b2c2      	uxtb	r2, r0
 801460e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014612:	e7ac      	b.n	801456e <uxr_write_framed_msg+0x96>
 8014614:	18a0      	adds	r0, r4, r2
 8014616:	f081 0120 	eor.w	r1, r1, #32
 801461a:	3202      	adds	r2, #2
 801461c:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 8014620:	b2d2      	uxtb	r2, r2
 8014622:	217d      	movs	r1, #125	@ 0x7d
 8014624:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8014628:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801462c:	e79f      	b.n	801456e <uxr_write_framed_msg+0x96>
 801462e:	e9cd ba00 	strd	fp, sl, [sp]
 8014632:	2500      	movs	r5, #0
 8014634:	46e2      	mov	sl, ip
 8014636:	46f3      	mov	fp, lr
 8014638:	e000      	b.n	801463c <uxr_write_framed_msg+0x164>
 801463a:	b190      	cbz	r0, 8014662 <uxr_write_framed_msg+0x18a>
 801463c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014640:	1b52      	subs	r2, r2, r5
 8014642:	4643      	mov	r3, r8
 8014644:	4421      	add	r1, r4
 8014646:	4638      	mov	r0, r7
 8014648:	47b0      	blx	r6
 801464a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801464e:	4405      	add	r5, r0
 8014650:	4295      	cmp	r5, r2
 8014652:	d3f2      	bcc.n	801463a <uxr_write_framed_msg+0x162>
 8014654:	46d4      	mov	ip, sl
 8014656:	46de      	mov	lr, fp
 8014658:	f8dd a004 	ldr.w	sl, [sp, #4]
 801465c:	f8dd b000 	ldr.w	fp, [sp]
 8014660:	d06f      	beq.n	8014742 <uxr_write_framed_msg+0x26a>
 8014662:	2000      	movs	r0, #0
 8014664:	b005      	add	sp, #20
 8014666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801466a:	46dc      	mov	ip, fp
 801466c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014670:	f8ad c00c 	strh.w	ip, [sp, #12]
 8014674:	46f3      	mov	fp, lr
 8014676:	fa5f fc8c 	uxtb.w	ip, ip
 801467a:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 801467e:	2b01      	cmp	r3, #1
 8014680:	f04f 0900 	mov.w	r9, #0
 8014684:	f04f 0a7d 	mov.w	sl, #125	@ 0x7d
 8014688:	d930      	bls.n	80146ec <uxr_write_framed_msg+0x214>
 801468a:	2a29      	cmp	r2, #41	@ 0x29
 801468c:	d91c      	bls.n	80146c8 <uxr_write_framed_msg+0x1f0>
 801468e:	2500      	movs	r5, #0
 8014690:	e001      	b.n	8014696 <uxr_write_framed_msg+0x1be>
 8014692:	2800      	cmp	r0, #0
 8014694:	d0e5      	beq.n	8014662 <uxr_write_framed_msg+0x18a>
 8014696:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801469a:	1b52      	subs	r2, r2, r5
 801469c:	4643      	mov	r3, r8
 801469e:	4421      	add	r1, r4
 80146a0:	4638      	mov	r0, r7
 80146a2:	47b0      	blx	r6
 80146a4:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80146a8:	4405      	add	r5, r0
 80146aa:	4295      	cmp	r5, r2
 80146ac:	d3f1      	bcc.n	8014692 <uxr_write_framed_msg+0x1ba>
 80146ae:	d1d8      	bne.n	8014662 <uxr_write_framed_msg+0x18a>
 80146b0:	f109 0310 	add.w	r3, r9, #16
 80146b4:	446b      	add	r3, sp
 80146b6:	2200      	movs	r2, #0
 80146b8:	f813 cc04 	ldrb.w	ip, [r3, #-4]
 80146bc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80146c0:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 80146c4:	2b01      	cmp	r3, #1
 80146c6:	d911      	bls.n	80146ec <uxr_write_framed_msg+0x214>
 80146c8:	18a3      	adds	r3, r4, r2
 80146ca:	3201      	adds	r2, #1
 80146cc:	b2d2      	uxtb	r2, r2
 80146ce:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 80146d2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80146d6:	f1b9 0f00 	cmp.w	r9, #0
 80146da:	d119      	bne.n	8014710 <uxr_write_framed_msg+0x238>
 80146dc:	f89d c00d 	ldrb.w	ip, [sp, #13]
 80146e0:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 80146e4:	2b01      	cmp	r3, #1
 80146e6:	f04f 0901 	mov.w	r9, #1
 80146ea:	d8ce      	bhi.n	801468a <uxr_write_framed_msg+0x1b2>
 80146ec:	1c53      	adds	r3, r2, #1
 80146ee:	b2db      	uxtb	r3, r3
 80146f0:	2b29      	cmp	r3, #41	@ 0x29
 80146f2:	d8cc      	bhi.n	801468e <uxr_write_framed_msg+0x1b6>
 80146f4:	18a3      	adds	r3, r4, r2
 80146f6:	3202      	adds	r2, #2
 80146f8:	f08c 0c20 	eor.w	ip, ip, #32
 80146fc:	b2d2      	uxtb	r2, r2
 80146fe:	f883 c039 	strb.w	ip, [r3, #57]	@ 0x39
 8014702:	f883 a038 	strb.w	sl, [r3, #56]	@ 0x38
 8014706:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801470a:	f1b9 0f00 	cmp.w	r9, #0
 801470e:	d0e5      	beq.n	80146dc <uxr_write_framed_msg+0x204>
 8014710:	2500      	movs	r5, #0
 8014712:	e001      	b.n	8014718 <uxr_write_framed_msg+0x240>
 8014714:	2800      	cmp	r0, #0
 8014716:	d0a4      	beq.n	8014662 <uxr_write_framed_msg+0x18a>
 8014718:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801471c:	1b52      	subs	r2, r2, r5
 801471e:	4643      	mov	r3, r8
 8014720:	4421      	add	r1, r4
 8014722:	4638      	mov	r0, r7
 8014724:	47b0      	blx	r6
 8014726:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801472a:	4405      	add	r5, r0
 801472c:	4295      	cmp	r5, r2
 801472e:	d3f1      	bcc.n	8014714 <uxr_write_framed_msg+0x23c>
 8014730:	d197      	bne.n	8014662 <uxr_write_framed_msg+0x18a>
 8014732:	2300      	movs	r3, #0
 8014734:	fa1f f08b 	uxth.w	r0, fp
 8014738:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801473c:	b005      	add	sp, #20
 801473e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014742:	2300      	movs	r3, #0
 8014744:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014748:	e732      	b.n	80145b0 <uxr_write_framed_msg+0xd8>
 801474a:	44a6      	add	lr, r4
 801474c:	f085 0520 	eor.w	r5, r5, #32
 8014750:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8014754:	4610      	mov	r0, r2
 8014756:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 801475a:	464a      	mov	r2, r9
 801475c:	f88e 5038 	strb.w	r5, [lr, #56]	@ 0x38
 8014760:	e6e5      	b.n	801452e <uxr_write_framed_msg+0x56>
 8014762:	f08c 0c20 	eor.w	ip, ip, #32
 8014766:	f880 c03a 	strb.w	ip, [r0, #58]	@ 0x3a
 801476a:	2103      	movs	r1, #3
 801476c:	2004      	movs	r0, #4
 801476e:	f04f 0906 	mov.w	r9, #6
 8014772:	2205      	movs	r2, #5
 8014774:	4686      	mov	lr, r0
 8014776:	460b      	mov	r3, r1
 8014778:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801477c:	e6ca      	b.n	8014514 <uxr_write_framed_msg+0x3c>
 801477e:	f8ad b00c 	strh.w	fp, [sp, #12]
 8014782:	46dc      	mov	ip, fp
 8014784:	e779      	b.n	801467a <uxr_write_framed_msg+0x1a2>
 8014786:	bf00      	nop
 8014788:	08021240 	.word	0x08021240

0801478c <uxr_framing_read_transport>:
 801478c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014790:	4604      	mov	r4, r0
 8014792:	b083      	sub	sp, #12
 8014794:	461f      	mov	r7, r3
 8014796:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 801479a:	4689      	mov	r9, r1
 801479c:	4692      	mov	sl, r2
 801479e:	f000 fc5d 	bl	801505c <uxr_millis>
 80147a2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80147a6:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 80147aa:	42b3      	cmp	r3, r6
 80147ac:	4680      	mov	r8, r0
 80147ae:	d062      	beq.n	8014876 <uxr_framing_read_transport+0xea>
 80147b0:	d81c      	bhi.n	80147ec <uxr_framing_read_transport+0x60>
 80147b2:	1e75      	subs	r5, r6, #1
 80147b4:	1aed      	subs	r5, r5, r3
 80147b6:	b2ed      	uxtb	r5, r5
 80147b8:	2600      	movs	r6, #0
 80147ba:	455d      	cmp	r5, fp
 80147bc:	d81f      	bhi.n	80147fe <uxr_framing_read_transport+0x72>
 80147be:	19ab      	adds	r3, r5, r6
 80147c0:	455b      	cmp	r3, fp
 80147c2:	bf84      	itt	hi
 80147c4:	ebab 0b05 	subhi.w	fp, fp, r5
 80147c8:	fa5f f68b 	uxtbhi.w	r6, fp
 80147cc:	b9e5      	cbnz	r5, 8014808 <uxr_framing_read_transport+0x7c>
 80147ce:	f04f 0b00 	mov.w	fp, #0
 80147d2:	f000 fc43 	bl	801505c <uxr_millis>
 80147d6:	683b      	ldr	r3, [r7, #0]
 80147d8:	eba0 0108 	sub.w	r1, r0, r8
 80147dc:	1a5b      	subs	r3, r3, r1
 80147de:	4658      	mov	r0, fp
 80147e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80147e4:	603b      	str	r3, [r7, #0]
 80147e6:	b003      	add	sp, #12
 80147e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147ec:	2e00      	cmp	r6, #0
 80147ee:	d04a      	beq.n	8014886 <uxr_framing_read_transport+0xfa>
 80147f0:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 80147f4:	b2dd      	uxtb	r5, r3
 80147f6:	3e01      	subs	r6, #1
 80147f8:	455d      	cmp	r5, fp
 80147fa:	b2f6      	uxtb	r6, r6
 80147fc:	d9df      	bls.n	80147be <uxr_framing_read_transport+0x32>
 80147fe:	fa5f f58b 	uxtb.w	r5, fp
 8014802:	2600      	movs	r6, #0
 8014804:	2d00      	cmp	r5, #0
 8014806:	d0e2      	beq.n	80147ce <uxr_framing_read_transport+0x42>
 8014808:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801480c:	3102      	adds	r1, #2
 801480e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014810:	9300      	str	r3, [sp, #0]
 8014812:	683b      	ldr	r3, [r7, #0]
 8014814:	4421      	add	r1, r4
 8014816:	462a      	mov	r2, r5
 8014818:	4650      	mov	r0, sl
 801481a:	47c8      	blx	r9
 801481c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014820:	4a1b      	ldr	r2, [pc, #108]	@ (8014890 <uxr_framing_read_transport+0x104>)
 8014822:	4403      	add	r3, r0
 8014824:	0859      	lsrs	r1, r3, #1
 8014826:	4683      	mov	fp, r0
 8014828:	fba2 0101 	umull	r0, r1, r2, r1
 801482c:	0889      	lsrs	r1, r1, #2
 801482e:	222a      	movs	r2, #42	@ 0x2a
 8014830:	fb02 3111 	mls	r1, r2, r1, r3
 8014834:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8014838:	f1bb 0f00 	cmp.w	fp, #0
 801483c:	d0c7      	beq.n	80147ce <uxr_framing_read_transport+0x42>
 801483e:	45ab      	cmp	fp, r5
 8014840:	d1c7      	bne.n	80147d2 <uxr_framing_read_transport+0x46>
 8014842:	2e00      	cmp	r6, #0
 8014844:	d0c5      	beq.n	80147d2 <uxr_framing_read_transport+0x46>
 8014846:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014848:	9300      	str	r3, [sp, #0]
 801484a:	3102      	adds	r1, #2
 801484c:	4632      	mov	r2, r6
 801484e:	4421      	add	r1, r4
 8014850:	2300      	movs	r3, #0
 8014852:	4650      	mov	r0, sl
 8014854:	47c8      	blx	r9
 8014856:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801485a:	4a0d      	ldr	r2, [pc, #52]	@ (8014890 <uxr_framing_read_transport+0x104>)
 801485c:	4403      	add	r3, r0
 801485e:	0859      	lsrs	r1, r3, #1
 8014860:	fba2 2101 	umull	r2, r1, r2, r1
 8014864:	0889      	lsrs	r1, r1, #2
 8014866:	222a      	movs	r2, #42	@ 0x2a
 8014868:	fb02 3311 	mls	r3, r2, r1, r3
 801486c:	eb00 0b05 	add.w	fp, r0, r5
 8014870:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8014874:	e7ad      	b.n	80147d2 <uxr_framing_read_transport+0x46>
 8014876:	2600      	movs	r6, #0
 8014878:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801487c:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 801487e:	d9be      	bls.n	80147fe <uxr_framing_read_transport+0x72>
 8014880:	2529      	movs	r5, #41	@ 0x29
 8014882:	2102      	movs	r1, #2
 8014884:	e7c3      	b.n	801480e <uxr_framing_read_transport+0x82>
 8014886:	f1c3 0329 	rsb	r3, r3, #41	@ 0x29
 801488a:	b2dd      	uxtb	r5, r3
 801488c:	e795      	b.n	80147ba <uxr_framing_read_transport+0x2e>
 801488e:	bf00      	nop
 8014890:	30c30c31 	.word	0x30c30c31

08014894 <uxr_read_framed_msg>:
 8014894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014898:	461d      	mov	r5, r3
 801489a:	f890 c02c 	ldrb.w	ip, [r0, #44]	@ 0x2c
 801489e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80148a2:	b085      	sub	sp, #20
 80148a4:	459c      	cmp	ip, r3
 80148a6:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 80148aa:	4604      	mov	r4, r0
 80148ac:	460f      	mov	r7, r1
 80148ae:	4616      	mov	r6, r2
 80148b0:	f000 81ae 	beq.w	8014c10 <uxr_read_framed_msg+0x37c>
 80148b4:	2000      	movs	r0, #0
 80148b6:	4639      	mov	r1, r7
 80148b8:	2800      	cmp	r0, #0
 80148ba:	d138      	bne.n	801492e <uxr_read_framed_msg+0x9a>
 80148bc:	468a      	mov	sl, r1
 80148be:	7823      	ldrb	r3, [r4, #0]
 80148c0:	2b07      	cmp	r3, #7
 80148c2:	d8fd      	bhi.n	80148c0 <uxr_read_framed_msg+0x2c>
 80148c4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80148c8:	0116013b 	.word	0x0116013b
 80148cc:	00cd00f0 	.word	0x00cd00f0
 80148d0:	005a00a0 	.word	0x005a00a0
 80148d4:	00080037 	.word	0x00080037
 80148d8:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80148dc:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80148e0:	4290      	cmp	r0, r2
 80148e2:	f000 8167 	beq.w	8014bb4 <uxr_read_framed_msg+0x320>
 80148e6:	18a3      	adds	r3, r4, r2
 80148e8:	1c57      	adds	r7, r2, #1
 80148ea:	49c7      	ldr	r1, [pc, #796]	@ (8014c08 <uxr_read_framed_msg+0x374>)
 80148ec:	f893 c002 	ldrb.w	ip, [r3, #2]
 80148f0:	087b      	lsrs	r3, r7, #1
 80148f2:	fba1 8303 	umull	r8, r3, r1, r3
 80148f6:	089b      	lsrs	r3, r3, #2
 80148f8:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 80148fc:	fb08 7313 	mls	r3, r8, r3, r7
 8014900:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8014904:	b2df      	uxtb	r7, r3
 8014906:	f000 81b2 	beq.w	8014c6e <uxr_read_framed_msg+0x3da>
 801490a:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801490e:	f884 702d 	strb.w	r7, [r4, #45]	@ 0x2d
 8014912:	f000 8220 	beq.w	8014d56 <uxr_read_framed_msg+0x4c2>
 8014916:	4661      	mov	r1, ip
 8014918:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801491a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801491c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8014920:	b29b      	uxth	r3, r3
 8014922:	2100      	movs	r1, #0
 8014924:	429a      	cmp	r2, r3
 8014926:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8014928:	7021      	strb	r1, [r4, #0]
 801492a:	f000 8198 	beq.w	8014c5e <uxr_read_framed_msg+0x3ca>
 801492e:	2000      	movs	r0, #0
 8014930:	b005      	add	sp, #20
 8014932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014936:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 801493a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801493e:	4297      	cmp	r7, r2
 8014940:	f000 8148 	beq.w	8014bd4 <uxr_read_framed_msg+0x340>
 8014944:	18a3      	adds	r3, r4, r2
 8014946:	f102 0c01 	add.w	ip, r2, #1
 801494a:	49af      	ldr	r1, [pc, #700]	@ (8014c08 <uxr_read_framed_msg+0x374>)
 801494c:	7898      	ldrb	r0, [r3, #2]
 801494e:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8014952:	fba1 8303 	umull	r8, r3, r1, r3
 8014956:	089b      	lsrs	r3, r3, #2
 8014958:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 801495c:	fb08 c313 	mls	r3, r8, r3, ip
 8014960:	287d      	cmp	r0, #125	@ 0x7d
 8014962:	fa5f fc83 	uxtb.w	ip, r3
 8014966:	f000 8194 	beq.w	8014c92 <uxr_read_framed_msg+0x3fe>
 801496a:	287e      	cmp	r0, #126	@ 0x7e
 801496c:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8014970:	f000 8200 	beq.w	8014d74 <uxr_read_framed_msg+0x4e0>
 8014974:	2307      	movs	r3, #7
 8014976:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8014978:	7023      	strb	r3, [r4, #0]
 801497a:	e7a0      	b.n	80148be <uxr_read_framed_msg+0x2a>
 801497c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801497e:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 8014980:	429f      	cmp	r7, r3
 8014982:	f240 8164 	bls.w	8014c4e <uxr_read_framed_msg+0x3ba>
 8014986:	f8df 9280 	ldr.w	r9, [pc, #640]	@ 8014c08 <uxr_read_framed_msg+0x374>
 801498a:	f8cd a00c 	str.w	sl, [sp, #12]
 801498e:	212a      	movs	r1, #42	@ 0x2a
 8014990:	e01f      	b.n	80149d2 <uxr_read_framed_msg+0x13e>
 8014992:	f89a e002 	ldrb.w	lr, [sl, #2]
 8014996:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 801499a:	f000 80ea 	beq.w	8014b72 <uxr_read_framed_msg+0x2de>
 801499e:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 80149a2:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 80149a6:	f000 8142 	beq.w	8014c2e <uxr_read_framed_msg+0x39a>
 80149aa:	f805 e003 	strb.w	lr, [r5, r3]
 80149ae:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 80149b0:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80149b2:	4f96      	ldr	r7, [pc, #600]	@ (8014c0c <uxr_read_framed_msg+0x378>)
 80149b4:	ea80 020e 	eor.w	r2, r0, lr
 80149b8:	b2d2      	uxtb	r2, r2
 80149ba:	3301      	adds	r3, #1
 80149bc:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80149c0:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 80149c2:	b29b      	uxth	r3, r3
 80149c4:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80149c8:	42bb      	cmp	r3, r7
 80149ca:	8663      	strh	r3, [r4, #50]	@ 0x32
 80149cc:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80149ce:	f080 80e7 	bcs.w	8014ba0 <uxr_read_framed_msg+0x30c>
 80149d2:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80149d6:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 80149da:	f100 0c01 	add.w	ip, r0, #1
 80149de:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
 80149e2:	fba9 e20e 	umull	lr, r2, r9, lr
 80149e6:	0892      	lsrs	r2, r2, #2
 80149e8:	fb01 c212 	mls	r2, r1, r2, ip
 80149ec:	4580      	cmp	r8, r0
 80149ee:	eb04 0a00 	add.w	sl, r4, r0
 80149f2:	fa5f fc82 	uxtb.w	ip, r2
 80149f6:	d1cc      	bne.n	8014992 <uxr_read_framed_msg+0xfe>
 80149f8:	42bb      	cmp	r3, r7
 80149fa:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80149fe:	f040 8128 	bne.w	8014c52 <uxr_read_framed_msg+0x3be>
 8014a02:	2306      	movs	r3, #6
 8014a04:	7023      	strb	r3, [r4, #0]
 8014a06:	e75a      	b.n	80148be <uxr_read_framed_msg+0x2a>
 8014a08:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8014a0c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8014a10:	4297      	cmp	r7, r2
 8014a12:	f000 80cf 	beq.w	8014bb4 <uxr_read_framed_msg+0x320>
 8014a16:	18a3      	adds	r3, r4, r2
 8014a18:	f102 0c01 	add.w	ip, r2, #1
 8014a1c:	497a      	ldr	r1, [pc, #488]	@ (8014c08 <uxr_read_framed_msg+0x374>)
 8014a1e:	7898      	ldrb	r0, [r3, #2]
 8014a20:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8014a24:	fba1 8303 	umull	r8, r3, r1, r3
 8014a28:	089b      	lsrs	r3, r3, #2
 8014a2a:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8014a2e:	fb08 c313 	mls	r3, r8, r3, ip
 8014a32:	287d      	cmp	r0, #125	@ 0x7d
 8014a34:	fa5f fc83 	uxtb.w	ip, r3
 8014a38:	f000 813d 	beq.w	8014cb6 <uxr_read_framed_msg+0x422>
 8014a3c:	287e      	cmp	r0, #126	@ 0x7e
 8014a3e:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8014a42:	f000 8188 	beq.w	8014d56 <uxr_read_framed_msg+0x4c2>
 8014a46:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8014a48:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8014a4a:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 8014a4e:	b29b      	uxth	r3, r3
 8014a50:	2200      	movs	r2, #0
 8014a52:	428b      	cmp	r3, r1
 8014a54:	8623      	strh	r3, [r4, #48]	@ 0x30
 8014a56:	8662      	strh	r2, [r4, #50]	@ 0x32
 8014a58:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8014a5a:	f240 80f5 	bls.w	8014c48 <uxr_read_framed_msg+0x3b4>
 8014a5e:	7022      	strb	r2, [r4, #0]
 8014a60:	e765      	b.n	801492e <uxr_read_framed_msg+0x9a>
 8014a62:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8014a66:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8014a6a:	4297      	cmp	r7, r2
 8014a6c:	f000 80b2 	beq.w	8014bd4 <uxr_read_framed_msg+0x340>
 8014a70:	18a3      	adds	r3, r4, r2
 8014a72:	f102 0c01 	add.w	ip, r2, #1
 8014a76:	4964      	ldr	r1, [pc, #400]	@ (8014c08 <uxr_read_framed_msg+0x374>)
 8014a78:	7898      	ldrb	r0, [r3, #2]
 8014a7a:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8014a7e:	fba1 8303 	umull	r8, r3, r1, r3
 8014a82:	089b      	lsrs	r3, r3, #2
 8014a84:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8014a88:	fb08 c313 	mls	r3, r8, r3, ip
 8014a8c:	287d      	cmp	r0, #125	@ 0x7d
 8014a8e:	fa5f fc83 	uxtb.w	ip, r3
 8014a92:	f000 813b 	beq.w	8014d0c <uxr_read_framed_msg+0x478>
 8014a96:	287e      	cmp	r0, #126	@ 0x7e
 8014a98:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8014a9c:	f000 816a 	beq.w	8014d74 <uxr_read_framed_msg+0x4e0>
 8014aa0:	2304      	movs	r3, #4
 8014aa2:	8620      	strh	r0, [r4, #48]	@ 0x30
 8014aa4:	7023      	strb	r3, [r4, #0]
 8014aa6:	e70a      	b.n	80148be <uxr_read_framed_msg+0x2a>
 8014aa8:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8014aac:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8014ab0:	4297      	cmp	r7, r2
 8014ab2:	f000 80c4 	beq.w	8014c3e <uxr_read_framed_msg+0x3aa>
 8014ab6:	18a3      	adds	r3, r4, r2
 8014ab8:	f102 0c01 	add.w	ip, r2, #1
 8014abc:	4952      	ldr	r1, [pc, #328]	@ (8014c08 <uxr_read_framed_msg+0x374>)
 8014abe:	7898      	ldrb	r0, [r3, #2]
 8014ac0:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8014ac4:	fba1 8303 	umull	r8, r3, r1, r3
 8014ac8:	089b      	lsrs	r3, r3, #2
 8014aca:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8014ace:	fb08 c313 	mls	r3, r8, r3, ip
 8014ad2:	287d      	cmp	r0, #125	@ 0x7d
 8014ad4:	fa5f fc83 	uxtb.w	ip, r3
 8014ad8:	f000 812b 	beq.w	8014d32 <uxr_read_framed_msg+0x49e>
 8014adc:	287e      	cmp	r0, #126	@ 0x7e
 8014ade:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8014ae2:	f000 8155 	beq.w	8014d90 <uxr_read_framed_msg+0x4fc>
 8014ae6:	7863      	ldrb	r3, [r4, #1]
 8014ae8:	4283      	cmp	r3, r0
 8014aea:	bf0c      	ite	eq
 8014aec:	2303      	moveq	r3, #3
 8014aee:	2300      	movne	r3, #0
 8014af0:	7023      	strb	r3, [r4, #0]
 8014af2:	e6e4      	b.n	80148be <uxr_read_framed_msg+0x2a>
 8014af4:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8014af8:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8014afc:	2300      	movs	r3, #0
 8014afe:	4290      	cmp	r0, r2
 8014b00:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8014b04:	d06b      	beq.n	8014bde <uxr_read_framed_msg+0x34a>
 8014b06:	18a3      	adds	r3, r4, r2
 8014b08:	f102 0c01 	add.w	ip, r2, #1
 8014b0c:	493e      	ldr	r1, [pc, #248]	@ (8014c08 <uxr_read_framed_msg+0x374>)
 8014b0e:	789f      	ldrb	r7, [r3, #2]
 8014b10:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8014b14:	fba1 8303 	umull	r8, r3, r1, r3
 8014b18:	089b      	lsrs	r3, r3, #2
 8014b1a:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8014b1e:	fb08 c313 	mls	r3, r8, r3, ip
 8014b22:	2f7d      	cmp	r7, #125	@ 0x7d
 8014b24:	fa5f fc83 	uxtb.w	ip, r3
 8014b28:	f000 80d8 	beq.w	8014cdc <uxr_read_framed_msg+0x448>
 8014b2c:	2f7e      	cmp	r7, #126	@ 0x7e
 8014b2e:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8014b32:	f884 702e 	strb.w	r7, [r4, #46]	@ 0x2e
 8014b36:	d052      	beq.n	8014bde <uxr_read_framed_msg+0x34a>
 8014b38:	2302      	movs	r3, #2
 8014b3a:	7023      	strb	r3, [r4, #0]
 8014b3c:	e6bf      	b.n	80148be <uxr_read_framed_msg+0x2a>
 8014b3e:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 8014b42:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8014b46:	4930      	ldr	r1, [pc, #192]	@ (8014c08 <uxr_read_framed_msg+0x374>)
 8014b48:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8014b4c:	e004      	b.n	8014b58 <uxr_read_framed_msg+0x2c4>
 8014b4e:	78bb      	ldrb	r3, [r7, #2]
 8014b50:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014b54:	2b7e      	cmp	r3, #126	@ 0x7e
 8014b56:	d02a      	beq.n	8014bae <uxr_read_framed_msg+0x31a>
 8014b58:	1c50      	adds	r0, r2, #1
 8014b5a:	0843      	lsrs	r3, r0, #1
 8014b5c:	fba1 e303 	umull	lr, r3, r1, r3
 8014b60:	089b      	lsrs	r3, r3, #2
 8014b62:	fb0c 0013 	mls	r0, ip, r3, r0
 8014b66:	4590      	cmp	r8, r2
 8014b68:	eb04 0702 	add.w	r7, r4, r2
 8014b6c:	b2c2      	uxtb	r2, r0
 8014b6e:	d1ee      	bne.n	8014b4e <uxr_read_framed_msg+0x2ba>
 8014b70:	e6dd      	b.n	801492e <uxr_read_framed_msg+0x9a>
 8014b72:	3002      	adds	r0, #2
 8014b74:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8014b78:	eb04 0a02 	add.w	sl, r4, r2
 8014b7c:	fba9 e20e 	umull	lr, r2, r9, lr
 8014b80:	0892      	lsrs	r2, r2, #2
 8014b82:	45e0      	cmp	r8, ip
 8014b84:	fb01 0012 	mls	r0, r1, r2, r0
 8014b88:	f43f af36 	beq.w	80149f8 <uxr_read_framed_msg+0x164>
 8014b8c:	f89a e002 	ldrb.w	lr, [sl, #2]
 8014b90:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8014b94:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8014b98:	d049      	beq.n	8014c2e <uxr_read_framed_msg+0x39a>
 8014b9a:	f08e 0e20 	eor.w	lr, lr, #32
 8014b9e:	e704      	b.n	80149aa <uxr_read_framed_msg+0x116>
 8014ba0:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8014ba4:	f43f af2d 	beq.w	8014a02 <uxr_read_framed_msg+0x16e>
 8014ba8:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8014bac:	d151      	bne.n	8014c52 <uxr_read_framed_msg+0x3be>
 8014bae:	2301      	movs	r3, #1
 8014bb0:	7023      	strb	r3, [r4, #0]
 8014bb2:	e684      	b.n	80148be <uxr_read_framed_msg+0x2a>
 8014bb4:	4651      	mov	r1, sl
 8014bb6:	f8cd b000 	str.w	fp, [sp]
 8014bba:	2301      	movs	r3, #1
 8014bbc:	9301      	str	r3, [sp, #4]
 8014bbe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014bc0:	9103      	str	r1, [sp, #12]
 8014bc2:	4632      	mov	r2, r6
 8014bc4:	4620      	mov	r0, r4
 8014bc6:	f7ff fde1 	bl	801478c <uxr_framing_read_transport>
 8014bca:	fab0 f080 	clz	r0, r0
 8014bce:	9903      	ldr	r1, [sp, #12]
 8014bd0:	0940      	lsrs	r0, r0, #5
 8014bd2:	e671      	b.n	80148b8 <uxr_read_framed_msg+0x24>
 8014bd4:	4651      	mov	r1, sl
 8014bd6:	f8cd b000 	str.w	fp, [sp]
 8014bda:	2302      	movs	r3, #2
 8014bdc:	e7ee      	b.n	8014bbc <uxr_read_framed_msg+0x328>
 8014bde:	2304      	movs	r3, #4
 8014be0:	9301      	str	r3, [sp, #4]
 8014be2:	f8cd b000 	str.w	fp, [sp]
 8014be6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014be8:	4632      	mov	r2, r6
 8014bea:	4651      	mov	r1, sl
 8014bec:	4620      	mov	r0, r4
 8014bee:	f7ff fdcd 	bl	801478c <uxr_framing_read_transport>
 8014bf2:	2800      	cmp	r0, #0
 8014bf4:	f47f ae63 	bne.w	80148be <uxr_read_framed_msg+0x2a>
 8014bf8:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 8014bfc:	387e      	subs	r0, #126	@ 0x7e
 8014bfe:	4651      	mov	r1, sl
 8014c00:	bf18      	it	ne
 8014c02:	2001      	movne	r0, #1
 8014c04:	e658      	b.n	80148b8 <uxr_read_framed_msg+0x24>
 8014c06:	bf00      	nop
 8014c08:	30c30c31 	.word	0x30c30c31
 8014c0c:	08021240 	.word	0x08021240
 8014c10:	2305      	movs	r3, #5
 8014c12:	9301      	str	r3, [sp, #4]
 8014c14:	f8cd b000 	str.w	fp, [sp]
 8014c18:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014c1a:	f7ff fdb7 	bl	801478c <uxr_framing_read_transport>
 8014c1e:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8014c22:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014c26:	429a      	cmp	r2, r3
 8014c28:	f43f ae81 	beq.w	801492e <uxr_read_framed_msg+0x9a>
 8014c2c:	e642      	b.n	80148b4 <uxr_read_framed_msg+0x20>
 8014c2e:	42bb      	cmp	r3, r7
 8014c30:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8014c34:	f43f aee5 	beq.w	8014a02 <uxr_read_framed_msg+0x16e>
 8014c38:	2301      	movs	r3, #1
 8014c3a:	7023      	strb	r3, [r4, #0]
 8014c3c:	e63f      	b.n	80148be <uxr_read_framed_msg+0x2a>
 8014c3e:	4651      	mov	r1, sl
 8014c40:	f8cd b000 	str.w	fp, [sp]
 8014c44:	2303      	movs	r3, #3
 8014c46:	e7b9      	b.n	8014bbc <uxr_read_framed_msg+0x328>
 8014c48:	2305      	movs	r3, #5
 8014c4a:	7023      	strb	r3, [r4, #0]
 8014c4c:	e637      	b.n	80148be <uxr_read_framed_msg+0x2a>
 8014c4e:	f43f aed8 	beq.w	8014a02 <uxr_read_framed_msg+0x16e>
 8014c52:	1afb      	subs	r3, r7, r3
 8014c54:	3302      	adds	r3, #2
 8014c56:	e9cd b300 	strd	fp, r3, [sp]
 8014c5a:	4651      	mov	r1, sl
 8014c5c:	e7af      	b.n	8014bbe <uxr_read_framed_msg+0x32a>
 8014c5e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014c60:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8014c64:	7013      	strb	r3, [r2, #0]
 8014c66:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8014c68:	b005      	add	sp, #20
 8014c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c6e:	4287      	cmp	r7, r0
 8014c70:	d0a0      	beq.n	8014bb4 <uxr_read_framed_msg+0x320>
 8014c72:	4423      	add	r3, r4
 8014c74:	3202      	adds	r2, #2
 8014c76:	7898      	ldrb	r0, [r3, #2]
 8014c78:	0853      	lsrs	r3, r2, #1
 8014c7a:	fba1 e303 	umull	lr, r3, r1, r3
 8014c7e:	089b      	lsrs	r3, r3, #2
 8014c80:	fb08 2213 	mls	r2, r8, r3, r2
 8014c84:	287e      	cmp	r0, #126	@ 0x7e
 8014c86:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014c8a:	d064      	beq.n	8014d56 <uxr_read_framed_msg+0x4c2>
 8014c8c:	f080 0120 	eor.w	r1, r0, #32
 8014c90:	e642      	b.n	8014918 <uxr_read_framed_msg+0x84>
 8014c92:	45bc      	cmp	ip, r7
 8014c94:	d09e      	beq.n	8014bd4 <uxr_read_framed_msg+0x340>
 8014c96:	4423      	add	r3, r4
 8014c98:	3202      	adds	r2, #2
 8014c9a:	7898      	ldrb	r0, [r3, #2]
 8014c9c:	0853      	lsrs	r3, r2, #1
 8014c9e:	fba1 e303 	umull	lr, r3, r1, r3
 8014ca2:	089b      	lsrs	r3, r3, #2
 8014ca4:	fb08 2213 	mls	r2, r8, r3, r2
 8014ca8:	287e      	cmp	r0, #126	@ 0x7e
 8014caa:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014cae:	d061      	beq.n	8014d74 <uxr_read_framed_msg+0x4e0>
 8014cb0:	f080 0020 	eor.w	r0, r0, #32
 8014cb4:	e65e      	b.n	8014974 <uxr_read_framed_msg+0xe0>
 8014cb6:	4567      	cmp	r7, ip
 8014cb8:	f43f af7c 	beq.w	8014bb4 <uxr_read_framed_msg+0x320>
 8014cbc:	4423      	add	r3, r4
 8014cbe:	3202      	adds	r2, #2
 8014cc0:	7898      	ldrb	r0, [r3, #2]
 8014cc2:	0853      	lsrs	r3, r2, #1
 8014cc4:	fba1 e303 	umull	lr, r3, r1, r3
 8014cc8:	089b      	lsrs	r3, r3, #2
 8014cca:	fb08 2213 	mls	r2, r8, r3, r2
 8014cce:	287e      	cmp	r0, #126	@ 0x7e
 8014cd0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014cd4:	d03f      	beq.n	8014d56 <uxr_read_framed_msg+0x4c2>
 8014cd6:	f080 0020 	eor.w	r0, r0, #32
 8014cda:	e6b4      	b.n	8014a46 <uxr_read_framed_msg+0x1b2>
 8014cdc:	4560      	cmp	r0, ip
 8014cde:	f43f af7e 	beq.w	8014bde <uxr_read_framed_msg+0x34a>
 8014ce2:	4423      	add	r3, r4
 8014ce4:	3202      	adds	r2, #2
 8014ce6:	7898      	ldrb	r0, [r3, #2]
 8014ce8:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8014cec:	0853      	lsrs	r3, r2, #1
 8014cee:	fba1 e303 	umull	lr, r3, r1, r3
 8014cf2:	089b      	lsrs	r3, r3, #2
 8014cf4:	fb08 2213 	mls	r2, r8, r3, r2
 8014cf8:	287e      	cmp	r0, #126	@ 0x7e
 8014cfa:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014cfe:	f43f af6e 	beq.w	8014bde <uxr_read_framed_msg+0x34a>
 8014d02:	f080 0020 	eor.w	r0, r0, #32
 8014d06:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8014d0a:	e715      	b.n	8014b38 <uxr_read_framed_msg+0x2a4>
 8014d0c:	4567      	cmp	r7, ip
 8014d0e:	f43f af61 	beq.w	8014bd4 <uxr_read_framed_msg+0x340>
 8014d12:	4423      	add	r3, r4
 8014d14:	3202      	adds	r2, #2
 8014d16:	7898      	ldrb	r0, [r3, #2]
 8014d18:	0853      	lsrs	r3, r2, #1
 8014d1a:	fba1 e303 	umull	lr, r3, r1, r3
 8014d1e:	089b      	lsrs	r3, r3, #2
 8014d20:	fb08 2213 	mls	r2, r8, r3, r2
 8014d24:	287e      	cmp	r0, #126	@ 0x7e
 8014d26:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014d2a:	d023      	beq.n	8014d74 <uxr_read_framed_msg+0x4e0>
 8014d2c:	f080 0020 	eor.w	r0, r0, #32
 8014d30:	e6b6      	b.n	8014aa0 <uxr_read_framed_msg+0x20c>
 8014d32:	45bc      	cmp	ip, r7
 8014d34:	d083      	beq.n	8014c3e <uxr_read_framed_msg+0x3aa>
 8014d36:	4423      	add	r3, r4
 8014d38:	3202      	adds	r2, #2
 8014d3a:	7898      	ldrb	r0, [r3, #2]
 8014d3c:	0853      	lsrs	r3, r2, #1
 8014d3e:	fba1 e303 	umull	lr, r3, r1, r3
 8014d42:	089b      	lsrs	r3, r3, #2
 8014d44:	fb08 2213 	mls	r2, r8, r3, r2
 8014d48:	287e      	cmp	r0, #126	@ 0x7e
 8014d4a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014d4e:	d01f      	beq.n	8014d90 <uxr_read_framed_msg+0x4fc>
 8014d50:	f080 0020 	eor.w	r0, r0, #32
 8014d54:	e6c7      	b.n	8014ae6 <uxr_read_framed_msg+0x252>
 8014d56:	2701      	movs	r7, #1
 8014d58:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014d5a:	f8cd b000 	str.w	fp, [sp]
 8014d5e:	9701      	str	r7, [sp, #4]
 8014d60:	4632      	mov	r2, r6
 8014d62:	4651      	mov	r1, sl
 8014d64:	4620      	mov	r0, r4
 8014d66:	f7ff fd11 	bl	801478c <uxr_framing_read_transport>
 8014d6a:	2800      	cmp	r0, #0
 8014d6c:	f47f ada7 	bne.w	80148be <uxr_read_framed_msg+0x2a>
 8014d70:	7027      	strb	r7, [r4, #0]
 8014d72:	e5a4      	b.n	80148be <uxr_read_framed_msg+0x2a>
 8014d74:	f8cd b000 	str.w	fp, [sp]
 8014d78:	2302      	movs	r3, #2
 8014d7a:	9301      	str	r3, [sp, #4]
 8014d7c:	4632      	mov	r2, r6
 8014d7e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014d80:	4651      	mov	r1, sl
 8014d82:	4620      	mov	r0, r4
 8014d84:	f7ff fd02 	bl	801478c <uxr_framing_read_transport>
 8014d88:	2800      	cmp	r0, #0
 8014d8a:	f47f ad98 	bne.w	80148be <uxr_read_framed_msg+0x2a>
 8014d8e:	e70e      	b.n	8014bae <uxr_read_framed_msg+0x31a>
 8014d90:	f8cd b000 	str.w	fp, [sp]
 8014d94:	2303      	movs	r3, #3
 8014d96:	e7f0      	b.n	8014d7a <uxr_read_framed_msg+0x4e6>

08014d98 <uxr_stream_id>:
 8014d98:	2901      	cmp	r1, #1
 8014d9a:	b082      	sub	sp, #8
 8014d9c:	4603      	mov	r3, r0
 8014d9e:	d011      	beq.n	8014dc4 <uxr_stream_id+0x2c>
 8014da0:	2902      	cmp	r1, #2
 8014da2:	f04f 0c00 	mov.w	ip, #0
 8014da6:	d00a      	beq.n	8014dbe <uxr_stream_id+0x26>
 8014da8:	2000      	movs	r0, #0
 8014daa:	f36c 0007 	bfi	r0, ip, #0, #8
 8014dae:	f363 200f 	bfi	r0, r3, #8, #8
 8014db2:	f361 4017 	bfi	r0, r1, #16, #8
 8014db6:	f362 601f 	bfi	r0, r2, #24, #8
 8014dba:	b002      	add	sp, #8
 8014dbc:	4770      	bx	lr
 8014dbe:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8014dc2:	e7f1      	b.n	8014da8 <uxr_stream_id+0x10>
 8014dc4:	f100 0c01 	add.w	ip, r0, #1
 8014dc8:	fa5f fc8c 	uxtb.w	ip, ip
 8014dcc:	e7ec      	b.n	8014da8 <uxr_stream_id+0x10>
 8014dce:	bf00      	nop

08014dd0 <uxr_stream_id_from_raw>:
 8014dd0:	b082      	sub	sp, #8
 8014dd2:	4603      	mov	r3, r0
 8014dd4:	b130      	cbz	r0, 8014de4 <uxr_stream_id_from_raw+0x14>
 8014dd6:	0602      	lsls	r2, r0, #24
 8014dd8:	d411      	bmi.n	8014dfe <uxr_stream_id_from_raw+0x2e>
 8014dda:	1e42      	subs	r2, r0, #1
 8014ddc:	b2d2      	uxtb	r2, r2
 8014dde:	f04f 0c01 	mov.w	ip, #1
 8014de2:	e001      	b.n	8014de8 <uxr_stream_id_from_raw+0x18>
 8014de4:	4684      	mov	ip, r0
 8014de6:	4602      	mov	r2, r0
 8014de8:	2000      	movs	r0, #0
 8014dea:	f363 0007 	bfi	r0, r3, #0, #8
 8014dee:	f362 200f 	bfi	r0, r2, #8, #8
 8014df2:	f36c 4017 	bfi	r0, ip, #16, #8
 8014df6:	f361 601f 	bfi	r0, r1, #24, #8
 8014dfa:	b002      	add	sp, #8
 8014dfc:	4770      	bx	lr
 8014dfe:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8014e02:	f04f 0c02 	mov.w	ip, #2
 8014e06:	e7ef      	b.n	8014de8 <uxr_stream_id_from_raw+0x18>

08014e08 <uxr_init_stream_storage>:
 8014e08:	2300      	movs	r3, #0
 8014e0a:	7403      	strb	r3, [r0, #16]
 8014e0c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8014e10:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8014e14:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8014e18:	4770      	bx	lr
 8014e1a:	bf00      	nop

08014e1c <uxr_reset_stream_storage>:
 8014e1c:	b570      	push	{r4, r5, r6, lr}
 8014e1e:	7c03      	ldrb	r3, [r0, #16]
 8014e20:	4604      	mov	r4, r0
 8014e22:	b153      	cbz	r3, 8014e3a <uxr_reset_stream_storage+0x1e>
 8014e24:	4606      	mov	r6, r0
 8014e26:	2500      	movs	r5, #0
 8014e28:	4630      	mov	r0, r6
 8014e2a:	f006 fdd5 	bl	801b9d8 <uxr_reset_output_best_effort_stream>
 8014e2e:	7c23      	ldrb	r3, [r4, #16]
 8014e30:	3501      	adds	r5, #1
 8014e32:	42ab      	cmp	r3, r5
 8014e34:	f106 0610 	add.w	r6, r6, #16
 8014e38:	d8f6      	bhi.n	8014e28 <uxr_reset_stream_storage+0xc>
 8014e3a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8014e3e:	b163      	cbz	r3, 8014e5a <uxr_reset_stream_storage+0x3e>
 8014e40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014e44:	2500      	movs	r5, #0
 8014e46:	4630      	mov	r0, r6
 8014e48:	f006 fbd6 	bl	801b5f8 <uxr_reset_input_best_effort_stream>
 8014e4c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8014e50:	3501      	adds	r5, #1
 8014e52:	42ab      	cmp	r3, r5
 8014e54:	f106 0602 	add.w	r6, r6, #2
 8014e58:	d8f5      	bhi.n	8014e46 <uxr_reset_stream_storage+0x2a>
 8014e5a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8014e5e:	b163      	cbz	r3, 8014e7a <uxr_reset_stream_storage+0x5e>
 8014e60:	f104 0618 	add.w	r6, r4, #24
 8014e64:	2500      	movs	r5, #0
 8014e66:	4630      	mov	r0, r6
 8014e68:	f006 fe60 	bl	801bb2c <uxr_reset_output_reliable_stream>
 8014e6c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8014e70:	3501      	adds	r5, #1
 8014e72:	42ab      	cmp	r3, r5
 8014e74:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8014e78:	d8f5      	bhi.n	8014e66 <uxr_reset_stream_storage+0x4a>
 8014e7a:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8014e7e:	b163      	cbz	r3, 8014e9a <uxr_reset_stream_storage+0x7e>
 8014e80:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8014e84:	2500      	movs	r5, #0
 8014e86:	4630      	mov	r0, r6
 8014e88:	f006 fc26 	bl	801b6d8 <uxr_reset_input_reliable_stream>
 8014e8c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8014e90:	3501      	adds	r5, #1
 8014e92:	42ab      	cmp	r3, r5
 8014e94:	f106 0618 	add.w	r6, r6, #24
 8014e98:	d8f5      	bhi.n	8014e86 <uxr_reset_stream_storage+0x6a>
 8014e9a:	bd70      	pop	{r4, r5, r6, pc}

08014e9c <uxr_add_output_best_effort_buffer>:
 8014e9c:	b510      	push	{r4, lr}
 8014e9e:	7c04      	ldrb	r4, [r0, #16]
 8014ea0:	f104 0c01 	add.w	ip, r4, #1
 8014ea4:	b082      	sub	sp, #8
 8014ea6:	f880 c010 	strb.w	ip, [r0, #16]
 8014eaa:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8014eae:	f006 fd89 	bl	801b9c4 <uxr_init_output_best_effort_stream>
 8014eb2:	2201      	movs	r2, #1
 8014eb4:	4611      	mov	r1, r2
 8014eb6:	4620      	mov	r0, r4
 8014eb8:	b002      	add	sp, #8
 8014eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ebe:	f7ff bf6b 	b.w	8014d98 <uxr_stream_id>
 8014ec2:	bf00      	nop

08014ec4 <uxr_add_output_reliable_buffer>:
 8014ec4:	b510      	push	{r4, lr}
 8014ec6:	b084      	sub	sp, #16
 8014ec8:	4684      	mov	ip, r0
 8014eca:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8014ece:	9000      	str	r0, [sp, #0]
 8014ed0:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8014ed4:	2028      	movs	r0, #40	@ 0x28
 8014ed6:	fb00 c004 	mla	r0, r0, r4, ip
 8014eda:	f104 0e01 	add.w	lr, r4, #1
 8014ede:	3018      	adds	r0, #24
 8014ee0:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8014ee4:	f006 fdea 	bl	801babc <uxr_init_output_reliable_stream>
 8014ee8:	2201      	movs	r2, #1
 8014eea:	2102      	movs	r1, #2
 8014eec:	4620      	mov	r0, r4
 8014eee:	b004      	add	sp, #16
 8014ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ef4:	f7ff bf50 	b.w	8014d98 <uxr_stream_id>

08014ef8 <uxr_add_input_best_effort_buffer>:
 8014ef8:	b510      	push	{r4, lr}
 8014efa:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8014efe:	1c62      	adds	r2, r4, #1
 8014f00:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8014f04:	b082      	sub	sp, #8
 8014f06:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8014f0a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8014f0e:	f006 fb6f 	bl	801b5f0 <uxr_init_input_best_effort_stream>
 8014f12:	2200      	movs	r2, #0
 8014f14:	2101      	movs	r1, #1
 8014f16:	4620      	mov	r0, r4
 8014f18:	b002      	add	sp, #8
 8014f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f1e:	f7ff bf3b 	b.w	8014d98 <uxr_stream_id>
 8014f22:	bf00      	nop

08014f24 <uxr_add_input_reliable_buffer>:
 8014f24:	b510      	push	{r4, lr}
 8014f26:	b084      	sub	sp, #16
 8014f28:	4684      	mov	ip, r0
 8014f2a:	9806      	ldr	r0, [sp, #24]
 8014f2c:	9000      	str	r0, [sp, #0]
 8014f2e:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8014f32:	2018      	movs	r0, #24
 8014f34:	fb00 c004 	mla	r0, r0, r4, ip
 8014f38:	f104 0e01 	add.w	lr, r4, #1
 8014f3c:	3048      	adds	r0, #72	@ 0x48
 8014f3e:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8014f42:	f006 fb9d 	bl	801b680 <uxr_init_input_reliable_stream>
 8014f46:	2200      	movs	r2, #0
 8014f48:	2102      	movs	r1, #2
 8014f4a:	4620      	mov	r0, r4
 8014f4c:	b004      	add	sp, #16
 8014f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f52:	f7ff bf21 	b.w	8014d98 <uxr_stream_id>
 8014f56:	bf00      	nop

08014f58 <uxr_get_output_best_effort_stream>:
 8014f58:	7c03      	ldrb	r3, [r0, #16]
 8014f5a:	428b      	cmp	r3, r1
 8014f5c:	bf8c      	ite	hi
 8014f5e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8014f62:	2000      	movls	r0, #0
 8014f64:	4770      	bx	lr
 8014f66:	bf00      	nop

08014f68 <uxr_get_output_reliable_stream>:
 8014f68:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8014f6c:	428b      	cmp	r3, r1
 8014f6e:	bf83      	ittte	hi
 8014f70:	2328      	movhi	r3, #40	@ 0x28
 8014f72:	fb03 0001 	mlahi	r0, r3, r1, r0
 8014f76:	3018      	addhi	r0, #24
 8014f78:	2000      	movls	r0, #0
 8014f7a:	4770      	bx	lr

08014f7c <uxr_get_input_best_effort_stream>:
 8014f7c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8014f80:	428b      	cmp	r3, r1
 8014f82:	bf86      	itte	hi
 8014f84:	3121      	addhi	r1, #33	@ 0x21
 8014f86:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8014f8a:	2000      	movls	r0, #0
 8014f8c:	4770      	bx	lr
 8014f8e:	bf00      	nop

08014f90 <uxr_get_input_reliable_stream>:
 8014f90:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8014f94:	428b      	cmp	r3, r1
 8014f96:	bf83      	ittte	hi
 8014f98:	2318      	movhi	r3, #24
 8014f9a:	fb03 0001 	mlahi	r0, r3, r1, r0
 8014f9e:	3048      	addhi	r0, #72	@ 0x48
 8014fa0:	2000      	movls	r0, #0
 8014fa2:	4770      	bx	lr

08014fa4 <uxr_output_streams_confirmed>:
 8014fa4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8014fa8:	b183      	cbz	r3, 8014fcc <uxr_output_streams_confirmed+0x28>
 8014faa:	b570      	push	{r4, r5, r6, lr}
 8014fac:	4606      	mov	r6, r0
 8014fae:	f100 0518 	add.w	r5, r0, #24
 8014fb2:	2400      	movs	r4, #0
 8014fb4:	e001      	b.n	8014fba <uxr_output_streams_confirmed+0x16>
 8014fb6:	3528      	adds	r5, #40	@ 0x28
 8014fb8:	b138      	cbz	r0, 8014fca <uxr_output_streams_confirmed+0x26>
 8014fba:	4628      	mov	r0, r5
 8014fbc:	f007 f81e 	bl	801bffc <uxr_is_output_up_to_date>
 8014fc0:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8014fc4:	3401      	adds	r4, #1
 8014fc6:	42a3      	cmp	r3, r4
 8014fc8:	d8f5      	bhi.n	8014fb6 <uxr_output_streams_confirmed+0x12>
 8014fca:	bd70      	pop	{r4, r5, r6, pc}
 8014fcc:	2001      	movs	r0, #1
 8014fce:	4770      	bx	lr

08014fd0 <uxr_buffer_submessage_header>:
 8014fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fd2:	4604      	mov	r4, r0
 8014fd4:	460e      	mov	r6, r1
 8014fd6:	2104      	movs	r1, #4
 8014fd8:	4615      	mov	r5, r2
 8014fda:	461f      	mov	r7, r3
 8014fdc:	f7f9 f85a 	bl	800e094 <ucdr_align_to>
 8014fe0:	2301      	movs	r3, #1
 8014fe2:	7523      	strb	r3, [r4, #20]
 8014fe4:	f047 0201 	orr.w	r2, r7, #1
 8014fe8:	462b      	mov	r3, r5
 8014fea:	4631      	mov	r1, r6
 8014fec:	4620      	mov	r0, r4
 8014fee:	f000 fa2b 	bl	8015448 <uxr_serialize_submessage_header>
 8014ff2:	4620      	mov	r0, r4
 8014ff4:	f7f9 f864 	bl	800e0c0 <ucdr_buffer_remaining>
 8014ff8:	42a8      	cmp	r0, r5
 8014ffa:	bf34      	ite	cc
 8014ffc:	2000      	movcc	r0, #0
 8014ffe:	2001      	movcs	r0, #1
 8015000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015002:	bf00      	nop

08015004 <uxr_read_submessage_header>:
 8015004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015008:	4604      	mov	r4, r0
 801500a:	460d      	mov	r5, r1
 801500c:	2104      	movs	r1, #4
 801500e:	4616      	mov	r6, r2
 8015010:	4698      	mov	r8, r3
 8015012:	f7f9 f83f 	bl	800e094 <ucdr_align_to>
 8015016:	4620      	mov	r0, r4
 8015018:	f7f9 f852 	bl	800e0c0 <ucdr_buffer_remaining>
 801501c:	2803      	cmp	r0, #3
 801501e:	bf8c      	ite	hi
 8015020:	2701      	movhi	r7, #1
 8015022:	2700      	movls	r7, #0
 8015024:	d802      	bhi.n	801502c <uxr_read_submessage_header+0x28>
 8015026:	4638      	mov	r0, r7
 8015028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801502c:	4633      	mov	r3, r6
 801502e:	4642      	mov	r2, r8
 8015030:	4620      	mov	r0, r4
 8015032:	4629      	mov	r1, r5
 8015034:	f000 fa1a 	bl	801546c <uxr_deserialize_submessage_header>
 8015038:	f898 3000 	ldrb.w	r3, [r8]
 801503c:	f003 0201 	and.w	r2, r3, #1
 8015040:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8015044:	f888 3000 	strb.w	r3, [r8]
 8015048:	7522      	strb	r2, [r4, #20]
 801504a:	4638      	mov	r0, r7
 801504c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015050 <uxr_submessage_padding>:
 8015050:	f010 0003 	ands.w	r0, r0, #3
 8015054:	bf18      	it	ne
 8015056:	f1c0 0004 	rsbne	r0, r0, #4
 801505a:	4770      	bx	lr

0801505c <uxr_millis>:
 801505c:	b510      	push	{r4, lr}
 801505e:	b084      	sub	sp, #16
 8015060:	4669      	mov	r1, sp
 8015062:	2001      	movs	r0, #1
 8015064:	f7ee fa14 	bl	8003490 <clock_gettime>
 8015068:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 801506c:	4b06      	ldr	r3, [pc, #24]	@ (8015088 <uxr_millis+0x2c>)
 801506e:	fba0 0103 	umull	r0, r1, r0, r3
 8015072:	1900      	adds	r0, r0, r4
 8015074:	fb03 1102 	mla	r1, r3, r2, r1
 8015078:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801507c:	4a03      	ldr	r2, [pc, #12]	@ (801508c <uxr_millis+0x30>)
 801507e:	2300      	movs	r3, #0
 8015080:	f7eb fdf2 	bl	8000c68 <__aeabi_ldivmod>
 8015084:	b004      	add	sp, #16
 8015086:	bd10      	pop	{r4, pc}
 8015088:	3b9aca00 	.word	0x3b9aca00
 801508c:	000f4240 	.word	0x000f4240

08015090 <uxr_nanos>:
 8015090:	b510      	push	{r4, lr}
 8015092:	b084      	sub	sp, #16
 8015094:	4669      	mov	r1, sp
 8015096:	2001      	movs	r0, #1
 8015098:	f7ee f9fa 	bl	8003490 <clock_gettime>
 801509c:	4a06      	ldr	r2, [pc, #24]	@ (80150b8 <uxr_nanos+0x28>)
 801509e:	9800      	ldr	r0, [sp, #0]
 80150a0:	9902      	ldr	r1, [sp, #8]
 80150a2:	9c01      	ldr	r4, [sp, #4]
 80150a4:	fba0 0302 	umull	r0, r3, r0, r2
 80150a8:	1840      	adds	r0, r0, r1
 80150aa:	fb02 3304 	mla	r3, r2, r4, r3
 80150ae:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80150b2:	b004      	add	sp, #16
 80150b4:	bd10      	pop	{r4, pc}
 80150b6:	bf00      	nop
 80150b8:	3b9aca00 	.word	0x3b9aca00

080150bc <on_full_output_buffer_fragmented>:
 80150bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150c0:	460c      	mov	r4, r1
 80150c2:	b08a      	sub	sp, #40	@ 0x28
 80150c4:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 80150c8:	4606      	mov	r6, r0
 80150ca:	f104 0008 	add.w	r0, r4, #8
 80150ce:	f7ff ff4b 	bl	8014f68 <uxr_get_output_reliable_stream>
 80150d2:	4605      	mov	r5, r0
 80150d4:	f006 ff9c 	bl	801c010 <get_available_free_slots>
 80150d8:	b968      	cbnz	r0, 80150f6 <on_full_output_buffer_fragmented+0x3a>
 80150da:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 80150de:	4620      	mov	r0, r4
 80150e0:	4798      	blx	r3
 80150e2:	b918      	cbnz	r0, 80150ec <on_full_output_buffer_fragmented+0x30>
 80150e4:	2001      	movs	r0, #1
 80150e6:	b00a      	add	sp, #40	@ 0x28
 80150e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150ec:	4628      	mov	r0, r5
 80150ee:	f006 ff8f 	bl	801c010 <get_available_free_slots>
 80150f2:	2800      	cmp	r0, #0
 80150f4:	d0f6      	beq.n	80150e4 <on_full_output_buffer_fragmented+0x28>
 80150f6:	892a      	ldrh	r2, [r5, #8]
 80150f8:	686b      	ldr	r3, [r5, #4]
 80150fa:	fbb3 f8f2 	udiv	r8, r3, r2
 80150fe:	89eb      	ldrh	r3, [r5, #14]
 8015100:	7b29      	ldrb	r1, [r5, #12]
 8015102:	fbb3 f0f2 	udiv	r0, r3, r2
 8015106:	fb02 3310 	mls	r3, r2, r0, r3
 801510a:	f5c1 417f 	rsb	r1, r1, #65280	@ 0xff00
 801510e:	b29b      	uxth	r3, r3
 8015110:	fb08 f303 	mul.w	r3, r8, r3
 8015114:	31fc      	adds	r1, #252	@ 0xfc
 8015116:	f1a8 0804 	sub.w	r8, r8, #4
 801511a:	4441      	add	r1, r8
 801511c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8015120:	b28f      	uxth	r7, r1
 8015122:	6829      	ldr	r1, [r5, #0]
 8015124:	3304      	adds	r3, #4
 8015126:	1bd2      	subs	r2, r2, r7
 8015128:	4419      	add	r1, r3
 801512a:	f8c4 20c4 	str.w	r2, [r4, #196]	@ 0xc4
 801512e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015132:	9300      	str	r3, [sp, #0]
 8015134:	4642      	mov	r2, r8
 8015136:	2300      	movs	r3, #0
 8015138:	a802      	add	r0, sp, #8
 801513a:	f7f8 ff7f 	bl	800e03c <ucdr_init_buffer_origin_offset>
 801513e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8015142:	f102 0308 	add.w	r3, r2, #8
 8015146:	4543      	cmp	r3, r8
 8015148:	d928      	bls.n	801519c <on_full_output_buffer_fragmented+0xe0>
 801514a:	463a      	mov	r2, r7
 801514c:	2300      	movs	r3, #0
 801514e:	210d      	movs	r1, #13
 8015150:	a802      	add	r0, sp, #8
 8015152:	f7ff ff3d 	bl	8014fd0 <uxr_buffer_submessage_header>
 8015156:	8929      	ldrh	r1, [r5, #8]
 8015158:	89eb      	ldrh	r3, [r5, #14]
 801515a:	fbb3 f2f1 	udiv	r2, r3, r1
 801515e:	fb01 3312 	mls	r3, r1, r2, r3
 8015162:	b29b      	uxth	r3, r3
 8015164:	686a      	ldr	r2, [r5, #4]
 8015166:	fbb2 f2f1 	udiv	r2, r2, r1
 801516a:	fb02 f303 	mul.w	r3, r2, r3
 801516e:	682a      	ldr	r2, [r5, #0]
 8015170:	f842 8003 	str.w	r8, [r2, r3]
 8015174:	89e8      	ldrh	r0, [r5, #14]
 8015176:	2101      	movs	r1, #1
 8015178:	f006 ff68 	bl	801c04c <uxr_seq_num_add>
 801517c:	9904      	ldr	r1, [sp, #16]
 801517e:	9a03      	ldr	r2, [sp, #12]
 8015180:	81e8      	strh	r0, [r5, #14]
 8015182:	1a52      	subs	r2, r2, r1
 8015184:	4630      	mov	r0, r6
 8015186:	f7f8 ff6b 	bl	800e060 <ucdr_init_buffer>
 801518a:	4630      	mov	r0, r6
 801518c:	4910      	ldr	r1, [pc, #64]	@ (80151d0 <on_full_output_buffer_fragmented+0x114>)
 801518e:	4622      	mov	r2, r4
 8015190:	f7f8 ff3a 	bl	800e008 <ucdr_set_on_full_buffer_callback>
 8015194:	2000      	movs	r0, #0
 8015196:	b00a      	add	sp, #40	@ 0x28
 8015198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801519c:	b292      	uxth	r2, r2
 801519e:	2302      	movs	r3, #2
 80151a0:	210d      	movs	r1, #13
 80151a2:	a802      	add	r0, sp, #8
 80151a4:	f7ff ff14 	bl	8014fd0 <uxr_buffer_submessage_header>
 80151a8:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 80151ac:	8928      	ldrh	r0, [r5, #8]
 80151ae:	f103 0208 	add.w	r2, r3, #8
 80151b2:	89eb      	ldrh	r3, [r5, #14]
 80151b4:	fbb3 f1f0 	udiv	r1, r3, r0
 80151b8:	fb00 3311 	mls	r3, r0, r1, r3
 80151bc:	b29b      	uxth	r3, r3
 80151be:	6869      	ldr	r1, [r5, #4]
 80151c0:	fbb1 f1f0 	udiv	r1, r1, r0
 80151c4:	fb01 f303 	mul.w	r3, r1, r3
 80151c8:	6829      	ldr	r1, [r5, #0]
 80151ca:	50ca      	str	r2, [r1, r3]
 80151cc:	e7d2      	b.n	8015174 <on_full_output_buffer_fragmented+0xb8>
 80151ce:	bf00      	nop
 80151d0:	080150bd 	.word	0x080150bd

080151d4 <uxr_prepare_output_stream>:
 80151d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151d6:	b087      	sub	sp, #28
 80151d8:	2707      	movs	r7, #7
 80151da:	9202      	str	r2, [sp, #8]
 80151dc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80151de:	2500      	movs	r5, #0
 80151e0:	3204      	adds	r2, #4
 80151e2:	e9cd 7500 	strd	r7, r5, [sp]
 80151e6:	461c      	mov	r4, r3
 80151e8:	4606      	mov	r6, r0
 80151ea:	f7ff f807 	bl	80141fc <uxr_prepare_stream_to_write_submessage>
 80151ee:	f080 0201 	eor.w	r2, r0, #1
 80151f2:	b2d2      	uxtb	r2, r2
 80151f4:	75a2      	strb	r2, [r4, #22]
 80151f6:	b112      	cbz	r2, 80151fe <uxr_prepare_output_stream+0x2a>
 80151f8:	4628      	mov	r0, r5
 80151fa:	b007      	add	sp, #28
 80151fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80151fe:	aa05      	add	r2, sp, #20
 8015200:	9902      	ldr	r1, [sp, #8]
 8015202:	4630      	mov	r0, r6
 8015204:	f7ff f934 	bl	8014470 <uxr_init_base_object_request>
 8015208:	a905      	add	r1, sp, #20
 801520a:	4605      	mov	r5, r0
 801520c:	4620      	mov	r0, r4
 801520e:	f000 ffa7 	bl	8016160 <uxr_serialize_WRITE_DATA_Payload_Data>
 8015212:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8015216:	69a6      	ldr	r6, [r4, #24]
 8015218:	69e7      	ldr	r7, [r4, #28]
 801521a:	1a52      	subs	r2, r2, r1
 801521c:	4620      	mov	r0, r4
 801521e:	f7f8 ff1f 	bl	800e060 <ucdr_init_buffer>
 8015222:	4620      	mov	r0, r4
 8015224:	463a      	mov	r2, r7
 8015226:	4631      	mov	r1, r6
 8015228:	f7f8 feee 	bl	800e008 <ucdr_set_on_full_buffer_callback>
 801522c:	4628      	mov	r0, r5
 801522e:	b007      	add	sp, #28
 8015230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015232:	bf00      	nop

08015234 <uxr_prepare_output_stream_fragmented>:
 8015234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015238:	b093      	sub	sp, #76	@ 0x4c
 801523a:	4605      	mov	r5, r0
 801523c:	9107      	str	r1, [sp, #28]
 801523e:	3008      	adds	r0, #8
 8015240:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8015244:	9303      	str	r3, [sp, #12]
 8015246:	9206      	str	r2, [sp, #24]
 8015248:	f7ff fe8e 	bl	8014f68 <uxr_get_output_reliable_stream>
 801524c:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8015250:	2b01      	cmp	r3, #1
 8015252:	f000 8095 	beq.w	8015380 <uxr_prepare_output_stream_fragmented+0x14c>
 8015256:	4604      	mov	r4, r0
 8015258:	2800      	cmp	r0, #0
 801525a:	f000 8091 	beq.w	8015380 <uxr_prepare_output_stream_fragmented+0x14c>
 801525e:	f006 fed7 	bl	801c010 <get_available_free_slots>
 8015262:	2800      	cmp	r0, #0
 8015264:	f000 8087 	beq.w	8015376 <uxr_prepare_output_stream_fragmented+0x142>
 8015268:	8922      	ldrh	r2, [r4, #8]
 801526a:	89e7      	ldrh	r7, [r4, #14]
 801526c:	fbb7 f3f2 	udiv	r3, r7, r2
 8015270:	fb02 7313 	mls	r3, r2, r3, r7
 8015274:	b29b      	uxth	r3, r3
 8015276:	6861      	ldr	r1, [r4, #4]
 8015278:	fbb1 f1f2 	udiv	r1, r1, r2
 801527c:	6822      	ldr	r2, [r4, #0]
 801527e:	9105      	str	r1, [sp, #20]
 8015280:	fb01 f303 	mul.w	r3, r1, r3
 8015284:	3304      	adds	r3, #4
 8015286:	eb02 0903 	add.w	r9, r2, r3
 801528a:	7b23      	ldrb	r3, [r4, #12]
 801528c:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8015290:	4543      	cmp	r3, r8
 8015292:	f1a1 0b04 	sub.w	fp, r1, #4
 8015296:	d37f      	bcc.n	8015398 <uxr_prepare_output_stream_fragmented+0x164>
 8015298:	f1ab 0a04 	sub.w	sl, fp, #4
 801529c:	ebaa 0a03 	sub.w	sl, sl, r3
 80152a0:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80152a2:	f8cd 8000 	str.w	r8, [sp]
 80152a6:	fa1f f38a 	uxth.w	r3, sl
 80152aa:	9304      	str	r3, [sp, #16]
 80152ac:	465a      	mov	r2, fp
 80152ae:	2300      	movs	r3, #0
 80152b0:	4649      	mov	r1, r9
 80152b2:	a80a      	add	r0, sp, #40	@ 0x28
 80152b4:	f7f8 fec2 	bl	800e03c <ucdr_init_buffer_origin_offset>
 80152b8:	f106 0a08 	add.w	sl, r6, #8
 80152bc:	45da      	cmp	sl, fp
 80152be:	bf2c      	ite	cs
 80152c0:	2300      	movcs	r3, #0
 80152c2:	2301      	movcc	r3, #1
 80152c4:	9a04      	ldr	r2, [sp, #16]
 80152c6:	005b      	lsls	r3, r3, #1
 80152c8:	210d      	movs	r1, #13
 80152ca:	a80a      	add	r0, sp, #40	@ 0x28
 80152cc:	f7ff fe80 	bl	8014fd0 <uxr_buffer_submessage_header>
 80152d0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80152d4:	fbb7 f2fc 	udiv	r2, r7, ip
 80152d8:	fb0c 7212 	mls	r2, ip, r2, r7
 80152dc:	b292      	uxth	r2, r2
 80152de:	6863      	ldr	r3, [r4, #4]
 80152e0:	fbb3 f3fc 	udiv	r3, r3, ip
 80152e4:	fb02 f303 	mul.w	r3, r2, r3
 80152e8:	6822      	ldr	r2, [r4, #0]
 80152ea:	2101      	movs	r1, #1
 80152ec:	f842 b003 	str.w	fp, [r2, r3]
 80152f0:	4638      	mov	r0, r7
 80152f2:	f006 feab 	bl	801c04c <uxr_seq_num_add>
 80152f6:	9b05      	ldr	r3, [sp, #20]
 80152f8:	9e03      	ldr	r6, [sp, #12]
 80152fa:	f1a3 0208 	sub.w	r2, r3, #8
 80152fe:	f108 0104 	add.w	r1, r8, #4
 8015302:	4607      	mov	r7, r0
 8015304:	eba2 0208 	sub.w	r2, r2, r8
 8015308:	4449      	add	r1, r9
 801530a:	4630      	mov	r0, r6
 801530c:	f7f8 fea8 	bl	800e060 <ucdr_init_buffer>
 8015310:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8015312:	81e7      	strh	r7, [r4, #14]
 8015314:	1d1a      	adds	r2, r3, #4
 8015316:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 801531a:	bf28      	it	cs
 801531c:	2200      	movcs	r2, #0
 801531e:	2300      	movs	r3, #0
 8015320:	b292      	uxth	r2, r2
 8015322:	2107      	movs	r1, #7
 8015324:	4630      	mov	r0, r6
 8015326:	f7ff fe53 	bl	8014fd0 <uxr_buffer_submessage_header>
 801532a:	9906      	ldr	r1, [sp, #24]
 801532c:	aa09      	add	r2, sp, #36	@ 0x24
 801532e:	4628      	mov	r0, r5
 8015330:	f7ff f89e 	bl	8014470 <uxr_init_base_object_request>
 8015334:	4604      	mov	r4, r0
 8015336:	b320      	cbz	r0, 8015382 <uxr_prepare_output_stream_fragmented+0x14e>
 8015338:	9e03      	ldr	r6, [sp, #12]
 801533a:	a909      	add	r1, sp, #36	@ 0x24
 801533c:	4630      	mov	r0, r6
 801533e:	f000 ff0f 	bl	8016160 <uxr_serialize_WRITE_DATA_Payload_Data>
 8015342:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8015346:	4630      	mov	r0, r6
 8015348:	1a52      	subs	r2, r2, r1
 801534a:	f7f8 fe89 	bl	800e060 <ucdr_init_buffer>
 801534e:	9b07      	ldr	r3, [sp, #28]
 8015350:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8015354:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015356:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 801535a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801535c:	491a      	ldr	r1, [pc, #104]	@ (80153c8 <uxr_prepare_output_stream_fragmented+0x194>)
 801535e:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8015362:	4630      	mov	r0, r6
 8015364:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8015368:	462a      	mov	r2, r5
 801536a:	f7f8 fe4d 	bl	800e008 <ucdr_set_on_full_buffer_callback>
 801536e:	4620      	mov	r0, r4
 8015370:	b013      	add	sp, #76	@ 0x4c
 8015372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015376:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8015378:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801537a:	4628      	mov	r0, r5
 801537c:	4798      	blx	r3
 801537e:	b920      	cbnz	r0, 801538a <uxr_prepare_output_stream_fragmented+0x156>
 8015380:	2400      	movs	r4, #0
 8015382:	4620      	mov	r0, r4
 8015384:	b013      	add	sp, #76	@ 0x4c
 8015386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801538a:	4620      	mov	r0, r4
 801538c:	f006 fe40 	bl	801c010 <get_available_free_slots>
 8015390:	2800      	cmp	r0, #0
 8015392:	f47f af69 	bne.w	8015268 <uxr_prepare_output_stream_fragmented+0x34>
 8015396:	e7f3      	b.n	8015380 <uxr_prepare_output_stream_fragmented+0x14c>
 8015398:	4638      	mov	r0, r7
 801539a:	2101      	movs	r1, #1
 801539c:	f006 fe56 	bl	801c04c <uxr_seq_num_add>
 80153a0:	8921      	ldrh	r1, [r4, #8]
 80153a2:	fbb0 f2f1 	udiv	r2, r0, r1
 80153a6:	fb01 0212 	mls	r2, r1, r2, r0
 80153aa:	b292      	uxth	r2, r2
 80153ac:	6863      	ldr	r3, [r4, #4]
 80153ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80153b2:	fb02 f303 	mul.w	r3, r2, r3
 80153b6:	6822      	ldr	r2, [r4, #0]
 80153b8:	3304      	adds	r3, #4
 80153ba:	eb02 0903 	add.w	r9, r2, r3
 80153be:	4607      	mov	r7, r0
 80153c0:	7b23      	ldrb	r3, [r4, #12]
 80153c2:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80153c6:	e767      	b.n	8015298 <uxr_prepare_output_stream_fragmented+0x64>
 80153c8:	080150bd 	.word	0x080150bd

080153cc <uxr_serialize_message_header>:
 80153cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153d0:	4617      	mov	r7, r2
 80153d2:	4604      	mov	r4, r0
 80153d4:	461e      	mov	r6, r3
 80153d6:	460d      	mov	r5, r1
 80153d8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80153dc:	f7f7 f9ce 	bl	800c77c <ucdr_serialize_uint8_t>
 80153e0:	4639      	mov	r1, r7
 80153e2:	4620      	mov	r0, r4
 80153e4:	f7f7 f9ca 	bl	800c77c <ucdr_serialize_uint8_t>
 80153e8:	4632      	mov	r2, r6
 80153ea:	2101      	movs	r1, #1
 80153ec:	4620      	mov	r0, r4
 80153ee:	f7f7 fa7b 	bl	800c8e8 <ucdr_serialize_endian_uint16_t>
 80153f2:	062b      	lsls	r3, r5, #24
 80153f4:	d501      	bpl.n	80153fa <uxr_serialize_message_header+0x2e>
 80153f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153fa:	4641      	mov	r1, r8
 80153fc:	4620      	mov	r0, r4
 80153fe:	2204      	movs	r2, #4
 8015400:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015404:	f7fd ba38 	b.w	8012878 <ucdr_serialize_array_uint8_t>

08015408 <uxr_deserialize_message_header>:
 8015408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801540c:	4617      	mov	r7, r2
 801540e:	4604      	mov	r4, r0
 8015410:	461e      	mov	r6, r3
 8015412:	460d      	mov	r5, r1
 8015414:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8015418:	f7f7 f9c6 	bl	800c7a8 <ucdr_deserialize_uint8_t>
 801541c:	4639      	mov	r1, r7
 801541e:	4620      	mov	r0, r4
 8015420:	f7f7 f9c2 	bl	800c7a8 <ucdr_deserialize_uint8_t>
 8015424:	4632      	mov	r2, r6
 8015426:	2101      	movs	r1, #1
 8015428:	4620      	mov	r0, r4
 801542a:	f7f7 fb53 	bl	800cad4 <ucdr_deserialize_endian_uint16_t>
 801542e:	f995 3000 	ldrsb.w	r3, [r5]
 8015432:	2b00      	cmp	r3, #0
 8015434:	da01      	bge.n	801543a <uxr_deserialize_message_header+0x32>
 8015436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801543a:	4641      	mov	r1, r8
 801543c:	4620      	mov	r0, r4
 801543e:	2204      	movs	r2, #4
 8015440:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015444:	f7fd ba7c 	b.w	8012940 <ucdr_deserialize_array_uint8_t>

08015448 <uxr_serialize_submessage_header>:
 8015448:	b570      	push	{r4, r5, r6, lr}
 801544a:	4616      	mov	r6, r2
 801544c:	4604      	mov	r4, r0
 801544e:	461d      	mov	r5, r3
 8015450:	f7f7 f994 	bl	800c77c <ucdr_serialize_uint8_t>
 8015454:	4631      	mov	r1, r6
 8015456:	4620      	mov	r0, r4
 8015458:	f7f7 f990 	bl	800c77c <ucdr_serialize_uint8_t>
 801545c:	462a      	mov	r2, r5
 801545e:	4620      	mov	r0, r4
 8015460:	2101      	movs	r1, #1
 8015462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015466:	f7f7 ba3f 	b.w	800c8e8 <ucdr_serialize_endian_uint16_t>
 801546a:	bf00      	nop

0801546c <uxr_deserialize_submessage_header>:
 801546c:	b570      	push	{r4, r5, r6, lr}
 801546e:	4616      	mov	r6, r2
 8015470:	4604      	mov	r4, r0
 8015472:	461d      	mov	r5, r3
 8015474:	f7f7 f998 	bl	800c7a8 <ucdr_deserialize_uint8_t>
 8015478:	4631      	mov	r1, r6
 801547a:	4620      	mov	r0, r4
 801547c:	f7f7 f994 	bl	800c7a8 <ucdr_deserialize_uint8_t>
 8015480:	462a      	mov	r2, r5
 8015482:	4620      	mov	r0, r4
 8015484:	2101      	movs	r1, #1
 8015486:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801548a:	f7f7 bb23 	b.w	800cad4 <ucdr_deserialize_endian_uint16_t>
 801548e:	bf00      	nop

08015490 <uxr_serialize_CLIENT_Representation>:
 8015490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015494:	2204      	movs	r2, #4
 8015496:	460e      	mov	r6, r1
 8015498:	4605      	mov	r5, r0
 801549a:	f7fd f9ed 	bl	8012878 <ucdr_serialize_array_uint8_t>
 801549e:	2202      	movs	r2, #2
 80154a0:	1d31      	adds	r1, r6, #4
 80154a2:	4604      	mov	r4, r0
 80154a4:	4628      	mov	r0, r5
 80154a6:	f7fd f9e7 	bl	8012878 <ucdr_serialize_array_uint8_t>
 80154aa:	2202      	movs	r2, #2
 80154ac:	4004      	ands	r4, r0
 80154ae:	1db1      	adds	r1, r6, #6
 80154b0:	4628      	mov	r0, r5
 80154b2:	f7fd f9e1 	bl	8012878 <ucdr_serialize_array_uint8_t>
 80154b6:	b2e4      	uxtb	r4, r4
 80154b8:	2204      	movs	r2, #4
 80154ba:	4004      	ands	r4, r0
 80154bc:	f106 0108 	add.w	r1, r6, #8
 80154c0:	4628      	mov	r0, r5
 80154c2:	f7fd f9d9 	bl	8012878 <ucdr_serialize_array_uint8_t>
 80154c6:	7b31      	ldrb	r1, [r6, #12]
 80154c8:	ea00 0804 	and.w	r8, r0, r4
 80154cc:	4628      	mov	r0, r5
 80154ce:	f7f7 f955 	bl	800c77c <ucdr_serialize_uint8_t>
 80154d2:	7b71      	ldrb	r1, [r6, #13]
 80154d4:	ea08 0800 	and.w	r8, r8, r0
 80154d8:	4628      	mov	r0, r5
 80154da:	f7f7 f921 	bl	800c720 <ucdr_serialize_bool>
 80154de:	7b73      	ldrb	r3, [r6, #13]
 80154e0:	ea08 0800 	and.w	r8, r8, r0
 80154e4:	b93b      	cbnz	r3, 80154f6 <uxr_serialize_CLIENT_Representation+0x66>
 80154e6:	8bb1      	ldrh	r1, [r6, #28]
 80154e8:	4628      	mov	r0, r5
 80154ea:	f7f7 f973 	bl	800c7d4 <ucdr_serialize_uint16_t>
 80154ee:	ea08 0000 	and.w	r0, r8, r0
 80154f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80154f6:	6931      	ldr	r1, [r6, #16]
 80154f8:	4628      	mov	r0, r5
 80154fa:	f7f7 fb5b 	bl	800cbb4 <ucdr_serialize_uint32_t>
 80154fe:	6933      	ldr	r3, [r6, #16]
 8015500:	b1e3      	cbz	r3, 801553c <uxr_serialize_CLIENT_Representation+0xac>
 8015502:	b1c0      	cbz	r0, 8015536 <uxr_serialize_CLIENT_Representation+0xa6>
 8015504:	4637      	mov	r7, r6
 8015506:	f04f 0900 	mov.w	r9, #0
 801550a:	e001      	b.n	8015510 <uxr_serialize_CLIENT_Representation+0x80>
 801550c:	3708      	adds	r7, #8
 801550e:	b194      	cbz	r4, 8015536 <uxr_serialize_CLIENT_Representation+0xa6>
 8015510:	6979      	ldr	r1, [r7, #20]
 8015512:	4628      	mov	r0, r5
 8015514:	f006 f856 	bl	801b5c4 <ucdr_serialize_string>
 8015518:	69b9      	ldr	r1, [r7, #24]
 801551a:	4604      	mov	r4, r0
 801551c:	4628      	mov	r0, r5
 801551e:	f006 f851 	bl	801b5c4 <ucdr_serialize_string>
 8015522:	6933      	ldr	r3, [r6, #16]
 8015524:	f109 0901 	add.w	r9, r9, #1
 8015528:	4004      	ands	r4, r0
 801552a:	4599      	cmp	r9, r3
 801552c:	b2e4      	uxtb	r4, r4
 801552e:	d3ed      	bcc.n	801550c <uxr_serialize_CLIENT_Representation+0x7c>
 8015530:	ea08 0804 	and.w	r8, r8, r4
 8015534:	e7d7      	b.n	80154e6 <uxr_serialize_CLIENT_Representation+0x56>
 8015536:	f04f 0800 	mov.w	r8, #0
 801553a:	e7d4      	b.n	80154e6 <uxr_serialize_CLIENT_Representation+0x56>
 801553c:	ea08 0800 	and.w	r8, r8, r0
 8015540:	e7d1      	b.n	80154e6 <uxr_serialize_CLIENT_Representation+0x56>
 8015542:	bf00      	nop

08015544 <uxr_deserialize_CLIENT_Representation>:
 8015544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015548:	2204      	movs	r2, #4
 801554a:	460c      	mov	r4, r1
 801554c:	4605      	mov	r5, r0
 801554e:	f7fd f9f7 	bl	8012940 <ucdr_deserialize_array_uint8_t>
 8015552:	2202      	movs	r2, #2
 8015554:	1d21      	adds	r1, r4, #4
 8015556:	4606      	mov	r6, r0
 8015558:	4628      	mov	r0, r5
 801555a:	f7fd f9f1 	bl	8012940 <ucdr_deserialize_array_uint8_t>
 801555e:	2202      	movs	r2, #2
 8015560:	4006      	ands	r6, r0
 8015562:	1da1      	adds	r1, r4, #6
 8015564:	4628      	mov	r0, r5
 8015566:	f7fd f9eb 	bl	8012940 <ucdr_deserialize_array_uint8_t>
 801556a:	b2f6      	uxtb	r6, r6
 801556c:	2204      	movs	r2, #4
 801556e:	4006      	ands	r6, r0
 8015570:	f104 0108 	add.w	r1, r4, #8
 8015574:	4628      	mov	r0, r5
 8015576:	f7fd f9e3 	bl	8012940 <ucdr_deserialize_array_uint8_t>
 801557a:	f104 010c 	add.w	r1, r4, #12
 801557e:	ea00 0706 	and.w	r7, r0, r6
 8015582:	4628      	mov	r0, r5
 8015584:	f7f7 f910 	bl	800c7a8 <ucdr_deserialize_uint8_t>
 8015588:	f104 010d 	add.w	r1, r4, #13
 801558c:	4007      	ands	r7, r0
 801558e:	4628      	mov	r0, r5
 8015590:	f7f7 f8dc 	bl	800c74c <ucdr_deserialize_bool>
 8015594:	7b63      	ldrb	r3, [r4, #13]
 8015596:	4007      	ands	r7, r0
 8015598:	b93b      	cbnz	r3, 80155aa <uxr_deserialize_CLIENT_Representation+0x66>
 801559a:	f104 011c 	add.w	r1, r4, #28
 801559e:	4628      	mov	r0, r5
 80155a0:	f7f7 fa1c 	bl	800c9dc <ucdr_deserialize_uint16_t>
 80155a4:	4038      	ands	r0, r7
 80155a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80155aa:	f104 0110 	add.w	r1, r4, #16
 80155ae:	4628      	mov	r0, r5
 80155b0:	f7f7 fc2a 	bl	800ce08 <ucdr_deserialize_uint32_t>
 80155b4:	6923      	ldr	r3, [r4, #16]
 80155b6:	2b01      	cmp	r3, #1
 80155b8:	d903      	bls.n	80155c2 <uxr_deserialize_CLIENT_Representation+0x7e>
 80155ba:	2301      	movs	r3, #1
 80155bc:	75ab      	strb	r3, [r5, #22]
 80155be:	2700      	movs	r7, #0
 80155c0:	e7eb      	b.n	801559a <uxr_deserialize_CLIENT_Representation+0x56>
 80155c2:	b30b      	cbz	r3, 8015608 <uxr_deserialize_CLIENT_Representation+0xc4>
 80155c4:	2800      	cmp	r0, #0
 80155c6:	d0fa      	beq.n	80155be <uxr_deserialize_CLIENT_Representation+0x7a>
 80155c8:	46a0      	mov	r8, r4
 80155ca:	f04f 0900 	mov.w	r9, #0
 80155ce:	e003      	b.n	80155d8 <uxr_deserialize_CLIENT_Representation+0x94>
 80155d0:	f108 0808 	add.w	r8, r8, #8
 80155d4:	2e00      	cmp	r6, #0
 80155d6:	d0f2      	beq.n	80155be <uxr_deserialize_CLIENT_Representation+0x7a>
 80155d8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80155dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80155e0:	4628      	mov	r0, r5
 80155e2:	f005 fffd 	bl	801b5e0 <ucdr_deserialize_string>
 80155e6:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80155ea:	4606      	mov	r6, r0
 80155ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80155f0:	4628      	mov	r0, r5
 80155f2:	f005 fff5 	bl	801b5e0 <ucdr_deserialize_string>
 80155f6:	6923      	ldr	r3, [r4, #16]
 80155f8:	f109 0901 	add.w	r9, r9, #1
 80155fc:	4006      	ands	r6, r0
 80155fe:	4599      	cmp	r9, r3
 8015600:	b2f6      	uxtb	r6, r6
 8015602:	d3e5      	bcc.n	80155d0 <uxr_deserialize_CLIENT_Representation+0x8c>
 8015604:	4037      	ands	r7, r6
 8015606:	e7c8      	b.n	801559a <uxr_deserialize_CLIENT_Representation+0x56>
 8015608:	4007      	ands	r7, r0
 801560a:	e7c6      	b.n	801559a <uxr_deserialize_CLIENT_Representation+0x56>

0801560c <uxr_serialize_AGENT_Representation>:
 801560c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015610:	2204      	movs	r2, #4
 8015612:	460f      	mov	r7, r1
 8015614:	4605      	mov	r5, r0
 8015616:	f7fd f92f 	bl	8012878 <ucdr_serialize_array_uint8_t>
 801561a:	2202      	movs	r2, #2
 801561c:	4604      	mov	r4, r0
 801561e:	1d39      	adds	r1, r7, #4
 8015620:	4628      	mov	r0, r5
 8015622:	f7fd f929 	bl	8012878 <ucdr_serialize_array_uint8_t>
 8015626:	4020      	ands	r0, r4
 8015628:	2202      	movs	r2, #2
 801562a:	b2c4      	uxtb	r4, r0
 801562c:	1db9      	adds	r1, r7, #6
 801562e:	4628      	mov	r0, r5
 8015630:	f7fd f922 	bl	8012878 <ucdr_serialize_array_uint8_t>
 8015634:	7a39      	ldrb	r1, [r7, #8]
 8015636:	4004      	ands	r4, r0
 8015638:	4628      	mov	r0, r5
 801563a:	f7f7 f871 	bl	800c720 <ucdr_serialize_bool>
 801563e:	7a3b      	ldrb	r3, [r7, #8]
 8015640:	ea00 0804 	and.w	r8, r0, r4
 8015644:	b913      	cbnz	r3, 801564c <uxr_serialize_AGENT_Representation+0x40>
 8015646:	4640      	mov	r0, r8
 8015648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801564c:	68f9      	ldr	r1, [r7, #12]
 801564e:	4628      	mov	r0, r5
 8015650:	f7f7 fab0 	bl	800cbb4 <ucdr_serialize_uint32_t>
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	b303      	cbz	r3, 801569a <uxr_serialize_AGENT_Representation+0x8e>
 8015658:	b1d0      	cbz	r0, 8015690 <uxr_serialize_AGENT_Representation+0x84>
 801565a:	463e      	mov	r6, r7
 801565c:	f04f 0900 	mov.w	r9, #0
 8015660:	e001      	b.n	8015666 <uxr_serialize_AGENT_Representation+0x5a>
 8015662:	3608      	adds	r6, #8
 8015664:	b1a4      	cbz	r4, 8015690 <uxr_serialize_AGENT_Representation+0x84>
 8015666:	6931      	ldr	r1, [r6, #16]
 8015668:	4628      	mov	r0, r5
 801566a:	f005 ffab 	bl	801b5c4 <ucdr_serialize_string>
 801566e:	6971      	ldr	r1, [r6, #20]
 8015670:	4604      	mov	r4, r0
 8015672:	4628      	mov	r0, r5
 8015674:	f005 ffa6 	bl	801b5c4 <ucdr_serialize_string>
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	f109 0901 	add.w	r9, r9, #1
 801567e:	4004      	ands	r4, r0
 8015680:	4599      	cmp	r9, r3
 8015682:	b2e4      	uxtb	r4, r4
 8015684:	d3ed      	bcc.n	8015662 <uxr_serialize_AGENT_Representation+0x56>
 8015686:	ea08 0804 	and.w	r8, r8, r4
 801568a:	4640      	mov	r0, r8
 801568c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015690:	f04f 0800 	mov.w	r8, #0
 8015694:	4640      	mov	r0, r8
 8015696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801569a:	ea08 0800 	and.w	r8, r8, r0
 801569e:	e7d2      	b.n	8015646 <uxr_serialize_AGENT_Representation+0x3a>

080156a0 <uxr_serialize_DATAWRITER_Representation>:
 80156a0:	b570      	push	{r4, r5, r6, lr}
 80156a2:	460d      	mov	r5, r1
 80156a4:	7809      	ldrb	r1, [r1, #0]
 80156a6:	4606      	mov	r6, r0
 80156a8:	f7f7 f868 	bl	800c77c <ucdr_serialize_uint8_t>
 80156ac:	4604      	mov	r4, r0
 80156ae:	b130      	cbz	r0, 80156be <uxr_serialize_DATAWRITER_Representation+0x1e>
 80156b0:	782b      	ldrb	r3, [r5, #0]
 80156b2:	2b02      	cmp	r3, #2
 80156b4:	d00c      	beq.n	80156d0 <uxr_serialize_DATAWRITER_Representation+0x30>
 80156b6:	2b03      	cmp	r3, #3
 80156b8:	d010      	beq.n	80156dc <uxr_serialize_DATAWRITER_Representation+0x3c>
 80156ba:	2b01      	cmp	r3, #1
 80156bc:	d008      	beq.n	80156d0 <uxr_serialize_DATAWRITER_Representation+0x30>
 80156be:	2202      	movs	r2, #2
 80156c0:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80156c4:	4630      	mov	r0, r6
 80156c6:	f7fd f8d7 	bl	8012878 <ucdr_serialize_array_uint8_t>
 80156ca:	4020      	ands	r0, r4
 80156cc:	b2c0      	uxtb	r0, r0
 80156ce:	bd70      	pop	{r4, r5, r6, pc}
 80156d0:	6869      	ldr	r1, [r5, #4]
 80156d2:	4630      	mov	r0, r6
 80156d4:	f005 ff76 	bl	801b5c4 <ucdr_serialize_string>
 80156d8:	4604      	mov	r4, r0
 80156da:	e7f0      	b.n	80156be <uxr_serialize_DATAWRITER_Representation+0x1e>
 80156dc:	4629      	mov	r1, r5
 80156de:	4630      	mov	r0, r6
 80156e0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80156e4:	3104      	adds	r1, #4
 80156e6:	f7fd fa67 	bl	8012bb8 <ucdr_serialize_sequence_uint8_t>
 80156ea:	4604      	mov	r4, r0
 80156ec:	e7e7      	b.n	80156be <uxr_serialize_DATAWRITER_Representation+0x1e>
 80156ee:	bf00      	nop

080156f0 <uxr_serialize_ObjectVariant.part.0>:
 80156f0:	b570      	push	{r4, r5, r6, lr}
 80156f2:	780b      	ldrb	r3, [r1, #0]
 80156f4:	3b01      	subs	r3, #1
 80156f6:	460c      	mov	r4, r1
 80156f8:	4605      	mov	r5, r0
 80156fa:	2b0d      	cmp	r3, #13
 80156fc:	d816      	bhi.n	801572c <uxr_serialize_ObjectVariant.part.0+0x3c>
 80156fe:	e8df f003 	tbb	[pc, r3]
 8015702:	0733      	.short	0x0733
 8015704:	07071717 	.word	0x07071717
 8015708:	0c150707 	.word	0x0c150707
 801570c:	4c510c0c 	.word	0x4c510c0c
 8015710:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015714:	3104      	adds	r1, #4
 8015716:	f7ff bfc3 	b.w	80156a0 <uxr_serialize_DATAWRITER_Representation>
 801571a:	7909      	ldrb	r1, [r1, #4]
 801571c:	f7f7 f82e 	bl	800c77c <ucdr_serialize_uint8_t>
 8015720:	b300      	cbz	r0, 8015764 <uxr_serialize_ObjectVariant.part.0+0x74>
 8015722:	7923      	ldrb	r3, [r4, #4]
 8015724:	2b01      	cmp	r3, #1
 8015726:	d042      	beq.n	80157ae <uxr_serialize_ObjectVariant.part.0+0xbe>
 8015728:	2b02      	cmp	r3, #2
 801572a:	d040      	beq.n	80157ae <uxr_serialize_ObjectVariant.part.0+0xbe>
 801572c:	2001      	movs	r0, #1
 801572e:	bd70      	pop	{r4, r5, r6, pc}
 8015730:	7909      	ldrb	r1, [r1, #4]
 8015732:	f7f7 f823 	bl	800c77c <ucdr_serialize_uint8_t>
 8015736:	4606      	mov	r6, r0
 8015738:	b158      	cbz	r0, 8015752 <uxr_serialize_ObjectVariant.part.0+0x62>
 801573a:	7923      	ldrb	r3, [r4, #4]
 801573c:	2b02      	cmp	r3, #2
 801573e:	d03c      	beq.n	80157ba <uxr_serialize_ObjectVariant.part.0+0xca>
 8015740:	2b03      	cmp	r3, #3
 8015742:	d106      	bne.n	8015752 <uxr_serialize_ObjectVariant.part.0+0x62>
 8015744:	68a2      	ldr	r2, [r4, #8]
 8015746:	f104 010c 	add.w	r1, r4, #12
 801574a:	4628      	mov	r0, r5
 801574c:	f7fd fa34 	bl	8012bb8 <ucdr_serialize_sequence_uint8_t>
 8015750:	4606      	mov	r6, r0
 8015752:	2202      	movs	r2, #2
 8015754:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8015758:	4628      	mov	r0, r5
 801575a:	f7fd f88d 	bl	8012878 <ucdr_serialize_array_uint8_t>
 801575e:	4030      	ands	r0, r6
 8015760:	b2c0      	uxtb	r0, r0
 8015762:	bd70      	pop	{r4, r5, r6, pc}
 8015764:	2000      	movs	r0, #0
 8015766:	bd70      	pop	{r4, r5, r6, pc}
 8015768:	7909      	ldrb	r1, [r1, #4]
 801576a:	f7f7 f807 	bl	800c77c <ucdr_serialize_uint8_t>
 801576e:	4606      	mov	r6, r0
 8015770:	b158      	cbz	r0, 801578a <uxr_serialize_ObjectVariant.part.0+0x9a>
 8015772:	7923      	ldrb	r3, [r4, #4]
 8015774:	2b02      	cmp	r3, #2
 8015776:	d003      	beq.n	8015780 <uxr_serialize_ObjectVariant.part.0+0x90>
 8015778:	2b03      	cmp	r3, #3
 801577a:	d024      	beq.n	80157c6 <uxr_serialize_ObjectVariant.part.0+0xd6>
 801577c:	2b01      	cmp	r3, #1
 801577e:	d104      	bne.n	801578a <uxr_serialize_ObjectVariant.part.0+0x9a>
 8015780:	68a1      	ldr	r1, [r4, #8]
 8015782:	4628      	mov	r0, r5
 8015784:	f005 ff1e 	bl	801b5c4 <ucdr_serialize_string>
 8015788:	4606      	mov	r6, r0
 801578a:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 801578e:	4628      	mov	r0, r5
 8015790:	f7f7 fd48 	bl	800d224 <ucdr_serialize_int16_t>
 8015794:	4030      	ands	r0, r6
 8015796:	b2c0      	uxtb	r0, r0
 8015798:	bd70      	pop	{r4, r5, r6, pc}
 801579a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801579e:	3104      	adds	r1, #4
 80157a0:	f7ff be76 	b.w	8015490 <uxr_serialize_CLIENT_Representation>
 80157a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80157a8:	3104      	adds	r1, #4
 80157aa:	f7ff bf2f 	b.w	801560c <uxr_serialize_AGENT_Representation>
 80157ae:	68a1      	ldr	r1, [r4, #8]
 80157b0:	4628      	mov	r0, r5
 80157b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80157b6:	f005 bf05 	b.w	801b5c4 <ucdr_serialize_string>
 80157ba:	68a1      	ldr	r1, [r4, #8]
 80157bc:	4628      	mov	r0, r5
 80157be:	f005 ff01 	bl	801b5c4 <ucdr_serialize_string>
 80157c2:	4606      	mov	r6, r0
 80157c4:	e7c5      	b.n	8015752 <uxr_serialize_ObjectVariant.part.0+0x62>
 80157c6:	68a2      	ldr	r2, [r4, #8]
 80157c8:	f104 010c 	add.w	r1, r4, #12
 80157cc:	4628      	mov	r0, r5
 80157ce:	f7fd f9f3 	bl	8012bb8 <ucdr_serialize_sequence_uint8_t>
 80157d2:	4606      	mov	r6, r0
 80157d4:	e7d9      	b.n	801578a <uxr_serialize_ObjectVariant.part.0+0x9a>
 80157d6:	bf00      	nop

080157d8 <uxr_deserialize_DATAWRITER_Representation>:
 80157d8:	b570      	push	{r4, r5, r6, lr}
 80157da:	4606      	mov	r6, r0
 80157dc:	460d      	mov	r5, r1
 80157de:	f7f6 ffe3 	bl	800c7a8 <ucdr_deserialize_uint8_t>
 80157e2:	4604      	mov	r4, r0
 80157e4:	b130      	cbz	r0, 80157f4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80157e6:	782b      	ldrb	r3, [r5, #0]
 80157e8:	2b02      	cmp	r3, #2
 80157ea:	d00c      	beq.n	8015806 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80157ec:	2b03      	cmp	r3, #3
 80157ee:	d012      	beq.n	8015816 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80157f0:	2b01      	cmp	r3, #1
 80157f2:	d008      	beq.n	8015806 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80157f4:	2202      	movs	r2, #2
 80157f6:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80157fa:	4630      	mov	r0, r6
 80157fc:	f7fd f8a0 	bl	8012940 <ucdr_deserialize_array_uint8_t>
 8015800:	4020      	ands	r0, r4
 8015802:	b2c0      	uxtb	r0, r0
 8015804:	bd70      	pop	{r4, r5, r6, pc}
 8015806:	6869      	ldr	r1, [r5, #4]
 8015808:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801580c:	4630      	mov	r0, r6
 801580e:	f005 fee7 	bl	801b5e0 <ucdr_deserialize_string>
 8015812:	4604      	mov	r4, r0
 8015814:	e7ee      	b.n	80157f4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8015816:	1d2b      	adds	r3, r5, #4
 8015818:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801581c:	f105 0108 	add.w	r1, r5, #8
 8015820:	4630      	mov	r0, r6
 8015822:	f7fd f9db 	bl	8012bdc <ucdr_deserialize_sequence_uint8_t>
 8015826:	4604      	mov	r4, r0
 8015828:	e7e4      	b.n	80157f4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801582a:	bf00      	nop

0801582c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801582c:	b570      	push	{r4, r5, r6, lr}
 801582e:	460d      	mov	r5, r1
 8015830:	7809      	ldrb	r1, [r1, #0]
 8015832:	4606      	mov	r6, r0
 8015834:	f7f6 ff74 	bl	800c720 <ucdr_serialize_bool>
 8015838:	782b      	ldrb	r3, [r5, #0]
 801583a:	4604      	mov	r4, r0
 801583c:	b94b      	cbnz	r3, 8015852 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801583e:	7a29      	ldrb	r1, [r5, #8]
 8015840:	4630      	mov	r0, r6
 8015842:	f7f6 ff6d 	bl	800c720 <ucdr_serialize_bool>
 8015846:	7a2b      	ldrb	r3, [r5, #8]
 8015848:	4004      	ands	r4, r0
 801584a:	b2e4      	uxtb	r4, r4
 801584c:	b943      	cbnz	r3, 8015860 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801584e:	4620      	mov	r0, r4
 8015850:	bd70      	pop	{r4, r5, r6, pc}
 8015852:	6869      	ldr	r1, [r5, #4]
 8015854:	4630      	mov	r0, r6
 8015856:	f005 feb5 	bl	801b5c4 <ucdr_serialize_string>
 801585a:	4004      	ands	r4, r0
 801585c:	b2e4      	uxtb	r4, r4
 801585e:	e7ee      	b.n	801583e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8015860:	68e9      	ldr	r1, [r5, #12]
 8015862:	4630      	mov	r0, r6
 8015864:	f005 feae 	bl	801b5c4 <ucdr_serialize_string>
 8015868:	4004      	ands	r4, r0
 801586a:	4620      	mov	r0, r4
 801586c:	bd70      	pop	{r4, r5, r6, pc}
 801586e:	bf00      	nop

08015870 <uxr_serialize_OBJK_Topic_Binary>:
 8015870:	b570      	push	{r4, r5, r6, lr}
 8015872:	460d      	mov	r5, r1
 8015874:	6809      	ldr	r1, [r1, #0]
 8015876:	4606      	mov	r6, r0
 8015878:	f005 fea4 	bl	801b5c4 <ucdr_serialize_string>
 801587c:	7929      	ldrb	r1, [r5, #4]
 801587e:	4604      	mov	r4, r0
 8015880:	4630      	mov	r0, r6
 8015882:	f7f6 ff4d 	bl	800c720 <ucdr_serialize_bool>
 8015886:	792b      	ldrb	r3, [r5, #4]
 8015888:	4004      	ands	r4, r0
 801588a:	b2e4      	uxtb	r4, r4
 801588c:	b943      	cbnz	r3, 80158a0 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801588e:	7b29      	ldrb	r1, [r5, #12]
 8015890:	4630      	mov	r0, r6
 8015892:	f7f6 ff45 	bl	800c720 <ucdr_serialize_bool>
 8015896:	7b2b      	ldrb	r3, [r5, #12]
 8015898:	4004      	ands	r4, r0
 801589a:	b93b      	cbnz	r3, 80158ac <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801589c:	4620      	mov	r0, r4
 801589e:	bd70      	pop	{r4, r5, r6, pc}
 80158a0:	68a9      	ldr	r1, [r5, #8]
 80158a2:	4630      	mov	r0, r6
 80158a4:	f005 fe8e 	bl	801b5c4 <ucdr_serialize_string>
 80158a8:	4004      	ands	r4, r0
 80158aa:	e7f0      	b.n	801588e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80158ac:	6929      	ldr	r1, [r5, #16]
 80158ae:	4630      	mov	r0, r6
 80158b0:	f005 fe88 	bl	801b5c4 <ucdr_serialize_string>
 80158b4:	4004      	ands	r4, r0
 80158b6:	b2e4      	uxtb	r4, r4
 80158b8:	4620      	mov	r0, r4
 80158ba:	bd70      	pop	{r4, r5, r6, pc}

080158bc <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80158bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158c0:	460c      	mov	r4, r1
 80158c2:	7809      	ldrb	r1, [r1, #0]
 80158c4:	4606      	mov	r6, r0
 80158c6:	f7f6 ff2b 	bl	800c720 <ucdr_serialize_bool>
 80158ca:	7823      	ldrb	r3, [r4, #0]
 80158cc:	4605      	mov	r5, r0
 80158ce:	b96b      	cbnz	r3, 80158ec <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80158d0:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80158d4:	4630      	mov	r0, r6
 80158d6:	f7f6 ff23 	bl	800c720 <ucdr_serialize_bool>
 80158da:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80158de:	4005      	ands	r5, r0
 80158e0:	b2ed      	uxtb	r5, r5
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d16a      	bne.n	80159bc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x100>
 80158e6:	4628      	mov	r0, r5
 80158e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158ec:	6861      	ldr	r1, [r4, #4]
 80158ee:	4630      	mov	r0, r6
 80158f0:	f7f7 f960 	bl	800cbb4 <ucdr_serialize_uint32_t>
 80158f4:	6863      	ldr	r3, [r4, #4]
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d06c      	beq.n	80159d4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x118>
 80158fa:	2800      	cmp	r0, #0
 80158fc:	d068      	beq.n	80159d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80158fe:	68a1      	ldr	r1, [r4, #8]
 8015900:	4630      	mov	r0, r6
 8015902:	f005 fe5f 	bl	801b5c4 <ucdr_serialize_string>
 8015906:	6862      	ldr	r2, [r4, #4]
 8015908:	2a01      	cmp	r2, #1
 801590a:	d953      	bls.n	80159b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801590c:	2800      	cmp	r0, #0
 801590e:	d05f      	beq.n	80159d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8015910:	68e1      	ldr	r1, [r4, #12]
 8015912:	4630      	mov	r0, r6
 8015914:	f005 fe56 	bl	801b5c4 <ucdr_serialize_string>
 8015918:	6862      	ldr	r2, [r4, #4]
 801591a:	2a02      	cmp	r2, #2
 801591c:	d94a      	bls.n	80159b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801591e:	2800      	cmp	r0, #0
 8015920:	d056      	beq.n	80159d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8015922:	6921      	ldr	r1, [r4, #16]
 8015924:	4630      	mov	r0, r6
 8015926:	f005 fe4d 	bl	801b5c4 <ucdr_serialize_string>
 801592a:	6862      	ldr	r2, [r4, #4]
 801592c:	2a03      	cmp	r2, #3
 801592e:	d941      	bls.n	80159b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015930:	2800      	cmp	r0, #0
 8015932:	d04d      	beq.n	80159d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8015934:	6961      	ldr	r1, [r4, #20]
 8015936:	4630      	mov	r0, r6
 8015938:	f005 fe44 	bl	801b5c4 <ucdr_serialize_string>
 801593c:	6862      	ldr	r2, [r4, #4]
 801593e:	2a04      	cmp	r2, #4
 8015940:	d938      	bls.n	80159b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015942:	2800      	cmp	r0, #0
 8015944:	d044      	beq.n	80159d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8015946:	69a1      	ldr	r1, [r4, #24]
 8015948:	4630      	mov	r0, r6
 801594a:	f005 fe3b 	bl	801b5c4 <ucdr_serialize_string>
 801594e:	6862      	ldr	r2, [r4, #4]
 8015950:	2a05      	cmp	r2, #5
 8015952:	d92f      	bls.n	80159b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015954:	2800      	cmp	r0, #0
 8015956:	d03b      	beq.n	80159d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8015958:	69e1      	ldr	r1, [r4, #28]
 801595a:	4630      	mov	r0, r6
 801595c:	f005 fe32 	bl	801b5c4 <ucdr_serialize_string>
 8015960:	6862      	ldr	r2, [r4, #4]
 8015962:	2a06      	cmp	r2, #6
 8015964:	d926      	bls.n	80159b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015966:	b398      	cbz	r0, 80159d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8015968:	6a21      	ldr	r1, [r4, #32]
 801596a:	4630      	mov	r0, r6
 801596c:	f005 fe2a 	bl	801b5c4 <ucdr_serialize_string>
 8015970:	6862      	ldr	r2, [r4, #4]
 8015972:	2a07      	cmp	r2, #7
 8015974:	d91e      	bls.n	80159b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015976:	b358      	cbz	r0, 80159d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8015978:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801597a:	4630      	mov	r0, r6
 801597c:	f005 fe22 	bl	801b5c4 <ucdr_serialize_string>
 8015980:	6862      	ldr	r2, [r4, #4]
 8015982:	2a08      	cmp	r2, #8
 8015984:	d916      	bls.n	80159b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015986:	b318      	cbz	r0, 80159d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8015988:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801598a:	4630      	mov	r0, r6
 801598c:	f005 fe1a 	bl	801b5c4 <ucdr_serialize_string>
 8015990:	6862      	ldr	r2, [r4, #4]
 8015992:	2a09      	cmp	r2, #9
 8015994:	d90e      	bls.n	80159b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015996:	b1d8      	cbz	r0, 80159d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8015998:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 801599c:	2709      	movs	r7, #9
 801599e:	e000      	b.n	80159a2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80159a0:	b1b0      	cbz	r0, 80159d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80159a2:	f858 1f04 	ldr.w	r1, [r8, #4]!
 80159a6:	4630      	mov	r0, r6
 80159a8:	f005 fe0c 	bl	801b5c4 <ucdr_serialize_string>
 80159ac:	6862      	ldr	r2, [r4, #4]
 80159ae:	3701      	adds	r7, #1
 80159b0:	4297      	cmp	r7, r2
 80159b2:	d3f5      	bcc.n	80159a0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80159b4:	ea05 0300 	and.w	r3, r5, r0
 80159b8:	b2dd      	uxtb	r5, r3
 80159ba:	e789      	b.n	80158d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80159bc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80159be:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80159c2:	4630      	mov	r0, r6
 80159c4:	f7fd f8f8 	bl	8012bb8 <ucdr_serialize_sequence_uint8_t>
 80159c8:	4005      	ands	r5, r0
 80159ca:	4628      	mov	r0, r5
 80159cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159d0:	2500      	movs	r5, #0
 80159d2:	e77d      	b.n	80158d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80159d4:	4028      	ands	r0, r5
 80159d6:	b2c5      	uxtb	r5, r0
 80159d8:	e77a      	b.n	80158d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80159da:	bf00      	nop

080159dc <uxr_serialize_OBJK_Publisher_Binary>:
 80159dc:	b570      	push	{r4, r5, r6, lr}
 80159de:	460d      	mov	r5, r1
 80159e0:	7809      	ldrb	r1, [r1, #0]
 80159e2:	4606      	mov	r6, r0
 80159e4:	f7f6 fe9c 	bl	800c720 <ucdr_serialize_bool>
 80159e8:	782b      	ldrb	r3, [r5, #0]
 80159ea:	4604      	mov	r4, r0
 80159ec:	b94b      	cbnz	r3, 8015a02 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80159ee:	7a29      	ldrb	r1, [r5, #8]
 80159f0:	4630      	mov	r0, r6
 80159f2:	f7f6 fe95 	bl	800c720 <ucdr_serialize_bool>
 80159f6:	7a2b      	ldrb	r3, [r5, #8]
 80159f8:	4004      	ands	r4, r0
 80159fa:	b2e4      	uxtb	r4, r4
 80159fc:	b943      	cbnz	r3, 8015a10 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80159fe:	4620      	mov	r0, r4
 8015a00:	bd70      	pop	{r4, r5, r6, pc}
 8015a02:	6869      	ldr	r1, [r5, #4]
 8015a04:	4630      	mov	r0, r6
 8015a06:	f005 fddd 	bl	801b5c4 <ucdr_serialize_string>
 8015a0a:	4004      	ands	r4, r0
 8015a0c:	b2e4      	uxtb	r4, r4
 8015a0e:	e7ee      	b.n	80159ee <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8015a10:	f105 010c 	add.w	r1, r5, #12
 8015a14:	4630      	mov	r0, r6
 8015a16:	f7ff ff51 	bl	80158bc <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8015a1a:	4004      	ands	r4, r0
 8015a1c:	4620      	mov	r0, r4
 8015a1e:	bd70      	pop	{r4, r5, r6, pc}

08015a20 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8015a20:	b570      	push	{r4, r5, r6, lr}
 8015a22:	460d      	mov	r5, r1
 8015a24:	8809      	ldrh	r1, [r1, #0]
 8015a26:	4606      	mov	r6, r0
 8015a28:	f7f6 fed4 	bl	800c7d4 <ucdr_serialize_uint16_t>
 8015a2c:	78a9      	ldrb	r1, [r5, #2]
 8015a2e:	4604      	mov	r4, r0
 8015a30:	4630      	mov	r0, r6
 8015a32:	f7f6 fe75 	bl	800c720 <ucdr_serialize_bool>
 8015a36:	78ab      	ldrb	r3, [r5, #2]
 8015a38:	4004      	ands	r4, r0
 8015a3a:	b2e4      	uxtb	r4, r4
 8015a3c:	b9b3      	cbnz	r3, 8015a6c <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 8015a3e:	79a9      	ldrb	r1, [r5, #6]
 8015a40:	4630      	mov	r0, r6
 8015a42:	f7f6 fe6d 	bl	800c720 <ucdr_serialize_bool>
 8015a46:	79ab      	ldrb	r3, [r5, #6]
 8015a48:	4004      	ands	r4, r0
 8015a4a:	bb33      	cbnz	r3, 8015a9a <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 8015a4c:	7b29      	ldrb	r1, [r5, #12]
 8015a4e:	4630      	mov	r0, r6
 8015a50:	f7f6 fe66 	bl	800c720 <ucdr_serialize_bool>
 8015a54:	7b2b      	ldrb	r3, [r5, #12]
 8015a56:	4004      	ands	r4, r0
 8015a58:	b9c3      	cbnz	r3, 8015a8c <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 8015a5a:	7d29      	ldrb	r1, [r5, #20]
 8015a5c:	4630      	mov	r0, r6
 8015a5e:	f7f6 fe5f 	bl	800c720 <ucdr_serialize_bool>
 8015a62:	7d2b      	ldrb	r3, [r5, #20]
 8015a64:	4004      	ands	r4, r0
 8015a66:	b93b      	cbnz	r3, 8015a78 <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 8015a68:	4620      	mov	r0, r4
 8015a6a:	bd70      	pop	{r4, r5, r6, pc}
 8015a6c:	88a9      	ldrh	r1, [r5, #4]
 8015a6e:	4630      	mov	r0, r6
 8015a70:	f7f6 feb0 	bl	800c7d4 <ucdr_serialize_uint16_t>
 8015a74:	4004      	ands	r4, r0
 8015a76:	e7e2      	b.n	8015a3e <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 8015a78:	69aa      	ldr	r2, [r5, #24]
 8015a7a:	f105 011c 	add.w	r1, r5, #28
 8015a7e:	4630      	mov	r0, r6
 8015a80:	f7fd f89a 	bl	8012bb8 <ucdr_serialize_sequence_uint8_t>
 8015a84:	4004      	ands	r4, r0
 8015a86:	b2e4      	uxtb	r4, r4
 8015a88:	4620      	mov	r0, r4
 8015a8a:	bd70      	pop	{r4, r5, r6, pc}
 8015a8c:	6929      	ldr	r1, [r5, #16]
 8015a8e:	4630      	mov	r0, r6
 8015a90:	f7f7 f890 	bl	800cbb4 <ucdr_serialize_uint32_t>
 8015a94:	4004      	ands	r4, r0
 8015a96:	b2e4      	uxtb	r4, r4
 8015a98:	e7df      	b.n	8015a5a <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 8015a9a:	68a9      	ldr	r1, [r5, #8]
 8015a9c:	4630      	mov	r0, r6
 8015a9e:	f7f7 f889 	bl	800cbb4 <ucdr_serialize_uint32_t>
 8015aa2:	4004      	ands	r4, r0
 8015aa4:	b2e4      	uxtb	r4, r4
 8015aa6:	e7d1      	b.n	8015a4c <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

08015aa8 <uxr_serialize_OBJK_DataWriter_Binary>:
 8015aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015aaa:	2202      	movs	r2, #2
 8015aac:	460d      	mov	r5, r1
 8015aae:	4606      	mov	r6, r0
 8015ab0:	f7fc fee2 	bl	8012878 <ucdr_serialize_array_uint8_t>
 8015ab4:	78a9      	ldrb	r1, [r5, #2]
 8015ab6:	4604      	mov	r4, r0
 8015ab8:	4630      	mov	r0, r6
 8015aba:	f7f6 fe31 	bl	800c720 <ucdr_serialize_bool>
 8015abe:	78ab      	ldrb	r3, [r5, #2]
 8015ac0:	4004      	ands	r4, r0
 8015ac2:	b2e4      	uxtb	r4, r4
 8015ac4:	b90b      	cbnz	r3, 8015aca <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8015ac6:	4620      	mov	r0, r4
 8015ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015aca:	f105 0108 	add.w	r1, r5, #8
 8015ace:	4630      	mov	r0, r6
 8015ad0:	f7ff ffa6 	bl	8015a20 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8015ad4:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8015ad8:	4607      	mov	r7, r0
 8015ada:	4630      	mov	r0, r6
 8015adc:	f7f6 fe20 	bl	800c720 <ucdr_serialize_bool>
 8015ae0:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8015ae4:	4007      	ands	r7, r0
 8015ae6:	b2ff      	uxtb	r7, r7
 8015ae8:	b913      	cbnz	r3, 8015af0 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8015aea:	403c      	ands	r4, r7
 8015aec:	4620      	mov	r0, r4
 8015aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015af0:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8015af4:	4630      	mov	r0, r6
 8015af6:	f7f7 faa1 	bl	800d03c <ucdr_serialize_uint64_t>
 8015afa:	4007      	ands	r7, r0
 8015afc:	e7f5      	b.n	8015aea <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8015afe:	bf00      	nop

08015b00 <uxr_serialize_OBJK_Replier_Binary>:
 8015b00:	b570      	push	{r4, r5, r6, lr}
 8015b02:	460d      	mov	r5, r1
 8015b04:	6809      	ldr	r1, [r1, #0]
 8015b06:	4606      	mov	r6, r0
 8015b08:	f005 fd5c 	bl	801b5c4 <ucdr_serialize_string>
 8015b0c:	6869      	ldr	r1, [r5, #4]
 8015b0e:	4604      	mov	r4, r0
 8015b10:	4630      	mov	r0, r6
 8015b12:	f005 fd57 	bl	801b5c4 <ucdr_serialize_string>
 8015b16:	68a9      	ldr	r1, [r5, #8]
 8015b18:	4004      	ands	r4, r0
 8015b1a:	4630      	mov	r0, r6
 8015b1c:	f005 fd52 	bl	801b5c4 <ucdr_serialize_string>
 8015b20:	b2e4      	uxtb	r4, r4
 8015b22:	4004      	ands	r4, r0
 8015b24:	7b29      	ldrb	r1, [r5, #12]
 8015b26:	4630      	mov	r0, r6
 8015b28:	f7f6 fdfa 	bl	800c720 <ucdr_serialize_bool>
 8015b2c:	7b2b      	ldrb	r3, [r5, #12]
 8015b2e:	4004      	ands	r4, r0
 8015b30:	b943      	cbnz	r3, 8015b44 <uxr_serialize_OBJK_Replier_Binary+0x44>
 8015b32:	7d29      	ldrb	r1, [r5, #20]
 8015b34:	4630      	mov	r0, r6
 8015b36:	f7f6 fdf3 	bl	800c720 <ucdr_serialize_bool>
 8015b3a:	7d2b      	ldrb	r3, [r5, #20]
 8015b3c:	4004      	ands	r4, r0
 8015b3e:	b93b      	cbnz	r3, 8015b50 <uxr_serialize_OBJK_Replier_Binary+0x50>
 8015b40:	4620      	mov	r0, r4
 8015b42:	bd70      	pop	{r4, r5, r6, pc}
 8015b44:	6929      	ldr	r1, [r5, #16]
 8015b46:	4630      	mov	r0, r6
 8015b48:	f005 fd3c 	bl	801b5c4 <ucdr_serialize_string>
 8015b4c:	4004      	ands	r4, r0
 8015b4e:	e7f0      	b.n	8015b32 <uxr_serialize_OBJK_Replier_Binary+0x32>
 8015b50:	69a9      	ldr	r1, [r5, #24]
 8015b52:	4630      	mov	r0, r6
 8015b54:	f005 fd36 	bl	801b5c4 <ucdr_serialize_string>
 8015b58:	4004      	ands	r4, r0
 8015b5a:	b2e4      	uxtb	r4, r4
 8015b5c:	4620      	mov	r0, r4
 8015b5e:	bd70      	pop	{r4, r5, r6, pc}

08015b60 <uxr_deserialize_ObjectVariant>:
 8015b60:	b570      	push	{r4, r5, r6, lr}
 8015b62:	4605      	mov	r5, r0
 8015b64:	460e      	mov	r6, r1
 8015b66:	f7f6 fe1f 	bl	800c7a8 <ucdr_deserialize_uint8_t>
 8015b6a:	b168      	cbz	r0, 8015b88 <uxr_deserialize_ObjectVariant+0x28>
 8015b6c:	7833      	ldrb	r3, [r6, #0]
 8015b6e:	3b01      	subs	r3, #1
 8015b70:	4604      	mov	r4, r0
 8015b72:	2b0d      	cmp	r3, #13
 8015b74:	d809      	bhi.n	8015b8a <uxr_deserialize_ObjectVariant+0x2a>
 8015b76:	e8df f003 	tbb	[pc, r3]
 8015b7a:	0a64      	.short	0x0a64
 8015b7c:	0a0a2323 	.word	0x0a0a2323
 8015b80:	10080a0a 	.word	0x10080a0a
 8015b84:	5e411010 	.word	0x5e411010
 8015b88:	2400      	movs	r4, #0
 8015b8a:	4620      	mov	r0, r4
 8015b8c:	bd70      	pop	{r4, r5, r6, pc}
 8015b8e:	1d31      	adds	r1, r6, #4
 8015b90:	4628      	mov	r0, r5
 8015b92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b96:	f7ff be1f 	b.w	80157d8 <uxr_deserialize_DATAWRITER_Representation>
 8015b9a:	1d31      	adds	r1, r6, #4
 8015b9c:	4628      	mov	r0, r5
 8015b9e:	f7f6 fe03 	bl	800c7a8 <ucdr_deserialize_uint8_t>
 8015ba2:	2800      	cmp	r0, #0
 8015ba4:	d0f0      	beq.n	8015b88 <uxr_deserialize_ObjectVariant+0x28>
 8015ba6:	7933      	ldrb	r3, [r6, #4]
 8015ba8:	2b01      	cmp	r3, #1
 8015baa:	d001      	beq.n	8015bb0 <uxr_deserialize_ObjectVariant+0x50>
 8015bac:	2b02      	cmp	r3, #2
 8015bae:	d1ec      	bne.n	8015b8a <uxr_deserialize_ObjectVariant+0x2a>
 8015bb0:	68b1      	ldr	r1, [r6, #8]
 8015bb2:	4628      	mov	r0, r5
 8015bb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015bb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015bbc:	f005 bd10 	b.w	801b5e0 <ucdr_deserialize_string>
 8015bc0:	1d31      	adds	r1, r6, #4
 8015bc2:	4628      	mov	r0, r5
 8015bc4:	f7f6 fdf0 	bl	800c7a8 <ucdr_deserialize_uint8_t>
 8015bc8:	4604      	mov	r4, r0
 8015bca:	b170      	cbz	r0, 8015bea <uxr_deserialize_ObjectVariant+0x8a>
 8015bcc:	7933      	ldrb	r3, [r6, #4]
 8015bce:	2b02      	cmp	r3, #2
 8015bd0:	d053      	beq.n	8015c7a <uxr_deserialize_ObjectVariant+0x11a>
 8015bd2:	2b03      	cmp	r3, #3
 8015bd4:	d109      	bne.n	8015bea <uxr_deserialize_ObjectVariant+0x8a>
 8015bd6:	f106 0308 	add.w	r3, r6, #8
 8015bda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015bde:	f106 010c 	add.w	r1, r6, #12
 8015be2:	4628      	mov	r0, r5
 8015be4:	f7fc fffa 	bl	8012bdc <ucdr_deserialize_sequence_uint8_t>
 8015be8:	4604      	mov	r4, r0
 8015bea:	2202      	movs	r2, #2
 8015bec:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8015bf0:	4628      	mov	r0, r5
 8015bf2:	f7fc fea5 	bl	8012940 <ucdr_deserialize_array_uint8_t>
 8015bf6:	4004      	ands	r4, r0
 8015bf8:	b2e4      	uxtb	r4, r4
 8015bfa:	e7c6      	b.n	8015b8a <uxr_deserialize_ObjectVariant+0x2a>
 8015bfc:	2204      	movs	r2, #4
 8015bfe:	18b1      	adds	r1, r6, r2
 8015c00:	4628      	mov	r0, r5
 8015c02:	f7fc fe9d 	bl	8012940 <ucdr_deserialize_array_uint8_t>
 8015c06:	2202      	movs	r2, #2
 8015c08:	f106 0108 	add.w	r1, r6, #8
 8015c0c:	4604      	mov	r4, r0
 8015c0e:	4628      	mov	r0, r5
 8015c10:	f7fc fe96 	bl	8012940 <ucdr_deserialize_array_uint8_t>
 8015c14:	2202      	movs	r2, #2
 8015c16:	4004      	ands	r4, r0
 8015c18:	f106 010a 	add.w	r1, r6, #10
 8015c1c:	4628      	mov	r0, r5
 8015c1e:	f7fc fe8f 	bl	8012940 <ucdr_deserialize_array_uint8_t>
 8015c22:	b2e4      	uxtb	r4, r4
 8015c24:	4603      	mov	r3, r0
 8015c26:	f106 010c 	add.w	r1, r6, #12
 8015c2a:	4628      	mov	r0, r5
 8015c2c:	401c      	ands	r4, r3
 8015c2e:	f7f6 fd8d 	bl	800c74c <ucdr_deserialize_bool>
 8015c32:	4004      	ands	r4, r0
 8015c34:	e7a9      	b.n	8015b8a <uxr_deserialize_ObjectVariant+0x2a>
 8015c36:	1d31      	adds	r1, r6, #4
 8015c38:	4628      	mov	r0, r5
 8015c3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c3e:	f7ff bc81 	b.w	8015544 <uxr_deserialize_CLIENT_Representation>
 8015c42:	1d31      	adds	r1, r6, #4
 8015c44:	4628      	mov	r0, r5
 8015c46:	f7f6 fdaf 	bl	800c7a8 <ucdr_deserialize_uint8_t>
 8015c4a:	4604      	mov	r4, r0
 8015c4c:	b168      	cbz	r0, 8015c6a <uxr_deserialize_ObjectVariant+0x10a>
 8015c4e:	7933      	ldrb	r3, [r6, #4]
 8015c50:	2b02      	cmp	r3, #2
 8015c52:	d003      	beq.n	8015c5c <uxr_deserialize_ObjectVariant+0xfc>
 8015c54:	2b03      	cmp	r3, #3
 8015c56:	d018      	beq.n	8015c8a <uxr_deserialize_ObjectVariant+0x12a>
 8015c58:	2b01      	cmp	r3, #1
 8015c5a:	d106      	bne.n	8015c6a <uxr_deserialize_ObjectVariant+0x10a>
 8015c5c:	68b1      	ldr	r1, [r6, #8]
 8015c5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015c62:	4628      	mov	r0, r5
 8015c64:	f005 fcbc 	bl	801b5e0 <ucdr_deserialize_string>
 8015c68:	4604      	mov	r4, r0
 8015c6a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8015c6e:	4628      	mov	r0, r5
 8015c70:	f7f7 fb62 	bl	800d338 <ucdr_deserialize_int16_t>
 8015c74:	4004      	ands	r4, r0
 8015c76:	b2e4      	uxtb	r4, r4
 8015c78:	e787      	b.n	8015b8a <uxr_deserialize_ObjectVariant+0x2a>
 8015c7a:	68b1      	ldr	r1, [r6, #8]
 8015c7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015c80:	4628      	mov	r0, r5
 8015c82:	f005 fcad 	bl	801b5e0 <ucdr_deserialize_string>
 8015c86:	4604      	mov	r4, r0
 8015c88:	e7af      	b.n	8015bea <uxr_deserialize_ObjectVariant+0x8a>
 8015c8a:	f106 0308 	add.w	r3, r6, #8
 8015c8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015c92:	f106 010c 	add.w	r1, r6, #12
 8015c96:	4628      	mov	r0, r5
 8015c98:	f7fc ffa0 	bl	8012bdc <ucdr_deserialize_sequence_uint8_t>
 8015c9c:	4604      	mov	r4, r0
 8015c9e:	e7e4      	b.n	8015c6a <uxr_deserialize_ObjectVariant+0x10a>

08015ca0 <uxr_deserialize_BaseObjectRequest>:
 8015ca0:	b570      	push	{r4, r5, r6, lr}
 8015ca2:	2202      	movs	r2, #2
 8015ca4:	4605      	mov	r5, r0
 8015ca6:	460e      	mov	r6, r1
 8015ca8:	f7fc fe4a 	bl	8012940 <ucdr_deserialize_array_uint8_t>
 8015cac:	2202      	movs	r2, #2
 8015cae:	4604      	mov	r4, r0
 8015cb0:	18b1      	adds	r1, r6, r2
 8015cb2:	4628      	mov	r0, r5
 8015cb4:	f7fc fe44 	bl	8012940 <ucdr_deserialize_array_uint8_t>
 8015cb8:	4020      	ands	r0, r4
 8015cba:	b2c0      	uxtb	r0, r0
 8015cbc:	bd70      	pop	{r4, r5, r6, pc}
 8015cbe:	bf00      	nop

08015cc0 <uxr_serialize_ActivityInfoVariant>:
 8015cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015cc4:	460d      	mov	r5, r1
 8015cc6:	7809      	ldrb	r1, [r1, #0]
 8015cc8:	4606      	mov	r6, r0
 8015cca:	f7f6 fd57 	bl	800c77c <ucdr_serialize_uint8_t>
 8015cce:	b130      	cbz	r0, 8015cde <uxr_serialize_ActivityInfoVariant+0x1e>
 8015cd0:	782b      	ldrb	r3, [r5, #0]
 8015cd2:	2b06      	cmp	r3, #6
 8015cd4:	d014      	beq.n	8015d00 <uxr_serialize_ActivityInfoVariant+0x40>
 8015cd6:	2b0d      	cmp	r3, #13
 8015cd8:	d019      	beq.n	8015d0e <uxr_serialize_ActivityInfoVariant+0x4e>
 8015cda:	2b05      	cmp	r3, #5
 8015cdc:	d001      	beq.n	8015ce2 <uxr_serialize_ActivityInfoVariant+0x22>
 8015cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ce2:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8015ce6:	4630      	mov	r0, r6
 8015ce8:	f7f7 fa9c 	bl	800d224 <ucdr_serialize_int16_t>
 8015cec:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8015cf0:	4604      	mov	r4, r0
 8015cf2:	4630      	mov	r0, r6
 8015cf4:	f7f7 f9a2 	bl	800d03c <ucdr_serialize_uint64_t>
 8015cf8:	4020      	ands	r0, r4
 8015cfa:	b2c0      	uxtb	r0, r0
 8015cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015d00:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8015d04:	4630      	mov	r0, r6
 8015d06:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d0a:	f7f7 ba8b 	b.w	800d224 <ucdr_serialize_int16_t>
 8015d0e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8015d12:	4630      	mov	r0, r6
 8015d14:	f7f7 fa86 	bl	800d224 <ucdr_serialize_int16_t>
 8015d18:	68e9      	ldr	r1, [r5, #12]
 8015d1a:	4681      	mov	r9, r0
 8015d1c:	4630      	mov	r0, r6
 8015d1e:	f7f6 ff49 	bl	800cbb4 <ucdr_serialize_uint32_t>
 8015d22:	68eb      	ldr	r3, [r5, #12]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d051      	beq.n	8015dcc <uxr_serialize_ActivityInfoVariant+0x10c>
 8015d28:	b1e8      	cbz	r0, 8015d66 <uxr_serialize_ActivityInfoVariant+0xa6>
 8015d2a:	f105 0714 	add.w	r7, r5, #20
 8015d2e:	f04f 0800 	mov.w	r8, #0
 8015d32:	f817 1c04 	ldrb.w	r1, [r7, #-4]
 8015d36:	4630      	mov	r0, r6
 8015d38:	f7f6 fd20 	bl	800c77c <ucdr_serialize_uint8_t>
 8015d3c:	b198      	cbz	r0, 8015d66 <uxr_serialize_ActivityInfoVariant+0xa6>
 8015d3e:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8015d42:	2b03      	cmp	r3, #3
 8015d44:	d839      	bhi.n	8015dba <uxr_serialize_ActivityInfoVariant+0xfa>
 8015d46:	e8df f003 	tbb	[pc, r3]
 8015d4a:	1e2b      	.short	0x1e2b
 8015d4c:	0211      	.short	0x0211
 8015d4e:	6839      	ldr	r1, [r7, #0]
 8015d50:	4630      	mov	r0, r6
 8015d52:	f005 fc37 	bl	801b5c4 <ucdr_serialize_string>
 8015d56:	68eb      	ldr	r3, [r5, #12]
 8015d58:	f108 0801 	add.w	r8, r8, #1
 8015d5c:	4598      	cmp	r8, r3
 8015d5e:	d231      	bcs.n	8015dc4 <uxr_serialize_ActivityInfoVariant+0x104>
 8015d60:	3718      	adds	r7, #24
 8015d62:	2800      	cmp	r0, #0
 8015d64:	d1e5      	bne.n	8015d32 <uxr_serialize_ActivityInfoVariant+0x72>
 8015d66:	2000      	movs	r0, #0
 8015d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015d6c:	2210      	movs	r2, #16
 8015d6e:	4639      	mov	r1, r7
 8015d70:	4630      	mov	r0, r6
 8015d72:	f7fc fd81 	bl	8012878 <ucdr_serialize_array_uint8_t>
 8015d76:	6939      	ldr	r1, [r7, #16]
 8015d78:	4604      	mov	r4, r0
 8015d7a:	4630      	mov	r0, r6
 8015d7c:	f7f6 ff1a 	bl	800cbb4 <ucdr_serialize_uint32_t>
 8015d80:	4020      	ands	r0, r4
 8015d82:	b2c0      	uxtb	r0, r0
 8015d84:	e7e7      	b.n	8015d56 <uxr_serialize_ActivityInfoVariant+0x96>
 8015d86:	2204      	movs	r2, #4
 8015d88:	4639      	mov	r1, r7
 8015d8a:	4630      	mov	r0, r6
 8015d8c:	f7fc fd74 	bl	8012878 <ucdr_serialize_array_uint8_t>
 8015d90:	88b9      	ldrh	r1, [r7, #4]
 8015d92:	4604      	mov	r4, r0
 8015d94:	4630      	mov	r0, r6
 8015d96:	f7f6 fd1d 	bl	800c7d4 <ucdr_serialize_uint16_t>
 8015d9a:	4020      	ands	r0, r4
 8015d9c:	b2c0      	uxtb	r0, r0
 8015d9e:	e7da      	b.n	8015d56 <uxr_serialize_ActivityInfoVariant+0x96>
 8015da0:	2202      	movs	r2, #2
 8015da2:	4639      	mov	r1, r7
 8015da4:	4630      	mov	r0, r6
 8015da6:	f7fc fd67 	bl	8012878 <ucdr_serialize_array_uint8_t>
 8015daa:	78b9      	ldrb	r1, [r7, #2]
 8015dac:	4604      	mov	r4, r0
 8015dae:	4630      	mov	r0, r6
 8015db0:	f7f6 fce4 	bl	800c77c <ucdr_serialize_uint8_t>
 8015db4:	4020      	ands	r0, r4
 8015db6:	b2c0      	uxtb	r0, r0
 8015db8:	e7cd      	b.n	8015d56 <uxr_serialize_ActivityInfoVariant+0x96>
 8015dba:	68eb      	ldr	r3, [r5, #12]
 8015dbc:	f108 0801 	add.w	r8, r8, #1
 8015dc0:	4598      	cmp	r8, r3
 8015dc2:	d308      	bcc.n	8015dd6 <uxr_serialize_ActivityInfoVariant+0x116>
 8015dc4:	ea09 0000 	and.w	r0, r9, r0
 8015dc8:	b2c0      	uxtb	r0, r0
 8015dca:	e788      	b.n	8015cde <uxr_serialize_ActivityInfoVariant+0x1e>
 8015dcc:	ea09 0900 	and.w	r9, r9, r0
 8015dd0:	fa5f f089 	uxtb.w	r0, r9
 8015dd4:	e783      	b.n	8015cde <uxr_serialize_ActivityInfoVariant+0x1e>
 8015dd6:	3718      	adds	r7, #24
 8015dd8:	e7ab      	b.n	8015d32 <uxr_serialize_ActivityInfoVariant+0x72>
 8015dda:	bf00      	nop

08015ddc <uxr_deserialize_BaseObjectReply>:
 8015ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015de0:	2202      	movs	r2, #2
 8015de2:	4606      	mov	r6, r0
 8015de4:	460f      	mov	r7, r1
 8015de6:	f7fc fdab 	bl	8012940 <ucdr_deserialize_array_uint8_t>
 8015dea:	2202      	movs	r2, #2
 8015dec:	18b9      	adds	r1, r7, r2
 8015dee:	4605      	mov	r5, r0
 8015df0:	4630      	mov	r0, r6
 8015df2:	f7fc fda5 	bl	8012940 <ucdr_deserialize_array_uint8_t>
 8015df6:	1d39      	adds	r1, r7, #4
 8015df8:	4680      	mov	r8, r0
 8015dfa:	4630      	mov	r0, r6
 8015dfc:	f7f6 fcd4 	bl	800c7a8 <ucdr_deserialize_uint8_t>
 8015e00:	1d79      	adds	r1, r7, #5
 8015e02:	4604      	mov	r4, r0
 8015e04:	4630      	mov	r0, r6
 8015e06:	f7f6 fccf 	bl	800c7a8 <ucdr_deserialize_uint8_t>
 8015e0a:	ea05 0508 	and.w	r5, r5, r8
 8015e0e:	402c      	ands	r4, r5
 8015e10:	4020      	ands	r0, r4
 8015e12:	b2c0      	uxtb	r0, r0
 8015e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015e18 <uxr_serialize_ReadSpecification>:
 8015e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e1c:	460d      	mov	r5, r1
 8015e1e:	7809      	ldrb	r1, [r1, #0]
 8015e20:	4606      	mov	r6, r0
 8015e22:	f7f6 fcab 	bl	800c77c <ucdr_serialize_uint8_t>
 8015e26:	7869      	ldrb	r1, [r5, #1]
 8015e28:	4604      	mov	r4, r0
 8015e2a:	4630      	mov	r0, r6
 8015e2c:	f7f6 fca6 	bl	800c77c <ucdr_serialize_uint8_t>
 8015e30:	78a9      	ldrb	r1, [r5, #2]
 8015e32:	4004      	ands	r4, r0
 8015e34:	4630      	mov	r0, r6
 8015e36:	f7f6 fc73 	bl	800c720 <ucdr_serialize_bool>
 8015e3a:	78ab      	ldrb	r3, [r5, #2]
 8015e3c:	b2e4      	uxtb	r4, r4
 8015e3e:	4004      	ands	r4, r0
 8015e40:	b94b      	cbnz	r3, 8015e56 <uxr_serialize_ReadSpecification+0x3e>
 8015e42:	7a29      	ldrb	r1, [r5, #8]
 8015e44:	4630      	mov	r0, r6
 8015e46:	f7f6 fc6b 	bl	800c720 <ucdr_serialize_bool>
 8015e4a:	7a2b      	ldrb	r3, [r5, #8]
 8015e4c:	4004      	ands	r4, r0
 8015e4e:	b943      	cbnz	r3, 8015e62 <uxr_serialize_ReadSpecification+0x4a>
 8015e50:	4620      	mov	r0, r4
 8015e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e56:	6869      	ldr	r1, [r5, #4]
 8015e58:	4630      	mov	r0, r6
 8015e5a:	f005 fbb3 	bl	801b5c4 <ucdr_serialize_string>
 8015e5e:	4004      	ands	r4, r0
 8015e60:	e7ef      	b.n	8015e42 <uxr_serialize_ReadSpecification+0x2a>
 8015e62:	8969      	ldrh	r1, [r5, #10]
 8015e64:	4630      	mov	r0, r6
 8015e66:	f7f6 fcb5 	bl	800c7d4 <ucdr_serialize_uint16_t>
 8015e6a:	89a9      	ldrh	r1, [r5, #12]
 8015e6c:	4607      	mov	r7, r0
 8015e6e:	4630      	mov	r0, r6
 8015e70:	f7f6 fcb0 	bl	800c7d4 <ucdr_serialize_uint16_t>
 8015e74:	89e9      	ldrh	r1, [r5, #14]
 8015e76:	4007      	ands	r7, r0
 8015e78:	4630      	mov	r0, r6
 8015e7a:	f7f6 fcab 	bl	800c7d4 <ucdr_serialize_uint16_t>
 8015e7e:	8a29      	ldrh	r1, [r5, #16]
 8015e80:	4680      	mov	r8, r0
 8015e82:	4630      	mov	r0, r6
 8015e84:	f7f6 fca6 	bl	800c7d4 <ucdr_serialize_uint16_t>
 8015e88:	b2ff      	uxtb	r7, r7
 8015e8a:	ea04 0507 	and.w	r5, r4, r7
 8015e8e:	ea05 0508 	and.w	r5, r5, r8
 8015e92:	ea00 0405 	and.w	r4, r0, r5
 8015e96:	4620      	mov	r0, r4
 8015e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015e9c <uxr_serialize_CREATE_CLIENT_Payload>:
 8015e9c:	f7ff baf8 	b.w	8015490 <uxr_serialize_CLIENT_Representation>

08015ea0 <uxr_serialize_CREATE_Payload>:
 8015ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ea2:	2202      	movs	r2, #2
 8015ea4:	4606      	mov	r6, r0
 8015ea6:	460d      	mov	r5, r1
 8015ea8:	f7fc fce6 	bl	8012878 <ucdr_serialize_array_uint8_t>
 8015eac:	2202      	movs	r2, #2
 8015eae:	18a9      	adds	r1, r5, r2
 8015eb0:	4604      	mov	r4, r0
 8015eb2:	4630      	mov	r0, r6
 8015eb4:	f7fc fce0 	bl	8012878 <ucdr_serialize_array_uint8_t>
 8015eb8:	7929      	ldrb	r1, [r5, #4]
 8015eba:	4607      	mov	r7, r0
 8015ebc:	4630      	mov	r0, r6
 8015ebe:	f7f6 fc5d 	bl	800c77c <ucdr_serialize_uint8_t>
 8015ec2:	b170      	cbz	r0, 8015ee2 <uxr_serialize_CREATE_Payload+0x42>
 8015ec4:	792b      	ldrb	r3, [r5, #4]
 8015ec6:	403c      	ands	r4, r7
 8015ec8:	3b01      	subs	r3, #1
 8015eca:	b2e4      	uxtb	r4, r4
 8015ecc:	2b0d      	cmp	r3, #13
 8015ece:	d809      	bhi.n	8015ee4 <uxr_serialize_CREATE_Payload+0x44>
 8015ed0:	e8df f003 	tbb	[pc, r3]
 8015ed4:	23230a3e 	.word	0x23230a3e
 8015ed8:	0a0a0a0a 	.word	0x0a0a0a0a
 8015edc:	12121208 	.word	0x12121208
 8015ee0:	5f58      	.short	0x5f58
 8015ee2:	2400      	movs	r4, #0
 8015ee4:	4620      	mov	r0, r4
 8015ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ee8:	f105 0108 	add.w	r1, r5, #8
 8015eec:	4630      	mov	r0, r6
 8015eee:	f7ff fbd7 	bl	80156a0 <uxr_serialize_DATAWRITER_Representation>
 8015ef2:	4004      	ands	r4, r0
 8015ef4:	4620      	mov	r0, r4
 8015ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ef8:	7a29      	ldrb	r1, [r5, #8]
 8015efa:	4630      	mov	r0, r6
 8015efc:	f7f6 fc3e 	bl	800c77c <ucdr_serialize_uint8_t>
 8015f00:	2800      	cmp	r0, #0
 8015f02:	d0ee      	beq.n	8015ee2 <uxr_serialize_CREATE_Payload+0x42>
 8015f04:	7a2b      	ldrb	r3, [r5, #8]
 8015f06:	2b01      	cmp	r3, #1
 8015f08:	d001      	beq.n	8015f0e <uxr_serialize_CREATE_Payload+0x6e>
 8015f0a:	2b02      	cmp	r3, #2
 8015f0c:	d1ea      	bne.n	8015ee4 <uxr_serialize_CREATE_Payload+0x44>
 8015f0e:	68e9      	ldr	r1, [r5, #12]
 8015f10:	4630      	mov	r0, r6
 8015f12:	f005 fb57 	bl	801b5c4 <ucdr_serialize_string>
 8015f16:	4004      	ands	r4, r0
 8015f18:	e7e4      	b.n	8015ee4 <uxr_serialize_CREATE_Payload+0x44>
 8015f1a:	7a29      	ldrb	r1, [r5, #8]
 8015f1c:	4630      	mov	r0, r6
 8015f1e:	f7f6 fc2d 	bl	800c77c <ucdr_serialize_uint8_t>
 8015f22:	4607      	mov	r7, r0
 8015f24:	b158      	cbz	r0, 8015f3e <uxr_serialize_CREATE_Payload+0x9e>
 8015f26:	7a2b      	ldrb	r3, [r5, #8]
 8015f28:	2b02      	cmp	r3, #2
 8015f2a:	d039      	beq.n	8015fa0 <uxr_serialize_CREATE_Payload+0x100>
 8015f2c:	2b03      	cmp	r3, #3
 8015f2e:	d106      	bne.n	8015f3e <uxr_serialize_CREATE_Payload+0x9e>
 8015f30:	68ea      	ldr	r2, [r5, #12]
 8015f32:	f105 0110 	add.w	r1, r5, #16
 8015f36:	4630      	mov	r0, r6
 8015f38:	f7fc fe3e 	bl	8012bb8 <ucdr_serialize_sequence_uint8_t>
 8015f3c:	4607      	mov	r7, r0
 8015f3e:	2202      	movs	r2, #2
 8015f40:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 8015f44:	4630      	mov	r0, r6
 8015f46:	f7fc fc97 	bl	8012878 <ucdr_serialize_array_uint8_t>
 8015f4a:	4038      	ands	r0, r7
 8015f4c:	4004      	ands	r4, r0
 8015f4e:	e7c9      	b.n	8015ee4 <uxr_serialize_CREATE_Payload+0x44>
 8015f50:	7a29      	ldrb	r1, [r5, #8]
 8015f52:	4630      	mov	r0, r6
 8015f54:	f7f6 fc12 	bl	800c77c <ucdr_serialize_uint8_t>
 8015f58:	4607      	mov	r7, r0
 8015f5a:	b158      	cbz	r0, 8015f74 <uxr_serialize_CREATE_Payload+0xd4>
 8015f5c:	7a2b      	ldrb	r3, [r5, #8]
 8015f5e:	2b02      	cmp	r3, #2
 8015f60:	d003      	beq.n	8015f6a <uxr_serialize_CREATE_Payload+0xca>
 8015f62:	2b03      	cmp	r3, #3
 8015f64:	d022      	beq.n	8015fac <uxr_serialize_CREATE_Payload+0x10c>
 8015f66:	2b01      	cmp	r3, #1
 8015f68:	d104      	bne.n	8015f74 <uxr_serialize_CREATE_Payload+0xd4>
 8015f6a:	68e9      	ldr	r1, [r5, #12]
 8015f6c:	4630      	mov	r0, r6
 8015f6e:	f005 fb29 	bl	801b5c4 <ucdr_serialize_string>
 8015f72:	4607      	mov	r7, r0
 8015f74:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 8015f78:	4630      	mov	r0, r6
 8015f7a:	f7f7 f953 	bl	800d224 <ucdr_serialize_int16_t>
 8015f7e:	4038      	ands	r0, r7
 8015f80:	4004      	ands	r4, r0
 8015f82:	e7af      	b.n	8015ee4 <uxr_serialize_CREATE_Payload+0x44>
 8015f84:	f105 0108 	add.w	r1, r5, #8
 8015f88:	4630      	mov	r0, r6
 8015f8a:	f7ff fb3f 	bl	801560c <uxr_serialize_AGENT_Representation>
 8015f8e:	4004      	ands	r4, r0
 8015f90:	e7a8      	b.n	8015ee4 <uxr_serialize_CREATE_Payload+0x44>
 8015f92:	f105 0108 	add.w	r1, r5, #8
 8015f96:	4630      	mov	r0, r6
 8015f98:	f7ff fa7a 	bl	8015490 <uxr_serialize_CLIENT_Representation>
 8015f9c:	4004      	ands	r4, r0
 8015f9e:	e7a1      	b.n	8015ee4 <uxr_serialize_CREATE_Payload+0x44>
 8015fa0:	68e9      	ldr	r1, [r5, #12]
 8015fa2:	4630      	mov	r0, r6
 8015fa4:	f005 fb0e 	bl	801b5c4 <ucdr_serialize_string>
 8015fa8:	4607      	mov	r7, r0
 8015faa:	e7c8      	b.n	8015f3e <uxr_serialize_CREATE_Payload+0x9e>
 8015fac:	68ea      	ldr	r2, [r5, #12]
 8015fae:	f105 0110 	add.w	r1, r5, #16
 8015fb2:	4630      	mov	r0, r6
 8015fb4:	f7fc fe00 	bl	8012bb8 <ucdr_serialize_sequence_uint8_t>
 8015fb8:	4607      	mov	r7, r0
 8015fba:	e7db      	b.n	8015f74 <uxr_serialize_CREATE_Payload+0xd4>

08015fbc <uxr_deserialize_GET_INFO_Payload>:
 8015fbc:	b570      	push	{r4, r5, r6, lr}
 8015fbe:	2202      	movs	r2, #2
 8015fc0:	4605      	mov	r5, r0
 8015fc2:	460e      	mov	r6, r1
 8015fc4:	f7fc fcbc 	bl	8012940 <ucdr_deserialize_array_uint8_t>
 8015fc8:	2202      	movs	r2, #2
 8015fca:	18b1      	adds	r1, r6, r2
 8015fcc:	4604      	mov	r4, r0
 8015fce:	4628      	mov	r0, r5
 8015fd0:	f7fc fcb6 	bl	8012940 <ucdr_deserialize_array_uint8_t>
 8015fd4:	1d31      	adds	r1, r6, #4
 8015fd6:	4004      	ands	r4, r0
 8015fd8:	4628      	mov	r0, r5
 8015fda:	f7f6 ff15 	bl	800ce08 <ucdr_deserialize_uint32_t>
 8015fde:	b2e4      	uxtb	r4, r4
 8015fe0:	4020      	ands	r0, r4
 8015fe2:	bd70      	pop	{r4, r5, r6, pc}

08015fe4 <uxr_serialize_DELETE_Payload>:
 8015fe4:	b570      	push	{r4, r5, r6, lr}
 8015fe6:	2202      	movs	r2, #2
 8015fe8:	4605      	mov	r5, r0
 8015fea:	460e      	mov	r6, r1
 8015fec:	f7fc fc44 	bl	8012878 <ucdr_serialize_array_uint8_t>
 8015ff0:	2202      	movs	r2, #2
 8015ff2:	4604      	mov	r4, r0
 8015ff4:	18b1      	adds	r1, r6, r2
 8015ff6:	4628      	mov	r0, r5
 8015ff8:	f7fc fc3e 	bl	8012878 <ucdr_serialize_array_uint8_t>
 8015ffc:	4020      	ands	r0, r4
 8015ffe:	b2c0      	uxtb	r0, r0
 8016000:	bd70      	pop	{r4, r5, r6, pc}
 8016002:	bf00      	nop

08016004 <uxr_deserialize_STATUS_AGENT_Payload>:
 8016004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016008:	4605      	mov	r5, r0
 801600a:	460e      	mov	r6, r1
 801600c:	f7f6 fbcc 	bl	800c7a8 <ucdr_deserialize_uint8_t>
 8016010:	1c71      	adds	r1, r6, #1
 8016012:	4604      	mov	r4, r0
 8016014:	4628      	mov	r0, r5
 8016016:	f7f6 fbc7 	bl	800c7a8 <ucdr_deserialize_uint8_t>
 801601a:	2204      	movs	r2, #4
 801601c:	18b1      	adds	r1, r6, r2
 801601e:	4681      	mov	r9, r0
 8016020:	4628      	mov	r0, r5
 8016022:	f7fc fc8d 	bl	8012940 <ucdr_deserialize_array_uint8_t>
 8016026:	f106 0108 	add.w	r1, r6, #8
 801602a:	4680      	mov	r8, r0
 801602c:	2202      	movs	r2, #2
 801602e:	4628      	mov	r0, r5
 8016030:	f7fc fc86 	bl	8012940 <ucdr_deserialize_array_uint8_t>
 8016034:	2202      	movs	r2, #2
 8016036:	f106 010a 	add.w	r1, r6, #10
 801603a:	4607      	mov	r7, r0
 801603c:	4628      	mov	r0, r5
 801603e:	f7fc fc7f 	bl	8012940 <ucdr_deserialize_array_uint8_t>
 8016042:	ea04 0409 	and.w	r4, r4, r9
 8016046:	4603      	mov	r3, r0
 8016048:	f106 010c 	add.w	r1, r6, #12
 801604c:	4628      	mov	r0, r5
 801604e:	b2e4      	uxtb	r4, r4
 8016050:	461d      	mov	r5, r3
 8016052:	ea04 0408 	and.w	r4, r4, r8
 8016056:	f7f6 fb79 	bl	800c74c <ucdr_deserialize_bool>
 801605a:	4027      	ands	r7, r4
 801605c:	403d      	ands	r5, r7
 801605e:	4028      	ands	r0, r5
 8016060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016064 <uxr_deserialize_STATUS_Payload>:
 8016064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016068:	2202      	movs	r2, #2
 801606a:	4606      	mov	r6, r0
 801606c:	460f      	mov	r7, r1
 801606e:	f7fc fc67 	bl	8012940 <ucdr_deserialize_array_uint8_t>
 8016072:	2202      	movs	r2, #2
 8016074:	18b9      	adds	r1, r7, r2
 8016076:	4605      	mov	r5, r0
 8016078:	4630      	mov	r0, r6
 801607a:	f7fc fc61 	bl	8012940 <ucdr_deserialize_array_uint8_t>
 801607e:	1d39      	adds	r1, r7, #4
 8016080:	4680      	mov	r8, r0
 8016082:	4630      	mov	r0, r6
 8016084:	f7f6 fb90 	bl	800c7a8 <ucdr_deserialize_uint8_t>
 8016088:	1d79      	adds	r1, r7, #5
 801608a:	4604      	mov	r4, r0
 801608c:	4630      	mov	r0, r6
 801608e:	f7f6 fb8b 	bl	800c7a8 <ucdr_deserialize_uint8_t>
 8016092:	ea05 0508 	and.w	r5, r5, r8
 8016096:	402c      	ands	r4, r5
 8016098:	4020      	ands	r0, r4
 801609a:	b2c0      	uxtb	r0, r0
 801609c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080160a0 <uxr_serialize_INFO_Payload>:
 80160a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160a4:	2202      	movs	r2, #2
 80160a6:	460c      	mov	r4, r1
 80160a8:	4605      	mov	r5, r0
 80160aa:	f7fc fbe5 	bl	8012878 <ucdr_serialize_array_uint8_t>
 80160ae:	2202      	movs	r2, #2
 80160b0:	18a1      	adds	r1, r4, r2
 80160b2:	4680      	mov	r8, r0
 80160b4:	4628      	mov	r0, r5
 80160b6:	f7fc fbdf 	bl	8012878 <ucdr_serialize_array_uint8_t>
 80160ba:	7921      	ldrb	r1, [r4, #4]
 80160bc:	4607      	mov	r7, r0
 80160be:	4628      	mov	r0, r5
 80160c0:	f7f6 fb5c 	bl	800c77c <ucdr_serialize_uint8_t>
 80160c4:	7961      	ldrb	r1, [r4, #5]
 80160c6:	4606      	mov	r6, r0
 80160c8:	4628      	mov	r0, r5
 80160ca:	f7f6 fb57 	bl	800c77c <ucdr_serialize_uint8_t>
 80160ce:	ea08 0807 	and.w	r8, r8, r7
 80160d2:	ea06 0608 	and.w	r6, r6, r8
 80160d6:	ea00 0706 	and.w	r7, r0, r6
 80160da:	7a21      	ldrb	r1, [r4, #8]
 80160dc:	4628      	mov	r0, r5
 80160de:	f7f6 fb1f 	bl	800c720 <ucdr_serialize_bool>
 80160e2:	7a23      	ldrb	r3, [r4, #8]
 80160e4:	b2ff      	uxtb	r7, r7
 80160e6:	4606      	mov	r6, r0
 80160e8:	b96b      	cbnz	r3, 8016106 <uxr_serialize_INFO_Payload+0x66>
 80160ea:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 80160ee:	4628      	mov	r0, r5
 80160f0:	f7f6 fb16 	bl	800c720 <ucdr_serialize_bool>
 80160f4:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 80160f8:	4030      	ands	r0, r6
 80160fa:	b2c6      	uxtb	r6, r0
 80160fc:	b983      	cbnz	r3, 8016120 <uxr_serialize_INFO_Payload+0x80>
 80160fe:	ea06 0007 	and.w	r0, r6, r7
 8016102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016106:	7b21      	ldrb	r1, [r4, #12]
 8016108:	4628      	mov	r0, r5
 801610a:	f7f6 fb37 	bl	800c77c <ucdr_serialize_uint8_t>
 801610e:	b188      	cbz	r0, 8016134 <uxr_serialize_INFO_Payload+0x94>
 8016110:	f104 010c 	add.w	r1, r4, #12
 8016114:	4628      	mov	r0, r5
 8016116:	f7ff faeb 	bl	80156f0 <uxr_serialize_ObjectVariant.part.0>
 801611a:	4030      	ands	r0, r6
 801611c:	b2c6      	uxtb	r6, r0
 801611e:	e7e4      	b.n	80160ea <uxr_serialize_INFO_Payload+0x4a>
 8016120:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8016124:	4628      	mov	r0, r5
 8016126:	f7ff fdcb 	bl	8015cc0 <uxr_serialize_ActivityInfoVariant>
 801612a:	4006      	ands	r6, r0
 801612c:	ea06 0007 	and.w	r0, r6, r7
 8016130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016134:	4606      	mov	r6, r0
 8016136:	e7d8      	b.n	80160ea <uxr_serialize_INFO_Payload+0x4a>

08016138 <uxr_serialize_READ_DATA_Payload>:
 8016138:	b570      	push	{r4, r5, r6, lr}
 801613a:	2202      	movs	r2, #2
 801613c:	4605      	mov	r5, r0
 801613e:	460e      	mov	r6, r1
 8016140:	f7fc fb9a 	bl	8012878 <ucdr_serialize_array_uint8_t>
 8016144:	2202      	movs	r2, #2
 8016146:	18b1      	adds	r1, r6, r2
 8016148:	4604      	mov	r4, r0
 801614a:	4628      	mov	r0, r5
 801614c:	f7fc fb94 	bl	8012878 <ucdr_serialize_array_uint8_t>
 8016150:	1d31      	adds	r1, r6, #4
 8016152:	4004      	ands	r4, r0
 8016154:	4628      	mov	r0, r5
 8016156:	f7ff fe5f 	bl	8015e18 <uxr_serialize_ReadSpecification>
 801615a:	b2e4      	uxtb	r4, r4
 801615c:	4020      	ands	r0, r4
 801615e:	bd70      	pop	{r4, r5, r6, pc}

08016160 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8016160:	b570      	push	{r4, r5, r6, lr}
 8016162:	2202      	movs	r2, #2
 8016164:	4605      	mov	r5, r0
 8016166:	460e      	mov	r6, r1
 8016168:	f7fc fb86 	bl	8012878 <ucdr_serialize_array_uint8_t>
 801616c:	2202      	movs	r2, #2
 801616e:	4604      	mov	r4, r0
 8016170:	18b1      	adds	r1, r6, r2
 8016172:	4628      	mov	r0, r5
 8016174:	f7fc fb80 	bl	8012878 <ucdr_serialize_array_uint8_t>
 8016178:	4020      	ands	r0, r4
 801617a:	b2c0      	uxtb	r0, r0
 801617c:	bd70      	pop	{r4, r5, r6, pc}
 801617e:	bf00      	nop

08016180 <uxr_serialize_ACKNACK_Payload>:
 8016180:	b570      	push	{r4, r5, r6, lr}
 8016182:	460c      	mov	r4, r1
 8016184:	460e      	mov	r6, r1
 8016186:	f834 1b02 	ldrh.w	r1, [r4], #2
 801618a:	4605      	mov	r5, r0
 801618c:	f7f6 fb22 	bl	800c7d4 <ucdr_serialize_uint16_t>
 8016190:	2202      	movs	r2, #2
 8016192:	4621      	mov	r1, r4
 8016194:	4604      	mov	r4, r0
 8016196:	4628      	mov	r0, r5
 8016198:	f7fc fb6e 	bl	8012878 <ucdr_serialize_array_uint8_t>
 801619c:	7931      	ldrb	r1, [r6, #4]
 801619e:	4004      	ands	r4, r0
 80161a0:	4628      	mov	r0, r5
 80161a2:	f7f6 faeb 	bl	800c77c <ucdr_serialize_uint8_t>
 80161a6:	b2e4      	uxtb	r4, r4
 80161a8:	4020      	ands	r0, r4
 80161aa:	bd70      	pop	{r4, r5, r6, pc}

080161ac <uxr_deserialize_ACKNACK_Payload>:
 80161ac:	b570      	push	{r4, r5, r6, lr}
 80161ae:	4605      	mov	r5, r0
 80161b0:	460e      	mov	r6, r1
 80161b2:	f7f6 fc13 	bl	800c9dc <ucdr_deserialize_uint16_t>
 80161b6:	2202      	movs	r2, #2
 80161b8:	18b1      	adds	r1, r6, r2
 80161ba:	4604      	mov	r4, r0
 80161bc:	4628      	mov	r0, r5
 80161be:	f7fc fbbf 	bl	8012940 <ucdr_deserialize_array_uint8_t>
 80161c2:	1d31      	adds	r1, r6, #4
 80161c4:	4004      	ands	r4, r0
 80161c6:	4628      	mov	r0, r5
 80161c8:	f7f6 faee 	bl	800c7a8 <ucdr_deserialize_uint8_t>
 80161cc:	b2e4      	uxtb	r4, r4
 80161ce:	4020      	ands	r0, r4
 80161d0:	bd70      	pop	{r4, r5, r6, pc}
 80161d2:	bf00      	nop

080161d4 <uxr_serialize_HEARTBEAT_Payload>:
 80161d4:	b570      	push	{r4, r5, r6, lr}
 80161d6:	460d      	mov	r5, r1
 80161d8:	8809      	ldrh	r1, [r1, #0]
 80161da:	4606      	mov	r6, r0
 80161dc:	f7f6 fafa 	bl	800c7d4 <ucdr_serialize_uint16_t>
 80161e0:	8869      	ldrh	r1, [r5, #2]
 80161e2:	4604      	mov	r4, r0
 80161e4:	4630      	mov	r0, r6
 80161e6:	f7f6 faf5 	bl	800c7d4 <ucdr_serialize_uint16_t>
 80161ea:	7929      	ldrb	r1, [r5, #4]
 80161ec:	4004      	ands	r4, r0
 80161ee:	4630      	mov	r0, r6
 80161f0:	f7f6 fac4 	bl	800c77c <ucdr_serialize_uint8_t>
 80161f4:	b2e4      	uxtb	r4, r4
 80161f6:	4020      	ands	r0, r4
 80161f8:	bd70      	pop	{r4, r5, r6, pc}
 80161fa:	bf00      	nop

080161fc <uxr_deserialize_HEARTBEAT_Payload>:
 80161fc:	b570      	push	{r4, r5, r6, lr}
 80161fe:	4605      	mov	r5, r0
 8016200:	460e      	mov	r6, r1
 8016202:	f7f6 fbeb 	bl	800c9dc <ucdr_deserialize_uint16_t>
 8016206:	1cb1      	adds	r1, r6, #2
 8016208:	4604      	mov	r4, r0
 801620a:	4628      	mov	r0, r5
 801620c:	f7f6 fbe6 	bl	800c9dc <ucdr_deserialize_uint16_t>
 8016210:	1d31      	adds	r1, r6, #4
 8016212:	4004      	ands	r4, r0
 8016214:	4628      	mov	r0, r5
 8016216:	f7f6 fac7 	bl	800c7a8 <ucdr_deserialize_uint8_t>
 801621a:	b2e4      	uxtb	r4, r4
 801621c:	4020      	ands	r0, r4
 801621e:	bd70      	pop	{r4, r5, r6, pc}

08016220 <uxr_serialize_TIMESTAMP_Payload>:
 8016220:	b570      	push	{r4, r5, r6, lr}
 8016222:	460d      	mov	r5, r1
 8016224:	6809      	ldr	r1, [r1, #0]
 8016226:	4606      	mov	r6, r0
 8016228:	f7f7 f902 	bl	800d430 <ucdr_serialize_int32_t>
 801622c:	6869      	ldr	r1, [r5, #4]
 801622e:	4604      	mov	r4, r0
 8016230:	4630      	mov	r0, r6
 8016232:	f7f6 fcbf 	bl	800cbb4 <ucdr_serialize_uint32_t>
 8016236:	4020      	ands	r0, r4
 8016238:	b2c0      	uxtb	r0, r0
 801623a:	bd70      	pop	{r4, r5, r6, pc}

0801623c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801623c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016240:	4605      	mov	r5, r0
 8016242:	460e      	mov	r6, r1
 8016244:	f7f7 f98e 	bl	800d564 <ucdr_deserialize_int32_t>
 8016248:	1d31      	adds	r1, r6, #4
 801624a:	4607      	mov	r7, r0
 801624c:	4628      	mov	r0, r5
 801624e:	f7f6 fddb 	bl	800ce08 <ucdr_deserialize_uint32_t>
 8016252:	f106 0108 	add.w	r1, r6, #8
 8016256:	4680      	mov	r8, r0
 8016258:	4628      	mov	r0, r5
 801625a:	f7f7 f983 	bl	800d564 <ucdr_deserialize_int32_t>
 801625e:	f106 010c 	add.w	r1, r6, #12
 8016262:	4604      	mov	r4, r0
 8016264:	4628      	mov	r0, r5
 8016266:	f7f6 fdcf 	bl	800ce08 <ucdr_deserialize_uint32_t>
 801626a:	ea07 0708 	and.w	r7, r7, r8
 801626e:	403c      	ands	r4, r7
 8016270:	f106 0110 	add.w	r1, r6, #16
 8016274:	4004      	ands	r4, r0
 8016276:	4628      	mov	r0, r5
 8016278:	f7f7 f974 	bl	800d564 <ucdr_deserialize_int32_t>
 801627c:	f106 0114 	add.w	r1, r6, #20
 8016280:	4607      	mov	r7, r0
 8016282:	4628      	mov	r0, r5
 8016284:	f7f6 fdc0 	bl	800ce08 <ucdr_deserialize_uint32_t>
 8016288:	b2e4      	uxtb	r4, r4
 801628a:	403c      	ands	r4, r7
 801628c:	4020      	ands	r0, r4
 801628e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016292:	bf00      	nop

08016294 <uxr_serialize_SampleIdentity>:
 8016294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016298:	220c      	movs	r2, #12
 801629a:	4604      	mov	r4, r0
 801629c:	460d      	mov	r5, r1
 801629e:	f7fc faeb 	bl	8012878 <ucdr_serialize_array_uint8_t>
 80162a2:	2203      	movs	r2, #3
 80162a4:	f105 010c 	add.w	r1, r5, #12
 80162a8:	4680      	mov	r8, r0
 80162aa:	4620      	mov	r0, r4
 80162ac:	f7fc fae4 	bl	8012878 <ucdr_serialize_array_uint8_t>
 80162b0:	7be9      	ldrb	r1, [r5, #15]
 80162b2:	4681      	mov	r9, r0
 80162b4:	4620      	mov	r0, r4
 80162b6:	f7f6 fa61 	bl	800c77c <ucdr_serialize_uint8_t>
 80162ba:	6929      	ldr	r1, [r5, #16]
 80162bc:	4607      	mov	r7, r0
 80162be:	4620      	mov	r0, r4
 80162c0:	f7f7 f8b6 	bl	800d430 <ucdr_serialize_int32_t>
 80162c4:	6969      	ldr	r1, [r5, #20]
 80162c6:	4606      	mov	r6, r0
 80162c8:	4620      	mov	r0, r4
 80162ca:	f7f6 fc73 	bl	800cbb4 <ucdr_serialize_uint32_t>
 80162ce:	ea08 0809 	and.w	r8, r8, r9
 80162d2:	ea07 0708 	and.w	r7, r7, r8
 80162d6:	403e      	ands	r6, r7
 80162d8:	4030      	ands	r0, r6
 80162da:	b2c0      	uxtb	r0, r0
 80162dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080162e0 <uxr_deserialize_SampleIdentity>:
 80162e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80162e4:	220c      	movs	r2, #12
 80162e6:	4604      	mov	r4, r0
 80162e8:	460d      	mov	r5, r1
 80162ea:	f7fc fb29 	bl	8012940 <ucdr_deserialize_array_uint8_t>
 80162ee:	2203      	movs	r2, #3
 80162f0:	f105 010c 	add.w	r1, r5, #12
 80162f4:	4680      	mov	r8, r0
 80162f6:	4620      	mov	r0, r4
 80162f8:	f7fc fb22 	bl	8012940 <ucdr_deserialize_array_uint8_t>
 80162fc:	f105 010f 	add.w	r1, r5, #15
 8016300:	4681      	mov	r9, r0
 8016302:	4620      	mov	r0, r4
 8016304:	f7f6 fa50 	bl	800c7a8 <ucdr_deserialize_uint8_t>
 8016308:	f105 0110 	add.w	r1, r5, #16
 801630c:	4607      	mov	r7, r0
 801630e:	4620      	mov	r0, r4
 8016310:	f7f7 f928 	bl	800d564 <ucdr_deserialize_int32_t>
 8016314:	f105 0114 	add.w	r1, r5, #20
 8016318:	4606      	mov	r6, r0
 801631a:	4620      	mov	r0, r4
 801631c:	f7f6 fd74 	bl	800ce08 <ucdr_deserialize_uint32_t>
 8016320:	ea08 0809 	and.w	r8, r8, r9
 8016324:	ea07 0708 	and.w	r7, r7, r8
 8016328:	403e      	ands	r6, r7
 801632a:	4030      	ands	r0, r6
 801632c:	b2c0      	uxtb	r0, r0
 801632e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016332:	bf00      	nop

08016334 <rcl_client_get_rmw_handle>:
 8016334:	b118      	cbz	r0, 801633e <rcl_client_get_rmw_handle+0xa>
 8016336:	6800      	ldr	r0, [r0, #0]
 8016338:	b108      	cbz	r0, 801633e <rcl_client_get_rmw_handle+0xa>
 801633a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801633e:	4770      	bx	lr

08016340 <rcl_send_request>:
 8016340:	2800      	cmp	r0, #0
 8016342:	d048      	beq.n	80163d6 <rcl_send_request+0x96>
 8016344:	b570      	push	{r4, r5, r6, lr}
 8016346:	4604      	mov	r4, r0
 8016348:	6800      	ldr	r0, [r0, #0]
 801634a:	b08a      	sub	sp, #40	@ 0x28
 801634c:	b1c0      	cbz	r0, 8016380 <rcl_send_request+0x40>
 801634e:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8016352:	b1ab      	cbz	r3, 8016380 <rcl_send_request+0x40>
 8016354:	460e      	mov	r6, r1
 8016356:	b1b9      	cbz	r1, 8016388 <rcl_send_request+0x48>
 8016358:	4615      	mov	r5, r2
 801635a:	b1aa      	cbz	r2, 8016388 <rcl_send_request+0x48>
 801635c:	2105      	movs	r1, #5
 801635e:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8016362:	f003 f845 	bl	80193f0 <__atomic_load_8>
 8016366:	6823      	ldr	r3, [r4, #0]
 8016368:	e9c5 0100 	strd	r0, r1, [r5]
 801636c:	462a      	mov	r2, r5
 801636e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8016372:	4631      	mov	r1, r6
 8016374:	f003 ff96 	bl	801a2a4 <rmw_send_request>
 8016378:	b148      	cbz	r0, 801638e <rcl_send_request+0x4e>
 801637a:	2001      	movs	r0, #1
 801637c:	b00a      	add	sp, #40	@ 0x28
 801637e:	bd70      	pop	{r4, r5, r6, pc}
 8016380:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8016384:	b00a      	add	sp, #40	@ 0x28
 8016386:	bd70      	pop	{r4, r5, r6, pc}
 8016388:	200b      	movs	r0, #11
 801638a:	b00a      	add	sp, #40	@ 0x28
 801638c:	bd70      	pop	{r4, r5, r6, pc}
 801638e:	6820      	ldr	r0, [r4, #0]
 8016390:	2305      	movs	r3, #5
 8016392:	9300      	str	r3, [sp, #0]
 8016394:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016398:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801639c:	f003 f894 	bl	80194c8 <__atomic_exchange_8>
 80163a0:	6823      	ldr	r3, [r4, #0]
 80163a2:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 80163a6:	b1a2      	cbz	r2, 80163d2 <rcl_send_request+0x92>
 80163a8:	a905      	add	r1, sp, #20
 80163aa:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80163ae:	f003 fedf 	bl	801a170 <rmw_get_gid_for_client>
 80163b2:	4601      	mov	r1, r0
 80163b4:	b990      	cbnz	r0, 80163dc <rcl_send_request+0x9c>
 80163b6:	6822      	ldr	r2, [r4, #0]
 80163b8:	ab06      	add	r3, sp, #24
 80163ba:	f8d2 0118 	ldr.w	r0, [r2, #280]	@ 0x118
 80163be:	9302      	str	r3, [sp, #8]
 80163c0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80163c4:	4632      	mov	r2, r6
 80163c6:	e9cd 4500 	strd	r4, r5, [sp]
 80163ca:	f000 ff49 	bl	8017260 <rcl_send_service_event_message>
 80163ce:	2800      	cmp	r0, #0
 80163d0:	d1d4      	bne.n	801637c <rcl_send_request+0x3c>
 80163d2:	2000      	movs	r0, #0
 80163d4:	e7d2      	b.n	801637c <rcl_send_request+0x3c>
 80163d6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80163da:	4770      	bx	lr
 80163dc:	f000 f87a 	bl	80164d4 <rcl_convert_rmw_ret_to_rcl_ret>
 80163e0:	e7cc      	b.n	801637c <rcl_send_request+0x3c>
 80163e2:	bf00      	nop
 80163e4:	0000      	movs	r0, r0
	...

080163e8 <rcl_take_response>:
 80163e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163ea:	468e      	mov	lr, r1
 80163ec:	460c      	mov	r4, r1
 80163ee:	4617      	mov	r7, r2
 80163f0:	4605      	mov	r5, r0
 80163f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80163f6:	b095      	sub	sp, #84	@ 0x54
 80163f8:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 80163fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016400:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016404:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016408:	2d00      	cmp	r5, #0
 801640a:	d044      	beq.n	8016496 <rcl_take_response+0xae>
 801640c:	682b      	ldr	r3, [r5, #0]
 801640e:	2b00      	cmp	r3, #0
 8016410:	d041      	beq.n	8016496 <rcl_take_response+0xae>
 8016412:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8016416:	2800      	cmp	r0, #0
 8016418:	d03d      	beq.n	8016496 <rcl_take_response+0xae>
 801641a:	2f00      	cmp	r7, #0
 801641c:	d03e      	beq.n	801649c <rcl_take_response+0xb4>
 801641e:	ed9f 7b26 	vldr	d7, [pc, #152]	@ 80164b8 <rcl_take_response+0xd0>
 8016422:	2300      	movs	r3, #0
 8016424:	f88d 3013 	strb.w	r3, [sp, #19]
 8016428:	463a      	mov	r2, r7
 801642a:	f10d 0313 	add.w	r3, sp, #19
 801642e:	a90a      	add	r1, sp, #40	@ 0x28
 8016430:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8016434:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8016438:	f004 f834 	bl	801a4a4 <rmw_take_response>
 801643c:	4606      	mov	r6, r0
 801643e:	bb78      	cbnz	r0, 80164a0 <rcl_take_response+0xb8>
 8016440:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8016444:	b373      	cbz	r3, 80164a4 <rcl_take_response+0xbc>
 8016446:	682b      	ldr	r3, [r5, #0]
 8016448:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 801644c:	b1aa      	cbz	r2, 801647a <rcl_take_response+0x92>
 801644e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8016452:	a905      	add	r1, sp, #20
 8016454:	f003 fe8c 	bl	801a170 <rmw_get_gid_for_client>
 8016458:	bb38      	cbnz	r0, 80164aa <rcl_take_response+0xc2>
 801645a:	682b      	ldr	r3, [r5, #0]
 801645c:	ed9d 7b12 	vldr	d7, [sp, #72]	@ 0x48
 8016460:	f8d3 0118 	ldr.w	r0, [r3, #280]	@ 0x118
 8016464:	ab06      	add	r3, sp, #24
 8016466:	ed8d 7b00 	vstr	d7, [sp]
 801646a:	463a      	mov	r2, r7
 801646c:	9302      	str	r3, [sp, #8]
 801646e:	2103      	movs	r1, #3
 8016470:	f000 fef6 	bl	8017260 <rcl_send_service_event_message>
 8016474:	2800      	cmp	r0, #0
 8016476:	bf18      	it	ne
 8016478:	4606      	movne	r6, r0
 801647a:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 801647e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016482:	46a4      	mov	ip, r4
 8016484:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016488:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801648c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016490:	4630      	mov	r0, r6
 8016492:	b015      	add	sp, #84	@ 0x54
 8016494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016496:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801649a:	e7ee      	b.n	801647a <rcl_take_response+0x92>
 801649c:	260b      	movs	r6, #11
 801649e:	e7ec      	b.n	801647a <rcl_take_response+0x92>
 80164a0:	2601      	movs	r6, #1
 80164a2:	e7ea      	b.n	801647a <rcl_take_response+0x92>
 80164a4:	f240 16f5 	movw	r6, #501	@ 0x1f5
 80164a8:	e7e7      	b.n	801647a <rcl_take_response+0x92>
 80164aa:	f000 f813 	bl	80164d4 <rcl_convert_rmw_ret_to_rcl_ret>
 80164ae:	4606      	mov	r6, r0
 80164b0:	e7e3      	b.n	801647a <rcl_take_response+0x92>
 80164b2:	bf00      	nop
 80164b4:	f3af 8000 	nop.w
	...

080164c0 <rcl_client_is_valid>:
 80164c0:	b130      	cbz	r0, 80164d0 <rcl_client_is_valid+0x10>
 80164c2:	6800      	ldr	r0, [r0, #0]
 80164c4:	b120      	cbz	r0, 80164d0 <rcl_client_is_valid+0x10>
 80164c6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80164ca:	3800      	subs	r0, #0
 80164cc:	bf18      	it	ne
 80164ce:	2001      	movne	r0, #1
 80164d0:	4770      	bx	lr
 80164d2:	bf00      	nop

080164d4 <rcl_convert_rmw_ret_to_rcl_ret>:
 80164d4:	280b      	cmp	r0, #11
 80164d6:	dc0d      	bgt.n	80164f4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80164d8:	2800      	cmp	r0, #0
 80164da:	db09      	blt.n	80164f0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80164dc:	280b      	cmp	r0, #11
 80164de:	d807      	bhi.n	80164f0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80164e0:	e8df f000 	tbb	[pc, r0]
 80164e4:	07060607 	.word	0x07060607
 80164e8:	06060606 	.word	0x06060606
 80164ec:	07070606 	.word	0x07070606
 80164f0:	2001      	movs	r0, #1
 80164f2:	4770      	bx	lr
 80164f4:	28cb      	cmp	r0, #203	@ 0xcb
 80164f6:	bf14      	ite	ne
 80164f8:	2001      	movne	r0, #1
 80164fa:	20cb      	moveq	r0, #203	@ 0xcb
 80164fc:	4770      	bx	lr
 80164fe:	bf00      	nop

08016500 <rcl_get_zero_initialized_context>:
 8016500:	4a03      	ldr	r2, [pc, #12]	@ (8016510 <rcl_get_zero_initialized_context+0x10>)
 8016502:	4603      	mov	r3, r0
 8016504:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016508:	e883 0003 	stmia.w	r3, {r0, r1}
 801650c:	4618      	mov	r0, r3
 801650e:	4770      	bx	lr
 8016510:	08021440 	.word	0x08021440

08016514 <rcl_context_is_valid>:
 8016514:	b118      	cbz	r0, 801651e <rcl_context_is_valid+0xa>
 8016516:	6840      	ldr	r0, [r0, #4]
 8016518:	3800      	subs	r0, #0
 801651a:	bf18      	it	ne
 801651c:	2001      	movne	r0, #1
 801651e:	4770      	bx	lr

08016520 <__cleanup_context>:
 8016520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016524:	4606      	mov	r6, r0
 8016526:	6800      	ldr	r0, [r0, #0]
 8016528:	2300      	movs	r3, #0
 801652a:	6073      	str	r3, [r6, #4]
 801652c:	2800      	cmp	r0, #0
 801652e:	d042      	beq.n	80165b6 <__cleanup_context+0x96>
 8016530:	6943      	ldr	r3, [r0, #20]
 8016532:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8016536:	6907      	ldr	r7, [r0, #16]
 8016538:	b39b      	cbz	r3, 80165a2 <__cleanup_context+0x82>
 801653a:	3014      	adds	r0, #20
 801653c:	f7f7 fe5e 	bl	800e1fc <rcl_init_options_fini>
 8016540:	4680      	mov	r8, r0
 8016542:	2800      	cmp	r0, #0
 8016544:	d144      	bne.n	80165d0 <__cleanup_context+0xb0>
 8016546:	6830      	ldr	r0, [r6, #0]
 8016548:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801654a:	b123      	cbz	r3, 8016556 <__cleanup_context+0x36>
 801654c:	3028      	adds	r0, #40	@ 0x28
 801654e:	f7f9 fa5f 	bl	800fa10 <rmw_context_fini>
 8016552:	bbb8      	cbnz	r0, 80165c4 <__cleanup_context+0xa4>
 8016554:	6830      	ldr	r0, [r6, #0]
 8016556:	6a03      	ldr	r3, [r0, #32]
 8016558:	b1db      	cbz	r3, 8016592 <__cleanup_context+0x72>
 801655a:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801655e:	2a01      	cmp	r2, #1
 8016560:	f17c 0100 	sbcs.w	r1, ip, #0
 8016564:	db11      	blt.n	801658a <__cleanup_context+0x6a>
 8016566:	2400      	movs	r4, #0
 8016568:	4625      	mov	r5, r4
 801656a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801656e:	4639      	mov	r1, r7
 8016570:	b1c8      	cbz	r0, 80165a6 <__cleanup_context+0x86>
 8016572:	47c8      	blx	r9
 8016574:	6833      	ldr	r3, [r6, #0]
 8016576:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801657a:	3401      	adds	r4, #1
 801657c:	f145 0500 	adc.w	r5, r5, #0
 8016580:	4294      	cmp	r4, r2
 8016582:	eb75 010c 	sbcs.w	r1, r5, ip
 8016586:	6a1b      	ldr	r3, [r3, #32]
 8016588:	dbef      	blt.n	801656a <__cleanup_context+0x4a>
 801658a:	4618      	mov	r0, r3
 801658c:	4639      	mov	r1, r7
 801658e:	47c8      	blx	r9
 8016590:	6830      	ldr	r0, [r6, #0]
 8016592:	4639      	mov	r1, r7
 8016594:	47c8      	blx	r9
 8016596:	2300      	movs	r3, #0
 8016598:	e9c6 3300 	strd	r3, r3, [r6]
 801659c:	4640      	mov	r0, r8
 801659e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80165a2:	4698      	mov	r8, r3
 80165a4:	e7d0      	b.n	8016548 <__cleanup_context+0x28>
 80165a6:	3401      	adds	r4, #1
 80165a8:	f145 0500 	adc.w	r5, r5, #0
 80165ac:	4294      	cmp	r4, r2
 80165ae:	eb75 010c 	sbcs.w	r1, r5, ip
 80165b2:	dbda      	blt.n	801656a <__cleanup_context+0x4a>
 80165b4:	e7e9      	b.n	801658a <__cleanup_context+0x6a>
 80165b6:	4680      	mov	r8, r0
 80165b8:	2300      	movs	r3, #0
 80165ba:	e9c6 3300 	strd	r3, r3, [r6]
 80165be:	4640      	mov	r0, r8
 80165c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80165c4:	f1b8 0f00 	cmp.w	r8, #0
 80165c8:	d005      	beq.n	80165d6 <__cleanup_context+0xb6>
 80165ca:	f7f8 ff65 	bl	800f498 <rcutils_reset_error>
 80165ce:	e7c1      	b.n	8016554 <__cleanup_context+0x34>
 80165d0:	f7f8 ff62 	bl	800f498 <rcutils_reset_error>
 80165d4:	e7b7      	b.n	8016546 <__cleanup_context+0x26>
 80165d6:	f7ff ff7d 	bl	80164d4 <rcl_convert_rmw_ret_to_rcl_ret>
 80165da:	4680      	mov	r8, r0
 80165dc:	e7f5      	b.n	80165ca <__cleanup_context+0xaa>
 80165de:	bf00      	nop

080165e0 <rcl_init>:
 80165e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165e4:	1e04      	subs	r4, r0, #0
 80165e6:	b0a7      	sub	sp, #156	@ 0x9c
 80165e8:	460d      	mov	r5, r1
 80165ea:	4617      	mov	r7, r2
 80165ec:	461e      	mov	r6, r3
 80165ee:	dd13      	ble.n	8016618 <rcl_init+0x38>
 80165f0:	b161      	cbz	r1, 801660c <rcl_init+0x2c>
 80165f2:	f1a1 0e04 	sub.w	lr, r1, #4
 80165f6:	f04f 0c00 	mov.w	ip, #0
 80165fa:	e001      	b.n	8016600 <rcl_init+0x20>
 80165fc:	4564      	cmp	r4, ip
 80165fe:	d00d      	beq.n	801661c <rcl_init+0x3c>
 8016600:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 8016604:	f10c 0c01 	add.w	ip, ip, #1
 8016608:	2800      	cmp	r0, #0
 801660a:	d1f7      	bne.n	80165fc <rcl_init+0x1c>
 801660c:	f04f 080b 	mov.w	r8, #11
 8016610:	4640      	mov	r0, r8
 8016612:	b027      	add	sp, #156	@ 0x9c
 8016614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016618:	2900      	cmp	r1, #0
 801661a:	d1f7      	bne.n	801660c <rcl_init+0x2c>
 801661c:	2f00      	cmp	r7, #0
 801661e:	d0f5      	beq.n	801660c <rcl_init+0x2c>
 8016620:	683b      	ldr	r3, [r7, #0]
 8016622:	2b00      	cmp	r3, #0
 8016624:	d0f2      	beq.n	801660c <rcl_init+0x2c>
 8016626:	469c      	mov	ip, r3
 8016628:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801662c:	f10d 0e84 	add.w	lr, sp, #132	@ 0x84
 8016630:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016634:	f8dc 3000 	ldr.w	r3, [ip]
 8016638:	f8ce 3000 	str.w	r3, [lr]
 801663c:	a821      	add	r0, sp, #132	@ 0x84
 801663e:	f7f8 ff05 	bl	800f44c <rcutils_allocator_is_valid>
 8016642:	2800      	cmp	r0, #0
 8016644:	d0e2      	beq.n	801660c <rcl_init+0x2c>
 8016646:	2e00      	cmp	r6, #0
 8016648:	d0e0      	beq.n	801660c <rcl_init+0x2c>
 801664a:	6833      	ldr	r3, [r6, #0]
 801664c:	2b00      	cmp	r3, #0
 801664e:	d176      	bne.n	801673e <rcl_init+0x15e>
 8016650:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	@ 0x90
 8016654:	2198      	movs	r1, #152	@ 0x98
 8016656:	2001      	movs	r0, #1
 8016658:	4798      	blx	r3
 801665a:	4680      	mov	r8, r0
 801665c:	6030      	str	r0, [r6, #0]
 801665e:	2800      	cmp	r0, #0
 8016660:	f000 80cc 	beq.w	80167fc <rcl_init+0x21c>
 8016664:	a802      	add	r0, sp, #8
 8016666:	f003 fa5f 	bl	8019b28 <rmw_get_zero_initialized_context>
 801666a:	a902      	add	r1, sp, #8
 801666c:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 8016670:	2270      	movs	r2, #112	@ 0x70
 8016672:	f007 fb3c 	bl	801dcee <memcpy>
 8016676:	f10d 0e84 	add.w	lr, sp, #132	@ 0x84
 801667a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801667e:	f8d6 8000 	ldr.w	r8, [r6]
 8016682:	46c4      	mov	ip, r8
 8016684:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016688:	f8de 3000 	ldr.w	r3, [lr]
 801668c:	f8cc 3000 	str.w	r3, [ip]
 8016690:	f108 0114 	add.w	r1, r8, #20
 8016694:	4638      	mov	r0, r7
 8016696:	f7f7 fddb 	bl	800e250 <rcl_init_options_copy>
 801669a:	4680      	mov	r8, r0
 801669c:	2800      	cmp	r0, #0
 801669e:	d147      	bne.n	8016730 <rcl_init+0x150>
 80166a0:	f8d6 9000 	ldr.w	r9, [r6]
 80166a4:	ea4f 7ae4 	mov.w	sl, r4, asr #31
 80166a8:	f8c9 0020 	str.w	r0, [r9, #32]
 80166ac:	f8c9 4018 	str.w	r4, [r9, #24]
 80166b0:	f8c9 a01c 	str.w	sl, [r9, #28]
 80166b4:	2c00      	cmp	r4, #0
 80166b6:	d04a      	beq.n	801674e <rcl_init+0x16e>
 80166b8:	2d00      	cmp	r5, #0
 80166ba:	d048      	beq.n	801674e <rcl_init+0x16e>
 80166bc:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	@ 0x90
 80166c0:	2104      	movs	r1, #4
 80166c2:	4620      	mov	r0, r4
 80166c4:	4798      	blx	r3
 80166c6:	f8c9 0020 	str.w	r0, [r9, #32]
 80166ca:	f8d6 9000 	ldr.w	r9, [r6]
 80166ce:	f8d9 b020 	ldr.w	fp, [r9, #32]
 80166d2:	f1bb 0f00 	cmp.w	fp, #0
 80166d6:	d029      	beq.n	801672c <rcl_init+0x14c>
 80166d8:	2c01      	cmp	r4, #1
 80166da:	f17a 0300 	sbcs.w	r3, sl, #0
 80166de:	db36      	blt.n	801674e <rcl_init+0x16e>
 80166e0:	f04f 0800 	mov.w	r8, #0
 80166e4:	3d04      	subs	r5, #4
 80166e6:	46c1      	mov	r9, r8
 80166e8:	e00d      	b.n	8016706 <rcl_init+0x126>
 80166ea:	6829      	ldr	r1, [r5, #0]
 80166ec:	f007 faff 	bl	801dcee <memcpy>
 80166f0:	f118 0801 	adds.w	r8, r8, #1
 80166f4:	f149 0900 	adc.w	r9, r9, #0
 80166f8:	45ca      	cmp	sl, r9
 80166fa:	bf08      	it	eq
 80166fc:	4544      	cmpeq	r4, r8
 80166fe:	d024      	beq.n	801674a <rcl_init+0x16a>
 8016700:	6833      	ldr	r3, [r6, #0]
 8016702:	f8d3 b020 	ldr.w	fp, [r3, #32]
 8016706:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801670a:	f7e9 fde9 	bl	80002e0 <strlen>
 801670e:	1c42      	adds	r2, r0, #1
 8016710:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8016712:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8016714:	9201      	str	r2, [sp, #4]
 8016716:	4610      	mov	r0, r2
 8016718:	4798      	blx	r3
 801671a:	6833      	ldr	r3, [r6, #0]
 801671c:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
 8016720:	6a1b      	ldr	r3, [r3, #32]
 8016722:	9a01      	ldr	r2, [sp, #4]
 8016724:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8016728:	2800      	cmp	r0, #0
 801672a:	d1de      	bne.n	80166ea <rcl_init+0x10a>
 801672c:	f04f 080a 	mov.w	r8, #10
 8016730:	4630      	mov	r0, r6
 8016732:	f7ff fef5 	bl	8016520 <__cleanup_context>
 8016736:	4640      	mov	r0, r8
 8016738:	b027      	add	sp, #156	@ 0x9c
 801673a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801673e:	f04f 0864 	mov.w	r8, #100	@ 0x64
 8016742:	4640      	mov	r0, r8
 8016744:	b027      	add	sp, #156	@ 0x9c
 8016746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801674a:	f8d6 9000 	ldr.w	r9, [r6]
 801674e:	4a40      	ldr	r2, [pc, #256]	@ (8016850 <rcl_init+0x270>)
 8016750:	6813      	ldr	r3, [r2, #0]
 8016752:	3301      	adds	r3, #1
 8016754:	d04d      	beq.n	80167f2 <rcl_init+0x212>
 8016756:	461d      	mov	r5, r3
 8016758:	2000      	movs	r0, #0
 801675a:	4619      	mov	r1, r3
 801675c:	f8d9 4014 	ldr.w	r4, [r9, #20]
 8016760:	6073      	str	r3, [r6, #4]
 8016762:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8016764:	6011      	str	r1, [r2, #0]
 8016766:	3301      	adds	r3, #1
 8016768:	e9c4 5006 	strd	r5, r0, [r4, #24]
 801676c:	d05e      	beq.n	801682c <rcl_init+0x24c>
 801676e:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8016772:	2b00      	cmp	r3, #0
 8016774:	d045      	beq.n	8016802 <rcl_init+0x222>
 8016776:	683a      	ldr	r2, [r7, #0]
 8016778:	2b01      	cmp	r3, #1
 801677a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 801677e:	d04c      	beq.n	801681a <rcl_init+0x23a>
 8016780:	f104 0534 	add.w	r5, r4, #52	@ 0x34
 8016784:	2a00      	cmp	r2, #0
 8016786:	d05c      	beq.n	8016842 <rcl_init+0x262>
 8016788:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801678a:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 801678e:	b953      	cbnz	r3, 80167a6 <rcl_init+0x1c6>
 8016790:	2801      	cmp	r0, #1
 8016792:	d008      	beq.n	80167a6 <rcl_init+0x1c6>
 8016794:	a921      	add	r1, sp, #132	@ 0x84
 8016796:	4628      	mov	r0, r5
 8016798:	f005 fcc2 	bl	801c120 <rcl_get_discovery_static_peers>
 801679c:	4680      	mov	r8, r0
 801679e:	2800      	cmp	r0, #0
 80167a0:	d1c6      	bne.n	8016730 <rcl_init+0x150>
 80167a2:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 80167a6:	f005 fcb1 	bl	801c10c <rcl_automatic_discovery_range_to_string>
 80167aa:	6833      	ldr	r3, [r6, #0]
 80167ac:	695b      	ldr	r3, [r3, #20]
 80167ae:	aa20      	add	r2, sp, #128	@ 0x80
 80167b0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80167b2:	a91f      	add	r1, sp, #124	@ 0x7c
 80167b4:	f001 fa54 	bl	8017c60 <rcl_validate_enclave_name>
 80167b8:	4680      	mov	r8, r0
 80167ba:	2800      	cmp	r0, #0
 80167bc:	d1b8      	bne.n	8016730 <rcl_init+0x150>
 80167be:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80167c0:	bb8b      	cbnz	r3, 8016826 <rcl_init+0x246>
 80167c2:	6831      	ldr	r1, [r6, #0]
 80167c4:	694b      	ldr	r3, [r1, #20]
 80167c6:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80167c8:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80167cc:	f000 fba6 	bl	8016f1c <rcl_get_security_options_from_environment>
 80167d0:	4680      	mov	r8, r0
 80167d2:	2800      	cmp	r0, #0
 80167d4:	d1ac      	bne.n	8016730 <rcl_init+0x150>
 80167d6:	6831      	ldr	r1, [r6, #0]
 80167d8:	6948      	ldr	r0, [r1, #20]
 80167da:	3128      	adds	r1, #40	@ 0x28
 80167dc:	3018      	adds	r0, #24
 80167de:	f7f8 ffe3 	bl	800f7a8 <rmw_init>
 80167e2:	4680      	mov	r8, r0
 80167e4:	2800      	cmp	r0, #0
 80167e6:	f43f af13 	beq.w	8016610 <rcl_init+0x30>
 80167ea:	f7ff fe73 	bl	80164d4 <rcl_convert_rmw_ret_to_rcl_ret>
 80167ee:	4680      	mov	r8, r0
 80167f0:	e79e      	b.n	8016730 <rcl_init+0x150>
 80167f2:	2101      	movs	r1, #1
 80167f4:	4618      	mov	r0, r3
 80167f6:	460d      	mov	r5, r1
 80167f8:	460b      	mov	r3, r1
 80167fa:	e7af      	b.n	801675c <rcl_init+0x17c>
 80167fc:	f04f 080a 	mov.w	r8, #10
 8016800:	e706      	b.n	8016610 <rcl_init+0x30>
 8016802:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8016806:	f000 f825 	bl	8016854 <rcl_get_localhost_only>
 801680a:	4680      	mov	r8, r0
 801680c:	2800      	cmp	r0, #0
 801680e:	d18f      	bne.n	8016730 <rcl_init+0x150>
 8016810:	6832      	ldr	r2, [r6, #0]
 8016812:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8016816:	6954      	ldr	r4, [r2, #20]
 8016818:	e7ad      	b.n	8016776 <rcl_init+0x196>
 801681a:	2002      	movs	r0, #2
 801681c:	2300      	movs	r3, #0
 801681e:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
 8016822:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8016824:	e7bf      	b.n	80167a6 <rcl_init+0x1c6>
 8016826:	f04f 0801 	mov.w	r8, #1
 801682a:	e781      	b.n	8016730 <rcl_init+0x150>
 801682c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8016830:	f005 fce0 	bl	801c1f4 <rcl_get_default_domain_id>
 8016834:	4680      	mov	r8, r0
 8016836:	2800      	cmp	r0, #0
 8016838:	f47f af7a 	bne.w	8016730 <rcl_init+0x150>
 801683c:	6833      	ldr	r3, [r6, #0]
 801683e:	695c      	ldr	r4, [r3, #20]
 8016840:	e795      	b.n	801676e <rcl_init+0x18e>
 8016842:	4628      	mov	r0, r5
 8016844:	f005 fc20 	bl	801c088 <rcl_get_automatic_discovery_range>
 8016848:	4680      	mov	r8, r0
 801684a:	2800      	cmp	r0, #0
 801684c:	d09c      	beq.n	8016788 <rcl_init+0x1a8>
 801684e:	e76f      	b.n	8016730 <rcl_init+0x150>
 8016850:	2000f3b0 	.word	0x2000f3b0

08016854 <rcl_get_localhost_only>:
 8016854:	b510      	push	{r4, lr}
 8016856:	b082      	sub	sp, #8
 8016858:	2300      	movs	r3, #0
 801685a:	9301      	str	r3, [sp, #4]
 801685c:	b1b8      	cbz	r0, 801688e <rcl_get_localhost_only+0x3a>
 801685e:	4604      	mov	r4, r0
 8016860:	a901      	add	r1, sp, #4
 8016862:	480c      	ldr	r0, [pc, #48]	@ (8016894 <rcl_get_localhost_only+0x40>)
 8016864:	f002 fe6a 	bl	801953c <rcutils_get_env>
 8016868:	b110      	cbz	r0, 8016870 <rcl_get_localhost_only+0x1c>
 801686a:	2001      	movs	r0, #1
 801686c:	b002      	add	sp, #8
 801686e:	bd10      	pop	{r4, pc}
 8016870:	9b01      	ldr	r3, [sp, #4]
 8016872:	b10b      	cbz	r3, 8016878 <rcl_get_localhost_only+0x24>
 8016874:	781b      	ldrb	r3, [r3, #0]
 8016876:	b923      	cbnz	r3, 8016882 <rcl_get_localhost_only+0x2e>
 8016878:	2300      	movs	r3, #0
 801687a:	7023      	strb	r3, [r4, #0]
 801687c:	2000      	movs	r0, #0
 801687e:	b002      	add	sp, #8
 8016880:	bd10      	pop	{r4, pc}
 8016882:	2b31      	cmp	r3, #49	@ 0x31
 8016884:	bf14      	ite	ne
 8016886:	2302      	movne	r3, #2
 8016888:	2301      	moveq	r3, #1
 801688a:	7023      	strb	r3, [r4, #0]
 801688c:	e7f6      	b.n	801687c <rcl_get_localhost_only+0x28>
 801688e:	200b      	movs	r0, #11
 8016890:	b002      	add	sp, #8
 8016892:	bd10      	pop	{r4, pc}
 8016894:	08021448 	.word	0x08021448

08016898 <rcl_get_zero_initialized_node>:
 8016898:	4a03      	ldr	r2, [pc, #12]	@ (80168a8 <rcl_get_zero_initialized_node+0x10>)
 801689a:	4603      	mov	r3, r0
 801689c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80168a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80168a4:	4618      	mov	r0, r3
 80168a6:	4770      	bx	lr
 80168a8:	08021480 	.word	0x08021480

080168ac <rcl_node_init>:
 80168ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168b0:	b0ab      	sub	sp, #172	@ 0xac
 80168b2:	4604      	mov	r4, r0
 80168b4:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 80168b6:	a825      	add	r0, sp, #148	@ 0x94
 80168b8:	4689      	mov	r9, r1
 80168ba:	4690      	mov	r8, r2
 80168bc:	461f      	mov	r7, r3
 80168be:	f005 ff03 	bl	801c6c8 <rcl_guard_condition_get_default_options>
 80168c2:	2d00      	cmp	r5, #0
 80168c4:	f000 80d8 	beq.w	8016a78 <rcl_node_init+0x1cc>
 80168c8:	4628      	mov	r0, r5
 80168ca:	f7f8 fdbf 	bl	800f44c <rcutils_allocator_is_valid>
 80168ce:	2800      	cmp	r0, #0
 80168d0:	f000 80d2 	beq.w	8016a78 <rcl_node_init+0x1cc>
 80168d4:	f1b9 0f00 	cmp.w	r9, #0
 80168d8:	f000 80ce 	beq.w	8016a78 <rcl_node_init+0x1cc>
 80168dc:	f1b8 0f00 	cmp.w	r8, #0
 80168e0:	f000 80ca 	beq.w	8016a78 <rcl_node_init+0x1cc>
 80168e4:	2c00      	cmp	r4, #0
 80168e6:	f000 80c7 	beq.w	8016a78 <rcl_node_init+0x1cc>
 80168ea:	6866      	ldr	r6, [r4, #4]
 80168ec:	2e00      	cmp	r6, #0
 80168ee:	f040 80ca 	bne.w	8016a86 <rcl_node_init+0x1da>
 80168f2:	2f00      	cmp	r7, #0
 80168f4:	f000 80c0 	beq.w	8016a78 <rcl_node_init+0x1cc>
 80168f8:	4638      	mov	r0, r7
 80168fa:	f7ff fe0b 	bl	8016514 <rcl_context_is_valid>
 80168fe:	2800      	cmp	r0, #0
 8016900:	f000 80bf 	beq.w	8016a82 <rcl_node_init+0x1d6>
 8016904:	4632      	mov	r2, r6
 8016906:	a924      	add	r1, sp, #144	@ 0x90
 8016908:	4648      	mov	r0, r9
 801690a:	9624      	str	r6, [sp, #144]	@ 0x90
 801690c:	f003 fa88 	bl	8019e20 <rmw_validate_node_name>
 8016910:	4606      	mov	r6, r0
 8016912:	2800      	cmp	r0, #0
 8016914:	f040 80b1 	bne.w	8016a7a <rcl_node_init+0x1ce>
 8016918:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801691a:	2800      	cmp	r0, #0
 801691c:	f040 8104 	bne.w	8016b28 <rcl_node_init+0x27c>
 8016920:	f898 3000 	ldrb.w	r3, [r8]
 8016924:	2b00      	cmp	r3, #0
 8016926:	f000 80f0 	beq.w	8016b0a <rcl_node_init+0x25e>
 801692a:	2b2f      	cmp	r3, #47	@ 0x2f
 801692c:	f000 80b0 	beq.w	8016a90 <rcl_node_init+0x1e4>
 8016930:	4b85      	ldr	r3, [pc, #532]	@ (8016b48 <rcl_node_init+0x29c>)
 8016932:	f8cd 800c 	str.w	r8, [sp, #12]
 8016936:	9302      	str	r3, [sp, #8]
 8016938:	692b      	ldr	r3, [r5, #16]
 801693a:	9300      	str	r3, [sp, #0]
 801693c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016940:	9301      	str	r3, [sp, #4]
 8016942:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8016946:	f002 fe21 	bl	801958c <rcutils_format_string_limit>
 801694a:	4680      	mov	r8, r0
 801694c:	f1b8 0f00 	cmp.w	r8, #0
 8016950:	f000 80e8 	beq.w	8016b24 <rcl_node_init+0x278>
 8016954:	2200      	movs	r2, #0
 8016956:	a924      	add	r1, sp, #144	@ 0x90
 8016958:	4640      	mov	r0, r8
 801695a:	9224      	str	r2, [sp, #144]	@ 0x90
 801695c:	f003 fa42 	bl	8019de4 <rmw_validate_namespace>
 8016960:	4606      	mov	r6, r0
 8016962:	2800      	cmp	r0, #0
 8016964:	f040 80a4 	bne.w	8016ab0 <rcl_node_init+0x204>
 8016968:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801696a:	2800      	cmp	r0, #0
 801696c:	f040 809d 	bne.w	8016aaa <rcl_node_init+0x1fe>
 8016970:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8016974:	2178      	movs	r1, #120	@ 0x78
 8016976:	2001      	movs	r0, #1
 8016978:	4798      	blx	r3
 801697a:	4606      	mov	r6, r0
 801697c:	6060      	str	r0, [r4, #4]
 801697e:	2800      	cmp	r0, #0
 8016980:	f000 80d6 	beq.w	8016b30 <rcl_node_init+0x284>
 8016984:	a80a      	add	r0, sp, #40	@ 0x28
 8016986:	f000 f92f 	bl	8016be8 <rcl_node_get_default_options>
 801698a:	a90a      	add	r1, sp, #40	@ 0x28
 801698c:	4630      	mov	r0, r6
 801698e:	2268      	movs	r2, #104	@ 0x68
 8016990:	f007 f9ad 	bl	801dcee <memcpy>
 8016994:	6861      	ldr	r1, [r4, #4]
 8016996:	6027      	str	r7, [r4, #0]
 8016998:	4628      	mov	r0, r5
 801699a:	f000 f933 	bl	8016c04 <rcl_node_options_copy>
 801699e:	4606      	mov	r6, r0
 80169a0:	2800      	cmp	r0, #0
 80169a2:	f040 8085 	bne.w	8016ab0 <rcl_node_init+0x204>
 80169a6:	4640      	mov	r0, r8
 80169a8:	f7e9 fc9a 	bl	80002e0 <strlen>
 80169ac:	eb08 0300 	add.w	r3, r8, r0
 80169b0:	6866      	ldr	r6, [r4, #4]
 80169b2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80169b6:	e9cd 8903 	strd	r8, r9, [sp, #12]
 80169ba:	2b2f      	cmp	r3, #47	@ 0x2f
 80169bc:	bf0c      	ite	eq
 80169be:	4b63      	ldreq	r3, [pc, #396]	@ (8016b4c <rcl_node_init+0x2a0>)
 80169c0:	4b63      	ldrne	r3, [pc, #396]	@ (8016b50 <rcl_node_init+0x2a4>)
 80169c2:	9302      	str	r3, [sp, #8]
 80169c4:	692b      	ldr	r3, [r5, #16]
 80169c6:	9300      	str	r3, [sp, #0]
 80169c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80169cc:	9301      	str	r3, [sp, #4]
 80169ce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80169d2:	f002 fddb 	bl	801958c <rcutils_format_string_limit>
 80169d6:	6863      	ldr	r3, [r4, #4]
 80169d8:	6770      	str	r0, [r6, #116]	@ 0x74
 80169da:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80169dc:	2a00      	cmp	r2, #0
 80169de:	f000 80a9 	beq.w	8016b34 <rcl_node_init+0x288>
 80169e2:	6822      	ldr	r2, [r4, #0]
 80169e4:	9307      	str	r3, [sp, #28]
 80169e6:	6810      	ldr	r0, [r2, #0]
 80169e8:	4649      	mov	r1, r9
 80169ea:	3028      	adds	r0, #40	@ 0x28
 80169ec:	4642      	mov	r2, r8
 80169ee:	f7f9 f8bd 	bl	800fb6c <rmw_create_node>
 80169f2:	9b07      	ldr	r3, [sp, #28]
 80169f4:	6698      	str	r0, [r3, #104]	@ 0x68
 80169f6:	6863      	ldr	r3, [r4, #4]
 80169f8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80169fa:	2800      	cmp	r0, #0
 80169fc:	f000 809d 	beq.w	8016b3a <rcl_node_init+0x28e>
 8016a00:	f7f9 f946 	bl	800fc90 <rmw_node_get_graph_guard_condition>
 8016a04:	4681      	mov	r9, r0
 8016a06:	2800      	cmp	r0, #0
 8016a08:	f000 809c 	beq.w	8016b44 <rcl_node_init+0x298>
 8016a0c:	682b      	ldr	r3, [r5, #0]
 8016a0e:	6929      	ldr	r1, [r5, #16]
 8016a10:	6866      	ldr	r6, [r4, #4]
 8016a12:	2008      	movs	r0, #8
 8016a14:	4798      	blx	r3
 8016a16:	6863      	ldr	r3, [r4, #4]
 8016a18:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8016a1a:	f8d3 a06c 	ldr.w	sl, [r3, #108]	@ 0x6c
 8016a1e:	f1ba 0f00 	cmp.w	sl, #0
 8016a22:	f000 808d 	beq.w	8016b40 <rcl_node_init+0x294>
 8016a26:	f10d 0b20 	add.w	fp, sp, #32
 8016a2a:	4658      	mov	r0, fp
 8016a2c:	f005 fd74 	bl	801c518 <rcl_get_zero_initialized_guard_condition>
 8016a30:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8016a34:	6863      	ldr	r3, [r4, #4]
 8016a36:	46ac      	mov	ip, r5
 8016a38:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8016a3c:	e88a 0003 	stmia.w	sl, {r0, r1}
 8016a40:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016a44:	ae25      	add	r6, sp, #148	@ 0x94
 8016a46:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8016a48:	f8dc 3000 	ldr.w	r3, [ip]
 8016a4c:	6033      	str	r3, [r6, #0]
 8016a4e:	ab2a      	add	r3, sp, #168	@ 0xa8
 8016a50:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8016a54:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016a58:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8016a5a:	463a      	mov	r2, r7
 8016a5c:	4649      	mov	r1, r9
 8016a5e:	4670      	mov	r0, lr
 8016a60:	f005 fdb0 	bl	801c5c4 <rcl_guard_condition_init_from_rmw>
 8016a64:	4606      	mov	r6, r0
 8016a66:	bb18      	cbnz	r0, 8016ab0 <rcl_node_init+0x204>
 8016a68:	686b      	ldr	r3, [r5, #4]
 8016a6a:	6929      	ldr	r1, [r5, #16]
 8016a6c:	4798      	blx	r3
 8016a6e:	686b      	ldr	r3, [r5, #4]
 8016a70:	6929      	ldr	r1, [r5, #16]
 8016a72:	4640      	mov	r0, r8
 8016a74:	4798      	blx	r3
 8016a76:	e000      	b.n	8016a7a <rcl_node_init+0x1ce>
 8016a78:	260b      	movs	r6, #11
 8016a7a:	4630      	mov	r0, r6
 8016a7c:	b02b      	add	sp, #172	@ 0xac
 8016a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a82:	2665      	movs	r6, #101	@ 0x65
 8016a84:	e7f9      	b.n	8016a7a <rcl_node_init+0x1ce>
 8016a86:	2664      	movs	r6, #100	@ 0x64
 8016a88:	4630      	mov	r0, r6
 8016a8a:	b02b      	add	sp, #172	@ 0xac
 8016a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a90:	f105 030c 	add.w	r3, r5, #12
 8016a94:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016a98:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016a9c:	4640      	mov	r0, r8
 8016a9e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8016aa2:	f002 fe91 	bl	80197c8 <rcutils_strdup>
 8016aa6:	4680      	mov	r8, r0
 8016aa8:	e750      	b.n	801694c <rcl_node_init+0xa0>
 8016aaa:	f003 f9ad 	bl	8019e08 <rmw_namespace_validation_result_string>
 8016aae:	26ca      	movs	r6, #202	@ 0xca
 8016ab0:	6863      	ldr	r3, [r4, #4]
 8016ab2:	b1f3      	cbz	r3, 8016af2 <rcl_node_init+0x246>
 8016ab4:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8016ab6:	b138      	cbz	r0, 8016ac8 <rcl_node_init+0x21c>
 8016ab8:	f005 fde4 	bl	801c684 <rcl_guard_condition_fini>
 8016abc:	6863      	ldr	r3, [r4, #4]
 8016abe:	6929      	ldr	r1, [r5, #16]
 8016ac0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8016ac2:	686b      	ldr	r3, [r5, #4]
 8016ac4:	4798      	blx	r3
 8016ac6:	6863      	ldr	r3, [r4, #4]
 8016ac8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8016aca:	b110      	cbz	r0, 8016ad2 <rcl_node_init+0x226>
 8016acc:	f7f9 f864 	bl	800fb98 <rmw_destroy_node>
 8016ad0:	6863      	ldr	r3, [r4, #4]
 8016ad2:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8016ad4:	6929      	ldr	r1, [r5, #16]
 8016ad6:	686b      	ldr	r3, [r5, #4]
 8016ad8:	4798      	blx	r3
 8016ada:	6863      	ldr	r3, [r4, #4]
 8016adc:	6929      	ldr	r1, [r5, #16]
 8016ade:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8016ae0:	686b      	ldr	r3, [r5, #4]
 8016ae2:	4798      	blx	r3
 8016ae4:	6860      	ldr	r0, [r4, #4]
 8016ae6:	f000 f8ab 	bl	8016c40 <rcl_node_options_fini>
 8016aea:	686b      	ldr	r3, [r5, #4]
 8016aec:	6929      	ldr	r1, [r5, #16]
 8016aee:	6860      	ldr	r0, [r4, #4]
 8016af0:	4798      	blx	r3
 8016af2:	686b      	ldr	r3, [r5, #4]
 8016af4:	6929      	ldr	r1, [r5, #16]
 8016af6:	2000      	movs	r0, #0
 8016af8:	4798      	blx	r3
 8016afa:	686b      	ldr	r3, [r5, #4]
 8016afc:	6929      	ldr	r1, [r5, #16]
 8016afe:	4640      	mov	r0, r8
 8016b00:	4798      	blx	r3
 8016b02:	2300      	movs	r3, #0
 8016b04:	e9c4 3300 	strd	r3, r3, [r4]
 8016b08:	e7b7      	b.n	8016a7a <rcl_node_init+0x1ce>
 8016b0a:	f105 030c 	add.w	r3, r5, #12
 8016b0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016b12:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016b16:	480f      	ldr	r0, [pc, #60]	@ (8016b54 <rcl_node_init+0x2a8>)
 8016b18:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8016b1c:	f002 fe54 	bl	80197c8 <rcutils_strdup>
 8016b20:	4680      	mov	r8, r0
 8016b22:	e713      	b.n	801694c <rcl_node_init+0xa0>
 8016b24:	260a      	movs	r6, #10
 8016b26:	e7a8      	b.n	8016a7a <rcl_node_init+0x1ce>
 8016b28:	f003 f9c6 	bl	8019eb8 <rmw_node_name_validation_result_string>
 8016b2c:	26c9      	movs	r6, #201	@ 0xc9
 8016b2e:	e7a4      	b.n	8016a7a <rcl_node_init+0x1ce>
 8016b30:	260a      	movs	r6, #10
 8016b32:	e7de      	b.n	8016af2 <rcl_node_init+0x246>
 8016b34:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8016b36:	260a      	movs	r6, #10
 8016b38:	e7bd      	b.n	8016ab6 <rcl_node_init+0x20a>
 8016b3a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8016b3c:	2601      	movs	r6, #1
 8016b3e:	e7ba      	b.n	8016ab6 <rcl_node_init+0x20a>
 8016b40:	260a      	movs	r6, #10
 8016b42:	e7c1      	b.n	8016ac8 <rcl_node_init+0x21c>
 8016b44:	2601      	movs	r6, #1
 8016b46:	e7b3      	b.n	8016ab0 <rcl_node_init+0x204>
 8016b48:	08021460 	.word	0x08021460
 8016b4c:	0802067c 	.word	0x0802067c
 8016b50:	08020658 	.word	0x08020658
 8016b54:	08020654 	.word	0x08020654

08016b58 <rcl_node_is_valid>:
 8016b58:	b130      	cbz	r0, 8016b68 <rcl_node_is_valid+0x10>
 8016b5a:	6843      	ldr	r3, [r0, #4]
 8016b5c:	b123      	cbz	r3, 8016b68 <rcl_node_is_valid+0x10>
 8016b5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016b60:	b113      	cbz	r3, 8016b68 <rcl_node_is_valid+0x10>
 8016b62:	6800      	ldr	r0, [r0, #0]
 8016b64:	f7ff bcd6 	b.w	8016514 <rcl_context_is_valid>
 8016b68:	2000      	movs	r0, #0
 8016b6a:	4770      	bx	lr

08016b6c <rcl_node_get_name>:
 8016b6c:	b120      	cbz	r0, 8016b78 <rcl_node_get_name+0xc>
 8016b6e:	6840      	ldr	r0, [r0, #4]
 8016b70:	b110      	cbz	r0, 8016b78 <rcl_node_get_name+0xc>
 8016b72:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8016b74:	b100      	cbz	r0, 8016b78 <rcl_node_get_name+0xc>
 8016b76:	6880      	ldr	r0, [r0, #8]
 8016b78:	4770      	bx	lr
 8016b7a:	bf00      	nop

08016b7c <rcl_node_get_namespace>:
 8016b7c:	b120      	cbz	r0, 8016b88 <rcl_node_get_namespace+0xc>
 8016b7e:	6840      	ldr	r0, [r0, #4]
 8016b80:	b110      	cbz	r0, 8016b88 <rcl_node_get_namespace+0xc>
 8016b82:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8016b84:	b100      	cbz	r0, 8016b88 <rcl_node_get_namespace+0xc>
 8016b86:	68c0      	ldr	r0, [r0, #12]
 8016b88:	4770      	bx	lr
 8016b8a:	bf00      	nop

08016b8c <rcl_node_get_options>:
 8016b8c:	b128      	cbz	r0, 8016b9a <rcl_node_get_options+0xe>
 8016b8e:	6840      	ldr	r0, [r0, #4]
 8016b90:	b118      	cbz	r0, 8016b9a <rcl_node_get_options+0xe>
 8016b92:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	bf08      	it	eq
 8016b98:	2000      	moveq	r0, #0
 8016b9a:	4770      	bx	lr

08016b9c <rcl_node_get_rmw_handle>:
 8016b9c:	b110      	cbz	r0, 8016ba4 <rcl_node_get_rmw_handle+0x8>
 8016b9e:	6840      	ldr	r0, [r0, #4]
 8016ba0:	b100      	cbz	r0, 8016ba4 <rcl_node_get_rmw_handle+0x8>
 8016ba2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8016ba4:	4770      	bx	lr
 8016ba6:	bf00      	nop

08016ba8 <rcl_get_disable_loaned_message>:
 8016ba8:	b510      	push	{r4, lr}
 8016baa:	b082      	sub	sp, #8
 8016bac:	2300      	movs	r3, #0
 8016bae:	9301      	str	r3, [sp, #4]
 8016bb0:	b1a0      	cbz	r0, 8016bdc <rcl_get_disable_loaned_message+0x34>
 8016bb2:	4604      	mov	r4, r0
 8016bb4:	a901      	add	r1, sp, #4
 8016bb6:	480b      	ldr	r0, [pc, #44]	@ (8016be4 <rcl_get_disable_loaned_message+0x3c>)
 8016bb8:	f002 fcc0 	bl	801953c <rcutils_get_env>
 8016bbc:	b110      	cbz	r0, 8016bc4 <rcl_get_disable_loaned_message+0x1c>
 8016bbe:	2001      	movs	r0, #1
 8016bc0:	b002      	add	sp, #8
 8016bc2:	bd10      	pop	{r4, pc}
 8016bc4:	9a01      	ldr	r2, [sp, #4]
 8016bc6:	7813      	ldrb	r3, [r2, #0]
 8016bc8:	3b31      	subs	r3, #49	@ 0x31
 8016bca:	bf08      	it	eq
 8016bcc:	7853      	ldrbeq	r3, [r2, #1]
 8016bce:	fab3 f383 	clz	r3, r3
 8016bd2:	095b      	lsrs	r3, r3, #5
 8016bd4:	2000      	movs	r0, #0
 8016bd6:	7023      	strb	r3, [r4, #0]
 8016bd8:	b002      	add	sp, #8
 8016bda:	bd10      	pop	{r4, pc}
 8016bdc:	200b      	movs	r0, #11
 8016bde:	b002      	add	sp, #8
 8016be0:	bd10      	pop	{r4, pc}
 8016be2:	bf00      	nop
 8016be4:	08021464 	.word	0x08021464

08016be8 <rcl_node_get_default_options>:
 8016be8:	b510      	push	{r4, lr}
 8016bea:	2253      	movs	r2, #83	@ 0x53
 8016bec:	4604      	mov	r4, r0
 8016bee:	2100      	movs	r1, #0
 8016bf0:	3015      	adds	r0, #21
 8016bf2:	f006 ffa1 	bl	801db38 <memset>
 8016bf6:	4620      	mov	r0, r4
 8016bf8:	f7f8 fbfc 	bl	800f3f4 <rcutils_get_default_allocator>
 8016bfc:	2301      	movs	r3, #1
 8016bfe:	7523      	strb	r3, [r4, #20]
 8016c00:	4620      	mov	r0, r4
 8016c02:	bd10      	pop	{r4, pc}

08016c04 <rcl_node_options_copy>:
 8016c04:	b1d0      	cbz	r0, 8016c3c <rcl_node_options_copy+0x38>
 8016c06:	b570      	push	{r4, r5, r6, lr}
 8016c08:	460c      	mov	r4, r1
 8016c0a:	b1a9      	cbz	r1, 8016c38 <rcl_node_options_copy+0x34>
 8016c0c:	4288      	cmp	r0, r1
 8016c0e:	4684      	mov	ip, r0
 8016c10:	d012      	beq.n	8016c38 <rcl_node_options_copy+0x34>
 8016c12:	4605      	mov	r5, r0
 8016c14:	8a86      	ldrh	r6, [r0, #20]
 8016c16:	468e      	mov	lr, r1
 8016c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016c1a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016c1e:	682b      	ldr	r3, [r5, #0]
 8016c20:	f8ce 3000 	str.w	r3, [lr]
 8016c24:	f10c 0118 	add.w	r1, ip, #24
 8016c28:	2250      	movs	r2, #80	@ 0x50
 8016c2a:	82a6      	strh	r6, [r4, #20]
 8016c2c:	f104 0018 	add.w	r0, r4, #24
 8016c30:	f007 f85d 	bl	801dcee <memcpy>
 8016c34:	2000      	movs	r0, #0
 8016c36:	bd70      	pop	{r4, r5, r6, pc}
 8016c38:	200b      	movs	r0, #11
 8016c3a:	bd70      	pop	{r4, r5, r6, pc}
 8016c3c:	200b      	movs	r0, #11
 8016c3e:	4770      	bx	lr

08016c40 <rcl_node_options_fini>:
 8016c40:	b1c0      	cbz	r0, 8016c74 <rcl_node_options_fini+0x34>
 8016c42:	b500      	push	{lr}
 8016c44:	4684      	mov	ip, r0
 8016c46:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016c4a:	b087      	sub	sp, #28
 8016c4c:	f10d 0e04 	add.w	lr, sp, #4
 8016c50:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016c54:	f8dc 3000 	ldr.w	r3, [ip]
 8016c58:	f8ce 3000 	str.w	r3, [lr]
 8016c5c:	a801      	add	r0, sp, #4
 8016c5e:	f7f8 fbf5 	bl	800f44c <rcutils_allocator_is_valid>
 8016c62:	b118      	cbz	r0, 8016c6c <rcl_node_options_fini+0x2c>
 8016c64:	2000      	movs	r0, #0
 8016c66:	b007      	add	sp, #28
 8016c68:	f85d fb04 	ldr.w	pc, [sp], #4
 8016c6c:	200b      	movs	r0, #11
 8016c6e:	b007      	add	sp, #28
 8016c70:	f85d fb04 	ldr.w	pc, [sp], #4
 8016c74:	200b      	movs	r0, #11
 8016c76:	4770      	bx	lr

08016c78 <rcl_node_resolve_name>:
 8016c78:	b082      	sub	sp, #8
 8016c7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c7e:	b091      	sub	sp, #68	@ 0x44
 8016c80:	ac1a      	add	r4, sp, #104	@ 0x68
 8016c82:	e884 000c 	stmia.w	r4, {r2, r3}
 8016c86:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8016c8a:	2800      	cmp	r0, #0
 8016c8c:	d03a      	beq.n	8016d04 <rcl_node_resolve_name+0x8c>
 8016c8e:	460c      	mov	r4, r1
 8016c90:	4605      	mov	r5, r0
 8016c92:	f7ff ff7b 	bl	8016b8c <rcl_node_get_options>
 8016c96:	b370      	cbz	r0, 8016cf6 <rcl_node_resolve_name+0x7e>
 8016c98:	4628      	mov	r0, r5
 8016c9a:	f7ff ff67 	bl	8016b6c <rcl_node_get_name>
 8016c9e:	4681      	mov	r9, r0
 8016ca0:	4628      	mov	r0, r5
 8016ca2:	f7ff ff6b 	bl	8016b7c <rcl_node_get_namespace>
 8016ca6:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8016caa:	4607      	mov	r7, r0
 8016cac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016cb0:	ad0b      	add	r5, sp, #44	@ 0x2c
 8016cb2:	46ac      	mov	ip, r5
 8016cb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016cb8:	f8de 3000 	ldr.w	r3, [lr]
 8016cbc:	f8cc 3000 	str.w	r3, [ip]
 8016cc0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8016cc2:	b1fb      	cbz	r3, 8016d04 <rcl_node_resolve_name+0x8c>
 8016cc4:	468a      	mov	sl, r1
 8016cc6:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8016cca:	f002 fddd 	bl	8019888 <rcutils_get_zero_initialized_string_map>
 8016cce:	ab10      	add	r3, sp, #64	@ 0x40
 8016cd0:	9008      	str	r0, [sp, #32]
 8016cd2:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8016cd6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016cda:	2100      	movs	r1, #0
 8016cdc:	e895 000c 	ldmia.w	r5, {r2, r3}
 8016ce0:	a808      	add	r0, sp, #32
 8016ce2:	f002 fe2b 	bl	801993c <rcutils_string_map_init>
 8016ce6:	4606      	mov	r6, r0
 8016ce8:	b170      	cbz	r0, 8016d08 <rcl_node_resolve_name+0x90>
 8016cea:	f7f8 fbbd 	bl	800f468 <rcutils_get_error_string>
 8016cee:	f7f8 fbd3 	bl	800f498 <rcutils_reset_error>
 8016cf2:	2e0a      	cmp	r6, #10
 8016cf4:	d000      	beq.n	8016cf8 <rcl_node_resolve_name+0x80>
 8016cf6:	2601      	movs	r6, #1
 8016cf8:	4630      	mov	r0, r6
 8016cfa:	b011      	add	sp, #68	@ 0x44
 8016cfc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d00:	b002      	add	sp, #8
 8016d02:	4770      	bx	lr
 8016d04:	260b      	movs	r6, #11
 8016d06:	e7f7      	b.n	8016cf8 <rcl_node_resolve_name+0x80>
 8016d08:	9009      	str	r0, [sp, #36]	@ 0x24
 8016d0a:	9007      	str	r0, [sp, #28]
 8016d0c:	a808      	add	r0, sp, #32
 8016d0e:	f005 fbfd 	bl	801c50c <rcl_get_default_topic_name_substitutions>
 8016d12:	4606      	mov	r6, r0
 8016d14:	b1b0      	cbz	r0, 8016d44 <rcl_node_resolve_name+0xcc>
 8016d16:	280a      	cmp	r0, #10
 8016d18:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8016d1c:	d000      	beq.n	8016d20 <rcl_node_resolve_name+0xa8>
 8016d1e:	2601      	movs	r6, #1
 8016d20:	a808      	add	r0, sp, #32
 8016d22:	f002 fe49 	bl	80199b8 <rcutils_string_map_fini>
 8016d26:	2800      	cmp	r0, #0
 8016d28:	d132      	bne.n	8016d90 <rcl_node_resolve_name+0x118>
 8016d2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016d2c:	4659      	mov	r1, fp
 8016d2e:	47d0      	blx	sl
 8016d30:	4659      	mov	r1, fp
 8016d32:	4648      	mov	r0, r9
 8016d34:	47d0      	blx	sl
 8016d36:	f1b8 0f00 	cmp.w	r8, #0
 8016d3a:	d0dd      	beq.n	8016cf8 <rcl_node_resolve_name+0x80>
 8016d3c:	2e67      	cmp	r6, #103	@ 0x67
 8016d3e:	bf08      	it	eq
 8016d40:	2668      	moveq	r6, #104	@ 0x68
 8016d42:	e7d9      	b.n	8016cf8 <rcl_node_resolve_name+0x80>
 8016d44:	ab09      	add	r3, sp, #36	@ 0x24
 8016d46:	9305      	str	r3, [sp, #20]
 8016d48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016d4a:	46ec      	mov	ip, sp
 8016d4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016d50:	682b      	ldr	r3, [r5, #0]
 8016d52:	f8cc 3000 	str.w	r3, [ip]
 8016d56:	463a      	mov	r2, r7
 8016d58:	4649      	mov	r1, r9
 8016d5a:	4620      	mov	r0, r4
 8016d5c:	ab08      	add	r3, sp, #32
 8016d5e:	f005 fa77 	bl	801c250 <rcl_expand_topic_name>
 8016d62:	4606      	mov	r6, r0
 8016d64:	b9c8      	cbnz	r0, 8016d9a <rcl_node_resolve_name+0x122>
 8016d66:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8016d6a:	9009      	str	r0, [sp, #36]	@ 0x24
 8016d6c:	4602      	mov	r2, r0
 8016d6e:	a90a      	add	r1, sp, #40	@ 0x28
 8016d70:	4648      	mov	r0, r9
 8016d72:	f002 ff7f 	bl	8019c74 <rmw_validate_full_topic_name>
 8016d76:	b998      	cbnz	r0, 8016da0 <rcl_node_resolve_name+0x128>
 8016d78:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8016d7a:	bb14      	cbnz	r4, 8016dc2 <rcl_node_resolve_name+0x14a>
 8016d7c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8016d7e:	a808      	add	r0, sp, #32
 8016d80:	f8c3 9000 	str.w	r9, [r3]
 8016d84:	f002 fe18 	bl	80199b8 <rcutils_string_map_fini>
 8016d88:	4606      	mov	r6, r0
 8016d8a:	b978      	cbnz	r0, 8016dac <rcl_node_resolve_name+0x134>
 8016d8c:	4681      	mov	r9, r0
 8016d8e:	e7cc      	b.n	8016d2a <rcl_node_resolve_name+0xb2>
 8016d90:	f7f8 fb6a 	bl	800f468 <rcutils_get_error_string>
 8016d94:	f7f8 fb80 	bl	800f498 <rcutils_reset_error>
 8016d98:	e7c7      	b.n	8016d2a <rcl_node_resolve_name+0xb2>
 8016d9a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8016d9e:	e7bf      	b.n	8016d20 <rcl_node_resolve_name+0xa8>
 8016da0:	f7f8 fb62 	bl	800f468 <rcutils_get_error_string>
 8016da4:	2601      	movs	r6, #1
 8016da6:	f7f8 fb77 	bl	800f498 <rcutils_reset_error>
 8016daa:	e7b9      	b.n	8016d20 <rcl_node_resolve_name+0xa8>
 8016dac:	f7f8 fb5c 	bl	800f468 <rcutils_get_error_string>
 8016db0:	f7f8 fb72 	bl	800f498 <rcutils_reset_error>
 8016db4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016db6:	4659      	mov	r1, fp
 8016db8:	47d0      	blx	sl
 8016dba:	4659      	mov	r1, fp
 8016dbc:	4620      	mov	r0, r4
 8016dbe:	47d0      	blx	sl
 8016dc0:	e799      	b.n	8016cf6 <rcl_node_resolve_name+0x7e>
 8016dc2:	2667      	movs	r6, #103	@ 0x67
 8016dc4:	e7ac      	b.n	8016d20 <rcl_node_resolve_name+0xa8>
 8016dc6:	bf00      	nop

08016dc8 <exact_match_lookup>:
 8016dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016dca:	f102 0708 	add.w	r7, r2, #8
 8016dce:	460b      	mov	r3, r1
 8016dd0:	4614      	mov	r4, r2
 8016dd2:	4606      	mov	r6, r0
 8016dd4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8016dd8:	b085      	sub	sp, #20
 8016dda:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016dde:	4618      	mov	r0, r3
 8016de0:	4918      	ldr	r1, [pc, #96]	@ (8016e44 <exact_match_lookup+0x7c>)
 8016de2:	e894 000c 	ldmia.w	r4, {r2, r3}
 8016de6:	f002 fbc3 	bl	8019570 <rcutils_join_path>
 8016dea:	7833      	ldrb	r3, [r6, #0]
 8016dec:	2b2f      	cmp	r3, #47	@ 0x2f
 8016dee:	4605      	mov	r5, r0
 8016df0:	d022      	beq.n	8016e38 <exact_match_lookup+0x70>
 8016df2:	f104 030c 	add.w	r3, r4, #12
 8016df6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016dfa:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016dfe:	1c70      	adds	r0, r6, #1
 8016e00:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016e04:	f002 fbba 	bl	801957c <rcutils_to_native_path>
 8016e08:	4606      	mov	r6, r0
 8016e0a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8016e0e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016e12:	4631      	mov	r1, r6
 8016e14:	e894 000c 	ldmia.w	r4, {r2, r3}
 8016e18:	4628      	mov	r0, r5
 8016e1a:	f002 fba9 	bl	8019570 <rcutils_join_path>
 8016e1e:	6863      	ldr	r3, [r4, #4]
 8016e20:	6921      	ldr	r1, [r4, #16]
 8016e22:	4607      	mov	r7, r0
 8016e24:	4630      	mov	r0, r6
 8016e26:	4798      	blx	r3
 8016e28:	4628      	mov	r0, r5
 8016e2a:	6863      	ldr	r3, [r4, #4]
 8016e2c:	6921      	ldr	r1, [r4, #16]
 8016e2e:	4798      	blx	r3
 8016e30:	463d      	mov	r5, r7
 8016e32:	4628      	mov	r0, r5
 8016e34:	b005      	add	sp, #20
 8016e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e38:	7873      	ldrb	r3, [r6, #1]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d1d9      	bne.n	8016df2 <exact_match_lookup+0x2a>
 8016e3e:	4628      	mov	r0, r5
 8016e40:	b005      	add	sp, #20
 8016e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e44:	080214c4 	.word	0x080214c4

08016e48 <rcl_get_secure_root>:
 8016e48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016e4c:	b085      	sub	sp, #20
 8016e4e:	b168      	cbz	r0, 8016e6c <rcl_get_secure_root+0x24>
 8016e50:	4607      	mov	r7, r0
 8016e52:	4608      	mov	r0, r1
 8016e54:	460c      	mov	r4, r1
 8016e56:	f7f8 faf9 	bl	800f44c <rcutils_allocator_is_valid>
 8016e5a:	b138      	cbz	r0, 8016e6c <rcl_get_secure_root+0x24>
 8016e5c:	2300      	movs	r3, #0
 8016e5e:	482d      	ldr	r0, [pc, #180]	@ (8016f14 <rcl_get_secure_root+0xcc>)
 8016e60:	9303      	str	r3, [sp, #12]
 8016e62:	a903      	add	r1, sp, #12
 8016e64:	f002 fb6a 	bl	801953c <rcutils_get_env>
 8016e68:	4605      	mov	r5, r0
 8016e6a:	b120      	cbz	r0, 8016e76 <rcl_get_secure_root+0x2e>
 8016e6c:	2500      	movs	r5, #0
 8016e6e:	4628      	mov	r0, r5
 8016e70:	b005      	add	sp, #20
 8016e72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e76:	9b03      	ldr	r3, [sp, #12]
 8016e78:	781a      	ldrb	r2, [r3, #0]
 8016e7a:	2a00      	cmp	r2, #0
 8016e7c:	d0f6      	beq.n	8016e6c <rcl_get_secure_root+0x24>
 8016e7e:	f104 090c 	add.w	r9, r4, #12
 8016e82:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016e86:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016e90:	f002 fc9a 	bl	80197c8 <rcutils_strdup>
 8016e94:	4680      	mov	r8, r0
 8016e96:	2800      	cmp	r0, #0
 8016e98:	d0e8      	beq.n	8016e6c <rcl_get_secure_root+0x24>
 8016e9a:	481f      	ldr	r0, [pc, #124]	@ (8016f18 <rcl_get_secure_root+0xd0>)
 8016e9c:	9503      	str	r5, [sp, #12]
 8016e9e:	a903      	add	r1, sp, #12
 8016ea0:	f002 fb4c 	bl	801953c <rcutils_get_env>
 8016ea4:	b160      	cbz	r0, 8016ec0 <rcl_get_secure_root+0x78>
 8016ea6:	2600      	movs	r6, #0
 8016ea8:	6863      	ldr	r3, [r4, #4]
 8016eaa:	6921      	ldr	r1, [r4, #16]
 8016eac:	4630      	mov	r0, r6
 8016eae:	4798      	blx	r3
 8016eb0:	4640      	mov	r0, r8
 8016eb2:	6863      	ldr	r3, [r4, #4]
 8016eb4:	6921      	ldr	r1, [r4, #16]
 8016eb6:	4798      	blx	r3
 8016eb8:	4628      	mov	r0, r5
 8016eba:	b005      	add	sp, #20
 8016ebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ec0:	9b03      	ldr	r3, [sp, #12]
 8016ec2:	781e      	ldrb	r6, [r3, #0]
 8016ec4:	b1f6      	cbz	r6, 8016f04 <rcl_get_secure_root+0xbc>
 8016ec6:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016eca:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016ece:	4618      	mov	r0, r3
 8016ed0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016ed4:	f002 fc78 	bl	80197c8 <rcutils_strdup>
 8016ed8:	4606      	mov	r6, r0
 8016eda:	2800      	cmp	r0, #0
 8016edc:	d0e3      	beq.n	8016ea6 <rcl_get_secure_root+0x5e>
 8016ede:	4622      	mov	r2, r4
 8016ee0:	4641      	mov	r1, r8
 8016ee2:	f7ff ff71 	bl	8016dc8 <exact_match_lookup>
 8016ee6:	4605      	mov	r5, r0
 8016ee8:	2d00      	cmp	r5, #0
 8016eea:	d0dd      	beq.n	8016ea8 <rcl_get_secure_root+0x60>
 8016eec:	4628      	mov	r0, r5
 8016eee:	f002 fb3d 	bl	801956c <rcutils_is_directory>
 8016ef2:	4607      	mov	r7, r0
 8016ef4:	2800      	cmp	r0, #0
 8016ef6:	d1d7      	bne.n	8016ea8 <rcl_get_secure_root+0x60>
 8016ef8:	4628      	mov	r0, r5
 8016efa:	6863      	ldr	r3, [r4, #4]
 8016efc:	6921      	ldr	r1, [r4, #16]
 8016efe:	4798      	blx	r3
 8016f00:	463d      	mov	r5, r7
 8016f02:	e7d1      	b.n	8016ea8 <rcl_get_secure_root+0x60>
 8016f04:	4622      	mov	r2, r4
 8016f06:	4638      	mov	r0, r7
 8016f08:	4641      	mov	r1, r8
 8016f0a:	f7ff ff5d 	bl	8016dc8 <exact_match_lookup>
 8016f0e:	4605      	mov	r5, r0
 8016f10:	e7ea      	b.n	8016ee8 <rcl_get_secure_root+0xa0>
 8016f12:	bf00      	nop
 8016f14:	080214d0 	.word	0x080214d0
 8016f18:	080214e8 	.word	0x080214e8

08016f1c <rcl_get_security_options_from_environment>:
 8016f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f1e:	b083      	sub	sp, #12
 8016f20:	2300      	movs	r3, #0
 8016f22:	4605      	mov	r5, r0
 8016f24:	460e      	mov	r6, r1
 8016f26:	481a      	ldr	r0, [pc, #104]	@ (8016f90 <rcl_get_security_options_from_environment+0x74>)
 8016f28:	9301      	str	r3, [sp, #4]
 8016f2a:	a901      	add	r1, sp, #4
 8016f2c:	4617      	mov	r7, r2
 8016f2e:	f002 fb05 	bl	801953c <rcutils_get_env>
 8016f32:	b110      	cbz	r0, 8016f3a <rcl_get_security_options_from_environment+0x1e>
 8016f34:	2001      	movs	r0, #1
 8016f36:	b003      	add	sp, #12
 8016f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f3a:	4604      	mov	r4, r0
 8016f3c:	4915      	ldr	r1, [pc, #84]	@ (8016f94 <rcl_get_security_options_from_environment+0x78>)
 8016f3e:	9801      	ldr	r0, [sp, #4]
 8016f40:	f7e9 f96e 	bl	8000220 <strcmp>
 8016f44:	b9b0      	cbnz	r0, 8016f74 <rcl_get_security_options_from_environment+0x58>
 8016f46:	9001      	str	r0, [sp, #4]
 8016f48:	b1c7      	cbz	r7, 8016f7c <rcl_get_security_options_from_environment+0x60>
 8016f4a:	4813      	ldr	r0, [pc, #76]	@ (8016f98 <rcl_get_security_options_from_environment+0x7c>)
 8016f4c:	a901      	add	r1, sp, #4
 8016f4e:	f002 faf5 	bl	801953c <rcutils_get_env>
 8016f52:	2800      	cmp	r0, #0
 8016f54:	d1ee      	bne.n	8016f34 <rcl_get_security_options_from_environment+0x18>
 8016f56:	4911      	ldr	r1, [pc, #68]	@ (8016f9c <rcl_get_security_options_from_environment+0x80>)
 8016f58:	9801      	ldr	r0, [sp, #4]
 8016f5a:	f7e9 f961 	bl	8000220 <strcmp>
 8016f5e:	fab0 f080 	clz	r0, r0
 8016f62:	0940      	lsrs	r0, r0, #5
 8016f64:	7038      	strb	r0, [r7, #0]
 8016f66:	4631      	mov	r1, r6
 8016f68:	4628      	mov	r0, r5
 8016f6a:	f7ff ff6d 	bl	8016e48 <rcl_get_secure_root>
 8016f6e:	b138      	cbz	r0, 8016f80 <rcl_get_security_options_from_environment+0x64>
 8016f70:	6078      	str	r0, [r7, #4]
 8016f72:	e000      	b.n	8016f76 <rcl_get_security_options_from_environment+0x5a>
 8016f74:	703c      	strb	r4, [r7, #0]
 8016f76:	2000      	movs	r0, #0
 8016f78:	b003      	add	sp, #12
 8016f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f7c:	200b      	movs	r0, #11
 8016f7e:	e7da      	b.n	8016f36 <rcl_get_security_options_from_environment+0x1a>
 8016f80:	7838      	ldrb	r0, [r7, #0]
 8016f82:	f1a0 0001 	sub.w	r0, r0, #1
 8016f86:	fab0 f080 	clz	r0, r0
 8016f8a:	0940      	lsrs	r0, r0, #5
 8016f8c:	e7d3      	b.n	8016f36 <rcl_get_security_options_from_environment+0x1a>
 8016f8e:	bf00      	nop
 8016f90:	08021488 	.word	0x08021488
 8016f94:	0802149c 	.word	0x0802149c
 8016f98:	080214a4 	.word	0x080214a4
 8016f9c:	080214bc 	.word	0x080214bc

08016fa0 <rcl_get_zero_initialized_service>:
 8016fa0:	4b01      	ldr	r3, [pc, #4]	@ (8016fa8 <rcl_get_zero_initialized_service+0x8>)
 8016fa2:	6818      	ldr	r0, [r3, #0]
 8016fa4:	4770      	bx	lr
 8016fa6:	bf00      	nop
 8016fa8:	08021508 	.word	0x08021508

08016fac <rcl_service_init>:
 8016fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016fb0:	b086      	sub	sp, #24
 8016fb2:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8016fb4:	2d00      	cmp	r5, #0
 8016fb6:	d049      	beq.n	801704c <rcl_service_init+0xa0>
 8016fb8:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8016fbc:	4604      	mov	r4, r0
 8016fbe:	4648      	mov	r0, r9
 8016fc0:	4688      	mov	r8, r1
 8016fc2:	4617      	mov	r7, r2
 8016fc4:	461e      	mov	r6, r3
 8016fc6:	f7f8 fa41 	bl	800f44c <rcutils_allocator_is_valid>
 8016fca:	2800      	cmp	r0, #0
 8016fcc:	d03e      	beq.n	801704c <rcl_service_init+0xa0>
 8016fce:	2c00      	cmp	r4, #0
 8016fd0:	d03c      	beq.n	801704c <rcl_service_init+0xa0>
 8016fd2:	4640      	mov	r0, r8
 8016fd4:	f7ff fdc0 	bl	8016b58 <rcl_node_is_valid>
 8016fd8:	2800      	cmp	r0, #0
 8016fda:	d041      	beq.n	8017060 <rcl_service_init+0xb4>
 8016fdc:	2f00      	cmp	r7, #0
 8016fde:	d035      	beq.n	801704c <rcl_service_init+0xa0>
 8016fe0:	2e00      	cmp	r6, #0
 8016fe2:	d033      	beq.n	801704c <rcl_service_init+0xa0>
 8016fe4:	f8d4 a000 	ldr.w	sl, [r4]
 8016fe8:	f1ba 0f00 	cmp.w	sl, #0
 8016fec:	d133      	bne.n	8017056 <rcl_service_init+0xaa>
 8016fee:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 8016ff2:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8016ff6:	2001      	movs	r0, #1
 8016ff8:	4798      	blx	r3
 8016ffa:	6020      	str	r0, [r4, #0]
 8016ffc:	2800      	cmp	r0, #0
 8016ffe:	d075      	beq.n	80170ec <rcl_service_init+0x140>
 8017000:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8017004:	2201      	movs	r2, #1
 8017006:	f8cd a010 	str.w	sl, [sp, #16]
 801700a:	9005      	str	r0, [sp, #20]
 801700c:	9203      	str	r2, [sp, #12]
 801700e:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 8017012:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017016:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801701a:	4631      	mov	r1, r6
 801701c:	e899 000c 	ldmia.w	r9, {r2, r3}
 8017020:	4640      	mov	r0, r8
 8017022:	f7ff fe29 	bl	8016c78 <rcl_node_resolve_name>
 8017026:	4606      	mov	r6, r0
 8017028:	b1f8      	cbz	r0, 801706a <rcl_service_init+0xbe>
 801702a:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 801702e:	2b01      	cmp	r3, #1
 8017030:	6820      	ldr	r0, [r4, #0]
 8017032:	d943      	bls.n	80170bc <rcl_service_init+0x110>
 8017034:	2e0a      	cmp	r6, #10
 8017036:	bf18      	it	ne
 8017038:	2601      	movne	r6, #1
 801703a:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 801703c:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 801703e:	4798      	blx	r3
 8017040:	2300      	movs	r3, #0
 8017042:	4630      	mov	r0, r6
 8017044:	6023      	str	r3, [r4, #0]
 8017046:	b006      	add	sp, #24
 8017048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801704c:	260b      	movs	r6, #11
 801704e:	4630      	mov	r0, r6
 8017050:	b006      	add	sp, #24
 8017052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017056:	2664      	movs	r6, #100	@ 0x64
 8017058:	4630      	mov	r0, r6
 801705a:	b006      	add	sp, #24
 801705c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017060:	26c8      	movs	r6, #200	@ 0xc8
 8017062:	4630      	mov	r0, r6
 8017064:	b006      	add	sp, #24
 8017066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801706a:	4640      	mov	r0, r8
 801706c:	f7ff fd96 	bl	8016b9c <rcl_node_get_rmw_handle>
 8017070:	6826      	ldr	r6, [r4, #0]
 8017072:	4639      	mov	r1, r7
 8017074:	f8d6 2110 	ldr.w	r2, [r6, #272]	@ 0x110
 8017078:	462b      	mov	r3, r5
 801707a:	f7f8 ffaf 	bl	800ffdc <rmw_create_service>
 801707e:	6821      	ldr	r1, [r4, #0]
 8017080:	f8c6 0108 	str.w	r0, [r6, #264]	@ 0x108
 8017084:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 8017088:	b390      	cbz	r0, 80170f0 <rcl_service_init+0x144>
 801708a:	3168      	adds	r1, #104	@ 0x68
 801708c:	f7f9 f8ca 	bl	8010224 <rmw_service_request_subscription_get_actual_qos>
 8017090:	b9b0      	cbnz	r0, 80170c0 <rcl_service_init+0x114>
 8017092:	6823      	ldr	r3, [r4, #0]
 8017094:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8017098:	f103 01b8 	add.w	r1, r3, #184	@ 0xb8
 801709c:	f7f9 f8b4 	bl	8010208 <rmw_service_response_publisher_get_actual_qos>
 80170a0:	4606      	mov	r6, r0
 80170a2:	b968      	cbnz	r0, 80170c0 <rcl_service_init+0x114>
 80170a4:	6820      	ldr	r0, [r4, #0]
 80170a6:	f895 3048 	ldrb.w	r3, [r5, #72]	@ 0x48
 80170aa:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 80170ae:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 80170b2:	2268      	movs	r2, #104	@ 0x68
 80170b4:	4629      	mov	r1, r5
 80170b6:	f006 fe1a 	bl	801dcee <memcpy>
 80170ba:	e7c8      	b.n	801704e <rcl_service_init+0xa2>
 80170bc:	2668      	movs	r6, #104	@ 0x68
 80170be:	e7bc      	b.n	801703a <rcl_service_init+0x8e>
 80170c0:	f7ff fa08 	bl	80164d4 <rcl_convert_rmw_ret_to_rcl_ret>
 80170c4:	4606      	mov	r6, r0
 80170c6:	4640      	mov	r0, r8
 80170c8:	f7ff fd68 	bl	8016b9c <rcl_node_get_rmw_handle>
 80170cc:	6823      	ldr	r3, [r4, #0]
 80170ce:	f8d3 1108 	ldr.w	r1, [r3, #264]	@ 0x108
 80170d2:	f7f9 f855 	bl	8010180 <rmw_destroy_service>
 80170d6:	6821      	ldr	r1, [r4, #0]
 80170d8:	f8d1 0110 	ldr.w	r0, [r1, #272]	@ 0x110
 80170dc:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80170de:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80170e0:	4798      	blx	r3
 80170e2:	6820      	ldr	r0, [r4, #0]
 80170e4:	2300      	movs	r3, #0
 80170e6:	f8c0 3110 	str.w	r3, [r0, #272]	@ 0x110
 80170ea:	e7a6      	b.n	801703a <rcl_service_init+0x8e>
 80170ec:	260a      	movs	r6, #10
 80170ee:	e7ae      	b.n	801704e <rcl_service_init+0xa2>
 80170f0:	2601      	movs	r6, #1
 80170f2:	e7f1      	b.n	80170d8 <rcl_service_init+0x12c>

080170f4 <rcl_service_get_default_options>:
 80170f4:	b530      	push	{r4, r5, lr}
 80170f6:	4d0f      	ldr	r5, [pc, #60]	@ (8017134 <rcl_service_get_default_options+0x40>)
 80170f8:	490f      	ldr	r1, [pc, #60]	@ (8017138 <rcl_service_get_default_options+0x44>)
 80170fa:	b087      	sub	sp, #28
 80170fc:	4604      	mov	r4, r0
 80170fe:	2250      	movs	r2, #80	@ 0x50
 8017100:	4628      	mov	r0, r5
 8017102:	f006 fdf4 	bl	801dcee <memcpy>
 8017106:	4668      	mov	r0, sp
 8017108:	f7f8 f974 	bl	800f3f4 <rcutils_get_default_allocator>
 801710c:	46ec      	mov	ip, sp
 801710e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017112:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8017116:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801711a:	2268      	movs	r2, #104	@ 0x68
 801711c:	f8dc 3000 	ldr.w	r3, [ip]
 8017120:	f8ce 3000 	str.w	r3, [lr]
 8017124:	4629      	mov	r1, r5
 8017126:	4620      	mov	r0, r4
 8017128:	f006 fde1 	bl	801dcee <memcpy>
 801712c:	4620      	mov	r0, r4
 801712e:	b007      	add	sp, #28
 8017130:	bd30      	pop	{r4, r5, pc}
 8017132:	bf00      	nop
 8017134:	2000f3b8 	.word	0x2000f3b8
 8017138:	08021510 	.word	0x08021510

0801713c <rcl_service_get_rmw_handle>:
 801713c:	b118      	cbz	r0, 8017146 <rcl_service_get_rmw_handle+0xa>
 801713e:	6800      	ldr	r0, [r0, #0]
 8017140:	b108      	cbz	r0, 8017146 <rcl_service_get_rmw_handle+0xa>
 8017142:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8017146:	4770      	bx	lr

08017148 <rcl_take_request>:
 8017148:	b5f0      	push	{r4, r5, r6, r7, lr}
 801714a:	468e      	mov	lr, r1
 801714c:	460c      	mov	r4, r1
 801714e:	4617      	mov	r7, r2
 8017150:	4605      	mov	r5, r0
 8017152:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017156:	b091      	sub	sp, #68	@ 0x44
 8017158:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 801715c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017160:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8017164:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017168:	b30d      	cbz	r5, 80171ae <rcl_take_request+0x66>
 801716a:	682b      	ldr	r3, [r5, #0]
 801716c:	b1fb      	cbz	r3, 80171ae <rcl_take_request+0x66>
 801716e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8017172:	b1e0      	cbz	r0, 80171ae <rcl_take_request+0x66>
 8017174:	b397      	cbz	r7, 80171dc <rcl_take_request+0x94>
 8017176:	2300      	movs	r3, #0
 8017178:	f88d 3017 	strb.w	r3, [sp, #23]
 801717c:	463a      	mov	r2, r7
 801717e:	f10d 0317 	add.w	r3, sp, #23
 8017182:	a906      	add	r1, sp, #24
 8017184:	f003 f8d6 	bl	801a334 <rmw_take_request>
 8017188:	4606      	mov	r6, r0
 801718a:	b198      	cbz	r0, 80171b4 <rcl_take_request+0x6c>
 801718c:	280a      	cmp	r0, #10
 801718e:	bf18      	it	ne
 8017190:	2601      	movne	r6, #1
 8017192:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8017196:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801719a:	46a6      	mov	lr, r4
 801719c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80171a0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80171a4:	e88e 0003 	stmia.w	lr, {r0, r1}
 80171a8:	4630      	mov	r0, r6
 80171aa:	b011      	add	sp, #68	@ 0x44
 80171ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171ae:	f44f 7616 	mov.w	r6, #600	@ 0x258
 80171b2:	e7ee      	b.n	8017192 <rcl_take_request+0x4a>
 80171b4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80171b8:	b193      	cbz	r3, 80171e0 <rcl_take_request+0x98>
 80171ba:	682b      	ldr	r3, [r5, #0]
 80171bc:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
 80171c0:	2800      	cmp	r0, #0
 80171c2:	d0e6      	beq.n	8017192 <rcl_take_request+0x4a>
 80171c4:	463a      	mov	r2, r7
 80171c6:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	@ 0x38
 80171ca:	ab0a      	add	r3, sp, #40	@ 0x28
 80171cc:	e9cd 6700 	strd	r6, r7, [sp]
 80171d0:	9302      	str	r3, [sp, #8]
 80171d2:	2101      	movs	r1, #1
 80171d4:	f000 f844 	bl	8017260 <rcl_send_service_event_message>
 80171d8:	4606      	mov	r6, r0
 80171da:	e7da      	b.n	8017192 <rcl_take_request+0x4a>
 80171dc:	260b      	movs	r6, #11
 80171de:	e7d8      	b.n	8017192 <rcl_take_request+0x4a>
 80171e0:	f240 2659 	movw	r6, #601	@ 0x259
 80171e4:	e7d5      	b.n	8017192 <rcl_take_request+0x4a>
 80171e6:	bf00      	nop

080171e8 <rcl_send_response>:
 80171e8:	b350      	cbz	r0, 8017240 <rcl_send_response+0x58>
 80171ea:	b570      	push	{r4, r5, r6, lr}
 80171ec:	6803      	ldr	r3, [r0, #0]
 80171ee:	b084      	sub	sp, #16
 80171f0:	4604      	mov	r4, r0
 80171f2:	b1cb      	cbz	r3, 8017228 <rcl_send_response+0x40>
 80171f4:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80171f8:	b1b0      	cbz	r0, 8017228 <rcl_send_response+0x40>
 80171fa:	460e      	mov	r6, r1
 80171fc:	b1e9      	cbz	r1, 801723a <rcl_send_response+0x52>
 80171fe:	4615      	mov	r5, r2
 8017200:	b1da      	cbz	r2, 801723a <rcl_send_response+0x52>
 8017202:	f003 f8f5 	bl	801a3f0 <rmw_send_response>
 8017206:	b998      	cbnz	r0, 8017230 <rcl_send_response+0x48>
 8017208:	6823      	ldr	r3, [r4, #0]
 801720a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801720e:	b16b      	cbz	r3, 801722c <rcl_send_response+0x44>
 8017210:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 8017214:	462a      	mov	r2, r5
 8017216:	e9cd 0100 	strd	r0, r1, [sp]
 801721a:	9602      	str	r6, [sp, #8]
 801721c:	2102      	movs	r1, #2
 801721e:	4618      	mov	r0, r3
 8017220:	f000 f81e 	bl	8017260 <rcl_send_service_event_message>
 8017224:	b004      	add	sp, #16
 8017226:	bd70      	pop	{r4, r5, r6, pc}
 8017228:	f44f 7016 	mov.w	r0, #600	@ 0x258
 801722c:	b004      	add	sp, #16
 801722e:	bd70      	pop	{r4, r5, r6, pc}
 8017230:	2802      	cmp	r0, #2
 8017232:	bf18      	it	ne
 8017234:	2001      	movne	r0, #1
 8017236:	b004      	add	sp, #16
 8017238:	bd70      	pop	{r4, r5, r6, pc}
 801723a:	200b      	movs	r0, #11
 801723c:	b004      	add	sp, #16
 801723e:	bd70      	pop	{r4, r5, r6, pc}
 8017240:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8017244:	4770      	bx	lr
 8017246:	bf00      	nop

08017248 <rcl_service_is_valid>:
 8017248:	b130      	cbz	r0, 8017258 <rcl_service_is_valid+0x10>
 801724a:	6800      	ldr	r0, [r0, #0]
 801724c:	b120      	cbz	r0, 8017258 <rcl_service_is_valid+0x10>
 801724e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8017252:	3800      	subs	r0, #0
 8017254:	bf18      	it	ne
 8017256:	2001      	movne	r0, #1
 8017258:	4770      	bx	lr
 801725a:	bf00      	nop
 801725c:	0000      	movs	r0, r0
	...

08017260 <rcl_send_service_event_message>:
 8017260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017262:	b093      	sub	sp, #76	@ 0x4c
 8017264:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8017266:	b17a      	cbz	r2, 8017288 <rcl_send_service_event_message+0x28>
 8017268:	b176      	cbz	r6, 8017288 <rcl_send_service_event_message+0x28>
 801726a:	4604      	mov	r4, r0
 801726c:	b150      	cbz	r0, 8017284 <rcl_send_service_event_message+0x24>
 801726e:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8017272:	b13b      	cbz	r3, 8017284 <rcl_send_service_event_message+0x24>
 8017274:	68c0      	ldr	r0, [r0, #12]
 8017276:	460f      	mov	r7, r1
 8017278:	4615      	mov	r5, r2
 801727a:	f000 f8fb 	bl	8017474 <rcl_clock_valid>
 801727e:	b108      	cbz	r0, 8017284 <rcl_send_service_event_message+0x24>
 8017280:	7a23      	ldrb	r3, [r4, #8]
 8017282:	b92b      	cbnz	r3, 8017290 <rcl_send_service_event_message+0x30>
 8017284:	2501      	movs	r5, #1
 8017286:	e000      	b.n	801728a <rcl_send_service_event_message+0x2a>
 8017288:	250b      	movs	r5, #11
 801728a:	4628      	mov	r0, r5
 801728c:	b013      	add	sp, #76	@ 0x4c
 801728e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017290:	f104 0e60 	add.w	lr, r4, #96	@ 0x60
 8017294:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017298:	f10d 0c0c 	add.w	ip, sp, #12
 801729c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80172a0:	f8de 3000 	ldr.w	r3, [lr]
 80172a4:	f8cc 3000 	str.w	r3, [ip]
 80172a8:	a803      	add	r0, sp, #12
 80172aa:	f7f8 f8cf 	bl	800f44c <rcutils_allocator_is_valid>
 80172ae:	2800      	cmp	r0, #0
 80172b0:	d0ea      	beq.n	8017288 <rcl_send_service_event_message+0x28>
 80172b2:	6820      	ldr	r0, [r4, #0]
 80172b4:	f7f7 f92c 	bl	800e510 <rcl_publisher_is_valid>
 80172b8:	2800      	cmp	r0, #0
 80172ba:	d045      	beq.n	8017348 <rcl_send_service_event_message+0xe8>
 80172bc:	4669      	mov	r1, sp
 80172be:	68e0      	ldr	r0, [r4, #12]
 80172c0:	f000 f950 	bl	8017564 <rcl_clock_get_now>
 80172c4:	4601      	mov	r1, r0
 80172c6:	2800      	cmp	r0, #0
 80172c8:	d13b      	bne.n	8017342 <rcl_send_service_event_message+0xe2>
 80172ca:	2220      	movs	r2, #32
 80172cc:	eb0d 0002 	add.w	r0, sp, r2
 80172d0:	f006 fc32 	bl	801db38 <memset>
 80172d4:	a324      	add	r3, pc, #144	@ (adr r3, 8017368 <rcl_send_service_event_message+0x108>)
 80172d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80172de:	f88d 7020 	strb.w	r7, [sp, #32]
 80172e2:	f7e9 fcc1 	bl	8000c68 <__aeabi_ldivmod>
 80172e6:	e9cd 0209 	strd	r0, r2, [sp, #36]	@ 0x24
 80172ea:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	@ 0x60
 80172ee:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80172f2:	7a23      	ldrb	r3, [r4, #8]
 80172f4:	6830      	ldr	r0, [r6, #0]
 80172f6:	6871      	ldr	r1, [r6, #4]
 80172f8:	68b2      	ldr	r2, [r6, #8]
 80172fa:	2b01      	cmp	r3, #1
 80172fc:	68f3      	ldr	r3, [r6, #12]
 80172fe:	bf08      	it	eq
 8017300:	2500      	moveq	r5, #0
 8017302:	ae0b      	add	r6, sp, #44	@ 0x2c
 8017304:	2f01      	cmp	r7, #1
 8017306:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8017308:	d821      	bhi.n	801734e <rcl_send_service_event_message+0xee>
 801730a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 801730e:	462a      	mov	r2, r5
 8017310:	a808      	add	r0, sp, #32
 8017312:	699d      	ldr	r5, [r3, #24]
 8017314:	a903      	add	r1, sp, #12
 8017316:	2300      	movs	r3, #0
 8017318:	47a8      	blx	r5
 801731a:	4606      	mov	r6, r0
 801731c:	2e00      	cmp	r6, #0
 801731e:	d0b1      	beq.n	8017284 <rcl_send_service_event_message+0x24>
 8017320:	4631      	mov	r1, r6
 8017322:	6820      	ldr	r0, [r4, #0]
 8017324:	2200      	movs	r2, #0
 8017326:	f7f7 f8cf 	bl	800e4c8 <rcl_publish>
 801732a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 801732e:	4605      	mov	r5, r0
 8017330:	69db      	ldr	r3, [r3, #28]
 8017332:	a903      	add	r1, sp, #12
 8017334:	4630      	mov	r0, r6
 8017336:	4798      	blx	r3
 8017338:	2d00      	cmp	r5, #0
 801733a:	d0a6      	beq.n	801728a <rcl_send_service_event_message+0x2a>
 801733c:	f7f8 f8ac 	bl	800f498 <rcutils_reset_error>
 8017340:	e7a3      	b.n	801728a <rcl_send_service_event_message+0x2a>
 8017342:	f7f8 f8a9 	bl	800f498 <rcutils_reset_error>
 8017346:	e79d      	b.n	8017284 <rcl_send_service_event_message+0x24>
 8017348:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 801734c:	e79d      	b.n	801728a <rcl_send_service_event_message+0x2a>
 801734e:	1eb9      	subs	r1, r7, #2
 8017350:	2901      	cmp	r1, #1
 8017352:	d8f6      	bhi.n	8017342 <rcl_send_service_event_message+0xe2>
 8017354:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8017358:	462b      	mov	r3, r5
 801735a:	a808      	add	r0, sp, #32
 801735c:	6995      	ldr	r5, [r2, #24]
 801735e:	a903      	add	r1, sp, #12
 8017360:	2200      	movs	r2, #0
 8017362:	47a8      	blx	r5
 8017364:	4606      	mov	r6, r0
 8017366:	e7d9      	b.n	801731c <rcl_send_service_event_message+0xbc>
 8017368:	3b9aca00 	.word	0x3b9aca00
 801736c:	00000000 	.word	0x00000000

08017370 <rcl_take>:
 8017370:	2800      	cmp	r0, #0
 8017372:	d04b      	beq.n	801740c <rcl_take+0x9c>
 8017374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017378:	4615      	mov	r5, r2
 801737a:	6802      	ldr	r2, [r0, #0]
 801737c:	b0a0      	sub	sp, #128	@ 0x80
 801737e:	4604      	mov	r4, r0
 8017380:	2a00      	cmp	r2, #0
 8017382:	d03b      	beq.n	80173fc <rcl_take+0x8c>
 8017384:	461f      	mov	r7, r3
 8017386:	f8d2 30c8 	ldr.w	r3, [r2, #200]	@ 0xc8
 801738a:	2b00      	cmp	r3, #0
 801738c:	d036      	beq.n	80173fc <rcl_take+0x8c>
 801738e:	460e      	mov	r6, r1
 8017390:	2900      	cmp	r1, #0
 8017392:	d039      	beq.n	8017408 <rcl_take+0x98>
 8017394:	2d00      	cmp	r5, #0
 8017396:	d03d      	beq.n	8017414 <rcl_take+0xa4>
 8017398:	a802      	add	r0, sp, #8
 801739a:	f002 fc63 	bl	8019c64 <rmw_get_zero_initialized_message_info>
 801739e:	6823      	ldr	r3, [r4, #0]
 80173a0:	f10d 0c08 	add.w	ip, sp, #8
 80173a4:	f8d3 40c8 	ldr.w	r4, [r3, #200]	@ 0xc8
 80173a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80173ac:	46ae      	mov	lr, r5
 80173ae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80173b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80173b6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80173ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80173be:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80173c2:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80173c6:	462b      	mov	r3, r5
 80173c8:	e88e 0003 	stmia.w	lr, {r0, r1}
 80173cc:	f04f 0800 	mov.w	r8, #0
 80173d0:	f10d 0247 	add.w	r2, sp, #71	@ 0x47
 80173d4:	4631      	mov	r1, r6
 80173d6:	4620      	mov	r0, r4
 80173d8:	f88d 8047 	strb.w	r8, [sp, #71]	@ 0x47
 80173dc:	9700      	str	r7, [sp, #0]
 80173de:	f003 f8ab 	bl	801a538 <rmw_take_with_info>
 80173e2:	4603      	mov	r3, r0
 80173e4:	b9c0      	cbnz	r0, 8017418 <rcl_take+0xa8>
 80173e6:	f89d 1047 	ldrb.w	r1, [sp, #71]	@ 0x47
 80173ea:	f240 1291 	movw	r2, #401	@ 0x191
 80173ee:	2900      	cmp	r1, #0
 80173f0:	bf08      	it	eq
 80173f2:	4613      	moveq	r3, r2
 80173f4:	4618      	mov	r0, r3
 80173f6:	b020      	add	sp, #128	@ 0x80
 80173f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173fc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8017400:	4618      	mov	r0, r3
 8017402:	b020      	add	sp, #128	@ 0x80
 8017404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017408:	230b      	movs	r3, #11
 801740a:	e7f3      	b.n	80173f4 <rcl_take+0x84>
 801740c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8017410:	4618      	mov	r0, r3
 8017412:	4770      	bx	lr
 8017414:	ad12      	add	r5, sp, #72	@ 0x48
 8017416:	e7bf      	b.n	8017398 <rcl_take+0x28>
 8017418:	f7ff f85c 	bl	80164d4 <rcl_convert_rmw_ret_to_rcl_ret>
 801741c:	4603      	mov	r3, r0
 801741e:	e7e9      	b.n	80173f4 <rcl_take+0x84>

08017420 <rcl_subscription_get_rmw_handle>:
 8017420:	b118      	cbz	r0, 801742a <rcl_subscription_get_rmw_handle+0xa>
 8017422:	6800      	ldr	r0, [r0, #0]
 8017424:	b108      	cbz	r0, 801742a <rcl_subscription_get_rmw_handle+0xa>
 8017426:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 801742a:	4770      	bx	lr

0801742c <rcl_subscription_is_valid>:
 801742c:	b130      	cbz	r0, 801743c <rcl_subscription_is_valid+0x10>
 801742e:	6800      	ldr	r0, [r0, #0]
 8017430:	b120      	cbz	r0, 801743c <rcl_subscription_is_valid+0x10>
 8017432:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 8017436:	3800      	subs	r0, #0
 8017438:	bf18      	it	ne
 801743a:	2001      	movne	r0, #1
 801743c:	4770      	bx	lr
 801743e:	bf00      	nop

08017440 <rcl_get_system_time>:
 8017440:	4608      	mov	r0, r1
 8017442:	f7f8 b845 	b.w	800f4d0 <rcutils_system_time_now>
 8017446:	bf00      	nop

08017448 <rcl_get_steady_time>:
 8017448:	4608      	mov	r0, r1
 801744a:	f7f8 b86b 	b.w	800f524 <rcutils_steady_time_now>
 801744e:	bf00      	nop

08017450 <rcl_get_ros_time>:
 8017450:	7a03      	ldrb	r3, [r0, #8]
 8017452:	b510      	push	{r4, lr}
 8017454:	460c      	mov	r4, r1
 8017456:	b143      	cbz	r3, 801746a <rcl_get_ros_time+0x1a>
 8017458:	2105      	movs	r1, #5
 801745a:	f001 ffc9 	bl	80193f0 <__atomic_load_8>
 801745e:	4602      	mov	r2, r0
 8017460:	460b      	mov	r3, r1
 8017462:	e9c4 2300 	strd	r2, r3, [r4]
 8017466:	2000      	movs	r0, #0
 8017468:	bd10      	pop	{r4, pc}
 801746a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801746e:	4608      	mov	r0, r1
 8017470:	f7f8 b82e 	b.w	800f4d0 <rcutils_system_time_now>

08017474 <rcl_clock_valid>:
 8017474:	b138      	cbz	r0, 8017486 <rcl_clock_valid+0x12>
 8017476:	7803      	ldrb	r3, [r0, #0]
 8017478:	b123      	cbz	r3, 8017484 <rcl_clock_valid+0x10>
 801747a:	68c0      	ldr	r0, [r0, #12]
 801747c:	3800      	subs	r0, #0
 801747e:	bf18      	it	ne
 8017480:	2001      	movne	r0, #1
 8017482:	4770      	bx	lr
 8017484:	4618      	mov	r0, r3
 8017486:	4770      	bx	lr

08017488 <rcl_clock_init>:
 8017488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801748a:	4605      	mov	r5, r0
 801748c:	4610      	mov	r0, r2
 801748e:	4614      	mov	r4, r2
 8017490:	460e      	mov	r6, r1
 8017492:	f7f7 ffdb 	bl	800f44c <rcutils_allocator_is_valid>
 8017496:	b128      	cbz	r0, 80174a4 <rcl_clock_init+0x1c>
 8017498:	2d03      	cmp	r5, #3
 801749a:	d803      	bhi.n	80174a4 <rcl_clock_init+0x1c>
 801749c:	e8df f005 	tbb	[pc, r5]
 80174a0:	044c291a 	.word	0x044c291a
 80174a4:	200b      	movs	r0, #11
 80174a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174a8:	2e00      	cmp	r6, #0
 80174aa:	d0fb      	beq.n	80174a4 <rcl_clock_init+0x1c>
 80174ac:	2c00      	cmp	r4, #0
 80174ae:	d0f9      	beq.n	80174a4 <rcl_clock_init+0x1c>
 80174b0:	2300      	movs	r3, #0
 80174b2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80174b6:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 801755c <rcl_clock_init+0xd4>
 80174ba:	6133      	str	r3, [r6, #16]
 80174bc:	f106 0514 	add.w	r5, r6, #20
 80174c0:	2703      	movs	r7, #3
 80174c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80174c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80174c6:	6823      	ldr	r3, [r4, #0]
 80174c8:	602b      	str	r3, [r5, #0]
 80174ca:	f8c6 c00c 	str.w	ip, [r6, #12]
 80174ce:	7037      	strb	r7, [r6, #0]
 80174d0:	2000      	movs	r0, #0
 80174d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174d4:	2e00      	cmp	r6, #0
 80174d6:	d0e5      	beq.n	80174a4 <rcl_clock_init+0x1c>
 80174d8:	2300      	movs	r3, #0
 80174da:	7033      	strb	r3, [r6, #0]
 80174dc:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80174e0:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80174e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80174e6:	f106 0514 	add.w	r5, r6, #20
 80174ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80174ec:	6823      	ldr	r3, [r4, #0]
 80174ee:	602b      	str	r3, [r5, #0]
 80174f0:	e7ee      	b.n	80174d0 <rcl_clock_init+0x48>
 80174f2:	2e00      	cmp	r6, #0
 80174f4:	d0d6      	beq.n	80174a4 <rcl_clock_init+0x1c>
 80174f6:	2c00      	cmp	r4, #0
 80174f8:	d0d4      	beq.n	80174a4 <rcl_clock_init+0x1c>
 80174fa:	2700      	movs	r7, #0
 80174fc:	7037      	strb	r7, [r6, #0]
 80174fe:	46a4      	mov	ip, r4
 8017500:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017504:	f106 0514 	add.w	r5, r6, #20
 8017508:	e9c6 7701 	strd	r7, r7, [r6, #4]
 801750c:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8017510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017512:	f8dc 3000 	ldr.w	r3, [ip]
 8017516:	602b      	str	r3, [r5, #0]
 8017518:	6921      	ldr	r1, [r4, #16]
 801751a:	6823      	ldr	r3, [r4, #0]
 801751c:	2010      	movs	r0, #16
 801751e:	4798      	blx	r3
 8017520:	6130      	str	r0, [r6, #16]
 8017522:	b1b8      	cbz	r0, 8017554 <rcl_clock_init+0xcc>
 8017524:	2200      	movs	r2, #0
 8017526:	2300      	movs	r3, #0
 8017528:	e9c0 2300 	strd	r2, r3, [r0]
 801752c:	4a0a      	ldr	r2, [pc, #40]	@ (8017558 <rcl_clock_init+0xd0>)
 801752e:	7207      	strb	r7, [r0, #8]
 8017530:	2301      	movs	r3, #1
 8017532:	60f2      	str	r2, [r6, #12]
 8017534:	7033      	strb	r3, [r6, #0]
 8017536:	e7cb      	b.n	80174d0 <rcl_clock_init+0x48>
 8017538:	2e00      	cmp	r6, #0
 801753a:	d0b3      	beq.n	80174a4 <rcl_clock_init+0x1c>
 801753c:	2c00      	cmp	r4, #0
 801753e:	d0b1      	beq.n	80174a4 <rcl_clock_init+0x1c>
 8017540:	2300      	movs	r3, #0
 8017542:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8017546:	f8df c018 	ldr.w	ip, [pc, #24]	@ 8017560 <rcl_clock_init+0xd8>
 801754a:	6133      	str	r3, [r6, #16]
 801754c:	f106 0514 	add.w	r5, r6, #20
 8017550:	2702      	movs	r7, #2
 8017552:	e7b6      	b.n	80174c2 <rcl_clock_init+0x3a>
 8017554:	200a      	movs	r0, #10
 8017556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017558:	08017451 	.word	0x08017451
 801755c:	08017449 	.word	0x08017449
 8017560:	08017441 	.word	0x08017441

08017564 <rcl_clock_get_now>:
 8017564:	b140      	cbz	r0, 8017578 <rcl_clock_get_now+0x14>
 8017566:	b139      	cbz	r1, 8017578 <rcl_clock_get_now+0x14>
 8017568:	7803      	ldrb	r3, [r0, #0]
 801756a:	b11b      	cbz	r3, 8017574 <rcl_clock_get_now+0x10>
 801756c:	68c3      	ldr	r3, [r0, #12]
 801756e:	b10b      	cbz	r3, 8017574 <rcl_clock_get_now+0x10>
 8017570:	6900      	ldr	r0, [r0, #16]
 8017572:	4718      	bx	r3
 8017574:	2001      	movs	r0, #1
 8017576:	4770      	bx	lr
 8017578:	200b      	movs	r0, #11
 801757a:	4770      	bx	lr

0801757c <rcl_is_enabled_ros_time_override>:
 801757c:	b158      	cbz	r0, 8017596 <rcl_is_enabled_ros_time_override+0x1a>
 801757e:	b151      	cbz	r1, 8017596 <rcl_is_enabled_ros_time_override+0x1a>
 8017580:	7803      	ldrb	r3, [r0, #0]
 8017582:	2b01      	cmp	r3, #1
 8017584:	d105      	bne.n	8017592 <rcl_is_enabled_ros_time_override+0x16>
 8017586:	6902      	ldr	r2, [r0, #16]
 8017588:	b11a      	cbz	r2, 8017592 <rcl_is_enabled_ros_time_override+0x16>
 801758a:	7a13      	ldrb	r3, [r2, #8]
 801758c:	700b      	strb	r3, [r1, #0]
 801758e:	2000      	movs	r0, #0
 8017590:	4770      	bx	lr
 8017592:	2001      	movs	r0, #1
 8017594:	4770      	bx	lr
 8017596:	200b      	movs	r0, #11
 8017598:	4770      	bx	lr
 801759a:	bf00      	nop

0801759c <rcl_clock_add_jump_callback>:
 801759c:	b082      	sub	sp, #8
 801759e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175a2:	a906      	add	r1, sp, #24
 80175a4:	e881 000c 	stmia.w	r1, {r2, r3}
 80175a8:	e9dd 760c 	ldrd	r7, r6, [sp, #48]	@ 0x30
 80175ac:	b320      	cbz	r0, 80175f8 <rcl_clock_add_jump_callback+0x5c>
 80175ae:	4605      	mov	r5, r0
 80175b0:	3014      	adds	r0, #20
 80175b2:	f7f7 ff4b 	bl	800f44c <rcutils_allocator_is_valid>
 80175b6:	b1f8      	cbz	r0, 80175f8 <rcl_clock_add_jump_callback+0x5c>
 80175b8:	b1f7      	cbz	r7, 80175f8 <rcl_clock_add_jump_callback+0x5c>
 80175ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80175bc:	2b00      	cmp	r3, #0
 80175be:	db1b      	blt.n	80175f8 <rcl_clock_add_jump_callback+0x5c>
 80175c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80175c4:	2a01      	cmp	r2, #1
 80175c6:	f173 0300 	sbcs.w	r3, r3, #0
 80175ca:	da15      	bge.n	80175f8 <rcl_clock_add_jump_callback+0x5c>
 80175cc:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
 80175d0:	2c00      	cmp	r4, #0
 80175d2:	d042      	beq.n	801765a <rcl_clock_add_jump_callback+0xbe>
 80175d4:	4603      	mov	r3, r0
 80175d6:	2200      	movs	r2, #0
 80175d8:	e003      	b.n	80175e2 <rcl_clock_add_jump_callback+0x46>
 80175da:	4294      	cmp	r4, r2
 80175dc:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80175e0:	d011      	beq.n	8017606 <rcl_clock_add_jump_callback+0x6a>
 80175e2:	6819      	ldr	r1, [r3, #0]
 80175e4:	42b9      	cmp	r1, r7
 80175e6:	f102 0201 	add.w	r2, r2, #1
 80175ea:	d1f6      	bne.n	80175da <rcl_clock_add_jump_callback+0x3e>
 80175ec:	6a19      	ldr	r1, [r3, #32]
 80175ee:	42b1      	cmp	r1, r6
 80175f0:	d1f3      	bne.n	80175da <rcl_clock_add_jump_callback+0x3e>
 80175f2:	f04f 0e01 	mov.w	lr, #1
 80175f6:	e001      	b.n	80175fc <rcl_clock_add_jump_callback+0x60>
 80175f8:	f04f 0e0b 	mov.w	lr, #11
 80175fc:	4670      	mov	r0, lr
 80175fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017602:	b002      	add	sp, #8
 8017604:	4770      	bx	lr
 8017606:	3401      	adds	r4, #1
 8017608:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801760c:	00e1      	lsls	r1, r4, #3
 801760e:	69eb      	ldr	r3, [r5, #28]
 8017610:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8017612:	4798      	blx	r3
 8017614:	b1f0      	cbz	r0, 8017654 <rcl_clock_add_jump_callback+0xb8>
 8017616:	68ab      	ldr	r3, [r5, #8]
 8017618:	6068      	str	r0, [r5, #4]
 801761a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801761e:	f10d 0c18 	add.w	ip, sp, #24
 8017622:	f840 7032 	str.w	r7, [r0, r2, lsl #3]
 8017626:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
 801762a:	f103 0801 	add.w	r8, r3, #1
 801762e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017632:	f104 0708 	add.w	r7, r4, #8
 8017636:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8017638:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801763c:	f04f 0e00 	mov.w	lr, #0
 8017640:	e887 0003 	stmia.w	r7, {r0, r1}
 8017644:	6226      	str	r6, [r4, #32]
 8017646:	4670      	mov	r0, lr
 8017648:	f8c5 8008 	str.w	r8, [r5, #8]
 801764c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017650:	b002      	add	sp, #8
 8017652:	4770      	bx	lr
 8017654:	f04f 0e0a 	mov.w	lr, #10
 8017658:	e7d0      	b.n	80175fc <rcl_clock_add_jump_callback+0x60>
 801765a:	2128      	movs	r1, #40	@ 0x28
 801765c:	e7d7      	b.n	801760e <rcl_clock_add_jump_callback+0x72>
 801765e:	bf00      	nop

08017660 <rcl_clock_remove_jump_callback>:
 8017660:	2800      	cmp	r0, #0
 8017662:	d05a      	beq.n	801771a <rcl_clock_remove_jump_callback+0xba>
 8017664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017668:	4605      	mov	r5, r0
 801766a:	3014      	adds	r0, #20
 801766c:	460f      	mov	r7, r1
 801766e:	4692      	mov	sl, r2
 8017670:	f7f7 feec 	bl	800f44c <rcutils_allocator_is_valid>
 8017674:	2800      	cmp	r0, #0
 8017676:	d03f      	beq.n	80176f8 <rcl_clock_remove_jump_callback+0x98>
 8017678:	2f00      	cmp	r7, #0
 801767a:	d03d      	beq.n	80176f8 <rcl_clock_remove_jump_callback+0x98>
 801767c:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8017680:	f1b8 0f00 	cmp.w	r8, #0
 8017684:	d00c      	beq.n	80176a0 <rcl_clock_remove_jump_callback+0x40>
 8017686:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801768a:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 801768e:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 8017692:	464c      	mov	r4, r9
 8017694:	6823      	ldr	r3, [r4, #0]
 8017696:	42bb      	cmp	r3, r7
 8017698:	d005      	beq.n	80176a6 <rcl_clock_remove_jump_callback+0x46>
 801769a:	3428      	adds	r4, #40	@ 0x28
 801769c:	42b4      	cmp	r4, r6
 801769e:	d1f9      	bne.n	8017694 <rcl_clock_remove_jump_callback+0x34>
 80176a0:	2001      	movs	r0, #1
 80176a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176a6:	6a23      	ldr	r3, [r4, #32]
 80176a8:	3428      	adds	r4, #40	@ 0x28
 80176aa:	42b4      	cmp	r4, r6
 80176ac:	d02c      	beq.n	8017708 <rcl_clock_remove_jump_callback+0xa8>
 80176ae:	4553      	cmp	r3, sl
 80176b0:	d1f0      	bne.n	8017694 <rcl_clock_remove_jump_callback+0x34>
 80176b2:	46a6      	mov	lr, r4
 80176b4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80176b8:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 80176bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80176c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80176c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80176c8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80176cc:	3428      	adds	r4, #40	@ 0x28
 80176ce:	42a6      	cmp	r6, r4
 80176d0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80176d4:	d1ed      	bne.n	80176b2 <rcl_clock_remove_jump_callback+0x52>
 80176d6:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 80176da:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80176dc:	60ac      	str	r4, [r5, #8]
 80176de:	b174      	cbz	r4, 80176fe <rcl_clock_remove_jump_callback+0x9e>
 80176e0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80176e4:	00e1      	lsls	r1, r4, #3
 80176e6:	69eb      	ldr	r3, [r5, #28]
 80176e8:	4648      	mov	r0, r9
 80176ea:	4798      	blx	r3
 80176ec:	4604      	mov	r4, r0
 80176ee:	b1b0      	cbz	r0, 801771e <rcl_clock_remove_jump_callback+0xbe>
 80176f0:	606c      	str	r4, [r5, #4]
 80176f2:	2000      	movs	r0, #0
 80176f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176f8:	200b      	movs	r0, #11
 80176fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176fe:	69ab      	ldr	r3, [r5, #24]
 8017700:	4611      	mov	r1, r2
 8017702:	4648      	mov	r0, r9
 8017704:	4798      	blx	r3
 8017706:	e7f3      	b.n	80176f0 <rcl_clock_remove_jump_callback+0x90>
 8017708:	4553      	cmp	r3, sl
 801770a:	d1c9      	bne.n	80176a0 <rcl_clock_remove_jump_callback+0x40>
 801770c:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 8017710:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8017712:	60ac      	str	r4, [r5, #8]
 8017714:	2c00      	cmp	r4, #0
 8017716:	d1e3      	bne.n	80176e0 <rcl_clock_remove_jump_callback+0x80>
 8017718:	e7f1      	b.n	80176fe <rcl_clock_remove_jump_callback+0x9e>
 801771a:	200b      	movs	r0, #11
 801771c:	4770      	bx	lr
 801771e:	200a      	movs	r0, #10
 8017720:	e7eb      	b.n	80176fa <rcl_clock_remove_jump_callback+0x9a>
 8017722:	bf00      	nop

08017724 <_rcl_timer_time_jump>:
 8017724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017728:	4605      	mov	r5, r0
 801772a:	b084      	sub	sp, #16
 801772c:	4614      	mov	r4, r2
 801772e:	b131      	cbz	r1, 801773e <_rcl_timer_time_jump+0x1a>
 8017730:	7803      	ldrb	r3, [r0, #0]
 8017732:	3b02      	subs	r3, #2
 8017734:	2b01      	cmp	r3, #1
 8017736:	d93f      	bls.n	80177b8 <_rcl_timer_time_jump+0x94>
 8017738:	b004      	add	sp, #16
 801773a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801773e:	6813      	ldr	r3, [r2, #0]
 8017740:	a902      	add	r1, sp, #8
 8017742:	6818      	ldr	r0, [r3, #0]
 8017744:	f7ff ff0e 	bl	8017564 <rcl_clock_get_now>
 8017748:	2800      	cmp	r0, #0
 801774a:	d1f5      	bne.n	8017738 <_rcl_timer_time_jump+0x14>
 801774c:	6820      	ldr	r0, [r4, #0]
 801774e:	2105      	movs	r1, #5
 8017750:	3020      	adds	r0, #32
 8017752:	f001 fe4d 	bl	80193f0 <__atomic_load_8>
 8017756:	6823      	ldr	r3, [r4, #0]
 8017758:	4681      	mov	r9, r0
 801775a:	460f      	mov	r7, r1
 801775c:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8017760:	2105      	movs	r1, #5
 8017762:	f001 fe45 	bl	80193f0 <__atomic_load_8>
 8017766:	4680      	mov	r8, r0
 8017768:	6820      	ldr	r0, [r4, #0]
 801776a:	460e      	mov	r6, r1
 801776c:	3018      	adds	r0, #24
 801776e:	2105      	movs	r1, #5
 8017770:	f001 fe3e 	bl	80193f0 <__atomic_load_8>
 8017774:	782b      	ldrb	r3, [r5, #0]
 8017776:	3b02      	subs	r3, #2
 8017778:	2b01      	cmp	r3, #1
 801777a:	460d      	mov	r5, r1
 801777c:	4682      	mov	sl, r0
 801777e:	d939      	bls.n	80177f4 <_rcl_timer_time_jump+0xd0>
 8017780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017784:	4542      	cmp	r2, r8
 8017786:	eb73 0606 	sbcs.w	r6, r3, r6
 801778a:	da61      	bge.n	8017850 <_rcl_timer_time_jump+0x12c>
 801778c:	454a      	cmp	r2, r9
 801778e:	eb73 0707 	sbcs.w	r7, r3, r7
 8017792:	dad1      	bge.n	8017738 <_rcl_timer_time_jump+0x14>
 8017794:	1882      	adds	r2, r0, r2
 8017796:	6820      	ldr	r0, [r4, #0]
 8017798:	f04f 0505 	mov.w	r5, #5
 801779c:	eb43 0301 	adc.w	r3, r3, r1
 80177a0:	9500      	str	r5, [sp, #0]
 80177a2:	3028      	adds	r0, #40	@ 0x28
 80177a4:	f001 fe5a 	bl	801945c <__atomic_store_8>
 80177a8:	6820      	ldr	r0, [r4, #0]
 80177aa:	9500      	str	r5, [sp, #0]
 80177ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80177b0:	3020      	adds	r0, #32
 80177b2:	f001 fe53 	bl	801945c <__atomic_store_8>
 80177b6:	e7bf      	b.n	8017738 <_rcl_timer_time_jump+0x14>
 80177b8:	6813      	ldr	r3, [r2, #0]
 80177ba:	a902      	add	r1, sp, #8
 80177bc:	6818      	ldr	r0, [r3, #0]
 80177be:	f7ff fed1 	bl	8017564 <rcl_clock_get_now>
 80177c2:	2800      	cmp	r0, #0
 80177c4:	d1b8      	bne.n	8017738 <_rcl_timer_time_jump+0x14>
 80177c6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80177ca:	4313      	orrs	r3, r2
 80177cc:	d0b4      	beq.n	8017738 <_rcl_timer_time_jump+0x14>
 80177ce:	6820      	ldr	r0, [r4, #0]
 80177d0:	2105      	movs	r1, #5
 80177d2:	3028      	adds	r0, #40	@ 0x28
 80177d4:	f001 fe0c 	bl	80193f0 <__atomic_load_8>
 80177d8:	9d02      	ldr	r5, [sp, #8]
 80177da:	9b03      	ldr	r3, [sp, #12]
 80177dc:	4602      	mov	r2, r0
 80177de:	6820      	ldr	r0, [r4, #0]
 80177e0:	1b52      	subs	r2, r2, r5
 80177e2:	f04f 0405 	mov.w	r4, #5
 80177e6:	9400      	str	r4, [sp, #0]
 80177e8:	eb61 0303 	sbc.w	r3, r1, r3
 80177ec:	3030      	adds	r0, #48	@ 0x30
 80177ee:	f001 fe35 	bl	801945c <__atomic_store_8>
 80177f2:	e7a1      	b.n	8017738 <_rcl_timer_time_jump+0x14>
 80177f4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80177f8:	4313      	orrs	r3, r2
 80177fa:	d09d      	beq.n	8017738 <_rcl_timer_time_jump+0x14>
 80177fc:	6820      	ldr	r0, [r4, #0]
 80177fe:	f04f 0805 	mov.w	r8, #5
 8017802:	2300      	movs	r3, #0
 8017804:	f8cd 8000 	str.w	r8, [sp]
 8017808:	3030      	adds	r0, #48	@ 0x30
 801780a:	2200      	movs	r2, #0
 801780c:	f001 fe5c 	bl	80194c8 <__atomic_exchange_8>
 8017810:	ea51 0300 	orrs.w	r3, r1, r0
 8017814:	4606      	mov	r6, r0
 8017816:	460f      	mov	r7, r1
 8017818:	d08e      	beq.n	8017738 <_rcl_timer_time_jump+0x14>
 801781a:	9a02      	ldr	r2, [sp, #8]
 801781c:	9b03      	ldr	r3, [sp, #12]
 801781e:	f8cd 8000 	str.w	r8, [sp]
 8017822:	1a12      	subs	r2, r2, r0
 8017824:	6820      	ldr	r0, [r4, #0]
 8017826:	eb63 0301 	sbc.w	r3, r3, r1
 801782a:	eb12 020a 	adds.w	r2, r2, sl
 801782e:	eb43 0305 	adc.w	r3, r3, r5
 8017832:	3028      	adds	r0, #40	@ 0x28
 8017834:	f001 fe12 	bl	801945c <__atomic_store_8>
 8017838:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801783c:	f8cd 8000 	str.w	r8, [sp]
 8017840:	6820      	ldr	r0, [r4, #0]
 8017842:	1b92      	subs	r2, r2, r6
 8017844:	eb63 0307 	sbc.w	r3, r3, r7
 8017848:	3020      	adds	r0, #32
 801784a:	f001 fe07 	bl	801945c <__atomic_store_8>
 801784e:	e773      	b.n	8017738 <_rcl_timer_time_jump+0x14>
 8017850:	6820      	ldr	r0, [r4, #0]
 8017852:	3008      	adds	r0, #8
 8017854:	f004 ff54 	bl	801c700 <rcl_trigger_guard_condition>
 8017858:	e76e      	b.n	8017738 <_rcl_timer_time_jump+0x14>
 801785a:	bf00      	nop

0801785c <rcl_get_zero_initialized_timer>:
 801785c:	4b01      	ldr	r3, [pc, #4]	@ (8017864 <rcl_get_zero_initialized_timer+0x8>)
 801785e:	6818      	ldr	r0, [r3, #0]
 8017860:	4770      	bx	lr
 8017862:	bf00      	nop
 8017864:	08021560 	.word	0x08021560

08017868 <rcl_timer_init2>:
 8017868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801786c:	b0ae      	sub	sp, #184	@ 0xb8
 801786e:	4604      	mov	r4, r0
 8017870:	a839      	add	r0, sp, #228	@ 0xe4
 8017872:	f89d 80f8 	ldrb.w	r8, [sp, #248]	@ 0xf8
 8017876:	460d      	mov	r5, r1
 8017878:	4691      	mov	r9, r2
 801787a:	f7f7 fde7 	bl	800f44c <rcutils_allocator_is_valid>
 801787e:	2800      	cmp	r0, #0
 8017880:	d06a      	beq.n	8017958 <rcl_timer_init2+0xf0>
 8017882:	2c00      	cmp	r4, #0
 8017884:	d068      	beq.n	8017958 <rcl_timer_init2+0xf0>
 8017886:	2d00      	cmp	r5, #0
 8017888:	d066      	beq.n	8017958 <rcl_timer_init2+0xf0>
 801788a:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 801788c:	2b00      	cmp	r3, #0
 801788e:	db63      	blt.n	8017958 <rcl_timer_init2+0xf0>
 8017890:	6823      	ldr	r3, [r4, #0]
 8017892:	b123      	cbz	r3, 801789e <rcl_timer_init2+0x36>
 8017894:	2664      	movs	r6, #100	@ 0x64
 8017896:	4630      	mov	r0, r6
 8017898:	b02e      	add	sp, #184	@ 0xb8
 801789a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801789e:	a908      	add	r1, sp, #32
 80178a0:	4628      	mov	r0, r5
 80178a2:	f7ff fe5f 	bl	8017564 <rcl_clock_get_now>
 80178a6:	4606      	mov	r6, r0
 80178a8:	2800      	cmp	r0, #0
 80178aa:	d1f4      	bne.n	8017896 <rcl_timer_init2+0x2e>
 80178ac:	ae06      	add	r6, sp, #24
 80178ae:	4630      	mov	r0, r6
 80178b0:	e9cd 5916 	strd	r5, r9, [sp, #88]	@ 0x58
 80178b4:	f004 fe30 	bl	801c518 <rcl_get_zero_initialized_guard_condition>
 80178b8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80178bc:	f10d 0a60 	add.w	sl, sp, #96	@ 0x60
 80178c0:	ae0b      	add	r6, sp, #44	@ 0x2c
 80178c2:	e88a 0003 	stmia.w	sl, {r0, r1}
 80178c6:	4630      	mov	r0, r6
 80178c8:	f004 fefe 	bl	801c6c8 <rcl_guard_condition_get_default_options>
 80178cc:	ab0d      	add	r3, sp, #52	@ 0x34
 80178ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80178d2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80178d6:	4649      	mov	r1, r9
 80178d8:	e896 000c 	ldmia.w	r6, {r2, r3}
 80178dc:	4650      	mov	r0, sl
 80178de:	f004 fe25 	bl	801c52c <rcl_guard_condition_init>
 80178e2:	4606      	mov	r6, r0
 80178e4:	2800      	cmp	r0, #0
 80178e6:	d1d6      	bne.n	8017896 <rcl_timer_init2+0x2e>
 80178e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80178ea:	781b      	ldrb	r3, [r3, #0]
 80178ec:	2b01      	cmp	r3, #1
 80178ee:	d038      	beq.n	8017962 <rcl_timer_init2+0xfa>
 80178f0:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 80178f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80178f4:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	@ 0xd8
 80178f8:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 80178fc:	2300      	movs	r3, #0
 80178fe:	e9cd 332a 	strd	r3, r3, [sp, #168]	@ 0xa8
 8017902:	932c      	str	r3, [sp, #176]	@ 0xb0
 8017904:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017908:	9f36      	ldr	r7, [sp, #216]	@ 0xd8
 801790a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 80179c0 <rcl_timer_init2+0x158>
 801790e:	19d0      	adds	r0, r2, r7
 8017910:	9f37      	ldr	r7, [sp, #220]	@ 0xdc
 8017912:	f10d 0ce4 	add.w	ip, sp, #228	@ 0xe4
 8017916:	eb43 0107 	adc.w	r1, r3, r7
 801791a:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 801791e:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8017922:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8017926:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801792a:	f10d 0e94 	add.w	lr, sp, #148	@ 0x94
 801792e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017932:	f8dc 3000 	ldr.w	r3, [ip]
 8017936:	f8ce 3000 	str.w	r3, [lr]
 801793a:	f088 0801 	eor.w	r8, r8, #1
 801793e:	4619      	mov	r1, r3
 8017940:	f88d 8090 	strb.w	r8, [sp, #144]	@ 0x90
 8017944:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8017946:	2060      	movs	r0, #96	@ 0x60
 8017948:	4798      	blx	r3
 801794a:	6020      	str	r0, [r4, #0]
 801794c:	b358      	cbz	r0, 80179a6 <rcl_timer_init2+0x13e>
 801794e:	2260      	movs	r2, #96	@ 0x60
 8017950:	a916      	add	r1, sp, #88	@ 0x58
 8017952:	f006 f9cc 	bl	801dcee <memcpy>
 8017956:	e79e      	b.n	8017896 <rcl_timer_init2+0x2e>
 8017958:	260b      	movs	r6, #11
 801795a:	4630      	mov	r0, r6
 801795c:	b02e      	add	sp, #184	@ 0xb8
 801795e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017962:	2001      	movs	r0, #1
 8017964:	2100      	movs	r1, #0
 8017966:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 801796a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801796e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8017972:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8017976:	4a14      	ldr	r2, [pc, #80]	@ (80179c8 <rcl_timer_init2+0x160>)
 8017978:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 801797c:	9405      	str	r4, [sp, #20]
 801797e:	9204      	str	r2, [sp, #16]
 8017980:	ab12      	add	r3, sp, #72	@ 0x48
 8017982:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017984:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8017988:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 801798c:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8017990:	4628      	mov	r0, r5
 8017992:	f7ff fe03 	bl	801759c <rcl_clock_add_jump_callback>
 8017996:	4681      	mov	r9, r0
 8017998:	2800      	cmp	r0, #0
 801799a:	d0a9      	beq.n	80178f0 <rcl_timer_init2+0x88>
 801799c:	4650      	mov	r0, sl
 801799e:	f004 fe71 	bl	801c684 <rcl_guard_condition_fini>
 80179a2:	464e      	mov	r6, r9
 80179a4:	e777      	b.n	8017896 <rcl_timer_init2+0x2e>
 80179a6:	4650      	mov	r0, sl
 80179a8:	f004 fe6c 	bl	801c684 <rcl_guard_condition_fini>
 80179ac:	4906      	ldr	r1, [pc, #24]	@ (80179c8 <rcl_timer_init2+0x160>)
 80179ae:	4622      	mov	r2, r4
 80179b0:	4628      	mov	r0, r5
 80179b2:	f7ff fe55 	bl	8017660 <rcl_clock_remove_jump_callback>
 80179b6:	260a      	movs	r6, #10
 80179b8:	e76d      	b.n	8017896 <rcl_timer_init2+0x2e>
 80179ba:	bf00      	nop
 80179bc:	f3af 8000 	nop.w
	...
 80179c8:	08017725 	.word	0x08017725

080179cc <rcl_timer_clock>:
 80179cc:	b130      	cbz	r0, 80179dc <rcl_timer_clock+0x10>
 80179ce:	b129      	cbz	r1, 80179dc <rcl_timer_clock+0x10>
 80179d0:	6803      	ldr	r3, [r0, #0]
 80179d2:	b12b      	cbz	r3, 80179e0 <rcl_timer_clock+0x14>
 80179d4:	681b      	ldr	r3, [r3, #0]
 80179d6:	600b      	str	r3, [r1, #0]
 80179d8:	2000      	movs	r0, #0
 80179da:	4770      	bx	lr
 80179dc:	200b      	movs	r0, #11
 80179de:	4770      	bx	lr
 80179e0:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80179e4:	4770      	bx	lr
 80179e6:	bf00      	nop

080179e8 <rcl_timer_call>:
 80179e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179ec:	b087      	sub	sp, #28
 80179ee:	2800      	cmp	r0, #0
 80179f0:	d067      	beq.n	8017ac2 <rcl_timer_call+0xda>
 80179f2:	6803      	ldr	r3, [r0, #0]
 80179f4:	4604      	mov	r4, r0
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d068      	beq.n	8017acc <rcl_timer_call+0xe4>
 80179fa:	f3bf 8f5b 	dmb	ish
 80179fe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8017a02:	f3bf 8f5b 	dmb	ish
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d150      	bne.n	8017aac <rcl_timer_call+0xc4>
 8017a0a:	6803      	ldr	r3, [r0, #0]
 8017a0c:	a904      	add	r1, sp, #16
 8017a0e:	6818      	ldr	r0, [r3, #0]
 8017a10:	f7ff fda8 	bl	8017564 <rcl_clock_get_now>
 8017a14:	4605      	mov	r5, r0
 8017a16:	2800      	cmp	r0, #0
 8017a18:	d144      	bne.n	8017aa4 <rcl_timer_call+0xbc>
 8017a1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	db4a      	blt.n	8017ab8 <rcl_timer_call+0xd0>
 8017a22:	6820      	ldr	r0, [r4, #0]
 8017a24:	f04f 0a05 	mov.w	sl, #5
 8017a28:	f8cd a000 	str.w	sl, [sp]
 8017a2c:	3020      	adds	r0, #32
 8017a2e:	f001 fd4b 	bl	80194c8 <__atomic_exchange_8>
 8017a32:	6823      	ldr	r3, [r4, #0]
 8017a34:	f3bf 8f5b 	dmb	ish
 8017a38:	4680      	mov	r8, r0
 8017a3a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8017a3e:	f3bf 8f5b 	dmb	ish
 8017a42:	6820      	ldr	r0, [r4, #0]
 8017a44:	4689      	mov	r9, r1
 8017a46:	3028      	adds	r0, #40	@ 0x28
 8017a48:	4651      	mov	r1, sl
 8017a4a:	f001 fcd1 	bl	80193f0 <__atomic_load_8>
 8017a4e:	4606      	mov	r6, r0
 8017a50:	6820      	ldr	r0, [r4, #0]
 8017a52:	460f      	mov	r7, r1
 8017a54:	3018      	adds	r0, #24
 8017a56:	4651      	mov	r1, sl
 8017a58:	f001 fcca 	bl	80193f0 <__atomic_load_8>
 8017a5c:	1836      	adds	r6, r6, r0
 8017a5e:	eb41 0707 	adc.w	r7, r1, r7
 8017a62:	4602      	mov	r2, r0
 8017a64:	460b      	mov	r3, r1
 8017a66:	4682      	mov	sl, r0
 8017a68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017a6c:	42b0      	cmp	r0, r6
 8017a6e:	eb71 0c07 	sbcs.w	ip, r1, r7
 8017a72:	db04      	blt.n	8017a7e <rcl_timer_call+0x96>
 8017a74:	ea53 0c02 	orrs.w	ip, r3, r2
 8017a78:	d12b      	bne.n	8017ad2 <rcl_timer_call+0xea>
 8017a7a:	4606      	mov	r6, r0
 8017a7c:	460f      	mov	r7, r1
 8017a7e:	6820      	ldr	r0, [r4, #0]
 8017a80:	2105      	movs	r1, #5
 8017a82:	4632      	mov	r2, r6
 8017a84:	463b      	mov	r3, r7
 8017a86:	3028      	adds	r0, #40	@ 0x28
 8017a88:	9100      	str	r1, [sp, #0]
 8017a8a:	f001 fce7 	bl	801945c <__atomic_store_8>
 8017a8e:	f1bb 0f00 	cmp.w	fp, #0
 8017a92:	d007      	beq.n	8017aa4 <rcl_timer_call+0xbc>
 8017a94:	9a04      	ldr	r2, [sp, #16]
 8017a96:	9b05      	ldr	r3, [sp, #20]
 8017a98:	ebb2 0208 	subs.w	r2, r2, r8
 8017a9c:	4620      	mov	r0, r4
 8017a9e:	eb63 0309 	sbc.w	r3, r3, r9
 8017aa2:	47d8      	blx	fp
 8017aa4:	4628      	mov	r0, r5
 8017aa6:	b007      	add	sp, #28
 8017aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017aac:	f240 3521 	movw	r5, #801	@ 0x321
 8017ab0:	4628      	mov	r0, r5
 8017ab2:	b007      	add	sp, #28
 8017ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ab8:	2501      	movs	r5, #1
 8017aba:	4628      	mov	r0, r5
 8017abc:	b007      	add	sp, #28
 8017abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ac2:	250b      	movs	r5, #11
 8017ac4:	4628      	mov	r0, r5
 8017ac6:	b007      	add	sp, #28
 8017ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017acc:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8017ad0:	e7e8      	b.n	8017aa4 <rcl_timer_call+0xbc>
 8017ad2:	1b80      	subs	r0, r0, r6
 8017ad4:	eb61 0107 	sbc.w	r1, r1, r7
 8017ad8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8017adc:	f7e9 f8c4 	bl	8000c68 <__aeabi_ldivmod>
 8017ae0:	9b02      	ldr	r3, [sp, #8]
 8017ae2:	3001      	adds	r0, #1
 8017ae4:	f141 0100 	adc.w	r1, r1, #0
 8017ae8:	fb00 f303 	mul.w	r3, r0, r3
 8017aec:	fb01 330a 	mla	r3, r1, sl, r3
 8017af0:	fba0 0a0a 	umull	r0, sl, r0, sl
 8017af4:	1830      	adds	r0, r6, r0
 8017af6:	4453      	add	r3, sl
 8017af8:	eb43 0707 	adc.w	r7, r3, r7
 8017afc:	4606      	mov	r6, r0
 8017afe:	e7be      	b.n	8017a7e <rcl_timer_call+0x96>

08017b00 <rcl_timer_is_ready>:
 8017b00:	b398      	cbz	r0, 8017b6a <rcl_timer_is_ready+0x6a>
 8017b02:	b530      	push	{r4, r5, lr}
 8017b04:	6803      	ldr	r3, [r0, #0]
 8017b06:	b083      	sub	sp, #12
 8017b08:	4604      	mov	r4, r0
 8017b0a:	b383      	cbz	r3, 8017b6e <rcl_timer_is_ready+0x6e>
 8017b0c:	460d      	mov	r5, r1
 8017b0e:	b349      	cbz	r1, 8017b64 <rcl_timer_is_ready+0x64>
 8017b10:	f3bf 8f5b 	dmb	ish
 8017b14:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8017b18:	f3bf 8f5b 	dmb	ish
 8017b1c:	b9fb      	cbnz	r3, 8017b5e <rcl_timer_is_ready+0x5e>
 8017b1e:	6803      	ldr	r3, [r0, #0]
 8017b20:	4669      	mov	r1, sp
 8017b22:	6818      	ldr	r0, [r3, #0]
 8017b24:	f7ff fd1e 	bl	8017564 <rcl_clock_get_now>
 8017b28:	b128      	cbz	r0, 8017b36 <rcl_timer_is_ready+0x36>
 8017b2a:	f240 3321 	movw	r3, #801	@ 0x321
 8017b2e:	4298      	cmp	r0, r3
 8017b30:	d015      	beq.n	8017b5e <rcl_timer_is_ready+0x5e>
 8017b32:	b003      	add	sp, #12
 8017b34:	bd30      	pop	{r4, r5, pc}
 8017b36:	6820      	ldr	r0, [r4, #0]
 8017b38:	2105      	movs	r1, #5
 8017b3a:	3028      	adds	r0, #40	@ 0x28
 8017b3c:	f001 fc58 	bl	80193f0 <__atomic_load_8>
 8017b40:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017b44:	1ac0      	subs	r0, r0, r3
 8017b46:	eb61 0102 	sbc.w	r1, r1, r2
 8017b4a:	2801      	cmp	r0, #1
 8017b4c:	f171 0100 	sbcs.w	r1, r1, #0
 8017b50:	bfb4      	ite	lt
 8017b52:	2301      	movlt	r3, #1
 8017b54:	2300      	movge	r3, #0
 8017b56:	702b      	strb	r3, [r5, #0]
 8017b58:	2000      	movs	r0, #0
 8017b5a:	b003      	add	sp, #12
 8017b5c:	bd30      	pop	{r4, r5, pc}
 8017b5e:	2300      	movs	r3, #0
 8017b60:	702b      	strb	r3, [r5, #0]
 8017b62:	e7f9      	b.n	8017b58 <rcl_timer_is_ready+0x58>
 8017b64:	200b      	movs	r0, #11
 8017b66:	b003      	add	sp, #12
 8017b68:	bd30      	pop	{r4, r5, pc}
 8017b6a:	200b      	movs	r0, #11
 8017b6c:	4770      	bx	lr
 8017b6e:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8017b72:	e7de      	b.n	8017b32 <rcl_timer_is_ready+0x32>

08017b74 <rcl_timer_get_next_call_time>:
 8017b74:	b1d8      	cbz	r0, 8017bae <rcl_timer_get_next_call_time+0x3a>
 8017b76:	b538      	push	{r3, r4, r5, lr}
 8017b78:	6803      	ldr	r3, [r0, #0]
 8017b7a:	b1d3      	cbz	r3, 8017bb2 <rcl_timer_get_next_call_time+0x3e>
 8017b7c:	460c      	mov	r4, r1
 8017b7e:	b1a1      	cbz	r1, 8017baa <rcl_timer_get_next_call_time+0x36>
 8017b80:	f3bf 8f5b 	dmb	ish
 8017b84:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8017b88:	f3bf 8f5b 	dmb	ish
 8017b8c:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8017b90:	b943      	cbnz	r3, 8017ba4 <rcl_timer_get_next_call_time+0x30>
 8017b92:	6800      	ldr	r0, [r0, #0]
 8017b94:	2105      	movs	r1, #5
 8017b96:	3028      	adds	r0, #40	@ 0x28
 8017b98:	f001 fc2a 	bl	80193f0 <__atomic_load_8>
 8017b9c:	e9c4 0100 	strd	r0, r1, [r4]
 8017ba0:	4628      	mov	r0, r5
 8017ba2:	bd38      	pop	{r3, r4, r5, pc}
 8017ba4:	f240 3021 	movw	r0, #801	@ 0x321
 8017ba8:	bd38      	pop	{r3, r4, r5, pc}
 8017baa:	200b      	movs	r0, #11
 8017bac:	bd38      	pop	{r3, r4, r5, pc}
 8017bae:	200b      	movs	r0, #11
 8017bb0:	4770      	bx	lr
 8017bb2:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8017bb6:	bd38      	pop	{r3, r4, r5, pc}

08017bb8 <rcl_timer_get_guard_condition>:
 8017bb8:	b130      	cbz	r0, 8017bc8 <rcl_timer_get_guard_condition+0x10>
 8017bba:	6800      	ldr	r0, [r0, #0]
 8017bbc:	b120      	cbz	r0, 8017bc8 <rcl_timer_get_guard_condition+0x10>
 8017bbe:	68c3      	ldr	r3, [r0, #12]
 8017bc0:	b10b      	cbz	r3, 8017bc6 <rcl_timer_get_guard_condition+0xe>
 8017bc2:	3008      	adds	r0, #8
 8017bc4:	4770      	bx	lr
 8017bc6:	4618      	mov	r0, r3
 8017bc8:	4770      	bx	lr
 8017bca:	bf00      	nop

08017bcc <rcl_validate_enclave_name_with_size>:
 8017bcc:	2800      	cmp	r0, #0
 8017bce:	d037      	beq.n	8017c40 <rcl_validate_enclave_name_with_size+0x74>
 8017bd0:	b570      	push	{r4, r5, r6, lr}
 8017bd2:	4614      	mov	r4, r2
 8017bd4:	b0c2      	sub	sp, #264	@ 0x108
 8017bd6:	b342      	cbz	r2, 8017c2a <rcl_validate_enclave_name_with_size+0x5e>
 8017bd8:	461e      	mov	r6, r3
 8017bda:	466a      	mov	r2, sp
 8017bdc:	ab01      	add	r3, sp, #4
 8017bde:	460d      	mov	r5, r1
 8017be0:	f002 f8c0 	bl	8019d64 <rmw_validate_namespace_with_size>
 8017be4:	4684      	mov	ip, r0
 8017be6:	bb28      	cbnz	r0, 8017c34 <rcl_validate_enclave_name_with_size+0x68>
 8017be8:	9b00      	ldr	r3, [sp, #0]
 8017bea:	b923      	cbnz	r3, 8017bf6 <rcl_validate_enclave_name_with_size+0x2a>
 8017bec:	2300      	movs	r3, #0
 8017bee:	6023      	str	r3, [r4, #0]
 8017bf0:	4660      	mov	r0, ip
 8017bf2:	b042      	add	sp, #264	@ 0x108
 8017bf4:	bd70      	pop	{r4, r5, r6, pc}
 8017bf6:	2b07      	cmp	r3, #7
 8017bf8:	d00f      	beq.n	8017c1a <rcl_validate_enclave_name_with_size+0x4e>
 8017bfa:	1e5a      	subs	r2, r3, #1
 8017bfc:	2a05      	cmp	r2, #5
 8017bfe:	d823      	bhi.n	8017c48 <rcl_validate_enclave_name_with_size+0x7c>
 8017c00:	e8df f002 	tbb	[pc, r2]
 8017c04:	03030303 	.word	0x03030303
 8017c08:	0303      	.short	0x0303
 8017c0a:	6023      	str	r3, [r4, #0]
 8017c0c:	2e00      	cmp	r6, #0
 8017c0e:	d0ef      	beq.n	8017bf0 <rcl_validate_enclave_name_with_size+0x24>
 8017c10:	9b01      	ldr	r3, [sp, #4]
 8017c12:	6033      	str	r3, [r6, #0]
 8017c14:	4660      	mov	r0, ip
 8017c16:	b042      	add	sp, #264	@ 0x108
 8017c18:	bd70      	pop	{r4, r5, r6, pc}
 8017c1a:	2dff      	cmp	r5, #255	@ 0xff
 8017c1c:	d9e6      	bls.n	8017bec <rcl_validate_enclave_name_with_size+0x20>
 8017c1e:	6023      	str	r3, [r4, #0]
 8017c20:	2e00      	cmp	r6, #0
 8017c22:	d0e5      	beq.n	8017bf0 <rcl_validate_enclave_name_with_size+0x24>
 8017c24:	23fe      	movs	r3, #254	@ 0xfe
 8017c26:	6033      	str	r3, [r6, #0]
 8017c28:	e7e2      	b.n	8017bf0 <rcl_validate_enclave_name_with_size+0x24>
 8017c2a:	f04f 0c0b 	mov.w	ip, #11
 8017c2e:	4660      	mov	r0, ip
 8017c30:	b042      	add	sp, #264	@ 0x108
 8017c32:	bd70      	pop	{r4, r5, r6, pc}
 8017c34:	f7fe fc4e 	bl	80164d4 <rcl_convert_rmw_ret_to_rcl_ret>
 8017c38:	4684      	mov	ip, r0
 8017c3a:	4660      	mov	r0, ip
 8017c3c:	b042      	add	sp, #264	@ 0x108
 8017c3e:	bd70      	pop	{r4, r5, r6, pc}
 8017c40:	f04f 0c0b 	mov.w	ip, #11
 8017c44:	4660      	mov	r0, ip
 8017c46:	4770      	bx	lr
 8017c48:	4a04      	ldr	r2, [pc, #16]	@ (8017c5c <rcl_validate_enclave_name_with_size+0x90>)
 8017c4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8017c4e:	a802      	add	r0, sp, #8
 8017c50:	f001 fd8e 	bl	8019770 <rcutils_snprintf>
 8017c54:	f04f 0c01 	mov.w	ip, #1
 8017c58:	e7ca      	b.n	8017bf0 <rcl_validate_enclave_name_with_size+0x24>
 8017c5a:	bf00      	nop
 8017c5c:	08021564 	.word	0x08021564

08017c60 <rcl_validate_enclave_name>:
 8017c60:	b168      	cbz	r0, 8017c7e <rcl_validate_enclave_name+0x1e>
 8017c62:	b570      	push	{r4, r5, r6, lr}
 8017c64:	460d      	mov	r5, r1
 8017c66:	4616      	mov	r6, r2
 8017c68:	4604      	mov	r4, r0
 8017c6a:	f7e8 fb39 	bl	80002e0 <strlen>
 8017c6e:	4633      	mov	r3, r6
 8017c70:	4601      	mov	r1, r0
 8017c72:	462a      	mov	r2, r5
 8017c74:	4620      	mov	r0, r4
 8017c76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c7a:	f7ff bfa7 	b.w	8017bcc <rcl_validate_enclave_name_with_size>
 8017c7e:	200b      	movs	r0, #11
 8017c80:	4770      	bx	lr
 8017c82:	bf00      	nop

08017c84 <rcl_get_zero_initialized_wait_set>:
 8017c84:	b510      	push	{r4, lr}
 8017c86:	4c08      	ldr	r4, [pc, #32]	@ (8017ca8 <rcl_get_zero_initialized_wait_set+0x24>)
 8017c88:	4686      	mov	lr, r0
 8017c8a:	4684      	mov	ip, r0
 8017c8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017c8e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017c92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017c94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017c98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017c9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017c9e:	6823      	ldr	r3, [r4, #0]
 8017ca0:	f8cc 3000 	str.w	r3, [ip]
 8017ca4:	4670      	mov	r0, lr
 8017ca6:	bd10      	pop	{r4, pc}
 8017ca8:	080215c4 	.word	0x080215c4

08017cac <rcl_wait_set_is_valid>:
 8017cac:	b118      	cbz	r0, 8017cb6 <rcl_wait_set_is_valid+0xa>
 8017cae:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8017cb0:	3800      	subs	r0, #0
 8017cb2:	bf18      	it	ne
 8017cb4:	2001      	movne	r0, #1
 8017cb6:	4770      	bx	lr

08017cb8 <rcl_wait_set_fini>:
 8017cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017cbc:	b083      	sub	sp, #12
 8017cbe:	2800      	cmp	r0, #0
 8017cc0:	f000 8098 	beq.w	8017df4 <rcl_wait_set_fini+0x13c>
 8017cc4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8017cc6:	4605      	mov	r5, r0
 8017cc8:	2e00      	cmp	r6, #0
 8017cca:	f000 808f 	beq.w	8017dec <rcl_wait_set_fini+0x134>
 8017cce:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8017cd0:	f002 fe10 	bl	801a8f4 <rmw_destroy_wait_set>
 8017cd4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017cd6:	1e06      	subs	r6, r0, #0
 8017cd8:	bf18      	it	ne
 8017cda:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8017cde:	2c00      	cmp	r4, #0
 8017ce0:	f000 8084 	beq.w	8017dec <rcl_wait_set_fini+0x134>
 8017ce4:	6828      	ldr	r0, [r5, #0]
 8017ce6:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 8017cea:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017cee:	2700      	movs	r7, #0
 8017cf0:	606f      	str	r7, [r5, #4]
 8017cf2:	6027      	str	r7, [r4, #0]
 8017cf4:	b118      	cbz	r0, 8017cfe <rcl_wait_set_fini+0x46>
 8017cf6:	4649      	mov	r1, r9
 8017cf8:	47c0      	blx	r8
 8017cfa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017cfc:	602f      	str	r7, [r5, #0]
 8017cfe:	68a0      	ldr	r0, [r4, #8]
 8017d00:	b128      	cbz	r0, 8017d0e <rcl_wait_set_fini+0x56>
 8017d02:	4649      	mov	r1, r9
 8017d04:	47c0      	blx	r8
 8017d06:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017d08:	2300      	movs	r3, #0
 8017d0a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8017d0e:	68a8      	ldr	r0, [r5, #8]
 8017d10:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8017d12:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8017d14:	f04f 0800 	mov.w	r8, #0
 8017d18:	f8c5 800c 	str.w	r8, [r5, #12]
 8017d1c:	f8c4 800c 	str.w	r8, [r4, #12]
 8017d20:	b128      	cbz	r0, 8017d2e <rcl_wait_set_fini+0x76>
 8017d22:	47b8      	blx	r7
 8017d24:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017d26:	f8c5 8008 	str.w	r8, [r5, #8]
 8017d2a:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8017d2c:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8017d2e:	6960      	ldr	r0, [r4, #20]
 8017d30:	f04f 0800 	mov.w	r8, #0
 8017d34:	f8c4 8010 	str.w	r8, [r4, #16]
 8017d38:	b128      	cbz	r0, 8017d46 <rcl_wait_set_fini+0x8e>
 8017d3a:	47b8      	blx	r7
 8017d3c:	f8c4 8014 	str.w	r8, [r4, #20]
 8017d40:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017d42:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8017d44:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8017d46:	6928      	ldr	r0, [r5, #16]
 8017d48:	f04f 0800 	mov.w	r8, #0
 8017d4c:	f8c5 8014 	str.w	r8, [r5, #20]
 8017d50:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
 8017d54:	b128      	cbz	r0, 8017d62 <rcl_wait_set_fini+0xaa>
 8017d56:	47b8      	blx	r7
 8017d58:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017d5a:	f8c5 8010 	str.w	r8, [r5, #16]
 8017d5e:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8017d60:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8017d62:	69a8      	ldr	r0, [r5, #24]
 8017d64:	f04f 0800 	mov.w	r8, #0
 8017d68:	f8c5 801c 	str.w	r8, [r5, #28]
 8017d6c:	f8c4 8018 	str.w	r8, [r4, #24]
 8017d70:	b128      	cbz	r0, 8017d7e <rcl_wait_set_fini+0xc6>
 8017d72:	9101      	str	r1, [sp, #4]
 8017d74:	47b8      	blx	r7
 8017d76:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017d78:	9901      	ldr	r1, [sp, #4]
 8017d7a:	f8c5 8018 	str.w	r8, [r5, #24]
 8017d7e:	6a20      	ldr	r0, [r4, #32]
 8017d80:	b120      	cbz	r0, 8017d8c <rcl_wait_set_fini+0xd4>
 8017d82:	47b8      	blx	r7
 8017d84:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017d86:	2300      	movs	r3, #0
 8017d88:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8017d8c:	6a28      	ldr	r0, [r5, #32]
 8017d8e:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 8017d92:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017d96:	2700      	movs	r7, #0
 8017d98:	626f      	str	r7, [r5, #36]	@ 0x24
 8017d9a:	6267      	str	r7, [r4, #36]	@ 0x24
 8017d9c:	b118      	cbz	r0, 8017da6 <rcl_wait_set_fini+0xee>
 8017d9e:	4649      	mov	r1, r9
 8017da0:	47c0      	blx	r8
 8017da2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017da4:	622f      	str	r7, [r5, #32]
 8017da6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8017da8:	b128      	cbz	r0, 8017db6 <rcl_wait_set_fini+0xfe>
 8017daa:	4649      	mov	r1, r9
 8017dac:	47c0      	blx	r8
 8017dae:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017db0:	2300      	movs	r3, #0
 8017db2:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8017db6:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8017db8:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 8017dbc:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017dc0:	2700      	movs	r7, #0
 8017dc2:	62ef      	str	r7, [r5, #44]	@ 0x2c
 8017dc4:	6327      	str	r7, [r4, #48]	@ 0x30
 8017dc6:	b118      	cbz	r0, 8017dd0 <rcl_wait_set_fini+0x118>
 8017dc8:	4649      	mov	r1, r9
 8017dca:	47c0      	blx	r8
 8017dcc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017dce:	62af      	str	r7, [r5, #40]	@ 0x28
 8017dd0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8017dd2:	b128      	cbz	r0, 8017de0 <rcl_wait_set_fini+0x128>
 8017dd4:	4649      	mov	r1, r9
 8017dd6:	47c0      	blx	r8
 8017dd8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017dda:	2300      	movs	r3, #0
 8017ddc:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8017de0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8017de2:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8017de4:	4620      	mov	r0, r4
 8017de6:	4798      	blx	r3
 8017de8:	2300      	movs	r3, #0
 8017dea:	632b      	str	r3, [r5, #48]	@ 0x30
 8017dec:	4630      	mov	r0, r6
 8017dee:	b003      	add	sp, #12
 8017df0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017df4:	260b      	movs	r6, #11
 8017df6:	4630      	mov	r0, r6
 8017df8:	b003      	add	sp, #12
 8017dfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017dfe:	bf00      	nop

08017e00 <rcl_wait_set_add_subscription>:
 8017e00:	b318      	cbz	r0, 8017e4a <rcl_wait_set_add_subscription+0x4a>
 8017e02:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017e04:	b570      	push	{r4, r5, r6, lr}
 8017e06:	4604      	mov	r4, r0
 8017e08:	b30b      	cbz	r3, 8017e4e <rcl_wait_set_add_subscription+0x4e>
 8017e0a:	b319      	cbz	r1, 8017e54 <rcl_wait_set_add_subscription+0x54>
 8017e0c:	681d      	ldr	r5, [r3, #0]
 8017e0e:	6840      	ldr	r0, [r0, #4]
 8017e10:	4285      	cmp	r5, r0
 8017e12:	d217      	bcs.n	8017e44 <rcl_wait_set_add_subscription+0x44>
 8017e14:	6820      	ldr	r0, [r4, #0]
 8017e16:	1c6e      	adds	r6, r5, #1
 8017e18:	601e      	str	r6, [r3, #0]
 8017e1a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8017e1e:	b102      	cbz	r2, 8017e22 <rcl_wait_set_add_subscription+0x22>
 8017e20:	6015      	str	r5, [r2, #0]
 8017e22:	4608      	mov	r0, r1
 8017e24:	f7ff fafc 	bl	8017420 <rcl_subscription_get_rmw_handle>
 8017e28:	b150      	cbz	r0, 8017e40 <rcl_wait_set_add_subscription+0x40>
 8017e2a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017e2c:	6842      	ldr	r2, [r0, #4]
 8017e2e:	689b      	ldr	r3, [r3, #8]
 8017e30:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017e34:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017e36:	6853      	ldr	r3, [r2, #4]
 8017e38:	3301      	adds	r3, #1
 8017e3a:	2000      	movs	r0, #0
 8017e3c:	6053      	str	r3, [r2, #4]
 8017e3e:	bd70      	pop	{r4, r5, r6, pc}
 8017e40:	2001      	movs	r0, #1
 8017e42:	bd70      	pop	{r4, r5, r6, pc}
 8017e44:	f240 3086 	movw	r0, #902	@ 0x386
 8017e48:	bd70      	pop	{r4, r5, r6, pc}
 8017e4a:	200b      	movs	r0, #11
 8017e4c:	4770      	bx	lr
 8017e4e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017e52:	bd70      	pop	{r4, r5, r6, pc}
 8017e54:	200b      	movs	r0, #11
 8017e56:	bd70      	pop	{r4, r5, r6, pc}

08017e58 <rcl_wait_set_clear>:
 8017e58:	2800      	cmp	r0, #0
 8017e5a:	d074      	beq.n	8017f46 <rcl_wait_set_clear+0xee>
 8017e5c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017e5e:	b510      	push	{r4, lr}
 8017e60:	4604      	mov	r4, r0
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d071      	beq.n	8017f4a <rcl_wait_set_clear+0xf2>
 8017e66:	6800      	ldr	r0, [r0, #0]
 8017e68:	b138      	cbz	r0, 8017e7a <rcl_wait_set_clear+0x22>
 8017e6a:	6862      	ldr	r2, [r4, #4]
 8017e6c:	2100      	movs	r1, #0
 8017e6e:	0092      	lsls	r2, r2, #2
 8017e70:	f005 fe62 	bl	801db38 <memset>
 8017e74:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017e76:	2200      	movs	r2, #0
 8017e78:	601a      	str	r2, [r3, #0]
 8017e7a:	68a0      	ldr	r0, [r4, #8]
 8017e7c:	b138      	cbz	r0, 8017e8e <rcl_wait_set_clear+0x36>
 8017e7e:	68e2      	ldr	r2, [r4, #12]
 8017e80:	2100      	movs	r1, #0
 8017e82:	0092      	lsls	r2, r2, #2
 8017e84:	f005 fe58 	bl	801db38 <memset>
 8017e88:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017e8a:	2200      	movs	r2, #0
 8017e8c:	60da      	str	r2, [r3, #12]
 8017e8e:	69a0      	ldr	r0, [r4, #24]
 8017e90:	b138      	cbz	r0, 8017ea2 <rcl_wait_set_clear+0x4a>
 8017e92:	69e2      	ldr	r2, [r4, #28]
 8017e94:	2100      	movs	r1, #0
 8017e96:	0092      	lsls	r2, r2, #2
 8017e98:	f005 fe4e 	bl	801db38 <memset>
 8017e9c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017e9e:	2200      	movs	r2, #0
 8017ea0:	619a      	str	r2, [r3, #24]
 8017ea2:	6a20      	ldr	r0, [r4, #32]
 8017ea4:	b138      	cbz	r0, 8017eb6 <rcl_wait_set_clear+0x5e>
 8017ea6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8017ea8:	2100      	movs	r1, #0
 8017eaa:	0092      	lsls	r2, r2, #2
 8017eac:	f005 fe44 	bl	801db38 <memset>
 8017eb0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017eb2:	2200      	movs	r2, #0
 8017eb4:	625a      	str	r2, [r3, #36]	@ 0x24
 8017eb6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8017eb8:	b138      	cbz	r0, 8017eca <rcl_wait_set_clear+0x72>
 8017eba:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8017ebc:	2100      	movs	r1, #0
 8017ebe:	0092      	lsls	r2, r2, #2
 8017ec0:	f005 fe3a 	bl	801db38 <memset>
 8017ec4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017ec6:	2200      	movs	r2, #0
 8017ec8:	631a      	str	r2, [r3, #48]	@ 0x30
 8017eca:	6920      	ldr	r0, [r4, #16]
 8017ecc:	b138      	cbz	r0, 8017ede <rcl_wait_set_clear+0x86>
 8017ece:	6962      	ldr	r2, [r4, #20]
 8017ed0:	2100      	movs	r1, #0
 8017ed2:	0092      	lsls	r2, r2, #2
 8017ed4:	f005 fe30 	bl	801db38 <memset>
 8017ed8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017eda:	2200      	movs	r2, #0
 8017edc:	641a      	str	r2, [r3, #64]	@ 0x40
 8017ede:	6898      	ldr	r0, [r3, #8]
 8017ee0:	b138      	cbz	r0, 8017ef2 <rcl_wait_set_clear+0x9a>
 8017ee2:	685a      	ldr	r2, [r3, #4]
 8017ee4:	2100      	movs	r1, #0
 8017ee6:	0092      	lsls	r2, r2, #2
 8017ee8:	f005 fe26 	bl	801db38 <memset>
 8017eec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017eee:	2200      	movs	r2, #0
 8017ef0:	605a      	str	r2, [r3, #4]
 8017ef2:	6958      	ldr	r0, [r3, #20]
 8017ef4:	b138      	cbz	r0, 8017f06 <rcl_wait_set_clear+0xae>
 8017ef6:	691a      	ldr	r2, [r3, #16]
 8017ef8:	2100      	movs	r1, #0
 8017efa:	0092      	lsls	r2, r2, #2
 8017efc:	f005 fe1c 	bl	801db38 <memset>
 8017f00:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017f02:	2200      	movs	r2, #0
 8017f04:	611a      	str	r2, [r3, #16]
 8017f06:	6a18      	ldr	r0, [r3, #32]
 8017f08:	b138      	cbz	r0, 8017f1a <rcl_wait_set_clear+0xc2>
 8017f0a:	69da      	ldr	r2, [r3, #28]
 8017f0c:	2100      	movs	r1, #0
 8017f0e:	0092      	lsls	r2, r2, #2
 8017f10:	f005 fe12 	bl	801db38 <memset>
 8017f14:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017f16:	2200      	movs	r2, #0
 8017f18:	61da      	str	r2, [r3, #28]
 8017f1a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8017f1c:	b138      	cbz	r0, 8017f2e <rcl_wait_set_clear+0xd6>
 8017f1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8017f20:	2100      	movs	r1, #0
 8017f22:	0092      	lsls	r2, r2, #2
 8017f24:	f005 fe08 	bl	801db38 <memset>
 8017f28:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017f2a:	2200      	movs	r2, #0
 8017f2c:	629a      	str	r2, [r3, #40]	@ 0x28
 8017f2e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8017f30:	b138      	cbz	r0, 8017f42 <rcl_wait_set_clear+0xea>
 8017f32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017f34:	2100      	movs	r1, #0
 8017f36:	0092      	lsls	r2, r2, #2
 8017f38:	f005 fdfe 	bl	801db38 <memset>
 8017f3c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017f3e:	2200      	movs	r2, #0
 8017f40:	635a      	str	r2, [r3, #52]	@ 0x34
 8017f42:	2000      	movs	r0, #0
 8017f44:	bd10      	pop	{r4, pc}
 8017f46:	200b      	movs	r0, #11
 8017f48:	4770      	bx	lr
 8017f4a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017f4e:	bd10      	pop	{r4, pc}

08017f50 <rcl_wait_set_resize>:
 8017f50:	2800      	cmp	r0, #0
 8017f52:	f000 81a1 	beq.w	8018298 <rcl_wait_set_resize+0x348>
 8017f56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f5a:	f8d0 a030 	ldr.w	sl, [r0, #48]	@ 0x30
 8017f5e:	b083      	sub	sp, #12
 8017f60:	4604      	mov	r4, r0
 8017f62:	f1ba 0f00 	cmp.w	sl, #0
 8017f66:	f000 8199 	beq.w	801829c <rcl_wait_set_resize+0x34c>
 8017f6a:	f04f 0800 	mov.w	r8, #0
 8017f6e:	f8da 9058 	ldr.w	r9, [sl, #88]	@ 0x58
 8017f72:	461e      	mov	r6, r3
 8017f74:	460f      	mov	r7, r1
 8017f76:	e9da b313 	ldrd	fp, r3, [sl, #76]	@ 0x4c
 8017f7a:	4615      	mov	r5, r2
 8017f7c:	f8c0 8004 	str.w	r8, [r0, #4]
 8017f80:	6800      	ldr	r0, [r0, #0]
 8017f82:	f8ca 8000 	str.w	r8, [sl]
 8017f86:	2900      	cmp	r1, #0
 8017f88:	f000 80cf 	beq.w	801812a <rcl_wait_set_resize+0x1da>
 8017f8c:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8017f90:	464a      	mov	r2, r9
 8017f92:	4651      	mov	r1, sl
 8017f94:	9301      	str	r3, [sp, #4]
 8017f96:	4798      	blx	r3
 8017f98:	9b01      	ldr	r3, [sp, #4]
 8017f9a:	6020      	str	r0, [r4, #0]
 8017f9c:	2800      	cmp	r0, #0
 8017f9e:	f000 8109 	beq.w	80181b4 <rcl_wait_set_resize+0x264>
 8017fa2:	4652      	mov	r2, sl
 8017fa4:	4641      	mov	r1, r8
 8017fa6:	9301      	str	r3, [sp, #4]
 8017fa8:	f005 fdc6 	bl	801db38 <memset>
 8017fac:	6067      	str	r7, [r4, #4]
 8017fae:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 8017fb0:	9b01      	ldr	r3, [sp, #4]
 8017fb2:	68b8      	ldr	r0, [r7, #8]
 8017fb4:	f8c7 8004 	str.w	r8, [r7, #4]
 8017fb8:	464a      	mov	r2, r9
 8017fba:	4651      	mov	r1, sl
 8017fbc:	4798      	blx	r3
 8017fbe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017fc0:	60b8      	str	r0, [r7, #8]
 8017fc2:	689f      	ldr	r7, [r3, #8]
 8017fc4:	2f00      	cmp	r7, #0
 8017fc6:	f000 80f0 	beq.w	80181aa <rcl_wait_set_resize+0x25a>
 8017fca:	4652      	mov	r2, sl
 8017fcc:	4641      	mov	r1, r8
 8017fce:	4638      	mov	r0, r7
 8017fd0:	f005 fdb2 	bl	801db38 <memset>
 8017fd4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8017fd8:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8017fdc:	68a0      	ldr	r0, [r4, #8]
 8017fde:	2700      	movs	r7, #0
 8017fe0:	e9da 2313 	ldrd	r2, r3, [sl, #76]	@ 0x4c
 8017fe4:	60e7      	str	r7, [r4, #12]
 8017fe6:	f8ca 700c 	str.w	r7, [sl, #12]
 8017fea:	2d00      	cmp	r5, #0
 8017fec:	f040 80b0 	bne.w	8018150 <rcl_wait_set_resize+0x200>
 8017ff0:	b130      	cbz	r0, 8018000 <rcl_wait_set_resize+0xb0>
 8017ff2:	4641      	mov	r1, r8
 8017ff4:	4790      	blx	r2
 8017ff6:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8017ffa:	60a5      	str	r5, [r4, #8]
 8017ffc:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8018000:	f8da 0014 	ldr.w	r0, [sl, #20]
 8018004:	2700      	movs	r7, #0
 8018006:	19ad      	adds	r5, r5, r6
 8018008:	f8ca 7010 	str.w	r7, [sl, #16]
 801800c:	f040 80b8 	bne.w	8018180 <rcl_wait_set_resize+0x230>
 8018010:	b148      	cbz	r0, 8018026 <rcl_wait_set_resize+0xd6>
 8018012:	f8da 304c 	ldr.w	r3, [sl, #76]	@ 0x4c
 8018016:	4641      	mov	r1, r8
 8018018:	4798      	blx	r3
 801801a:	f8ca 5014 	str.w	r5, [sl, #20]
 801801e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8018022:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8018026:	6920      	ldr	r0, [r4, #16]
 8018028:	2500      	movs	r5, #0
 801802a:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 801802e:	6165      	str	r5, [r4, #20]
 8018030:	f8ca 5040 	str.w	r5, [sl, #64]	@ 0x40
 8018034:	2e00      	cmp	r6, #0
 8018036:	f040 80c1 	bne.w	80181bc <rcl_wait_set_resize+0x26c>
 801803a:	b140      	cbz	r0, 801804e <rcl_wait_set_resize+0xfe>
 801803c:	4641      	mov	r1, r8
 801803e:	47c8      	blx	r9
 8018040:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8018044:	6126      	str	r6, [r4, #16]
 8018046:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 801804a:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 801804e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018050:	69a0      	ldr	r0, [r4, #24]
 8018052:	2500      	movs	r5, #0
 8018054:	61e5      	str	r5, [r4, #28]
 8018056:	f8ca 5018 	str.w	r5, [sl, #24]
 801805a:	2b00      	cmp	r3, #0
 801805c:	f040 80c2 	bne.w	80181e4 <rcl_wait_set_resize+0x294>
 8018060:	b128      	cbz	r0, 801806e <rcl_wait_set_resize+0x11e>
 8018062:	4641      	mov	r1, r8
 8018064:	47c8      	blx	r9
 8018066:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018068:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801806c:	61a3      	str	r3, [r4, #24]
 801806e:	f8da 0020 	ldr.w	r0, [sl, #32]
 8018072:	b130      	cbz	r0, 8018082 <rcl_wait_set_resize+0x132>
 8018074:	4641      	mov	r1, r8
 8018076:	47c8      	blx	r9
 8018078:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801807c:	2300      	movs	r3, #0
 801807e:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8018082:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018084:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8018088:	6a20      	ldr	r0, [r4, #32]
 801808a:	2500      	movs	r5, #0
 801808c:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 8018090:	6265      	str	r5, [r4, #36]	@ 0x24
 8018092:	f8ca 5024 	str.w	r5, [sl, #36]	@ 0x24
 8018096:	2b00      	cmp	r3, #0
 8018098:	f000 80c8 	beq.w	801822c <rcl_wait_set_resize+0x2dc>
 801809c:	ea4f 0983 	mov.w	r9, r3, lsl #2
 80180a0:	4632      	mov	r2, r6
 80180a2:	4649      	mov	r1, r9
 80180a4:	47c0      	blx	r8
 80180a6:	6220      	str	r0, [r4, #32]
 80180a8:	2800      	cmp	r0, #0
 80180aa:	f000 8083 	beq.w	80181b4 <rcl_wait_set_resize+0x264>
 80180ae:	464a      	mov	r2, r9
 80180b0:	4629      	mov	r1, r5
 80180b2:	f005 fd41 	bl	801db38 <memset>
 80180b6:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80180ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80180bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80180be:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 80180c2:	f8ca 5028 	str.w	r5, [sl, #40]	@ 0x28
 80180c6:	4632      	mov	r2, r6
 80180c8:	4649      	mov	r1, r9
 80180ca:	47c0      	blx	r8
 80180cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80180ce:	f8ca 002c 	str.w	r0, [sl, #44]	@ 0x2c
 80180d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	f000 80fb 	beq.w	80182d0 <rcl_wait_set_resize+0x380>
 80180da:	464a      	mov	r2, r9
 80180dc:	4629      	mov	r1, r5
 80180de:	4618      	mov	r0, r3
 80180e0:	f005 fd2a 	bl	801db38 <memset>
 80180e4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80180e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80180ea:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 80180ee:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80180f0:	2500      	movs	r5, #0
 80180f2:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 80180f6:	62e5      	str	r5, [r4, #44]	@ 0x2c
 80180f8:	f8ca 5030 	str.w	r5, [sl, #48]	@ 0x30
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	f040 80a9 	bne.w	8018254 <rcl_wait_set_resize+0x304>
 8018102:	b128      	cbz	r0, 8018110 <rcl_wait_set_resize+0x1c0>
 8018104:	4631      	mov	r1, r6
 8018106:	47b8      	blx	r7
 8018108:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801810a:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801810e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8018110:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8018114:	b128      	cbz	r0, 8018122 <rcl_wait_set_resize+0x1d2>
 8018116:	4631      	mov	r1, r6
 8018118:	47b8      	blx	r7
 801811a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801811c:	2200      	movs	r2, #0
 801811e:	e9c3 220d 	strd	r2, r2, [r3, #52]	@ 0x34
 8018122:	2000      	movs	r0, #0
 8018124:	b003      	add	sp, #12
 8018126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801812a:	b120      	cbz	r0, 8018136 <rcl_wait_set_resize+0x1e6>
 801812c:	4649      	mov	r1, r9
 801812e:	47d8      	blx	fp
 8018130:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8018134:	6027      	str	r7, [r4, #0]
 8018136:	f8da 0008 	ldr.w	r0, [sl, #8]
 801813a:	2800      	cmp	r0, #0
 801813c:	f43f af4c 	beq.w	8017fd8 <rcl_wait_set_resize+0x88>
 8018140:	4649      	mov	r1, r9
 8018142:	47d8      	blx	fp
 8018144:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8018148:	2300      	movs	r3, #0
 801814a:	e9ca 3301 	strd	r3, r3, [sl, #4]
 801814e:	e743      	b.n	8017fd8 <rcl_wait_set_resize+0x88>
 8018150:	4642      	mov	r2, r8
 8018152:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8018156:	4641      	mov	r1, r8
 8018158:	4798      	blx	r3
 801815a:	60a0      	str	r0, [r4, #8]
 801815c:	b350      	cbz	r0, 80181b4 <rcl_wait_set_resize+0x264>
 801815e:	4642      	mov	r2, r8
 8018160:	4639      	mov	r1, r7
 8018162:	f005 fce9 	bl	801db38 <memset>
 8018166:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801816a:	60e5      	str	r5, [r4, #12]
 801816c:	2700      	movs	r7, #0
 801816e:	19ad      	adds	r5, r5, r6
 8018170:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8018174:	f8da 0014 	ldr.w	r0, [sl, #20]
 8018178:	f8ca 7010 	str.w	r7, [sl, #16]
 801817c:	f43f af48 	beq.w	8018010 <rcl_wait_set_resize+0xc0>
 8018180:	00ad      	lsls	r5, r5, #2
 8018182:	4642      	mov	r2, r8
 8018184:	f8da 3050 	ldr.w	r3, [sl, #80]	@ 0x50
 8018188:	4629      	mov	r1, r5
 801818a:	4798      	blx	r3
 801818c:	4680      	mov	r8, r0
 801818e:	f8ca 0014 	str.w	r0, [sl, #20]
 8018192:	2800      	cmp	r0, #0
 8018194:	f000 8085 	beq.w	80182a2 <rcl_wait_set_resize+0x352>
 8018198:	462a      	mov	r2, r5
 801819a:	4639      	mov	r1, r7
 801819c:	f005 fccc 	bl	801db38 <memset>
 80181a0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80181a4:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80181a8:	e73d      	b.n	8018026 <rcl_wait_set_resize+0xd6>
 80181aa:	6820      	ldr	r0, [r4, #0]
 80181ac:	4649      	mov	r1, r9
 80181ae:	47d8      	blx	fp
 80181b0:	e9c4 7700 	strd	r7, r7, [r4]
 80181b4:	200a      	movs	r0, #10
 80181b6:	b003      	add	sp, #12
 80181b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181bc:	4642      	mov	r2, r8
 80181be:	ea4f 0886 	mov.w	r8, r6, lsl #2
 80181c2:	4641      	mov	r1, r8
 80181c4:	47b8      	blx	r7
 80181c6:	6120      	str	r0, [r4, #16]
 80181c8:	2800      	cmp	r0, #0
 80181ca:	d0f3      	beq.n	80181b4 <rcl_wait_set_resize+0x264>
 80181cc:	4642      	mov	r2, r8
 80181ce:	4629      	mov	r1, r5
 80181d0:	f005 fcb2 	bl	801db38 <memset>
 80181d4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80181d8:	6166      	str	r6, [r4, #20]
 80181da:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 80181de:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80181e2:	e734      	b.n	801804e <rcl_wait_set_resize+0xfe>
 80181e4:	009e      	lsls	r6, r3, #2
 80181e6:	4642      	mov	r2, r8
 80181e8:	4631      	mov	r1, r6
 80181ea:	47b8      	blx	r7
 80181ec:	61a0      	str	r0, [r4, #24]
 80181ee:	2800      	cmp	r0, #0
 80181f0:	d0e0      	beq.n	80181b4 <rcl_wait_set_resize+0x264>
 80181f2:	4632      	mov	r2, r6
 80181f4:	4629      	mov	r1, r5
 80181f6:	f005 fc9f 	bl	801db38 <memset>
 80181fa:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80181fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018200:	61e3      	str	r3, [r4, #28]
 8018202:	f8da 0020 	ldr.w	r0, [sl, #32]
 8018206:	f8ca 501c 	str.w	r5, [sl, #28]
 801820a:	4642      	mov	r2, r8
 801820c:	4631      	mov	r1, r6
 801820e:	47b8      	blx	r7
 8018210:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018212:	f8ca 0020 	str.w	r0, [sl, #32]
 8018216:	6a1f      	ldr	r7, [r3, #32]
 8018218:	2f00      	cmp	r7, #0
 801821a:	d053      	beq.n	80182c4 <rcl_wait_set_resize+0x374>
 801821c:	4632      	mov	r2, r6
 801821e:	4629      	mov	r1, r5
 8018220:	4638      	mov	r0, r7
 8018222:	f005 fc89 	bl	801db38 <memset>
 8018226:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801822a:	e72a      	b.n	8018082 <rcl_wait_set_resize+0x132>
 801822c:	b128      	cbz	r0, 801823a <rcl_wait_set_resize+0x2ea>
 801822e:	4631      	mov	r1, r6
 8018230:	47b8      	blx	r7
 8018232:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018234:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8018238:	6223      	str	r3, [r4, #32]
 801823a:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 801823e:	2800      	cmp	r0, #0
 8018240:	f43f af52 	beq.w	80180e8 <rcl_wait_set_resize+0x198>
 8018244:	4631      	mov	r1, r6
 8018246:	47b8      	blx	r7
 8018248:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801824c:	2300      	movs	r3, #0
 801824e:	e9ca 330a 	strd	r3, r3, [sl, #40]	@ 0x28
 8018252:	e749      	b.n	80180e8 <rcl_wait_set_resize+0x198>
 8018254:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8018258:	4632      	mov	r2, r6
 801825a:	4649      	mov	r1, r9
 801825c:	47c0      	blx	r8
 801825e:	62a0      	str	r0, [r4, #40]	@ 0x28
 8018260:	2800      	cmp	r0, #0
 8018262:	d0a7      	beq.n	80181b4 <rcl_wait_set_resize+0x264>
 8018264:	464a      	mov	r2, r9
 8018266:	4629      	mov	r1, r5
 8018268:	f005 fc66 	bl	801db38 <memset>
 801826c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8018270:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018272:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8018274:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8018278:	f8ca 5034 	str.w	r5, [sl, #52]	@ 0x34
 801827c:	4632      	mov	r2, r6
 801827e:	4649      	mov	r1, r9
 8018280:	47c0      	blx	r8
 8018282:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018284:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8018288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801828a:	b34b      	cbz	r3, 80182e0 <rcl_wait_set_resize+0x390>
 801828c:	464a      	mov	r2, r9
 801828e:	4629      	mov	r1, r5
 8018290:	4618      	mov	r0, r3
 8018292:	f005 fc51 	bl	801db38 <memset>
 8018296:	e744      	b.n	8018122 <rcl_wait_set_resize+0x1d2>
 8018298:	200b      	movs	r0, #11
 801829a:	4770      	bx	lr
 801829c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80182a0:	e789      	b.n	80181b6 <rcl_wait_set_resize+0x266>
 80182a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80182a4:	68a0      	ldr	r0, [r4, #8]
 80182a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80182a8:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80182aa:	4790      	blx	r2
 80182ac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80182ae:	6920      	ldr	r0, [r4, #16]
 80182b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80182b2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80182b4:	f8c4 800c 	str.w	r8, [r4, #12]
 80182b8:	f8c4 8008 	str.w	r8, [r4, #8]
 80182bc:	4790      	blx	r2
 80182be:	e9c4 8804 	strd	r8, r8, [r4, #16]
 80182c2:	e777      	b.n	80181b4 <rcl_wait_set_resize+0x264>
 80182c4:	69a0      	ldr	r0, [r4, #24]
 80182c6:	4641      	mov	r1, r8
 80182c8:	47c8      	blx	r9
 80182ca:	e9c4 7706 	strd	r7, r7, [r4, #24]
 80182ce:	e771      	b.n	80181b4 <rcl_wait_set_resize+0x264>
 80182d0:	6a20      	ldr	r0, [r4, #32]
 80182d2:	9301      	str	r3, [sp, #4]
 80182d4:	4631      	mov	r1, r6
 80182d6:	47b8      	blx	r7
 80182d8:	9b01      	ldr	r3, [sp, #4]
 80182da:	e9c4 3308 	strd	r3, r3, [r4, #32]
 80182de:	e769      	b.n	80181b4 <rcl_wait_set_resize+0x264>
 80182e0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80182e2:	9301      	str	r3, [sp, #4]
 80182e4:	4631      	mov	r1, r6
 80182e6:	47b8      	blx	r7
 80182e8:	9b01      	ldr	r3, [sp, #4]
 80182ea:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80182ee:	e761      	b.n	80181b4 <rcl_wait_set_resize+0x264>

080182f0 <rcl_wait_set_init>:
 80182f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80182f4:	b084      	sub	sp, #16
 80182f6:	4604      	mov	r4, r0
 80182f8:	a810      	add	r0, sp, #64	@ 0x40
 80182fa:	460d      	mov	r5, r1
 80182fc:	4690      	mov	r8, r2
 80182fe:	461f      	mov	r7, r3
 8018300:	f7f7 f8a4 	bl	800f44c <rcutils_allocator_is_valid>
 8018304:	2800      	cmp	r0, #0
 8018306:	d06c      	beq.n	80183e2 <rcl_wait_set_init+0xf2>
 8018308:	2c00      	cmp	r4, #0
 801830a:	d06a      	beq.n	80183e2 <rcl_wait_set_init+0xf2>
 801830c:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 801830e:	b126      	cbz	r6, 801831a <rcl_wait_set_init+0x2a>
 8018310:	2564      	movs	r5, #100	@ 0x64
 8018312:	4628      	mov	r0, r5
 8018314:	b004      	add	sp, #16
 8018316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801831a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801831c:	2b00      	cmp	r3, #0
 801831e:	d060      	beq.n	80183e2 <rcl_wait_set_init+0xf2>
 8018320:	4618      	mov	r0, r3
 8018322:	f7fe f8f7 	bl	8016514 <rcl_context_is_valid>
 8018326:	2800      	cmp	r0, #0
 8018328:	d060      	beq.n	80183ec <rcl_wait_set_init+0xfc>
 801832a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801832c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801832e:	205c      	movs	r0, #92	@ 0x5c
 8018330:	4798      	blx	r3
 8018332:	6320      	str	r0, [r4, #48]	@ 0x30
 8018334:	2800      	cmp	r0, #0
 8018336:	d063      	beq.n	8018400 <rcl_wait_set_init+0x110>
 8018338:	4631      	mov	r1, r6
 801833a:	225c      	movs	r2, #92	@ 0x5c
 801833c:	f005 fbfc 	bl	801db38 <memset>
 8018340:	f8d4 9030 	ldr.w	r9, [r4, #48]	@ 0x30
 8018344:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018346:	f8c9 3044 	str.w	r3, [r9, #68]	@ 0x44
 801834a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 801834e:	eb03 0e02 	add.w	lr, r3, r2
 8018352:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018354:	449e      	add	lr, r3
 8018356:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018358:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 801835c:	f8d3 a000 	ldr.w	sl, [r3]
 8018360:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018364:	e9c9 6601 	strd	r6, r6, [r9, #4]
 8018368:	e9c9 6604 	strd	r6, r6, [r9, #16]
 801836c:	e9c9 6607 	strd	r6, r6, [r9, #28]
 8018370:	e9c9 660a 	strd	r6, r6, [r9, #40]	@ 0x28
 8018374:	e9c9 660d 	strd	r6, r6, [r9, #52]	@ 0x34
 8018378:	f109 0648 	add.w	r6, r9, #72	@ 0x48
 801837c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801837e:	44c6      	add	lr, r8
 8018380:	f8dc 3000 	ldr.w	r3, [ip]
 8018384:	6033      	str	r3, [r6, #0]
 8018386:	eb0e 0145 	add.w	r1, lr, r5, lsl #1
 801838a:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 801838e:	f002 faa7 	bl	801a8e0 <rmw_create_wait_set>
 8018392:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018394:	f8c9 003c 	str.w	r0, [r9, #60]	@ 0x3c
 8018398:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801839a:	b348      	cbz	r0, 80183f0 <rcl_wait_set_init+0x100>
 801839c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801839e:	9302      	str	r3, [sp, #8]
 80183a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80183a2:	9301      	str	r3, [sp, #4]
 80183a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80183a6:	9300      	str	r3, [sp, #0]
 80183a8:	4629      	mov	r1, r5
 80183aa:	463b      	mov	r3, r7
 80183ac:	4642      	mov	r2, r8
 80183ae:	4620      	mov	r0, r4
 80183b0:	f7ff fdce 	bl	8017f50 <rcl_wait_set_resize>
 80183b4:	4605      	mov	r5, r0
 80183b6:	2800      	cmp	r0, #0
 80183b8:	d0ab      	beq.n	8018312 <rcl_wait_set_init+0x22>
 80183ba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80183bc:	bb13      	cbnz	r3, 8018404 <rcl_wait_set_init+0x114>
 80183be:	2600      	movs	r6, #0
 80183c0:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80183c4:	9600      	str	r6, [sp, #0]
 80183c6:	4633      	mov	r3, r6
 80183c8:	4632      	mov	r2, r6
 80183ca:	4631      	mov	r1, r6
 80183cc:	4620      	mov	r0, r4
 80183ce:	f7ff fdbf 	bl	8017f50 <rcl_wait_set_resize>
 80183d2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80183d4:	2800      	cmp	r0, #0
 80183d6:	d09c      	beq.n	8018312 <rcl_wait_set_init+0x22>
 80183d8:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80183da:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80183dc:	4798      	blx	r3
 80183de:	6326      	str	r6, [r4, #48]	@ 0x30
 80183e0:	e797      	b.n	8018312 <rcl_wait_set_init+0x22>
 80183e2:	250b      	movs	r5, #11
 80183e4:	4628      	mov	r0, r5
 80183e6:	b004      	add	sp, #16
 80183e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183ec:	2565      	movs	r5, #101	@ 0x65
 80183ee:	e790      	b.n	8018312 <rcl_wait_set_init+0x22>
 80183f0:	2501      	movs	r5, #1
 80183f2:	f002 fa7f 	bl	801a8f4 <rmw_destroy_wait_set>
 80183f6:	2800      	cmp	r0, #0
 80183f8:	bf18      	it	ne
 80183fa:	f44f 7561 	movne.w	r5, #900	@ 0x384
 80183fe:	e7de      	b.n	80183be <rcl_wait_set_init+0xce>
 8018400:	250a      	movs	r5, #10
 8018402:	e786      	b.n	8018312 <rcl_wait_set_init+0x22>
 8018404:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8018406:	e7f4      	b.n	80183f2 <rcl_wait_set_init+0x102>

08018408 <rcl_wait_set_add_guard_condition>:
 8018408:	b318      	cbz	r0, 8018452 <rcl_wait_set_add_guard_condition+0x4a>
 801840a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801840c:	b570      	push	{r4, r5, r6, lr}
 801840e:	4604      	mov	r4, r0
 8018410:	b30b      	cbz	r3, 8018456 <rcl_wait_set_add_guard_condition+0x4e>
 8018412:	b319      	cbz	r1, 801845c <rcl_wait_set_add_guard_condition+0x54>
 8018414:	68dd      	ldr	r5, [r3, #12]
 8018416:	68c0      	ldr	r0, [r0, #12]
 8018418:	4285      	cmp	r5, r0
 801841a:	d217      	bcs.n	801844c <rcl_wait_set_add_guard_condition+0x44>
 801841c:	68a0      	ldr	r0, [r4, #8]
 801841e:	1c6e      	adds	r6, r5, #1
 8018420:	60de      	str	r6, [r3, #12]
 8018422:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8018426:	b102      	cbz	r2, 801842a <rcl_wait_set_add_guard_condition+0x22>
 8018428:	6015      	str	r5, [r2, #0]
 801842a:	4608      	mov	r0, r1
 801842c:	f004 f978 	bl	801c720 <rcl_guard_condition_get_rmw_handle>
 8018430:	b150      	cbz	r0, 8018448 <rcl_wait_set_add_guard_condition+0x40>
 8018432:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018434:	6842      	ldr	r2, [r0, #4]
 8018436:	695b      	ldr	r3, [r3, #20]
 8018438:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801843c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801843e:	6913      	ldr	r3, [r2, #16]
 8018440:	3301      	adds	r3, #1
 8018442:	2000      	movs	r0, #0
 8018444:	6113      	str	r3, [r2, #16]
 8018446:	bd70      	pop	{r4, r5, r6, pc}
 8018448:	2001      	movs	r0, #1
 801844a:	bd70      	pop	{r4, r5, r6, pc}
 801844c:	f240 3086 	movw	r0, #902	@ 0x386
 8018450:	bd70      	pop	{r4, r5, r6, pc}
 8018452:	200b      	movs	r0, #11
 8018454:	4770      	bx	lr
 8018456:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801845a:	bd70      	pop	{r4, r5, r6, pc}
 801845c:	200b      	movs	r0, #11
 801845e:	bd70      	pop	{r4, r5, r6, pc}

08018460 <rcl_wait_set_add_timer>:
 8018460:	b328      	cbz	r0, 80184ae <rcl_wait_set_add_timer+0x4e>
 8018462:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018464:	b570      	push	{r4, r5, r6, lr}
 8018466:	4604      	mov	r4, r0
 8018468:	b31b      	cbz	r3, 80184b2 <rcl_wait_set_add_timer+0x52>
 801846a:	b329      	cbz	r1, 80184b8 <rcl_wait_set_add_timer+0x58>
 801846c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801846e:	6965      	ldr	r5, [r4, #20]
 8018470:	42a8      	cmp	r0, r5
 8018472:	d219      	bcs.n	80184a8 <rcl_wait_set_add_timer+0x48>
 8018474:	6925      	ldr	r5, [r4, #16]
 8018476:	1c46      	adds	r6, r0, #1
 8018478:	641e      	str	r6, [r3, #64]	@ 0x40
 801847a:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 801847e:	b102      	cbz	r2, 8018482 <rcl_wait_set_add_timer+0x22>
 8018480:	6010      	str	r0, [r2, #0]
 8018482:	4608      	mov	r0, r1
 8018484:	f7ff fb98 	bl	8017bb8 <rcl_timer_get_guard_condition>
 8018488:	b160      	cbz	r0, 80184a4 <rcl_wait_set_add_timer+0x44>
 801848a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801848c:	68e3      	ldr	r3, [r4, #12]
 801848e:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8018490:	3b01      	subs	r3, #1
 8018492:	441d      	add	r5, r3
 8018494:	f004 f944 	bl	801c720 <rcl_guard_condition_get_rmw_handle>
 8018498:	b180      	cbz	r0, 80184bc <rcl_wait_set_add_timer+0x5c>
 801849a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801849c:	6842      	ldr	r2, [r0, #4]
 801849e:	695b      	ldr	r3, [r3, #20]
 80184a0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80184a4:	2000      	movs	r0, #0
 80184a6:	bd70      	pop	{r4, r5, r6, pc}
 80184a8:	f240 3086 	movw	r0, #902	@ 0x386
 80184ac:	bd70      	pop	{r4, r5, r6, pc}
 80184ae:	200b      	movs	r0, #11
 80184b0:	4770      	bx	lr
 80184b2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80184b6:	bd70      	pop	{r4, r5, r6, pc}
 80184b8:	200b      	movs	r0, #11
 80184ba:	bd70      	pop	{r4, r5, r6, pc}
 80184bc:	2001      	movs	r0, #1
 80184be:	bd70      	pop	{r4, r5, r6, pc}

080184c0 <rcl_wait_set_add_client>:
 80184c0:	b318      	cbz	r0, 801850a <rcl_wait_set_add_client+0x4a>
 80184c2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80184c4:	b570      	push	{r4, r5, r6, lr}
 80184c6:	4604      	mov	r4, r0
 80184c8:	b30b      	cbz	r3, 801850e <rcl_wait_set_add_client+0x4e>
 80184ca:	b319      	cbz	r1, 8018514 <rcl_wait_set_add_client+0x54>
 80184cc:	699d      	ldr	r5, [r3, #24]
 80184ce:	69c0      	ldr	r0, [r0, #28]
 80184d0:	4285      	cmp	r5, r0
 80184d2:	d217      	bcs.n	8018504 <rcl_wait_set_add_client+0x44>
 80184d4:	69a0      	ldr	r0, [r4, #24]
 80184d6:	1c6e      	adds	r6, r5, #1
 80184d8:	619e      	str	r6, [r3, #24]
 80184da:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80184de:	b102      	cbz	r2, 80184e2 <rcl_wait_set_add_client+0x22>
 80184e0:	6015      	str	r5, [r2, #0]
 80184e2:	4608      	mov	r0, r1
 80184e4:	f7fd ff26 	bl	8016334 <rcl_client_get_rmw_handle>
 80184e8:	b150      	cbz	r0, 8018500 <rcl_wait_set_add_client+0x40>
 80184ea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80184ec:	6842      	ldr	r2, [r0, #4]
 80184ee:	6a1b      	ldr	r3, [r3, #32]
 80184f0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80184f4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80184f6:	69d3      	ldr	r3, [r2, #28]
 80184f8:	3301      	adds	r3, #1
 80184fa:	2000      	movs	r0, #0
 80184fc:	61d3      	str	r3, [r2, #28]
 80184fe:	bd70      	pop	{r4, r5, r6, pc}
 8018500:	2001      	movs	r0, #1
 8018502:	bd70      	pop	{r4, r5, r6, pc}
 8018504:	f240 3086 	movw	r0, #902	@ 0x386
 8018508:	bd70      	pop	{r4, r5, r6, pc}
 801850a:	200b      	movs	r0, #11
 801850c:	4770      	bx	lr
 801850e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018512:	bd70      	pop	{r4, r5, r6, pc}
 8018514:	200b      	movs	r0, #11
 8018516:	bd70      	pop	{r4, r5, r6, pc}

08018518 <rcl_wait_set_add_service>:
 8018518:	b318      	cbz	r0, 8018562 <rcl_wait_set_add_service+0x4a>
 801851a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801851c:	b570      	push	{r4, r5, r6, lr}
 801851e:	4604      	mov	r4, r0
 8018520:	b30b      	cbz	r3, 8018566 <rcl_wait_set_add_service+0x4e>
 8018522:	b319      	cbz	r1, 801856c <rcl_wait_set_add_service+0x54>
 8018524:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8018526:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8018528:	4285      	cmp	r5, r0
 801852a:	d217      	bcs.n	801855c <rcl_wait_set_add_service+0x44>
 801852c:	6a20      	ldr	r0, [r4, #32]
 801852e:	1c6e      	adds	r6, r5, #1
 8018530:	625e      	str	r6, [r3, #36]	@ 0x24
 8018532:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8018536:	b102      	cbz	r2, 801853a <rcl_wait_set_add_service+0x22>
 8018538:	6015      	str	r5, [r2, #0]
 801853a:	4608      	mov	r0, r1
 801853c:	f7fe fdfe 	bl	801713c <rcl_service_get_rmw_handle>
 8018540:	b150      	cbz	r0, 8018558 <rcl_wait_set_add_service+0x40>
 8018542:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018544:	6842      	ldr	r2, [r0, #4]
 8018546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018548:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801854c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801854e:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8018550:	3301      	adds	r3, #1
 8018552:	2000      	movs	r0, #0
 8018554:	6293      	str	r3, [r2, #40]	@ 0x28
 8018556:	bd70      	pop	{r4, r5, r6, pc}
 8018558:	2001      	movs	r0, #1
 801855a:	bd70      	pop	{r4, r5, r6, pc}
 801855c:	f240 3086 	movw	r0, #902	@ 0x386
 8018560:	bd70      	pop	{r4, r5, r6, pc}
 8018562:	200b      	movs	r0, #11
 8018564:	4770      	bx	lr
 8018566:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801856a:	bd70      	pop	{r4, r5, r6, pc}
 801856c:	200b      	movs	r0, #11
 801856e:	bd70      	pop	{r4, r5, r6, pc}

08018570 <rcl_wait>:
 8018570:	2800      	cmp	r0, #0
 8018572:	f000 81d4 	beq.w	801891e <rcl_wait+0x3ae>
 8018576:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801857a:	ed2d 8b02 	vpush	{d8}
 801857e:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 8018580:	b099      	sub	sp, #100	@ 0x64
 8018582:	4604      	mov	r4, r0
 8018584:	2d00      	cmp	r5, #0
 8018586:	f000 8178 	beq.w	801887a <rcl_wait+0x30a>
 801858a:	461f      	mov	r7, r3
 801858c:	6843      	ldr	r3, [r0, #4]
 801858e:	4690      	mov	r8, r2
 8018590:	2b00      	cmp	r3, #0
 8018592:	f000 809b 	beq.w	80186cc <rcl_wait+0x15c>
 8018596:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 8018598:	2e00      	cmp	r6, #0
 801859a:	f000 80b2 	beq.w	8018702 <rcl_wait+0x192>
 801859e:	2100      	movs	r1, #0
 80185a0:	468c      	mov	ip, r1
 80185a2:	460a      	mov	r2, r1
 80185a4:	46a6      	mov	lr, r4
 80185a6:	f8de 3010 	ldr.w	r3, [lr, #16]
 80185aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80185ae:	b173      	cbz	r3, 80185ce <rcl_wait+0x5e>
 80185b0:	f8de 300c 	ldr.w	r3, [lr, #12]
 80185b4:	6968      	ldr	r0, [r5, #20]
 80185b6:	440b      	add	r3, r1
 80185b8:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 80185bc:	b13c      	cbz	r4, 80185ce <rcl_wait+0x5e>
 80185be:	692b      	ldr	r3, [r5, #16]
 80185c0:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 80185c4:	3301      	adds	r3, #1
 80185c6:	612b      	str	r3, [r5, #16]
 80185c8:	f8de 5030 	ldr.w	r5, [lr, #48]	@ 0x30
 80185cc:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 80185ce:	3101      	adds	r1, #1
 80185d0:	f14c 0c00 	adc.w	ip, ip, #0
 80185d4:	42b1      	cmp	r1, r6
 80185d6:	f17c 0300 	sbcs.w	r3, ip, #0
 80185da:	d3e4      	bcc.n	80185a6 <rcl_wait+0x36>
 80185dc:	ed9f 8baa 	vldr	d8, [pc, #680]	@ 8018888 <rcl_wait+0x318>
 80185e0:	ea58 0307 	orrs.w	r3, r8, r7
 80185e4:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
 80185e8:	e9cd 220e 	strd	r2, r2, [sp, #56]	@ 0x38
 80185ec:	ed8d 8b12 	vstr	d8, [sp, #72]	@ 0x48
 80185f0:	ed8d 8b14 	vstr	d8, [sp, #80]	@ 0x50
 80185f4:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 80185f8:	4674      	mov	r4, lr
 80185fa:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 80185fe:	f000 8094 	beq.w	801872a <rcl_wait+0x1ba>
 8018602:	2e00      	cmp	r6, #0
 8018604:	f000 8145 	beq.w	8018892 <rcl_wait+0x322>
 8018608:	2500      	movs	r5, #0
 801860a:	46bb      	mov	fp, r7
 801860c:	e02c      	b.n	8018668 <rcl_wait+0xf8>
 801860e:	6923      	ldr	r3, [r4, #16]
 8018610:	f853 0009 	ldr.w	r0, [r3, r9]
 8018614:	a908      	add	r1, sp, #32
 8018616:	ed8d 8b08 	vstr	d8, [sp, #32]
 801861a:	f7ff faab 	bl	8017b74 <rcl_timer_get_next_call_time>
 801861e:	f240 3321 	movw	r3, #801	@ 0x321
 8018622:	4298      	cmp	r0, r3
 8018624:	f000 80bb 	beq.w	801879e <rcl_wait+0x22e>
 8018628:	2800      	cmp	r0, #0
 801862a:	d165      	bne.n	80186f8 <rcl_wait+0x188>
 801862c:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
 8018630:	7830      	ldrb	r0, [r6, #0]
 8018632:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018634:	ab18      	add	r3, sp, #96	@ 0x60
 8018636:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 801863a:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 801863e:	9205      	str	r2, [sp, #20]
 8018640:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8018644:	4297      	cmp	r7, r2
 8018646:	9a05      	ldr	r2, [sp, #20]
 8018648:	eb71 0202 	sbcs.w	r2, r1, r2
 801864c:	da06      	bge.n	801865c <rcl_wait+0xec>
 801864e:	e943 7108 	strd	r7, r1, [r3, #-32]
 8018652:	ab18      	add	r3, sp, #96	@ 0x60
 8018654:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018658:	f840 6c30 	str.w	r6, [r0, #-48]
 801865c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801865e:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 8018660:	3501      	adds	r5, #1
 8018662:	42b5      	cmp	r5, r6
 8018664:	f080 8114 	bcs.w	8018890 <rcl_wait+0x320>
 8018668:	6923      	ldr	r3, [r4, #16]
 801866a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801866e:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8018672:	2800      	cmp	r0, #0
 8018674:	d0f4      	beq.n	8018660 <rcl_wait+0xf0>
 8018676:	a907      	add	r1, sp, #28
 8018678:	f7ff f9a8 	bl	80179cc <rcl_timer_clock>
 801867c:	4603      	mov	r3, r0
 801867e:	2800      	cmp	r0, #0
 8018680:	f040 8141 	bne.w	8018906 <rcl_wait+0x396>
 8018684:	9807      	ldr	r0, [sp, #28]
 8018686:	7802      	ldrb	r2, [r0, #0]
 8018688:	2a01      	cmp	r2, #1
 801868a:	d1c0      	bne.n	801860e <rcl_wait+0x9e>
 801868c:	f10d 011b 	add.w	r1, sp, #27
 8018690:	f88d 301b 	strb.w	r3, [sp, #27]
 8018694:	f7fe ff72 	bl	801757c <rcl_is_enabled_ros_time_override>
 8018698:	4602      	mov	r2, r0
 801869a:	2800      	cmp	r0, #0
 801869c:	f040 8133 	bne.w	8018906 <rcl_wait+0x396>
 80186a0:	6923      	ldr	r3, [r4, #16]
 80186a2:	f89d 101b 	ldrb.w	r1, [sp, #27]
 80186a6:	f853 0009 	ldr.w	r0, [r3, r9]
 80186aa:	2900      	cmp	r1, #0
 80186ac:	d0b0      	beq.n	8018610 <rcl_wait+0xa0>
 80186ae:	ae08      	add	r6, sp, #32
 80186b0:	4631      	mov	r1, r6
 80186b2:	f88d 2020 	strb.w	r2, [sp, #32]
 80186b6:	f7ff fa23 	bl	8017b00 <rcl_timer_is_ready>
 80186ba:	2800      	cmp	r0, #0
 80186bc:	f040 8123 	bne.w	8018906 <rcl_wait+0x396>
 80186c0:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d0c9      	beq.n	801865c <rcl_wait+0xec>
 80186c8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80186ca:	e02f      	b.n	801872c <rcl_wait+0x1bc>
 80186cc:	68c3      	ldr	r3, [r0, #12]
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	f47f af61 	bne.w	8018596 <rcl_wait+0x26>
 80186d4:	6943      	ldr	r3, [r0, #20]
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	f47f af5d 	bne.w	8018596 <rcl_wait+0x26>
 80186dc:	69c3      	ldr	r3, [r0, #28]
 80186de:	2b00      	cmp	r3, #0
 80186e0:	f47f af59 	bne.w	8018596 <rcl_wait+0x26>
 80186e4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	f47f af55 	bne.w	8018596 <rcl_wait+0x26>
 80186ec:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	f47f af51 	bne.w	8018596 <rcl_wait+0x26>
 80186f4:	f240 3085 	movw	r0, #901	@ 0x385
 80186f8:	b019      	add	sp, #100	@ 0x64
 80186fa:	ecbd 8b02 	vpop	{d8}
 80186fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018702:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018706:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801870a:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 801870e:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 8018712:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 8018716:	ea58 0307 	orrs.w	r3, r8, r7
 801871a:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
 801871e:	e9cd 660e 	strd	r6, r6, [sp, #56]	@ 0x38
 8018722:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8018726:	f040 80b4 	bne.w	8018892 <rcl_wait+0x322>
 801872a:	ae08      	add	r6, sp, #32
 801872c:	2200      	movs	r2, #0
 801872e:	2300      	movs	r3, #0
 8018730:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018734:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8018738:	9602      	str	r6, [sp, #8]
 801873a:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 801873c:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8018740:	e9cd 3200 	strd	r3, r2, [sp]
 8018744:	f105 0110 	add.w	r1, r5, #16
 8018748:	f105 031c 	add.w	r3, r5, #28
 801874c:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 8018750:	1d28      	adds	r0, r5, #4
 8018752:	f001 ff43 	bl	801a5dc <rmw_wait>
 8018756:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018758:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801875a:	4680      	mov	r8, r0
 801875c:	b332      	cbz	r2, 80187ac <rcl_wait+0x23c>
 801875e:	2500      	movs	r5, #0
 8018760:	462f      	mov	r7, r5
 8018762:	462e      	mov	r6, r5
 8018764:	e007      	b.n	8018776 <rcl_wait+0x206>
 8018766:	6922      	ldr	r2, [r4, #16]
 8018768:	f842 3009 	str.w	r3, [r2, r9]
 801876c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801876e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018770:	3501      	adds	r5, #1
 8018772:	4295      	cmp	r5, r2
 8018774:	d21b      	bcs.n	80187ae <rcl_wait+0x23e>
 8018776:	6920      	ldr	r0, [r4, #16]
 8018778:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801877c:	a907      	add	r1, sp, #28
 801877e:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8018782:	2800      	cmp	r0, #0
 8018784:	d0f4      	beq.n	8018770 <rcl_wait+0x200>
 8018786:	f88d 601c 	strb.w	r6, [sp, #28]
 801878a:	f7ff f9b9 	bl	8017b00 <rcl_timer_is_ready>
 801878e:	2800      	cmp	r0, #0
 8018790:	d1b2      	bne.n	80186f8 <rcl_wait+0x188>
 8018792:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8018796:	2b00      	cmp	r3, #0
 8018798:	d0e5      	beq.n	8018766 <rcl_wait+0x1f6>
 801879a:	461f      	mov	r7, r3
 801879c:	e7e6      	b.n	801876c <rcl_wait+0x1fc>
 801879e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80187a0:	6923      	ldr	r3, [r4, #16]
 80187a2:	6c16      	ldr	r6, [r2, #64]	@ 0x40
 80187a4:	2200      	movs	r2, #0
 80187a6:	f843 2009 	str.w	r2, [r3, r9]
 80187aa:	e759      	b.n	8018660 <rcl_wait+0xf0>
 80187ac:	4617      	mov	r7, r2
 80187ae:	f038 0002 	bics.w	r0, r8, #2
 80187b2:	f040 80a8 	bne.w	8018906 <rcl_wait+0x396>
 80187b6:	6866      	ldr	r6, [r4, #4]
 80187b8:	4602      	mov	r2, r0
 80187ba:	b91e      	cbnz	r6, 80187c4 <rcl_wait+0x254>
 80187bc:	e00d      	b.n	80187da <rcl_wait+0x26a>
 80187be:	3201      	adds	r2, #1
 80187c0:	4296      	cmp	r6, r2
 80187c2:	d00a      	beq.n	80187da <rcl_wait+0x26a>
 80187c4:	6899      	ldr	r1, [r3, #8]
 80187c6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80187ca:	2900      	cmp	r1, #0
 80187cc:	d1f7      	bne.n	80187be <rcl_wait+0x24e>
 80187ce:	6825      	ldr	r5, [r4, #0]
 80187d0:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80187d4:	3201      	adds	r2, #1
 80187d6:	4296      	cmp	r6, r2
 80187d8:	d1f4      	bne.n	80187c4 <rcl_wait+0x254>
 80187da:	68e6      	ldr	r6, [r4, #12]
 80187dc:	2200      	movs	r2, #0
 80187de:	b91e      	cbnz	r6, 80187e8 <rcl_wait+0x278>
 80187e0:	e00d      	b.n	80187fe <rcl_wait+0x28e>
 80187e2:	3201      	adds	r2, #1
 80187e4:	42b2      	cmp	r2, r6
 80187e6:	d00a      	beq.n	80187fe <rcl_wait+0x28e>
 80187e8:	6959      	ldr	r1, [r3, #20]
 80187ea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80187ee:	2900      	cmp	r1, #0
 80187f0:	d1f7      	bne.n	80187e2 <rcl_wait+0x272>
 80187f2:	68a5      	ldr	r5, [r4, #8]
 80187f4:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80187f8:	3201      	adds	r2, #1
 80187fa:	42b2      	cmp	r2, r6
 80187fc:	d1f4      	bne.n	80187e8 <rcl_wait+0x278>
 80187fe:	69e6      	ldr	r6, [r4, #28]
 8018800:	2200      	movs	r2, #0
 8018802:	b91e      	cbnz	r6, 801880c <rcl_wait+0x29c>
 8018804:	e00d      	b.n	8018822 <rcl_wait+0x2b2>
 8018806:	3201      	adds	r2, #1
 8018808:	4296      	cmp	r6, r2
 801880a:	d00a      	beq.n	8018822 <rcl_wait+0x2b2>
 801880c:	6a19      	ldr	r1, [r3, #32]
 801880e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018812:	2900      	cmp	r1, #0
 8018814:	d1f7      	bne.n	8018806 <rcl_wait+0x296>
 8018816:	69a5      	ldr	r5, [r4, #24]
 8018818:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801881c:	3201      	adds	r2, #1
 801881e:	4296      	cmp	r6, r2
 8018820:	d1f4      	bne.n	801880c <rcl_wait+0x29c>
 8018822:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8018824:	2200      	movs	r2, #0
 8018826:	b91e      	cbnz	r6, 8018830 <rcl_wait+0x2c0>
 8018828:	e00d      	b.n	8018846 <rcl_wait+0x2d6>
 801882a:	3201      	adds	r2, #1
 801882c:	42b2      	cmp	r2, r6
 801882e:	d00a      	beq.n	8018846 <rcl_wait+0x2d6>
 8018830:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8018832:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018836:	2900      	cmp	r1, #0
 8018838:	d1f7      	bne.n	801882a <rcl_wait+0x2ba>
 801883a:	6a25      	ldr	r5, [r4, #32]
 801883c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8018840:	3201      	adds	r2, #1
 8018842:	42b2      	cmp	r2, r6
 8018844:	d1f4      	bne.n	8018830 <rcl_wait+0x2c0>
 8018846:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018848:	2200      	movs	r2, #0
 801884a:	b91e      	cbnz	r6, 8018854 <rcl_wait+0x2e4>
 801884c:	e00d      	b.n	801886a <rcl_wait+0x2fa>
 801884e:	3201      	adds	r2, #1
 8018850:	42b2      	cmp	r2, r6
 8018852:	d00a      	beq.n	801886a <rcl_wait+0x2fa>
 8018854:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8018856:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801885a:	2900      	cmp	r1, #0
 801885c:	d1f7      	bne.n	801884e <rcl_wait+0x2de>
 801885e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8018860:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8018864:	3201      	adds	r2, #1
 8018866:	42b2      	cmp	r2, r6
 8018868:	d1f4      	bne.n	8018854 <rcl_wait+0x2e4>
 801886a:	f1b8 0f02 	cmp.w	r8, #2
 801886e:	f47f af43 	bne.w	80186f8 <rcl_wait+0x188>
 8018872:	f087 0701 	eor.w	r7, r7, #1
 8018876:	0078      	lsls	r0, r7, #1
 8018878:	e73e      	b.n	80186f8 <rcl_wait+0x188>
 801887a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801887e:	b019      	add	sp, #100	@ 0x64
 8018880:	ecbd 8b02 	vpop	{d8}
 8018884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018888:	ffffffff 	.word	0xffffffff
 801888c:	7fffffff 	.word	0x7fffffff
 8018890:	465f      	mov	r7, fp
 8018892:	f1b8 0f01 	cmp.w	r8, #1
 8018896:	f177 0300 	sbcs.w	r3, r7, #0
 801889a:	db3a      	blt.n	8018912 <rcl_wait+0x3a2>
 801889c:	2601      	movs	r6, #1
 801889e:	ad10      	add	r5, sp, #64	@ 0x40
 80188a0:	f10d 0958 	add.w	r9, sp, #88	@ 0x58
 80188a4:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 80188a8:	a908      	add	r1, sp, #32
 80188aa:	b1a0      	cbz	r0, 80188d6 <rcl_wait+0x366>
 80188ac:	f7fe fe5a 	bl	8017564 <rcl_clock_get_now>
 80188b0:	2800      	cmp	r0, #0
 80188b2:	f47f af21 	bne.w	80186f8 <rcl_wait+0x188>
 80188b6:	9a08      	ldr	r2, [sp, #32]
 80188b8:	68ab      	ldr	r3, [r5, #8]
 80188ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80188bc:	1a9b      	subs	r3, r3, r2
 80188be:	68ea      	ldr	r2, [r5, #12]
 80188c0:	eb62 0201 	sbc.w	r2, r2, r1
 80188c4:	4598      	cmp	r8, r3
 80188c6:	eb77 0102 	sbcs.w	r1, r7, r2
 80188ca:	bfba      	itte	lt
 80188cc:	4643      	movlt	r3, r8
 80188ce:	463a      	movlt	r2, r7
 80188d0:	2601      	movge	r6, #1
 80188d2:	4698      	mov	r8, r3
 80188d4:	4617      	mov	r7, r2
 80188d6:	3508      	adds	r5, #8
 80188d8:	45a9      	cmp	r9, r5
 80188da:	d1e3      	bne.n	80188a4 <rcl_wait+0x334>
 80188dc:	2f00      	cmp	r7, #0
 80188de:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80188e0:	bfab      	itete	ge
 80188e2:	4640      	movge	r0, r8
 80188e4:	2000      	movlt	r0, #0
 80188e6:	4639      	movge	r1, r7
 80188e8:	2100      	movlt	r1, #0
 80188ea:	2e00      	cmp	r6, #0
 80188ec:	f43f af24 	beq.w	8018738 <rcl_wait+0x1c8>
 80188f0:	a30d      	add	r3, pc, #52	@ (adr r3, 8018928 <rcl_wait+0x3b8>)
 80188f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188f6:	f7e8 f9b7 	bl	8000c68 <__aeabi_ldivmod>
 80188fa:	ae08      	add	r6, sp, #32
 80188fc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018900:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8018904:	e718      	b.n	8018738 <rcl_wait+0x1c8>
 8018906:	2001      	movs	r0, #1
 8018908:	b019      	add	sp, #100	@ 0x64
 801890a:	ecbd 8b02 	vpop	{d8}
 801890e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018912:	2600      	movs	r6, #0
 8018914:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8018918:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801891c:	e7bf      	b.n	801889e <rcl_wait+0x32e>
 801891e:	200b      	movs	r0, #11
 8018920:	4770      	bx	lr
 8018922:	bf00      	nop
 8018924:	f3af 8000 	nop.w
 8018928:	3b9aca00 	.word	0x3b9aca00
 801892c:	00000000 	.word	0x00000000

08018930 <rcl_action_take_goal_response>:
 8018930:	b3b0      	cbz	r0, 80189a0 <rcl_action_take_goal_response+0x70>
 8018932:	b570      	push	{r4, r5, r6, lr}
 8018934:	4604      	mov	r4, r0
 8018936:	6800      	ldr	r0, [r0, #0]
 8018938:	b368      	cbz	r0, 8018996 <rcl_action_take_goal_response+0x66>
 801893a:	460d      	mov	r5, r1
 801893c:	4616      	mov	r6, r2
 801893e:	f7fd fdbf 	bl	80164c0 <rcl_client_is_valid>
 8018942:	b330      	cbz	r0, 8018992 <rcl_action_take_goal_response+0x62>
 8018944:	6820      	ldr	r0, [r4, #0]
 8018946:	3004      	adds	r0, #4
 8018948:	f7fd fdba 	bl	80164c0 <rcl_client_is_valid>
 801894c:	b308      	cbz	r0, 8018992 <rcl_action_take_goal_response+0x62>
 801894e:	6820      	ldr	r0, [r4, #0]
 8018950:	3008      	adds	r0, #8
 8018952:	f7fd fdb5 	bl	80164c0 <rcl_client_is_valid>
 8018956:	b1e0      	cbz	r0, 8018992 <rcl_action_take_goal_response+0x62>
 8018958:	6820      	ldr	r0, [r4, #0]
 801895a:	300c      	adds	r0, #12
 801895c:	f7fe fd66 	bl	801742c <rcl_subscription_is_valid>
 8018960:	b1b8      	cbz	r0, 8018992 <rcl_action_take_goal_response+0x62>
 8018962:	6820      	ldr	r0, [r4, #0]
 8018964:	3010      	adds	r0, #16
 8018966:	f7fe fd61 	bl	801742c <rcl_subscription_is_valid>
 801896a:	b190      	cbz	r0, 8018992 <rcl_action_take_goal_response+0x62>
 801896c:	b1b5      	cbz	r5, 801899c <rcl_action_take_goal_response+0x6c>
 801896e:	b1ae      	cbz	r6, 801899c <rcl_action_take_goal_response+0x6c>
 8018970:	6820      	ldr	r0, [r4, #0]
 8018972:	4632      	mov	r2, r6
 8018974:	4629      	mov	r1, r5
 8018976:	f7fd fd37 	bl	80163e8 <rcl_take_response>
 801897a:	b148      	cbz	r0, 8018990 <rcl_action_take_goal_response+0x60>
 801897c:	280a      	cmp	r0, #10
 801897e:	d007      	beq.n	8018990 <rcl_action_take_goal_response+0x60>
 8018980:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8018984:	f640 0337 	movw	r3, #2103	@ 0x837
 8018988:	4290      	cmp	r0, r2
 801898a:	bf0c      	ite	eq
 801898c:	4618      	moveq	r0, r3
 801898e:	2001      	movne	r0, #1
 8018990:	bd70      	pop	{r4, r5, r6, pc}
 8018992:	f7f6 fd81 	bl	800f498 <rcutils_reset_error>
 8018996:	f640 0036 	movw	r0, #2102	@ 0x836
 801899a:	bd70      	pop	{r4, r5, r6, pc}
 801899c:	200b      	movs	r0, #11
 801899e:	bd70      	pop	{r4, r5, r6, pc}
 80189a0:	f640 0036 	movw	r0, #2102	@ 0x836
 80189a4:	4770      	bx	lr
 80189a6:	bf00      	nop

080189a8 <rcl_action_send_result_request>:
 80189a8:	b378      	cbz	r0, 8018a0a <rcl_action_send_result_request+0x62>
 80189aa:	b570      	push	{r4, r5, r6, lr}
 80189ac:	4604      	mov	r4, r0
 80189ae:	6800      	ldr	r0, [r0, #0]
 80189b0:	b330      	cbz	r0, 8018a00 <rcl_action_send_result_request+0x58>
 80189b2:	460d      	mov	r5, r1
 80189b4:	4616      	mov	r6, r2
 80189b6:	f7fd fd83 	bl	80164c0 <rcl_client_is_valid>
 80189ba:	b1f8      	cbz	r0, 80189fc <rcl_action_send_result_request+0x54>
 80189bc:	6820      	ldr	r0, [r4, #0]
 80189be:	3004      	adds	r0, #4
 80189c0:	f7fd fd7e 	bl	80164c0 <rcl_client_is_valid>
 80189c4:	b1d0      	cbz	r0, 80189fc <rcl_action_send_result_request+0x54>
 80189c6:	6820      	ldr	r0, [r4, #0]
 80189c8:	3008      	adds	r0, #8
 80189ca:	f7fd fd79 	bl	80164c0 <rcl_client_is_valid>
 80189ce:	b1a8      	cbz	r0, 80189fc <rcl_action_send_result_request+0x54>
 80189d0:	6820      	ldr	r0, [r4, #0]
 80189d2:	300c      	adds	r0, #12
 80189d4:	f7fe fd2a 	bl	801742c <rcl_subscription_is_valid>
 80189d8:	b180      	cbz	r0, 80189fc <rcl_action_send_result_request+0x54>
 80189da:	6820      	ldr	r0, [r4, #0]
 80189dc:	3010      	adds	r0, #16
 80189de:	f7fe fd25 	bl	801742c <rcl_subscription_is_valid>
 80189e2:	b158      	cbz	r0, 80189fc <rcl_action_send_result_request+0x54>
 80189e4:	b17d      	cbz	r5, 8018a06 <rcl_action_send_result_request+0x5e>
 80189e6:	b176      	cbz	r6, 8018a06 <rcl_action_send_result_request+0x5e>
 80189e8:	6820      	ldr	r0, [r4, #0]
 80189ea:	4632      	mov	r2, r6
 80189ec:	4629      	mov	r1, r5
 80189ee:	3008      	adds	r0, #8
 80189f0:	f7fd fca6 	bl	8016340 <rcl_send_request>
 80189f4:	3800      	subs	r0, #0
 80189f6:	bf18      	it	ne
 80189f8:	2001      	movne	r0, #1
 80189fa:	bd70      	pop	{r4, r5, r6, pc}
 80189fc:	f7f6 fd4c 	bl	800f498 <rcutils_reset_error>
 8018a00:	f640 0036 	movw	r0, #2102	@ 0x836
 8018a04:	bd70      	pop	{r4, r5, r6, pc}
 8018a06:	200b      	movs	r0, #11
 8018a08:	bd70      	pop	{r4, r5, r6, pc}
 8018a0a:	f640 0036 	movw	r0, #2102	@ 0x836
 8018a0e:	4770      	bx	lr

08018a10 <rcl_action_take_result_response>:
 8018a10:	2800      	cmp	r0, #0
 8018a12:	d037      	beq.n	8018a84 <rcl_action_take_result_response+0x74>
 8018a14:	b570      	push	{r4, r5, r6, lr}
 8018a16:	4604      	mov	r4, r0
 8018a18:	6800      	ldr	r0, [r0, #0]
 8018a1a:	b370      	cbz	r0, 8018a7a <rcl_action_take_result_response+0x6a>
 8018a1c:	460d      	mov	r5, r1
 8018a1e:	4616      	mov	r6, r2
 8018a20:	f7fd fd4e 	bl	80164c0 <rcl_client_is_valid>
 8018a24:	b338      	cbz	r0, 8018a76 <rcl_action_take_result_response+0x66>
 8018a26:	6820      	ldr	r0, [r4, #0]
 8018a28:	3004      	adds	r0, #4
 8018a2a:	f7fd fd49 	bl	80164c0 <rcl_client_is_valid>
 8018a2e:	b310      	cbz	r0, 8018a76 <rcl_action_take_result_response+0x66>
 8018a30:	6820      	ldr	r0, [r4, #0]
 8018a32:	3008      	adds	r0, #8
 8018a34:	f7fd fd44 	bl	80164c0 <rcl_client_is_valid>
 8018a38:	b1e8      	cbz	r0, 8018a76 <rcl_action_take_result_response+0x66>
 8018a3a:	6820      	ldr	r0, [r4, #0]
 8018a3c:	300c      	adds	r0, #12
 8018a3e:	f7fe fcf5 	bl	801742c <rcl_subscription_is_valid>
 8018a42:	b1c0      	cbz	r0, 8018a76 <rcl_action_take_result_response+0x66>
 8018a44:	6820      	ldr	r0, [r4, #0]
 8018a46:	3010      	adds	r0, #16
 8018a48:	f7fe fcf0 	bl	801742c <rcl_subscription_is_valid>
 8018a4c:	b198      	cbz	r0, 8018a76 <rcl_action_take_result_response+0x66>
 8018a4e:	b1bd      	cbz	r5, 8018a80 <rcl_action_take_result_response+0x70>
 8018a50:	b1b6      	cbz	r6, 8018a80 <rcl_action_take_result_response+0x70>
 8018a52:	6820      	ldr	r0, [r4, #0]
 8018a54:	4632      	mov	r2, r6
 8018a56:	4629      	mov	r1, r5
 8018a58:	3008      	adds	r0, #8
 8018a5a:	f7fd fcc5 	bl	80163e8 <rcl_take_response>
 8018a5e:	b148      	cbz	r0, 8018a74 <rcl_action_take_result_response+0x64>
 8018a60:	280a      	cmp	r0, #10
 8018a62:	d007      	beq.n	8018a74 <rcl_action_take_result_response+0x64>
 8018a64:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8018a68:	f640 0337 	movw	r3, #2103	@ 0x837
 8018a6c:	4290      	cmp	r0, r2
 8018a6e:	bf0c      	ite	eq
 8018a70:	4618      	moveq	r0, r3
 8018a72:	2001      	movne	r0, #1
 8018a74:	bd70      	pop	{r4, r5, r6, pc}
 8018a76:	f7f6 fd0f 	bl	800f498 <rcutils_reset_error>
 8018a7a:	f640 0036 	movw	r0, #2102	@ 0x836
 8018a7e:	bd70      	pop	{r4, r5, r6, pc}
 8018a80:	200b      	movs	r0, #11
 8018a82:	bd70      	pop	{r4, r5, r6, pc}
 8018a84:	f640 0036 	movw	r0, #2102	@ 0x836
 8018a88:	4770      	bx	lr
 8018a8a:	bf00      	nop

08018a8c <rcl_action_take_cancel_response>:
 8018a8c:	2800      	cmp	r0, #0
 8018a8e:	d037      	beq.n	8018b00 <rcl_action_take_cancel_response+0x74>
 8018a90:	b570      	push	{r4, r5, r6, lr}
 8018a92:	4604      	mov	r4, r0
 8018a94:	6800      	ldr	r0, [r0, #0]
 8018a96:	b370      	cbz	r0, 8018af6 <rcl_action_take_cancel_response+0x6a>
 8018a98:	460d      	mov	r5, r1
 8018a9a:	4616      	mov	r6, r2
 8018a9c:	f7fd fd10 	bl	80164c0 <rcl_client_is_valid>
 8018aa0:	b338      	cbz	r0, 8018af2 <rcl_action_take_cancel_response+0x66>
 8018aa2:	6820      	ldr	r0, [r4, #0]
 8018aa4:	3004      	adds	r0, #4
 8018aa6:	f7fd fd0b 	bl	80164c0 <rcl_client_is_valid>
 8018aaa:	b310      	cbz	r0, 8018af2 <rcl_action_take_cancel_response+0x66>
 8018aac:	6820      	ldr	r0, [r4, #0]
 8018aae:	3008      	adds	r0, #8
 8018ab0:	f7fd fd06 	bl	80164c0 <rcl_client_is_valid>
 8018ab4:	b1e8      	cbz	r0, 8018af2 <rcl_action_take_cancel_response+0x66>
 8018ab6:	6820      	ldr	r0, [r4, #0]
 8018ab8:	300c      	adds	r0, #12
 8018aba:	f7fe fcb7 	bl	801742c <rcl_subscription_is_valid>
 8018abe:	b1c0      	cbz	r0, 8018af2 <rcl_action_take_cancel_response+0x66>
 8018ac0:	6820      	ldr	r0, [r4, #0]
 8018ac2:	3010      	adds	r0, #16
 8018ac4:	f7fe fcb2 	bl	801742c <rcl_subscription_is_valid>
 8018ac8:	b198      	cbz	r0, 8018af2 <rcl_action_take_cancel_response+0x66>
 8018aca:	b1bd      	cbz	r5, 8018afc <rcl_action_take_cancel_response+0x70>
 8018acc:	b1b6      	cbz	r6, 8018afc <rcl_action_take_cancel_response+0x70>
 8018ace:	6820      	ldr	r0, [r4, #0]
 8018ad0:	4632      	mov	r2, r6
 8018ad2:	4629      	mov	r1, r5
 8018ad4:	3004      	adds	r0, #4
 8018ad6:	f7fd fc87 	bl	80163e8 <rcl_take_response>
 8018ada:	b148      	cbz	r0, 8018af0 <rcl_action_take_cancel_response+0x64>
 8018adc:	280a      	cmp	r0, #10
 8018ade:	d007      	beq.n	8018af0 <rcl_action_take_cancel_response+0x64>
 8018ae0:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8018ae4:	f640 0337 	movw	r3, #2103	@ 0x837
 8018ae8:	4290      	cmp	r0, r2
 8018aea:	bf0c      	ite	eq
 8018aec:	4618      	moveq	r0, r3
 8018aee:	2001      	movne	r0, #1
 8018af0:	bd70      	pop	{r4, r5, r6, pc}
 8018af2:	f7f6 fcd1 	bl	800f498 <rcutils_reset_error>
 8018af6:	f640 0036 	movw	r0, #2102	@ 0x836
 8018afa:	bd70      	pop	{r4, r5, r6, pc}
 8018afc:	200b      	movs	r0, #11
 8018afe:	bd70      	pop	{r4, r5, r6, pc}
 8018b00:	f640 0036 	movw	r0, #2102	@ 0x836
 8018b04:	4770      	bx	lr
 8018b06:	bf00      	nop

08018b08 <rcl_action_take_feedback>:
 8018b08:	2800      	cmp	r0, #0
 8018b0a:	d037      	beq.n	8018b7c <rcl_action_take_feedback+0x74>
 8018b0c:	b530      	push	{r4, r5, lr}
 8018b0e:	4604      	mov	r4, r0
 8018b10:	6800      	ldr	r0, [r0, #0]
 8018b12:	b08f      	sub	sp, #60	@ 0x3c
 8018b14:	b358      	cbz	r0, 8018b6e <rcl_action_take_feedback+0x66>
 8018b16:	460d      	mov	r5, r1
 8018b18:	f7fd fcd2 	bl	80164c0 <rcl_client_is_valid>
 8018b1c:	b328      	cbz	r0, 8018b6a <rcl_action_take_feedback+0x62>
 8018b1e:	6820      	ldr	r0, [r4, #0]
 8018b20:	3004      	adds	r0, #4
 8018b22:	f7fd fccd 	bl	80164c0 <rcl_client_is_valid>
 8018b26:	b300      	cbz	r0, 8018b6a <rcl_action_take_feedback+0x62>
 8018b28:	6820      	ldr	r0, [r4, #0]
 8018b2a:	3008      	adds	r0, #8
 8018b2c:	f7fd fcc8 	bl	80164c0 <rcl_client_is_valid>
 8018b30:	b1d8      	cbz	r0, 8018b6a <rcl_action_take_feedback+0x62>
 8018b32:	6820      	ldr	r0, [r4, #0]
 8018b34:	300c      	adds	r0, #12
 8018b36:	f7fe fc79 	bl	801742c <rcl_subscription_is_valid>
 8018b3a:	b1b0      	cbz	r0, 8018b6a <rcl_action_take_feedback+0x62>
 8018b3c:	6820      	ldr	r0, [r4, #0]
 8018b3e:	3010      	adds	r0, #16
 8018b40:	f7fe fc74 	bl	801742c <rcl_subscription_is_valid>
 8018b44:	b188      	cbz	r0, 8018b6a <rcl_action_take_feedback+0x62>
 8018b46:	b1b5      	cbz	r5, 8018b76 <rcl_action_take_feedback+0x6e>
 8018b48:	6820      	ldr	r0, [r4, #0]
 8018b4a:	2300      	movs	r3, #0
 8018b4c:	466a      	mov	r2, sp
 8018b4e:	4629      	mov	r1, r5
 8018b50:	300c      	adds	r0, #12
 8018b52:	f7fe fc0d 	bl	8017370 <rcl_take>
 8018b56:	b160      	cbz	r0, 8018b72 <rcl_action_take_feedback+0x6a>
 8018b58:	f240 1391 	movw	r3, #401	@ 0x191
 8018b5c:	4298      	cmp	r0, r3
 8018b5e:	d010      	beq.n	8018b82 <rcl_action_take_feedback+0x7a>
 8018b60:	280a      	cmp	r0, #10
 8018b62:	bf18      	it	ne
 8018b64:	2001      	movne	r0, #1
 8018b66:	b00f      	add	sp, #60	@ 0x3c
 8018b68:	bd30      	pop	{r4, r5, pc}
 8018b6a:	f7f6 fc95 	bl	800f498 <rcutils_reset_error>
 8018b6e:	f640 0036 	movw	r0, #2102	@ 0x836
 8018b72:	b00f      	add	sp, #60	@ 0x3c
 8018b74:	bd30      	pop	{r4, r5, pc}
 8018b76:	200b      	movs	r0, #11
 8018b78:	b00f      	add	sp, #60	@ 0x3c
 8018b7a:	bd30      	pop	{r4, r5, pc}
 8018b7c:	f640 0036 	movw	r0, #2102	@ 0x836
 8018b80:	4770      	bx	lr
 8018b82:	f640 0037 	movw	r0, #2103	@ 0x837
 8018b86:	e7f4      	b.n	8018b72 <rcl_action_take_feedback+0x6a>

08018b88 <rcl_action_wait_set_add_action_client>:
 8018b88:	2800      	cmp	r0, #0
 8018b8a:	d045      	beq.n	8018c18 <rcl_action_wait_set_add_action_client+0x90>
 8018b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b8e:	460c      	mov	r4, r1
 8018b90:	2900      	cmp	r1, #0
 8018b92:	d03e      	beq.n	8018c12 <rcl_action_wait_set_add_action_client+0x8a>
 8018b94:	4605      	mov	r5, r0
 8018b96:	6808      	ldr	r0, [r1, #0]
 8018b98:	2800      	cmp	r0, #0
 8018b9a:	d03a      	beq.n	8018c12 <rcl_action_wait_set_add_action_client+0x8a>
 8018b9c:	4617      	mov	r7, r2
 8018b9e:	461e      	mov	r6, r3
 8018ba0:	f7fd fc8e 	bl	80164c0 <rcl_client_is_valid>
 8018ba4:	b398      	cbz	r0, 8018c0e <rcl_action_wait_set_add_action_client+0x86>
 8018ba6:	6820      	ldr	r0, [r4, #0]
 8018ba8:	3004      	adds	r0, #4
 8018baa:	f7fd fc89 	bl	80164c0 <rcl_client_is_valid>
 8018bae:	b370      	cbz	r0, 8018c0e <rcl_action_wait_set_add_action_client+0x86>
 8018bb0:	6820      	ldr	r0, [r4, #0]
 8018bb2:	3008      	adds	r0, #8
 8018bb4:	f7fd fc84 	bl	80164c0 <rcl_client_is_valid>
 8018bb8:	b348      	cbz	r0, 8018c0e <rcl_action_wait_set_add_action_client+0x86>
 8018bba:	6820      	ldr	r0, [r4, #0]
 8018bbc:	300c      	adds	r0, #12
 8018bbe:	f7fe fc35 	bl	801742c <rcl_subscription_is_valid>
 8018bc2:	b320      	cbz	r0, 8018c0e <rcl_action_wait_set_add_action_client+0x86>
 8018bc4:	6820      	ldr	r0, [r4, #0]
 8018bc6:	3010      	adds	r0, #16
 8018bc8:	f7fe fc30 	bl	801742c <rcl_subscription_is_valid>
 8018bcc:	b1f8      	cbz	r0, 8018c0e <rcl_action_wait_set_add_action_client+0x86>
 8018bce:	6821      	ldr	r1, [r4, #0]
 8018bd0:	4628      	mov	r0, r5
 8018bd2:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8018bd6:	f7ff fc73 	bl	80184c0 <rcl_wait_set_add_client>
 8018bda:	b9b8      	cbnz	r0, 8018c0c <rcl_action_wait_set_add_action_client+0x84>
 8018bdc:	6821      	ldr	r1, [r4, #0]
 8018bde:	4628      	mov	r0, r5
 8018be0:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8018be4:	3104      	adds	r1, #4
 8018be6:	f7ff fc6b 	bl	80184c0 <rcl_wait_set_add_client>
 8018bea:	b978      	cbnz	r0, 8018c0c <rcl_action_wait_set_add_action_client+0x84>
 8018bec:	6821      	ldr	r1, [r4, #0]
 8018bee:	4628      	mov	r0, r5
 8018bf0:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8018bf4:	3108      	adds	r1, #8
 8018bf6:	f7ff fc63 	bl	80184c0 <rcl_wait_set_add_client>
 8018bfa:	b938      	cbnz	r0, 8018c0c <rcl_action_wait_set_add_action_client+0x84>
 8018bfc:	6821      	ldr	r1, [r4, #0]
 8018bfe:	4628      	mov	r0, r5
 8018c00:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8018c04:	310c      	adds	r1, #12
 8018c06:	f7ff f8fb 	bl	8017e00 <rcl_wait_set_add_subscription>
 8018c0a:	b140      	cbz	r0, 8018c1e <rcl_action_wait_set_add_action_client+0x96>
 8018c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c0e:	f7f6 fc43 	bl	800f498 <rcutils_reset_error>
 8018c12:	f640 0036 	movw	r0, #2102	@ 0x836
 8018c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c18:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018c1c:	4770      	bx	lr
 8018c1e:	6821      	ldr	r1, [r4, #0]
 8018c20:	4628      	mov	r0, r5
 8018c22:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8018c26:	3110      	adds	r1, #16
 8018c28:	f7ff f8ea 	bl	8017e00 <rcl_wait_set_add_subscription>
 8018c2c:	2800      	cmp	r0, #0
 8018c2e:	d1ed      	bne.n	8018c0c <rcl_action_wait_set_add_action_client+0x84>
 8018c30:	b11f      	cbz	r7, 8018c3a <rcl_action_wait_set_add_action_client+0xb2>
 8018c32:	6823      	ldr	r3, [r4, #0]
 8018c34:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8018c38:	603b      	str	r3, [r7, #0]
 8018c3a:	2e00      	cmp	r6, #0
 8018c3c:	d0e6      	beq.n	8018c0c <rcl_action_wait_set_add_action_client+0x84>
 8018c3e:	6823      	ldr	r3, [r4, #0]
 8018c40:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8018c44:	6033      	str	r3, [r6, #0]
 8018c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018c48 <rcl_action_client_wait_set_get_entities_ready>:
 8018c48:	2800      	cmp	r0, #0
 8018c4a:	f000 8089 	beq.w	8018d60 <rcl_action_client_wait_set_get_entities_ready+0x118>
 8018c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c52:	460c      	mov	r4, r1
 8018c54:	2900      	cmp	r1, #0
 8018c56:	d079      	beq.n	8018d4c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8018c58:	4605      	mov	r5, r0
 8018c5a:	6808      	ldr	r0, [r1, #0]
 8018c5c:	2800      	cmp	r0, #0
 8018c5e:	d075      	beq.n	8018d4c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8018c60:	4616      	mov	r6, r2
 8018c62:	461f      	mov	r7, r3
 8018c64:	f7fd fc2c 	bl	80164c0 <rcl_client_is_valid>
 8018c68:	2800      	cmp	r0, #0
 8018c6a:	d06d      	beq.n	8018d48 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8018c6c:	6820      	ldr	r0, [r4, #0]
 8018c6e:	3004      	adds	r0, #4
 8018c70:	f7fd fc26 	bl	80164c0 <rcl_client_is_valid>
 8018c74:	2800      	cmp	r0, #0
 8018c76:	d067      	beq.n	8018d48 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8018c78:	6820      	ldr	r0, [r4, #0]
 8018c7a:	3008      	adds	r0, #8
 8018c7c:	f7fd fc20 	bl	80164c0 <rcl_client_is_valid>
 8018c80:	2800      	cmp	r0, #0
 8018c82:	d061      	beq.n	8018d48 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8018c84:	6820      	ldr	r0, [r4, #0]
 8018c86:	300c      	adds	r0, #12
 8018c88:	f7fe fbd0 	bl	801742c <rcl_subscription_is_valid>
 8018c8c:	2800      	cmp	r0, #0
 8018c8e:	d05b      	beq.n	8018d48 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8018c90:	6820      	ldr	r0, [r4, #0]
 8018c92:	3010      	adds	r0, #16
 8018c94:	f7fe fbca 	bl	801742c <rcl_subscription_is_valid>
 8018c98:	2800      	cmp	r0, #0
 8018c9a:	d055      	beq.n	8018d48 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8018c9c:	2e00      	cmp	r6, #0
 8018c9e:	d05c      	beq.n	8018d5a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8018ca0:	2f00      	cmp	r7, #0
 8018ca2:	d05a      	beq.n	8018d5a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8018ca4:	9b06      	ldr	r3, [sp, #24]
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	d057      	beq.n	8018d5a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8018caa:	9b07      	ldr	r3, [sp, #28]
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d054      	beq.n	8018d5a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8018cb0:	9b08      	ldr	r3, [sp, #32]
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d051      	beq.n	8018d5a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8018cb6:	6823      	ldr	r3, [r4, #0]
 8018cb8:	686a      	ldr	r2, [r5, #4]
 8018cba:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8018cbe:	428a      	cmp	r2, r1
 8018cc0:	d948      	bls.n	8018d54 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8018cc2:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8018cc6:	4282      	cmp	r2, r0
 8018cc8:	d944      	bls.n	8018d54 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8018cca:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8018cce:	69ea      	ldr	r2, [r5, #28]
 8018cd0:	42a2      	cmp	r2, r4
 8018cd2:	d93f      	bls.n	8018d54 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8018cd4:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8018cd8:	4562      	cmp	r2, ip
 8018cda:	d93b      	bls.n	8018d54 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8018cdc:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8018ce0:	4572      	cmp	r2, lr
 8018ce2:	d937      	bls.n	8018d54 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8018ce4:	69aa      	ldr	r2, [r5, #24]
 8018ce6:	682d      	ldr	r5, [r5, #0]
 8018ce8:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8018cec:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8018cf0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8018cf4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8018cf8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8018cfc:	f103 0c0c 	add.w	ip, r3, #12
 8018d00:	eba5 050c 	sub.w	r5, r5, ip
 8018d04:	fab5 f585 	clz	r5, r5
 8018d08:	096d      	lsrs	r5, r5, #5
 8018d0a:	7035      	strb	r5, [r6, #0]
 8018d0c:	f103 0510 	add.w	r5, r3, #16
 8018d10:	1b64      	subs	r4, r4, r5
 8018d12:	fab4 f484 	clz	r4, r4
 8018d16:	0964      	lsrs	r4, r4, #5
 8018d18:	703c      	strb	r4, [r7, #0]
 8018d1a:	eba3 0008 	sub.w	r0, r3, r8
 8018d1e:	1d1c      	adds	r4, r3, #4
 8018d20:	3308      	adds	r3, #8
 8018d22:	1ad3      	subs	r3, r2, r3
 8018d24:	fab0 f080 	clz	r0, r0
 8018d28:	9a06      	ldr	r2, [sp, #24]
 8018d2a:	0940      	lsrs	r0, r0, #5
 8018d2c:	1b09      	subs	r1, r1, r4
 8018d2e:	7010      	strb	r0, [r2, #0]
 8018d30:	fab1 f181 	clz	r1, r1
 8018d34:	9a07      	ldr	r2, [sp, #28]
 8018d36:	0949      	lsrs	r1, r1, #5
 8018d38:	7011      	strb	r1, [r2, #0]
 8018d3a:	fab3 f383 	clz	r3, r3
 8018d3e:	9a08      	ldr	r2, [sp, #32]
 8018d40:	095b      	lsrs	r3, r3, #5
 8018d42:	2000      	movs	r0, #0
 8018d44:	7013      	strb	r3, [r2, #0]
 8018d46:	e003      	b.n	8018d50 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8018d48:	f7f6 fba6 	bl	800f498 <rcutils_reset_error>
 8018d4c:	f640 0036 	movw	r0, #2102	@ 0x836
 8018d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d54:	2001      	movs	r0, #1
 8018d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d5a:	200b      	movs	r0, #11
 8018d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d60:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018d64:	4770      	bx	lr
 8018d66:	bf00      	nop

08018d68 <rcl_action_take_goal_request>:
 8018d68:	b3b0      	cbz	r0, 8018dd8 <rcl_action_take_goal_request+0x70>
 8018d6a:	b570      	push	{r4, r5, r6, lr}
 8018d6c:	4604      	mov	r4, r0
 8018d6e:	6800      	ldr	r0, [r0, #0]
 8018d70:	b368      	cbz	r0, 8018dce <rcl_action_take_goal_request+0x66>
 8018d72:	460d      	mov	r5, r1
 8018d74:	4616      	mov	r6, r2
 8018d76:	f7fe fa67 	bl	8017248 <rcl_service_is_valid>
 8018d7a:	b330      	cbz	r0, 8018dca <rcl_action_take_goal_request+0x62>
 8018d7c:	6820      	ldr	r0, [r4, #0]
 8018d7e:	3004      	adds	r0, #4
 8018d80:	f7fe fa62 	bl	8017248 <rcl_service_is_valid>
 8018d84:	b308      	cbz	r0, 8018dca <rcl_action_take_goal_request+0x62>
 8018d86:	6820      	ldr	r0, [r4, #0]
 8018d88:	3008      	adds	r0, #8
 8018d8a:	f7fe fa5d 	bl	8017248 <rcl_service_is_valid>
 8018d8e:	b1e0      	cbz	r0, 8018dca <rcl_action_take_goal_request+0x62>
 8018d90:	6820      	ldr	r0, [r4, #0]
 8018d92:	300c      	adds	r0, #12
 8018d94:	f7f5 fbbc 	bl	800e510 <rcl_publisher_is_valid>
 8018d98:	b1b8      	cbz	r0, 8018dca <rcl_action_take_goal_request+0x62>
 8018d9a:	6820      	ldr	r0, [r4, #0]
 8018d9c:	3010      	adds	r0, #16
 8018d9e:	f7f5 fbb7 	bl	800e510 <rcl_publisher_is_valid>
 8018da2:	b190      	cbz	r0, 8018dca <rcl_action_take_goal_request+0x62>
 8018da4:	b1b5      	cbz	r5, 8018dd4 <rcl_action_take_goal_request+0x6c>
 8018da6:	b1ae      	cbz	r6, 8018dd4 <rcl_action_take_goal_request+0x6c>
 8018da8:	6820      	ldr	r0, [r4, #0]
 8018daa:	4632      	mov	r2, r6
 8018dac:	4629      	mov	r1, r5
 8018dae:	f7fe f9cb 	bl	8017148 <rcl_take_request>
 8018db2:	b148      	cbz	r0, 8018dc8 <rcl_action_take_goal_request+0x60>
 8018db4:	280a      	cmp	r0, #10
 8018db6:	d007      	beq.n	8018dc8 <rcl_action_take_goal_request+0x60>
 8018db8:	f240 2259 	movw	r2, #601	@ 0x259
 8018dbc:	f640 0399 	movw	r3, #2201	@ 0x899
 8018dc0:	4290      	cmp	r0, r2
 8018dc2:	bf0c      	ite	eq
 8018dc4:	4618      	moveq	r0, r3
 8018dc6:	2001      	movne	r0, #1
 8018dc8:	bd70      	pop	{r4, r5, r6, pc}
 8018dca:	f7f6 fb65 	bl	800f498 <rcutils_reset_error>
 8018dce:	f640 0098 	movw	r0, #2200	@ 0x898
 8018dd2:	bd70      	pop	{r4, r5, r6, pc}
 8018dd4:	200b      	movs	r0, #11
 8018dd6:	bd70      	pop	{r4, r5, r6, pc}
 8018dd8:	f640 0098 	movw	r0, #2200	@ 0x898
 8018ddc:	4770      	bx	lr
 8018dde:	bf00      	nop

08018de0 <rcl_action_send_goal_response>:
 8018de0:	b378      	cbz	r0, 8018e42 <rcl_action_send_goal_response+0x62>
 8018de2:	b570      	push	{r4, r5, r6, lr}
 8018de4:	4604      	mov	r4, r0
 8018de6:	6800      	ldr	r0, [r0, #0]
 8018de8:	b330      	cbz	r0, 8018e38 <rcl_action_send_goal_response+0x58>
 8018dea:	460d      	mov	r5, r1
 8018dec:	4616      	mov	r6, r2
 8018dee:	f7fe fa2b 	bl	8017248 <rcl_service_is_valid>
 8018df2:	b1f8      	cbz	r0, 8018e34 <rcl_action_send_goal_response+0x54>
 8018df4:	6820      	ldr	r0, [r4, #0]
 8018df6:	3004      	adds	r0, #4
 8018df8:	f7fe fa26 	bl	8017248 <rcl_service_is_valid>
 8018dfc:	b1d0      	cbz	r0, 8018e34 <rcl_action_send_goal_response+0x54>
 8018dfe:	6820      	ldr	r0, [r4, #0]
 8018e00:	3008      	adds	r0, #8
 8018e02:	f7fe fa21 	bl	8017248 <rcl_service_is_valid>
 8018e06:	b1a8      	cbz	r0, 8018e34 <rcl_action_send_goal_response+0x54>
 8018e08:	6820      	ldr	r0, [r4, #0]
 8018e0a:	300c      	adds	r0, #12
 8018e0c:	f7f5 fb80 	bl	800e510 <rcl_publisher_is_valid>
 8018e10:	b180      	cbz	r0, 8018e34 <rcl_action_send_goal_response+0x54>
 8018e12:	6820      	ldr	r0, [r4, #0]
 8018e14:	3010      	adds	r0, #16
 8018e16:	f7f5 fb7b 	bl	800e510 <rcl_publisher_is_valid>
 8018e1a:	b158      	cbz	r0, 8018e34 <rcl_action_send_goal_response+0x54>
 8018e1c:	b17d      	cbz	r5, 8018e3e <rcl_action_send_goal_response+0x5e>
 8018e1e:	b176      	cbz	r6, 8018e3e <rcl_action_send_goal_response+0x5e>
 8018e20:	6820      	ldr	r0, [r4, #0]
 8018e22:	4632      	mov	r2, r6
 8018e24:	4629      	mov	r1, r5
 8018e26:	f7fe f9df 	bl	80171e8 <rcl_send_response>
 8018e2a:	b110      	cbz	r0, 8018e32 <rcl_action_send_goal_response+0x52>
 8018e2c:	2802      	cmp	r0, #2
 8018e2e:	bf18      	it	ne
 8018e30:	2001      	movne	r0, #1
 8018e32:	bd70      	pop	{r4, r5, r6, pc}
 8018e34:	f7f6 fb30 	bl	800f498 <rcutils_reset_error>
 8018e38:	f640 0098 	movw	r0, #2200	@ 0x898
 8018e3c:	bd70      	pop	{r4, r5, r6, pc}
 8018e3e:	200b      	movs	r0, #11
 8018e40:	bd70      	pop	{r4, r5, r6, pc}
 8018e42:	f640 0098 	movw	r0, #2200	@ 0x898
 8018e46:	4770      	bx	lr

08018e48 <rcl_action_take_result_request>:
 8018e48:	2800      	cmp	r0, #0
 8018e4a:	d037      	beq.n	8018ebc <rcl_action_take_result_request+0x74>
 8018e4c:	b570      	push	{r4, r5, r6, lr}
 8018e4e:	4604      	mov	r4, r0
 8018e50:	6800      	ldr	r0, [r0, #0]
 8018e52:	b370      	cbz	r0, 8018eb2 <rcl_action_take_result_request+0x6a>
 8018e54:	460d      	mov	r5, r1
 8018e56:	4616      	mov	r6, r2
 8018e58:	f7fe f9f6 	bl	8017248 <rcl_service_is_valid>
 8018e5c:	b338      	cbz	r0, 8018eae <rcl_action_take_result_request+0x66>
 8018e5e:	6820      	ldr	r0, [r4, #0]
 8018e60:	3004      	adds	r0, #4
 8018e62:	f7fe f9f1 	bl	8017248 <rcl_service_is_valid>
 8018e66:	b310      	cbz	r0, 8018eae <rcl_action_take_result_request+0x66>
 8018e68:	6820      	ldr	r0, [r4, #0]
 8018e6a:	3008      	adds	r0, #8
 8018e6c:	f7fe f9ec 	bl	8017248 <rcl_service_is_valid>
 8018e70:	b1e8      	cbz	r0, 8018eae <rcl_action_take_result_request+0x66>
 8018e72:	6820      	ldr	r0, [r4, #0]
 8018e74:	300c      	adds	r0, #12
 8018e76:	f7f5 fb4b 	bl	800e510 <rcl_publisher_is_valid>
 8018e7a:	b1c0      	cbz	r0, 8018eae <rcl_action_take_result_request+0x66>
 8018e7c:	6820      	ldr	r0, [r4, #0]
 8018e7e:	3010      	adds	r0, #16
 8018e80:	f7f5 fb46 	bl	800e510 <rcl_publisher_is_valid>
 8018e84:	b198      	cbz	r0, 8018eae <rcl_action_take_result_request+0x66>
 8018e86:	b1bd      	cbz	r5, 8018eb8 <rcl_action_take_result_request+0x70>
 8018e88:	b1b6      	cbz	r6, 8018eb8 <rcl_action_take_result_request+0x70>
 8018e8a:	6820      	ldr	r0, [r4, #0]
 8018e8c:	4632      	mov	r2, r6
 8018e8e:	4629      	mov	r1, r5
 8018e90:	3008      	adds	r0, #8
 8018e92:	f7fe f959 	bl	8017148 <rcl_take_request>
 8018e96:	b148      	cbz	r0, 8018eac <rcl_action_take_result_request+0x64>
 8018e98:	280a      	cmp	r0, #10
 8018e9a:	d007      	beq.n	8018eac <rcl_action_take_result_request+0x64>
 8018e9c:	f240 2259 	movw	r2, #601	@ 0x259
 8018ea0:	f640 0399 	movw	r3, #2201	@ 0x899
 8018ea4:	4290      	cmp	r0, r2
 8018ea6:	bf0c      	ite	eq
 8018ea8:	4618      	moveq	r0, r3
 8018eaa:	2001      	movne	r0, #1
 8018eac:	bd70      	pop	{r4, r5, r6, pc}
 8018eae:	f7f6 faf3 	bl	800f498 <rcutils_reset_error>
 8018eb2:	f640 0098 	movw	r0, #2200	@ 0x898
 8018eb6:	bd70      	pop	{r4, r5, r6, pc}
 8018eb8:	200b      	movs	r0, #11
 8018eba:	bd70      	pop	{r4, r5, r6, pc}
 8018ebc:	f640 0098 	movw	r0, #2200	@ 0x898
 8018ec0:	4770      	bx	lr
 8018ec2:	bf00      	nop

08018ec4 <rcl_action_take_cancel_request>:
 8018ec4:	2800      	cmp	r0, #0
 8018ec6:	d037      	beq.n	8018f38 <rcl_action_take_cancel_request+0x74>
 8018ec8:	b570      	push	{r4, r5, r6, lr}
 8018eca:	4604      	mov	r4, r0
 8018ecc:	6800      	ldr	r0, [r0, #0]
 8018ece:	b370      	cbz	r0, 8018f2e <rcl_action_take_cancel_request+0x6a>
 8018ed0:	460d      	mov	r5, r1
 8018ed2:	4616      	mov	r6, r2
 8018ed4:	f7fe f9b8 	bl	8017248 <rcl_service_is_valid>
 8018ed8:	b338      	cbz	r0, 8018f2a <rcl_action_take_cancel_request+0x66>
 8018eda:	6820      	ldr	r0, [r4, #0]
 8018edc:	3004      	adds	r0, #4
 8018ede:	f7fe f9b3 	bl	8017248 <rcl_service_is_valid>
 8018ee2:	b310      	cbz	r0, 8018f2a <rcl_action_take_cancel_request+0x66>
 8018ee4:	6820      	ldr	r0, [r4, #0]
 8018ee6:	3008      	adds	r0, #8
 8018ee8:	f7fe f9ae 	bl	8017248 <rcl_service_is_valid>
 8018eec:	b1e8      	cbz	r0, 8018f2a <rcl_action_take_cancel_request+0x66>
 8018eee:	6820      	ldr	r0, [r4, #0]
 8018ef0:	300c      	adds	r0, #12
 8018ef2:	f7f5 fb0d 	bl	800e510 <rcl_publisher_is_valid>
 8018ef6:	b1c0      	cbz	r0, 8018f2a <rcl_action_take_cancel_request+0x66>
 8018ef8:	6820      	ldr	r0, [r4, #0]
 8018efa:	3010      	adds	r0, #16
 8018efc:	f7f5 fb08 	bl	800e510 <rcl_publisher_is_valid>
 8018f00:	b198      	cbz	r0, 8018f2a <rcl_action_take_cancel_request+0x66>
 8018f02:	b1bd      	cbz	r5, 8018f34 <rcl_action_take_cancel_request+0x70>
 8018f04:	b1b6      	cbz	r6, 8018f34 <rcl_action_take_cancel_request+0x70>
 8018f06:	6820      	ldr	r0, [r4, #0]
 8018f08:	4632      	mov	r2, r6
 8018f0a:	4629      	mov	r1, r5
 8018f0c:	3004      	adds	r0, #4
 8018f0e:	f7fe f91b 	bl	8017148 <rcl_take_request>
 8018f12:	b148      	cbz	r0, 8018f28 <rcl_action_take_cancel_request+0x64>
 8018f14:	280a      	cmp	r0, #10
 8018f16:	d007      	beq.n	8018f28 <rcl_action_take_cancel_request+0x64>
 8018f18:	f240 2259 	movw	r2, #601	@ 0x259
 8018f1c:	f640 0399 	movw	r3, #2201	@ 0x899
 8018f20:	4290      	cmp	r0, r2
 8018f22:	bf0c      	ite	eq
 8018f24:	4618      	moveq	r0, r3
 8018f26:	2001      	movne	r0, #1
 8018f28:	bd70      	pop	{r4, r5, r6, pc}
 8018f2a:	f7f6 fab5 	bl	800f498 <rcutils_reset_error>
 8018f2e:	f640 0098 	movw	r0, #2200	@ 0x898
 8018f32:	bd70      	pop	{r4, r5, r6, pc}
 8018f34:	200b      	movs	r0, #11
 8018f36:	bd70      	pop	{r4, r5, r6, pc}
 8018f38:	f640 0098 	movw	r0, #2200	@ 0x898
 8018f3c:	4770      	bx	lr
 8018f3e:	bf00      	nop

08018f40 <rcl_action_send_cancel_response>:
 8018f40:	b380      	cbz	r0, 8018fa4 <rcl_action_send_cancel_response+0x64>
 8018f42:	b570      	push	{r4, r5, r6, lr}
 8018f44:	4604      	mov	r4, r0
 8018f46:	6800      	ldr	r0, [r0, #0]
 8018f48:	b338      	cbz	r0, 8018f9a <rcl_action_send_cancel_response+0x5a>
 8018f4a:	460d      	mov	r5, r1
 8018f4c:	4616      	mov	r6, r2
 8018f4e:	f7fe f97b 	bl	8017248 <rcl_service_is_valid>
 8018f52:	b300      	cbz	r0, 8018f96 <rcl_action_send_cancel_response+0x56>
 8018f54:	6820      	ldr	r0, [r4, #0]
 8018f56:	3004      	adds	r0, #4
 8018f58:	f7fe f976 	bl	8017248 <rcl_service_is_valid>
 8018f5c:	b1d8      	cbz	r0, 8018f96 <rcl_action_send_cancel_response+0x56>
 8018f5e:	6820      	ldr	r0, [r4, #0]
 8018f60:	3008      	adds	r0, #8
 8018f62:	f7fe f971 	bl	8017248 <rcl_service_is_valid>
 8018f66:	b1b0      	cbz	r0, 8018f96 <rcl_action_send_cancel_response+0x56>
 8018f68:	6820      	ldr	r0, [r4, #0]
 8018f6a:	300c      	adds	r0, #12
 8018f6c:	f7f5 fad0 	bl	800e510 <rcl_publisher_is_valid>
 8018f70:	b188      	cbz	r0, 8018f96 <rcl_action_send_cancel_response+0x56>
 8018f72:	6820      	ldr	r0, [r4, #0]
 8018f74:	3010      	adds	r0, #16
 8018f76:	f7f5 facb 	bl	800e510 <rcl_publisher_is_valid>
 8018f7a:	b160      	cbz	r0, 8018f96 <rcl_action_send_cancel_response+0x56>
 8018f7c:	b185      	cbz	r5, 8018fa0 <rcl_action_send_cancel_response+0x60>
 8018f7e:	b17e      	cbz	r6, 8018fa0 <rcl_action_send_cancel_response+0x60>
 8018f80:	6820      	ldr	r0, [r4, #0]
 8018f82:	4632      	mov	r2, r6
 8018f84:	4629      	mov	r1, r5
 8018f86:	3004      	adds	r0, #4
 8018f88:	f7fe f92e 	bl	80171e8 <rcl_send_response>
 8018f8c:	b110      	cbz	r0, 8018f94 <rcl_action_send_cancel_response+0x54>
 8018f8e:	2802      	cmp	r0, #2
 8018f90:	bf18      	it	ne
 8018f92:	2001      	movne	r0, #1
 8018f94:	bd70      	pop	{r4, r5, r6, pc}
 8018f96:	f7f6 fa7f 	bl	800f498 <rcutils_reset_error>
 8018f9a:	f640 0098 	movw	r0, #2200	@ 0x898
 8018f9e:	bd70      	pop	{r4, r5, r6, pc}
 8018fa0:	200b      	movs	r0, #11
 8018fa2:	bd70      	pop	{r4, r5, r6, pc}
 8018fa4:	f640 0098 	movw	r0, #2200	@ 0x898
 8018fa8:	4770      	bx	lr
 8018faa:	bf00      	nop

08018fac <rcl_action_wait_set_add_action_server>:
 8018fac:	2800      	cmp	r0, #0
 8018fae:	d04d      	beq.n	801904c <rcl_action_wait_set_add_action_server+0xa0>
 8018fb0:	b570      	push	{r4, r5, r6, lr}
 8018fb2:	460c      	mov	r4, r1
 8018fb4:	b159      	cbz	r1, 8018fce <rcl_action_wait_set_add_action_server+0x22>
 8018fb6:	4605      	mov	r5, r0
 8018fb8:	6808      	ldr	r0, [r1, #0]
 8018fba:	b140      	cbz	r0, 8018fce <rcl_action_wait_set_add_action_server+0x22>
 8018fbc:	4616      	mov	r6, r2
 8018fbe:	f7fe f943 	bl	8017248 <rcl_service_is_valid>
 8018fc2:	b120      	cbz	r0, 8018fce <rcl_action_wait_set_add_action_server+0x22>
 8018fc4:	6820      	ldr	r0, [r4, #0]
 8018fc6:	3004      	adds	r0, #4
 8018fc8:	f7fe f93e 	bl	8017248 <rcl_service_is_valid>
 8018fcc:	b910      	cbnz	r0, 8018fd4 <rcl_action_wait_set_add_action_server+0x28>
 8018fce:	f640 0098 	movw	r0, #2200	@ 0x898
 8018fd2:	bd70      	pop	{r4, r5, r6, pc}
 8018fd4:	6820      	ldr	r0, [r4, #0]
 8018fd6:	3008      	adds	r0, #8
 8018fd8:	f7fe f936 	bl	8017248 <rcl_service_is_valid>
 8018fdc:	2800      	cmp	r0, #0
 8018fde:	d0f6      	beq.n	8018fce <rcl_action_wait_set_add_action_server+0x22>
 8018fe0:	6820      	ldr	r0, [r4, #0]
 8018fe2:	300c      	adds	r0, #12
 8018fe4:	f7f5 faac 	bl	800e540 <rcl_publisher_is_valid_except_context>
 8018fe8:	2800      	cmp	r0, #0
 8018fea:	d0f0      	beq.n	8018fce <rcl_action_wait_set_add_action_server+0x22>
 8018fec:	6820      	ldr	r0, [r4, #0]
 8018fee:	3010      	adds	r0, #16
 8018ff0:	f7f5 faa6 	bl	800e540 <rcl_publisher_is_valid_except_context>
 8018ff4:	2800      	cmp	r0, #0
 8018ff6:	d0ea      	beq.n	8018fce <rcl_action_wait_set_add_action_server+0x22>
 8018ff8:	6821      	ldr	r1, [r4, #0]
 8018ffa:	4628      	mov	r0, r5
 8018ffc:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8019000:	f7ff fa8a 	bl	8018518 <rcl_wait_set_add_service>
 8019004:	2800      	cmp	r0, #0
 8019006:	d1e4      	bne.n	8018fd2 <rcl_action_wait_set_add_action_server+0x26>
 8019008:	6821      	ldr	r1, [r4, #0]
 801900a:	4628      	mov	r0, r5
 801900c:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8019010:	3104      	adds	r1, #4
 8019012:	f7ff fa81 	bl	8018518 <rcl_wait_set_add_service>
 8019016:	2800      	cmp	r0, #0
 8019018:	d1db      	bne.n	8018fd2 <rcl_action_wait_set_add_action_server+0x26>
 801901a:	6821      	ldr	r1, [r4, #0]
 801901c:	4628      	mov	r0, r5
 801901e:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8019022:	3108      	adds	r1, #8
 8019024:	f7ff fa78 	bl	8018518 <rcl_wait_set_add_service>
 8019028:	2800      	cmp	r0, #0
 801902a:	d1d2      	bne.n	8018fd2 <rcl_action_wait_set_add_action_server+0x26>
 801902c:	6821      	ldr	r1, [r4, #0]
 801902e:	4628      	mov	r0, r5
 8019030:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8019034:	3114      	adds	r1, #20
 8019036:	f7ff fa13 	bl	8018460 <rcl_wait_set_add_timer>
 801903a:	2800      	cmp	r0, #0
 801903c:	d1c9      	bne.n	8018fd2 <rcl_action_wait_set_add_action_server+0x26>
 801903e:	2e00      	cmp	r6, #0
 8019040:	d0c7      	beq.n	8018fd2 <rcl_action_wait_set_add_action_server+0x26>
 8019042:	6823      	ldr	r3, [r4, #0]
 8019044:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8019048:	6033      	str	r3, [r6, #0]
 801904a:	bd70      	pop	{r4, r5, r6, pc}
 801904c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019050:	4770      	bx	lr
 8019052:	bf00      	nop

08019054 <rcl_action_server_wait_set_get_entities_ready>:
 8019054:	2800      	cmp	r0, #0
 8019056:	d05a      	beq.n	801910e <rcl_action_server_wait_set_get_entities_ready+0xba>
 8019058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801905a:	460c      	mov	r4, r1
 801905c:	b161      	cbz	r1, 8019078 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801905e:	4605      	mov	r5, r0
 8019060:	6808      	ldr	r0, [r1, #0]
 8019062:	b148      	cbz	r0, 8019078 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8019064:	4616      	mov	r6, r2
 8019066:	461f      	mov	r7, r3
 8019068:	f7fe f8ee 	bl	8017248 <rcl_service_is_valid>
 801906c:	b120      	cbz	r0, 8019078 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801906e:	6820      	ldr	r0, [r4, #0]
 8019070:	3004      	adds	r0, #4
 8019072:	f7fe f8e9 	bl	8017248 <rcl_service_is_valid>
 8019076:	b910      	cbnz	r0, 801907e <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8019078:	f640 0098 	movw	r0, #2200	@ 0x898
 801907c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801907e:	6820      	ldr	r0, [r4, #0]
 8019080:	3008      	adds	r0, #8
 8019082:	f7fe f8e1 	bl	8017248 <rcl_service_is_valid>
 8019086:	2800      	cmp	r0, #0
 8019088:	d0f6      	beq.n	8019078 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801908a:	6820      	ldr	r0, [r4, #0]
 801908c:	300c      	adds	r0, #12
 801908e:	f7f5 fa57 	bl	800e540 <rcl_publisher_is_valid_except_context>
 8019092:	2800      	cmp	r0, #0
 8019094:	d0f0      	beq.n	8019078 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8019096:	6820      	ldr	r0, [r4, #0]
 8019098:	3010      	adds	r0, #16
 801909a:	f7f5 fa51 	bl	800e540 <rcl_publisher_is_valid_except_context>
 801909e:	2800      	cmp	r0, #0
 80190a0:	d0ea      	beq.n	8019078 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80190a2:	b3be      	cbz	r6, 8019114 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80190a4:	b3b7      	cbz	r7, 8019114 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80190a6:	9b06      	ldr	r3, [sp, #24]
 80190a8:	b3a3      	cbz	r3, 8019114 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80190aa:	9b07      	ldr	r3, [sp, #28]
 80190ac:	b393      	cbz	r3, 8019114 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80190ae:	6821      	ldr	r1, [r4, #0]
 80190b0:	692a      	ldr	r2, [r5, #16]
 80190b2:	6a2c      	ldr	r4, [r5, #32]
 80190b4:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 80190b8:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80190bc:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80190c0:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 80190c4:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 80190c8:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80190cc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80190d0:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80190d4:	1a64      	subs	r4, r4, r1
 80190d6:	fab4 f484 	clz	r4, r4
 80190da:	0964      	lsrs	r4, r4, #5
 80190dc:	7034      	strb	r4, [r6, #0]
 80190de:	1d0c      	adds	r4, r1, #4
 80190e0:	1b1b      	subs	r3, r3, r4
 80190e2:	fab3 f383 	clz	r3, r3
 80190e6:	095b      	lsrs	r3, r3, #5
 80190e8:	f101 0408 	add.w	r4, r1, #8
 80190ec:	703b      	strb	r3, [r7, #0]
 80190ee:	f101 0314 	add.w	r3, r1, #20
 80190f2:	1b01      	subs	r1, r0, r4
 80190f4:	1ad3      	subs	r3, r2, r3
 80190f6:	fab1 f181 	clz	r1, r1
 80190fa:	9a06      	ldr	r2, [sp, #24]
 80190fc:	0949      	lsrs	r1, r1, #5
 80190fe:	7011      	strb	r1, [r2, #0]
 8019100:	fab3 f383 	clz	r3, r3
 8019104:	9a07      	ldr	r2, [sp, #28]
 8019106:	095b      	lsrs	r3, r3, #5
 8019108:	2000      	movs	r0, #0
 801910a:	7013      	strb	r3, [r2, #0]
 801910c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801910e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019112:	4770      	bx	lr
 8019114:	200b      	movs	r0, #11
 8019116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019118 <_execute_event_handler>:
 8019118:	2002      	movs	r0, #2
 801911a:	4770      	bx	lr

0801911c <_cancel_goal_event_handler>:
 801911c:	2003      	movs	r0, #3
 801911e:	4770      	bx	lr

08019120 <_succeed_event_handler>:
 8019120:	2004      	movs	r0, #4
 8019122:	4770      	bx	lr

08019124 <_abort_event_handler>:
 8019124:	2006      	movs	r0, #6
 8019126:	4770      	bx	lr

08019128 <_canceled_event_handler>:
 8019128:	2005      	movs	r0, #5
 801912a:	4770      	bx	lr

0801912c <rcl_action_transition_goal_state>:
 801912c:	fa5f fc80 	uxtb.w	ip, r0
 8019130:	f1bc 0f06 	cmp.w	ip, #6
 8019134:	d80c      	bhi.n	8019150 <rcl_action_transition_goal_state+0x24>
 8019136:	2904      	cmp	r1, #4
 8019138:	d80a      	bhi.n	8019150 <rcl_action_transition_goal_state+0x24>
 801913a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 801913e:	b410      	push	{r4}
 8019140:	440b      	add	r3, r1
 8019142:	4c06      	ldr	r4, [pc, #24]	@ (801915c <rcl_action_transition_goal_state+0x30>)
 8019144:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8019148:	b123      	cbz	r3, 8019154 <rcl_action_transition_goal_state+0x28>
 801914a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801914e:	4718      	bx	r3
 8019150:	2000      	movs	r0, #0
 8019152:	4770      	bx	lr
 8019154:	2000      	movs	r0, #0
 8019156:	f85d 4b04 	ldr.w	r4, [sp], #4
 801915a:	4770      	bx	lr
 801915c:	080215f8 	.word	0x080215f8

08019160 <rcl_action_get_zero_initialized_cancel_response>:
 8019160:	b510      	push	{r4, lr}
 8019162:	4c07      	ldr	r4, [pc, #28]	@ (8019180 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8019164:	4686      	mov	lr, r0
 8019166:	4684      	mov	ip, r0
 8019168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801916a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801916e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019170:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019174:	6823      	ldr	r3, [r4, #0]
 8019176:	f8cc 3000 	str.w	r3, [ip]
 801917a:	4670      	mov	r0, lr
 801917c:	bd10      	pop	{r4, pc}
 801917e:	bf00      	nop
 8019180:	08021684 	.word	0x08021684

08019184 <rclc_action_send_result_request>:
 8019184:	b1d0      	cbz	r0, 80191bc <rclc_action_send_result_request+0x38>
 8019186:	b500      	push	{lr}
 8019188:	4684      	mov	ip, r0
 801918a:	b087      	sub	sp, #28
 801918c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8019190:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8019194:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8019198:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801919c:	f10d 0e08 	add.w	lr, sp, #8
 80191a0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80191a4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80191a8:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80191ac:	a902      	add	r1, sp, #8
 80191ae:	3010      	adds	r0, #16
 80191b0:	f7ff fbfa 	bl	80189a8 <rcl_action_send_result_request>
 80191b4:	b920      	cbnz	r0, 80191c0 <rclc_action_send_result_request+0x3c>
 80191b6:	b007      	add	sp, #28
 80191b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80191bc:	200b      	movs	r0, #11
 80191be:	4770      	bx	lr
 80191c0:	9001      	str	r0, [sp, #4]
 80191c2:	f7f6 f969 	bl	800f498 <rcutils_reset_error>
 80191c6:	9801      	ldr	r0, [sp, #4]
 80191c8:	b007      	add	sp, #28
 80191ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80191ce:	bf00      	nop

080191d0 <rclc_action_take_goal_handle>:
 80191d0:	4603      	mov	r3, r0
 80191d2:	b158      	cbz	r0, 80191ec <rclc_action_take_goal_handle+0x1c>
 80191d4:	6880      	ldr	r0, [r0, #8]
 80191d6:	b148      	cbz	r0, 80191ec <rclc_action_take_goal_handle+0x1c>
 80191d8:	6801      	ldr	r1, [r0, #0]
 80191da:	6099      	str	r1, [r3, #8]
 80191dc:	2200      	movs	r2, #0
 80191de:	7202      	strb	r2, [r0, #8]
 80191e0:	68d9      	ldr	r1, [r3, #12]
 80191e2:	6001      	str	r1, [r0, #0]
 80191e4:	6202      	str	r2, [r0, #32]
 80191e6:	8482      	strh	r2, [r0, #36]	@ 0x24
 80191e8:	60d8      	str	r0, [r3, #12]
 80191ea:	4770      	bx	lr
 80191ec:	4770      	bx	lr
 80191ee:	bf00      	nop

080191f0 <rclc_action_remove_used_goal_handle>:
 80191f0:	b180      	cbz	r0, 8019214 <rclc_action_remove_used_goal_handle+0x24>
 80191f2:	b179      	cbz	r1, 8019214 <rclc_action_remove_used_goal_handle+0x24>
 80191f4:	68c3      	ldr	r3, [r0, #12]
 80191f6:	4299      	cmp	r1, r3
 80191f8:	d00d      	beq.n	8019216 <rclc_action_remove_used_goal_handle+0x26>
 80191fa:	b12b      	cbz	r3, 8019208 <rclc_action_remove_used_goal_handle+0x18>
 80191fc:	681a      	ldr	r2, [r3, #0]
 80191fe:	4291      	cmp	r1, r2
 8019200:	d003      	beq.n	801920a <rclc_action_remove_used_goal_handle+0x1a>
 8019202:	4613      	mov	r3, r2
 8019204:	2b00      	cmp	r3, #0
 8019206:	d1f9      	bne.n	80191fc <rclc_action_remove_used_goal_handle+0xc>
 8019208:	4770      	bx	lr
 801920a:	680a      	ldr	r2, [r1, #0]
 801920c:	601a      	str	r2, [r3, #0]
 801920e:	6883      	ldr	r3, [r0, #8]
 8019210:	600b      	str	r3, [r1, #0]
 8019212:	6081      	str	r1, [r0, #8]
 8019214:	4770      	bx	lr
 8019216:	680b      	ldr	r3, [r1, #0]
 8019218:	60c3      	str	r3, [r0, #12]
 801921a:	e7f8      	b.n	801920e <rclc_action_remove_used_goal_handle+0x1e>

0801921c <rclc_action_find_goal_handle_by_uuid>:
 801921c:	b538      	push	{r3, r4, r5, lr}
 801921e:	b180      	cbz	r0, 8019242 <rclc_action_find_goal_handle_by_uuid+0x26>
 8019220:	460d      	mov	r5, r1
 8019222:	b181      	cbz	r1, 8019246 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8019224:	68c4      	ldr	r4, [r0, #12]
 8019226:	b914      	cbnz	r4, 801922e <rclc_action_find_goal_handle_by_uuid+0x12>
 8019228:	e009      	b.n	801923e <rclc_action_find_goal_handle_by_uuid+0x22>
 801922a:	6824      	ldr	r4, [r4, #0]
 801922c:	b13c      	cbz	r4, 801923e <rclc_action_find_goal_handle_by_uuid+0x22>
 801922e:	2210      	movs	r2, #16
 8019230:	4629      	mov	r1, r5
 8019232:	f104 0009 	add.w	r0, r4, #9
 8019236:	f004 fc55 	bl	801dae4 <memcmp>
 801923a:	2800      	cmp	r0, #0
 801923c:	d1f5      	bne.n	801922a <rclc_action_find_goal_handle_by_uuid+0xe>
 801923e:	4620      	mov	r0, r4
 8019240:	bd38      	pop	{r3, r4, r5, pc}
 8019242:	4604      	mov	r4, r0
 8019244:	e7fb      	b.n	801923e <rclc_action_find_goal_handle_by_uuid+0x22>
 8019246:	460c      	mov	r4, r1
 8019248:	e7f9      	b.n	801923e <rclc_action_find_goal_handle_by_uuid+0x22>
 801924a:	bf00      	nop

0801924c <rclc_action_find_first_handle_by_status>:
 801924c:	b140      	cbz	r0, 8019260 <rclc_action_find_first_handle_by_status+0x14>
 801924e:	68c0      	ldr	r0, [r0, #12]
 8019250:	b910      	cbnz	r0, 8019258 <rclc_action_find_first_handle_by_status+0xc>
 8019252:	e005      	b.n	8019260 <rclc_action_find_first_handle_by_status+0x14>
 8019254:	6800      	ldr	r0, [r0, #0]
 8019256:	b118      	cbz	r0, 8019260 <rclc_action_find_first_handle_by_status+0x14>
 8019258:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801925c:	428b      	cmp	r3, r1
 801925e:	d1f9      	bne.n	8019254 <rclc_action_find_first_handle_by_status+0x8>
 8019260:	4770      	bx	lr
 8019262:	bf00      	nop

08019264 <rclc_action_find_first_terminated_handle>:
 8019264:	b140      	cbz	r0, 8019278 <rclc_action_find_first_terminated_handle+0x14>
 8019266:	68c0      	ldr	r0, [r0, #12]
 8019268:	b910      	cbnz	r0, 8019270 <rclc_action_find_first_terminated_handle+0xc>
 801926a:	e005      	b.n	8019278 <rclc_action_find_first_terminated_handle+0x14>
 801926c:	6800      	ldr	r0, [r0, #0]
 801926e:	b118      	cbz	r0, 8019278 <rclc_action_find_first_terminated_handle+0x14>
 8019270:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8019274:	2b03      	cmp	r3, #3
 8019276:	ddf9      	ble.n	801926c <rclc_action_find_first_terminated_handle+0x8>
 8019278:	4770      	bx	lr
 801927a:	bf00      	nop

0801927c <rclc_action_find_handle_by_goal_request_sequence_number>:
 801927c:	b170      	cbz	r0, 801929c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801927e:	68c0      	ldr	r0, [r0, #12]
 8019280:	b160      	cbz	r0, 801929c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8019282:	b410      	push	{r4}
 8019284:	e001      	b.n	801928a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8019286:	6800      	ldr	r0, [r0, #0]
 8019288:	b128      	cbz	r0, 8019296 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801928a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801928e:	4299      	cmp	r1, r3
 8019290:	bf08      	it	eq
 8019292:	4294      	cmpeq	r4, r2
 8019294:	d1f7      	bne.n	8019286 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8019296:	f85d 4b04 	ldr.w	r4, [sp], #4
 801929a:	4770      	bx	lr
 801929c:	4770      	bx	lr
 801929e:	bf00      	nop

080192a0 <rclc_action_find_handle_by_result_request_sequence_number>:
 80192a0:	b170      	cbz	r0, 80192c0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80192a2:	68c0      	ldr	r0, [r0, #12]
 80192a4:	b160      	cbz	r0, 80192c0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80192a6:	b410      	push	{r4}
 80192a8:	e001      	b.n	80192ae <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80192aa:	6800      	ldr	r0, [r0, #0]
 80192ac:	b128      	cbz	r0, 80192ba <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80192ae:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 80192b2:	4299      	cmp	r1, r3
 80192b4:	bf08      	it	eq
 80192b6:	4294      	cmpeq	r4, r2
 80192b8:	d1f7      	bne.n	80192aa <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80192ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80192be:	4770      	bx	lr
 80192c0:	4770      	bx	lr
 80192c2:	bf00      	nop

080192c4 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80192c4:	b170      	cbz	r0, 80192e4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80192c6:	68c0      	ldr	r0, [r0, #12]
 80192c8:	b160      	cbz	r0, 80192e4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80192ca:	b410      	push	{r4}
 80192cc:	e001      	b.n	80192d2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 80192ce:	6800      	ldr	r0, [r0, #0]
 80192d0:	b128      	cbz	r0, 80192de <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80192d2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 80192d6:	4299      	cmp	r1, r3
 80192d8:	bf08      	it	eq
 80192da:	4294      	cmpeq	r4, r2
 80192dc:	d1f7      	bne.n	80192ce <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80192de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80192e2:	4770      	bx	lr
 80192e4:	4770      	bx	lr
 80192e6:	bf00      	nop

080192e8 <rclc_action_find_first_handle_with_goal_response>:
 80192e8:	b140      	cbz	r0, 80192fc <rclc_action_find_first_handle_with_goal_response+0x14>
 80192ea:	68c0      	ldr	r0, [r0, #12]
 80192ec:	b910      	cbnz	r0, 80192f4 <rclc_action_find_first_handle_with_goal_response+0xc>
 80192ee:	e005      	b.n	80192fc <rclc_action_find_first_handle_with_goal_response+0x14>
 80192f0:	6800      	ldr	r0, [r0, #0]
 80192f2:	b118      	cbz	r0, 80192fc <rclc_action_find_first_handle_with_goal_response+0x14>
 80192f4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	d0f9      	beq.n	80192f0 <rclc_action_find_first_handle_with_goal_response+0x8>
 80192fc:	4770      	bx	lr
 80192fe:	bf00      	nop

08019300 <rclc_action_find_first_handle_with_result_response>:
 8019300:	b140      	cbz	r0, 8019314 <rclc_action_find_first_handle_with_result_response+0x14>
 8019302:	68c0      	ldr	r0, [r0, #12]
 8019304:	b910      	cbnz	r0, 801930c <rclc_action_find_first_handle_with_result_response+0xc>
 8019306:	e005      	b.n	8019314 <rclc_action_find_first_handle_with_result_response+0x14>
 8019308:	6800      	ldr	r0, [r0, #0]
 801930a:	b118      	cbz	r0, 8019314 <rclc_action_find_first_handle_with_result_response+0x14>
 801930c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8019310:	2b00      	cmp	r3, #0
 8019312:	d0f9      	beq.n	8019308 <rclc_action_find_first_handle_with_result_response+0x8>
 8019314:	4770      	bx	lr
 8019316:	bf00      	nop

08019318 <rclc_action_server_response_goal_request>:
 8019318:	b198      	cbz	r0, 8019342 <rclc_action_server_response_goal_request+0x2a>
 801931a:	b510      	push	{r4, lr}
 801931c:	6844      	ldr	r4, [r0, #4]
 801931e:	b086      	sub	sp, #24
 8019320:	2200      	movs	r2, #0
 8019322:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8019326:	460b      	mov	r3, r1
 8019328:	9205      	str	r2, [sp, #20]
 801932a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801932e:	aa03      	add	r2, sp, #12
 8019330:	f104 0010 	add.w	r0, r4, #16
 8019334:	f88d 300c 	strb.w	r3, [sp, #12]
 8019338:	f7ff fd52 	bl	8018de0 <rcl_action_send_goal_response>
 801933c:	b918      	cbnz	r0, 8019346 <rclc_action_server_response_goal_request+0x2e>
 801933e:	b006      	add	sp, #24
 8019340:	bd10      	pop	{r4, pc}
 8019342:	200b      	movs	r0, #11
 8019344:	4770      	bx	lr
 8019346:	9001      	str	r0, [sp, #4]
 8019348:	f7f6 f8a6 	bl	800f498 <rcutils_reset_error>
 801934c:	9801      	ldr	r0, [sp, #4]
 801934e:	b006      	add	sp, #24
 8019350:	bd10      	pop	{r4, pc}
 8019352:	bf00      	nop
 8019354:	0000      	movs	r0, r0
	...

08019358 <rclc_action_server_goal_cancel_accept>:
 8019358:	b310      	cbz	r0, 80193a0 <rclc_action_server_goal_cancel_accept+0x48>
 801935a:	b510      	push	{r4, lr}
 801935c:	b090      	sub	sp, #64	@ 0x40
 801935e:	4604      	mov	r4, r0
 8019360:	a806      	add	r0, sp, #24
 8019362:	f7ff fefd 	bl	8019160 <rcl_action_get_zero_initialized_cancel_response>
 8019366:	2300      	movs	r3, #0
 8019368:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801936c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8019370:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8019374:	f88d 3018 	strb.w	r3, [sp, #24]
 8019378:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801937c:	f8cd d01c 	str.w	sp, [sp, #28]
 8019380:	46ec      	mov	ip, sp
 8019382:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019386:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80193a8 <rclc_action_server_goal_cancel_accept+0x50>
 801938a:	6860      	ldr	r0, [r4, #4]
 801938c:	aa06      	add	r2, sp, #24
 801938e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8019392:	3010      	adds	r0, #16
 8019394:	ed8d 7b08 	vstr	d7, [sp, #32]
 8019398:	f7ff fdd2 	bl	8018f40 <rcl_action_send_cancel_response>
 801939c:	b010      	add	sp, #64	@ 0x40
 801939e:	bd10      	pop	{r4, pc}
 80193a0:	200b      	movs	r0, #11
 80193a2:	4770      	bx	lr
 80193a4:	f3af 8000 	nop.w
 80193a8:	00000001 	.word	0x00000001
 80193ac:	00000001 	.word	0x00000001

080193b0 <rclc_action_server_goal_cancel_reject>:
 80193b0:	b082      	sub	sp, #8
 80193b2:	b530      	push	{r4, r5, lr}
 80193b4:	b08b      	sub	sp, #44	@ 0x2c
 80193b6:	ac0e      	add	r4, sp, #56	@ 0x38
 80193b8:	e884 000c 	stmia.w	r4, {r2, r3}
 80193bc:	b188      	cbz	r0, 80193e2 <rclc_action_server_goal_cancel_reject+0x32>
 80193be:	4604      	mov	r4, r0
 80193c0:	a801      	add	r0, sp, #4
 80193c2:	460d      	mov	r5, r1
 80193c4:	f7ff fecc 	bl	8019160 <rcl_action_get_zero_initialized_cancel_response>
 80193c8:	aa01      	add	r2, sp, #4
 80193ca:	a90e      	add	r1, sp, #56	@ 0x38
 80193cc:	f104 0010 	add.w	r0, r4, #16
 80193d0:	f88d 5004 	strb.w	r5, [sp, #4]
 80193d4:	f7ff fdb4 	bl	8018f40 <rcl_action_send_cancel_response>
 80193d8:	b00b      	add	sp, #44	@ 0x2c
 80193da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80193de:	b002      	add	sp, #8
 80193e0:	4770      	bx	lr
 80193e2:	200b      	movs	r0, #11
 80193e4:	b00b      	add	sp, #44	@ 0x2c
 80193e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80193ea:	b002      	add	sp, #8
 80193ec:	4770      	bx	lr
 80193ee:	bf00      	nop

080193f0 <__atomic_load_8>:
 80193f0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80193f4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80193f8:	4a15      	ldr	r2, [pc, #84]	@ (8019450 <__atomic_load_8+0x60>)
 80193fa:	4b16      	ldr	r3, [pc, #88]	@ (8019454 <__atomic_load_8+0x64>)
 80193fc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8019400:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8019404:	fb02 f101 	mul.w	r1, r2, r1
 8019408:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801940c:	fba3 2301 	umull	r2, r3, r3, r1
 8019410:	091b      	lsrs	r3, r3, #4
 8019412:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8019416:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801941a:	b4f0      	push	{r4, r5, r6, r7}
 801941c:	4d0e      	ldr	r5, [pc, #56]	@ (8019458 <__atomic_load_8+0x68>)
 801941e:	1ac9      	subs	r1, r1, r3
 8019420:	194a      	adds	r2, r1, r5
 8019422:	f04f 0c01 	mov.w	ip, #1
 8019426:	e8d2 3f4f 	ldrexb	r3, [r2]
 801942a:	e8c2 cf44 	strexb	r4, ip, [r2]
 801942e:	2c00      	cmp	r4, #0
 8019430:	d1f9      	bne.n	8019426 <__atomic_load_8+0x36>
 8019432:	f3bf 8f5b 	dmb	ish
 8019436:	b2dc      	uxtb	r4, r3
 8019438:	2c00      	cmp	r4, #0
 801943a:	d1f4      	bne.n	8019426 <__atomic_load_8+0x36>
 801943c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8019440:	f3bf 8f5b 	dmb	ish
 8019444:	546b      	strb	r3, [r5, r1]
 8019446:	4630      	mov	r0, r6
 8019448:	4639      	mov	r1, r7
 801944a:	bcf0      	pop	{r4, r5, r6, r7}
 801944c:	4770      	bx	lr
 801944e:	bf00      	nop
 8019450:	27d4eb2d 	.word	0x27d4eb2d
 8019454:	b21642c9 	.word	0xb21642c9
 8019458:	2000f420 	.word	0x2000f420

0801945c <__atomic_store_8>:
 801945c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8019460:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8019464:	b570      	push	{r4, r5, r6, lr}
 8019466:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801946a:	4c14      	ldr	r4, [pc, #80]	@ (80194bc <__atomic_store_8+0x60>)
 801946c:	4e14      	ldr	r6, [pc, #80]	@ (80194c0 <__atomic_store_8+0x64>)
 801946e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8019472:	fb04 f101 	mul.w	r1, r4, r1
 8019476:	4c13      	ldr	r4, [pc, #76]	@ (80194c4 <__atomic_store_8+0x68>)
 8019478:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801947c:	fba4 5401 	umull	r5, r4, r4, r1
 8019480:	0924      	lsrs	r4, r4, #4
 8019482:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8019486:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 801948a:	eba1 0e04 	sub.w	lr, r1, r4
 801948e:	f04f 0501 	mov.w	r5, #1
 8019492:	eb0e 0c06 	add.w	ip, lr, r6
 8019496:	e8dc 1f4f 	ldrexb	r1, [ip]
 801949a:	e8cc 5f44 	strexb	r4, r5, [ip]
 801949e:	2c00      	cmp	r4, #0
 80194a0:	d1f9      	bne.n	8019496 <__atomic_store_8+0x3a>
 80194a2:	f3bf 8f5b 	dmb	ish
 80194a6:	b2cc      	uxtb	r4, r1
 80194a8:	2c00      	cmp	r4, #0
 80194aa:	d1f4      	bne.n	8019496 <__atomic_store_8+0x3a>
 80194ac:	e9c0 2300 	strd	r2, r3, [r0]
 80194b0:	f3bf 8f5b 	dmb	ish
 80194b4:	f806 100e 	strb.w	r1, [r6, lr]
 80194b8:	bd70      	pop	{r4, r5, r6, pc}
 80194ba:	bf00      	nop
 80194bc:	27d4eb2d 	.word	0x27d4eb2d
 80194c0:	2000f420 	.word	0x2000f420
 80194c4:	b21642c9 	.word	0xb21642c9

080194c8 <__atomic_exchange_8>:
 80194c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80194ca:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 80194ce:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 80194d2:	4917      	ldr	r1, [pc, #92]	@ (8019530 <__atomic_exchange_8+0x68>)
 80194d4:	4f17      	ldr	r7, [pc, #92]	@ (8019534 <__atomic_exchange_8+0x6c>)
 80194d6:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 80194da:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 80194de:	fb01 fe0e 	mul.w	lr, r1, lr
 80194e2:	4915      	ldr	r1, [pc, #84]	@ (8019538 <__atomic_exchange_8+0x70>)
 80194e4:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 80194e8:	4606      	mov	r6, r0
 80194ea:	fba1 010e 	umull	r0, r1, r1, lr
 80194ee:	0909      	lsrs	r1, r1, #4
 80194f0:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80194f4:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 80194f8:	ebae 0e01 	sub.w	lr, lr, r1
 80194fc:	f04f 0501 	mov.w	r5, #1
 8019500:	eb0e 0107 	add.w	r1, lr, r7
 8019504:	e8d1 cf4f 	ldrexb	ip, [r1]
 8019508:	e8c1 5f40 	strexb	r0, r5, [r1]
 801950c:	2800      	cmp	r0, #0
 801950e:	d1f9      	bne.n	8019504 <__atomic_exchange_8+0x3c>
 8019510:	f3bf 8f5b 	dmb	ish
 8019514:	fa5f f48c 	uxtb.w	r4, ip
 8019518:	2c00      	cmp	r4, #0
 801951a:	d1f3      	bne.n	8019504 <__atomic_exchange_8+0x3c>
 801951c:	e9d6 0100 	ldrd	r0, r1, [r6]
 8019520:	e9c6 2300 	strd	r2, r3, [r6]
 8019524:	f3bf 8f5b 	dmb	ish
 8019528:	f807 c00e 	strb.w	ip, [r7, lr]
 801952c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801952e:	bf00      	nop
 8019530:	27d4eb2d 	.word	0x27d4eb2d
 8019534:	2000f420 	.word	0x2000f420
 8019538:	b21642c9 	.word	0xb21642c9

0801953c <rcutils_get_env>:
 801953c:	b150      	cbz	r0, 8019554 <rcutils_get_env+0x18>
 801953e:	b510      	push	{r4, lr}
 8019540:	460c      	mov	r4, r1
 8019542:	b909      	cbnz	r1, 8019548 <rcutils_get_env+0xc>
 8019544:	4806      	ldr	r0, [pc, #24]	@ (8019560 <rcutils_get_env+0x24>)
 8019546:	bd10      	pop	{r4, pc}
 8019548:	f003 fe3a 	bl	801d1c0 <getenv>
 801954c:	b120      	cbz	r0, 8019558 <rcutils_get_env+0x1c>
 801954e:	6020      	str	r0, [r4, #0]
 8019550:	2000      	movs	r0, #0
 8019552:	bd10      	pop	{r4, pc}
 8019554:	4803      	ldr	r0, [pc, #12]	@ (8019564 <rcutils_get_env+0x28>)
 8019556:	4770      	bx	lr
 8019558:	4b03      	ldr	r3, [pc, #12]	@ (8019568 <rcutils_get_env+0x2c>)
 801955a:	6023      	str	r3, [r4, #0]
 801955c:	e7f8      	b.n	8019550 <rcutils_get_env+0x14>
 801955e:	bf00      	nop
 8019560:	080216c4 	.word	0x080216c4
 8019564:	080216a8 	.word	0x080216a8
 8019568:	080206ec 	.word	0x080206ec

0801956c <rcutils_is_directory>:
 801956c:	2000      	movs	r0, #0
 801956e:	4770      	bx	lr

08019570 <rcutils_join_path>:
 8019570:	b082      	sub	sp, #8
 8019572:	e88d 000c 	stmia.w	sp, {r2, r3}
 8019576:	2000      	movs	r0, #0
 8019578:	b002      	add	sp, #8
 801957a:	4770      	bx	lr

0801957c <rcutils_to_native_path>:
 801957c:	b084      	sub	sp, #16
 801957e:	a801      	add	r0, sp, #4
 8019580:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8019584:	b004      	add	sp, #16
 8019586:	2000      	movs	r0, #0
 8019588:	4770      	bx	lr
 801958a:	bf00      	nop

0801958c <rcutils_format_string_limit>:
 801958c:	b40f      	push	{r0, r1, r2, r3}
 801958e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019590:	b083      	sub	sp, #12
 8019592:	ac08      	add	r4, sp, #32
 8019594:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8019596:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801959a:	b376      	cbz	r6, 80195fa <rcutils_format_string_limit+0x6e>
 801959c:	4620      	mov	r0, r4
 801959e:	f7f5 ff55 	bl	800f44c <rcutils_allocator_is_valid>
 80195a2:	b350      	cbz	r0, 80195fa <rcutils_format_string_limit+0x6e>
 80195a4:	2100      	movs	r1, #0
 80195a6:	ab0f      	add	r3, sp, #60	@ 0x3c
 80195a8:	4632      	mov	r2, r6
 80195aa:	4608      	mov	r0, r1
 80195ac:	e9cd 3300 	strd	r3, r3, [sp]
 80195b0:	f000 f8f8 	bl	80197a4 <rcutils_vsnprintf>
 80195b4:	1c43      	adds	r3, r0, #1
 80195b6:	4605      	mov	r5, r0
 80195b8:	d01f      	beq.n	80195fa <rcutils_format_string_limit+0x6e>
 80195ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80195bc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80195be:	1c47      	adds	r7, r0, #1
 80195c0:	429f      	cmp	r7, r3
 80195c2:	bf84      	itt	hi
 80195c4:	461f      	movhi	r7, r3
 80195c6:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 80195ca:	4638      	mov	r0, r7
 80195cc:	9b08      	ldr	r3, [sp, #32]
 80195ce:	4798      	blx	r3
 80195d0:	4604      	mov	r4, r0
 80195d2:	b190      	cbz	r0, 80195fa <rcutils_format_string_limit+0x6e>
 80195d4:	9b01      	ldr	r3, [sp, #4]
 80195d6:	4632      	mov	r2, r6
 80195d8:	4639      	mov	r1, r7
 80195da:	f000 f8e3 	bl	80197a4 <rcutils_vsnprintf>
 80195de:	2800      	cmp	r0, #0
 80195e0:	db07      	blt.n	80195f2 <rcutils_format_string_limit+0x66>
 80195e2:	2300      	movs	r3, #0
 80195e4:	5563      	strb	r3, [r4, r5]
 80195e6:	4620      	mov	r0, r4
 80195e8:	b003      	add	sp, #12
 80195ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80195ee:	b004      	add	sp, #16
 80195f0:	4770      	bx	lr
 80195f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80195f4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80195f6:	4620      	mov	r0, r4
 80195f8:	4798      	blx	r3
 80195fa:	2400      	movs	r4, #0
 80195fc:	e7f3      	b.n	80195e6 <rcutils_format_string_limit+0x5a>
 80195fe:	bf00      	nop

08019600 <rcutils_repl_str>:
 8019600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019604:	4699      	mov	r9, r3
 8019606:	b089      	sub	sp, #36	@ 0x24
 8019608:	4603      	mov	r3, r0
 801960a:	4648      	mov	r0, r9
 801960c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8019610:	4698      	mov	r8, r3
 8019612:	9300      	str	r3, [sp, #0]
 8019614:	460c      	mov	r4, r1
 8019616:	f7f5 ff19 	bl	800f44c <rcutils_allocator_is_valid>
 801961a:	2800      	cmp	r0, #0
 801961c:	f000 80a3 	beq.w	8019766 <rcutils_repl_str+0x166>
 8019620:	4620      	mov	r0, r4
 8019622:	f7e6 fe5d 	bl	80002e0 <strlen>
 8019626:	f04f 0a00 	mov.w	sl, #0
 801962a:	f8d9 b010 	ldr.w	fp, [r9, #16]
 801962e:	9001      	str	r0, [sp, #4]
 8019630:	4657      	mov	r7, sl
 8019632:	4655      	mov	r5, sl
 8019634:	2610      	movs	r6, #16
 8019636:	e01e      	b.n	8019676 <rcutils_repl_str+0x76>
 8019638:	3501      	adds	r5, #1
 801963a:	45aa      	cmp	sl, r5
 801963c:	d212      	bcs.n	8019664 <rcutils_repl_str+0x64>
 801963e:	44b2      	add	sl, r6
 8019640:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8019644:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8019648:	4798      	blx	r3
 801964a:	2800      	cmp	r0, #0
 801964c:	f000 8088 	beq.w	8019760 <rcutils_repl_str+0x160>
 8019650:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019654:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
 8019658:	f8d9 b010 	ldr.w	fp, [r9, #16]
 801965c:	4607      	mov	r7, r0
 801965e:	bf28      	it	cs
 8019660:	f44f 1680 	movcs.w	r6, #1048576	@ 0x100000
 8019664:	9a00      	ldr	r2, [sp, #0]
 8019666:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 801966a:	1aa2      	subs	r2, r4, r2
 801966c:	f843 2c04 	str.w	r2, [r3, #-4]
 8019670:	9b01      	ldr	r3, [sp, #4]
 8019672:	eb04 0803 	add.w	r8, r4, r3
 8019676:	9902      	ldr	r1, [sp, #8]
 8019678:	4640      	mov	r0, r8
 801967a:	f004 fa97 	bl	801dbac <strstr>
 801967e:	4604      	mov	r4, r0
 8019680:	465a      	mov	r2, fp
 8019682:	4638      	mov	r0, r7
 8019684:	2c00      	cmp	r4, #0
 8019686:	d1d7      	bne.n	8019638 <rcutils_repl_str+0x38>
 8019688:	4640      	mov	r0, r8
 801968a:	f7e6 fe29 	bl	80002e0 <strlen>
 801968e:	9b00      	ldr	r3, [sp, #0]
 8019690:	eba8 0803 	sub.w	r8, r8, r3
 8019694:	eb08 0300 	add.w	r3, r8, r0
 8019698:	9304      	str	r3, [sp, #16]
 801969a:	f8d9 8000 	ldr.w	r8, [r9]
 801969e:	2d00      	cmp	r5, #0
 80196a0:	d03f      	beq.n	8019722 <rcutils_repl_str+0x122>
 80196a2:	9803      	ldr	r0, [sp, #12]
 80196a4:	f7e6 fe1c 	bl	80002e0 <strlen>
 80196a8:	4606      	mov	r6, r0
 80196aa:	9801      	ldr	r0, [sp, #4]
 80196ac:	9a04      	ldr	r2, [sp, #16]
 80196ae:	1a33      	subs	r3, r6, r0
 80196b0:	fb05 2a03 	mla	sl, r5, r3, r2
 80196b4:	4659      	mov	r1, fp
 80196b6:	f10a 0001 	add.w	r0, sl, #1
 80196ba:	47c0      	blx	r8
 80196bc:	4683      	mov	fp, r0
 80196be:	2800      	cmp	r0, #0
 80196c0:	d04e      	beq.n	8019760 <rcutils_repl_str+0x160>
 80196c2:	683a      	ldr	r2, [r7, #0]
 80196c4:	9900      	ldr	r1, [sp, #0]
 80196c6:	f004 fb12 	bl	801dcee <memcpy>
 80196ca:	683b      	ldr	r3, [r7, #0]
 80196cc:	9706      	str	r7, [sp, #24]
 80196ce:	1e6a      	subs	r2, r5, #1
 80196d0:	445b      	add	r3, fp
 80196d2:	46a8      	mov	r8, r5
 80196d4:	9202      	str	r2, [sp, #8]
 80196d6:	4625      	mov	r5, r4
 80196d8:	f8cd 901c 	str.w	r9, [sp, #28]
 80196dc:	461c      	mov	r4, r3
 80196de:	9903      	ldr	r1, [sp, #12]
 80196e0:	4632      	mov	r2, r6
 80196e2:	4620      	mov	r0, r4
 80196e4:	f004 fb03 	bl	801dcee <memcpy>
 80196e8:	9b01      	ldr	r3, [sp, #4]
 80196ea:	f857 2b04 	ldr.w	r2, [r7], #4
 80196ee:	eb02 0c03 	add.w	ip, r2, r3
 80196f2:	9b00      	ldr	r3, [sp, #0]
 80196f4:	eb03 010c 	add.w	r1, r3, ip
 80196f8:	9b02      	ldr	r3, [sp, #8]
 80196fa:	4434      	add	r4, r6
 80196fc:	429d      	cmp	r5, r3
 80196fe:	4620      	mov	r0, r4
 8019700:	d022      	beq.n	8019748 <rcutils_repl_str+0x148>
 8019702:	683a      	ldr	r2, [r7, #0]
 8019704:	eba2 090c 	sub.w	r9, r2, ip
 8019708:	464a      	mov	r2, r9
 801970a:	3501      	adds	r5, #1
 801970c:	f004 faef 	bl	801dcee <memcpy>
 8019710:	45a8      	cmp	r8, r5
 8019712:	444c      	add	r4, r9
 8019714:	d1e3      	bne.n	80196de <rcutils_repl_str+0xde>
 8019716:	2300      	movs	r3, #0
 8019718:	e9dd 7906 	ldrd	r7, r9, [sp, #24]
 801971c:	f80b 300a 	strb.w	r3, [fp, sl]
 8019720:	e008      	b.n	8019734 <rcutils_repl_str+0x134>
 8019722:	4618      	mov	r0, r3
 8019724:	4659      	mov	r1, fp
 8019726:	3001      	adds	r0, #1
 8019728:	47c0      	blx	r8
 801972a:	4683      	mov	fp, r0
 801972c:	b110      	cbz	r0, 8019734 <rcutils_repl_str+0x134>
 801972e:	9900      	ldr	r1, [sp, #0]
 8019730:	f004 fad5 	bl	801dcde <strcpy>
 8019734:	4638      	mov	r0, r7
 8019736:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801973a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801973e:	4798      	blx	r3
 8019740:	4658      	mov	r0, fp
 8019742:	b009      	add	sp, #36	@ 0x24
 8019744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019748:	9b04      	ldr	r3, [sp, #16]
 801974a:	eba3 020c 	sub.w	r2, r3, ip
 801974e:	9205      	str	r2, [sp, #20]
 8019750:	3501      	adds	r5, #1
 8019752:	f004 facc 	bl	801dcee <memcpy>
 8019756:	9a05      	ldr	r2, [sp, #20]
 8019758:	45a8      	cmp	r8, r5
 801975a:	4414      	add	r4, r2
 801975c:	d1bf      	bne.n	80196de <rcutils_repl_str+0xde>
 801975e:	e7da      	b.n	8019716 <rcutils_repl_str+0x116>
 8019760:	f04f 0b00 	mov.w	fp, #0
 8019764:	e7e6      	b.n	8019734 <rcutils_repl_str+0x134>
 8019766:	4683      	mov	fp, r0
 8019768:	4658      	mov	r0, fp
 801976a:	b009      	add	sp, #36	@ 0x24
 801976c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019770 <rcutils_snprintf>:
 8019770:	b40c      	push	{r2, r3}
 8019772:	b530      	push	{r4, r5, lr}
 8019774:	b083      	sub	sp, #12
 8019776:	ab06      	add	r3, sp, #24
 8019778:	f853 2b04 	ldr.w	r2, [r3], #4
 801977c:	9301      	str	r3, [sp, #4]
 801977e:	b152      	cbz	r2, 8019796 <rcutils_snprintf+0x26>
 8019780:	b138      	cbz	r0, 8019792 <rcutils_snprintf+0x22>
 8019782:	b141      	cbz	r1, 8019796 <rcutils_snprintf+0x26>
 8019784:	f004 f90c 	bl	801d9a0 <vsniprintf>
 8019788:	b003      	add	sp, #12
 801978a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801978e:	b002      	add	sp, #8
 8019790:	4770      	bx	lr
 8019792:	2900      	cmp	r1, #0
 8019794:	d0f6      	beq.n	8019784 <rcutils_snprintf+0x14>
 8019796:	f004 fa75 	bl	801dc84 <__errno>
 801979a:	2316      	movs	r3, #22
 801979c:	6003      	str	r3, [r0, #0]
 801979e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80197a2:	e7f1      	b.n	8019788 <rcutils_snprintf+0x18>

080197a4 <rcutils_vsnprintf>:
 80197a4:	b570      	push	{r4, r5, r6, lr}
 80197a6:	b13a      	cbz	r2, 80197b8 <rcutils_vsnprintf+0x14>
 80197a8:	b120      	cbz	r0, 80197b4 <rcutils_vsnprintf+0x10>
 80197aa:	b129      	cbz	r1, 80197b8 <rcutils_vsnprintf+0x14>
 80197ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80197b0:	f004 b8f6 	b.w	801d9a0 <vsniprintf>
 80197b4:	2900      	cmp	r1, #0
 80197b6:	d0f9      	beq.n	80197ac <rcutils_vsnprintf+0x8>
 80197b8:	f004 fa64 	bl	801dc84 <__errno>
 80197bc:	2316      	movs	r3, #22
 80197be:	6003      	str	r3, [r0, #0]
 80197c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80197c4:	bd70      	pop	{r4, r5, r6, pc}
 80197c6:	bf00      	nop

080197c8 <rcutils_strdup>:
 80197c8:	b084      	sub	sp, #16
 80197ca:	b570      	push	{r4, r5, r6, lr}
 80197cc:	b086      	sub	sp, #24
 80197ce:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 80197d2:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 80197d6:	4604      	mov	r4, r0
 80197d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80197dc:	f10d 0e04 	add.w	lr, sp, #4
 80197e0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80197e4:	f8dc 3000 	ldr.w	r3, [ip]
 80197e8:	f8ce 3000 	str.w	r3, [lr]
 80197ec:	b304      	cbz	r4, 8019830 <rcutils_strdup+0x68>
 80197ee:	a801      	add	r0, sp, #4
 80197f0:	f7f5 fe2c 	bl	800f44c <rcutils_allocator_is_valid>
 80197f4:	b1e0      	cbz	r0, 8019830 <rcutils_strdup+0x68>
 80197f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80197fa:	2100      	movs	r1, #0
 80197fc:	4620      	mov	r0, r4
 80197fe:	f7e6 fd1f 	bl	8000240 <memchr>
 8019802:	b190      	cbz	r0, 801982a <rcutils_strdup+0x62>
 8019804:	1b06      	subs	r6, r0, r4
 8019806:	1c70      	adds	r0, r6, #1
 8019808:	9b01      	ldr	r3, [sp, #4]
 801980a:	9905      	ldr	r1, [sp, #20]
 801980c:	4798      	blx	r3
 801980e:	4605      	mov	r5, r0
 8019810:	b128      	cbz	r0, 801981e <rcutils_strdup+0x56>
 8019812:	4632      	mov	r2, r6
 8019814:	4621      	mov	r1, r4
 8019816:	f004 fa6a 	bl	801dcee <memcpy>
 801981a:	2300      	movs	r3, #0
 801981c:	55ab      	strb	r3, [r5, r6]
 801981e:	4628      	mov	r0, r5
 8019820:	b006      	add	sp, #24
 8019822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019826:	b004      	add	sp, #16
 8019828:	4770      	bx	lr
 801982a:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801982e:	e7eb      	b.n	8019808 <rcutils_strdup+0x40>
 8019830:	2500      	movs	r5, #0
 8019832:	e7f4      	b.n	801981e <rcutils_strdup+0x56>

08019834 <rcutils_strndup>:
 8019834:	b082      	sub	sp, #8
 8019836:	b570      	push	{r4, r5, r6, lr}
 8019838:	ac04      	add	r4, sp, #16
 801983a:	e884 000c 	stmia.w	r4, {r2, r3}
 801983e:	b1e8      	cbz	r0, 801987c <rcutils_strndup+0x48>
 8019840:	4605      	mov	r5, r0
 8019842:	a804      	add	r0, sp, #16
 8019844:	460c      	mov	r4, r1
 8019846:	f7f5 fe01 	bl	800f44c <rcutils_allocator_is_valid>
 801984a:	b1b8      	cbz	r0, 801987c <rcutils_strndup+0x48>
 801984c:	4622      	mov	r2, r4
 801984e:	2100      	movs	r1, #0
 8019850:	4628      	mov	r0, r5
 8019852:	f7e6 fcf5 	bl	8000240 <memchr>
 8019856:	b100      	cbz	r0, 801985a <rcutils_strndup+0x26>
 8019858:	1b44      	subs	r4, r0, r5
 801985a:	9b04      	ldr	r3, [sp, #16]
 801985c:	9908      	ldr	r1, [sp, #32]
 801985e:	1c60      	adds	r0, r4, #1
 8019860:	4798      	blx	r3
 8019862:	4606      	mov	r6, r0
 8019864:	b128      	cbz	r0, 8019872 <rcutils_strndup+0x3e>
 8019866:	4622      	mov	r2, r4
 8019868:	4629      	mov	r1, r5
 801986a:	f004 fa40 	bl	801dcee <memcpy>
 801986e:	2300      	movs	r3, #0
 8019870:	5533      	strb	r3, [r6, r4]
 8019872:	4630      	mov	r0, r6
 8019874:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019878:	b002      	add	sp, #8
 801987a:	4770      	bx	lr
 801987c:	2600      	movs	r6, #0
 801987e:	4630      	mov	r0, r6
 8019880:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019884:	b002      	add	sp, #8
 8019886:	4770      	bx	lr

08019888 <rcutils_get_zero_initialized_string_map>:
 8019888:	4b01      	ldr	r3, [pc, #4]	@ (8019890 <rcutils_get_zero_initialized_string_map+0x8>)
 801988a:	2000      	movs	r0, #0
 801988c:	6018      	str	r0, [r3, #0]
 801988e:	4770      	bx	lr
 8019890:	2000f438 	.word	0x2000f438

08019894 <rcutils_string_map_reserve>:
 8019894:	2800      	cmp	r0, #0
 8019896:	d04e      	beq.n	8019936 <rcutils_string_map_reserve+0xa2>
 8019898:	b530      	push	{r4, r5, lr}
 801989a:	6803      	ldr	r3, [r0, #0]
 801989c:	b087      	sub	sp, #28
 801989e:	4604      	mov	r4, r0
 80198a0:	2b00      	cmp	r3, #0
 80198a2:	d043      	beq.n	801992c <rcutils_string_map_reserve+0x98>
 80198a4:	f103 0c0c 	add.w	ip, r3, #12
 80198a8:	460d      	mov	r5, r1
 80198aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80198ae:	f10d 0e04 	add.w	lr, sp, #4
 80198b2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80198b6:	f8dc 3000 	ldr.w	r3, [ip]
 80198ba:	f8ce 3000 	str.w	r3, [lr]
 80198be:	a801      	add	r0, sp, #4
 80198c0:	f7f5 fdc4 	bl	800f44c <rcutils_allocator_is_valid>
 80198c4:	b308      	cbz	r0, 801990a <rcutils_string_map_reserve+0x76>
 80198c6:	6823      	ldr	r3, [r4, #0]
 80198c8:	6899      	ldr	r1, [r3, #8]
 80198ca:	42a9      	cmp	r1, r5
 80198cc:	d829      	bhi.n	8019922 <rcutils_string_map_reserve+0x8e>
 80198ce:	685a      	ldr	r2, [r3, #4]
 80198d0:	42aa      	cmp	r2, r5
 80198d2:	d024      	beq.n	801991e <rcutils_string_map_reserve+0x8a>
 80198d4:	b1e5      	cbz	r5, 8019910 <rcutils_string_map_reserve+0x7c>
 80198d6:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
 80198da:	d22a      	bcs.n	8019932 <rcutils_string_map_reserve+0x9e>
 80198dc:	6818      	ldr	r0, [r3, #0]
 80198de:	9a05      	ldr	r2, [sp, #20]
 80198e0:	9b03      	ldr	r3, [sp, #12]
 80198e2:	00e9      	lsls	r1, r5, #3
 80198e4:	4798      	blx	r3
 80198e6:	b320      	cbz	r0, 8019932 <rcutils_string_map_reserve+0x9e>
 80198e8:	6824      	ldr	r4, [r4, #0]
 80198ea:	6861      	ldr	r1, [r4, #4]
 80198ec:	6020      	str	r0, [r4, #0]
 80198ee:	42a9      	cmp	r1, r5
 80198f0:	d214      	bcs.n	801991c <rcutils_string_map_reserve+0x88>
 80198f2:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 80198f6:	1a69      	subs	r1, r5, r1
 80198f8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80198fc:	2200      	movs	r2, #0
 80198fe:	e9c3 2200 	strd	r2, r2, [r3]
 8019902:	3308      	adds	r3, #8
 8019904:	428b      	cmp	r3, r1
 8019906:	d1fa      	bne.n	80198fe <rcutils_string_map_reserve+0x6a>
 8019908:	e008      	b.n	801991c <rcutils_string_map_reserve+0x88>
 801990a:	200b      	movs	r0, #11
 801990c:	b007      	add	sp, #28
 801990e:	bd30      	pop	{r4, r5, pc}
 8019910:	9a02      	ldr	r2, [sp, #8]
 8019912:	9905      	ldr	r1, [sp, #20]
 8019914:	6818      	ldr	r0, [r3, #0]
 8019916:	4790      	blx	r2
 8019918:	6824      	ldr	r4, [r4, #0]
 801991a:	6025      	str	r5, [r4, #0]
 801991c:	6065      	str	r5, [r4, #4]
 801991e:	2000      	movs	r0, #0
 8019920:	e7f4      	b.n	801990c <rcutils_string_map_reserve+0x78>
 8019922:	4620      	mov	r0, r4
 8019924:	f7ff ffb6 	bl	8019894 <rcutils_string_map_reserve>
 8019928:	b007      	add	sp, #28
 801992a:	bd30      	pop	{r4, r5, pc}
 801992c:	201f      	movs	r0, #31
 801992e:	b007      	add	sp, #28
 8019930:	bd30      	pop	{r4, r5, pc}
 8019932:	200a      	movs	r0, #10
 8019934:	e7ea      	b.n	801990c <rcutils_string_map_reserve+0x78>
 8019936:	200b      	movs	r0, #11
 8019938:	4770      	bx	lr
 801993a:	bf00      	nop

0801993c <rcutils_string_map_init>:
 801993c:	b082      	sub	sp, #8
 801993e:	b570      	push	{r4, r5, r6, lr}
 8019940:	ac04      	add	r4, sp, #16
 8019942:	e884 000c 	stmia.w	r4, {r2, r3}
 8019946:	b378      	cbz	r0, 80199a8 <rcutils_string_map_init+0x6c>
 8019948:	6806      	ldr	r6, [r0, #0]
 801994a:	4604      	mov	r4, r0
 801994c:	b12e      	cbz	r6, 801995a <rcutils_string_map_init+0x1e>
 801994e:	251e      	movs	r5, #30
 8019950:	4628      	mov	r0, r5
 8019952:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019956:	b002      	add	sp, #8
 8019958:	4770      	bx	lr
 801995a:	a804      	add	r0, sp, #16
 801995c:	460d      	mov	r5, r1
 801995e:	f7f5 fd75 	bl	800f44c <rcutils_allocator_is_valid>
 8019962:	b308      	cbz	r0, 80199a8 <rcutils_string_map_init+0x6c>
 8019964:	9b04      	ldr	r3, [sp, #16]
 8019966:	9908      	ldr	r1, [sp, #32]
 8019968:	2020      	movs	r0, #32
 801996a:	4798      	blx	r3
 801996c:	6020      	str	r0, [r4, #0]
 801996e:	b308      	cbz	r0, 80199b4 <rcutils_string_map_init+0x78>
 8019970:	f10d 0e10 	add.w	lr, sp, #16
 8019974:	e9c0 6600 	strd	r6, r6, [r0]
 8019978:	6086      	str	r6, [r0, #8]
 801997a:	f100 0c0c 	add.w	ip, r0, #12
 801997e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019982:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019986:	f8de 3000 	ldr.w	r3, [lr]
 801998a:	f8cc 3000 	str.w	r3, [ip]
 801998e:	4629      	mov	r1, r5
 8019990:	4620      	mov	r0, r4
 8019992:	f7ff ff7f 	bl	8019894 <rcutils_string_map_reserve>
 8019996:	4605      	mov	r5, r0
 8019998:	2800      	cmp	r0, #0
 801999a:	d0d9      	beq.n	8019950 <rcutils_string_map_init+0x14>
 801999c:	9b05      	ldr	r3, [sp, #20]
 801999e:	9908      	ldr	r1, [sp, #32]
 80199a0:	6820      	ldr	r0, [r4, #0]
 80199a2:	4798      	blx	r3
 80199a4:	6026      	str	r6, [r4, #0]
 80199a6:	e7d3      	b.n	8019950 <rcutils_string_map_init+0x14>
 80199a8:	250b      	movs	r5, #11
 80199aa:	4628      	mov	r0, r5
 80199ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80199b0:	b002      	add	sp, #8
 80199b2:	4770      	bx	lr
 80199b4:	250a      	movs	r5, #10
 80199b6:	e7cb      	b.n	8019950 <rcutils_string_map_init+0x14>

080199b8 <rcutils_string_map_fini>:
 80199b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80199bc:	b086      	sub	sp, #24
 80199be:	2800      	cmp	r0, #0
 80199c0:	d04f      	beq.n	8019a62 <rcutils_string_map_fini+0xaa>
 80199c2:	6805      	ldr	r5, [r0, #0]
 80199c4:	4606      	mov	r6, r0
 80199c6:	2d00      	cmp	r5, #0
 80199c8:	d046      	beq.n	8019a58 <rcutils_string_map_fini+0xa0>
 80199ca:	686b      	ldr	r3, [r5, #4]
 80199cc:	b353      	cbz	r3, 8019a24 <rcutils_string_map_fini+0x6c>
 80199ce:	2400      	movs	r4, #0
 80199d0:	682a      	ldr	r2, [r5, #0]
 80199d2:	4627      	mov	r7, r4
 80199d4:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 80199d8:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80199dc:	b1f8      	cbz	r0, 8019a1e <rcutils_string_map_fini+0x66>
 80199de:	f8d5 a01c 	ldr.w	sl, [r5, #28]
 80199e2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80199e6:	4651      	mov	r1, sl
 80199e8:	47c8      	blx	r9
 80199ea:	682b      	ldr	r3, [r5, #0]
 80199ec:	eb03 0208 	add.w	r2, r3, r8
 80199f0:	f843 7034 	str.w	r7, [r3, r4, lsl #3]
 80199f4:	6850      	ldr	r0, [r2, #4]
 80199f6:	4651      	mov	r1, sl
 80199f8:	47c8      	blx	r9
 80199fa:	682a      	ldr	r2, [r5, #0]
 80199fc:	68ab      	ldr	r3, [r5, #8]
 80199fe:	4442      	add	r2, r8
 8019a00:	3b01      	subs	r3, #1
 8019a02:	6057      	str	r7, [r2, #4]
 8019a04:	60ab      	str	r3, [r5, #8]
 8019a06:	6835      	ldr	r5, [r6, #0]
 8019a08:	686b      	ldr	r3, [r5, #4]
 8019a0a:	3401      	adds	r4, #1
 8019a0c:	429c      	cmp	r4, r3
 8019a0e:	d209      	bcs.n	8019a24 <rcutils_string_map_fini+0x6c>
 8019a10:	682a      	ldr	r2, [r5, #0]
 8019a12:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 8019a16:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8019a1a:	2800      	cmp	r0, #0
 8019a1c:	d1df      	bne.n	80199de <rcutils_string_map_fini+0x26>
 8019a1e:	3401      	adds	r4, #1
 8019a20:	42a3      	cmp	r3, r4
 8019a22:	d8d7      	bhi.n	80199d4 <rcutils_string_map_fini+0x1c>
 8019a24:	2100      	movs	r1, #0
 8019a26:	4630      	mov	r0, r6
 8019a28:	f7ff ff34 	bl	8019894 <rcutils_string_map_reserve>
 8019a2c:	4604      	mov	r4, r0
 8019a2e:	b118      	cbz	r0, 8019a38 <rcutils_string_map_fini+0x80>
 8019a30:	4620      	mov	r0, r4
 8019a32:	b006      	add	sp, #24
 8019a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a38:	6835      	ldr	r5, [r6, #0]
 8019a3a:	350c      	adds	r5, #12
 8019a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019a3e:	af01      	add	r7, sp, #4
 8019a40:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8019a42:	682b      	ldr	r3, [r5, #0]
 8019a44:	603b      	str	r3, [r7, #0]
 8019a46:	a801      	add	r0, sp, #4
 8019a48:	f7f5 fd00 	bl	800f44c <rcutils_allocator_is_valid>
 8019a4c:	b148      	cbz	r0, 8019a62 <rcutils_string_map_fini+0xaa>
 8019a4e:	9b02      	ldr	r3, [sp, #8]
 8019a50:	9905      	ldr	r1, [sp, #20]
 8019a52:	6830      	ldr	r0, [r6, #0]
 8019a54:	4798      	blx	r3
 8019a56:	6034      	str	r4, [r6, #0]
 8019a58:	2400      	movs	r4, #0
 8019a5a:	4620      	mov	r0, r4
 8019a5c:	b006      	add	sp, #24
 8019a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a62:	240b      	movs	r4, #11
 8019a64:	4620      	mov	r0, r4
 8019a66:	b006      	add	sp, #24
 8019a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08019a6c <rcutils_string_map_getn>:
 8019a6c:	b338      	cbz	r0, 8019abe <rcutils_string_map_getn+0x52>
 8019a6e:	6800      	ldr	r0, [r0, #0]
 8019a70:	b328      	cbz	r0, 8019abe <rcutils_string_map_getn+0x52>
 8019a72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a76:	460e      	mov	r6, r1
 8019a78:	b1c1      	cbz	r1, 8019aac <rcutils_string_map_getn+0x40>
 8019a7a:	e9d0 9800 	ldrd	r9, r8, [r0]
 8019a7e:	f1b8 0f00 	cmp.w	r8, #0
 8019a82:	d013      	beq.n	8019aac <rcutils_string_map_getn+0x40>
 8019a84:	4617      	mov	r7, r2
 8019a86:	2400      	movs	r4, #0
 8019a88:	f859 5034 	ldr.w	r5, [r9, r4, lsl #3]
 8019a8c:	4628      	mov	r0, r5
 8019a8e:	b155      	cbz	r5, 8019aa6 <rcutils_string_map_getn+0x3a>
 8019a90:	f7e6 fc26 	bl	80002e0 <strlen>
 8019a94:	42b8      	cmp	r0, r7
 8019a96:	4602      	mov	r2, r0
 8019a98:	4629      	mov	r1, r5
 8019a9a:	bf38      	it	cc
 8019a9c:	463a      	movcc	r2, r7
 8019a9e:	4630      	mov	r0, r6
 8019aa0:	f004 f85f 	bl	801db62 <strncmp>
 8019aa4:	b128      	cbz	r0, 8019ab2 <rcutils_string_map_getn+0x46>
 8019aa6:	3401      	adds	r4, #1
 8019aa8:	45a0      	cmp	r8, r4
 8019aaa:	d1ed      	bne.n	8019a88 <rcutils_string_map_getn+0x1c>
 8019aac:	2000      	movs	r0, #0
 8019aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019ab2:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
 8019ab6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8019aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019abe:	4770      	bx	lr

08019ac0 <rmw_get_zero_initialized_discovery_options>:
 8019ac0:	b510      	push	{r4, lr}
 8019ac2:	2220      	movs	r2, #32
 8019ac4:	4604      	mov	r4, r0
 8019ac6:	2100      	movs	r1, #0
 8019ac8:	f004 f836 	bl	801db38 <memset>
 8019acc:	4620      	mov	r0, r4
 8019ace:	bd10      	pop	{r4, pc}

08019ad0 <rmw_discovery_options_init>:
 8019ad0:	b328      	cbz	r0, 8019b1e <rmw_discovery_options_init+0x4e>
 8019ad2:	b570      	push	{r4, r5, r6, lr}
 8019ad4:	4604      	mov	r4, r0
 8019ad6:	4610      	mov	r0, r2
 8019ad8:	460e      	mov	r6, r1
 8019ada:	4615      	mov	r5, r2
 8019adc:	f7f5 fcb6 	bl	800f44c <rcutils_allocator_is_valid>
 8019ae0:	b1d8      	cbz	r0, 8019b1a <rmw_discovery_options_init+0x4a>
 8019ae2:	68a3      	ldr	r3, [r4, #8]
 8019ae4:	b9cb      	cbnz	r3, 8019b1a <rmw_discovery_options_init+0x4a>
 8019ae6:	6863      	ldr	r3, [r4, #4]
 8019ae8:	b9bb      	cbnz	r3, 8019b1a <rmw_discovery_options_init+0x4a>
 8019aea:	7823      	ldrb	r3, [r4, #0]
 8019aec:	b90b      	cbnz	r3, 8019af2 <rmw_discovery_options_init+0x22>
 8019aee:	2302      	movs	r3, #2
 8019af0:	7023      	strb	r3, [r4, #0]
 8019af2:	b186      	cbz	r6, 8019b16 <rmw_discovery_options_init+0x46>
 8019af4:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8019af8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8019afc:	4630      	mov	r0, r6
 8019afe:	4798      	blx	r3
 8019b00:	6060      	str	r0, [r4, #4]
 8019b02:	b170      	cbz	r0, 8019b22 <rmw_discovery_options_init+0x52>
 8019b04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019b06:	f104 0c0c 	add.w	ip, r4, #12
 8019b0a:	60a6      	str	r6, [r4, #8]
 8019b0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019b10:	682b      	ldr	r3, [r5, #0]
 8019b12:	f8cc 3000 	str.w	r3, [ip]
 8019b16:	2000      	movs	r0, #0
 8019b18:	bd70      	pop	{r4, r5, r6, pc}
 8019b1a:	200b      	movs	r0, #11
 8019b1c:	bd70      	pop	{r4, r5, r6, pc}
 8019b1e:	200b      	movs	r0, #11
 8019b20:	4770      	bx	lr
 8019b22:	200a      	movs	r0, #10
 8019b24:	bd70      	pop	{r4, r5, r6, pc}
 8019b26:	bf00      	nop

08019b28 <rmw_get_zero_initialized_context>:
 8019b28:	b530      	push	{r4, r5, lr}
 8019b2a:	b097      	sub	sp, #92	@ 0x5c
 8019b2c:	4604      	mov	r4, r0
 8019b2e:	4668      	mov	r0, sp
 8019b30:	f7f5 fd22 	bl	800f578 <rmw_get_zero_initialized_init_options>
 8019b34:	2300      	movs	r3, #0
 8019b36:	2200      	movs	r2, #0
 8019b38:	e9c4 2300 	strd	r2, r3, [r4]
 8019b3c:	2500      	movs	r5, #0
 8019b3e:	4669      	mov	r1, sp
 8019b40:	2258      	movs	r2, #88	@ 0x58
 8019b42:	f104 0010 	add.w	r0, r4, #16
 8019b46:	60a5      	str	r5, [r4, #8]
 8019b48:	f004 f8d1 	bl	801dcee <memcpy>
 8019b4c:	4620      	mov	r0, r4
 8019b4e:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
 8019b52:	b017      	add	sp, #92	@ 0x5c
 8019b54:	bd30      	pop	{r4, r5, pc}
 8019b56:	bf00      	nop

08019b58 <rmw_time_equal>:
 8019b58:	b570      	push	{r4, r5, r6, lr}
 8019b5a:	b084      	sub	sp, #16
 8019b5c:	ac04      	add	r4, sp, #16
 8019b5e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8019b62:	4925      	ldr	r1, [pc, #148]	@ (8019bf8 <rmw_time_equal+0xa0>)
 8019b64:	9c01      	ldr	r4, [sp, #4]
 8019b66:	2202      	movs	r2, #2
 8019b68:	4281      	cmp	r1, r0
 8019b6a:	41a2      	sbcs	r2, r4
 8019b6c:	d333      	bcc.n	8019bd6 <rmw_time_equal+0x7e>
 8019b6e:	4603      	mov	r3, r0
 8019b70:	4822      	ldr	r0, [pc, #136]	@ (8019bfc <rmw_time_equal+0xa4>)
 8019b72:	e9dd 1502 	ldrd	r1, r5, [sp, #8]
 8019b76:	fba3 3200 	umull	r3, r2, r3, r0
 8019b7a:	fb00 2204 	mla	r2, r0, r4, r2
 8019b7e:	43de      	mvns	r6, r3
 8019b80:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8019b84:	1a84      	subs	r4, r0, r2
 8019b86:	428e      	cmp	r6, r1
 8019b88:	41ac      	sbcs	r4, r5
 8019b8a:	d332      	bcc.n	8019bf2 <rmw_time_equal+0x9a>
 8019b8c:	eb11 0e03 	adds.w	lr, r1, r3
 8019b90:	eb42 0005 	adc.w	r0, r2, r5
 8019b94:	9b08      	ldr	r3, [sp, #32]
 8019b96:	4918      	ldr	r1, [pc, #96]	@ (8019bf8 <rmw_time_equal+0xa0>)
 8019b98:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8019b9a:	2202      	movs	r2, #2
 8019b9c:	4299      	cmp	r1, r3
 8019b9e:	41aa      	sbcs	r2, r5
 8019ba0:	d31e      	bcc.n	8019be0 <rmw_time_equal+0x88>
 8019ba2:	4c16      	ldr	r4, [pc, #88]	@ (8019bfc <rmw_time_equal+0xa4>)
 8019ba4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019ba6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8019ba8:	fba3 3104 	umull	r3, r1, r3, r4
 8019bac:	fb04 1105 	mla	r1, r4, r5, r1
 8019bb0:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8019bb4:	43dd      	mvns	r5, r3
 8019bb6:	ebac 0401 	sub.w	r4, ip, r1
 8019bba:	4295      	cmp	r5, r2
 8019bbc:	41b4      	sbcs	r4, r6
 8019bbe:	d314      	bcc.n	8019bea <rmw_time_equal+0x92>
 8019bc0:	18d2      	adds	r2, r2, r3
 8019bc2:	eb41 0306 	adc.w	r3, r1, r6
 8019bc6:	4283      	cmp	r3, r0
 8019bc8:	bf08      	it	eq
 8019bca:	4572      	cmpeq	r2, lr
 8019bcc:	bf0c      	ite	eq
 8019bce:	2001      	moveq	r0, #1
 8019bd0:	2000      	movne	r0, #0
 8019bd2:	b004      	add	sp, #16
 8019bd4:	bd70      	pop	{r4, r5, r6, pc}
 8019bd6:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8019bda:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8019bde:	e7d9      	b.n	8019b94 <rmw_time_equal+0x3c>
 8019be0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019be4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8019be8:	e7ed      	b.n	8019bc6 <rmw_time_equal+0x6e>
 8019bea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019bee:	4663      	mov	r3, ip
 8019bf0:	e7e9      	b.n	8019bc6 <rmw_time_equal+0x6e>
 8019bf2:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8019bf6:	e7cd      	b.n	8019b94 <rmw_time_equal+0x3c>
 8019bf8:	25c17d04 	.word	0x25c17d04
 8019bfc:	3b9aca00 	.word	0x3b9aca00

08019c00 <rmw_time_total_nsec>:
 8019c00:	b430      	push	{r4, r5}
 8019c02:	b084      	sub	sp, #16
 8019c04:	ac04      	add	r4, sp, #16
 8019c06:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8019c0a:	4914      	ldr	r1, [pc, #80]	@ (8019c5c <rmw_time_total_nsec+0x5c>)
 8019c0c:	9c01      	ldr	r4, [sp, #4]
 8019c0e:	2202      	movs	r2, #2
 8019c10:	4281      	cmp	r1, r0
 8019c12:	41a2      	sbcs	r2, r4
 8019c14:	d315      	bcc.n	8019c42 <rmw_time_total_nsec+0x42>
 8019c16:	4912      	ldr	r1, [pc, #72]	@ (8019c60 <rmw_time_total_nsec+0x60>)
 8019c18:	4603      	mov	r3, r0
 8019c1a:	e9dd 0502 	ldrd	r0, r5, [sp, #8]
 8019c1e:	fba3 3201 	umull	r3, r2, r3, r1
 8019c22:	fb01 2204 	mla	r2, r1, r4, r2
 8019c26:	ea6f 0c03 	mvn.w	ip, r3
 8019c2a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019c2e:	1a8c      	subs	r4, r1, r2
 8019c30:	4584      	cmp	ip, r0
 8019c32:	41ac      	sbcs	r4, r5
 8019c34:	d30c      	bcc.n	8019c50 <rmw_time_total_nsec+0x50>
 8019c36:	1818      	adds	r0, r3, r0
 8019c38:	eb42 0105 	adc.w	r1, r2, r5
 8019c3c:	b004      	add	sp, #16
 8019c3e:	bc30      	pop	{r4, r5}
 8019c40:	4770      	bx	lr
 8019c42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019c46:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019c4a:	b004      	add	sp, #16
 8019c4c:	bc30      	pop	{r4, r5}
 8019c4e:	4770      	bx	lr
 8019c50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019c54:	b004      	add	sp, #16
 8019c56:	bc30      	pop	{r4, r5}
 8019c58:	4770      	bx	lr
 8019c5a:	bf00      	nop
 8019c5c:	25c17d04 	.word	0x25c17d04
 8019c60:	3b9aca00 	.word	0x3b9aca00

08019c64 <rmw_get_zero_initialized_message_info>:
 8019c64:	b510      	push	{r4, lr}
 8019c66:	2238      	movs	r2, #56	@ 0x38
 8019c68:	4604      	mov	r4, r0
 8019c6a:	2100      	movs	r1, #0
 8019c6c:	f003 ff64 	bl	801db38 <memset>
 8019c70:	4620      	mov	r0, r4
 8019c72:	bd10      	pop	{r4, pc}

08019c74 <rmw_validate_full_topic_name>:
 8019c74:	2800      	cmp	r0, #0
 8019c76:	d049      	beq.n	8019d0c <rmw_validate_full_topic_name+0x98>
 8019c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c7c:	460e      	mov	r6, r1
 8019c7e:	2900      	cmp	r1, #0
 8019c80:	d056      	beq.n	8019d30 <rmw_validate_full_topic_name+0xbc>
 8019c82:	4615      	mov	r5, r2
 8019c84:	4604      	mov	r4, r0
 8019c86:	f7e6 fb2b 	bl	80002e0 <strlen>
 8019c8a:	b150      	cbz	r0, 8019ca2 <rmw_validate_full_topic_name+0x2e>
 8019c8c:	7823      	ldrb	r3, [r4, #0]
 8019c8e:	2b2f      	cmp	r3, #47	@ 0x2f
 8019c90:	d00c      	beq.n	8019cac <rmw_validate_full_topic_name+0x38>
 8019c92:	2302      	movs	r3, #2
 8019c94:	6033      	str	r3, [r6, #0]
 8019c96:	b10d      	cbz	r5, 8019c9c <rmw_validate_full_topic_name+0x28>
 8019c98:	2300      	movs	r3, #0
 8019c9a:	602b      	str	r3, [r5, #0]
 8019c9c:	2000      	movs	r0, #0
 8019c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ca2:	2301      	movs	r3, #1
 8019ca4:	6033      	str	r3, [r6, #0]
 8019ca6:	2d00      	cmp	r5, #0
 8019ca8:	d1f6      	bne.n	8019c98 <rmw_validate_full_topic_name+0x24>
 8019caa:	e7f7      	b.n	8019c9c <rmw_validate_full_topic_name+0x28>
 8019cac:	1e47      	subs	r7, r0, #1
 8019cae:	5de3      	ldrb	r3, [r4, r7]
 8019cb0:	2b2f      	cmp	r3, #47	@ 0x2f
 8019cb2:	d03f      	beq.n	8019d34 <rmw_validate_full_topic_name+0xc0>
 8019cb4:	1e63      	subs	r3, r4, #1
 8019cb6:	4621      	mov	r1, r4
 8019cb8:	eb03 0e00 	add.w	lr, r3, r0
 8019cbc:	469c      	mov	ip, r3
 8019cbe:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8019cc2:	2a5f      	cmp	r2, #95	@ 0x5f
 8019cc4:	d006      	beq.n	8019cd4 <rmw_validate_full_topic_name+0x60>
 8019cc6:	d823      	bhi.n	8019d10 <rmw_validate_full_topic_name+0x9c>
 8019cc8:	2a39      	cmp	r2, #57	@ 0x39
 8019cca:	f1a2 0841 	sub.w	r8, r2, #65	@ 0x41
 8019cce:	d82b      	bhi.n	8019d28 <rmw_validate_full_topic_name+0xb4>
 8019cd0:	2a2e      	cmp	r2, #46	@ 0x2e
 8019cd2:	d920      	bls.n	8019d16 <rmw_validate_full_topic_name+0xa2>
 8019cd4:	4573      	cmp	r3, lr
 8019cd6:	d1f1      	bne.n	8019cbc <rmw_validate_full_topic_name+0x48>
 8019cd8:	4c21      	ldr	r4, [pc, #132]	@ (8019d60 <rmw_validate_full_topic_name+0xec>)
 8019cda:	2300      	movs	r3, #0
 8019cdc:	e003      	b.n	8019ce6 <rmw_validate_full_topic_name+0x72>
 8019cde:	4298      	cmp	r0, r3
 8019ce0:	f101 0101 	add.w	r1, r1, #1
 8019ce4:	d02c      	beq.n	8019d40 <rmw_validate_full_topic_name+0xcc>
 8019ce6:	429f      	cmp	r7, r3
 8019ce8:	f103 0301 	add.w	r3, r3, #1
 8019cec:	d0f7      	beq.n	8019cde <rmw_validate_full_topic_name+0x6a>
 8019cee:	780a      	ldrb	r2, [r1, #0]
 8019cf0:	2a2f      	cmp	r2, #47	@ 0x2f
 8019cf2:	d1f4      	bne.n	8019cde <rmw_validate_full_topic_name+0x6a>
 8019cf4:	784a      	ldrb	r2, [r1, #1]
 8019cf6:	2a2f      	cmp	r2, #47	@ 0x2f
 8019cf8:	d02d      	beq.n	8019d56 <rmw_validate_full_topic_name+0xe2>
 8019cfa:	5ca2      	ldrb	r2, [r4, r2]
 8019cfc:	0752      	lsls	r2, r2, #29
 8019cfe:	d5ee      	bpl.n	8019cde <rmw_validate_full_topic_name+0x6a>
 8019d00:	2206      	movs	r2, #6
 8019d02:	6032      	str	r2, [r6, #0]
 8019d04:	2d00      	cmp	r5, #0
 8019d06:	d0c9      	beq.n	8019c9c <rmw_validate_full_topic_name+0x28>
 8019d08:	602b      	str	r3, [r5, #0]
 8019d0a:	e7c7      	b.n	8019c9c <rmw_validate_full_topic_name+0x28>
 8019d0c:	200b      	movs	r0, #11
 8019d0e:	4770      	bx	lr
 8019d10:	3a61      	subs	r2, #97	@ 0x61
 8019d12:	2a19      	cmp	r2, #25
 8019d14:	d9de      	bls.n	8019cd4 <rmw_validate_full_topic_name+0x60>
 8019d16:	2304      	movs	r3, #4
 8019d18:	6033      	str	r3, [r6, #0]
 8019d1a:	2d00      	cmp	r5, #0
 8019d1c:	d0be      	beq.n	8019c9c <rmw_validate_full_topic_name+0x28>
 8019d1e:	f1c4 0401 	rsb	r4, r4, #1
 8019d22:	4464      	add	r4, ip
 8019d24:	602c      	str	r4, [r5, #0]
 8019d26:	e7b9      	b.n	8019c9c <rmw_validate_full_topic_name+0x28>
 8019d28:	f1b8 0f19 	cmp.w	r8, #25
 8019d2c:	d9d2      	bls.n	8019cd4 <rmw_validate_full_topic_name+0x60>
 8019d2e:	e7f2      	b.n	8019d16 <rmw_validate_full_topic_name+0xa2>
 8019d30:	200b      	movs	r0, #11
 8019d32:	e7b4      	b.n	8019c9e <rmw_validate_full_topic_name+0x2a>
 8019d34:	2303      	movs	r3, #3
 8019d36:	6033      	str	r3, [r6, #0]
 8019d38:	2d00      	cmp	r5, #0
 8019d3a:	d0af      	beq.n	8019c9c <rmw_validate_full_topic_name+0x28>
 8019d3c:	602f      	str	r7, [r5, #0]
 8019d3e:	e7ad      	b.n	8019c9c <rmw_validate_full_topic_name+0x28>
 8019d40:	28f7      	cmp	r0, #247	@ 0xf7
 8019d42:	d802      	bhi.n	8019d4a <rmw_validate_full_topic_name+0xd6>
 8019d44:	2300      	movs	r3, #0
 8019d46:	6033      	str	r3, [r6, #0]
 8019d48:	e7a8      	b.n	8019c9c <rmw_validate_full_topic_name+0x28>
 8019d4a:	2307      	movs	r3, #7
 8019d4c:	6033      	str	r3, [r6, #0]
 8019d4e:	2d00      	cmp	r5, #0
 8019d50:	d0a4      	beq.n	8019c9c <rmw_validate_full_topic_name+0x28>
 8019d52:	23f6      	movs	r3, #246	@ 0xf6
 8019d54:	e7d8      	b.n	8019d08 <rmw_validate_full_topic_name+0x94>
 8019d56:	2205      	movs	r2, #5
 8019d58:	6032      	str	r2, [r6, #0]
 8019d5a:	2d00      	cmp	r5, #0
 8019d5c:	d1d4      	bne.n	8019d08 <rmw_validate_full_topic_name+0x94>
 8019d5e:	e79d      	b.n	8019c9c <rmw_validate_full_topic_name+0x28>
 8019d60:	08021f44 	.word	0x08021f44

08019d64 <rmw_validate_namespace_with_size>:
 8019d64:	2800      	cmp	r0, #0
 8019d66:	d031      	beq.n	8019dcc <rmw_validate_namespace_with_size+0x68>
 8019d68:	b570      	push	{r4, r5, r6, lr}
 8019d6a:	4614      	mov	r4, r2
 8019d6c:	b0c2      	sub	sp, #264	@ 0x108
 8019d6e:	b1ba      	cbz	r2, 8019da0 <rmw_validate_namespace_with_size+0x3c>
 8019d70:	2901      	cmp	r1, #1
 8019d72:	460e      	mov	r6, r1
 8019d74:	461d      	mov	r5, r3
 8019d76:	d102      	bne.n	8019d7e <rmw_validate_namespace_with_size+0x1a>
 8019d78:	7803      	ldrb	r3, [r0, #0]
 8019d7a:	2b2f      	cmp	r3, #47	@ 0x2f
 8019d7c:	d015      	beq.n	8019daa <rmw_validate_namespace_with_size+0x46>
 8019d7e:	aa01      	add	r2, sp, #4
 8019d80:	4669      	mov	r1, sp
 8019d82:	f7ff ff77 	bl	8019c74 <rmw_validate_full_topic_name>
 8019d86:	b960      	cbnz	r0, 8019da2 <rmw_validate_namespace_with_size+0x3e>
 8019d88:	9b00      	ldr	r3, [sp, #0]
 8019d8a:	b163      	cbz	r3, 8019da6 <rmw_validate_namespace_with_size+0x42>
 8019d8c:	2b07      	cmp	r3, #7
 8019d8e:	d00a      	beq.n	8019da6 <rmw_validate_namespace_with_size+0x42>
 8019d90:	1e5a      	subs	r2, r3, #1
 8019d92:	2a05      	cmp	r2, #5
 8019d94:	d81c      	bhi.n	8019dd0 <rmw_validate_namespace_with_size+0x6c>
 8019d96:	e8df f002 	tbb	[pc, r2]
 8019d9a:	0c0c      	.short	0x0c0c
 8019d9c:	0c0c0c0c 	.word	0x0c0c0c0c
 8019da0:	200b      	movs	r0, #11
 8019da2:	b042      	add	sp, #264	@ 0x108
 8019da4:	bd70      	pop	{r4, r5, r6, pc}
 8019da6:	2ef5      	cmp	r6, #245	@ 0xf5
 8019da8:	d809      	bhi.n	8019dbe <rmw_validate_namespace_with_size+0x5a>
 8019daa:	2300      	movs	r3, #0
 8019dac:	6023      	str	r3, [r4, #0]
 8019dae:	2000      	movs	r0, #0
 8019db0:	e7f7      	b.n	8019da2 <rmw_validate_namespace_with_size+0x3e>
 8019db2:	6023      	str	r3, [r4, #0]
 8019db4:	2d00      	cmp	r5, #0
 8019db6:	d0fa      	beq.n	8019dae <rmw_validate_namespace_with_size+0x4a>
 8019db8:	9b01      	ldr	r3, [sp, #4]
 8019dba:	602b      	str	r3, [r5, #0]
 8019dbc:	e7f7      	b.n	8019dae <rmw_validate_namespace_with_size+0x4a>
 8019dbe:	2307      	movs	r3, #7
 8019dc0:	6023      	str	r3, [r4, #0]
 8019dc2:	2d00      	cmp	r5, #0
 8019dc4:	d0f3      	beq.n	8019dae <rmw_validate_namespace_with_size+0x4a>
 8019dc6:	23f4      	movs	r3, #244	@ 0xf4
 8019dc8:	602b      	str	r3, [r5, #0]
 8019dca:	e7f0      	b.n	8019dae <rmw_validate_namespace_with_size+0x4a>
 8019dcc:	200b      	movs	r0, #11
 8019dce:	4770      	bx	lr
 8019dd0:	4a03      	ldr	r2, [pc, #12]	@ (8019de0 <rmw_validate_namespace_with_size+0x7c>)
 8019dd2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8019dd6:	a802      	add	r0, sp, #8
 8019dd8:	f7ff fcca 	bl	8019770 <rcutils_snprintf>
 8019ddc:	2001      	movs	r0, #1
 8019dde:	e7e0      	b.n	8019da2 <rmw_validate_namespace_with_size+0x3e>
 8019de0:	080216e0 	.word	0x080216e0

08019de4 <rmw_validate_namespace>:
 8019de4:	b168      	cbz	r0, 8019e02 <rmw_validate_namespace+0x1e>
 8019de6:	b570      	push	{r4, r5, r6, lr}
 8019de8:	460d      	mov	r5, r1
 8019dea:	4616      	mov	r6, r2
 8019dec:	4604      	mov	r4, r0
 8019dee:	f7e6 fa77 	bl	80002e0 <strlen>
 8019df2:	4633      	mov	r3, r6
 8019df4:	4601      	mov	r1, r0
 8019df6:	462a      	mov	r2, r5
 8019df8:	4620      	mov	r0, r4
 8019dfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019dfe:	f7ff bfb1 	b.w	8019d64 <rmw_validate_namespace_with_size>
 8019e02:	200b      	movs	r0, #11
 8019e04:	4770      	bx	lr
 8019e06:	bf00      	nop

08019e08 <rmw_namespace_validation_result_string>:
 8019e08:	2807      	cmp	r0, #7
 8019e0a:	bf9a      	itte	ls
 8019e0c:	4b02      	ldrls	r3, [pc, #8]	@ (8019e18 <rmw_namespace_validation_result_string+0x10>)
 8019e0e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8019e12:	4802      	ldrhi	r0, [pc, #8]	@ (8019e1c <rmw_namespace_validation_result_string+0x14>)
 8019e14:	4770      	bx	lr
 8019e16:	bf00      	nop
 8019e18:	080218d8 	.word	0x080218d8
 8019e1c:	08021730 	.word	0x08021730

08019e20 <rmw_validate_node_name>:
 8019e20:	2800      	cmp	r0, #0
 8019e22:	d037      	beq.n	8019e94 <rmw_validate_node_name+0x74>
 8019e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e26:	460e      	mov	r6, r1
 8019e28:	2900      	cmp	r1, #0
 8019e2a:	d035      	beq.n	8019e98 <rmw_validate_node_name+0x78>
 8019e2c:	4617      	mov	r7, r2
 8019e2e:	4604      	mov	r4, r0
 8019e30:	f7e6 fa56 	bl	80002e0 <strlen>
 8019e34:	b1d8      	cbz	r0, 8019e6e <rmw_validate_node_name+0x4e>
 8019e36:	1e63      	subs	r3, r4, #1
 8019e38:	1819      	adds	r1, r3, r0
 8019e3a:	461a      	mov	r2, r3
 8019e3c:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8019e40:	f1ae 0530 	sub.w	r5, lr, #48	@ 0x30
 8019e44:	f02e 0c20 	bic.w	ip, lr, #32
 8019e48:	2d09      	cmp	r5, #9
 8019e4a:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8019e4e:	d915      	bls.n	8019e7c <rmw_validate_node_name+0x5c>
 8019e50:	f1bc 0f19 	cmp.w	ip, #25
 8019e54:	d912      	bls.n	8019e7c <rmw_validate_node_name+0x5c>
 8019e56:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8019e5a:	d00f      	beq.n	8019e7c <rmw_validate_node_name+0x5c>
 8019e5c:	2302      	movs	r3, #2
 8019e5e:	6033      	str	r3, [r6, #0]
 8019e60:	b11f      	cbz	r7, 8019e6a <rmw_validate_node_name+0x4a>
 8019e62:	f1c4 0401 	rsb	r4, r4, #1
 8019e66:	4414      	add	r4, r2
 8019e68:	603c      	str	r4, [r7, #0]
 8019e6a:	2000      	movs	r0, #0
 8019e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e6e:	2301      	movs	r3, #1
 8019e70:	6033      	str	r3, [r6, #0]
 8019e72:	2f00      	cmp	r7, #0
 8019e74:	d0f9      	beq.n	8019e6a <rmw_validate_node_name+0x4a>
 8019e76:	2300      	movs	r3, #0
 8019e78:	603b      	str	r3, [r7, #0]
 8019e7a:	e7f6      	b.n	8019e6a <rmw_validate_node_name+0x4a>
 8019e7c:	4299      	cmp	r1, r3
 8019e7e:	d1dc      	bne.n	8019e3a <rmw_validate_node_name+0x1a>
 8019e80:	7823      	ldrb	r3, [r4, #0]
 8019e82:	4a0c      	ldr	r2, [pc, #48]	@ (8019eb4 <rmw_validate_node_name+0x94>)
 8019e84:	5cd3      	ldrb	r3, [r2, r3]
 8019e86:	f013 0304 	ands.w	r3, r3, #4
 8019e8a:	d10e      	bne.n	8019eaa <rmw_validate_node_name+0x8a>
 8019e8c:	28ff      	cmp	r0, #255	@ 0xff
 8019e8e:	d805      	bhi.n	8019e9c <rmw_validate_node_name+0x7c>
 8019e90:	6033      	str	r3, [r6, #0]
 8019e92:	e7ea      	b.n	8019e6a <rmw_validate_node_name+0x4a>
 8019e94:	200b      	movs	r0, #11
 8019e96:	4770      	bx	lr
 8019e98:	200b      	movs	r0, #11
 8019e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e9c:	2304      	movs	r3, #4
 8019e9e:	6033      	str	r3, [r6, #0]
 8019ea0:	2f00      	cmp	r7, #0
 8019ea2:	d0e2      	beq.n	8019e6a <rmw_validate_node_name+0x4a>
 8019ea4:	23fe      	movs	r3, #254	@ 0xfe
 8019ea6:	603b      	str	r3, [r7, #0]
 8019ea8:	e7df      	b.n	8019e6a <rmw_validate_node_name+0x4a>
 8019eaa:	2303      	movs	r3, #3
 8019eac:	6033      	str	r3, [r6, #0]
 8019eae:	2f00      	cmp	r7, #0
 8019eb0:	d1e1      	bne.n	8019e76 <rmw_validate_node_name+0x56>
 8019eb2:	e7da      	b.n	8019e6a <rmw_validate_node_name+0x4a>
 8019eb4:	08021f44 	.word	0x08021f44

08019eb8 <rmw_node_name_validation_result_string>:
 8019eb8:	2804      	cmp	r0, #4
 8019eba:	bf9a      	itte	ls
 8019ebc:	4b02      	ldrls	r3, [pc, #8]	@ (8019ec8 <rmw_node_name_validation_result_string+0x10>)
 8019ebe:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8019ec2:	4802      	ldrhi	r0, [pc, #8]	@ (8019ecc <rmw_node_name_validation_result_string+0x14>)
 8019ec4:	4770      	bx	lr
 8019ec6:	bf00      	nop
 8019ec8:	080219e4 	.word	0x080219e4
 8019ecc:	080218f8 	.word	0x080218f8

08019ed0 <on_status>:
 8019ed0:	b082      	sub	sp, #8
 8019ed2:	b002      	add	sp, #8
 8019ed4:	4770      	bx	lr
 8019ed6:	bf00      	nop

08019ed8 <on_topic>:
 8019ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019edc:	4a22      	ldr	r2, [pc, #136]	@ (8019f68 <on_topic+0x90>)
 8019ede:	b094      	sub	sp, #80	@ 0x50
 8019ee0:	6812      	ldr	r2, [r2, #0]
 8019ee2:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8019ee4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8019ee8:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8019eec:	b3c2      	cbz	r2, 8019f60 <on_topic+0x88>
 8019eee:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8019ef2:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8019ef6:	e001      	b.n	8019efc <on_topic+0x24>
 8019ef8:	6852      	ldr	r2, [r2, #4]
 8019efa:	b38a      	cbz	r2, 8019f60 <on_topic+0x88>
 8019efc:	6894      	ldr	r4, [r2, #8]
 8019efe:	8aa3      	ldrh	r3, [r4, #20]
 8019f00:	428b      	cmp	r3, r1
 8019f02:	d1f9      	bne.n	8019ef8 <on_topic+0x20>
 8019f04:	7da3      	ldrb	r3, [r4, #22]
 8019f06:	4283      	cmp	r3, r0
 8019f08:	d1f6      	bne.n	8019ef8 <on_topic+0x20>
 8019f0a:	2248      	movs	r2, #72	@ 0x48
 8019f0c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8019f10:	4668      	mov	r0, sp
 8019f12:	f003 feec 	bl	801dcee <memcpy>
 8019f16:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8019f1a:	cb0c      	ldmia	r3, {r2, r3}
 8019f1c:	4620      	mov	r0, r4
 8019f1e:	f7f6 fc17 	bl	8010750 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019f22:	4607      	mov	r7, r0
 8019f24:	b1e0      	cbz	r0, 8019f60 <on_topic+0x88>
 8019f26:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8019f2a:	4632      	mov	r2, r6
 8019f2c:	4628      	mov	r0, r5
 8019f2e:	f108 0110 	add.w	r1, r8, #16
 8019f32:	f7f8 fd05 	bl	8012940 <ucdr_deserialize_array_uint8_t>
 8019f36:	b930      	cbnz	r0, 8019f46 <on_topic+0x6e>
 8019f38:	480c      	ldr	r0, [pc, #48]	@ (8019f6c <on_topic+0x94>)
 8019f3a:	4639      	mov	r1, r7
 8019f3c:	b014      	add	sp, #80	@ 0x50
 8019f3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019f42:	f000 b8bd 	b.w	801a0c0 <put_memory>
 8019f46:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8019f4a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8019f4e:	f7f6 f9fd 	bl	801034c <rmw_uros_epoch_nanos>
 8019f52:	2305      	movs	r3, #5
 8019f54:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8019f58:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019f5c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8019f60:	b014      	add	sp, #80	@ 0x50
 8019f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f66:	bf00      	nop
 8019f68:	2000d080 	.word	0x2000d080
 8019f6c:	2000c740 	.word	0x2000c740

08019f70 <on_request>:
 8019f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f74:	4823      	ldr	r0, [pc, #140]	@ (801a004 <on_request+0x94>)
 8019f76:	b094      	sub	sp, #80	@ 0x50
 8019f78:	6800      	ldr	r0, [r0, #0]
 8019f7a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8019f7c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8019f80:	9113      	str	r1, [sp, #76]	@ 0x4c
 8019f82:	2800      	cmp	r0, #0
 8019f84:	d03b      	beq.n	8019ffe <on_request+0x8e>
 8019f86:	461d      	mov	r5, r3
 8019f88:	e001      	b.n	8019f8e <on_request+0x1e>
 8019f8a:	6840      	ldr	r0, [r0, #4]
 8019f8c:	b3b8      	cbz	r0, 8019ffe <on_request+0x8e>
 8019f8e:	6884      	ldr	r4, [r0, #8]
 8019f90:	8b21      	ldrh	r1, [r4, #24]
 8019f92:	4291      	cmp	r1, r2
 8019f94:	d1f9      	bne.n	8019f8a <on_request+0x1a>
 8019f96:	2248      	movs	r2, #72	@ 0x48
 8019f98:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8019f9c:	4668      	mov	r0, sp
 8019f9e:	f003 fea6 	bl	801dcee <memcpy>
 8019fa2:	f104 0320 	add.w	r3, r4, #32
 8019fa6:	cb0c      	ldmia	r3, {r2, r3}
 8019fa8:	4620      	mov	r0, r4
 8019faa:	f7f6 fbd1 	bl	8010750 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019fae:	4680      	mov	r8, r0
 8019fb0:	b328      	cbz	r0, 8019ffe <on_request+0x8e>
 8019fb2:	4638      	mov	r0, r7
 8019fb4:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8019fb8:	4632      	mov	r2, r6
 8019fba:	f107 0110 	add.w	r1, r7, #16
 8019fbe:	f7f8 fcbf 	bl	8012940 <ucdr_deserialize_array_uint8_t>
 8019fc2:	b930      	cbnz	r0, 8019fd2 <on_request+0x62>
 8019fc4:	4810      	ldr	r0, [pc, #64]	@ (801a008 <on_request+0x98>)
 8019fc6:	4641      	mov	r1, r8
 8019fc8:	b014      	add	sp, #80	@ 0x50
 8019fca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019fce:	f000 b877 	b.w	801a0c0 <put_memory>
 8019fd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019fd4:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8019fd8:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8019fdc:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8019fe0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019fe4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019fe8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019fec:	f7f6 f9ae 	bl	801034c <rmw_uros_epoch_nanos>
 8019ff0:	2303      	movs	r3, #3
 8019ff2:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8019ff6:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019ffa:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8019ffe:	b014      	add	sp, #80	@ 0x50
 801a000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a004:	2000cc38 	.word	0x2000cc38
 801a008:	2000c740 	.word	0x2000c740

0801a00c <on_reply>:
 801a00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a010:	4821      	ldr	r0, [pc, #132]	@ (801a098 <on_reply+0x8c>)
 801a012:	b094      	sub	sp, #80	@ 0x50
 801a014:	6800      	ldr	r0, [r0, #0]
 801a016:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801a018:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801a01c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801a01e:	b3b8      	cbz	r0, 801a090 <on_reply+0x84>
 801a020:	461d      	mov	r5, r3
 801a022:	e001      	b.n	801a028 <on_reply+0x1c>
 801a024:	6840      	ldr	r0, [r0, #4]
 801a026:	b398      	cbz	r0, 801a090 <on_reply+0x84>
 801a028:	6884      	ldr	r4, [r0, #8]
 801a02a:	8b21      	ldrh	r1, [r4, #24]
 801a02c:	4291      	cmp	r1, r2
 801a02e:	d1f9      	bne.n	801a024 <on_reply+0x18>
 801a030:	2248      	movs	r2, #72	@ 0x48
 801a032:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801a036:	4668      	mov	r0, sp
 801a038:	f003 fe59 	bl	801dcee <memcpy>
 801a03c:	f104 0320 	add.w	r3, r4, #32
 801a040:	cb0c      	ldmia	r3, {r2, r3}
 801a042:	4620      	mov	r0, r4
 801a044:	f7f6 fb84 	bl	8010750 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a048:	4680      	mov	r8, r0
 801a04a:	b308      	cbz	r0, 801a090 <on_reply+0x84>
 801a04c:	4638      	mov	r0, r7
 801a04e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801a052:	4632      	mov	r2, r6
 801a054:	f107 0110 	add.w	r1, r7, #16
 801a058:	f7f8 fc72 	bl	8012940 <ucdr_deserialize_array_uint8_t>
 801a05c:	b930      	cbnz	r0, 801a06c <on_reply+0x60>
 801a05e:	480f      	ldr	r0, [pc, #60]	@ (801a09c <on_reply+0x90>)
 801a060:	4641      	mov	r1, r8
 801a062:	b014      	add	sp, #80	@ 0x50
 801a064:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a068:	f000 b82a 	b.w	801a0c0 <put_memory>
 801a06c:	2200      	movs	r2, #0
 801a06e:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801a072:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801a076:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801a07a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801a07e:	f7f6 f965 	bl	801034c <rmw_uros_epoch_nanos>
 801a082:	2304      	movs	r3, #4
 801a084:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801a088:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a08c:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801a090:	b014      	add	sp, #80	@ 0x50
 801a092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a096:	bf00      	nop
 801a098:	2000ca98 	.word	0x2000ca98
 801a09c:	2000c740 	.word	0x2000c740

0801a0a0 <get_memory>:
 801a0a0:	4603      	mov	r3, r0
 801a0a2:	6840      	ldr	r0, [r0, #4]
 801a0a4:	b158      	cbz	r0, 801a0be <get_memory+0x1e>
 801a0a6:	6842      	ldr	r2, [r0, #4]
 801a0a8:	605a      	str	r2, [r3, #4]
 801a0aa:	b10a      	cbz	r2, 801a0b0 <get_memory+0x10>
 801a0ac:	2100      	movs	r1, #0
 801a0ae:	6011      	str	r1, [r2, #0]
 801a0b0:	681a      	ldr	r2, [r3, #0]
 801a0b2:	6042      	str	r2, [r0, #4]
 801a0b4:	b102      	cbz	r2, 801a0b8 <get_memory+0x18>
 801a0b6:	6010      	str	r0, [r2, #0]
 801a0b8:	2200      	movs	r2, #0
 801a0ba:	6002      	str	r2, [r0, #0]
 801a0bc:	6018      	str	r0, [r3, #0]
 801a0be:	4770      	bx	lr

0801a0c0 <put_memory>:
 801a0c0:	680b      	ldr	r3, [r1, #0]
 801a0c2:	b10b      	cbz	r3, 801a0c8 <put_memory+0x8>
 801a0c4:	684a      	ldr	r2, [r1, #4]
 801a0c6:	605a      	str	r2, [r3, #4]
 801a0c8:	684a      	ldr	r2, [r1, #4]
 801a0ca:	b102      	cbz	r2, 801a0ce <put_memory+0xe>
 801a0cc:	6013      	str	r3, [r2, #0]
 801a0ce:	6803      	ldr	r3, [r0, #0]
 801a0d0:	428b      	cmp	r3, r1
 801a0d2:	6843      	ldr	r3, [r0, #4]
 801a0d4:	bf08      	it	eq
 801a0d6:	6002      	streq	r2, [r0, #0]
 801a0d8:	604b      	str	r3, [r1, #4]
 801a0da:	b103      	cbz	r3, 801a0de <put_memory+0x1e>
 801a0dc:	6019      	str	r1, [r3, #0]
 801a0de:	2300      	movs	r3, #0
 801a0e0:	600b      	str	r3, [r1, #0]
 801a0e2:	6041      	str	r1, [r0, #4]
 801a0e4:	4770      	bx	lr
 801a0e6:	bf00      	nop

0801a0e8 <rmw_destroy_client>:
 801a0e8:	b570      	push	{r4, r5, r6, lr}
 801a0ea:	b128      	cbz	r0, 801a0f8 <rmw_destroy_client+0x10>
 801a0ec:	4604      	mov	r4, r0
 801a0ee:	6800      	ldr	r0, [r0, #0]
 801a0f0:	460d      	mov	r5, r1
 801a0f2:	f7f6 fd4b 	bl	8010b8c <is_uxrce_rmw_identifier_valid>
 801a0f6:	b910      	cbnz	r0, 801a0fe <rmw_destroy_client+0x16>
 801a0f8:	2401      	movs	r4, #1
 801a0fa:	4620      	mov	r0, r4
 801a0fc:	bd70      	pop	{r4, r5, r6, pc}
 801a0fe:	6863      	ldr	r3, [r4, #4]
 801a100:	2b00      	cmp	r3, #0
 801a102:	d0f9      	beq.n	801a0f8 <rmw_destroy_client+0x10>
 801a104:	2d00      	cmp	r5, #0
 801a106:	d0f7      	beq.n	801a0f8 <rmw_destroy_client+0x10>
 801a108:	6828      	ldr	r0, [r5, #0]
 801a10a:	f7f6 fd3f 	bl	8010b8c <is_uxrce_rmw_identifier_valid>
 801a10e:	2800      	cmp	r0, #0
 801a110:	d0f2      	beq.n	801a0f8 <rmw_destroy_client+0x10>
 801a112:	686e      	ldr	r6, [r5, #4]
 801a114:	2e00      	cmp	r6, #0
 801a116:	d0ef      	beq.n	801a0f8 <rmw_destroy_client+0x10>
 801a118:	6864      	ldr	r4, [r4, #4]
 801a11a:	6932      	ldr	r2, [r6, #16]
 801a11c:	6920      	ldr	r0, [r4, #16]
 801a11e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801a122:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a126:	6819      	ldr	r1, [r3, #0]
 801a128:	f7f9 f818 	bl	801315c <uxr_buffer_cancel_data>
 801a12c:	4602      	mov	r2, r0
 801a12e:	6920      	ldr	r0, [r4, #16]
 801a130:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801a134:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801a138:	f7f6 fc08 	bl	801094c <run_xrce_session>
 801a13c:	6920      	ldr	r0, [r4, #16]
 801a13e:	6932      	ldr	r2, [r6, #16]
 801a140:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801a144:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a148:	6819      	ldr	r1, [r3, #0]
 801a14a:	f7f8 fd63 	bl	8012c14 <uxr_buffer_delete_entity>
 801a14e:	4602      	mov	r2, r0
 801a150:	6920      	ldr	r0, [r4, #16]
 801a152:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801a156:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801a15a:	f7f6 fbf7 	bl	801094c <run_xrce_session>
 801a15e:	f080 0401 	eor.w	r4, r0, #1
 801a162:	b2e4      	uxtb	r4, r4
 801a164:	4628      	mov	r0, r5
 801a166:	0064      	lsls	r4, r4, #1
 801a168:	f7f6 fad0 	bl	801070c <rmw_uxrce_fini_client_memory>
 801a16c:	e7c5      	b.n	801a0fa <rmw_destroy_client+0x12>
 801a16e:	bf00      	nop

0801a170 <rmw_get_gid_for_client>:
 801a170:	b1a8      	cbz	r0, 801a19e <rmw_get_gid_for_client+0x2e>
 801a172:	b538      	push	{r3, r4, r5, lr}
 801a174:	460c      	mov	r4, r1
 801a176:	b1a1      	cbz	r1, 801a1a2 <rmw_get_gid_for_client+0x32>
 801a178:	4605      	mov	r5, r0
 801a17a:	6800      	ldr	r0, [r0, #0]
 801a17c:	b120      	cbz	r0, 801a188 <rmw_get_gid_for_client+0x18>
 801a17e:	4b0a      	ldr	r3, [pc, #40]	@ (801a1a8 <rmw_get_gid_for_client+0x38>)
 801a180:	6819      	ldr	r1, [r3, #0]
 801a182:	f7e6 f84d 	bl	8000220 <strcmp>
 801a186:	b940      	cbnz	r0, 801a19a <rmw_get_gid_for_client+0x2a>
 801a188:	686b      	ldr	r3, [r5, #4]
 801a18a:	2000      	movs	r0, #0
 801a18c:	6060      	str	r0, [r4, #4]
 801a18e:	60a0      	str	r0, [r4, #8]
 801a190:	60e0      	str	r0, [r4, #12]
 801a192:	6120      	str	r0, [r4, #16]
 801a194:	691b      	ldr	r3, [r3, #16]
 801a196:	6063      	str	r3, [r4, #4]
 801a198:	bd38      	pop	{r3, r4, r5, pc}
 801a19a:	200c      	movs	r0, #12
 801a19c:	bd38      	pop	{r3, r4, r5, pc}
 801a19e:	200b      	movs	r0, #11
 801a1a0:	4770      	bx	lr
 801a1a2:	200b      	movs	r0, #11
 801a1a4:	bd38      	pop	{r3, r4, r5, pc}
 801a1a6:	bf00      	nop
 801a1a8:	08021a10 	.word	0x08021a10

0801a1ac <rmw_get_implementation_identifier>:
 801a1ac:	4b01      	ldr	r3, [pc, #4]	@ (801a1b4 <rmw_get_implementation_identifier+0x8>)
 801a1ae:	6818      	ldr	r0, [r3, #0]
 801a1b0:	4770      	bx	lr
 801a1b2:	bf00      	nop
 801a1b4:	08021a10 	.word	0x08021a10

0801a1b8 <create_topic>:
 801a1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1bc:	4604      	mov	r4, r0
 801a1be:	b084      	sub	sp, #16
 801a1c0:	4824      	ldr	r0, [pc, #144]	@ (801a254 <create_topic+0x9c>)
 801a1c2:	460f      	mov	r7, r1
 801a1c4:	4616      	mov	r6, r2
 801a1c6:	f7ff ff6b 	bl	801a0a0 <get_memory>
 801a1ca:	2800      	cmp	r0, #0
 801a1cc:	d03c      	beq.n	801a248 <create_topic+0x90>
 801a1ce:	6923      	ldr	r3, [r4, #16]
 801a1d0:	6885      	ldr	r5, [r0, #8]
 801a1d2:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 801a25c <create_topic+0xa4>
 801a1d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a1da:	e9c5 6405 	strd	r6, r4, [r5, #20]
 801a1de:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801a1e2:	1c42      	adds	r2, r0, #1
 801a1e4:	2102      	movs	r1, #2
 801a1e6:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801a1ea:	f7f8 ff51 	bl	8013090 <uxr_object_id>
 801a1ee:	223c      	movs	r2, #60	@ 0x3c
 801a1f0:	6128      	str	r0, [r5, #16]
 801a1f2:	4641      	mov	r1, r8
 801a1f4:	4638      	mov	r0, r7
 801a1f6:	f7f6 fcaf 	bl	8010b58 <generate_topic_name>
 801a1fa:	b310      	cbz	r0, 801a242 <create_topic+0x8a>
 801a1fc:	4f16      	ldr	r7, [pc, #88]	@ (801a258 <create_topic+0xa0>)
 801a1fe:	4630      	mov	r0, r6
 801a200:	2264      	movs	r2, #100	@ 0x64
 801a202:	4639      	mov	r1, r7
 801a204:	f7f6 fc78 	bl	8010af8 <generate_type_name>
 801a208:	b1d8      	cbz	r0, 801a242 <create_topic+0x8a>
 801a20a:	6920      	ldr	r0, [r4, #16]
 801a20c:	2306      	movs	r3, #6
 801a20e:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801a212:	f8cd 8000 	str.w	r8, [sp]
 801a216:	e9cd 7301 	strd	r7, r3, [sp, #4]
 801a21a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a21e:	6811      	ldr	r1, [r2, #0]
 801a220:	6963      	ldr	r3, [r4, #20]
 801a222:	692a      	ldr	r2, [r5, #16]
 801a224:	f7f8 fd72 	bl	8012d0c <uxr_buffer_create_topic_bin>
 801a228:	4602      	mov	r2, r0
 801a22a:	6920      	ldr	r0, [r4, #16]
 801a22c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801a230:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801a234:	f7f6 fb8a 	bl	801094c <run_xrce_session>
 801a238:	b118      	cbz	r0, 801a242 <create_topic+0x8a>
 801a23a:	4628      	mov	r0, r5
 801a23c:	b004      	add	sp, #16
 801a23e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a242:	4628      	mov	r0, r5
 801a244:	f7f6 fa78 	bl	8010738 <rmw_uxrce_fini_topic_memory>
 801a248:	2500      	movs	r5, #0
 801a24a:	4628      	mov	r0, r5
 801a24c:	b004      	add	sp, #16
 801a24e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a252:	bf00      	nop
 801a254:	2000c8f4 	.word	0x2000c8f4
 801a258:	2000f43c 	.word	0x2000f43c
 801a25c:	2000f4a0 	.word	0x2000f4a0

0801a260 <destroy_topic>:
 801a260:	b538      	push	{r3, r4, r5, lr}
 801a262:	6984      	ldr	r4, [r0, #24]
 801a264:	b1d4      	cbz	r4, 801a29c <destroy_topic+0x3c>
 801a266:	4605      	mov	r5, r0
 801a268:	6920      	ldr	r0, [r4, #16]
 801a26a:	692a      	ldr	r2, [r5, #16]
 801a26c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801a270:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a274:	6819      	ldr	r1, [r3, #0]
 801a276:	f7f8 fccd 	bl	8012c14 <uxr_buffer_delete_entity>
 801a27a:	4602      	mov	r2, r0
 801a27c:	6920      	ldr	r0, [r4, #16]
 801a27e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801a282:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801a286:	f7f6 fb61 	bl	801094c <run_xrce_session>
 801a28a:	f080 0401 	eor.w	r4, r0, #1
 801a28e:	b2e4      	uxtb	r4, r4
 801a290:	4628      	mov	r0, r5
 801a292:	0064      	lsls	r4, r4, #1
 801a294:	f7f6 fa50 	bl	8010738 <rmw_uxrce_fini_topic_memory>
 801a298:	4620      	mov	r0, r4
 801a29a:	bd38      	pop	{r3, r4, r5, pc}
 801a29c:	2401      	movs	r4, #1
 801a29e:	4620      	mov	r0, r4
 801a2a0:	bd38      	pop	{r3, r4, r5, pc}
 801a2a2:	bf00      	nop

0801a2a4 <rmw_send_request>:
 801a2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2a8:	4604      	mov	r4, r0
 801a2aa:	6800      	ldr	r0, [r0, #0]
 801a2ac:	b08a      	sub	sp, #40	@ 0x28
 801a2ae:	460e      	mov	r6, r1
 801a2b0:	4615      	mov	r5, r2
 801a2b2:	b128      	cbz	r0, 801a2c0 <rmw_send_request+0x1c>
 801a2b4:	4b1e      	ldr	r3, [pc, #120]	@ (801a330 <rmw_send_request+0x8c>)
 801a2b6:	6819      	ldr	r1, [r3, #0]
 801a2b8:	f7e5 ffb2 	bl	8000220 <strcmp>
 801a2bc:	2800      	cmp	r0, #0
 801a2be:	d133      	bne.n	801a328 <rmw_send_request+0x84>
 801a2c0:	6864      	ldr	r4, [r4, #4]
 801a2c2:	6963      	ldr	r3, [r4, #20]
 801a2c4:	6fa7      	ldr	r7, [r4, #120]	@ 0x78
 801a2c6:	689b      	ldr	r3, [r3, #8]
 801a2c8:	4798      	blx	r3
 801a2ca:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801a2ce:	4630      	mov	r0, r6
 801a2d0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801a2d4:	4798      	blx	r3
 801a2d6:	693b      	ldr	r3, [r7, #16]
 801a2d8:	9000      	str	r0, [sp, #0]
 801a2da:	6922      	ldr	r2, [r4, #16]
 801a2dc:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801a2de:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801a2e2:	ab02      	add	r3, sp, #8
 801a2e4:	f7fa ff76 	bl	80151d4 <uxr_prepare_output_stream>
 801a2e8:	2300      	movs	r3, #0
 801a2ea:	6028      	str	r0, [r5, #0]
 801a2ec:	606b      	str	r3, [r5, #4]
 801a2ee:	b190      	cbz	r0, 801a316 <rmw_send_request+0x72>
 801a2f0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a2f4:	a902      	add	r1, sp, #8
 801a2f6:	4630      	mov	r0, r6
 801a2f8:	4798      	blx	r3
 801a2fa:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801a2fe:	6938      	ldr	r0, [r7, #16]
 801a300:	2b01      	cmp	r3, #1
 801a302:	d00c      	beq.n	801a31e <rmw_send_request+0x7a>
 801a304:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801a306:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a30a:	f7f9 fccf 	bl	8013cac <uxr_run_session_until_confirm_delivery>
 801a30e:	2000      	movs	r0, #0
 801a310:	b00a      	add	sp, #40	@ 0x28
 801a312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a316:	2001      	movs	r0, #1
 801a318:	b00a      	add	sp, #40	@ 0x28
 801a31a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a31e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a322:	f7f9 f92b 	bl	801357c <uxr_flash_output_streams>
 801a326:	e7f2      	b.n	801a30e <rmw_send_request+0x6a>
 801a328:	200c      	movs	r0, #12
 801a32a:	b00a      	add	sp, #40	@ 0x28
 801a32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a330:	08021a10 	.word	0x08021a10

0801a334 <rmw_take_request>:
 801a334:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a338:	4605      	mov	r5, r0
 801a33a:	6800      	ldr	r0, [r0, #0]
 801a33c:	b089      	sub	sp, #36	@ 0x24
 801a33e:	460c      	mov	r4, r1
 801a340:	4690      	mov	r8, r2
 801a342:	461e      	mov	r6, r3
 801a344:	b128      	cbz	r0, 801a352 <rmw_take_request+0x1e>
 801a346:	4b28      	ldr	r3, [pc, #160]	@ (801a3e8 <rmw_take_request+0xb4>)
 801a348:	6819      	ldr	r1, [r3, #0]
 801a34a:	f7e5 ff69 	bl	8000220 <strcmp>
 801a34e:	2800      	cmp	r0, #0
 801a350:	d146      	bne.n	801a3e0 <rmw_take_request+0xac>
 801a352:	b10e      	cbz	r6, 801a358 <rmw_take_request+0x24>
 801a354:	2300      	movs	r3, #0
 801a356:	7033      	strb	r3, [r6, #0]
 801a358:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801a35c:	f7f6 fa78 	bl	8010850 <rmw_uxrce_clean_expired_static_input_buffer>
 801a360:	4648      	mov	r0, r9
 801a362:	f7f6 fa4d 	bl	8010800 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a366:	4607      	mov	r7, r0
 801a368:	b3b0      	cbz	r0, 801a3d8 <rmw_take_request+0xa4>
 801a36a:	6885      	ldr	r5, [r0, #8]
 801a36c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 801a370:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 801a374:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801a378:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801a37c:	7423      	strb	r3, [r4, #16]
 801a37e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801a382:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 801a386:	74e2      	strb	r2, [r4, #19]
 801a388:	f8a4 3011 	strh.w	r3, [r4, #17]
 801a38c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 801a390:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 801a394:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 801a398:	61e1      	str	r1, [r4, #28]
 801a39a:	6162      	str	r2, [r4, #20]
 801a39c:	61a3      	str	r3, [r4, #24]
 801a39e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801a3a2:	689b      	ldr	r3, [r3, #8]
 801a3a4:	4798      	blx	r3
 801a3a6:	6844      	ldr	r4, [r0, #4]
 801a3a8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801a3ac:	f105 0110 	add.w	r1, r5, #16
 801a3b0:	4668      	mov	r0, sp
 801a3b2:	f7f3 fe55 	bl	800e060 <ucdr_init_buffer>
 801a3b6:	68e3      	ldr	r3, [r4, #12]
 801a3b8:	4641      	mov	r1, r8
 801a3ba:	4668      	mov	r0, sp
 801a3bc:	4798      	blx	r3
 801a3be:	4639      	mov	r1, r7
 801a3c0:	4604      	mov	r4, r0
 801a3c2:	480a      	ldr	r0, [pc, #40]	@ (801a3ec <rmw_take_request+0xb8>)
 801a3c4:	f7ff fe7c 	bl	801a0c0 <put_memory>
 801a3c8:	b106      	cbz	r6, 801a3cc <rmw_take_request+0x98>
 801a3ca:	7034      	strb	r4, [r6, #0]
 801a3cc:	f084 0001 	eor.w	r0, r4, #1
 801a3d0:	b2c0      	uxtb	r0, r0
 801a3d2:	b009      	add	sp, #36	@ 0x24
 801a3d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a3d8:	2001      	movs	r0, #1
 801a3da:	b009      	add	sp, #36	@ 0x24
 801a3dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a3e0:	200c      	movs	r0, #12
 801a3e2:	b009      	add	sp, #36	@ 0x24
 801a3e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a3e8:	08021a10 	.word	0x08021a10
 801a3ec:	2000c740 	.word	0x2000c740

0801a3f0 <rmw_send_response>:
 801a3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a3f2:	4605      	mov	r5, r0
 801a3f4:	6800      	ldr	r0, [r0, #0]
 801a3f6:	b091      	sub	sp, #68	@ 0x44
 801a3f8:	460c      	mov	r4, r1
 801a3fa:	4616      	mov	r6, r2
 801a3fc:	b128      	cbz	r0, 801a40a <rmw_send_response+0x1a>
 801a3fe:	4b28      	ldr	r3, [pc, #160]	@ (801a4a0 <rmw_send_response+0xb0>)
 801a400:	6819      	ldr	r1, [r3, #0]
 801a402:	f7e5 ff0d 	bl	8000220 <strcmp>
 801a406:	2800      	cmp	r0, #0
 801a408:	d141      	bne.n	801a48e <rmw_send_response+0x9e>
 801a40a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801a40e:	9306      	str	r3, [sp, #24]
 801a410:	4623      	mov	r3, r4
 801a412:	9207      	str	r2, [sp, #28]
 801a414:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a418:	686d      	ldr	r5, [r5, #4]
 801a41a:	789b      	ldrb	r3, [r3, #2]
 801a41c:	68a1      	ldr	r1, [r4, #8]
 801a41e:	f88d 2017 	strb.w	r2, [sp, #23]
 801a422:	f88d 3016 	strb.w	r3, [sp, #22]
 801a426:	68e2      	ldr	r2, [r4, #12]
 801a428:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801a42c:	6860      	ldr	r0, [r4, #4]
 801a42e:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a432:	ab02      	add	r3, sp, #8
 801a434:	c307      	stmia	r3!, {r0, r1, r2}
 801a436:	696b      	ldr	r3, [r5, #20]
 801a438:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801a43a:	68db      	ldr	r3, [r3, #12]
 801a43c:	4798      	blx	r3
 801a43e:	6844      	ldr	r4, [r0, #4]
 801a440:	4630      	mov	r0, r6
 801a442:	6923      	ldr	r3, [r4, #16]
 801a444:	4798      	blx	r3
 801a446:	f100 0318 	add.w	r3, r0, #24
 801a44a:	6938      	ldr	r0, [r7, #16]
 801a44c:	9300      	str	r3, [sp, #0]
 801a44e:	692a      	ldr	r2, [r5, #16]
 801a450:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801a452:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a456:	ab08      	add	r3, sp, #32
 801a458:	f7fa febc 	bl	80151d4 <uxr_prepare_output_stream>
 801a45c:	b910      	cbnz	r0, 801a464 <rmw_send_response+0x74>
 801a45e:	2001      	movs	r0, #1
 801a460:	b011      	add	sp, #68	@ 0x44
 801a462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a464:	a902      	add	r1, sp, #8
 801a466:	a808      	add	r0, sp, #32
 801a468:	f7fb ff14 	bl	8016294 <uxr_serialize_SampleIdentity>
 801a46c:	68a3      	ldr	r3, [r4, #8]
 801a46e:	a908      	add	r1, sp, #32
 801a470:	4630      	mov	r0, r6
 801a472:	4798      	blx	r3
 801a474:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 801a478:	6938      	ldr	r0, [r7, #16]
 801a47a:	2b01      	cmp	r3, #1
 801a47c:	d00a      	beq.n	801a494 <rmw_send_response+0xa4>
 801a47e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 801a480:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a484:	f7f9 fc12 	bl	8013cac <uxr_run_session_until_confirm_delivery>
 801a488:	2000      	movs	r0, #0
 801a48a:	b011      	add	sp, #68	@ 0x44
 801a48c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a48e:	200c      	movs	r0, #12
 801a490:	b011      	add	sp, #68	@ 0x44
 801a492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a494:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a498:	f7f9 f870 	bl	801357c <uxr_flash_output_streams>
 801a49c:	e7f4      	b.n	801a488 <rmw_send_response+0x98>
 801a49e:	bf00      	nop
 801a4a0:	08021a10 	.word	0x08021a10

0801a4a4 <rmw_take_response>:
 801a4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4a8:	4604      	mov	r4, r0
 801a4aa:	6800      	ldr	r0, [r0, #0]
 801a4ac:	b088      	sub	sp, #32
 801a4ae:	4688      	mov	r8, r1
 801a4b0:	4617      	mov	r7, r2
 801a4b2:	461d      	mov	r5, r3
 801a4b4:	b120      	cbz	r0, 801a4c0 <rmw_take_response+0x1c>
 801a4b6:	4b1e      	ldr	r3, [pc, #120]	@ (801a530 <rmw_take_response+0x8c>)
 801a4b8:	6819      	ldr	r1, [r3, #0]
 801a4ba:	f7e5 feb1 	bl	8000220 <strcmp>
 801a4be:	bb78      	cbnz	r0, 801a520 <rmw_take_response+0x7c>
 801a4c0:	b10d      	cbz	r5, 801a4c6 <rmw_take_response+0x22>
 801a4c2:	2300      	movs	r3, #0
 801a4c4:	702b      	strb	r3, [r5, #0]
 801a4c6:	6864      	ldr	r4, [r4, #4]
 801a4c8:	f7f6 f9c2 	bl	8010850 <rmw_uxrce_clean_expired_static_input_buffer>
 801a4cc:	4620      	mov	r0, r4
 801a4ce:	f7f6 f997 	bl	8010800 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a4d2:	4606      	mov	r6, r0
 801a4d4:	b340      	cbz	r0, 801a528 <rmw_take_response+0x84>
 801a4d6:	6963      	ldr	r3, [r4, #20]
 801a4d8:	6884      	ldr	r4, [r0, #8]
 801a4da:	68db      	ldr	r3, [r3, #12]
 801a4dc:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 801a4e0:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801a4e4:	e9c8 0108 	strd	r0, r1, [r8, #32]
 801a4e8:	4798      	blx	r3
 801a4ea:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801a4ee:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 801a4f2:	f104 0110 	add.w	r1, r4, #16
 801a4f6:	4668      	mov	r0, sp
 801a4f8:	f7f3 fdb2 	bl	800e060 <ucdr_init_buffer>
 801a4fc:	4639      	mov	r1, r7
 801a4fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801a502:	4668      	mov	r0, sp
 801a504:	4798      	blx	r3
 801a506:	4631      	mov	r1, r6
 801a508:	4604      	mov	r4, r0
 801a50a:	480a      	ldr	r0, [pc, #40]	@ (801a534 <rmw_take_response+0x90>)
 801a50c:	f7ff fdd8 	bl	801a0c0 <put_memory>
 801a510:	b105      	cbz	r5, 801a514 <rmw_take_response+0x70>
 801a512:	702c      	strb	r4, [r5, #0]
 801a514:	f084 0001 	eor.w	r0, r4, #1
 801a518:	b2c0      	uxtb	r0, r0
 801a51a:	b008      	add	sp, #32
 801a51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a520:	200c      	movs	r0, #12
 801a522:	b008      	add	sp, #32
 801a524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a528:	2001      	movs	r0, #1
 801a52a:	b008      	add	sp, #32
 801a52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a530:	08021a10 	.word	0x08021a10
 801a534:	2000c740 	.word	0x2000c740

0801a538 <rmw_take_with_info>:
 801a538:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a53a:	4604      	mov	r4, r0
 801a53c:	6800      	ldr	r0, [r0, #0]
 801a53e:	b089      	sub	sp, #36	@ 0x24
 801a540:	460f      	mov	r7, r1
 801a542:	4615      	mov	r5, r2
 801a544:	b128      	cbz	r0, 801a552 <rmw_take_with_info+0x1a>
 801a546:	4b23      	ldr	r3, [pc, #140]	@ (801a5d4 <rmw_take_with_info+0x9c>)
 801a548:	6819      	ldr	r1, [r3, #0]
 801a54a:	f7e5 fe69 	bl	8000220 <strcmp>
 801a54e:	2800      	cmp	r0, #0
 801a550:	d13d      	bne.n	801a5ce <rmw_take_with_info+0x96>
 801a552:	6864      	ldr	r4, [r4, #4]
 801a554:	b1fd      	cbz	r5, 801a596 <rmw_take_with_info+0x5e>
 801a556:	2300      	movs	r3, #0
 801a558:	702b      	strb	r3, [r5, #0]
 801a55a:	f7f6 f979 	bl	8010850 <rmw_uxrce_clean_expired_static_input_buffer>
 801a55e:	4620      	mov	r0, r4
 801a560:	f7f6 f94e 	bl	8010800 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a564:	4606      	mov	r6, r0
 801a566:	b1e8      	cbz	r0, 801a5a4 <rmw_take_with_info+0x6c>
 801a568:	6881      	ldr	r1, [r0, #8]
 801a56a:	4668      	mov	r0, sp
 801a56c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801a570:	3110      	adds	r1, #16
 801a572:	f7f3 fd75 	bl	800e060 <ucdr_init_buffer>
 801a576:	69a3      	ldr	r3, [r4, #24]
 801a578:	4639      	mov	r1, r7
 801a57a:	68db      	ldr	r3, [r3, #12]
 801a57c:	4668      	mov	r0, sp
 801a57e:	4798      	blx	r3
 801a580:	4631      	mov	r1, r6
 801a582:	4604      	mov	r4, r0
 801a584:	4814      	ldr	r0, [pc, #80]	@ (801a5d8 <rmw_take_with_info+0xa0>)
 801a586:	f7ff fd9b 	bl	801a0c0 <put_memory>
 801a58a:	702c      	strb	r4, [r5, #0]
 801a58c:	f084 0001 	eor.w	r0, r4, #1
 801a590:	b2c0      	uxtb	r0, r0
 801a592:	b009      	add	sp, #36	@ 0x24
 801a594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a596:	f7f6 f95b 	bl	8010850 <rmw_uxrce_clean_expired_static_input_buffer>
 801a59a:	4620      	mov	r0, r4
 801a59c:	f7f6 f930 	bl	8010800 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a5a0:	4605      	mov	r5, r0
 801a5a2:	b910      	cbnz	r0, 801a5aa <rmw_take_with_info+0x72>
 801a5a4:	2001      	movs	r0, #1
 801a5a6:	b009      	add	sp, #36	@ 0x24
 801a5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a5aa:	68a9      	ldr	r1, [r5, #8]
 801a5ac:	4668      	mov	r0, sp
 801a5ae:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801a5b2:	3110      	adds	r1, #16
 801a5b4:	f7f3 fd54 	bl	800e060 <ucdr_init_buffer>
 801a5b8:	69a3      	ldr	r3, [r4, #24]
 801a5ba:	4639      	mov	r1, r7
 801a5bc:	68db      	ldr	r3, [r3, #12]
 801a5be:	4668      	mov	r0, sp
 801a5c0:	4798      	blx	r3
 801a5c2:	4629      	mov	r1, r5
 801a5c4:	4604      	mov	r4, r0
 801a5c6:	4804      	ldr	r0, [pc, #16]	@ (801a5d8 <rmw_take_with_info+0xa0>)
 801a5c8:	f7ff fd7a 	bl	801a0c0 <put_memory>
 801a5cc:	e7de      	b.n	801a58c <rmw_take_with_info+0x54>
 801a5ce:	200c      	movs	r0, #12
 801a5d0:	b009      	add	sp, #36	@ 0x24
 801a5d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a5d4:	08021a10 	.word	0x08021a10
 801a5d8:	2000c740 	.word	0x2000c740

0801a5dc <rmw_wait>:
 801a5dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a5e0:	b089      	sub	sp, #36	@ 0x24
 801a5e2:	4607      	mov	r7, r0
 801a5e4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801a5e6:	460e      	mov	r6, r1
 801a5e8:	4698      	mov	r8, r3
 801a5ea:	4691      	mov	r9, r2
 801a5ec:	2a00      	cmp	r2, #0
 801a5ee:	f000 811e 	beq.w	801a82e <rmw_wait+0x252>
 801a5f2:	2c00      	cmp	r4, #0
 801a5f4:	f000 80ef 	beq.w	801a7d6 <rmw_wait+0x1fa>
 801a5f8:	4bb5      	ldr	r3, [pc, #724]	@ (801a8d0 <rmw_wait+0x2f4>)
 801a5fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a5fc:	ad04      	add	r5, sp, #16
 801a5fe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801a602:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801a606:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801a60a:	f7ff faa5 	bl	8019b58 <rmw_time_equal>
 801a60e:	2800      	cmp	r0, #0
 801a610:	f000 811b 	beq.w	801a84a <rmw_wait+0x26e>
 801a614:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801a618:	f7f6 f91a 	bl	8010850 <rmw_uxrce_clean_expired_static_input_buffer>
 801a61c:	4bad      	ldr	r3, [pc, #692]	@ (801a8d4 <rmw_wait+0x2f8>)
 801a61e:	681c      	ldr	r4, [r3, #0]
 801a620:	b14c      	cbz	r4, 801a636 <rmw_wait+0x5a>
 801a622:	4623      	mov	r3, r4
 801a624:	2100      	movs	r1, #0
 801a626:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801a62a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a62e:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801a632:	2b00      	cmp	r3, #0
 801a634:	d1f7      	bne.n	801a626 <rmw_wait+0x4a>
 801a636:	f1b9 0f00 	cmp.w	r9, #0
 801a63a:	d011      	beq.n	801a660 <rmw_wait+0x84>
 801a63c:	f8d9 1000 	ldr.w	r1, [r9]
 801a640:	b171      	cbz	r1, 801a660 <rmw_wait+0x84>
 801a642:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801a646:	2300      	movs	r3, #0
 801a648:	2001      	movs	r0, #1
 801a64a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801a64e:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801a650:	6912      	ldr	r2, [r2, #16]
 801a652:	3301      	adds	r3, #1
 801a654:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a658:	4299      	cmp	r1, r3
 801a65a:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801a65e:	d1f4      	bne.n	801a64a <rmw_wait+0x6e>
 801a660:	f1b8 0f00 	cmp.w	r8, #0
 801a664:	f000 8109 	beq.w	801a87a <rmw_wait+0x29e>
 801a668:	f8d8 1000 	ldr.w	r1, [r8]
 801a66c:	2900      	cmp	r1, #0
 801a66e:	f000 8116 	beq.w	801a89e <rmw_wait+0x2c2>
 801a672:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801a676:	2300      	movs	r3, #0
 801a678:	2001      	movs	r0, #1
 801a67a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801a67e:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801a680:	6912      	ldr	r2, [r2, #16]
 801a682:	3301      	adds	r3, #1
 801a684:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a688:	4299      	cmp	r1, r3
 801a68a:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801a68e:	d1f4      	bne.n	801a67a <rmw_wait+0x9e>
 801a690:	2f00      	cmp	r7, #0
 801a692:	f000 8114 	beq.w	801a8be <rmw_wait+0x2e2>
 801a696:	6839      	ldr	r1, [r7, #0]
 801a698:	b171      	cbz	r1, 801a6b8 <rmw_wait+0xdc>
 801a69a:	f8d7 c004 	ldr.w	ip, [r7, #4]
 801a69e:	2300      	movs	r3, #0
 801a6a0:	2001      	movs	r0, #1
 801a6a2:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801a6a6:	6a12      	ldr	r2, [r2, #32]
 801a6a8:	6912      	ldr	r2, [r2, #16]
 801a6aa:	3301      	adds	r3, #1
 801a6ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a6b0:	4299      	cmp	r1, r3
 801a6b2:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801a6b6:	d1f4      	bne.n	801a6a2 <rmw_wait+0xc6>
 801a6b8:	b344      	cbz	r4, 801a70c <rmw_wait+0x130>
 801a6ba:	4622      	mov	r2, r4
 801a6bc:	2300      	movs	r3, #0
 801a6be:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801a6c2:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 801a6c6:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801a6ca:	440b      	add	r3, r1
 801a6cc:	b2db      	uxtb	r3, r3
 801a6ce:	2a00      	cmp	r2, #0
 801a6d0:	d1f5      	bne.n	801a6be <rmw_wait+0xe2>
 801a6d2:	2b00      	cmp	r3, #0
 801a6d4:	d075      	beq.n	801a7c2 <rmw_wait+0x1e6>
 801a6d6:	1c6a      	adds	r2, r5, #1
 801a6d8:	d00d      	beq.n	801a6f6 <rmw_wait+0x11a>
 801a6da:	ee07 5a90 	vmov	s15, r5
 801a6de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801a6e2:	ee07 3a90 	vmov	s15, r3
 801a6e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a6ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801a6ee:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801a6f2:	ee17 5a90 	vmov	r5, s15
 801a6f6:	68a0      	ldr	r0, [r4, #8]
 801a6f8:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801a6fc:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801a700:	2b00      	cmp	r3, #0
 801a702:	f040 808a 	bne.w	801a81a <rmw_wait+0x23e>
 801a706:	6864      	ldr	r4, [r4, #4]
 801a708:	2c00      	cmp	r4, #0
 801a70a:	d1f4      	bne.n	801a6f6 <rmw_wait+0x11a>
 801a70c:	f1b9 0f00 	cmp.w	r9, #0
 801a710:	f000 80c3 	beq.w	801a89a <rmw_wait+0x2be>
 801a714:	f8d9 5000 	ldr.w	r5, [r9]
 801a718:	b185      	cbz	r5, 801a73c <rmw_wait+0x160>
 801a71a:	2400      	movs	r4, #0
 801a71c:	4625      	mov	r5, r4
 801a71e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801a722:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a726:	f7f6 f86b 	bl	8010800 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a72a:	2800      	cmp	r0, #0
 801a72c:	d06d      	beq.n	801a80a <rmw_wait+0x22e>
 801a72e:	f8d9 3000 	ldr.w	r3, [r9]
 801a732:	3401      	adds	r4, #1
 801a734:	42a3      	cmp	r3, r4
 801a736:	f04f 0501 	mov.w	r5, #1
 801a73a:	d8f0      	bhi.n	801a71e <rmw_wait+0x142>
 801a73c:	f1b8 0f00 	cmp.w	r8, #0
 801a740:	d012      	beq.n	801a768 <rmw_wait+0x18c>
 801a742:	f8d8 1000 	ldr.w	r1, [r8]
 801a746:	2400      	movs	r4, #0
 801a748:	b171      	cbz	r1, 801a768 <rmw_wait+0x18c>
 801a74a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801a74e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a752:	f7f6 f855 	bl	8010800 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a756:	2800      	cmp	r0, #0
 801a758:	d047      	beq.n	801a7ea <rmw_wait+0x20e>
 801a75a:	f8d8 3000 	ldr.w	r3, [r8]
 801a75e:	3401      	adds	r4, #1
 801a760:	42a3      	cmp	r3, r4
 801a762:	f04f 0501 	mov.w	r5, #1
 801a766:	d8f0      	bhi.n	801a74a <rmw_wait+0x16e>
 801a768:	b17f      	cbz	r7, 801a78a <rmw_wait+0x1ae>
 801a76a:	683b      	ldr	r3, [r7, #0]
 801a76c:	2400      	movs	r4, #0
 801a76e:	b163      	cbz	r3, 801a78a <rmw_wait+0x1ae>
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a776:	f7f6 f843 	bl	8010800 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a77a:	2800      	cmp	r0, #0
 801a77c:	d03d      	beq.n	801a7fa <rmw_wait+0x21e>
 801a77e:	683b      	ldr	r3, [r7, #0]
 801a780:	3401      	adds	r4, #1
 801a782:	42a3      	cmp	r3, r4
 801a784:	f04f 0501 	mov.w	r5, #1
 801a788:	d8f2      	bhi.n	801a770 <rmw_wait+0x194>
 801a78a:	b1a6      	cbz	r6, 801a7b6 <rmw_wait+0x1da>
 801a78c:	6834      	ldr	r4, [r6, #0]
 801a78e:	b194      	cbz	r4, 801a7b6 <rmw_wait+0x1da>
 801a790:	2300      	movs	r3, #0
 801a792:	461f      	mov	r7, r3
 801a794:	e004      	b.n	801a7a0 <rmw_wait+0x1c4>
 801a796:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801a79a:	3301      	adds	r3, #1
 801a79c:	429c      	cmp	r4, r3
 801a79e:	d00a      	beq.n	801a7b6 <rmw_wait+0x1da>
 801a7a0:	6870      	ldr	r0, [r6, #4]
 801a7a2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801a7a6:	7c0a      	ldrb	r2, [r1, #16]
 801a7a8:	2a00      	cmp	r2, #0
 801a7aa:	d0f4      	beq.n	801a796 <rmw_wait+0x1ba>
 801a7ac:	3301      	adds	r3, #1
 801a7ae:	429c      	cmp	r4, r3
 801a7b0:	740f      	strb	r7, [r1, #16]
 801a7b2:	4615      	mov	r5, r2
 801a7b4:	d1f4      	bne.n	801a7a0 <rmw_wait+0x1c4>
 801a7b6:	f085 0001 	eor.w	r0, r5, #1
 801a7ba:	0040      	lsls	r0, r0, #1
 801a7bc:	b009      	add	sp, #36	@ 0x24
 801a7be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a7c2:	68a0      	ldr	r0, [r4, #8]
 801a7c4:	2100      	movs	r1, #0
 801a7c6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a7ca:	f7f9 fa35 	bl	8013c38 <uxr_run_session_timeout>
 801a7ce:	6864      	ldr	r4, [r4, #4]
 801a7d0:	2c00      	cmp	r4, #0
 801a7d2:	d1f6      	bne.n	801a7c2 <rmw_wait+0x1e6>
 801a7d4:	e79a      	b.n	801a70c <rmw_wait+0x130>
 801a7d6:	f7f6 f83b 	bl	8010850 <rmw_uxrce_clean_expired_static_input_buffer>
 801a7da:	4b3e      	ldr	r3, [pc, #248]	@ (801a8d4 <rmw_wait+0x2f8>)
 801a7dc:	681c      	ldr	r4, [r3, #0]
 801a7de:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801a7e2:	2c00      	cmp	r4, #0
 801a7e4:	f47f af1d 	bne.w	801a622 <rmw_wait+0x46>
 801a7e8:	e728      	b.n	801a63c <rmw_wait+0x60>
 801a7ea:	e9d8 3200 	ldrd	r3, r2, [r8]
 801a7ee:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801a7f2:	3401      	adds	r4, #1
 801a7f4:	429c      	cmp	r4, r3
 801a7f6:	d3a8      	bcc.n	801a74a <rmw_wait+0x16e>
 801a7f8:	e7b6      	b.n	801a768 <rmw_wait+0x18c>
 801a7fa:	e9d7 3200 	ldrd	r3, r2, [r7]
 801a7fe:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801a802:	3401      	adds	r4, #1
 801a804:	42a3      	cmp	r3, r4
 801a806:	d8b3      	bhi.n	801a770 <rmw_wait+0x194>
 801a808:	e7bf      	b.n	801a78a <rmw_wait+0x1ae>
 801a80a:	e9d9 3200 	ldrd	r3, r2, [r9]
 801a80e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801a812:	3401      	adds	r4, #1
 801a814:	42a3      	cmp	r3, r4
 801a816:	d882      	bhi.n	801a71e <rmw_wait+0x142>
 801a818:	e790      	b.n	801a73c <rmw_wait+0x160>
 801a81a:	4629      	mov	r1, r5
 801a81c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a820:	f7f9 fa24 	bl	8013c6c <uxr_run_session_until_data>
 801a824:	6864      	ldr	r4, [r4, #4]
 801a826:	2c00      	cmp	r4, #0
 801a828:	f47f af65 	bne.w	801a6f6 <rmw_wait+0x11a>
 801a82c:	e76e      	b.n	801a70c <rmw_wait+0x130>
 801a82e:	b1f3      	cbz	r3, 801a86e <rmw_wait+0x292>
 801a830:	2c00      	cmp	r4, #0
 801a832:	f47f aee1 	bne.w	801a5f8 <rmw_wait+0x1c>
 801a836:	f7f6 f80b 	bl	8010850 <rmw_uxrce_clean_expired_static_input_buffer>
 801a83a:	4b26      	ldr	r3, [pc, #152]	@ (801a8d4 <rmw_wait+0x2f8>)
 801a83c:	681c      	ldr	r4, [r3, #0]
 801a83e:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801a842:	2c00      	cmp	r4, #0
 801a844:	f47f aeed 	bne.w	801a622 <rmw_wait+0x46>
 801a848:	e70a      	b.n	801a660 <rmw_wait+0x84>
 801a84a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801a84e:	f7ff f9d7 	bl	8019c00 <rmw_time_total_nsec>
 801a852:	4a21      	ldr	r2, [pc, #132]	@ (801a8d8 <rmw_wait+0x2fc>)
 801a854:	2300      	movs	r3, #0
 801a856:	f7e6 fa57 	bl	8000d08 <__aeabi_uldivmod>
 801a85a:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801a85e:	f171 0100 	sbcs.w	r1, r1, #0
 801a862:	4605      	mov	r5, r0
 801a864:	f6ff aed8 	blt.w	801a618 <rmw_wait+0x3c>
 801a868:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 801a86c:	e6d4      	b.n	801a618 <rmw_wait+0x3c>
 801a86e:	2800      	cmp	r0, #0
 801a870:	d1de      	bne.n	801a830 <rmw_wait+0x254>
 801a872:	2900      	cmp	r1, #0
 801a874:	d1dc      	bne.n	801a830 <rmw_wait+0x254>
 801a876:	4608      	mov	r0, r1
 801a878:	e7a0      	b.n	801a7bc <rmw_wait+0x1e0>
 801a87a:	2f00      	cmp	r7, #0
 801a87c:	f47f af0b 	bne.w	801a696 <rmw_wait+0xba>
 801a880:	2c00      	cmp	r4, #0
 801a882:	f47f af1a 	bne.w	801a6ba <rmw_wait+0xde>
 801a886:	f1b9 0f00 	cmp.w	r9, #0
 801a88a:	d027      	beq.n	801a8dc <rmw_wait+0x300>
 801a88c:	f8d9 3000 	ldr.w	r3, [r9]
 801a890:	4625      	mov	r5, r4
 801a892:	2b00      	cmp	r3, #0
 801a894:	f47f af41 	bne.w	801a71a <rmw_wait+0x13e>
 801a898:	e777      	b.n	801a78a <rmw_wait+0x1ae>
 801a89a:	464d      	mov	r5, r9
 801a89c:	e74e      	b.n	801a73c <rmw_wait+0x160>
 801a89e:	2f00      	cmp	r7, #0
 801a8a0:	f47f aef9 	bne.w	801a696 <rmw_wait+0xba>
 801a8a4:	2c00      	cmp	r4, #0
 801a8a6:	f47f af08 	bne.w	801a6ba <rmw_wait+0xde>
 801a8aa:	f1b9 0f00 	cmp.w	r9, #0
 801a8ae:	d015      	beq.n	801a8dc <rmw_wait+0x300>
 801a8b0:	f8d9 3000 	ldr.w	r3, [r9]
 801a8b4:	2b00      	cmp	r3, #0
 801a8b6:	f47f af30 	bne.w	801a71a <rmw_wait+0x13e>
 801a8ba:	2500      	movs	r5, #0
 801a8bc:	e743      	b.n	801a746 <rmw_wait+0x16a>
 801a8be:	2c00      	cmp	r4, #0
 801a8c0:	f47f aefb 	bne.w	801a6ba <rmw_wait+0xde>
 801a8c4:	f1b9 0f00 	cmp.w	r9, #0
 801a8c8:	f47f af24 	bne.w	801a714 <rmw_wait+0x138>
 801a8cc:	e7f5      	b.n	801a8ba <rmw_wait+0x2de>
 801a8ce:	bf00      	nop
 801a8d0:	0801fd00 	.word	0x0801fd00
 801a8d4:	2000ef70 	.word	0x2000ef70
 801a8d8:	000f4240 	.word	0x000f4240
 801a8dc:	464d      	mov	r5, r9
 801a8de:	e754      	b.n	801a78a <rmw_wait+0x1ae>

0801a8e0 <rmw_create_wait_set>:
 801a8e0:	b508      	push	{r3, lr}
 801a8e2:	4803      	ldr	r0, [pc, #12]	@ (801a8f0 <rmw_create_wait_set+0x10>)
 801a8e4:	f7ff fbdc 	bl	801a0a0 <get_memory>
 801a8e8:	b108      	cbz	r0, 801a8ee <rmw_create_wait_set+0xe>
 801a8ea:	6880      	ldr	r0, [r0, #8]
 801a8ec:	3010      	adds	r0, #16
 801a8ee:	bd08      	pop	{r3, pc}
 801a8f0:	2000a598 	.word	0x2000a598

0801a8f4 <rmw_destroy_wait_set>:
 801a8f4:	b508      	push	{r3, lr}
 801a8f6:	4b08      	ldr	r3, [pc, #32]	@ (801a918 <rmw_destroy_wait_set+0x24>)
 801a8f8:	6819      	ldr	r1, [r3, #0]
 801a8fa:	b911      	cbnz	r1, 801a902 <rmw_destroy_wait_set+0xe>
 801a8fc:	e00a      	b.n	801a914 <rmw_destroy_wait_set+0x20>
 801a8fe:	6849      	ldr	r1, [r1, #4]
 801a900:	b141      	cbz	r1, 801a914 <rmw_destroy_wait_set+0x20>
 801a902:	688b      	ldr	r3, [r1, #8]
 801a904:	3310      	adds	r3, #16
 801a906:	4298      	cmp	r0, r3
 801a908:	d1f9      	bne.n	801a8fe <rmw_destroy_wait_set+0xa>
 801a90a:	4803      	ldr	r0, [pc, #12]	@ (801a918 <rmw_destroy_wait_set+0x24>)
 801a90c:	f7ff fbd8 	bl	801a0c0 <put_memory>
 801a910:	2000      	movs	r0, #0
 801a912:	bd08      	pop	{r3, pc}
 801a914:	2001      	movs	r0, #1
 801a916:	bd08      	pop	{r3, pc}
 801a918:	2000a598 	.word	0x2000a598

0801a91c <sensor_msgs__msg__Imu__get_type_hash>:
 801a91c:	4800      	ldr	r0, [pc, #0]	@ (801a920 <sensor_msgs__msg__Imu__get_type_hash+0x4>)
 801a91e:	4770      	bx	lr
 801a920:	20001a54 	.word	0x20001a54

0801a924 <sensor_msgs__msg__Imu__get_type_description>:
 801a924:	b570      	push	{r4, r5, r6, lr}
 801a926:	4e15      	ldr	r6, [pc, #84]	@ (801a97c <sensor_msgs__msg__Imu__get_type_description+0x58>)
 801a928:	7835      	ldrb	r5, [r6, #0]
 801a92a:	b10d      	cbz	r5, 801a930 <sensor_msgs__msg__Imu__get_type_description+0xc>
 801a92c:	4814      	ldr	r0, [pc, #80]	@ (801a980 <sensor_msgs__msg__Imu__get_type_description+0x5c>)
 801a92e:	bd70      	pop	{r4, r5, r6, pc}
 801a930:	4628      	mov	r0, r5
 801a932:	f000 fdab 	bl	801b48c <builtin_interfaces__msg__Time__get_type_description>
 801a936:	300c      	adds	r0, #12
 801a938:	c807      	ldmia	r0, {r0, r1, r2}
 801a93a:	4c12      	ldr	r4, [pc, #72]	@ (801a984 <sensor_msgs__msg__Imu__get_type_description+0x60>)
 801a93c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801a940:	4628      	mov	r0, r5
 801a942:	f000 fde3 	bl	801b50c <geometry_msgs__msg__Quaternion__get_type_description>
 801a946:	300c      	adds	r0, #12
 801a948:	c807      	ldmia	r0, {r0, r1, r2}
 801a94a:	f104 0318 	add.w	r3, r4, #24
 801a94e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801a952:	4628      	mov	r0, r5
 801a954:	f7f7 f976 	bl	8011c44 <geometry_msgs__msg__Vector3__get_type_description>
 801a958:	300c      	adds	r0, #12
 801a95a:	c807      	ldmia	r0, {r0, r1, r2}
 801a95c:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801a960:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801a964:	4628      	mov	r0, r5
 801a966:	f000 f965 	bl	801ac34 <std_msgs__msg__Header__get_type_description>
 801a96a:	300c      	adds	r0, #12
 801a96c:	c807      	ldmia	r0, {r0, r1, r2}
 801a96e:	3448      	adds	r4, #72	@ 0x48
 801a970:	2301      	movs	r3, #1
 801a972:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801a976:	7033      	strb	r3, [r6, #0]
 801a978:	4801      	ldr	r0, [pc, #4]	@ (801a980 <sensor_msgs__msg__Imu__get_type_description+0x5c>)
 801a97a:	bd70      	pop	{r4, r5, r6, pc}
 801a97c:	2000f591 	.word	0x2000f591
 801a980:	08021a44 	.word	0x08021a44
 801a984:	20001f44 	.word	0x20001f44

0801a988 <sensor_msgs__msg__Imu__get_individual_type_description_source>:
 801a988:	4800      	ldr	r0, [pc, #0]	@ (801a98c <sensor_msgs__msg__Imu__get_individual_type_description_source+0x4>)
 801a98a:	4770      	bx	lr
 801a98c:	08021a20 	.word	0x08021a20

0801a990 <sensor_msgs__msg__Imu__get_type_description_sources>:
 801a990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a992:	4d26      	ldr	r5, [pc, #152]	@ (801aa2c <sensor_msgs__msg__Imu__get_type_description_sources+0x9c>)
 801a994:	782f      	ldrb	r7, [r5, #0]
 801a996:	b10f      	cbz	r7, 801a99c <sensor_msgs__msg__Imu__get_type_description_sources+0xc>
 801a998:	4825      	ldr	r0, [pc, #148]	@ (801aa30 <sensor_msgs__msg__Imu__get_type_description_sources+0xa0>)
 801a99a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a99c:	4e25      	ldr	r6, [pc, #148]	@ (801aa34 <sensor_msgs__msg__Imu__get_type_description_sources+0xa4>)
 801a99e:	4c26      	ldr	r4, [pc, #152]	@ (801aa38 <sensor_msgs__msg__Imu__get_type_description_sources+0xa8>)
 801a9a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801a9a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a9a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801a9a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a9a8:	6833      	ldr	r3, [r6, #0]
 801a9aa:	4626      	mov	r6, r4
 801a9ac:	4638      	mov	r0, r7
 801a9ae:	f846 3b04 	str.w	r3, [r6], #4
 801a9b2:	f000 fd77 	bl	801b4a4 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801a9b6:	4684      	mov	ip, r0
 801a9b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a9bc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801a9be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a9c2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801a9c4:	4638      	mov	r0, r7
 801a9c6:	f8dc 3000 	ldr.w	r3, [ip]
 801a9ca:	6033      	str	r3, [r6, #0]
 801a9cc:	f000 fdaa 	bl	801b524 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 801a9d0:	4684      	mov	ip, r0
 801a9d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a9d6:	f104 0628 	add.w	r6, r4, #40	@ 0x28
 801a9da:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801a9dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a9e0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801a9e2:	4638      	mov	r0, r7
 801a9e4:	f8dc 3000 	ldr.w	r3, [ip]
 801a9e8:	6033      	str	r3, [r6, #0]
 801a9ea:	f7f7 f937 	bl	8011c5c <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 801a9ee:	4684      	mov	ip, r0
 801a9f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a9f4:	f104 064c 	add.w	r6, r4, #76	@ 0x4c
 801a9f8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801a9fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a9fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801aa00:	4638      	mov	r0, r7
 801aa02:	f8dc 3000 	ldr.w	r3, [ip]
 801aa06:	6033      	str	r3, [r6, #0]
 801aa08:	f000 f92c 	bl	801ac64 <std_msgs__msg__Header__get_individual_type_description_source>
 801aa0c:	2301      	movs	r3, #1
 801aa0e:	4684      	mov	ip, r0
 801aa10:	702b      	strb	r3, [r5, #0]
 801aa12:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801aa16:	3470      	adds	r4, #112	@ 0x70
 801aa18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801aa1a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801aa1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801aa20:	f8dc 3000 	ldr.w	r3, [ip]
 801aa24:	4802      	ldr	r0, [pc, #8]	@ (801aa30 <sensor_msgs__msg__Imu__get_type_description_sources+0xa0>)
 801aa26:	6023      	str	r3, [r4, #0]
 801aa28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa2a:	bf00      	nop
 801aa2c:	2000f590 	.word	0x2000f590
 801aa30:	08021a14 	.word	0x08021a14
 801aa34:	08021a20 	.word	0x08021a20
 801aa38:	2000f4dc 	.word	0x2000f4dc

0801aa3c <sensor_msgs__msg__Imu__init>:
 801aa3c:	b3d8      	cbz	r0, 801aab6 <sensor_msgs__msg__Imu__init+0x7a>
 801aa3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa40:	4604      	mov	r4, r0
 801aa42:	f000 f93b 	bl	801acbc <std_msgs__msg__Header__init>
 801aa46:	b190      	cbz	r0, 801aa6e <sensor_msgs__msg__Imu__init+0x32>
 801aa48:	f104 0518 	add.w	r5, r4, #24
 801aa4c:	4628      	mov	r0, r5
 801aa4e:	f000 fd8b 	bl	801b568 <geometry_msgs__msg__Quaternion__init>
 801aa52:	b358      	cbz	r0, 801aaac <sensor_msgs__msg__Imu__init+0x70>
 801aa54:	f104 0680 	add.w	r6, r4, #128	@ 0x80
 801aa58:	4630      	mov	r0, r6
 801aa5a:	f7f7 f91f 	bl	8011c9c <geometry_msgs__msg__Vector3__init>
 801aa5e:	b1b8      	cbz	r0, 801aa90 <sensor_msgs__msg__Imu__init+0x54>
 801aa60:	f104 07e0 	add.w	r7, r4, #224	@ 0xe0
 801aa64:	4638      	mov	r0, r7
 801aa66:	f7f7 f919 	bl	8011c9c <geometry_msgs__msg__Vector3__init>
 801aa6a:	b330      	cbz	r0, 801aaba <sensor_msgs__msg__Imu__init+0x7e>
 801aa6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa6e:	4620      	mov	r0, r4
 801aa70:	f000 f944 	bl	801acfc <std_msgs__msg__Header__fini>
 801aa74:	f104 0018 	add.w	r0, r4, #24
 801aa78:	f000 fd8a 	bl	801b590 <geometry_msgs__msg__Quaternion__fini>
 801aa7c:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801aa80:	f7f7 f910 	bl	8011ca4 <geometry_msgs__msg__Vector3__fini>
 801aa84:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 801aa88:	f7f7 f90c 	bl	8011ca4 <geometry_msgs__msg__Vector3__fini>
 801aa8c:	2000      	movs	r0, #0
 801aa8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa90:	4620      	mov	r0, r4
 801aa92:	f000 f933 	bl	801acfc <std_msgs__msg__Header__fini>
 801aa96:	4628      	mov	r0, r5
 801aa98:	f000 fd7a 	bl	801b590 <geometry_msgs__msg__Quaternion__fini>
 801aa9c:	4630      	mov	r0, r6
 801aa9e:	f7f7 f901 	bl	8011ca4 <geometry_msgs__msg__Vector3__fini>
 801aaa2:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 801aaa6:	f7f7 f8fd 	bl	8011ca4 <geometry_msgs__msg__Vector3__fini>
 801aaaa:	e7ef      	b.n	801aa8c <sensor_msgs__msg__Imu__init+0x50>
 801aaac:	4620      	mov	r0, r4
 801aaae:	f000 f925 	bl	801acfc <std_msgs__msg__Header__fini>
 801aab2:	4628      	mov	r0, r5
 801aab4:	e7e0      	b.n	801aa78 <sensor_msgs__msg__Imu__init+0x3c>
 801aab6:	2000      	movs	r0, #0
 801aab8:	4770      	bx	lr
 801aaba:	4620      	mov	r0, r4
 801aabc:	f000 f91e 	bl	801acfc <std_msgs__msg__Header__fini>
 801aac0:	4628      	mov	r0, r5
 801aac2:	f000 fd65 	bl	801b590 <geometry_msgs__msg__Quaternion__fini>
 801aac6:	4630      	mov	r0, r6
 801aac8:	f7f7 f8ec 	bl	8011ca4 <geometry_msgs__msg__Vector3__fini>
 801aacc:	4638      	mov	r0, r7
 801aace:	f7f7 f8e9 	bl	8011ca4 <geometry_msgs__msg__Vector3__fini>
 801aad2:	e7db      	b.n	801aa8c <sensor_msgs__msg__Imu__init+0x50>

0801aad4 <sensor_msgs__msg__Imu__fini>:
 801aad4:	b188      	cbz	r0, 801aafa <sensor_msgs__msg__Imu__fini+0x26>
 801aad6:	b510      	push	{r4, lr}
 801aad8:	4604      	mov	r4, r0
 801aada:	f000 f90f 	bl	801acfc <std_msgs__msg__Header__fini>
 801aade:	f104 0018 	add.w	r0, r4, #24
 801aae2:	f000 fd55 	bl	801b590 <geometry_msgs__msg__Quaternion__fini>
 801aae6:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801aaea:	f7f7 f8db 	bl	8011ca4 <geometry_msgs__msg__Vector3__fini>
 801aaee:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 801aaf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aaf6:	f7f7 b8d5 	b.w	8011ca4 <geometry_msgs__msg__Vector3__fini>
 801aafa:	4770      	bx	lr

0801aafc <sensor_msgs__msg__Imu__copy>:
 801aafc:	b570      	push	{r4, r5, r6, lr}
 801aafe:	b128      	cbz	r0, 801ab0c <sensor_msgs__msg__Imu__copy+0x10>
 801ab00:	460d      	mov	r5, r1
 801ab02:	b119      	cbz	r1, 801ab0c <sensor_msgs__msg__Imu__copy+0x10>
 801ab04:	4604      	mov	r4, r0
 801ab06:	f000 f905 	bl	801ad14 <std_msgs__msg__Header__copy>
 801ab0a:	b910      	cbnz	r0, 801ab12 <sensor_msgs__msg__Imu__copy+0x16>
 801ab0c:	2600      	movs	r6, #0
 801ab0e:	4630      	mov	r0, r6
 801ab10:	bd70      	pop	{r4, r5, r6, pc}
 801ab12:	f105 0118 	add.w	r1, r5, #24
 801ab16:	f104 0018 	add.w	r0, r4, #24
 801ab1a:	f000 fd3b 	bl	801b594 <geometry_msgs__msg__Quaternion__copy>
 801ab1e:	2800      	cmp	r0, #0
 801ab20:	d0f4      	beq.n	801ab0c <sensor_msgs__msg__Imu__copy+0x10>
 801ab22:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 801ab26:	2248      	movs	r2, #72	@ 0x48
 801ab28:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 801ab2c:	f002 ffea 	bl	801db04 <memmove>
 801ab30:	f105 0180 	add.w	r1, r5, #128	@ 0x80
 801ab34:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801ab38:	f7f7 f8b6 	bl	8011ca8 <geometry_msgs__msg__Vector3__copy>
 801ab3c:	2800      	cmp	r0, #0
 801ab3e:	d0e5      	beq.n	801ab0c <sensor_msgs__msg__Imu__copy+0x10>
 801ab40:	2248      	movs	r2, #72	@ 0x48
 801ab42:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 801ab46:	f105 0098 	add.w	r0, r5, #152	@ 0x98
 801ab4a:	f002 ffdb 	bl	801db04 <memmove>
 801ab4e:	f105 01e0 	add.w	r1, r5, #224	@ 0xe0
 801ab52:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 801ab56:	f7f7 f8a7 	bl	8011ca8 <geometry_msgs__msg__Vector3__copy>
 801ab5a:	4606      	mov	r6, r0
 801ab5c:	2800      	cmp	r0, #0
 801ab5e:	d0d5      	beq.n	801ab0c <sensor_msgs__msg__Imu__copy+0x10>
 801ab60:	2248      	movs	r2, #72	@ 0x48
 801ab62:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 801ab66:	f105 00f8 	add.w	r0, r5, #248	@ 0xf8
 801ab6a:	f002 ffcb 	bl	801db04 <memmove>
 801ab6e:	e7ce      	b.n	801ab0e <sensor_msgs__msg__Imu__copy+0x12>

0801ab70 <service_msgs__msg__ServiceEventInfo__get_type_hash>:
 801ab70:	4800      	ldr	r0, [pc, #0]	@ (801ab74 <service_msgs__msg__ServiceEventInfo__get_type_hash+0x4>)
 801ab72:	4770      	bx	lr
 801ab74:	200022a0 	.word	0x200022a0

0801ab78 <service_msgs__msg__ServiceEventInfo__get_type_description>:
 801ab78:	b510      	push	{r4, lr}
 801ab7a:	4c08      	ldr	r4, [pc, #32]	@ (801ab9c <service_msgs__msg__ServiceEventInfo__get_type_description+0x24>)
 801ab7c:	7820      	ldrb	r0, [r4, #0]
 801ab7e:	b108      	cbz	r0, 801ab84 <service_msgs__msg__ServiceEventInfo__get_type_description+0xc>
 801ab80:	4807      	ldr	r0, [pc, #28]	@ (801aba0 <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 801ab82:	bd10      	pop	{r4, pc}
 801ab84:	f000 fc82 	bl	801b48c <builtin_interfaces__msg__Time__get_type_description>
 801ab88:	300c      	adds	r0, #12
 801ab8a:	c807      	ldmia	r0, {r0, r1, r2}
 801ab8c:	4b05      	ldr	r3, [pc, #20]	@ (801aba4 <service_msgs__msg__ServiceEventInfo__get_type_description+0x2c>)
 801ab8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801ab92:	2301      	movs	r3, #1
 801ab94:	4802      	ldr	r0, [pc, #8]	@ (801aba0 <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 801ab96:	7023      	strb	r3, [r4, #0]
 801ab98:	bd10      	pop	{r4, pc}
 801ab9a:	bf00      	nop
 801ab9c:	2000f5dd 	.word	0x2000f5dd
 801aba0:	08021a98 	.word	0x08021a98
 801aba4:	20002588 	.word	0x20002588

0801aba8 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>:
 801aba8:	4800      	ldr	r0, [pc, #0]	@ (801abac <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source+0x4>)
 801abaa:	4770      	bx	lr
 801abac:	08021a74 	.word	0x08021a74

0801abb0 <service_msgs__msg__ServiceEventInfo__get_type_description_sources>:
 801abb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801abb2:	4e0f      	ldr	r6, [pc, #60]	@ (801abf0 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x40>)
 801abb4:	7837      	ldrb	r7, [r6, #0]
 801abb6:	b10f      	cbz	r7, 801abbc <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0xc>
 801abb8:	480e      	ldr	r0, [pc, #56]	@ (801abf4 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 801abba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801abbc:	4d0e      	ldr	r5, [pc, #56]	@ (801abf8 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x48>)
 801abbe:	4c0f      	ldr	r4, [pc, #60]	@ (801abfc <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x4c>)
 801abc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801abc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801abc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801abc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801abc8:	682b      	ldr	r3, [r5, #0]
 801abca:	f844 3b04 	str.w	r3, [r4], #4
 801abce:	4638      	mov	r0, r7
 801abd0:	f000 fc68 	bl	801b4a4 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801abd4:	2301      	movs	r3, #1
 801abd6:	4684      	mov	ip, r0
 801abd8:	7033      	strb	r3, [r6, #0]
 801abda:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801abde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801abe0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801abe4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801abe6:	f8dc 3000 	ldr.w	r3, [ip]
 801abea:	4802      	ldr	r0, [pc, #8]	@ (801abf4 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 801abec:	6023      	str	r3, [r4, #0]
 801abee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801abf0:	2000f5dc 	.word	0x2000f5dc
 801abf4:	08021a68 	.word	0x08021a68
 801abf8:	08021a74 	.word	0x08021a74
 801abfc:	2000f594 	.word	0x2000f594

0801ac00 <service_msgs__msg__ServiceEventInfo__init>:
 801ac00:	b158      	cbz	r0, 801ac1a <service_msgs__msg__ServiceEventInfo__init+0x1a>
 801ac02:	b510      	push	{r4, lr}
 801ac04:	1d04      	adds	r4, r0, #4
 801ac06:	4620      	mov	r0, r4
 801ac08:	f000 fc6c 	bl	801b4e4 <builtin_interfaces__msg__Time__init>
 801ac0c:	b100      	cbz	r0, 801ac10 <service_msgs__msg__ServiceEventInfo__init+0x10>
 801ac0e:	bd10      	pop	{r4, pc}
 801ac10:	4620      	mov	r0, r4
 801ac12:	f000 fc6b 	bl	801b4ec <builtin_interfaces__msg__Time__fini>
 801ac16:	2000      	movs	r0, #0
 801ac18:	bd10      	pop	{r4, pc}
 801ac1a:	2000      	movs	r0, #0
 801ac1c:	4770      	bx	lr
 801ac1e:	bf00      	nop

0801ac20 <service_msgs__msg__ServiceEventInfo__fini>:
 801ac20:	b110      	cbz	r0, 801ac28 <service_msgs__msg__ServiceEventInfo__fini+0x8>
 801ac22:	3004      	adds	r0, #4
 801ac24:	f000 bc62 	b.w	801b4ec <builtin_interfaces__msg__Time__fini>
 801ac28:	4770      	bx	lr
 801ac2a:	bf00      	nop

0801ac2c <std_msgs__msg__Header__get_type_hash>:
 801ac2c:	4800      	ldr	r0, [pc, #0]	@ (801ac30 <std_msgs__msg__Header__get_type_hash+0x4>)
 801ac2e:	4770      	bx	lr
 801ac30:	20002728 	.word	0x20002728

0801ac34 <std_msgs__msg__Header__get_type_description>:
 801ac34:	b510      	push	{r4, lr}
 801ac36:	4c08      	ldr	r4, [pc, #32]	@ (801ac58 <std_msgs__msg__Header__get_type_description+0x24>)
 801ac38:	7820      	ldrb	r0, [r4, #0]
 801ac3a:	b108      	cbz	r0, 801ac40 <std_msgs__msg__Header__get_type_description+0xc>
 801ac3c:	4807      	ldr	r0, [pc, #28]	@ (801ac5c <std_msgs__msg__Header__get_type_description+0x28>)
 801ac3e:	bd10      	pop	{r4, pc}
 801ac40:	f000 fc24 	bl	801b48c <builtin_interfaces__msg__Time__get_type_description>
 801ac44:	300c      	adds	r0, #12
 801ac46:	c807      	ldmia	r0, {r0, r1, r2}
 801ac48:	4b05      	ldr	r3, [pc, #20]	@ (801ac60 <std_msgs__msg__Header__get_type_description+0x2c>)
 801ac4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801ac4e:	2301      	movs	r3, #1
 801ac50:	4802      	ldr	r0, [pc, #8]	@ (801ac5c <std_msgs__msg__Header__get_type_description+0x28>)
 801ac52:	7023      	strb	r3, [r4, #0]
 801ac54:	bd10      	pop	{r4, pc}
 801ac56:	bf00      	nop
 801ac58:	2000f629 	.word	0x2000f629
 801ac5c:	08021aec 	.word	0x08021aec
 801ac60:	200028a0 	.word	0x200028a0

0801ac64 <std_msgs__msg__Header__get_individual_type_description_source>:
 801ac64:	4800      	ldr	r0, [pc, #0]	@ (801ac68 <std_msgs__msg__Header__get_individual_type_description_source+0x4>)
 801ac66:	4770      	bx	lr
 801ac68:	08021ac8 	.word	0x08021ac8

0801ac6c <std_msgs__msg__Header__get_type_description_sources>:
 801ac6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac6e:	4e0f      	ldr	r6, [pc, #60]	@ (801acac <std_msgs__msg__Header__get_type_description_sources+0x40>)
 801ac70:	7837      	ldrb	r7, [r6, #0]
 801ac72:	b10f      	cbz	r7, 801ac78 <std_msgs__msg__Header__get_type_description_sources+0xc>
 801ac74:	480e      	ldr	r0, [pc, #56]	@ (801acb0 <std_msgs__msg__Header__get_type_description_sources+0x44>)
 801ac76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac78:	4d0e      	ldr	r5, [pc, #56]	@ (801acb4 <std_msgs__msg__Header__get_type_description_sources+0x48>)
 801ac7a:	4c0f      	ldr	r4, [pc, #60]	@ (801acb8 <std_msgs__msg__Header__get_type_description_sources+0x4c>)
 801ac7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ac7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ac80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ac82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ac84:	682b      	ldr	r3, [r5, #0]
 801ac86:	f844 3b04 	str.w	r3, [r4], #4
 801ac8a:	4638      	mov	r0, r7
 801ac8c:	f000 fc0a 	bl	801b4a4 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801ac90:	2301      	movs	r3, #1
 801ac92:	4684      	mov	ip, r0
 801ac94:	7033      	strb	r3, [r6, #0]
 801ac96:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ac9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ac9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801aca0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801aca2:	f8dc 3000 	ldr.w	r3, [ip]
 801aca6:	4802      	ldr	r0, [pc, #8]	@ (801acb0 <std_msgs__msg__Header__get_type_description_sources+0x44>)
 801aca8:	6023      	str	r3, [r4, #0]
 801acaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801acac:	2000f628 	.word	0x2000f628
 801acb0:	08021abc 	.word	0x08021abc
 801acb4:	08021ac8 	.word	0x08021ac8
 801acb8:	2000f5e0 	.word	0x2000f5e0

0801acbc <std_msgs__msg__Header__init>:
 801acbc:	b1d8      	cbz	r0, 801acf6 <std_msgs__msg__Header__init+0x3a>
 801acbe:	b538      	push	{r3, r4, r5, lr}
 801acc0:	4604      	mov	r4, r0
 801acc2:	f000 fc0f 	bl	801b4e4 <builtin_interfaces__msg__Time__init>
 801acc6:	b130      	cbz	r0, 801acd6 <std_msgs__msg__Header__init+0x1a>
 801acc8:	f104 0508 	add.w	r5, r4, #8
 801accc:	4628      	mov	r0, r5
 801acce:	f7f5 ff83 	bl	8010bd8 <rosidl_runtime_c__String__init>
 801acd2:	b148      	cbz	r0, 801ace8 <std_msgs__msg__Header__init+0x2c>
 801acd4:	bd38      	pop	{r3, r4, r5, pc}
 801acd6:	4620      	mov	r0, r4
 801acd8:	f000 fc08 	bl	801b4ec <builtin_interfaces__msg__Time__fini>
 801acdc:	f104 0008 	add.w	r0, r4, #8
 801ace0:	f7f5 ff94 	bl	8010c0c <rosidl_runtime_c__String__fini>
 801ace4:	2000      	movs	r0, #0
 801ace6:	bd38      	pop	{r3, r4, r5, pc}
 801ace8:	4620      	mov	r0, r4
 801acea:	f000 fbff 	bl	801b4ec <builtin_interfaces__msg__Time__fini>
 801acee:	4628      	mov	r0, r5
 801acf0:	f7f5 ff8c 	bl	8010c0c <rosidl_runtime_c__String__fini>
 801acf4:	e7f6      	b.n	801ace4 <std_msgs__msg__Header__init+0x28>
 801acf6:	2000      	movs	r0, #0
 801acf8:	4770      	bx	lr
 801acfa:	bf00      	nop

0801acfc <std_msgs__msg__Header__fini>:
 801acfc:	b148      	cbz	r0, 801ad12 <std_msgs__msg__Header__fini+0x16>
 801acfe:	b510      	push	{r4, lr}
 801ad00:	4604      	mov	r4, r0
 801ad02:	f000 fbf3 	bl	801b4ec <builtin_interfaces__msg__Time__fini>
 801ad06:	f104 0008 	add.w	r0, r4, #8
 801ad0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ad0e:	f7f5 bf7d 	b.w	8010c0c <rosidl_runtime_c__String__fini>
 801ad12:	4770      	bx	lr

0801ad14 <std_msgs__msg__Header__copy>:
 801ad14:	b180      	cbz	r0, 801ad38 <std_msgs__msg__Header__copy+0x24>
 801ad16:	b538      	push	{r3, r4, r5, lr}
 801ad18:	460d      	mov	r5, r1
 801ad1a:	b119      	cbz	r1, 801ad24 <std_msgs__msg__Header__copy+0x10>
 801ad1c:	4604      	mov	r4, r0
 801ad1e:	f000 fbe7 	bl	801b4f0 <builtin_interfaces__msg__Time__copy>
 801ad22:	b908      	cbnz	r0, 801ad28 <std_msgs__msg__Header__copy+0x14>
 801ad24:	2000      	movs	r0, #0
 801ad26:	bd38      	pop	{r3, r4, r5, pc}
 801ad28:	f105 0108 	add.w	r1, r5, #8
 801ad2c:	f104 0008 	add.w	r0, r4, #8
 801ad30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ad34:	f7f5 bfe0 	b.w	8010cf8 <rosidl_runtime_c__String__copy>
 801ad38:	2000      	movs	r0, #0
 801ad3a:	4770      	bx	lr

0801ad3c <std_msgs__msg__Int8__get_type_hash>:
 801ad3c:	4800      	ldr	r0, [pc, #0]	@ (801ad40 <std_msgs__msg__Int8__get_type_hash+0x4>)
 801ad3e:	4770      	bx	lr
 801ad40:	20002984 	.word	0x20002984

0801ad44 <std_msgs__msg__Int8__get_type_description>:
 801ad44:	4b03      	ldr	r3, [pc, #12]	@ (801ad54 <std_msgs__msg__Int8__get_type_description+0x10>)
 801ad46:	781a      	ldrb	r2, [r3, #0]
 801ad48:	b90a      	cbnz	r2, 801ad4e <std_msgs__msg__Int8__get_type_description+0xa>
 801ad4a:	2201      	movs	r2, #1
 801ad4c:	701a      	strb	r2, [r3, #0]
 801ad4e:	4802      	ldr	r0, [pc, #8]	@ (801ad58 <std_msgs__msg__Int8__get_type_description+0x14>)
 801ad50:	4770      	bx	lr
 801ad52:	bf00      	nop
 801ad54:	2000f651 	.word	0x2000f651
 801ad58:	08021b40 	.word	0x08021b40

0801ad5c <std_msgs__msg__Int8__get_type_description_sources>:
 801ad5c:	4b09      	ldr	r3, [pc, #36]	@ (801ad84 <std_msgs__msg__Int8__get_type_description_sources+0x28>)
 801ad5e:	781a      	ldrb	r2, [r3, #0]
 801ad60:	b96a      	cbnz	r2, 801ad7e <std_msgs__msg__Int8__get_type_description_sources+0x22>
 801ad62:	b430      	push	{r4, r5}
 801ad64:	4d08      	ldr	r5, [pc, #32]	@ (801ad88 <std_msgs__msg__Int8__get_type_description_sources+0x2c>)
 801ad66:	4c09      	ldr	r4, [pc, #36]	@ (801ad8c <std_msgs__msg__Int8__get_type_description_sources+0x30>)
 801ad68:	2201      	movs	r2, #1
 801ad6a:	701a      	strb	r2, [r3, #0]
 801ad6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ad6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ad70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ad72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ad74:	682b      	ldr	r3, [r5, #0]
 801ad76:	4806      	ldr	r0, [pc, #24]	@ (801ad90 <std_msgs__msg__Int8__get_type_description_sources+0x34>)
 801ad78:	6023      	str	r3, [r4, #0]
 801ad7a:	bc30      	pop	{r4, r5}
 801ad7c:	4770      	bx	lr
 801ad7e:	4804      	ldr	r0, [pc, #16]	@ (801ad90 <std_msgs__msg__Int8__get_type_description_sources+0x34>)
 801ad80:	4770      	bx	lr
 801ad82:	bf00      	nop
 801ad84:	2000f650 	.word	0x2000f650
 801ad88:	08021b1c 	.word	0x08021b1c
 801ad8c:	2000f62c 	.word	0x2000f62c
 801ad90:	08021b10 	.word	0x08021b10

0801ad94 <std_msgs__msg__Int8__init>:
 801ad94:	3800      	subs	r0, #0
 801ad96:	bf18      	it	ne
 801ad98:	2001      	movne	r0, #1
 801ad9a:	4770      	bx	lr

0801ad9c <std_msgs__msg__Int8__fini>:
 801ad9c:	4770      	bx	lr
 801ad9e:	bf00      	nop

0801ada0 <std_srvs__srv__Trigger_Event__get_type_description.part.0>:
 801ada0:	b510      	push	{r4, lr}
 801ada2:	2000      	movs	r0, #0
 801ada4:	f000 fb72 	bl	801b48c <builtin_interfaces__msg__Time__get_type_description>
 801ada8:	300c      	adds	r0, #12
 801adaa:	c807      	ldmia	r0, {r0, r1, r2}
 801adac:	4c11      	ldr	r4, [pc, #68]	@ (801adf4 <std_srvs__srv__Trigger_Event__get_type_description.part.0+0x54>)
 801adae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801adb2:	2000      	movs	r0, #0
 801adb4:	f7ff fee0 	bl	801ab78 <service_msgs__msg__ServiceEventInfo__get_type_description>
 801adb8:	300c      	adds	r0, #12
 801adba:	c807      	ldmia	r0, {r0, r1, r2}
 801adbc:	4b0e      	ldr	r3, [pc, #56]	@ (801adf8 <std_srvs__srv__Trigger_Event__get_type_description.part.0+0x58>)
 801adbe:	3418      	adds	r4, #24
 801adc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801adc4:	781a      	ldrb	r2, [r3, #0]
 801adc6:	b90a      	cbnz	r2, 801adcc <std_srvs__srv__Trigger_Event__get_type_description.part.0+0x2c>
 801adc8:	2201      	movs	r2, #1
 801adca:	701a      	strb	r2, [r3, #0]
 801adcc:	4b0b      	ldr	r3, [pc, #44]	@ (801adfc <std_srvs__srv__Trigger_Event__get_type_description.part.0+0x5c>)
 801adce:	4c0c      	ldr	r4, [pc, #48]	@ (801ae00 <std_srvs__srv__Trigger_Event__get_type_description.part.0+0x60>)
 801add0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801add4:	4b0b      	ldr	r3, [pc, #44]	@ (801ae04 <std_srvs__srv__Trigger_Event__get_type_description.part.0+0x64>)
 801add6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801adda:	7823      	ldrb	r3, [r4, #0]
 801addc:	b90b      	cbnz	r3, 801ade2 <std_srvs__srv__Trigger_Event__get_type_description.part.0+0x42>
 801adde:	2301      	movs	r3, #1
 801ade0:	7023      	strb	r3, [r4, #0]
 801ade2:	4a09      	ldr	r2, [pc, #36]	@ (801ae08 <std_srvs__srv__Trigger_Event__get_type_description.part.0+0x68>)
 801ade4:	4b09      	ldr	r3, [pc, #36]	@ (801ae0c <std_srvs__srv__Trigger_Event__get_type_description.part.0+0x6c>)
 801ade6:	4c0a      	ldr	r4, [pc, #40]	@ (801ae10 <std_srvs__srv__Trigger_Event__get_type_description.part.0+0x70>)
 801ade8:	ca07      	ldmia	r2, {r0, r1, r2}
 801adea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801adee:	2301      	movs	r3, #1
 801adf0:	7023      	strb	r3, [r4, #0]
 801adf2:	bd10      	pop	{r4, pc}
 801adf4:	20002c44 	.word	0x20002c44
 801adf8:	2000f837 	.word	0x2000f837
 801adfc:	08021c78 	.word	0x08021c78
 801ae00:	2000f836 	.word	0x2000f836
 801ae04:	20002c74 	.word	0x20002c74
 801ae08:	08021c54 	.word	0x08021c54
 801ae0c:	20002c8c 	.word	0x20002c8c
 801ae10:	2000f835 	.word	0x2000f835

0801ae14 <std_srvs__srv__Trigger__get_type_hash>:
 801ae14:	4800      	ldr	r0, [pc, #0]	@ (801ae18 <std_srvs__srv__Trigger__get_type_hash+0x4>)
 801ae16:	4770      	bx	lr
 801ae18:	20002b88 	.word	0x20002b88

0801ae1c <std_srvs__srv__Trigger_Request__get_type_hash>:
 801ae1c:	4800      	ldr	r0, [pc, #0]	@ (801ae20 <std_srvs__srv__Trigger_Request__get_type_hash+0x4>)
 801ae1e:	4770      	bx	lr
 801ae20:	20002b64 	.word	0x20002b64

0801ae24 <std_srvs__srv__Trigger_Response__get_type_hash>:
 801ae24:	4800      	ldr	r0, [pc, #0]	@ (801ae28 <std_srvs__srv__Trigger_Response__get_type_hash+0x4>)
 801ae26:	4770      	bx	lr
 801ae28:	20002b40 	.word	0x20002b40

0801ae2c <std_srvs__srv__Trigger_Event__get_type_hash>:
 801ae2c:	4800      	ldr	r0, [pc, #0]	@ (801ae30 <std_srvs__srv__Trigger_Event__get_type_hash+0x4>)
 801ae2e:	4770      	bx	lr
 801ae30:	20002b1c 	.word	0x20002b1c

0801ae34 <std_srvs__srv__Trigger__get_type_description>:
 801ae34:	b570      	push	{r4, r5, r6, lr}
 801ae36:	4e1d      	ldr	r6, [pc, #116]	@ (801aeac <std_srvs__srv__Trigger__get_type_description+0x78>)
 801ae38:	7835      	ldrb	r5, [r6, #0]
 801ae3a:	b10d      	cbz	r5, 801ae40 <std_srvs__srv__Trigger__get_type_description+0xc>
 801ae3c:	481c      	ldr	r0, [pc, #112]	@ (801aeb0 <std_srvs__srv__Trigger__get_type_description+0x7c>)
 801ae3e:	bd70      	pop	{r4, r5, r6, pc}
 801ae40:	4628      	mov	r0, r5
 801ae42:	f000 fb23 	bl	801b48c <builtin_interfaces__msg__Time__get_type_description>
 801ae46:	300c      	adds	r0, #12
 801ae48:	c807      	ldmia	r0, {r0, r1, r2}
 801ae4a:	4c1a      	ldr	r4, [pc, #104]	@ (801aeb4 <std_srvs__srv__Trigger__get_type_description+0x80>)
 801ae4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801ae50:	4628      	mov	r0, r5
 801ae52:	f7ff fe91 	bl	801ab78 <service_msgs__msg__ServiceEventInfo__get_type_description>
 801ae56:	300c      	adds	r0, #12
 801ae58:	c807      	ldmia	r0, {r0, r1, r2}
 801ae5a:	4b17      	ldr	r3, [pc, #92]	@ (801aeb8 <std_srvs__srv__Trigger__get_type_description+0x84>)
 801ae5c:	781b      	ldrb	r3, [r3, #0]
 801ae5e:	3418      	adds	r4, #24
 801ae60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801ae64:	b1f3      	cbz	r3, 801aea4 <std_srvs__srv__Trigger__get_type_description+0x70>
 801ae66:	4b15      	ldr	r3, [pc, #84]	@ (801aebc <std_srvs__srv__Trigger__get_type_description+0x88>)
 801ae68:	4c15      	ldr	r4, [pc, #84]	@ (801aec0 <std_srvs__srv__Trigger__get_type_description+0x8c>)
 801ae6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ae6e:	4b15      	ldr	r3, [pc, #84]	@ (801aec4 <std_srvs__srv__Trigger__get_type_description+0x90>)
 801ae70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801ae74:	7823      	ldrb	r3, [r4, #0]
 801ae76:	b90b      	cbnz	r3, 801ae7c <std_srvs__srv__Trigger__get_type_description+0x48>
 801ae78:	2301      	movs	r3, #1
 801ae7a:	7023      	strb	r3, [r4, #0]
 801ae7c:	4b12      	ldr	r3, [pc, #72]	@ (801aec8 <std_srvs__srv__Trigger__get_type_description+0x94>)
 801ae7e:	4c13      	ldr	r4, [pc, #76]	@ (801aecc <std_srvs__srv__Trigger__get_type_description+0x98>)
 801ae80:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ae84:	4b12      	ldr	r3, [pc, #72]	@ (801aed0 <std_srvs__srv__Trigger__get_type_description+0x9c>)
 801ae86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801ae8a:	7823      	ldrb	r3, [r4, #0]
 801ae8c:	b90b      	cbnz	r3, 801ae92 <std_srvs__srv__Trigger__get_type_description+0x5e>
 801ae8e:	2301      	movs	r3, #1
 801ae90:	7023      	strb	r3, [r4, #0]
 801ae92:	4a10      	ldr	r2, [pc, #64]	@ (801aed4 <std_srvs__srv__Trigger__get_type_description+0xa0>)
 801ae94:	4b10      	ldr	r3, [pc, #64]	@ (801aed8 <std_srvs__srv__Trigger__get_type_description+0xa4>)
 801ae96:	ca07      	ldmia	r2, {r0, r1, r2}
 801ae98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801ae9c:	2301      	movs	r3, #1
 801ae9e:	4804      	ldr	r0, [pc, #16]	@ (801aeb0 <std_srvs__srv__Trigger__get_type_description+0x7c>)
 801aea0:	7033      	strb	r3, [r6, #0]
 801aea2:	bd70      	pop	{r4, r5, r6, pc}
 801aea4:	f7ff ff7c 	bl	801ada0 <std_srvs__srv__Trigger_Event__get_type_description.part.0>
 801aea8:	e7dd      	b.n	801ae66 <std_srvs__srv__Trigger__get_type_description+0x32>
 801aeaa:	bf00      	nop
 801aeac:	2000f838 	.word	0x2000f838
 801aeb0:	08021c90 	.word	0x08021c90
 801aeb4:	20002ea8 	.word	0x20002ea8
 801aeb8:	2000f835 	.word	0x2000f835
 801aebc:	08021c30 	.word	0x08021c30
 801aec0:	2000f837 	.word	0x2000f837
 801aec4:	20002ed8 	.word	0x20002ed8
 801aec8:	08021c78 	.word	0x08021c78
 801aecc:	2000f836 	.word	0x2000f836
 801aed0:	20002ef0 	.word	0x20002ef0
 801aed4:	08021c54 	.word	0x08021c54
 801aed8:	20002f08 	.word	0x20002f08

0801aedc <std_srvs__srv__Trigger_Request__get_type_description>:
 801aedc:	4b03      	ldr	r3, [pc, #12]	@ (801aeec <std_srvs__srv__Trigger_Request__get_type_description+0x10>)
 801aede:	781a      	ldrb	r2, [r3, #0]
 801aee0:	b90a      	cbnz	r2, 801aee6 <std_srvs__srv__Trigger_Request__get_type_description+0xa>
 801aee2:	2201      	movs	r2, #1
 801aee4:	701a      	strb	r2, [r3, #0]
 801aee6:	4802      	ldr	r0, [pc, #8]	@ (801aef0 <std_srvs__srv__Trigger_Request__get_type_description+0x14>)
 801aee8:	4770      	bx	lr
 801aeea:	bf00      	nop
 801aeec:	2000f837 	.word	0x2000f837
 801aef0:	08021c6c 	.word	0x08021c6c

0801aef4 <std_srvs__srv__Trigger_Response__get_type_description>:
 801aef4:	4b03      	ldr	r3, [pc, #12]	@ (801af04 <std_srvs__srv__Trigger_Response__get_type_description+0x10>)
 801aef6:	781a      	ldrb	r2, [r3, #0]
 801aef8:	b90a      	cbnz	r2, 801aefe <std_srvs__srv__Trigger_Response__get_type_description+0xa>
 801aefa:	2201      	movs	r2, #1
 801aefc:	701a      	strb	r2, [r3, #0]
 801aefe:	4802      	ldr	r0, [pc, #8]	@ (801af08 <std_srvs__srv__Trigger_Response__get_type_description+0x14>)
 801af00:	4770      	bx	lr
 801af02:	bf00      	nop
 801af04:	2000f836 	.word	0x2000f836
 801af08:	08021c48 	.word	0x08021c48

0801af0c <std_srvs__srv__Trigger_Event__get_type_description>:
 801af0c:	b508      	push	{r3, lr}
 801af0e:	4b04      	ldr	r3, [pc, #16]	@ (801af20 <std_srvs__srv__Trigger_Event__get_type_description+0x14>)
 801af10:	781b      	ldrb	r3, [r3, #0]
 801af12:	b10b      	cbz	r3, 801af18 <std_srvs__srv__Trigger_Event__get_type_description+0xc>
 801af14:	4803      	ldr	r0, [pc, #12]	@ (801af24 <std_srvs__srv__Trigger_Event__get_type_description+0x18>)
 801af16:	bd08      	pop	{r3, pc}
 801af18:	f7ff ff42 	bl	801ada0 <std_srvs__srv__Trigger_Event__get_type_description.part.0>
 801af1c:	4801      	ldr	r0, [pc, #4]	@ (801af24 <std_srvs__srv__Trigger_Event__get_type_description+0x18>)
 801af1e:	bd08      	pop	{r3, pc}
 801af20:	2000f835 	.word	0x2000f835
 801af24:	08021c24 	.word	0x08021c24

0801af28 <std_srvs__srv__Trigger__get_type_description_sources>:
 801af28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af2c:	4e2c      	ldr	r6, [pc, #176]	@ (801afe0 <std_srvs__srv__Trigger__get_type_description_sources+0xb8>)
 801af2e:	7837      	ldrb	r7, [r6, #0]
 801af30:	b117      	cbz	r7, 801af38 <std_srvs__srv__Trigger__get_type_description_sources+0x10>
 801af32:	482c      	ldr	r0, [pc, #176]	@ (801afe4 <std_srvs__srv__Trigger__get_type_description_sources+0xbc>)
 801af34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af38:	4d2b      	ldr	r5, [pc, #172]	@ (801afe8 <std_srvs__srv__Trigger__get_type_description_sources+0xc0>)
 801af3a:	4c2c      	ldr	r4, [pc, #176]	@ (801afec <std_srvs__srv__Trigger__get_type_description_sources+0xc4>)
 801af3c:	f8df 90b8 	ldr.w	r9, [pc, #184]	@ 801aff8 <std_srvs__srv__Trigger__get_type_description_sources+0xd0>
 801af40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801af42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801af44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801af46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801af48:	682b      	ldr	r3, [r5, #0]
 801af4a:	4625      	mov	r5, r4
 801af4c:	4638      	mov	r0, r7
 801af4e:	f845 3b04 	str.w	r3, [r5], #4
 801af52:	f000 faa7 	bl	801b4a4 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801af56:	4684      	mov	ip, r0
 801af58:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801af5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801af5e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801af62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801af64:	4638      	mov	r0, r7
 801af66:	f8dc 3000 	ldr.w	r3, [ip]
 801af6a:	602b      	str	r3, [r5, #0]
 801af6c:	f7ff fe1c 	bl	801aba8 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 801af70:	4684      	mov	ip, r0
 801af72:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801af76:	f104 0a28 	add.w	sl, r4, #40	@ 0x28
 801af7a:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 801af7e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801af82:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 801af86:	f8dc 3000 	ldr.w	r3, [ip]
 801af8a:	f8ca 3000 	str.w	r3, [sl]
 801af8e:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 801af92:	f104 084c 	add.w	r8, r4, #76	@ 0x4c
 801af96:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 801af9a:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 801af9e:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 801afa2:	4f13      	ldr	r7, [pc, #76]	@ (801aff0 <std_srvs__srv__Trigger__get_type_description_sources+0xc8>)
 801afa4:	f8d9 3000 	ldr.w	r3, [r9]
 801afa8:	f8c8 3000 	str.w	r3, [r8]
 801afac:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801afae:	f104 0e70 	add.w	lr, r4, #112	@ 0x70
 801afb2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801afb6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801afb8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801afbc:	4d0d      	ldr	r5, [pc, #52]	@ (801aff4 <std_srvs__srv__Trigger__get_type_description_sources+0xcc>)
 801afbe:	683b      	ldr	r3, [r7, #0]
 801afc0:	f8ce 3000 	str.w	r3, [lr]
 801afc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801afc6:	3494      	adds	r4, #148	@ 0x94
 801afc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801afca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801afcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801afce:	f04f 0b01 	mov.w	fp, #1
 801afd2:	682b      	ldr	r3, [r5, #0]
 801afd4:	4803      	ldr	r0, [pc, #12]	@ (801afe4 <std_srvs__srv__Trigger__get_type_description_sources+0xbc>)
 801afd6:	f886 b000 	strb.w	fp, [r6]
 801afda:	6023      	str	r3, [r4, #0]
 801afdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afe0:	2000f834 	.word	0x2000f834
 801afe4:	08021b88 	.word	0x08021b88
 801afe8:	08021c00 	.word	0x08021c00
 801afec:	2000f75c 	.word	0x2000f75c
 801aff0:	08021bdc 	.word	0x08021bdc
 801aff4:	08021bb8 	.word	0x08021bb8
 801aff8:	08021b94 	.word	0x08021b94

0801affc <std_srvs__srv__Trigger_Request__get_type_description_sources>:
 801affc:	4b09      	ldr	r3, [pc, #36]	@ (801b024 <std_srvs__srv__Trigger_Request__get_type_description_sources+0x28>)
 801affe:	781a      	ldrb	r2, [r3, #0]
 801b000:	b96a      	cbnz	r2, 801b01e <std_srvs__srv__Trigger_Request__get_type_description_sources+0x22>
 801b002:	b430      	push	{r4, r5}
 801b004:	4d08      	ldr	r5, [pc, #32]	@ (801b028 <std_srvs__srv__Trigger_Request__get_type_description_sources+0x2c>)
 801b006:	4c09      	ldr	r4, [pc, #36]	@ (801b02c <std_srvs__srv__Trigger_Request__get_type_description_sources+0x30>)
 801b008:	2201      	movs	r2, #1
 801b00a:	701a      	strb	r2, [r3, #0]
 801b00c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b00e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b014:	682b      	ldr	r3, [r5, #0]
 801b016:	4806      	ldr	r0, [pc, #24]	@ (801b030 <std_srvs__srv__Trigger_Request__get_type_description_sources+0x34>)
 801b018:	6023      	str	r3, [r4, #0]
 801b01a:	bc30      	pop	{r4, r5}
 801b01c:	4770      	bx	lr
 801b01e:	4804      	ldr	r0, [pc, #16]	@ (801b030 <std_srvs__srv__Trigger_Request__get_type_description_sources+0x34>)
 801b020:	4770      	bx	lr
 801b022:	bf00      	nop
 801b024:	2000f758 	.word	0x2000f758
 801b028:	08021bdc 	.word	0x08021bdc
 801b02c:	2000f734 	.word	0x2000f734
 801b030:	08021b7c 	.word	0x08021b7c

0801b034 <std_srvs__srv__Trigger_Response__get_type_description_sources>:
 801b034:	4b09      	ldr	r3, [pc, #36]	@ (801b05c <std_srvs__srv__Trigger_Response__get_type_description_sources+0x28>)
 801b036:	781a      	ldrb	r2, [r3, #0]
 801b038:	b96a      	cbnz	r2, 801b056 <std_srvs__srv__Trigger_Response__get_type_description_sources+0x22>
 801b03a:	b430      	push	{r4, r5}
 801b03c:	4d08      	ldr	r5, [pc, #32]	@ (801b060 <std_srvs__srv__Trigger_Response__get_type_description_sources+0x2c>)
 801b03e:	4c09      	ldr	r4, [pc, #36]	@ (801b064 <std_srvs__srv__Trigger_Response__get_type_description_sources+0x30>)
 801b040:	2201      	movs	r2, #1
 801b042:	701a      	strb	r2, [r3, #0]
 801b044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b04a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b04c:	682b      	ldr	r3, [r5, #0]
 801b04e:	4806      	ldr	r0, [pc, #24]	@ (801b068 <std_srvs__srv__Trigger_Response__get_type_description_sources+0x34>)
 801b050:	6023      	str	r3, [r4, #0]
 801b052:	bc30      	pop	{r4, r5}
 801b054:	4770      	bx	lr
 801b056:	4804      	ldr	r0, [pc, #16]	@ (801b068 <std_srvs__srv__Trigger_Response__get_type_description_sources+0x34>)
 801b058:	4770      	bx	lr
 801b05a:	bf00      	nop
 801b05c:	2000f730 	.word	0x2000f730
 801b060:	08021bb8 	.word	0x08021bb8
 801b064:	2000f70c 	.word	0x2000f70c
 801b068:	08021b70 	.word	0x08021b70

0801b06c <std_srvs__srv__Trigger_Event__get_type_description_sources>:
 801b06c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b070:	4e24      	ldr	r6, [pc, #144]	@ (801b104 <std_srvs__srv__Trigger_Event__get_type_description_sources+0x98>)
 801b072:	7837      	ldrb	r7, [r6, #0]
 801b074:	b117      	cbz	r7, 801b07c <std_srvs__srv__Trigger_Event__get_type_description_sources+0x10>
 801b076:	4824      	ldr	r0, [pc, #144]	@ (801b108 <std_srvs__srv__Trigger_Event__get_type_description_sources+0x9c>)
 801b078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b07c:	4d23      	ldr	r5, [pc, #140]	@ (801b10c <std_srvs__srv__Trigger_Event__get_type_description_sources+0xa0>)
 801b07e:	4c24      	ldr	r4, [pc, #144]	@ (801b110 <std_srvs__srv__Trigger_Event__get_type_description_sources+0xa4>)
 801b080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b088:	682b      	ldr	r3, [r5, #0]
 801b08a:	4625      	mov	r5, r4
 801b08c:	4638      	mov	r0, r7
 801b08e:	f845 3b04 	str.w	r3, [r5], #4
 801b092:	f000 fa07 	bl	801b4a4 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801b096:	4684      	mov	ip, r0
 801b098:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b09c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b09e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b0a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b0a4:	4638      	mov	r0, r7
 801b0a6:	f8dc 3000 	ldr.w	r3, [ip]
 801b0aa:	602b      	str	r3, [r5, #0]
 801b0ac:	f7ff fd7c 	bl	801aba8 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 801b0b0:	4684      	mov	ip, r0
 801b0b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b0b6:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 801b0ba:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 801b0be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b0c2:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 801b0c6:	4f13      	ldr	r7, [pc, #76]	@ (801b114 <std_srvs__srv__Trigger_Event__get_type_description_sources+0xa8>)
 801b0c8:	f8dc 3000 	ldr.w	r3, [ip]
 801b0cc:	f8c8 3000 	str.w	r3, [r8]
 801b0d0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801b0d2:	f104 0e4c 	add.w	lr, r4, #76	@ 0x4c
 801b0d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b0da:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801b0dc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b0e0:	4d0d      	ldr	r5, [pc, #52]	@ (801b118 <std_srvs__srv__Trigger_Event__get_type_description_sources+0xac>)
 801b0e2:	683b      	ldr	r3, [r7, #0]
 801b0e4:	f8ce 3000 	str.w	r3, [lr]
 801b0e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b0ea:	3470      	adds	r4, #112	@ 0x70
 801b0ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b0ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b0f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b0f2:	f04f 0901 	mov.w	r9, #1
 801b0f6:	682b      	ldr	r3, [r5, #0]
 801b0f8:	4803      	ldr	r0, [pc, #12]	@ (801b108 <std_srvs__srv__Trigger_Event__get_type_description_sources+0x9c>)
 801b0fa:	f886 9000 	strb.w	r9, [r6]
 801b0fe:	6023      	str	r3, [r4, #0]
 801b100:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b104:	2000f708 	.word	0x2000f708
 801b108:	08021b64 	.word	0x08021b64
 801b10c:	08021b94 	.word	0x08021b94
 801b110:	2000f654 	.word	0x2000f654
 801b114:	08021bdc 	.word	0x08021bdc
 801b118:	08021bb8 	.word	0x08021bb8

0801b11c <std_srvs__srv__Trigger_Event__fini.part.0>:
 801b11c:	b530      	push	{r4, r5, lr}
 801b11e:	4605      	mov	r5, r0
 801b120:	b087      	sub	sp, #28
 801b122:	f7ff fd7d 	bl	801ac20 <service_msgs__msg__ServiceEventInfo__fini>
 801b126:	a801      	add	r0, sp, #4
 801b128:	f7f4 f964 	bl	800f3f4 <rcutils_get_default_allocator>
 801b12c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801b12e:	b130      	cbz	r0, 801b13e <std_srvs__srv__Trigger_Event__fini.part.0+0x22>
 801b130:	9b02      	ldr	r3, [sp, #8]
 801b132:	9905      	ldr	r1, [sp, #20]
 801b134:	4798      	blx	r3
 801b136:	2300      	movs	r3, #0
 801b138:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801b13c:	632b      	str	r3, [r5, #48]	@ 0x30
 801b13e:	a801      	add	r0, sp, #4
 801b140:	f7f4 f958 	bl	800f3f4 <rcutils_get_default_allocator>
 801b144:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801b146:	b1b3      	cbz	r3, 801b176 <std_srvs__srv__Trigger_Event__fini.part.0+0x5a>
 801b148:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 801b14a:	b162      	cbz	r2, 801b166 <std_srvs__srv__Trigger_Event__fini.part.0+0x4a>
 801b14c:	2400      	movs	r4, #0
 801b14e:	eb13 1004 	adds.w	r0, r3, r4, lsl #4
 801b152:	f100 0004 	add.w	r0, r0, #4
 801b156:	d010      	beq.n	801b17a <std_srvs__srv__Trigger_Event__fini.part.0+0x5e>
 801b158:	f7f5 fd58 	bl	8010c0c <rosidl_runtime_c__String__fini>
 801b15c:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 801b15e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801b160:	3401      	adds	r4, #1
 801b162:	4294      	cmp	r4, r2
 801b164:	d3f3      	bcc.n	801b14e <std_srvs__srv__Trigger_Event__fini.part.0+0x32>
 801b166:	4618      	mov	r0, r3
 801b168:	9a02      	ldr	r2, [sp, #8]
 801b16a:	9905      	ldr	r1, [sp, #20]
 801b16c:	4790      	blx	r2
 801b16e:	2300      	movs	r3, #0
 801b170:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801b174:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801b176:	b007      	add	sp, #28
 801b178:	bd30      	pop	{r4, r5, pc}
 801b17a:	3401      	adds	r4, #1
 801b17c:	4294      	cmp	r4, r2
 801b17e:	d3e6      	bcc.n	801b14e <std_srvs__srv__Trigger_Event__fini.part.0+0x32>
 801b180:	e7f1      	b.n	801b166 <std_srvs__srv__Trigger_Event__fini.part.0+0x4a>
 801b182:	bf00      	nop

0801b184 <std_srvs__srv__Trigger_Request__init>:
 801b184:	3800      	subs	r0, #0
 801b186:	bf18      	it	ne
 801b188:	2001      	movne	r0, #1
 801b18a:	4770      	bx	lr

0801b18c <std_srvs__srv__Trigger_Request__fini>:
 801b18c:	4770      	bx	lr
 801b18e:	bf00      	nop

0801b190 <std_srvs__srv__Trigger_Request__copy>:
 801b190:	b128      	cbz	r0, 801b19e <std_srvs__srv__Trigger_Request__copy+0xe>
 801b192:	b119      	cbz	r1, 801b19c <std_srvs__srv__Trigger_Request__copy+0xc>
 801b194:	7803      	ldrb	r3, [r0, #0]
 801b196:	700b      	strb	r3, [r1, #0]
 801b198:	2001      	movs	r0, #1
 801b19a:	4770      	bx	lr
 801b19c:	4608      	mov	r0, r1
 801b19e:	4770      	bx	lr

0801b1a0 <std_srvs__srv__Trigger_Request__Sequence__init>:
 801b1a0:	b1c0      	cbz	r0, 801b1d4 <std_srvs__srv__Trigger_Request__Sequence__init+0x34>
 801b1a2:	b530      	push	{r4, r5, lr}
 801b1a4:	b087      	sub	sp, #28
 801b1a6:	460d      	mov	r5, r1
 801b1a8:	4604      	mov	r4, r0
 801b1aa:	a801      	add	r0, sp, #4
 801b1ac:	f7f4 f922 	bl	800f3f4 <rcutils_get_default_allocator>
 801b1b0:	9a05      	ldr	r2, [sp, #20]
 801b1b2:	b935      	cbnz	r5, 801b1c2 <std_srvs__srv__Trigger_Request__Sequence__init+0x22>
 801b1b4:	4628      	mov	r0, r5
 801b1b6:	e9c4 0500 	strd	r0, r5, [r4]
 801b1ba:	2001      	movs	r0, #1
 801b1bc:	60a5      	str	r5, [r4, #8]
 801b1be:	b007      	add	sp, #28
 801b1c0:	bd30      	pop	{r4, r5, pc}
 801b1c2:	9b04      	ldr	r3, [sp, #16]
 801b1c4:	2101      	movs	r1, #1
 801b1c6:	4628      	mov	r0, r5
 801b1c8:	4798      	blx	r3
 801b1ca:	2800      	cmp	r0, #0
 801b1cc:	d1f3      	bne.n	801b1b6 <std_srvs__srv__Trigger_Request__Sequence__init+0x16>
 801b1ce:	2000      	movs	r0, #0
 801b1d0:	b007      	add	sp, #28
 801b1d2:	bd30      	pop	{r4, r5, pc}
 801b1d4:	2000      	movs	r0, #0
 801b1d6:	4770      	bx	lr

0801b1d8 <std_srvs__srv__Trigger_Request__Sequence__fini>:
 801b1d8:	b180      	cbz	r0, 801b1fc <std_srvs__srv__Trigger_Request__Sequence__fini+0x24>
 801b1da:	b510      	push	{r4, lr}
 801b1dc:	4604      	mov	r4, r0
 801b1de:	b086      	sub	sp, #24
 801b1e0:	a801      	add	r0, sp, #4
 801b1e2:	f7f4 f907 	bl	800f3f4 <rcutils_get_default_allocator>
 801b1e6:	6820      	ldr	r0, [r4, #0]
 801b1e8:	b130      	cbz	r0, 801b1f8 <std_srvs__srv__Trigger_Request__Sequence__fini+0x20>
 801b1ea:	9b02      	ldr	r3, [sp, #8]
 801b1ec:	9905      	ldr	r1, [sp, #20]
 801b1ee:	4798      	blx	r3
 801b1f0:	2300      	movs	r3, #0
 801b1f2:	e9c4 3300 	strd	r3, r3, [r4]
 801b1f6:	60a3      	str	r3, [r4, #8]
 801b1f8:	b006      	add	sp, #24
 801b1fa:	bd10      	pop	{r4, pc}
 801b1fc:	4770      	bx	lr
 801b1fe:	bf00      	nop

0801b200 <std_srvs__srv__Trigger_Response__init>:
 801b200:	b158      	cbz	r0, 801b21a <std_srvs__srv__Trigger_Response__init+0x1a>
 801b202:	b510      	push	{r4, lr}
 801b204:	1d04      	adds	r4, r0, #4
 801b206:	4620      	mov	r0, r4
 801b208:	f7f5 fce6 	bl	8010bd8 <rosidl_runtime_c__String__init>
 801b20c:	b100      	cbz	r0, 801b210 <std_srvs__srv__Trigger_Response__init+0x10>
 801b20e:	bd10      	pop	{r4, pc}
 801b210:	4620      	mov	r0, r4
 801b212:	f7f5 fcfb 	bl	8010c0c <rosidl_runtime_c__String__fini>
 801b216:	2000      	movs	r0, #0
 801b218:	bd10      	pop	{r4, pc}
 801b21a:	2000      	movs	r0, #0
 801b21c:	4770      	bx	lr
 801b21e:	bf00      	nop

0801b220 <std_srvs__srv__Trigger_Response__fini>:
 801b220:	b110      	cbz	r0, 801b228 <std_srvs__srv__Trigger_Response__fini+0x8>
 801b222:	3004      	adds	r0, #4
 801b224:	f7f5 bcf2 	b.w	8010c0c <rosidl_runtime_c__String__fini>
 801b228:	4770      	bx	lr
 801b22a:	bf00      	nop

0801b22c <std_srvs__srv__Trigger_Response__copy>:
 801b22c:	b130      	cbz	r0, 801b23c <std_srvs__srv__Trigger_Response__copy+0x10>
 801b22e:	b129      	cbz	r1, 801b23c <std_srvs__srv__Trigger_Response__copy+0x10>
 801b230:	f810 3b04 	ldrb.w	r3, [r0], #4
 801b234:	f801 3b04 	strb.w	r3, [r1], #4
 801b238:	f7f5 bd5e 	b.w	8010cf8 <rosidl_runtime_c__String__copy>
 801b23c:	2000      	movs	r0, #0
 801b23e:	4770      	bx	lr

0801b240 <std_srvs__srv__Trigger_Response__Sequence__init>:
 801b240:	2800      	cmp	r0, #0
 801b242:	d03c      	beq.n	801b2be <std_srvs__srv__Trigger_Response__Sequence__init+0x7e>
 801b244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b248:	b087      	sub	sp, #28
 801b24a:	460d      	mov	r5, r1
 801b24c:	4607      	mov	r7, r0
 801b24e:	a801      	add	r0, sp, #4
 801b250:	f7f4 f8d0 	bl	800f3f4 <rcutils_get_default_allocator>
 801b254:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801b258:	b34d      	cbz	r5, 801b2ae <std_srvs__srv__Trigger_Response__Sequence__init+0x6e>
 801b25a:	9b04      	ldr	r3, [sp, #16]
 801b25c:	464a      	mov	r2, r9
 801b25e:	2110      	movs	r1, #16
 801b260:	4628      	mov	r0, r5
 801b262:	4798      	blx	r3
 801b264:	4680      	mov	r8, r0
 801b266:	b300      	cbz	r0, 801b2aa <std_srvs__srv__Trigger_Response__Sequence__init+0x6a>
 801b268:	1d06      	adds	r6, r0, #4
 801b26a:	2400      	movs	r4, #0
 801b26c:	e004      	b.n	801b278 <std_srvs__srv__Trigger_Response__Sequence__init+0x38>
 801b26e:	3401      	adds	r4, #1
 801b270:	42a5      	cmp	r5, r4
 801b272:	f106 0610 	add.w	r6, r6, #16
 801b276:	d01b      	beq.n	801b2b0 <std_srvs__srv__Trigger_Response__Sequence__init+0x70>
 801b278:	4630      	mov	r0, r6
 801b27a:	f7f5 fcad 	bl	8010bd8 <rosidl_runtime_c__String__init>
 801b27e:	2800      	cmp	r0, #0
 801b280:	d1f5      	bne.n	801b26e <std_srvs__srv__Trigger_Response__Sequence__init+0x2e>
 801b282:	4630      	mov	r0, r6
 801b284:	f7f5 fcc2 	bl	8010c0c <rosidl_runtime_c__String__fini>
 801b288:	42a5      	cmp	r5, r4
 801b28a:	d911      	bls.n	801b2b0 <std_srvs__srv__Trigger_Response__Sequence__init+0x70>
 801b28c:	b14c      	cbz	r4, 801b2a2 <std_srvs__srv__Trigger_Response__Sequence__init+0x62>
 801b28e:	eb08 1504 	add.w	r5, r8, r4, lsl #4
 801b292:	3d0c      	subs	r5, #12
 801b294:	4628      	mov	r0, r5
 801b296:	f7f5 fcb9 	bl	8010c0c <rosidl_runtime_c__String__fini>
 801b29a:	3c01      	subs	r4, #1
 801b29c:	f1a5 0510 	sub.w	r5, r5, #16
 801b2a0:	d1f8      	bne.n	801b294 <std_srvs__srv__Trigger_Response__Sequence__init+0x54>
 801b2a2:	9b02      	ldr	r3, [sp, #8]
 801b2a4:	4649      	mov	r1, r9
 801b2a6:	4640      	mov	r0, r8
 801b2a8:	4798      	blx	r3
 801b2aa:	2000      	movs	r0, #0
 801b2ac:	e004      	b.n	801b2b8 <std_srvs__srv__Trigger_Response__Sequence__init+0x78>
 801b2ae:	46a8      	mov	r8, r5
 801b2b0:	e9c7 8500 	strd	r8, r5, [r7]
 801b2b4:	60bd      	str	r5, [r7, #8]
 801b2b6:	2001      	movs	r0, #1
 801b2b8:	b007      	add	sp, #28
 801b2ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b2be:	2000      	movs	r0, #0
 801b2c0:	4770      	bx	lr
 801b2c2:	bf00      	nop

0801b2c4 <std_srvs__srv__Trigger_Response__Sequence__fini>:
 801b2c4:	b320      	cbz	r0, 801b310 <std_srvs__srv__Trigger_Response__Sequence__fini+0x4c>
 801b2c6:	b530      	push	{r4, r5, lr}
 801b2c8:	4605      	mov	r5, r0
 801b2ca:	b087      	sub	sp, #28
 801b2cc:	a801      	add	r0, sp, #4
 801b2ce:	f7f4 f891 	bl	800f3f4 <rcutils_get_default_allocator>
 801b2d2:	682b      	ldr	r3, [r5, #0]
 801b2d4:	b1b3      	cbz	r3, 801b304 <std_srvs__srv__Trigger_Response__Sequence__fini+0x40>
 801b2d6:	68aa      	ldr	r2, [r5, #8]
 801b2d8:	b162      	cbz	r2, 801b2f4 <std_srvs__srv__Trigger_Response__Sequence__fini+0x30>
 801b2da:	2400      	movs	r4, #0
 801b2dc:	eb13 1004 	adds.w	r0, r3, r4, lsl #4
 801b2e0:	f100 0004 	add.w	r0, r0, #4
 801b2e4:	d010      	beq.n	801b308 <std_srvs__srv__Trigger_Response__Sequence__fini+0x44>
 801b2e6:	f7f5 fc91 	bl	8010c0c <rosidl_runtime_c__String__fini>
 801b2ea:	68aa      	ldr	r2, [r5, #8]
 801b2ec:	682b      	ldr	r3, [r5, #0]
 801b2ee:	3401      	adds	r4, #1
 801b2f0:	4294      	cmp	r4, r2
 801b2f2:	d3f3      	bcc.n	801b2dc <std_srvs__srv__Trigger_Response__Sequence__fini+0x18>
 801b2f4:	4618      	mov	r0, r3
 801b2f6:	9a02      	ldr	r2, [sp, #8]
 801b2f8:	9905      	ldr	r1, [sp, #20]
 801b2fa:	4790      	blx	r2
 801b2fc:	2300      	movs	r3, #0
 801b2fe:	e9c5 3300 	strd	r3, r3, [r5]
 801b302:	60ab      	str	r3, [r5, #8]
 801b304:	b007      	add	sp, #28
 801b306:	bd30      	pop	{r4, r5, pc}
 801b308:	3401      	adds	r4, #1
 801b30a:	4294      	cmp	r4, r2
 801b30c:	d3e6      	bcc.n	801b2dc <std_srvs__srv__Trigger_Response__Sequence__fini+0x18>
 801b30e:	e7f1      	b.n	801b2f4 <std_srvs__srv__Trigger_Response__Sequence__fini+0x30>
 801b310:	4770      	bx	lr
 801b312:	bf00      	nop

0801b314 <std_srvs__srv__Trigger_Event__init>:
 801b314:	b570      	push	{r4, r5, r6, lr}
 801b316:	b086      	sub	sp, #24
 801b318:	b1b8      	cbz	r0, 801b34a <std_srvs__srv__Trigger_Event__init+0x36>
 801b31a:	4604      	mov	r4, r0
 801b31c:	f7ff fc70 	bl	801ac00 <service_msgs__msg__ServiceEventInfo__init>
 801b320:	4605      	mov	r5, r0
 801b322:	b178      	cbz	r0, 801b344 <std_srvs__srv__Trigger_Event__init+0x30>
 801b324:	2600      	movs	r6, #0
 801b326:	4668      	mov	r0, sp
 801b328:	f7f4 f864 	bl	800f3f4 <rcutils_get_default_allocator>
 801b32c:	4668      	mov	r0, sp
 801b32e:	e9c4 660a 	strd	r6, r6, [r4, #40]	@ 0x28
 801b332:	6326      	str	r6, [r4, #48]	@ 0x30
 801b334:	f7f4 f85e 	bl	800f3f4 <rcutils_get_default_allocator>
 801b338:	4628      	mov	r0, r5
 801b33a:	e9c4 660d 	strd	r6, r6, [r4, #52]	@ 0x34
 801b33e:	63e6      	str	r6, [r4, #60]	@ 0x3c
 801b340:	b006      	add	sp, #24
 801b342:	bd70      	pop	{r4, r5, r6, pc}
 801b344:	4620      	mov	r0, r4
 801b346:	f7ff fee9 	bl	801b11c <std_srvs__srv__Trigger_Event__fini.part.0>
 801b34a:	2500      	movs	r5, #0
 801b34c:	4628      	mov	r0, r5
 801b34e:	b006      	add	sp, #24
 801b350:	bd70      	pop	{r4, r5, r6, pc}
 801b352:	bf00      	nop

0801b354 <std_srvs__srv__Trigger_Event__fini>:
 801b354:	2800      	cmp	r0, #0
 801b356:	d032      	beq.n	801b3be <std_srvs__srv__Trigger_Event__fini+0x6a>
 801b358:	b530      	push	{r4, r5, lr}
 801b35a:	4605      	mov	r5, r0
 801b35c:	b087      	sub	sp, #28
 801b35e:	f7ff fc5f 	bl	801ac20 <service_msgs__msg__ServiceEventInfo__fini>
 801b362:	a801      	add	r0, sp, #4
 801b364:	f7f4 f846 	bl	800f3f4 <rcutils_get_default_allocator>
 801b368:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801b36a:	b130      	cbz	r0, 801b37a <std_srvs__srv__Trigger_Event__fini+0x26>
 801b36c:	9b02      	ldr	r3, [sp, #8]
 801b36e:	9905      	ldr	r1, [sp, #20]
 801b370:	4798      	blx	r3
 801b372:	2300      	movs	r3, #0
 801b374:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801b378:	632b      	str	r3, [r5, #48]	@ 0x30
 801b37a:	a801      	add	r0, sp, #4
 801b37c:	f7f4 f83a 	bl	800f3f4 <rcutils_get_default_allocator>
 801b380:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801b382:	b1b3      	cbz	r3, 801b3b2 <std_srvs__srv__Trigger_Event__fini+0x5e>
 801b384:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 801b386:	b162      	cbz	r2, 801b3a2 <std_srvs__srv__Trigger_Event__fini+0x4e>
 801b388:	2400      	movs	r4, #0
 801b38a:	eb13 1004 	adds.w	r0, r3, r4, lsl #4
 801b38e:	f100 0004 	add.w	r0, r0, #4
 801b392:	d010      	beq.n	801b3b6 <std_srvs__srv__Trigger_Event__fini+0x62>
 801b394:	f7f5 fc3a 	bl	8010c0c <rosidl_runtime_c__String__fini>
 801b398:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 801b39a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801b39c:	3401      	adds	r4, #1
 801b39e:	4294      	cmp	r4, r2
 801b3a0:	d3f3      	bcc.n	801b38a <std_srvs__srv__Trigger_Event__fini+0x36>
 801b3a2:	4618      	mov	r0, r3
 801b3a4:	9a02      	ldr	r2, [sp, #8]
 801b3a6:	9905      	ldr	r1, [sp, #20]
 801b3a8:	4790      	blx	r2
 801b3aa:	2300      	movs	r3, #0
 801b3ac:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801b3b0:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801b3b2:	b007      	add	sp, #28
 801b3b4:	bd30      	pop	{r4, r5, pc}
 801b3b6:	3401      	adds	r4, #1
 801b3b8:	4294      	cmp	r4, r2
 801b3ba:	d3e6      	bcc.n	801b38a <std_srvs__srv__Trigger_Event__fini+0x36>
 801b3bc:	e7f1      	b.n	801b3a2 <std_srvs__srv__Trigger_Event__fini+0x4e>
 801b3be:	4770      	bx	lr

0801b3c0 <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__Trigger>:
 801b3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b3c4:	2900      	cmp	r1, #0
 801b3c6:	d03e      	beq.n	801b446 <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__Trigger+0x86>
 801b3c8:	4605      	mov	r5, r0
 801b3ca:	2800      	cmp	r0, #0
 801b3cc:	d03b      	beq.n	801b446 <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__Trigger+0x86>
 801b3ce:	4698      	mov	r8, r3
 801b3d0:	460e      	mov	r6, r1
 801b3d2:	680b      	ldr	r3, [r1, #0]
 801b3d4:	6909      	ldr	r1, [r1, #16]
 801b3d6:	2040      	movs	r0, #64	@ 0x40
 801b3d8:	4617      	mov	r7, r2
 801b3da:	4798      	blx	r3
 801b3dc:	4604      	mov	r4, r0
 801b3de:	f7ff ff99 	bl	801b314 <std_srvs__srv__Trigger_Event__init>
 801b3e2:	b360      	cbz	r0, 801b43e <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__Trigger+0x7e>
 801b3e4:	782b      	ldrb	r3, [r5, #0]
 801b3e6:	7023      	strb	r3, [r4, #0]
 801b3e8:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 801b3ec:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 801b3f0:	e9c4 2301 	strd	r2, r3, [r4, #4]
 801b3f4:	e9c4 0108 	strd	r0, r1, [r4, #32]
 801b3f8:	68e9      	ldr	r1, [r5, #12]
 801b3fa:	692a      	ldr	r2, [r5, #16]
 801b3fc:	696b      	ldr	r3, [r5, #20]
 801b3fe:	69a8      	ldr	r0, [r5, #24]
 801b400:	61a0      	str	r0, [r4, #24]
 801b402:	60e1      	str	r1, [r4, #12]
 801b404:	6122      	str	r2, [r4, #16]
 801b406:	6163      	str	r3, [r4, #20]
 801b408:	b14f      	cbz	r7, 801b41e <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__Trigger+0x5e>
 801b40a:	2101      	movs	r1, #1
 801b40c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801b410:	f7ff fec6 	bl	801b1a0 <std_srvs__srv__Trigger_Request__Sequence__init>
 801b414:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801b416:	4638      	mov	r0, r7
 801b418:	f7ff feba 	bl	801b190 <std_srvs__srv__Trigger_Request__copy>
 801b41c:	b178      	cbz	r0, 801b43e <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__Trigger+0x7e>
 801b41e:	f1b8 0f00 	cmp.w	r8, #0
 801b422:	d009      	beq.n	801b438 <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__Trigger+0x78>
 801b424:	2101      	movs	r1, #1
 801b426:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 801b42a:	f7ff ff09 	bl	801b240 <std_srvs__srv__Trigger_Response__Sequence__init>
 801b42e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b430:	4640      	mov	r0, r8
 801b432:	f7ff fefb 	bl	801b22c <std_srvs__srv__Trigger_Response__copy>
 801b436:	b110      	cbz	r0, 801b43e <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__Trigger+0x7e>
 801b438:	4620      	mov	r0, r4
 801b43a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b43e:	6873      	ldr	r3, [r6, #4]
 801b440:	6931      	ldr	r1, [r6, #16]
 801b442:	4620      	mov	r0, r4
 801b444:	4798      	blx	r3
 801b446:	2400      	movs	r4, #0
 801b448:	4620      	mov	r0, r4
 801b44a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b44e:	bf00      	nop

0801b450 <rosidl_typesupport_c__destroy_service_event_message__std_srvs__srv__Trigger>:
 801b450:	b538      	push	{r3, r4, r5, lr}
 801b452:	460d      	mov	r5, r1
 801b454:	b199      	cbz	r1, 801b47e <rosidl_typesupport_c__destroy_service_event_message__std_srvs__srv__Trigger+0x2e>
 801b456:	4604      	mov	r4, r0
 801b458:	b180      	cbz	r0, 801b47c <rosidl_typesupport_c__destroy_service_event_message__std_srvs__srv__Trigger+0x2c>
 801b45a:	f7ff ff7b 	bl	801b354 <std_srvs__srv__Trigger_Event__fini>
 801b45e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801b460:	b110      	cbz	r0, 801b468 <rosidl_typesupport_c__destroy_service_event_message__std_srvs__srv__Trigger+0x18>
 801b462:	686b      	ldr	r3, [r5, #4]
 801b464:	6929      	ldr	r1, [r5, #16]
 801b466:	4798      	blx	r3
 801b468:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 801b46a:	b110      	cbz	r0, 801b472 <rosidl_typesupport_c__destroy_service_event_message__std_srvs__srv__Trigger+0x22>
 801b46c:	686b      	ldr	r3, [r5, #4]
 801b46e:	6929      	ldr	r1, [r5, #16]
 801b470:	4798      	blx	r3
 801b472:	4620      	mov	r0, r4
 801b474:	686b      	ldr	r3, [r5, #4]
 801b476:	6929      	ldr	r1, [r5, #16]
 801b478:	4798      	blx	r3
 801b47a:	2001      	movs	r0, #1
 801b47c:	bd38      	pop	{r3, r4, r5, pc}
 801b47e:	4608      	mov	r0, r1
 801b480:	bd38      	pop	{r3, r4, r5, pc}
 801b482:	bf00      	nop

0801b484 <builtin_interfaces__msg__Time__get_type_hash>:
 801b484:	4800      	ldr	r0, [pc, #0]	@ (801b488 <builtin_interfaces__msg__Time__get_type_hash+0x4>)
 801b486:	4770      	bx	lr
 801b488:	200030d8 	.word	0x200030d8

0801b48c <builtin_interfaces__msg__Time__get_type_description>:
 801b48c:	4b03      	ldr	r3, [pc, #12]	@ (801b49c <builtin_interfaces__msg__Time__get_type_description+0x10>)
 801b48e:	781a      	ldrb	r2, [r3, #0]
 801b490:	b90a      	cbnz	r2, 801b496 <builtin_interfaces__msg__Time__get_type_description+0xa>
 801b492:	2201      	movs	r2, #1
 801b494:	701a      	strb	r2, [r3, #0]
 801b496:	4802      	ldr	r0, [pc, #8]	@ (801b4a0 <builtin_interfaces__msg__Time__get_type_description+0x14>)
 801b498:	4770      	bx	lr
 801b49a:	bf00      	nop
 801b49c:	2000f861 	.word	0x2000f861
 801b4a0:	08021ce4 	.word	0x08021ce4

0801b4a4 <builtin_interfaces__msg__Time__get_individual_type_description_source>:
 801b4a4:	4800      	ldr	r0, [pc, #0]	@ (801b4a8 <builtin_interfaces__msg__Time__get_individual_type_description_source+0x4>)
 801b4a6:	4770      	bx	lr
 801b4a8:	08021cc0 	.word	0x08021cc0

0801b4ac <builtin_interfaces__msg__Time__get_type_description_sources>:
 801b4ac:	4b09      	ldr	r3, [pc, #36]	@ (801b4d4 <builtin_interfaces__msg__Time__get_type_description_sources+0x28>)
 801b4ae:	781a      	ldrb	r2, [r3, #0]
 801b4b0:	b96a      	cbnz	r2, 801b4ce <builtin_interfaces__msg__Time__get_type_description_sources+0x22>
 801b4b2:	b430      	push	{r4, r5}
 801b4b4:	4d08      	ldr	r5, [pc, #32]	@ (801b4d8 <builtin_interfaces__msg__Time__get_type_description_sources+0x2c>)
 801b4b6:	4c09      	ldr	r4, [pc, #36]	@ (801b4dc <builtin_interfaces__msg__Time__get_type_description_sources+0x30>)
 801b4b8:	2201      	movs	r2, #1
 801b4ba:	701a      	strb	r2, [r3, #0]
 801b4bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b4be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b4c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b4c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b4c4:	682b      	ldr	r3, [r5, #0]
 801b4c6:	4806      	ldr	r0, [pc, #24]	@ (801b4e0 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 801b4c8:	6023      	str	r3, [r4, #0]
 801b4ca:	bc30      	pop	{r4, r5}
 801b4cc:	4770      	bx	lr
 801b4ce:	4804      	ldr	r0, [pc, #16]	@ (801b4e0 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 801b4d0:	4770      	bx	lr
 801b4d2:	bf00      	nop
 801b4d4:	2000f860 	.word	0x2000f860
 801b4d8:	08021cc0 	.word	0x08021cc0
 801b4dc:	2000f83c 	.word	0x2000f83c
 801b4e0:	08021cb4 	.word	0x08021cb4

0801b4e4 <builtin_interfaces__msg__Time__init>:
 801b4e4:	3800      	subs	r0, #0
 801b4e6:	bf18      	it	ne
 801b4e8:	2001      	movne	r0, #1
 801b4ea:	4770      	bx	lr

0801b4ec <builtin_interfaces__msg__Time__fini>:
 801b4ec:	4770      	bx	lr
 801b4ee:	bf00      	nop

0801b4f0 <builtin_interfaces__msg__Time__copy>:
 801b4f0:	b138      	cbz	r0, 801b502 <builtin_interfaces__msg__Time__copy+0x12>
 801b4f2:	b129      	cbz	r1, 801b500 <builtin_interfaces__msg__Time__copy+0x10>
 801b4f4:	e9d0 2300 	ldrd	r2, r3, [r0]
 801b4f8:	2001      	movs	r0, #1
 801b4fa:	e9c1 2300 	strd	r2, r3, [r1]
 801b4fe:	4770      	bx	lr
 801b500:	4608      	mov	r0, r1
 801b502:	4770      	bx	lr

0801b504 <geometry_msgs__msg__Quaternion__get_type_hash>:
 801b504:	4800      	ldr	r0, [pc, #0]	@ (801b508 <geometry_msgs__msg__Quaternion__get_type_hash+0x4>)
 801b506:	4770      	bx	lr
 801b508:	200032b0 	.word	0x200032b0

0801b50c <geometry_msgs__msg__Quaternion__get_type_description>:
 801b50c:	4b03      	ldr	r3, [pc, #12]	@ (801b51c <geometry_msgs__msg__Quaternion__get_type_description+0x10>)
 801b50e:	781a      	ldrb	r2, [r3, #0]
 801b510:	b90a      	cbnz	r2, 801b516 <geometry_msgs__msg__Quaternion__get_type_description+0xa>
 801b512:	2201      	movs	r2, #1
 801b514:	701a      	strb	r2, [r3, #0]
 801b516:	4802      	ldr	r0, [pc, #8]	@ (801b520 <geometry_msgs__msg__Quaternion__get_type_description+0x14>)
 801b518:	4770      	bx	lr
 801b51a:	bf00      	nop
 801b51c:	2000f889 	.word	0x2000f889
 801b520:	08021d38 	.word	0x08021d38

0801b524 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>:
 801b524:	4800      	ldr	r0, [pc, #0]	@ (801b528 <geometry_msgs__msg__Quaternion__get_individual_type_description_source+0x4>)
 801b526:	4770      	bx	lr
 801b528:	08021d14 	.word	0x08021d14

0801b52c <geometry_msgs__msg__Quaternion__get_type_description_sources>:
 801b52c:	4b09      	ldr	r3, [pc, #36]	@ (801b554 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x28>)
 801b52e:	781a      	ldrb	r2, [r3, #0]
 801b530:	b96a      	cbnz	r2, 801b54e <geometry_msgs__msg__Quaternion__get_type_description_sources+0x22>
 801b532:	b430      	push	{r4, r5}
 801b534:	4d08      	ldr	r5, [pc, #32]	@ (801b558 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x2c>)
 801b536:	4c09      	ldr	r4, [pc, #36]	@ (801b55c <geometry_msgs__msg__Quaternion__get_type_description_sources+0x30>)
 801b538:	2201      	movs	r2, #1
 801b53a:	701a      	strb	r2, [r3, #0]
 801b53c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b53e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b544:	682b      	ldr	r3, [r5, #0]
 801b546:	4806      	ldr	r0, [pc, #24]	@ (801b560 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x34>)
 801b548:	6023      	str	r3, [r4, #0]
 801b54a:	bc30      	pop	{r4, r5}
 801b54c:	4770      	bx	lr
 801b54e:	4804      	ldr	r0, [pc, #16]	@ (801b560 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x34>)
 801b550:	4770      	bx	lr
 801b552:	bf00      	nop
 801b554:	2000f888 	.word	0x2000f888
 801b558:	08021d14 	.word	0x08021d14
 801b55c:	2000f864 	.word	0x2000f864
 801b560:	08021d08 	.word	0x08021d08
 801b564:	00000000 	.word	0x00000000

0801b568 <geometry_msgs__msg__Quaternion__init>:
 801b568:	b160      	cbz	r0, 801b584 <geometry_msgs__msg__Quaternion__init+0x1c>
 801b56a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801b588 <geometry_msgs__msg__Quaternion__init+0x20>
 801b56e:	2200      	movs	r2, #0
 801b570:	2300      	movs	r3, #0
 801b572:	e9c0 2300 	strd	r2, r3, [r0]
 801b576:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801b57a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801b57e:	ed80 7b06 	vstr	d7, [r0, #24]
 801b582:	2001      	movs	r0, #1
 801b584:	4770      	bx	lr
 801b586:	bf00      	nop
 801b588:	00000000 	.word	0x00000000
 801b58c:	3ff00000 	.word	0x3ff00000

0801b590 <geometry_msgs__msg__Quaternion__fini>:
 801b590:	4770      	bx	lr
 801b592:	bf00      	nop

0801b594 <geometry_msgs__msg__Quaternion__copy>:
 801b594:	4603      	mov	r3, r0
 801b596:	b190      	cbz	r0, 801b5be <geometry_msgs__msg__Quaternion__copy+0x2a>
 801b598:	b191      	cbz	r1, 801b5c0 <geometry_msgs__msg__Quaternion__copy+0x2c>
 801b59a:	ed90 7b00 	vldr	d7, [r0]
 801b59e:	ed81 7b00 	vstr	d7, [r1]
 801b5a2:	ed93 7b02 	vldr	d7, [r3, #8]
 801b5a6:	ed81 7b02 	vstr	d7, [r1, #8]
 801b5aa:	ed93 7b04 	vldr	d7, [r3, #16]
 801b5ae:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801b5b2:	ed81 7b04 	vstr	d7, [r1, #16]
 801b5b6:	e9c1 2306 	strd	r2, r3, [r1, #24]
 801b5ba:	2001      	movs	r0, #1
 801b5bc:	4770      	bx	lr
 801b5be:	4770      	bx	lr
 801b5c0:	4608      	mov	r0, r1
 801b5c2:	4770      	bx	lr

0801b5c4 <ucdr_serialize_string>:
 801b5c4:	b538      	push	{r3, r4, r5, lr}
 801b5c6:	4605      	mov	r5, r0
 801b5c8:	4608      	mov	r0, r1
 801b5ca:	460c      	mov	r4, r1
 801b5cc:	f7e4 fe88 	bl	80002e0 <strlen>
 801b5d0:	4621      	mov	r1, r4
 801b5d2:	1c42      	adds	r2, r0, #1
 801b5d4:	4628      	mov	r0, r5
 801b5d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b5da:	f7f7 babf 	b.w	8012b5c <ucdr_serialize_sequence_char>
 801b5de:	bf00      	nop

0801b5e0 <ucdr_deserialize_string>:
 801b5e0:	b500      	push	{lr}
 801b5e2:	b083      	sub	sp, #12
 801b5e4:	ab01      	add	r3, sp, #4
 801b5e6:	f7f7 facb 	bl	8012b80 <ucdr_deserialize_sequence_char>
 801b5ea:	b003      	add	sp, #12
 801b5ec:	f85d fb04 	ldr.w	pc, [sp], #4

0801b5f0 <uxr_init_input_best_effort_stream>:
 801b5f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b5f4:	8003      	strh	r3, [r0, #0]
 801b5f6:	4770      	bx	lr

0801b5f8 <uxr_reset_input_best_effort_stream>:
 801b5f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b5fc:	8003      	strh	r3, [r0, #0]
 801b5fe:	4770      	bx	lr

0801b600 <uxr_receive_best_effort_message>:
 801b600:	b538      	push	{r3, r4, r5, lr}
 801b602:	4604      	mov	r4, r0
 801b604:	8800      	ldrh	r0, [r0, #0]
 801b606:	460d      	mov	r5, r1
 801b608:	f000 fd28 	bl	801c05c <uxr_seq_num_cmp>
 801b60c:	4603      	mov	r3, r0
 801b60e:	2b00      	cmp	r3, #0
 801b610:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 801b614:	bfb8      	it	lt
 801b616:	8025      	strhlt	r5, [r4, #0]
 801b618:	bd38      	pop	{r3, r4, r5, pc}
 801b61a:	bf00      	nop

0801b61c <on_full_input_buffer>:
 801b61c:	b570      	push	{r4, r5, r6, lr}
 801b61e:	4605      	mov	r5, r0
 801b620:	460c      	mov	r4, r1
 801b622:	682b      	ldr	r3, [r5, #0]
 801b624:	6809      	ldr	r1, [r1, #0]
 801b626:	8920      	ldrh	r0, [r4, #8]
 801b628:	6862      	ldr	r2, [r4, #4]
 801b62a:	fbb2 f2f0 	udiv	r2, r2, r0
 801b62e:	1a5b      	subs	r3, r3, r1
 801b630:	fbb3 f3f2 	udiv	r3, r3, r2
 801b634:	3301      	adds	r3, #1
 801b636:	b29b      	uxth	r3, r3
 801b638:	fbb3 f6f0 	udiv	r6, r3, r0
 801b63c:	fb00 3316 	mls	r3, r0, r6, r3
 801b640:	b29b      	uxth	r3, r3
 801b642:	fb02 f303 	mul.w	r3, r2, r3
 801b646:	1d18      	adds	r0, r3, #4
 801b648:	4408      	add	r0, r1
 801b64a:	7d26      	ldrb	r6, [r4, #20]
 801b64c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801b650:	b116      	cbz	r6, 801b658 <on_full_input_buffer+0x3c>
 801b652:	2600      	movs	r6, #0
 801b654:	f840 6c04 	str.w	r6, [r0, #-4]
 801b658:	2a03      	cmp	r2, #3
 801b65a:	d801      	bhi.n	801b660 <on_full_input_buffer+0x44>
 801b65c:	2001      	movs	r0, #1
 801b65e:	bd70      	pop	{r4, r5, r6, pc}
 801b660:	3308      	adds	r3, #8
 801b662:	4419      	add	r1, r3
 801b664:	4628      	mov	r0, r5
 801b666:	692b      	ldr	r3, [r5, #16]
 801b668:	3a04      	subs	r2, #4
 801b66a:	f7f2 fcf1 	bl	800e050 <ucdr_init_buffer_origin>
 801b66e:	4628      	mov	r0, r5
 801b670:	4902      	ldr	r1, [pc, #8]	@ (801b67c <on_full_input_buffer+0x60>)
 801b672:	4622      	mov	r2, r4
 801b674:	f7f2 fcc8 	bl	800e008 <ucdr_set_on_full_buffer_callback>
 801b678:	2000      	movs	r0, #0
 801b67a:	bd70      	pop	{r4, r5, r6, pc}
 801b67c:	0801b61d 	.word	0x0801b61d

0801b680 <uxr_init_input_reliable_stream>:
 801b680:	b500      	push	{lr}
 801b682:	e9c0 1200 	strd	r1, r2, [r0]
 801b686:	f04f 0e00 	mov.w	lr, #0
 801b68a:	9a01      	ldr	r2, [sp, #4]
 801b68c:	8103      	strh	r3, [r0, #8]
 801b68e:	6102      	str	r2, [r0, #16]
 801b690:	f880 e014 	strb.w	lr, [r0, #20]
 801b694:	b1d3      	cbz	r3, 801b6cc <uxr_init_input_reliable_stream+0x4c>
 801b696:	f8c1 e000 	str.w	lr, [r1]
 801b69a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801b69e:	f1bc 0f01 	cmp.w	ip, #1
 801b6a2:	d913      	bls.n	801b6cc <uxr_init_input_reliable_stream+0x4c>
 801b6a4:	2301      	movs	r3, #1
 801b6a6:	fbb3 f1fc 	udiv	r1, r3, ip
 801b6aa:	fb0c 3111 	mls	r1, ip, r1, r3
 801b6ae:	b289      	uxth	r1, r1
 801b6b0:	6842      	ldr	r2, [r0, #4]
 801b6b2:	fbb2 f2fc 	udiv	r2, r2, ip
 801b6b6:	fb01 f202 	mul.w	r2, r1, r2
 801b6ba:	6801      	ldr	r1, [r0, #0]
 801b6bc:	f841 e002 	str.w	lr, [r1, r2]
 801b6c0:	3301      	adds	r3, #1
 801b6c2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801b6c6:	b29b      	uxth	r3, r3
 801b6c8:	459c      	cmp	ip, r3
 801b6ca:	d8ec      	bhi.n	801b6a6 <uxr_init_input_reliable_stream+0x26>
 801b6cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b6d0:	60c3      	str	r3, [r0, #12]
 801b6d2:	f85d fb04 	ldr.w	pc, [sp], #4
 801b6d6:	bf00      	nop

0801b6d8 <uxr_reset_input_reliable_stream>:
 801b6d8:	8901      	ldrh	r1, [r0, #8]
 801b6da:	b1e9      	cbz	r1, 801b718 <uxr_reset_input_reliable_stream+0x40>
 801b6dc:	f04f 0c00 	mov.w	ip, #0
 801b6e0:	b500      	push	{lr}
 801b6e2:	4663      	mov	r3, ip
 801b6e4:	46e6      	mov	lr, ip
 801b6e6:	fbb3 f2f1 	udiv	r2, r3, r1
 801b6ea:	fb01 3312 	mls	r3, r1, r2, r3
 801b6ee:	b29b      	uxth	r3, r3
 801b6f0:	6842      	ldr	r2, [r0, #4]
 801b6f2:	fbb2 f2f1 	udiv	r2, r2, r1
 801b6f6:	fb03 f202 	mul.w	r2, r3, r2
 801b6fa:	6803      	ldr	r3, [r0, #0]
 801b6fc:	f843 e002 	str.w	lr, [r3, r2]
 801b700:	f10c 0c01 	add.w	ip, ip, #1
 801b704:	8901      	ldrh	r1, [r0, #8]
 801b706:	fa1f f38c 	uxth.w	r3, ip
 801b70a:	4299      	cmp	r1, r3
 801b70c:	d8eb      	bhi.n	801b6e6 <uxr_reset_input_reliable_stream+0xe>
 801b70e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b712:	60c3      	str	r3, [r0, #12]
 801b714:	f85d fb04 	ldr.w	pc, [sp], #4
 801b718:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b71c:	60c3      	str	r3, [r0, #12]
 801b71e:	4770      	bx	lr

0801b720 <uxr_receive_reliable_message>:
 801b720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b724:	4604      	mov	r4, r0
 801b726:	460d      	mov	r5, r1
 801b728:	8901      	ldrh	r1, [r0, #8]
 801b72a:	8980      	ldrh	r0, [r0, #12]
 801b72c:	4690      	mov	r8, r2
 801b72e:	461f      	mov	r7, r3
 801b730:	f000 fc8c 	bl	801c04c <uxr_seq_num_add>
 801b734:	4629      	mov	r1, r5
 801b736:	4606      	mov	r6, r0
 801b738:	89a0      	ldrh	r0, [r4, #12]
 801b73a:	f000 fc8f 	bl	801c05c <uxr_seq_num_cmp>
 801b73e:	2800      	cmp	r0, #0
 801b740:	db0a      	blt.n	801b758 <uxr_receive_reliable_message+0x38>
 801b742:	2600      	movs	r6, #0
 801b744:	89e0      	ldrh	r0, [r4, #14]
 801b746:	4629      	mov	r1, r5
 801b748:	f000 fc88 	bl	801c05c <uxr_seq_num_cmp>
 801b74c:	2800      	cmp	r0, #0
 801b74e:	bfb8      	it	lt
 801b750:	81e5      	strhlt	r5, [r4, #14]
 801b752:	4630      	mov	r0, r6
 801b754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b758:	4630      	mov	r0, r6
 801b75a:	4629      	mov	r1, r5
 801b75c:	f000 fc7e 	bl	801c05c <uxr_seq_num_cmp>
 801b760:	2800      	cmp	r0, #0
 801b762:	dbee      	blt.n	801b742 <uxr_receive_reliable_message+0x22>
 801b764:	6923      	ldr	r3, [r4, #16]
 801b766:	4640      	mov	r0, r8
 801b768:	4798      	blx	r3
 801b76a:	2101      	movs	r1, #1
 801b76c:	4606      	mov	r6, r0
 801b76e:	89a0      	ldrh	r0, [r4, #12]
 801b770:	f000 fc6c 	bl	801c04c <uxr_seq_num_add>
 801b774:	b90e      	cbnz	r6, 801b77a <uxr_receive_reliable_message+0x5a>
 801b776:	4285      	cmp	r5, r0
 801b778:	d046      	beq.n	801b808 <uxr_receive_reliable_message+0xe8>
 801b77a:	8921      	ldrh	r1, [r4, #8]
 801b77c:	fbb5 f2f1 	udiv	r2, r5, r1
 801b780:	fb01 5212 	mls	r2, r1, r2, r5
 801b784:	b292      	uxth	r2, r2
 801b786:	6863      	ldr	r3, [r4, #4]
 801b788:	6820      	ldr	r0, [r4, #0]
 801b78a:	fbb3 f3f1 	udiv	r3, r3, r1
 801b78e:	fb02 f303 	mul.w	r3, r2, r3
 801b792:	3304      	adds	r3, #4
 801b794:	4418      	add	r0, r3
 801b796:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b79a:	2b00      	cmp	r3, #0
 801b79c:	d1d1      	bne.n	801b742 <uxr_receive_reliable_message+0x22>
 801b79e:	4641      	mov	r1, r8
 801b7a0:	463a      	mov	r2, r7
 801b7a2:	f002 faa4 	bl	801dcee <memcpy>
 801b7a6:	8921      	ldrh	r1, [r4, #8]
 801b7a8:	fbb5 f2f1 	udiv	r2, r5, r1
 801b7ac:	fb01 5212 	mls	r2, r1, r2, r5
 801b7b0:	b292      	uxth	r2, r2
 801b7b2:	6863      	ldr	r3, [r4, #4]
 801b7b4:	fbb3 f3f1 	udiv	r3, r3, r1
 801b7b8:	fb02 f303 	mul.w	r3, r2, r3
 801b7bc:	6822      	ldr	r2, [r4, #0]
 801b7be:	50d7      	str	r7, [r2, r3]
 801b7c0:	9a06      	ldr	r2, [sp, #24]
 801b7c2:	2301      	movs	r3, #1
 801b7c4:	7013      	strb	r3, [r2, #0]
 801b7c6:	2e00      	cmp	r6, #0
 801b7c8:	d0bb      	beq.n	801b742 <uxr_receive_reliable_message+0x22>
 801b7ca:	89a6      	ldrh	r6, [r4, #12]
 801b7cc:	2101      	movs	r1, #1
 801b7ce:	4630      	mov	r0, r6
 801b7d0:	f000 fc3c 	bl	801c04c <uxr_seq_num_add>
 801b7d4:	8921      	ldrh	r1, [r4, #8]
 801b7d6:	fbb0 f2f1 	udiv	r2, r0, r1
 801b7da:	fb01 0212 	mls	r2, r1, r2, r0
 801b7de:	b292      	uxth	r2, r2
 801b7e0:	6863      	ldr	r3, [r4, #4]
 801b7e2:	fbb3 f3f1 	udiv	r3, r3, r1
 801b7e6:	4606      	mov	r6, r0
 801b7e8:	fb02 f303 	mul.w	r3, r2, r3
 801b7ec:	6820      	ldr	r0, [r4, #0]
 801b7ee:	3304      	adds	r3, #4
 801b7f0:	4418      	add	r0, r3
 801b7f2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	d0a3      	beq.n	801b742 <uxr_receive_reliable_message+0x22>
 801b7fa:	6923      	ldr	r3, [r4, #16]
 801b7fc:	4798      	blx	r3
 801b7fe:	2802      	cmp	r0, #2
 801b800:	d005      	beq.n	801b80e <uxr_receive_reliable_message+0xee>
 801b802:	2801      	cmp	r0, #1
 801b804:	d0e2      	beq.n	801b7cc <uxr_receive_reliable_message+0xac>
 801b806:	e79c      	b.n	801b742 <uxr_receive_reliable_message+0x22>
 801b808:	9b06      	ldr	r3, [sp, #24]
 801b80a:	81a5      	strh	r5, [r4, #12]
 801b80c:	701e      	strb	r6, [r3, #0]
 801b80e:	2601      	movs	r6, #1
 801b810:	e798      	b.n	801b744 <uxr_receive_reliable_message+0x24>
 801b812:	bf00      	nop

0801b814 <uxr_next_input_reliable_buffer_available>:
 801b814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b818:	4604      	mov	r4, r0
 801b81a:	460f      	mov	r7, r1
 801b81c:	8980      	ldrh	r0, [r0, #12]
 801b81e:	2101      	movs	r1, #1
 801b820:	4690      	mov	r8, r2
 801b822:	f000 fc13 	bl	801c04c <uxr_seq_num_add>
 801b826:	8921      	ldrh	r1, [r4, #8]
 801b828:	fbb0 f2f1 	udiv	r2, r0, r1
 801b82c:	fb01 0212 	mls	r2, r1, r2, r0
 801b830:	b292      	uxth	r2, r2
 801b832:	6863      	ldr	r3, [r4, #4]
 801b834:	6826      	ldr	r6, [r4, #0]
 801b836:	fbb3 f3f1 	udiv	r3, r3, r1
 801b83a:	fb02 f303 	mul.w	r3, r2, r3
 801b83e:	3304      	adds	r3, #4
 801b840:	441e      	add	r6, r3
 801b842:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801b846:	f1b9 0f00 	cmp.w	r9, #0
 801b84a:	d023      	beq.n	801b894 <uxr_next_input_reliable_buffer_available+0x80>
 801b84c:	6923      	ldr	r3, [r4, #16]
 801b84e:	4605      	mov	r5, r0
 801b850:	4630      	mov	r0, r6
 801b852:	4798      	blx	r3
 801b854:	4682      	mov	sl, r0
 801b856:	b300      	cbz	r0, 801b89a <uxr_next_input_reliable_buffer_available+0x86>
 801b858:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801b85c:	2101      	movs	r1, #1
 801b85e:	4650      	mov	r0, sl
 801b860:	f000 fbf4 	bl	801c04c <uxr_seq_num_add>
 801b864:	8921      	ldrh	r1, [r4, #8]
 801b866:	fbb0 f2f1 	udiv	r2, r0, r1
 801b86a:	4682      	mov	sl, r0
 801b86c:	fb01 0212 	mls	r2, r1, r2, r0
 801b870:	e9d4 0300 	ldrd	r0, r3, [r4]
 801b874:	b292      	uxth	r2, r2
 801b876:	fbb3 f3f1 	udiv	r3, r3, r1
 801b87a:	fb02 f303 	mul.w	r3, r2, r3
 801b87e:	3304      	adds	r3, #4
 801b880:	4418      	add	r0, r3
 801b882:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b886:	b12b      	cbz	r3, 801b894 <uxr_next_input_reliable_buffer_available+0x80>
 801b888:	6923      	ldr	r3, [r4, #16]
 801b88a:	4798      	blx	r3
 801b88c:	2802      	cmp	r0, #2
 801b88e:	d01b      	beq.n	801b8c8 <uxr_next_input_reliable_buffer_available+0xb4>
 801b890:	2801      	cmp	r0, #1
 801b892:	d0e3      	beq.n	801b85c <uxr_next_input_reliable_buffer_available+0x48>
 801b894:	2000      	movs	r0, #0
 801b896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b89a:	464a      	mov	r2, r9
 801b89c:	4631      	mov	r1, r6
 801b89e:	4638      	mov	r0, r7
 801b8a0:	f7f2 fbde 	bl	800e060 <ucdr_init_buffer>
 801b8a4:	8921      	ldrh	r1, [r4, #8]
 801b8a6:	fbb5 f2f1 	udiv	r2, r5, r1
 801b8aa:	fb01 5212 	mls	r2, r1, r2, r5
 801b8ae:	b292      	uxth	r2, r2
 801b8b0:	6863      	ldr	r3, [r4, #4]
 801b8b2:	fbb3 f3f1 	udiv	r3, r3, r1
 801b8b6:	fb02 f303 	mul.w	r3, r2, r3
 801b8ba:	6822      	ldr	r2, [r4, #0]
 801b8bc:	f842 a003 	str.w	sl, [r2, r3]
 801b8c0:	81a5      	strh	r5, [r4, #12]
 801b8c2:	2001      	movs	r0, #1
 801b8c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b8c8:	eb06 0108 	add.w	r1, r6, r8
 801b8cc:	8926      	ldrh	r6, [r4, #8]
 801b8ce:	fbb5 f0f6 	udiv	r0, r5, r6
 801b8d2:	fb06 5010 	mls	r0, r6, r0, r5
 801b8d6:	b280      	uxth	r0, r0
 801b8d8:	6863      	ldr	r3, [r4, #4]
 801b8da:	fbb3 f3f6 	udiv	r3, r3, r6
 801b8de:	fb00 f303 	mul.w	r3, r0, r3
 801b8e2:	6820      	ldr	r0, [r4, #0]
 801b8e4:	2500      	movs	r5, #0
 801b8e6:	50c5      	str	r5, [r0, r3]
 801b8e8:	eba9 0208 	sub.w	r2, r9, r8
 801b8ec:	4638      	mov	r0, r7
 801b8ee:	f7f2 fbb7 	bl	800e060 <ucdr_init_buffer>
 801b8f2:	4903      	ldr	r1, [pc, #12]	@ (801b900 <uxr_next_input_reliable_buffer_available+0xec>)
 801b8f4:	4622      	mov	r2, r4
 801b8f6:	4638      	mov	r0, r7
 801b8f8:	f7f2 fb86 	bl	800e008 <ucdr_set_on_full_buffer_callback>
 801b8fc:	4655      	mov	r5, sl
 801b8fe:	e7df      	b.n	801b8c0 <uxr_next_input_reliable_buffer_available+0xac>
 801b900:	0801b61d 	.word	0x0801b61d

0801b904 <uxr_process_heartbeat>:
 801b904:	b538      	push	{r3, r4, r5, lr}
 801b906:	4611      	mov	r1, r2
 801b908:	4604      	mov	r4, r0
 801b90a:	89c0      	ldrh	r0, [r0, #14]
 801b90c:	4615      	mov	r5, r2
 801b90e:	f000 fba5 	bl	801c05c <uxr_seq_num_cmp>
 801b912:	2800      	cmp	r0, #0
 801b914:	bfb8      	it	lt
 801b916:	81e5      	strhlt	r5, [r4, #14]
 801b918:	bd38      	pop	{r3, r4, r5, pc}
 801b91a:	bf00      	nop

0801b91c <uxr_compute_acknack>:
 801b91c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b920:	8903      	ldrh	r3, [r0, #8]
 801b922:	8985      	ldrh	r5, [r0, #12]
 801b924:	4604      	mov	r4, r0
 801b926:	460e      	mov	r6, r1
 801b928:	2b00      	cmp	r3, #0
 801b92a:	d048      	beq.n	801b9be <uxr_compute_acknack+0xa2>
 801b92c:	4628      	mov	r0, r5
 801b92e:	2701      	movs	r7, #1
 801b930:	e003      	b.n	801b93a <uxr_compute_acknack+0x1e>
 801b932:	4567      	cmp	r7, ip
 801b934:	d243      	bcs.n	801b9be <uxr_compute_acknack+0xa2>
 801b936:	89a0      	ldrh	r0, [r4, #12]
 801b938:	3701      	adds	r7, #1
 801b93a:	b2b9      	uxth	r1, r7
 801b93c:	f000 fb86 	bl	801c04c <uxr_seq_num_add>
 801b940:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801b944:	fbb0 f2fc 	udiv	r2, r0, ip
 801b948:	e9d4 1300 	ldrd	r1, r3, [r4]
 801b94c:	fb0c 0212 	mls	r2, ip, r2, r0
 801b950:	b292      	uxth	r2, r2
 801b952:	fbb3 f3fc 	udiv	r3, r3, ip
 801b956:	fb02 f303 	mul.w	r3, r2, r3
 801b95a:	58cb      	ldr	r3, [r1, r3]
 801b95c:	2b00      	cmp	r3, #0
 801b95e:	d1e8      	bne.n	801b932 <uxr_compute_acknack+0x16>
 801b960:	8030      	strh	r0, [r6, #0]
 801b962:	2101      	movs	r1, #1
 801b964:	89e5      	ldrh	r5, [r4, #14]
 801b966:	f000 fb75 	bl	801c054 <uxr_seq_num_sub>
 801b96a:	4601      	mov	r1, r0
 801b96c:	4628      	mov	r0, r5
 801b96e:	f000 fb71 	bl	801c054 <uxr_seq_num_sub>
 801b972:	4605      	mov	r5, r0
 801b974:	4607      	mov	r7, r0
 801b976:	b1f8      	cbz	r0, 801b9b8 <uxr_compute_acknack+0x9c>
 801b978:	f04f 0900 	mov.w	r9, #0
 801b97c:	464d      	mov	r5, r9
 801b97e:	f04f 0801 	mov.w	r8, #1
 801b982:	fa1f f189 	uxth.w	r1, r9
 801b986:	8830      	ldrh	r0, [r6, #0]
 801b988:	f000 fb60 	bl	801c04c <uxr_seq_num_add>
 801b98c:	8921      	ldrh	r1, [r4, #8]
 801b98e:	fbb0 f3f1 	udiv	r3, r0, r1
 801b992:	fb03 0011 	mls	r0, r3, r1, r0
 801b996:	e9d4 2300 	ldrd	r2, r3, [r4]
 801b99a:	b280      	uxth	r0, r0
 801b99c:	fbb3 f3f1 	udiv	r3, r3, r1
 801b9a0:	fb00 f303 	mul.w	r3, r0, r3
 801b9a4:	fa08 f109 	lsl.w	r1, r8, r9
 801b9a8:	58d3      	ldr	r3, [r2, r3]
 801b9aa:	f109 0901 	add.w	r9, r9, #1
 801b9ae:	b90b      	cbnz	r3, 801b9b4 <uxr_compute_acknack+0x98>
 801b9b0:	4329      	orrs	r1, r5
 801b9b2:	b28d      	uxth	r5, r1
 801b9b4:	454f      	cmp	r7, r9
 801b9b6:	d1e4      	bne.n	801b982 <uxr_compute_acknack+0x66>
 801b9b8:	4628      	mov	r0, r5
 801b9ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b9be:	4628      	mov	r0, r5
 801b9c0:	e7ce      	b.n	801b960 <uxr_compute_acknack+0x44>
 801b9c2:	bf00      	nop

0801b9c4 <uxr_init_output_best_effort_stream>:
 801b9c4:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801b9c8:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801b9cc:	6001      	str	r1, [r0, #0]
 801b9ce:	7303      	strb	r3, [r0, #12]
 801b9d0:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801b9d4:	4770      	bx	lr
 801b9d6:	bf00      	nop

0801b9d8 <uxr_reset_output_best_effort_stream>:
 801b9d8:	7b02      	ldrb	r2, [r0, #12]
 801b9da:	6042      	str	r2, [r0, #4]
 801b9dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b9e0:	81c3      	strh	r3, [r0, #14]
 801b9e2:	4770      	bx	lr

0801b9e4 <uxr_prepare_best_effort_buffer_to_write>:
 801b9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b9e6:	4604      	mov	r4, r0
 801b9e8:	b083      	sub	sp, #12
 801b9ea:	6840      	ldr	r0, [r0, #4]
 801b9ec:	460d      	mov	r5, r1
 801b9ee:	4616      	mov	r6, r2
 801b9f0:	f7f9 fb2e 	bl	8015050 <uxr_submessage_padding>
 801b9f4:	6863      	ldr	r3, [r4, #4]
 801b9f6:	4418      	add	r0, r3
 801b9f8:	68a3      	ldr	r3, [r4, #8]
 801b9fa:	1942      	adds	r2, r0, r5
 801b9fc:	4293      	cmp	r3, r2
 801b9fe:	bf2c      	ite	cs
 801ba00:	2701      	movcs	r7, #1
 801ba02:	2700      	movcc	r7, #0
 801ba04:	d202      	bcs.n	801ba0c <uxr_prepare_best_effort_buffer_to_write+0x28>
 801ba06:	4638      	mov	r0, r7
 801ba08:	b003      	add	sp, #12
 801ba0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba0c:	9000      	str	r0, [sp, #0]
 801ba0e:	6821      	ldr	r1, [r4, #0]
 801ba10:	4630      	mov	r0, r6
 801ba12:	2300      	movs	r3, #0
 801ba14:	f7f2 fb12 	bl	800e03c <ucdr_init_buffer_origin_offset>
 801ba18:	6863      	ldr	r3, [r4, #4]
 801ba1a:	4638      	mov	r0, r7
 801ba1c:	442b      	add	r3, r5
 801ba1e:	6063      	str	r3, [r4, #4]
 801ba20:	b003      	add	sp, #12
 801ba22:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ba24 <uxr_prepare_best_effort_buffer_to_send>:
 801ba24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba28:	4604      	mov	r4, r0
 801ba2a:	461d      	mov	r5, r3
 801ba2c:	6840      	ldr	r0, [r0, #4]
 801ba2e:	7b23      	ldrb	r3, [r4, #12]
 801ba30:	4298      	cmp	r0, r3
 801ba32:	bf8c      	ite	hi
 801ba34:	2601      	movhi	r6, #1
 801ba36:	2600      	movls	r6, #0
 801ba38:	d802      	bhi.n	801ba40 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801ba3a:	4630      	mov	r0, r6
 801ba3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba40:	4688      	mov	r8, r1
 801ba42:	89e0      	ldrh	r0, [r4, #14]
 801ba44:	2101      	movs	r1, #1
 801ba46:	4617      	mov	r7, r2
 801ba48:	f000 fb00 	bl	801c04c <uxr_seq_num_add>
 801ba4c:	6823      	ldr	r3, [r4, #0]
 801ba4e:	81e0      	strh	r0, [r4, #14]
 801ba50:	8028      	strh	r0, [r5, #0]
 801ba52:	f8c8 3000 	str.w	r3, [r8]
 801ba56:	6863      	ldr	r3, [r4, #4]
 801ba58:	603b      	str	r3, [r7, #0]
 801ba5a:	7b23      	ldrb	r3, [r4, #12]
 801ba5c:	6063      	str	r3, [r4, #4]
 801ba5e:	4630      	mov	r0, r6
 801ba60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ba64 <on_full_output_buffer>:
 801ba64:	b538      	push	{r3, r4, r5, lr}
 801ba66:	460c      	mov	r4, r1
 801ba68:	6803      	ldr	r3, [r0, #0]
 801ba6a:	6809      	ldr	r1, [r1, #0]
 801ba6c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801ba70:	6862      	ldr	r2, [r4, #4]
 801ba72:	fbb2 f2fc 	udiv	r2, r2, ip
 801ba76:	1a5b      	subs	r3, r3, r1
 801ba78:	fbb3 f3f2 	udiv	r3, r3, r2
 801ba7c:	3301      	adds	r3, #1
 801ba7e:	b29b      	uxth	r3, r3
 801ba80:	fbb3 fefc 	udiv	lr, r3, ip
 801ba84:	fb0c 331e 	mls	r3, ip, lr, r3
 801ba88:	b29b      	uxth	r3, r3
 801ba8a:	fb02 f303 	mul.w	r3, r2, r3
 801ba8e:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801ba92:	58ca      	ldr	r2, [r1, r3]
 801ba94:	4463      	add	r3, ip
 801ba96:	eba2 020c 	sub.w	r2, r2, ip
 801ba9a:	3308      	adds	r3, #8
 801ba9c:	4605      	mov	r5, r0
 801ba9e:	4419      	add	r1, r3
 801baa0:	3a04      	subs	r2, #4
 801baa2:	6903      	ldr	r3, [r0, #16]
 801baa4:	f7f2 fad4 	bl	800e050 <ucdr_init_buffer_origin>
 801baa8:	4628      	mov	r0, r5
 801baaa:	4903      	ldr	r1, [pc, #12]	@ (801bab8 <on_full_output_buffer+0x54>)
 801baac:	4622      	mov	r2, r4
 801baae:	f7f2 faab 	bl	800e008 <ucdr_set_on_full_buffer_callback>
 801bab2:	2000      	movs	r0, #0
 801bab4:	bd38      	pop	{r3, r4, r5, pc}
 801bab6:	bf00      	nop
 801bab8:	0801ba65 	.word	0x0801ba65

0801babc <uxr_init_output_reliable_stream>:
 801babc:	b410      	push	{r4}
 801babe:	f89d c004 	ldrb.w	ip, [sp, #4]
 801bac2:	8103      	strh	r3, [r0, #8]
 801bac4:	e9c0 1200 	strd	r1, r2, [r0]
 801bac8:	f880 c00c 	strb.w	ip, [r0, #12]
 801bacc:	b1d3      	cbz	r3, 801bb04 <uxr_init_output_reliable_stream+0x48>
 801bace:	f8c1 c000 	str.w	ip, [r1]
 801bad2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801bad6:	f1bc 0f01 	cmp.w	ip, #1
 801bada:	d913      	bls.n	801bb04 <uxr_init_output_reliable_stream+0x48>
 801badc:	2301      	movs	r3, #1
 801bade:	fbb3 f1fc 	udiv	r1, r3, ip
 801bae2:	fb0c 3111 	mls	r1, ip, r1, r3
 801bae6:	b289      	uxth	r1, r1
 801bae8:	6842      	ldr	r2, [r0, #4]
 801baea:	6804      	ldr	r4, [r0, #0]
 801baec:	fbb2 f2fc 	udiv	r2, r2, ip
 801baf0:	fb01 f202 	mul.w	r2, r1, r2
 801baf4:	7b01      	ldrb	r1, [r0, #12]
 801baf6:	50a1      	str	r1, [r4, r2]
 801baf8:	3301      	adds	r3, #1
 801bafa:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801bafe:	b29b      	uxth	r3, r3
 801bb00:	459c      	cmp	ip, r3
 801bb02:	d8ec      	bhi.n	801bade <uxr_init_output_reliable_stream+0x22>
 801bb04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801bb08:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801bb0c:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801bb10:	4905      	ldr	r1, [pc, #20]	@ (801bb28 <uxr_init_output_reliable_stream+0x6c>)
 801bb12:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bb16:	f8c0 100e 	str.w	r1, [r0, #14]
 801bb1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bb1e:	2300      	movs	r3, #0
 801bb20:	8242      	strh	r2, [r0, #18]
 801bb22:	8403      	strh	r3, [r0, #32]
 801bb24:	4770      	bx	lr
 801bb26:	bf00      	nop
 801bb28:	ffff0000 	.word	0xffff0000

0801bb2c <uxr_reset_output_reliable_stream>:
 801bb2c:	8901      	ldrh	r1, [r0, #8]
 801bb2e:	b1b1      	cbz	r1, 801bb5e <uxr_reset_output_reliable_stream+0x32>
 801bb30:	f04f 0c00 	mov.w	ip, #0
 801bb34:	4663      	mov	r3, ip
 801bb36:	fbb3 f2f1 	udiv	r2, r3, r1
 801bb3a:	fb01 3312 	mls	r3, r1, r2, r3
 801bb3e:	b29b      	uxth	r3, r3
 801bb40:	6842      	ldr	r2, [r0, #4]
 801bb42:	fbb2 f2f1 	udiv	r2, r2, r1
 801bb46:	6801      	ldr	r1, [r0, #0]
 801bb48:	fb03 f202 	mul.w	r2, r3, r2
 801bb4c:	7b03      	ldrb	r3, [r0, #12]
 801bb4e:	508b      	str	r3, [r1, r2]
 801bb50:	f10c 0c01 	add.w	ip, ip, #1
 801bb54:	8901      	ldrh	r1, [r0, #8]
 801bb56:	fa1f f38c 	uxth.w	r3, ip
 801bb5a:	4299      	cmp	r1, r3
 801bb5c:	d8eb      	bhi.n	801bb36 <uxr_reset_output_reliable_stream+0xa>
 801bb5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801bb62:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801bb66:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801bb6a:	4904      	ldr	r1, [pc, #16]	@ (801bb7c <uxr_reset_output_reliable_stream+0x50>)
 801bb6c:	f8c0 100e 	str.w	r1, [r0, #14]
 801bb70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bb74:	2300      	movs	r3, #0
 801bb76:	8242      	strh	r2, [r0, #18]
 801bb78:	8403      	strh	r3, [r0, #32]
 801bb7a:	4770      	bx	lr
 801bb7c:	ffff0000 	.word	0xffff0000

0801bb80 <uxr_prepare_reliable_buffer_to_write>:
 801bb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb84:	4604      	mov	r4, r0
 801bb86:	b091      	sub	sp, #68	@ 0x44
 801bb88:	8900      	ldrh	r0, [r0, #8]
 801bb8a:	89e7      	ldrh	r7, [r4, #14]
 801bb8c:	6823      	ldr	r3, [r4, #0]
 801bb8e:	9204      	str	r2, [sp, #16]
 801bb90:	fbb7 f2f0 	udiv	r2, r7, r0
 801bb94:	fb00 7212 	mls	r2, r0, r2, r7
 801bb98:	b292      	uxth	r2, r2
 801bb9a:	6865      	ldr	r5, [r4, #4]
 801bb9c:	fbb5 f5f0 	udiv	r5, r5, r0
 801bba0:	fb05 3202 	mla	r2, r5, r2, r3
 801bba4:	3204      	adds	r2, #4
 801bba6:	f852 ac04 	ldr.w	sl, [r2, #-4]
 801bbaa:	f894 b00c 	ldrb.w	fp, [r4, #12]
 801bbae:	9203      	str	r2, [sp, #12]
 801bbb0:	4688      	mov	r8, r1
 801bbb2:	f1a5 0904 	sub.w	r9, r5, #4
 801bbb6:	2800      	cmp	r0, #0
 801bbb8:	f000 8143 	beq.w	801be42 <uxr_prepare_reliable_buffer_to_write+0x2c2>
 801bbbc:	2100      	movs	r1, #0
 801bbbe:	460e      	mov	r6, r1
 801bbc0:	b28a      	uxth	r2, r1
 801bbc2:	fbb2 fcf0 	udiv	ip, r2, r0
 801bbc6:	fb00 221c 	mls	r2, r0, ip, r2
 801bbca:	b292      	uxth	r2, r2
 801bbcc:	fb05 f202 	mul.w	r2, r5, r2
 801bbd0:	3101      	adds	r1, #1
 801bbd2:	589a      	ldr	r2, [r3, r2]
 801bbd4:	455a      	cmp	r2, fp
 801bbd6:	bf04      	itt	eq
 801bbd8:	3601      	addeq	r6, #1
 801bbda:	b2b6      	uxtheq	r6, r6
 801bbdc:	4281      	cmp	r1, r0
 801bbde:	d1ef      	bne.n	801bbc0 <uxr_prepare_reliable_buffer_to_write+0x40>
 801bbe0:	4650      	mov	r0, sl
 801bbe2:	2104      	movs	r1, #4
 801bbe4:	9605      	str	r6, [sp, #20]
 801bbe6:	f7f2 fa3f 	bl	800e068 <ucdr_alignment>
 801bbea:	4482      	add	sl, r0
 801bbec:	eb0a 0208 	add.w	r2, sl, r8
 801bbf0:	454a      	cmp	r2, r9
 801bbf2:	f240 80ca 	bls.w	801bd8a <uxr_prepare_reliable_buffer_to_write+0x20a>
 801bbf6:	7b22      	ldrb	r2, [r4, #12]
 801bbf8:	4442      	add	r2, r8
 801bbfa:	454a      	cmp	r2, r9
 801bbfc:	f240 80b2 	bls.w	801bd64 <uxr_prepare_reliable_buffer_to_write+0x1e4>
 801bc00:	f5cb 427f 	rsb	r2, fp, #65280	@ 0xff00
 801bc04:	32fc      	adds	r2, #252	@ 0xfc
 801bc06:	fa1f f389 	uxth.w	r3, r9
 801bc0a:	441a      	add	r2, r3
 801bc0c:	b292      	uxth	r2, r2
 801bc0e:	fb06 fb02 	mul.w	fp, r6, r2
 801bc12:	45c3      	cmp	fp, r8
 801bc14:	9205      	str	r2, [sp, #20]
 801bc16:	9206      	str	r2, [sp, #24]
 801bc18:	f0c0 80b3 	bcc.w	801bd82 <uxr_prepare_reliable_buffer_to_write+0x202>
 801bc1c:	f10a 0204 	add.w	r2, sl, #4
 801bc20:	454a      	cmp	r2, r9
 801bc22:	f080 80db 	bcs.w	801bddc <uxr_prepare_reliable_buffer_to_write+0x25c>
 801bc26:	f1a3 0b04 	sub.w	fp, r3, #4
 801bc2a:	ebab 0b0a 	sub.w	fp, fp, sl
 801bc2e:	9b05      	ldr	r3, [sp, #20]
 801bc30:	fa1f fb8b 	uxth.w	fp, fp
 801bc34:	eba8 080b 	sub.w	r8, r8, fp
 801bc38:	fbb8 fcf3 	udiv	ip, r8, r3
 801bc3c:	fb03 831c 	mls	r3, r3, ip, r8
 801bc40:	fa1f fc8c 	uxth.w	ip, ip
 801bc44:	2b00      	cmp	r3, #0
 801bc46:	f040 80c1 	bne.w	801bdcc <uxr_prepare_reliable_buffer_to_write+0x24c>
 801bc4a:	45b4      	cmp	ip, r6
 801bc4c:	f200 8099 	bhi.w	801bd82 <uxr_prepare_reliable_buffer_to_write+0x202>
 801bc50:	f10d 0820 	add.w	r8, sp, #32
 801bc54:	f1bc 0f00 	cmp.w	ip, #0
 801bc58:	d040      	beq.n	801bcdc <uxr_prepare_reliable_buffer_to_write+0x15c>
 801bc5a:	f8cd a01c 	str.w	sl, [sp, #28]
 801bc5e:	2600      	movs	r6, #0
 801bc60:	f8dd a014 	ldr.w	sl, [sp, #20]
 801bc64:	9505      	str	r5, [sp, #20]
 801bc66:	f10d 0820 	add.w	r8, sp, #32
 801bc6a:	4665      	mov	r5, ip
 801bc6c:	e000      	b.n	801bc70 <uxr_prepare_reliable_buffer_to_write+0xf0>
 801bc6e:	46d3      	mov	fp, sl
 801bc70:	8921      	ldrh	r1, [r4, #8]
 801bc72:	fbb7 f2f1 	udiv	r2, r7, r1
 801bc76:	fb01 7212 	mls	r2, r1, r2, r7
 801bc7a:	b292      	uxth	r2, r2
 801bc7c:	6863      	ldr	r3, [r4, #4]
 801bc7e:	fbb3 f3f1 	udiv	r3, r3, r1
 801bc82:	6821      	ldr	r1, [r4, #0]
 801bc84:	fb02 f303 	mul.w	r3, r2, r3
 801bc88:	3304      	adds	r3, #4
 801bc8a:	4419      	add	r1, r3
 801bc8c:	4640      	mov	r0, r8
 801bc8e:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801bc92:	9200      	str	r2, [sp, #0]
 801bc94:	2300      	movs	r3, #0
 801bc96:	464a      	mov	r2, r9
 801bc98:	f7f2 f9d0 	bl	800e03c <ucdr_init_buffer_origin_offset>
 801bc9c:	465a      	mov	r2, fp
 801bc9e:	2300      	movs	r3, #0
 801bca0:	210d      	movs	r1, #13
 801bca2:	4640      	mov	r0, r8
 801bca4:	f7f9 f994 	bl	8014fd0 <uxr_buffer_submessage_header>
 801bca8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801bcac:	fbb7 f2fc 	udiv	r2, r7, ip
 801bcb0:	fb0c 7212 	mls	r2, ip, r2, r7
 801bcb4:	b292      	uxth	r2, r2
 801bcb6:	6863      	ldr	r3, [r4, #4]
 801bcb8:	fbb3 f3fc 	udiv	r3, r3, ip
 801bcbc:	fb02 f303 	mul.w	r3, r2, r3
 801bcc0:	6822      	ldr	r2, [r4, #0]
 801bcc2:	4638      	mov	r0, r7
 801bcc4:	f842 9003 	str.w	r9, [r2, r3]
 801bcc8:	2101      	movs	r1, #1
 801bcca:	f000 f9bf 	bl	801c04c <uxr_seq_num_add>
 801bcce:	3601      	adds	r6, #1
 801bcd0:	42ae      	cmp	r6, r5
 801bcd2:	4607      	mov	r7, r0
 801bcd4:	d1cb      	bne.n	801bc6e <uxr_prepare_reliable_buffer_to_write+0xee>
 801bcd6:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801bcda:	9d05      	ldr	r5, [sp, #20]
 801bcdc:	8920      	ldrh	r0, [r4, #8]
 801bcde:	fbb7 f1f0 	udiv	r1, r7, r0
 801bce2:	fb00 7111 	mls	r1, r0, r1, r7
 801bce6:	b289      	uxth	r1, r1
 801bce8:	6863      	ldr	r3, [r4, #4]
 801bcea:	fbb3 f3f0 	udiv	r3, r3, r0
 801bcee:	fb01 f303 	mul.w	r3, r1, r3
 801bcf2:	6821      	ldr	r1, [r4, #0]
 801bcf4:	3304      	adds	r3, #4
 801bcf6:	4419      	add	r1, r3
 801bcf8:	464a      	mov	r2, r9
 801bcfa:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801bcfe:	9000      	str	r0, [sp, #0]
 801bd00:	2300      	movs	r3, #0
 801bd02:	4640      	mov	r0, r8
 801bd04:	f7f2 f99a 	bl	800e03c <ucdr_init_buffer_origin_offset>
 801bd08:	4640      	mov	r0, r8
 801bd0a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801bd0e:	2302      	movs	r3, #2
 801bd10:	fa1f f288 	uxth.w	r2, r8
 801bd14:	210d      	movs	r1, #13
 801bd16:	f7f9 f95b 	bl	8014fd0 <uxr_buffer_submessage_header>
 801bd1a:	8926      	ldrh	r6, [r4, #8]
 801bd1c:	9b03      	ldr	r3, [sp, #12]
 801bd1e:	7b20      	ldrb	r0, [r4, #12]
 801bd20:	f1a5 0208 	sub.w	r2, r5, #8
 801bd24:	f10a 0104 	add.w	r1, sl, #4
 801bd28:	fbb7 f5f6 	udiv	r5, r7, r6
 801bd2c:	fb06 7515 	mls	r5, r6, r5, r7
 801bd30:	440b      	add	r3, r1
 801bd32:	b2ad      	uxth	r5, r5
 801bd34:	4619      	mov	r1, r3
 801bd36:	3004      	adds	r0, #4
 801bd38:	6863      	ldr	r3, [r4, #4]
 801bd3a:	fbb3 f3f6 	udiv	r3, r3, r6
 801bd3e:	fb05 f303 	mul.w	r3, r5, r3
 801bd42:	6825      	ldr	r5, [r4, #0]
 801bd44:	4440      	add	r0, r8
 801bd46:	50e8      	str	r0, [r5, r3]
 801bd48:	9d04      	ldr	r5, [sp, #16]
 801bd4a:	eba2 020a 	sub.w	r2, r2, sl
 801bd4e:	4628      	mov	r0, r5
 801bd50:	f7f2 f986 	bl	800e060 <ucdr_init_buffer>
 801bd54:	493c      	ldr	r1, [pc, #240]	@ (801be48 <uxr_prepare_reliable_buffer_to_write+0x2c8>)
 801bd56:	4622      	mov	r2, r4
 801bd58:	4628      	mov	r0, r5
 801bd5a:	f7f2 f955 	bl	800e008 <ucdr_set_on_full_buffer_callback>
 801bd5e:	81e7      	strh	r7, [r4, #14]
 801bd60:	2001      	movs	r0, #1
 801bd62:	e00f      	b.n	801bd84 <uxr_prepare_reliable_buffer_to_write+0x204>
 801bd64:	2101      	movs	r1, #1
 801bd66:	89e0      	ldrh	r0, [r4, #14]
 801bd68:	f000 f970 	bl	801c04c <uxr_seq_num_add>
 801bd6c:	8921      	ldrh	r1, [r4, #8]
 801bd6e:	4605      	mov	r5, r0
 801bd70:	8a60      	ldrh	r0, [r4, #18]
 801bd72:	f000 f96b 	bl	801c04c <uxr_seq_num_add>
 801bd76:	4601      	mov	r1, r0
 801bd78:	4628      	mov	r0, r5
 801bd7a:	f000 f96f 	bl	801c05c <uxr_seq_num_cmp>
 801bd7e:	2800      	cmp	r0, #0
 801bd80:	dd45      	ble.n	801be0e <uxr_prepare_reliable_buffer_to_write+0x28e>
 801bd82:	2000      	movs	r0, #0
 801bd84:	b011      	add	sp, #68	@ 0x44
 801bd86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd8a:	8921      	ldrh	r1, [r4, #8]
 801bd8c:	8a60      	ldrh	r0, [r4, #18]
 801bd8e:	9205      	str	r2, [sp, #20]
 801bd90:	f000 f95c 	bl	801c04c <uxr_seq_num_add>
 801bd94:	4601      	mov	r1, r0
 801bd96:	4638      	mov	r0, r7
 801bd98:	f000 f960 	bl	801c05c <uxr_seq_num_cmp>
 801bd9c:	2800      	cmp	r0, #0
 801bd9e:	9a05      	ldr	r2, [sp, #20]
 801bda0:	dcef      	bgt.n	801bd82 <uxr_prepare_reliable_buffer_to_write+0x202>
 801bda2:	8926      	ldrh	r6, [r4, #8]
 801bda4:	fbb7 f5f6 	udiv	r5, r7, r6
 801bda8:	fb06 7515 	mls	r5, r6, r5, r7
 801bdac:	b2ad      	uxth	r5, r5
 801bdae:	6863      	ldr	r3, [r4, #4]
 801bdb0:	6824      	ldr	r4, [r4, #0]
 801bdb2:	fbb3 f3f6 	udiv	r3, r3, r6
 801bdb6:	fb05 f303 	mul.w	r3, r5, r3
 801bdba:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801bdbe:	50e2      	str	r2, [r4, r3]
 801bdc0:	2300      	movs	r3, #0
 801bdc2:	f8cd a000 	str.w	sl, [sp]
 801bdc6:	f7f2 f939 	bl	800e03c <ucdr_init_buffer_origin_offset>
 801bdca:	e7c9      	b.n	801bd60 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 801bdcc:	f10c 0c01 	add.w	ip, ip, #1
 801bdd0:	fa1f fc8c 	uxth.w	ip, ip
 801bdd4:	45b4      	cmp	ip, r6
 801bdd6:	9306      	str	r3, [sp, #24]
 801bdd8:	d8d3      	bhi.n	801bd82 <uxr_prepare_reliable_buffer_to_write+0x202>
 801bdda:	e739      	b.n	801bc50 <uxr_prepare_reliable_buffer_to_write+0xd0>
 801bddc:	4638      	mov	r0, r7
 801bdde:	2101      	movs	r1, #1
 801bde0:	9307      	str	r3, [sp, #28]
 801bde2:	f000 f933 	bl	801c04c <uxr_seq_num_add>
 801bde6:	8921      	ldrh	r1, [r4, #8]
 801bde8:	6862      	ldr	r2, [r4, #4]
 801bdea:	4607      	mov	r7, r0
 801bdec:	fbb0 f0f1 	udiv	r0, r0, r1
 801bdf0:	fb01 7010 	mls	r0, r1, r0, r7
 801bdf4:	b280      	uxth	r0, r0
 801bdf6:	fbb2 f1f1 	udiv	r1, r2, r1
 801bdfa:	6822      	ldr	r2, [r4, #0]
 801bdfc:	fb00 f101 	mul.w	r1, r0, r1
 801be00:	3104      	adds	r1, #4
 801be02:	1853      	adds	r3, r2, r1
 801be04:	9303      	str	r3, [sp, #12]
 801be06:	f853 ac04 	ldr.w	sl, [r3, #-4]
 801be0a:	9b07      	ldr	r3, [sp, #28]
 801be0c:	e70b      	b.n	801bc26 <uxr_prepare_reliable_buffer_to_write+0xa6>
 801be0e:	8921      	ldrh	r1, [r4, #8]
 801be10:	fbb5 f2f1 	udiv	r2, r5, r1
 801be14:	fb01 5212 	mls	r2, r1, r2, r5
 801be18:	b292      	uxth	r2, r2
 801be1a:	6863      	ldr	r3, [r4, #4]
 801be1c:	fbb3 f3f1 	udiv	r3, r3, r1
 801be20:	6821      	ldr	r1, [r4, #0]
 801be22:	9804      	ldr	r0, [sp, #16]
 801be24:	fb02 f303 	mul.w	r3, r2, r3
 801be28:	3304      	adds	r3, #4
 801be2a:	7b22      	ldrb	r2, [r4, #12]
 801be2c:	4419      	add	r1, r3
 801be2e:	4442      	add	r2, r8
 801be30:	f841 2c04 	str.w	r2, [r1, #-4]
 801be34:	7b23      	ldrb	r3, [r4, #12]
 801be36:	9300      	str	r3, [sp, #0]
 801be38:	2300      	movs	r3, #0
 801be3a:	f7f2 f8ff 	bl	800e03c <ucdr_init_buffer_origin_offset>
 801be3e:	81e5      	strh	r5, [r4, #14]
 801be40:	e78e      	b.n	801bd60 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 801be42:	4606      	mov	r6, r0
 801be44:	e6cc      	b.n	801bbe0 <uxr_prepare_reliable_buffer_to_write+0x60>
 801be46:	bf00      	nop
 801be48:	0801ba65 	.word	0x0801ba65

0801be4c <uxr_prepare_next_reliable_buffer_to_send>:
 801be4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be4e:	4604      	mov	r4, r0
 801be50:	460f      	mov	r7, r1
 801be52:	8a00      	ldrh	r0, [r0, #16]
 801be54:	2101      	movs	r1, #1
 801be56:	4615      	mov	r5, r2
 801be58:	461e      	mov	r6, r3
 801be5a:	f000 f8f7 	bl	801c04c <uxr_seq_num_add>
 801be5e:	8030      	strh	r0, [r6, #0]
 801be60:	8922      	ldrh	r2, [r4, #8]
 801be62:	fbb0 f3f2 	udiv	r3, r0, r2
 801be66:	fb02 0c13 	mls	ip, r2, r3, r0
 801be6a:	fa1f fc8c 	uxth.w	ip, ip
 801be6e:	6863      	ldr	r3, [r4, #4]
 801be70:	fbb3 f3f2 	udiv	r3, r3, r2
 801be74:	fb0c fc03 	mul.w	ip, ip, r3
 801be78:	6823      	ldr	r3, [r4, #0]
 801be7a:	89e1      	ldrh	r1, [r4, #14]
 801be7c:	f10c 0c04 	add.w	ip, ip, #4
 801be80:	4463      	add	r3, ip
 801be82:	603b      	str	r3, [r7, #0]
 801be84:	6823      	ldr	r3, [r4, #0]
 801be86:	4463      	add	r3, ip
 801be88:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801be8c:	602b      	str	r3, [r5, #0]
 801be8e:	f000 f8e5 	bl	801c05c <uxr_seq_num_cmp>
 801be92:	2800      	cmp	r0, #0
 801be94:	dd01      	ble.n	801be9a <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801be96:	2000      	movs	r0, #0
 801be98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801be9a:	7b23      	ldrb	r3, [r4, #12]
 801be9c:	682a      	ldr	r2, [r5, #0]
 801be9e:	429a      	cmp	r2, r3
 801bea0:	d9f9      	bls.n	801be96 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801bea2:	8a61      	ldrh	r1, [r4, #18]
 801bea4:	8a20      	ldrh	r0, [r4, #16]
 801bea6:	f000 f8d5 	bl	801c054 <uxr_seq_num_sub>
 801beaa:	8923      	ldrh	r3, [r4, #8]
 801beac:	4283      	cmp	r3, r0
 801beae:	d0f2      	beq.n	801be96 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801beb0:	8830      	ldrh	r0, [r6, #0]
 801beb2:	89e3      	ldrh	r3, [r4, #14]
 801beb4:	8220      	strh	r0, [r4, #16]
 801beb6:	4298      	cmp	r0, r3
 801beb8:	d001      	beq.n	801bebe <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801beba:	2001      	movs	r0, #1
 801bebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bebe:	2101      	movs	r1, #1
 801bec0:	f000 f8c4 	bl	801c04c <uxr_seq_num_add>
 801bec4:	81e0      	strh	r0, [r4, #14]
 801bec6:	e7f8      	b.n	801beba <uxr_prepare_next_reliable_buffer_to_send+0x6e>

0801bec8 <uxr_update_output_stream_heartbeat_timestamp>:
 801bec8:	b570      	push	{r4, r5, r6, lr}
 801beca:	8a01      	ldrh	r1, [r0, #16]
 801becc:	4604      	mov	r4, r0
 801bece:	8a40      	ldrh	r0, [r0, #18]
 801bed0:	4615      	mov	r5, r2
 801bed2:	461e      	mov	r6, r3
 801bed4:	f000 f8c2 	bl	801c05c <uxr_seq_num_cmp>
 801bed8:	2800      	cmp	r0, #0
 801beda:	db07      	blt.n	801beec <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801bedc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801bee0:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 801bee4:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801bee8:	2000      	movs	r0, #0
 801beea:	bd70      	pop	{r4, r5, r6, pc}
 801beec:	f894 3020 	ldrb.w	r3, [r4, #32]
 801bef0:	b953      	cbnz	r3, 801bf08 <uxr_update_output_stream_heartbeat_timestamp+0x40>
 801bef2:	2301      	movs	r3, #1
 801bef4:	f884 3020 	strb.w	r3, [r4, #32]
 801bef8:	3564      	adds	r5, #100	@ 0x64
 801befa:	f04f 0000 	mov.w	r0, #0
 801befe:	f146 0600 	adc.w	r6, r6, #0
 801bf02:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801bf06:	bd70      	pop	{r4, r5, r6, pc}
 801bf08:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801bf0c:	428d      	cmp	r5, r1
 801bf0e:	eb76 0202 	sbcs.w	r2, r6, r2
 801bf12:	dbf1      	blt.n	801bef8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801bf14:	3301      	adds	r3, #1
 801bf16:	3564      	adds	r5, #100	@ 0x64
 801bf18:	f884 3020 	strb.w	r3, [r4, #32]
 801bf1c:	f04f 0001 	mov.w	r0, #1
 801bf20:	f146 0600 	adc.w	r6, r6, #0
 801bf24:	e7ed      	b.n	801bf02 <uxr_update_output_stream_heartbeat_timestamp+0x3a>
 801bf26:	bf00      	nop

0801bf28 <uxr_begin_output_nack_buffer_it>:
 801bf28:	8a40      	ldrh	r0, [r0, #18]
 801bf2a:	4770      	bx	lr

0801bf2c <uxr_next_reliable_nack_buffer_to_send>:
 801bf2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf30:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801bf34:	f1b8 0f00 	cmp.w	r8, #0
 801bf38:	d104      	bne.n	801bf44 <uxr_next_reliable_nack_buffer_to_send+0x18>
 801bf3a:	f04f 0800 	mov.w	r8, #0
 801bf3e:	4640      	mov	r0, r8
 801bf40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf44:	4604      	mov	r4, r0
 801bf46:	460e      	mov	r6, r1
 801bf48:	8818      	ldrh	r0, [r3, #0]
 801bf4a:	4617      	mov	r7, r2
 801bf4c:	461d      	mov	r5, r3
 801bf4e:	e019      	b.n	801bf84 <uxr_next_reliable_nack_buffer_to_send+0x58>
 801bf50:	8921      	ldrh	r1, [r4, #8]
 801bf52:	8828      	ldrh	r0, [r5, #0]
 801bf54:	fbb0 fcf1 	udiv	ip, r0, r1
 801bf58:	e9d4 3200 	ldrd	r3, r2, [r4]
 801bf5c:	fb01 0c1c 	mls	ip, r1, ip, r0
 801bf60:	fa1f fc8c 	uxth.w	ip, ip
 801bf64:	fbb2 f2f1 	udiv	r2, r2, r1
 801bf68:	fb02 fc0c 	mul.w	ip, r2, ip
 801bf6c:	f10c 0c04 	add.w	ip, ip, #4
 801bf70:	4463      	add	r3, ip
 801bf72:	6033      	str	r3, [r6, #0]
 801bf74:	6823      	ldr	r3, [r4, #0]
 801bf76:	4463      	add	r3, ip
 801bf78:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801bf7c:	603b      	str	r3, [r7, #0]
 801bf7e:	7b22      	ldrb	r2, [r4, #12]
 801bf80:	429a      	cmp	r2, r3
 801bf82:	d1dc      	bne.n	801bf3e <uxr_next_reliable_nack_buffer_to_send+0x12>
 801bf84:	2101      	movs	r1, #1
 801bf86:	f000 f861 	bl	801c04c <uxr_seq_num_add>
 801bf8a:	8028      	strh	r0, [r5, #0]
 801bf8c:	8a21      	ldrh	r1, [r4, #16]
 801bf8e:	f000 f865 	bl	801c05c <uxr_seq_num_cmp>
 801bf92:	2800      	cmp	r0, #0
 801bf94:	dddc      	ble.n	801bf50 <uxr_next_reliable_nack_buffer_to_send+0x24>
 801bf96:	2300      	movs	r3, #0
 801bf98:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 801bf9c:	e7cd      	b.n	801bf3a <uxr_next_reliable_nack_buffer_to_send+0xe>
 801bf9e:	bf00      	nop

0801bfa0 <uxr_process_acknack>:
 801bfa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bfa2:	4604      	mov	r4, r0
 801bfa4:	460e      	mov	r6, r1
 801bfa6:	4610      	mov	r0, r2
 801bfa8:	2101      	movs	r1, #1
 801bfaa:	f000 f853 	bl	801c054 <uxr_seq_num_sub>
 801bfae:	8a61      	ldrh	r1, [r4, #18]
 801bfb0:	f000 f850 	bl	801c054 <uxr_seq_num_sub>
 801bfb4:	b1c0      	cbz	r0, 801bfe8 <uxr_process_acknack+0x48>
 801bfb6:	4605      	mov	r5, r0
 801bfb8:	2700      	movs	r7, #0
 801bfba:	2101      	movs	r1, #1
 801bfbc:	8a60      	ldrh	r0, [r4, #18]
 801bfbe:	f000 f845 	bl	801c04c <uxr_seq_num_add>
 801bfc2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801bfc6:	fbb0 f1fc 	udiv	r1, r0, ip
 801bfca:	e9d4 2300 	ldrd	r2, r3, [r4]
 801bfce:	fb0c 0111 	mls	r1, ip, r1, r0
 801bfd2:	b289      	uxth	r1, r1
 801bfd4:	3701      	adds	r7, #1
 801bfd6:	fbb3 f3fc 	udiv	r3, r3, ip
 801bfda:	fb01 f303 	mul.w	r3, r1, r3
 801bfde:	42bd      	cmp	r5, r7
 801bfe0:	7b21      	ldrb	r1, [r4, #12]
 801bfe2:	8260      	strh	r0, [r4, #18]
 801bfe4:	50d1      	str	r1, [r2, r3]
 801bfe6:	d1e8      	bne.n	801bfba <uxr_process_acknack+0x1a>
 801bfe8:	3e00      	subs	r6, #0
 801bfea:	f04f 0300 	mov.w	r3, #0
 801bfee:	bf18      	it	ne
 801bff0:	2601      	movne	r6, #1
 801bff2:	f884 3020 	strb.w	r3, [r4, #32]
 801bff6:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801bffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801bffc <uxr_is_output_up_to_date>:
 801bffc:	8a01      	ldrh	r1, [r0, #16]
 801bffe:	8a40      	ldrh	r0, [r0, #18]
 801c000:	b508      	push	{r3, lr}
 801c002:	f000 f82b 	bl	801c05c <uxr_seq_num_cmp>
 801c006:	fab0 f080 	clz	r0, r0
 801c00a:	0940      	lsrs	r0, r0, #5
 801c00c:	bd08      	pop	{r3, pc}
 801c00e:	bf00      	nop

0801c010 <get_available_free_slots>:
 801c010:	8901      	ldrh	r1, [r0, #8]
 801c012:	b1c1      	cbz	r1, 801c046 <get_available_free_slots+0x36>
 801c014:	b530      	push	{r4, r5, lr}
 801c016:	2200      	movs	r2, #0
 801c018:	6843      	ldr	r3, [r0, #4]
 801c01a:	6805      	ldr	r5, [r0, #0]
 801c01c:	7b04      	ldrb	r4, [r0, #12]
 801c01e:	fbb3 fef1 	udiv	lr, r3, r1
 801c022:	4610      	mov	r0, r2
 801c024:	b293      	uxth	r3, r2
 801c026:	fbb3 fcf1 	udiv	ip, r3, r1
 801c02a:	fb01 331c 	mls	r3, r1, ip, r3
 801c02e:	b29b      	uxth	r3, r3
 801c030:	fb0e f303 	mul.w	r3, lr, r3
 801c034:	3201      	adds	r2, #1
 801c036:	58eb      	ldr	r3, [r5, r3]
 801c038:	429c      	cmp	r4, r3
 801c03a:	bf04      	itt	eq
 801c03c:	3001      	addeq	r0, #1
 801c03e:	b280      	uxtheq	r0, r0
 801c040:	4291      	cmp	r1, r2
 801c042:	d1ef      	bne.n	801c024 <get_available_free_slots+0x14>
 801c044:	bd30      	pop	{r4, r5, pc}
 801c046:	4608      	mov	r0, r1
 801c048:	4770      	bx	lr
 801c04a:	bf00      	nop

0801c04c <uxr_seq_num_add>:
 801c04c:	4408      	add	r0, r1
 801c04e:	b280      	uxth	r0, r0
 801c050:	4770      	bx	lr
 801c052:	bf00      	nop

0801c054 <uxr_seq_num_sub>:
 801c054:	1a40      	subs	r0, r0, r1
 801c056:	b280      	uxth	r0, r0
 801c058:	4770      	bx	lr
 801c05a:	bf00      	nop

0801c05c <uxr_seq_num_cmp>:
 801c05c:	4288      	cmp	r0, r1
 801c05e:	d010      	beq.n	801c082 <uxr_seq_num_cmp+0x26>
 801c060:	d207      	bcs.n	801c072 <uxr_seq_num_cmp+0x16>
 801c062:	1a09      	subs	r1, r1, r0
 801c064:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 801c068:	bfb4      	ite	lt
 801c06a:	f04f 30ff 	movlt.w	r0, #4294967295	@ 0xffffffff
 801c06e:	2001      	movge	r0, #1
 801c070:	4770      	bx	lr
 801c072:	1a41      	subs	r1, r0, r1
 801c074:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 801c078:	bfcc      	ite	gt
 801c07a:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801c07e:	2001      	movle	r0, #1
 801c080:	4770      	bx	lr
 801c082:	2000      	movs	r0, #0
 801c084:	4770      	bx	lr
 801c086:	bf00      	nop

0801c088 <rcl_get_automatic_discovery_range>:
 801c088:	b530      	push	{r4, r5, lr}
 801c08a:	b083      	sub	sp, #12
 801c08c:	2300      	movs	r3, #0
 801c08e:	9301      	str	r3, [sp, #4]
 801c090:	b1c0      	cbz	r0, 801c0c4 <rcl_get_automatic_discovery_range+0x3c>
 801c092:	4604      	mov	r4, r0
 801c094:	a901      	add	r1, sp, #4
 801c096:	4818      	ldr	r0, [pc, #96]	@ (801c0f8 <rcl_get_automatic_discovery_range+0x70>)
 801c098:	f7fd fa50 	bl	801953c <rcutils_get_env>
 801c09c:	b110      	cbz	r0, 801c0a4 <rcl_get_automatic_discovery_range+0x1c>
 801c09e:	2001      	movs	r0, #1
 801c0a0:	b003      	add	sp, #12
 801c0a2:	bd30      	pop	{r4, r5, pc}
 801c0a4:	9d01      	ldr	r5, [sp, #4]
 801c0a6:	782b      	ldrb	r3, [r5, #0]
 801c0a8:	b923      	cbnz	r3, 801c0b4 <rcl_get_automatic_discovery_range+0x2c>
 801c0aa:	2303      	movs	r3, #3
 801c0ac:	7023      	strb	r3, [r4, #0]
 801c0ae:	2000      	movs	r0, #0
 801c0b0:	b003      	add	sp, #12
 801c0b2:	bd30      	pop	{r4, r5, pc}
 801c0b4:	4911      	ldr	r1, [pc, #68]	@ (801c0fc <rcl_get_automatic_discovery_range+0x74>)
 801c0b6:	4628      	mov	r0, r5
 801c0b8:	f7e4 f8b2 	bl	8000220 <strcmp>
 801c0bc:	b928      	cbnz	r0, 801c0ca <rcl_get_automatic_discovery_range+0x42>
 801c0be:	2301      	movs	r3, #1
 801c0c0:	7023      	strb	r3, [r4, #0]
 801c0c2:	e7f4      	b.n	801c0ae <rcl_get_automatic_discovery_range+0x26>
 801c0c4:	200b      	movs	r0, #11
 801c0c6:	b003      	add	sp, #12
 801c0c8:	bd30      	pop	{r4, r5, pc}
 801c0ca:	490d      	ldr	r1, [pc, #52]	@ (801c100 <rcl_get_automatic_discovery_range+0x78>)
 801c0cc:	4628      	mov	r0, r5
 801c0ce:	f7e4 f8a7 	bl	8000220 <strcmp>
 801c0d2:	b168      	cbz	r0, 801c0f0 <rcl_get_automatic_discovery_range+0x68>
 801c0d4:	490b      	ldr	r1, [pc, #44]	@ (801c104 <rcl_get_automatic_discovery_range+0x7c>)
 801c0d6:	4628      	mov	r0, r5
 801c0d8:	f7e4 f8a2 	bl	8000220 <strcmp>
 801c0dc:	2800      	cmp	r0, #0
 801c0de:	d0e4      	beq.n	801c0aa <rcl_get_automatic_discovery_range+0x22>
 801c0e0:	4909      	ldr	r1, [pc, #36]	@ (801c108 <rcl_get_automatic_discovery_range+0x80>)
 801c0e2:	4628      	mov	r0, r5
 801c0e4:	f7e4 f89c 	bl	8000220 <strcmp>
 801c0e8:	b910      	cbnz	r0, 801c0f0 <rcl_get_automatic_discovery_range+0x68>
 801c0ea:	2304      	movs	r3, #4
 801c0ec:	7023      	strb	r3, [r4, #0]
 801c0ee:	e7de      	b.n	801c0ae <rcl_get_automatic_discovery_range+0x26>
 801c0f0:	2302      	movs	r3, #2
 801c0f2:	7023      	strb	r3, [r4, #0]
 801c0f4:	e7db      	b.n	801c0ae <rcl_get_automatic_discovery_range+0x26>
 801c0f6:	bf00      	nop
 801c0f8:	08021d5c 	.word	0x08021d5c
 801c0fc:	08021d7c 	.word	0x08021d7c
 801c100:	08021d80 	.word	0x08021d80
 801c104:	08021d8c 	.word	0x08021d8c
 801c108:	08021d94 	.word	0x08021d94

0801c10c <rcl_automatic_discovery_range_to_string>:
 801c10c:	2804      	cmp	r0, #4
 801c10e:	bf9a      	itte	ls
 801c110:	4b02      	ldrls	r3, [pc, #8]	@ (801c11c <rcl_automatic_discovery_range_to_string+0x10>)
 801c112:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801c116:	2000      	movhi	r0, #0
 801c118:	4770      	bx	lr
 801c11a:	bf00      	nop
 801c11c:	08021e84 	.word	0x08021e84

0801c120 <rcl_get_discovery_static_peers>:
 801c120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c124:	b08c      	sub	sp, #48	@ 0x30
 801c126:	2300      	movs	r3, #0
 801c128:	9304      	str	r3, [sp, #16]
 801c12a:	2800      	cmp	r0, #0
 801c12c:	d04e      	beq.n	801c1cc <rcl_get_discovery_static_peers+0xac>
 801c12e:	460d      	mov	r5, r1
 801c130:	2900      	cmp	r1, #0
 801c132:	d04b      	beq.n	801c1cc <rcl_get_discovery_static_peers+0xac>
 801c134:	4604      	mov	r4, r0
 801c136:	a904      	add	r1, sp, #16
 801c138:	482d      	ldr	r0, [pc, #180]	@ (801c1f0 <rcl_get_discovery_static_peers+0xd0>)
 801c13a:	f7fd f9ff 	bl	801953c <rcutils_get_env>
 801c13e:	b118      	cbz	r0, 801c148 <rcl_get_discovery_static_peers+0x28>
 801c140:	2001      	movs	r0, #1
 801c142:	b00c      	add	sp, #48	@ 0x30
 801c144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c148:	9b04      	ldr	r3, [sp, #16]
 801c14a:	2b00      	cmp	r3, #0
 801c14c:	d0f8      	beq.n	801c140 <rcl_get_discovery_static_peers+0x20>
 801c14e:	af05      	add	r7, sp, #20
 801c150:	4638      	mov	r0, r7
 801c152:	f000 fc8f 	bl	801ca74 <rcutils_get_zero_initialized_string_array>
 801c156:	f105 0308 	add.w	r3, r5, #8
 801c15a:	9703      	str	r7, [sp, #12]
 801c15c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801c160:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801c164:	9804      	ldr	r0, [sp, #16]
 801c166:	e895 000c 	ldmia.w	r5, {r2, r3}
 801c16a:	213b      	movs	r1, #59	@ 0x3b
 801c16c:	f000 fbd0 	bl	801c910 <rcutils_split>
 801c170:	2800      	cmp	r0, #0
 801c172:	d1e5      	bne.n	801c140 <rcl_get_discovery_static_peers+0x20>
 801c174:	9905      	ldr	r1, [sp, #20]
 801c176:	462a      	mov	r2, r5
 801c178:	4620      	mov	r0, r4
 801c17a:	f7fd fca9 	bl	8019ad0 <rmw_discovery_options_init>
 801c17e:	4606      	mov	r6, r0
 801c180:	bb90      	cbnz	r0, 801c1e8 <rcl_get_discovery_static_peers+0xc8>
 801c182:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801c186:	f1b9 0f00 	cmp.w	r9, #0
 801c18a:	d026      	beq.n	801c1da <rcl_get_discovery_static_peers+0xba>
 801c18c:	f8dd a018 	ldr.w	sl, [sp, #24]
 801c190:	4680      	mov	r8, r0
 801c192:	f85a 5026 	ldr.w	r5, [sl, r6, lsl #2]
 801c196:	4628      	mov	r0, r5
 801c198:	f7e4 f8a2 	bl	80002e0 <strlen>
 801c19c:	28ff      	cmp	r0, #255	@ 0xff
 801c19e:	4629      	mov	r1, r5
 801c1a0:	ea4f 2506 	mov.w	r5, r6, lsl #8
 801c1a4:	d816      	bhi.n	801c1d4 <rcl_get_discovery_static_peers+0xb4>
 801c1a6:	6860      	ldr	r0, [r4, #4]
 801c1a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801c1ac:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 801c1b0:	f001 fce9 	bl	801db86 <strncpy>
 801c1b4:	6863      	ldr	r3, [r4, #4]
 801c1b6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801c1ba:	3601      	adds	r6, #1
 801c1bc:	442b      	add	r3, r5
 801c1be:	454e      	cmp	r6, r9
 801c1c0:	f883 80ff 	strb.w	r8, [r3, #255]	@ 0xff
 801c1c4:	d209      	bcs.n	801c1da <rcl_get_discovery_static_peers+0xba>
 801c1c6:	f8dd a018 	ldr.w	sl, [sp, #24]
 801c1ca:	e7e2      	b.n	801c192 <rcl_get_discovery_static_peers+0x72>
 801c1cc:	200b      	movs	r0, #11
 801c1ce:	b00c      	add	sp, #48	@ 0x30
 801c1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c1d4:	3601      	adds	r6, #1
 801c1d6:	454e      	cmp	r6, r9
 801c1d8:	d3db      	bcc.n	801c192 <rcl_get_discovery_static_peers+0x72>
 801c1da:	4638      	mov	r0, r7
 801c1dc:	f000 fc8a 	bl	801caf4 <rcutils_string_array_fini>
 801c1e0:	3800      	subs	r0, #0
 801c1e2:	bf18      	it	ne
 801c1e4:	2001      	movne	r0, #1
 801c1e6:	e7ac      	b.n	801c142 <rcl_get_discovery_static_peers+0x22>
 801c1e8:	f7fa f974 	bl	80164d4 <rcl_convert_rmw_ret_to_rcl_ret>
 801c1ec:	e7a9      	b.n	801c142 <rcl_get_discovery_static_peers+0x22>
 801c1ee:	bf00      	nop
 801c1f0:	08021da4 	.word	0x08021da4

0801c1f4 <rcl_get_default_domain_id>:
 801c1f4:	b530      	push	{r4, r5, lr}
 801c1f6:	b083      	sub	sp, #12
 801c1f8:	2300      	movs	r3, #0
 801c1fa:	9300      	str	r3, [sp, #0]
 801c1fc:	b1f0      	cbz	r0, 801c23c <rcl_get_default_domain_id+0x48>
 801c1fe:	4604      	mov	r4, r0
 801c200:	4669      	mov	r1, sp
 801c202:	4812      	ldr	r0, [pc, #72]	@ (801c24c <rcl_get_default_domain_id+0x58>)
 801c204:	f7fd f99a 	bl	801953c <rcutils_get_env>
 801c208:	4602      	mov	r2, r0
 801c20a:	b108      	cbz	r0, 801c210 <rcl_get_default_domain_id+0x1c>
 801c20c:	2001      	movs	r0, #1
 801c20e:	e004      	b.n	801c21a <rcl_get_default_domain_id+0x26>
 801c210:	9800      	ldr	r0, [sp, #0]
 801c212:	b108      	cbz	r0, 801c218 <rcl_get_default_domain_id+0x24>
 801c214:	7803      	ldrb	r3, [r0, #0]
 801c216:	b913      	cbnz	r3, 801c21e <rcl_get_default_domain_id+0x2a>
 801c218:	2000      	movs	r0, #0
 801c21a:	b003      	add	sp, #12
 801c21c:	bd30      	pop	{r4, r5, pc}
 801c21e:	a901      	add	r1, sp, #4
 801c220:	9201      	str	r2, [sp, #4]
 801c222:	f001 f9e3 	bl	801d5ec <strtoul>
 801c226:	4605      	mov	r5, r0
 801c228:	b158      	cbz	r0, 801c242 <rcl_get_default_domain_id+0x4e>
 801c22a:	1c43      	adds	r3, r0, #1
 801c22c:	d104      	bne.n	801c238 <rcl_get_default_domain_id+0x44>
 801c22e:	f001 fd29 	bl	801dc84 <__errno>
 801c232:	6803      	ldr	r3, [r0, #0]
 801c234:	2b22      	cmp	r3, #34	@ 0x22
 801c236:	d0e9      	beq.n	801c20c <rcl_get_default_domain_id+0x18>
 801c238:	6025      	str	r5, [r4, #0]
 801c23a:	e7ed      	b.n	801c218 <rcl_get_default_domain_id+0x24>
 801c23c:	200b      	movs	r0, #11
 801c23e:	b003      	add	sp, #12
 801c240:	bd30      	pop	{r4, r5, pc}
 801c242:	9b01      	ldr	r3, [sp, #4]
 801c244:	781b      	ldrb	r3, [r3, #0]
 801c246:	2b00      	cmp	r3, #0
 801c248:	d0f6      	beq.n	801c238 <rcl_get_default_domain_id+0x44>
 801c24a:	e7df      	b.n	801c20c <rcl_get_default_domain_id+0x18>
 801c24c:	08021e98 	.word	0x08021e98

0801c250 <rcl_expand_topic_name>:
 801c250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c254:	b08b      	sub	sp, #44	@ 0x2c
 801c256:	9306      	str	r3, [sp, #24]
 801c258:	2800      	cmp	r0, #0
 801c25a:	f000 80ad 	beq.w	801c3b8 <rcl_expand_topic_name+0x168>
 801c25e:	460e      	mov	r6, r1
 801c260:	2900      	cmp	r1, #0
 801c262:	f000 80a9 	beq.w	801c3b8 <rcl_expand_topic_name+0x168>
 801c266:	4617      	mov	r7, r2
 801c268:	2a00      	cmp	r2, #0
 801c26a:	f000 80a5 	beq.w	801c3b8 <rcl_expand_topic_name+0x168>
 801c26e:	2b00      	cmp	r3, #0
 801c270:	f000 80a2 	beq.w	801c3b8 <rcl_expand_topic_name+0x168>
 801c274:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c276:	2b00      	cmp	r3, #0
 801c278:	f000 809e 	beq.w	801c3b8 <rcl_expand_topic_name+0x168>
 801c27c:	2200      	movs	r2, #0
 801c27e:	a909      	add	r1, sp, #36	@ 0x24
 801c280:	4680      	mov	r8, r0
 801c282:	f000 fa53 	bl	801c72c <rcl_validate_topic_name>
 801c286:	4605      	mov	r5, r0
 801c288:	2800      	cmp	r0, #0
 801c28a:	f040 8096 	bne.w	801c3ba <rcl_expand_topic_name+0x16a>
 801c28e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c290:	2b00      	cmp	r3, #0
 801c292:	f040 809a 	bne.w	801c3ca <rcl_expand_topic_name+0x17a>
 801c296:	4602      	mov	r2, r0
 801c298:	a909      	add	r1, sp, #36	@ 0x24
 801c29a:	4630      	mov	r0, r6
 801c29c:	f7fd fdc0 	bl	8019e20 <rmw_validate_node_name>
 801c2a0:	2800      	cmp	r0, #0
 801c2a2:	f040 808e 	bne.w	801c3c2 <rcl_expand_topic_name+0x172>
 801c2a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c2a8:	2a00      	cmp	r2, #0
 801c2aa:	f040 8093 	bne.w	801c3d4 <rcl_expand_topic_name+0x184>
 801c2ae:	a909      	add	r1, sp, #36	@ 0x24
 801c2b0:	4638      	mov	r0, r7
 801c2b2:	f7fd fd97 	bl	8019de4 <rmw_validate_namespace>
 801c2b6:	2800      	cmp	r0, #0
 801c2b8:	f040 8083 	bne.w	801c3c2 <rcl_expand_topic_name+0x172>
 801c2bc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801c2be:	2d00      	cmp	r5, #0
 801c2c0:	f040 80f4 	bne.w	801c4ac <rcl_expand_topic_name+0x25c>
 801c2c4:	217b      	movs	r1, #123	@ 0x7b
 801c2c6:	4640      	mov	r0, r8
 801c2c8:	f001 fc3e 	bl	801db48 <strchr>
 801c2cc:	f898 3000 	ldrb.w	r3, [r8]
 801c2d0:	2b2f      	cmp	r3, #47	@ 0x2f
 801c2d2:	4604      	mov	r4, r0
 801c2d4:	f000 809f 	beq.w	801c416 <rcl_expand_topic_name+0x1c6>
 801c2d8:	2b7e      	cmp	r3, #126	@ 0x7e
 801c2da:	f040 80e9 	bne.w	801c4b0 <rcl_expand_topic_name+0x260>
 801c2de:	4638      	mov	r0, r7
 801c2e0:	f7e3 fffe 	bl	80002e0 <strlen>
 801c2e4:	4a82      	ldr	r2, [pc, #520]	@ (801c4f0 <rcl_expand_topic_name+0x2a0>)
 801c2e6:	4b83      	ldr	r3, [pc, #524]	@ (801c4f4 <rcl_expand_topic_name+0x2a4>)
 801c2e8:	2801      	cmp	r0, #1
 801c2ea:	bf08      	it	eq
 801c2ec:	4613      	moveq	r3, r2
 801c2ee:	9302      	str	r3, [sp, #8]
 801c2f0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801c2f2:	9300      	str	r3, [sp, #0]
 801c2f4:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801c2f8:	f108 0301 	add.w	r3, r8, #1
 801c2fc:	9305      	str	r3, [sp, #20]
 801c2fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801c302:	9301      	str	r3, [sp, #4]
 801c304:	ab14      	add	r3, sp, #80	@ 0x50
 801c306:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c308:	f7fd f940 	bl	801958c <rcutils_format_string_limit>
 801c30c:	4682      	mov	sl, r0
 801c30e:	2800      	cmp	r0, #0
 801c310:	f000 80d1 	beq.w	801c4b6 <rcl_expand_topic_name+0x266>
 801c314:	2c00      	cmp	r4, #0
 801c316:	f000 8085 	beq.w	801c424 <rcl_expand_topic_name+0x1d4>
 801c31a:	217b      	movs	r1, #123	@ 0x7b
 801c31c:	f001 fc14 	bl	801db48 <strchr>
 801c320:	46d1      	mov	r9, sl
 801c322:	4604      	mov	r4, r0
 801c324:	9507      	str	r5, [sp, #28]
 801c326:	464d      	mov	r5, r9
 801c328:	2c00      	cmp	r4, #0
 801c32a:	f000 80a0 	beq.w	801c46e <rcl_expand_topic_name+0x21e>
 801c32e:	217d      	movs	r1, #125	@ 0x7d
 801c330:	4628      	mov	r0, r5
 801c332:	f001 fc09 	bl	801db48 <strchr>
 801c336:	eba0 0904 	sub.w	r9, r0, r4
 801c33a:	f109 0b01 	add.w	fp, r9, #1
 801c33e:	486e      	ldr	r0, [pc, #440]	@ (801c4f8 <rcl_expand_topic_name+0x2a8>)
 801c340:	465a      	mov	r2, fp
 801c342:	4621      	mov	r1, r4
 801c344:	f001 fc0d 	bl	801db62 <strncmp>
 801c348:	2800      	cmp	r0, #0
 801c34a:	d069      	beq.n	801c420 <rcl_expand_topic_name+0x1d0>
 801c34c:	486b      	ldr	r0, [pc, #428]	@ (801c4fc <rcl_expand_topic_name+0x2ac>)
 801c34e:	465a      	mov	r2, fp
 801c350:	4621      	mov	r1, r4
 801c352:	f001 fc06 	bl	801db62 <strncmp>
 801c356:	b130      	cbz	r0, 801c366 <rcl_expand_topic_name+0x116>
 801c358:	4869      	ldr	r0, [pc, #420]	@ (801c500 <rcl_expand_topic_name+0x2b0>)
 801c35a:	465a      	mov	r2, fp
 801c35c:	4621      	mov	r1, r4
 801c35e:	f001 fc00 	bl	801db62 <strncmp>
 801c362:	2800      	cmp	r0, #0
 801c364:	d138      	bne.n	801c3d8 <rcl_expand_topic_name+0x188>
 801c366:	46b9      	mov	r9, r7
 801c368:	ab16      	add	r3, sp, #88	@ 0x58
 801c36a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801c36e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801c372:	ab14      	add	r3, sp, #80	@ 0x50
 801c374:	4620      	mov	r0, r4
 801c376:	cb0c      	ldmia	r3, {r2, r3}
 801c378:	4659      	mov	r1, fp
 801c37a:	f7fd fa5b 	bl	8019834 <rcutils_strndup>
 801c37e:	4604      	mov	r4, r0
 801c380:	2800      	cmp	r0, #0
 801c382:	f000 809d 	beq.w	801c4c0 <rcl_expand_topic_name+0x270>
 801c386:	464a      	mov	r2, r9
 801c388:	4628      	mov	r0, r5
 801c38a:	ab14      	add	r3, sp, #80	@ 0x50
 801c38c:	4621      	mov	r1, r4
 801c38e:	f7fd f937 	bl	8019600 <rcutils_repl_str>
 801c392:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801c394:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801c396:	4605      	mov	r5, r0
 801c398:	4620      	mov	r0, r4
 801c39a:	4798      	blx	r3
 801c39c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801c39e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801c3a0:	4650      	mov	r0, sl
 801c3a2:	4798      	blx	r3
 801c3a4:	2d00      	cmp	r5, #0
 801c3a6:	f000 8086 	beq.w	801c4b6 <rcl_expand_topic_name+0x266>
 801c3aa:	217b      	movs	r1, #123	@ 0x7b
 801c3ac:	4628      	mov	r0, r5
 801c3ae:	f001 fbcb 	bl	801db48 <strchr>
 801c3b2:	46aa      	mov	sl, r5
 801c3b4:	4604      	mov	r4, r0
 801c3b6:	e7b7      	b.n	801c328 <rcl_expand_topic_name+0xd8>
 801c3b8:	250b      	movs	r5, #11
 801c3ba:	4628      	mov	r0, r5
 801c3bc:	b00b      	add	sp, #44	@ 0x2c
 801c3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3c2:	f7fa f887 	bl	80164d4 <rcl_convert_rmw_ret_to_rcl_ret>
 801c3c6:	4605      	mov	r5, r0
 801c3c8:	e7f7      	b.n	801c3ba <rcl_expand_topic_name+0x16a>
 801c3ca:	2567      	movs	r5, #103	@ 0x67
 801c3cc:	4628      	mov	r0, r5
 801c3ce:	b00b      	add	sp, #44	@ 0x2c
 801c3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3d4:	25c9      	movs	r5, #201	@ 0xc9
 801c3d6:	e7f0      	b.n	801c3ba <rcl_expand_topic_name+0x16a>
 801c3d8:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801c3dc:	9806      	ldr	r0, [sp, #24]
 801c3de:	1c61      	adds	r1, r4, #1
 801c3e0:	f7fd fb44 	bl	8019a6c <rcutils_string_map_getn>
 801c3e4:	4681      	mov	r9, r0
 801c3e6:	2800      	cmp	r0, #0
 801c3e8:	d1be      	bne.n	801c368 <rcl_expand_topic_name+0x118>
 801c3ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c3ec:	ab16      	add	r3, sp, #88	@ 0x58
 801c3ee:	6010      	str	r0, [r2, #0]
 801c3f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801c3f4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801c3f8:	ab14      	add	r3, sp, #80	@ 0x50
 801c3fa:	cb0c      	ldmia	r3, {r2, r3}
 801c3fc:	4659      	mov	r1, fp
 801c3fe:	4620      	mov	r0, r4
 801c400:	f7fd fa18 	bl	8019834 <rcutils_strndup>
 801c404:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801c406:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801c408:	4798      	blx	r3
 801c40a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801c40c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801c40e:	4650      	mov	r0, sl
 801c410:	4798      	blx	r3
 801c412:	2569      	movs	r5, #105	@ 0x69
 801c414:	e7d1      	b.n	801c3ba <rcl_expand_topic_name+0x16a>
 801c416:	2800      	cmp	r0, #0
 801c418:	d059      	beq.n	801c4ce <rcl_expand_topic_name+0x27e>
 801c41a:	46c1      	mov	r9, r8
 801c41c:	46aa      	mov	sl, r5
 801c41e:	e781      	b.n	801c324 <rcl_expand_topic_name+0xd4>
 801c420:	46b1      	mov	r9, r6
 801c422:	e7a1      	b.n	801c368 <rcl_expand_topic_name+0x118>
 801c424:	f89a 3000 	ldrb.w	r3, [sl]
 801c428:	2b2f      	cmp	r3, #47	@ 0x2f
 801c42a:	d01c      	beq.n	801c466 <rcl_expand_topic_name+0x216>
 801c42c:	4638      	mov	r0, r7
 801c42e:	f7e3 ff57 	bl	80002e0 <strlen>
 801c432:	4a34      	ldr	r2, [pc, #208]	@ (801c504 <rcl_expand_topic_name+0x2b4>)
 801c434:	4b34      	ldr	r3, [pc, #208]	@ (801c508 <rcl_expand_topic_name+0x2b8>)
 801c436:	f8cd a010 	str.w	sl, [sp, #16]
 801c43a:	2801      	cmp	r0, #1
 801c43c:	bf18      	it	ne
 801c43e:	4613      	movne	r3, r2
 801c440:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801c444:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801c448:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801c44a:	9703      	str	r7, [sp, #12]
 801c44c:	9200      	str	r2, [sp, #0]
 801c44e:	ab14      	add	r3, sp, #80	@ 0x50
 801c450:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c452:	f7fd f89b 	bl	801958c <rcutils_format_string_limit>
 801c456:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801c458:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801c45a:	4604      	mov	r4, r0
 801c45c:	4650      	mov	r0, sl
 801c45e:	4798      	blx	r3
 801c460:	46a2      	mov	sl, r4
 801c462:	4653      	mov	r3, sl
 801c464:	b33b      	cbz	r3, 801c4b6 <rcl_expand_topic_name+0x266>
 801c466:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c468:	f8c3 a000 	str.w	sl, [r3]
 801c46c:	e7a5      	b.n	801c3ba <rcl_expand_topic_name+0x16a>
 801c46e:	4653      	mov	r3, sl
 801c470:	9d07      	ldr	r5, [sp, #28]
 801c472:	2b00      	cmp	r3, #0
 801c474:	d1d6      	bne.n	801c424 <rcl_expand_topic_name+0x1d4>
 801c476:	f898 3000 	ldrb.w	r3, [r8]
 801c47a:	2b2f      	cmp	r3, #47	@ 0x2f
 801c47c:	d0f3      	beq.n	801c466 <rcl_expand_topic_name+0x216>
 801c47e:	4638      	mov	r0, r7
 801c480:	f7e3 ff2e 	bl	80002e0 <strlen>
 801c484:	4a1f      	ldr	r2, [pc, #124]	@ (801c504 <rcl_expand_topic_name+0x2b4>)
 801c486:	4b20      	ldr	r3, [pc, #128]	@ (801c508 <rcl_expand_topic_name+0x2b8>)
 801c488:	f8cd 8010 	str.w	r8, [sp, #16]
 801c48c:	2801      	cmp	r0, #1
 801c48e:	bf18      	it	ne
 801c490:	4613      	movne	r3, r2
 801c492:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801c496:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801c49a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801c49c:	9703      	str	r7, [sp, #12]
 801c49e:	9200      	str	r2, [sp, #0]
 801c4a0:	ab14      	add	r3, sp, #80	@ 0x50
 801c4a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c4a4:	f7fd f872 	bl	801958c <rcutils_format_string_limit>
 801c4a8:	4682      	mov	sl, r0
 801c4aa:	e7da      	b.n	801c462 <rcl_expand_topic_name+0x212>
 801c4ac:	25ca      	movs	r5, #202	@ 0xca
 801c4ae:	e784      	b.n	801c3ba <rcl_expand_topic_name+0x16a>
 801c4b0:	2800      	cmp	r0, #0
 801c4b2:	d1b2      	bne.n	801c41a <rcl_expand_topic_name+0x1ca>
 801c4b4:	e7e3      	b.n	801c47e <rcl_expand_topic_name+0x22e>
 801c4b6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c4b8:	2300      	movs	r3, #0
 801c4ba:	6013      	str	r3, [r2, #0]
 801c4bc:	250a      	movs	r5, #10
 801c4be:	e77c      	b.n	801c3ba <rcl_expand_topic_name+0x16a>
 801c4c0:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 801c4c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801c4c6:	6014      	str	r4, [r2, #0]
 801c4c8:	4650      	mov	r0, sl
 801c4ca:	4798      	blx	r3
 801c4cc:	e7f6      	b.n	801c4bc <rcl_expand_topic_name+0x26c>
 801c4ce:	ab17      	add	r3, sp, #92	@ 0x5c
 801c4d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c4d4:	e88d 0003 	stmia.w	sp, {r0, r1}
 801c4d8:	ab14      	add	r3, sp, #80	@ 0x50
 801c4da:	cb0e      	ldmia	r3, {r1, r2, r3}
 801c4dc:	4640      	mov	r0, r8
 801c4de:	f7fd f973 	bl	80197c8 <rcutils_strdup>
 801c4e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c4e4:	6018      	str	r0, [r3, #0]
 801c4e6:	2800      	cmp	r0, #0
 801c4e8:	f47f af67 	bne.w	801c3ba <rcl_expand_topic_name+0x16a>
 801c4ec:	e7e6      	b.n	801c4bc <rcl_expand_topic_name+0x26c>
 801c4ee:	bf00      	nop
 801c4f0:	0802066c 	.word	0x0802066c
 801c4f4:	08021ea8 	.word	0x08021ea8
 801c4f8:	08021eb0 	.word	0x08021eb0
 801c4fc:	08021eb8 	.word	0x08021eb8
 801c500:	08021ec0 	.word	0x08021ec0
 801c504:	08020658 	.word	0x08020658
 801c508:	0802067c 	.word	0x0802067c

0801c50c <rcl_get_default_topic_name_substitutions>:
 801c50c:	2800      	cmp	r0, #0
 801c50e:	bf0c      	ite	eq
 801c510:	200b      	moveq	r0, #11
 801c512:	2000      	movne	r0, #0
 801c514:	4770      	bx	lr
 801c516:	bf00      	nop

0801c518 <rcl_get_zero_initialized_guard_condition>:
 801c518:	4a03      	ldr	r2, [pc, #12]	@ (801c528 <rcl_get_zero_initialized_guard_condition+0x10>)
 801c51a:	4603      	mov	r3, r0
 801c51c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c520:	e883 0003 	stmia.w	r3, {r0, r1}
 801c524:	4618      	mov	r0, r3
 801c526:	4770      	bx	lr
 801c528:	08021ecc 	.word	0x08021ecc

0801c52c <rcl_guard_condition_init>:
 801c52c:	b082      	sub	sp, #8
 801c52e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c530:	b087      	sub	sp, #28
 801c532:	ac0c      	add	r4, sp, #48	@ 0x30
 801c534:	e884 000c 	stmia.w	r4, {r2, r3}
 801c538:	46a6      	mov	lr, r4
 801c53a:	460d      	mov	r5, r1
 801c53c:	4604      	mov	r4, r0
 801c53e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c542:	f10d 0c04 	add.w	ip, sp, #4
 801c546:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c54a:	f8de 3000 	ldr.w	r3, [lr]
 801c54e:	f8cc 3000 	str.w	r3, [ip]
 801c552:	a801      	add	r0, sp, #4
 801c554:	f7f2 ff7a 	bl	800f44c <rcutils_allocator_is_valid>
 801c558:	b338      	cbz	r0, 801c5aa <rcl_guard_condition_init+0x7e>
 801c55a:	b334      	cbz	r4, 801c5aa <rcl_guard_condition_init+0x7e>
 801c55c:	6866      	ldr	r6, [r4, #4]
 801c55e:	b9ee      	cbnz	r6, 801c59c <rcl_guard_condition_init+0x70>
 801c560:	b31d      	cbz	r5, 801c5aa <rcl_guard_condition_init+0x7e>
 801c562:	4628      	mov	r0, r5
 801c564:	f7f9 ffd6 	bl	8016514 <rcl_context_is_valid>
 801c568:	b308      	cbz	r0, 801c5ae <rcl_guard_condition_init+0x82>
 801c56a:	9b01      	ldr	r3, [sp, #4]
 801c56c:	9905      	ldr	r1, [sp, #20]
 801c56e:	201c      	movs	r0, #28
 801c570:	4798      	blx	r3
 801c572:	4607      	mov	r7, r0
 801c574:	6060      	str	r0, [r4, #4]
 801c576:	b310      	cbz	r0, 801c5be <rcl_guard_condition_init+0x92>
 801c578:	6828      	ldr	r0, [r5, #0]
 801c57a:	3028      	adds	r0, #40	@ 0x28
 801c57c:	f000 fae0 	bl	801cb40 <rmw_create_guard_condition>
 801c580:	6038      	str	r0, [r7, #0]
 801c582:	6860      	ldr	r0, [r4, #4]
 801c584:	6807      	ldr	r7, [r0, #0]
 801c586:	b1a7      	cbz	r7, 801c5b2 <rcl_guard_condition_init+0x86>
 801c588:	2301      	movs	r3, #1
 801c58a:	ac01      	add	r4, sp, #4
 801c58c:	7103      	strb	r3, [r0, #4]
 801c58e:	f100 0708 	add.w	r7, r0, #8
 801c592:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c594:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801c596:	6823      	ldr	r3, [r4, #0]
 801c598:	603b      	str	r3, [r7, #0]
 801c59a:	e000      	b.n	801c59e <rcl_guard_condition_init+0x72>
 801c59c:	2664      	movs	r6, #100	@ 0x64
 801c59e:	4630      	mov	r0, r6
 801c5a0:	b007      	add	sp, #28
 801c5a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c5a6:	b002      	add	sp, #8
 801c5a8:	4770      	bx	lr
 801c5aa:	260b      	movs	r6, #11
 801c5ac:	e7f7      	b.n	801c59e <rcl_guard_condition_init+0x72>
 801c5ae:	2665      	movs	r6, #101	@ 0x65
 801c5b0:	e7f5      	b.n	801c59e <rcl_guard_condition_init+0x72>
 801c5b2:	9b02      	ldr	r3, [sp, #8]
 801c5b4:	9905      	ldr	r1, [sp, #20]
 801c5b6:	4798      	blx	r3
 801c5b8:	2601      	movs	r6, #1
 801c5ba:	6067      	str	r7, [r4, #4]
 801c5bc:	e7ef      	b.n	801c59e <rcl_guard_condition_init+0x72>
 801c5be:	260a      	movs	r6, #10
 801c5c0:	e7ed      	b.n	801c59e <rcl_guard_condition_init+0x72>
 801c5c2:	bf00      	nop

0801c5c4 <rcl_guard_condition_init_from_rmw>:
 801c5c4:	b082      	sub	sp, #8
 801c5c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c5ca:	b086      	sub	sp, #24
 801c5cc:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801c5d0:	4604      	mov	r4, r0
 801c5d2:	f84c 3f04 	str.w	r3, [ip, #4]!
 801c5d6:	460e      	mov	r6, r1
 801c5d8:	4617      	mov	r7, r2
 801c5da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c5de:	f10d 0e04 	add.w	lr, sp, #4
 801c5e2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801c5e6:	f8dc 3000 	ldr.w	r3, [ip]
 801c5ea:	f8ce 3000 	str.w	r3, [lr]
 801c5ee:	a801      	add	r0, sp, #4
 801c5f0:	f7f2 ff2c 	bl	800f44c <rcutils_allocator_is_valid>
 801c5f4:	b350      	cbz	r0, 801c64c <rcl_guard_condition_init_from_rmw+0x88>
 801c5f6:	b34c      	cbz	r4, 801c64c <rcl_guard_condition_init_from_rmw+0x88>
 801c5f8:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801c5fc:	f1b8 0f00 	cmp.w	r8, #0
 801c600:	d11e      	bne.n	801c640 <rcl_guard_condition_init_from_rmw+0x7c>
 801c602:	b31f      	cbz	r7, 801c64c <rcl_guard_condition_init_from_rmw+0x88>
 801c604:	4638      	mov	r0, r7
 801c606:	f7f9 ff85 	bl	8016514 <rcl_context_is_valid>
 801c60a:	b328      	cbz	r0, 801c658 <rcl_guard_condition_init_from_rmw+0x94>
 801c60c:	9b01      	ldr	r3, [sp, #4]
 801c60e:	9905      	ldr	r1, [sp, #20]
 801c610:	201c      	movs	r0, #28
 801c612:	4798      	blx	r3
 801c614:	4605      	mov	r5, r0
 801c616:	6060      	str	r0, [r4, #4]
 801c618:	b358      	cbz	r0, 801c672 <rcl_guard_condition_init_from_rmw+0xae>
 801c61a:	b1fe      	cbz	r6, 801c65c <rcl_guard_condition_init_from_rmw+0x98>
 801c61c:	6006      	str	r6, [r0, #0]
 801c61e:	f880 8004 	strb.w	r8, [r0, #4]
 801c622:	ac01      	add	r4, sp, #4
 801c624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c626:	f105 0c08 	add.w	ip, r5, #8
 801c62a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c62e:	6823      	ldr	r3, [r4, #0]
 801c630:	f8cc 3000 	str.w	r3, [ip]
 801c634:	2000      	movs	r0, #0
 801c636:	b006      	add	sp, #24
 801c638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c63c:	b002      	add	sp, #8
 801c63e:	4770      	bx	lr
 801c640:	2064      	movs	r0, #100	@ 0x64
 801c642:	b006      	add	sp, #24
 801c644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c648:	b002      	add	sp, #8
 801c64a:	4770      	bx	lr
 801c64c:	200b      	movs	r0, #11
 801c64e:	b006      	add	sp, #24
 801c650:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c654:	b002      	add	sp, #8
 801c656:	4770      	bx	lr
 801c658:	2065      	movs	r0, #101	@ 0x65
 801c65a:	e7f2      	b.n	801c642 <rcl_guard_condition_init_from_rmw+0x7e>
 801c65c:	6838      	ldr	r0, [r7, #0]
 801c65e:	3028      	adds	r0, #40	@ 0x28
 801c660:	f000 fa6e 	bl	801cb40 <rmw_create_guard_condition>
 801c664:	6028      	str	r0, [r5, #0]
 801c666:	6865      	ldr	r5, [r4, #4]
 801c668:	682e      	ldr	r6, [r5, #0]
 801c66a:	b126      	cbz	r6, 801c676 <rcl_guard_condition_init_from_rmw+0xb2>
 801c66c:	2301      	movs	r3, #1
 801c66e:	712b      	strb	r3, [r5, #4]
 801c670:	e7d7      	b.n	801c622 <rcl_guard_condition_init_from_rmw+0x5e>
 801c672:	200a      	movs	r0, #10
 801c674:	e7e5      	b.n	801c642 <rcl_guard_condition_init_from_rmw+0x7e>
 801c676:	4628      	mov	r0, r5
 801c678:	9b02      	ldr	r3, [sp, #8]
 801c67a:	9905      	ldr	r1, [sp, #20]
 801c67c:	4798      	blx	r3
 801c67e:	2001      	movs	r0, #1
 801c680:	6066      	str	r6, [r4, #4]
 801c682:	e7de      	b.n	801c642 <rcl_guard_condition_init_from_rmw+0x7e>

0801c684 <rcl_guard_condition_fini>:
 801c684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c686:	b1d8      	cbz	r0, 801c6c0 <rcl_guard_condition_fini+0x3c>
 801c688:	4604      	mov	r4, r0
 801c68a:	6840      	ldr	r0, [r0, #4]
 801c68c:	b158      	cbz	r0, 801c6a6 <rcl_guard_condition_fini+0x22>
 801c68e:	6803      	ldr	r3, [r0, #0]
 801c690:	68c6      	ldr	r6, [r0, #12]
 801c692:	6987      	ldr	r7, [r0, #24]
 801c694:	b153      	cbz	r3, 801c6ac <rcl_guard_condition_fini+0x28>
 801c696:	7905      	ldrb	r5, [r0, #4]
 801c698:	b955      	cbnz	r5, 801c6b0 <rcl_guard_condition_fini+0x2c>
 801c69a:	4639      	mov	r1, r7
 801c69c:	47b0      	blx	r6
 801c69e:	2300      	movs	r3, #0
 801c6a0:	6063      	str	r3, [r4, #4]
 801c6a2:	4628      	mov	r0, r5
 801c6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c6a6:	4605      	mov	r5, r0
 801c6a8:	4628      	mov	r0, r5
 801c6aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c6ac:	461d      	mov	r5, r3
 801c6ae:	e7f4      	b.n	801c69a <rcl_guard_condition_fini+0x16>
 801c6b0:	4618      	mov	r0, r3
 801c6b2:	f000 fa59 	bl	801cb68 <rmw_destroy_guard_condition>
 801c6b6:	1e05      	subs	r5, r0, #0
 801c6b8:	bf18      	it	ne
 801c6ba:	2501      	movne	r5, #1
 801c6bc:	6860      	ldr	r0, [r4, #4]
 801c6be:	e7ec      	b.n	801c69a <rcl_guard_condition_fini+0x16>
 801c6c0:	250b      	movs	r5, #11
 801c6c2:	4628      	mov	r0, r5
 801c6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c6c6:	bf00      	nop

0801c6c8 <rcl_guard_condition_get_default_options>:
 801c6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c6ca:	b087      	sub	sp, #28
 801c6cc:	4606      	mov	r6, r0
 801c6ce:	4668      	mov	r0, sp
 801c6d0:	f7f2 fe90 	bl	800f3f4 <rcutils_get_default_allocator>
 801c6d4:	46ee      	mov	lr, sp
 801c6d6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c6da:	4c08      	ldr	r4, [pc, #32]	@ (801c6fc <rcl_guard_condition_get_default_options+0x34>)
 801c6dc:	46a4      	mov	ip, r4
 801c6de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c6e2:	4625      	mov	r5, r4
 801c6e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c6e6:	4634      	mov	r4, r6
 801c6e8:	f8de 7000 	ldr.w	r7, [lr]
 801c6ec:	f8cc 7000 	str.w	r7, [ip]
 801c6f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c6f2:	4630      	mov	r0, r6
 801c6f4:	6027      	str	r7, [r4, #0]
 801c6f6:	b007      	add	sp, #28
 801c6f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c6fa:	bf00      	nop
 801c6fc:	2000f88c 	.word	0x2000f88c

0801c700 <rcl_trigger_guard_condition>:
 801c700:	b148      	cbz	r0, 801c716 <rcl_trigger_guard_condition+0x16>
 801c702:	b508      	push	{r3, lr}
 801c704:	6843      	ldr	r3, [r0, #4]
 801c706:	b143      	cbz	r3, 801c71a <rcl_trigger_guard_condition+0x1a>
 801c708:	6818      	ldr	r0, [r3, #0]
 801c70a:	f000 fa41 	bl	801cb90 <rmw_trigger_guard_condition>
 801c70e:	3800      	subs	r0, #0
 801c710:	bf18      	it	ne
 801c712:	2001      	movne	r0, #1
 801c714:	bd08      	pop	{r3, pc}
 801c716:	200b      	movs	r0, #11
 801c718:	4770      	bx	lr
 801c71a:	200b      	movs	r0, #11
 801c71c:	bd08      	pop	{r3, pc}
 801c71e:	bf00      	nop

0801c720 <rcl_guard_condition_get_rmw_handle>:
 801c720:	b110      	cbz	r0, 801c728 <rcl_guard_condition_get_rmw_handle+0x8>
 801c722:	6840      	ldr	r0, [r0, #4]
 801c724:	b100      	cbz	r0, 801c728 <rcl_guard_condition_get_rmw_handle+0x8>
 801c726:	6800      	ldr	r0, [r0, #0]
 801c728:	4770      	bx	lr
 801c72a:	bf00      	nop

0801c72c <rcl_validate_topic_name>:
 801c72c:	2800      	cmp	r0, #0
 801c72e:	d06b      	beq.n	801c808 <rcl_validate_topic_name+0xdc>
 801c730:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c734:	460d      	mov	r5, r1
 801c736:	2900      	cmp	r1, #0
 801c738:	d06d      	beq.n	801c816 <rcl_validate_topic_name+0xea>
 801c73a:	4616      	mov	r6, r2
 801c73c:	4604      	mov	r4, r0
 801c73e:	f7e3 fdcf 	bl	80002e0 <strlen>
 801c742:	b190      	cbz	r0, 801c76a <rcl_validate_topic_name+0x3e>
 801c744:	7821      	ldrb	r1, [r4, #0]
 801c746:	4a71      	ldr	r2, [pc, #452]	@ (801c90c <rcl_validate_topic_name+0x1e0>)
 801c748:	5c53      	ldrb	r3, [r2, r1]
 801c74a:	f013 0304 	ands.w	r3, r3, #4
 801c74e:	d15d      	bne.n	801c80c <rcl_validate_topic_name+0xe0>
 801c750:	1e47      	subs	r7, r0, #1
 801c752:	f814 c007 	ldrb.w	ip, [r4, r7]
 801c756:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 801c75a:	d10d      	bne.n	801c778 <rcl_validate_topic_name+0x4c>
 801c75c:	2302      	movs	r3, #2
 801c75e:	602b      	str	r3, [r5, #0]
 801c760:	b146      	cbz	r6, 801c774 <rcl_validate_topic_name+0x48>
 801c762:	6037      	str	r7, [r6, #0]
 801c764:	2000      	movs	r0, #0
 801c766:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c76a:	2301      	movs	r3, #1
 801c76c:	602b      	str	r3, [r5, #0]
 801c76e:	b10e      	cbz	r6, 801c774 <rcl_validate_topic_name+0x48>
 801c770:	2300      	movs	r3, #0
 801c772:	6033      	str	r3, [r6, #0]
 801c774:	2000      	movs	r0, #0
 801c776:	e7f6      	b.n	801c766 <rcl_validate_topic_name+0x3a>
 801c778:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 801c77c:	469a      	mov	sl, r3
 801c77e:	469e      	mov	lr, r3
 801c780:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 801c784:	f1a9 0c2f 	sub.w	ip, r9, #47	@ 0x2f
 801c788:	f1bc 0f4f 	cmp.w	ip, #79	@ 0x4f
 801c78c:	d85b      	bhi.n	801c846 <rcl_validate_topic_name+0x11a>
 801c78e:	e8df f00c 	tbb	[pc, ip]
 801c792:	4463      	.short	0x4463
 801c794:	44444444 	.word	0x44444444
 801c798:	44444444 	.word	0x44444444
 801c79c:	5a5a5a44 	.word	0x5a5a5a44
 801c7a0:	5a5a5a5a 	.word	0x5a5a5a5a
 801c7a4:	44444444 	.word	0x44444444
 801c7a8:	44444444 	.word	0x44444444
 801c7ac:	44444444 	.word	0x44444444
 801c7b0:	44444444 	.word	0x44444444
 801c7b4:	44444444 	.word	0x44444444
 801c7b8:	44444444 	.word	0x44444444
 801c7bc:	5a5a4444 	.word	0x5a5a4444
 801c7c0:	5a2e5a5a 	.word	0x5a2e5a5a
 801c7c4:	44444444 	.word	0x44444444
 801c7c8:	44444444 	.word	0x44444444
 801c7cc:	44444444 	.word	0x44444444
 801c7d0:	44444444 	.word	0x44444444
 801c7d4:	44444444 	.word	0x44444444
 801c7d8:	44444444 	.word	0x44444444
 801c7dc:	5a284444 	.word	0x5a284444
 801c7e0:	6b73      	.short	0x6b73
 801c7e2:	f1ba 0f00 	cmp.w	sl, #0
 801c7e6:	d13a      	bne.n	801c85e <rcl_validate_topic_name+0x132>
 801c7e8:	4673      	mov	r3, lr
 801c7ea:	f04f 0a01 	mov.w	sl, #1
 801c7ee:	f10e 0e01 	add.w	lr, lr, #1
 801c7f2:	4570      	cmp	r0, lr
 801c7f4:	d1c4      	bne.n	801c780 <rcl_validate_topic_name+0x54>
 801c7f6:	f1ba 0f00 	cmp.w	sl, #0
 801c7fa:	d048      	beq.n	801c88e <rcl_validate_topic_name+0x162>
 801c7fc:	2205      	movs	r2, #5
 801c7fe:	602a      	str	r2, [r5, #0]
 801c800:	2e00      	cmp	r6, #0
 801c802:	d0b7      	beq.n	801c774 <rcl_validate_topic_name+0x48>
 801c804:	6033      	str	r3, [r6, #0]
 801c806:	e7b5      	b.n	801c774 <rcl_validate_topic_name+0x48>
 801c808:	200b      	movs	r0, #11
 801c80a:	4770      	bx	lr
 801c80c:	2304      	movs	r3, #4
 801c80e:	602b      	str	r3, [r5, #0]
 801c810:	2e00      	cmp	r6, #0
 801c812:	d1ad      	bne.n	801c770 <rcl_validate_topic_name+0x44>
 801c814:	e7ae      	b.n	801c774 <rcl_validate_topic_name+0x48>
 801c816:	200b      	movs	r0, #11
 801c818:	e7a5      	b.n	801c766 <rcl_validate_topic_name+0x3a>
 801c81a:	f812 c009 	ldrb.w	ip, [r2, r9]
 801c81e:	f01c 0f04 	tst.w	ip, #4
 801c822:	d0e4      	beq.n	801c7ee <rcl_validate_topic_name+0xc2>
 801c824:	f1ba 0f00 	cmp.w	sl, #0
 801c828:	d0e1      	beq.n	801c7ee <rcl_validate_topic_name+0xc2>
 801c82a:	f1be 0f00 	cmp.w	lr, #0
 801c82e:	d0de      	beq.n	801c7ee <rcl_validate_topic_name+0xc2>
 801c830:	f10e 3cff 	add.w	ip, lr, #4294967295	@ 0xffffffff
 801c834:	4563      	cmp	r3, ip
 801c836:	d1da      	bne.n	801c7ee <rcl_validate_topic_name+0xc2>
 801c838:	2309      	movs	r3, #9
 801c83a:	602b      	str	r3, [r5, #0]
 801c83c:	2e00      	cmp	r6, #0
 801c83e:	d099      	beq.n	801c774 <rcl_validate_topic_name+0x48>
 801c840:	f8c6 e000 	str.w	lr, [r6]
 801c844:	e796      	b.n	801c774 <rcl_validate_topic_name+0x48>
 801c846:	f1ba 0f00 	cmp.w	sl, #0
 801c84a:	bf0c      	ite	eq
 801c84c:	2303      	moveq	r3, #3
 801c84e:	2308      	movne	r3, #8
 801c850:	602b      	str	r3, [r5, #0]
 801c852:	2e00      	cmp	r6, #0
 801c854:	d1f4      	bne.n	801c840 <rcl_validate_topic_name+0x114>
 801c856:	e78d      	b.n	801c774 <rcl_validate_topic_name+0x48>
 801c858:	f1ba 0f00 	cmp.w	sl, #0
 801c85c:	d0c7      	beq.n	801c7ee <rcl_validate_topic_name+0xc2>
 801c85e:	2308      	movs	r3, #8
 801c860:	602b      	str	r3, [r5, #0]
 801c862:	2e00      	cmp	r6, #0
 801c864:	d1ec      	bne.n	801c840 <rcl_validate_topic_name+0x114>
 801c866:	e785      	b.n	801c774 <rcl_validate_topic_name+0x48>
 801c868:	f1be 0f00 	cmp.w	lr, #0
 801c86c:	d0bf      	beq.n	801c7ee <rcl_validate_topic_name+0xc2>
 801c86e:	2306      	movs	r3, #6
 801c870:	602b      	str	r3, [r5, #0]
 801c872:	2e00      	cmp	r6, #0
 801c874:	d1e4      	bne.n	801c840 <rcl_validate_topic_name+0x114>
 801c876:	e77d      	b.n	801c774 <rcl_validate_topic_name+0x48>
 801c878:	f1ba 0f00 	cmp.w	sl, #0
 801c87c:	d104      	bne.n	801c888 <rcl_validate_topic_name+0x15c>
 801c87e:	2305      	movs	r3, #5
 801c880:	602b      	str	r3, [r5, #0]
 801c882:	2e00      	cmp	r6, #0
 801c884:	d1dc      	bne.n	801c840 <rcl_validate_topic_name+0x114>
 801c886:	e775      	b.n	801c774 <rcl_validate_topic_name+0x48>
 801c888:	f04f 0a00 	mov.w	sl, #0
 801c88c:	e7af      	b.n	801c7ee <rcl_validate_topic_name+0xc2>
 801c88e:	297e      	cmp	r1, #126	@ 0x7e
 801c890:	d01d      	beq.n	801c8ce <rcl_validate_topic_name+0x1a2>
 801c892:	2101      	movs	r1, #1
 801c894:	e006      	b.n	801c8a4 <rcl_validate_topic_name+0x178>
 801c896:	458e      	cmp	lr, r1
 801c898:	f104 0401 	add.w	r4, r4, #1
 801c89c:	f101 0301 	add.w	r3, r1, #1
 801c8a0:	d912      	bls.n	801c8c8 <rcl_validate_topic_name+0x19c>
 801c8a2:	4619      	mov	r1, r3
 801c8a4:	4557      	cmp	r7, sl
 801c8a6:	f10a 0a01 	add.w	sl, sl, #1
 801c8aa:	d0f4      	beq.n	801c896 <rcl_validate_topic_name+0x16a>
 801c8ac:	7823      	ldrb	r3, [r4, #0]
 801c8ae:	2b2f      	cmp	r3, #47	@ 0x2f
 801c8b0:	d1f1      	bne.n	801c896 <rcl_validate_topic_name+0x16a>
 801c8b2:	7863      	ldrb	r3, [r4, #1]
 801c8b4:	5cd3      	ldrb	r3, [r2, r3]
 801c8b6:	075b      	lsls	r3, r3, #29
 801c8b8:	d5ed      	bpl.n	801c896 <rcl_validate_topic_name+0x16a>
 801c8ba:	2304      	movs	r3, #4
 801c8bc:	602b      	str	r3, [r5, #0]
 801c8be:	2e00      	cmp	r6, #0
 801c8c0:	f43f af58 	beq.w	801c774 <rcl_validate_topic_name+0x48>
 801c8c4:	6031      	str	r1, [r6, #0]
 801c8c6:	e755      	b.n	801c774 <rcl_validate_topic_name+0x48>
 801c8c8:	2300      	movs	r3, #0
 801c8ca:	602b      	str	r3, [r5, #0]
 801c8cc:	e752      	b.n	801c774 <rcl_validate_topic_name+0x48>
 801c8ce:	4653      	mov	r3, sl
 801c8d0:	2101      	movs	r1, #1
 801c8d2:	e00a      	b.n	801c8ea <rcl_validate_topic_name+0x1be>
 801c8d4:	2b01      	cmp	r3, #1
 801c8d6:	d012      	beq.n	801c8fe <rcl_validate_topic_name+0x1d2>
 801c8d8:	458e      	cmp	lr, r1
 801c8da:	f103 0301 	add.w	r3, r3, #1
 801c8de:	f104 0401 	add.w	r4, r4, #1
 801c8e2:	f101 0001 	add.w	r0, r1, #1
 801c8e6:	d9ef      	bls.n	801c8c8 <rcl_validate_topic_name+0x19c>
 801c8e8:	4601      	mov	r1, r0
 801c8ea:	429f      	cmp	r7, r3
 801c8ec:	d0f4      	beq.n	801c8d8 <rcl_validate_topic_name+0x1ac>
 801c8ee:	7820      	ldrb	r0, [r4, #0]
 801c8f0:	282f      	cmp	r0, #47	@ 0x2f
 801c8f2:	d1ef      	bne.n	801c8d4 <rcl_validate_topic_name+0x1a8>
 801c8f4:	7860      	ldrb	r0, [r4, #1]
 801c8f6:	5c10      	ldrb	r0, [r2, r0]
 801c8f8:	0740      	lsls	r0, r0, #29
 801c8fa:	d5ed      	bpl.n	801c8d8 <rcl_validate_topic_name+0x1ac>
 801c8fc:	e7dd      	b.n	801c8ba <rcl_validate_topic_name+0x18e>
 801c8fe:	2207      	movs	r2, #7
 801c900:	602a      	str	r2, [r5, #0]
 801c902:	2e00      	cmp	r6, #0
 801c904:	f47f af7e 	bne.w	801c804 <rcl_validate_topic_name+0xd8>
 801c908:	e734      	b.n	801c774 <rcl_validate_topic_name+0x48>
 801c90a:	bf00      	nop
 801c90c:	08021f44 	.word	0x08021f44

0801c910 <rcutils_split>:
 801c910:	b082      	sub	sp, #8
 801c912:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c916:	b08b      	sub	sp, #44	@ 0x2c
 801c918:	ac14      	add	r4, sp, #80	@ 0x50
 801c91a:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 801c91c:	e884 000c 	stmia.w	r4, {r2, r3}
 801c920:	2f00      	cmp	r7, #0
 801c922:	f000 809f 	beq.w	801ca64 <rcutils_split+0x154>
 801c926:	4606      	mov	r6, r0
 801c928:	2800      	cmp	r0, #0
 801c92a:	d071      	beq.n	801ca10 <rcutils_split+0x100>
 801c92c:	7804      	ldrb	r4, [r0, #0]
 801c92e:	2c00      	cmp	r4, #0
 801c930:	d06e      	beq.n	801ca10 <rcutils_split+0x100>
 801c932:	460d      	mov	r5, r1
 801c934:	f7e3 fcd4 	bl	80002e0 <strlen>
 801c938:	1833      	adds	r3, r6, r0
 801c93a:	1b64      	subs	r4, r4, r5
 801c93c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801c940:	4680      	mov	r8, r0
 801c942:	fab4 f484 	clz	r4, r4
 801c946:	0964      	lsrs	r4, r4, #5
 801c948:	42ab      	cmp	r3, r5
 801c94a:	bf08      	it	eq
 801c94c:	f1a8 0801 	subeq.w	r8, r8, #1
 801c950:	4544      	cmp	r4, r8
 801c952:	d278      	bcs.n	801ca46 <rcutils_split+0x136>
 801c954:	1933      	adds	r3, r6, r4
 801c956:	eb06 0008 	add.w	r0, r6, r8
 801c95a:	2101      	movs	r1, #1
 801c95c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c960:	42aa      	cmp	r2, r5
 801c962:	bf08      	it	eq
 801c964:	3101      	addeq	r1, #1
 801c966:	4283      	cmp	r3, r0
 801c968:	d1f8      	bne.n	801c95c <rcutils_split+0x4c>
 801c96a:	aa14      	add	r2, sp, #80	@ 0x50
 801c96c:	4638      	mov	r0, r7
 801c96e:	f000 f89f 	bl	801cab0 <rcutils_string_array_init>
 801c972:	4681      	mov	r9, r0
 801c974:	2800      	cmp	r0, #0
 801c976:	d159      	bne.n	801ca2c <rcutils_split+0x11c>
 801c978:	687a      	ldr	r2, [r7, #4]
 801c97a:	46a2      	mov	sl, r4
 801c97c:	e002      	b.n	801c984 <rcutils_split+0x74>
 801c97e:	3401      	adds	r4, #1
 801c980:	4544      	cmp	r4, r8
 801c982:	d222      	bcs.n	801c9ca <rcutils_split+0xba>
 801c984:	5d33      	ldrb	r3, [r6, r4]
 801c986:	42ab      	cmp	r3, r5
 801c988:	d1f9      	bne.n	801c97e <rcutils_split+0x6e>
 801c98a:	4554      	cmp	r4, sl
 801c98c:	eba4 0b0a 	sub.w	fp, r4, sl
 801c990:	d037      	beq.n	801ca02 <rcutils_split+0xf2>
 801c992:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c994:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801c996:	9201      	str	r2, [sp, #4]
 801c998:	f10b 0002 	add.w	r0, fp, #2
 801c99c:	4798      	blx	r3
 801c99e:	9a01      	ldr	r2, [sp, #4]
 801c9a0:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
 801c9a4:	687a      	ldr	r2, [r7, #4]
 801c9a6:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801c9aa:	eb06 030a 	add.w	r3, r6, sl
 801c9ae:	f10b 0101 	add.w	r1, fp, #1
 801c9b2:	2800      	cmp	r0, #0
 801c9b4:	d038      	beq.n	801ca28 <rcutils_split+0x118>
 801c9b6:	4a2e      	ldr	r2, [pc, #184]	@ (801ca70 <rcutils_split+0x160>)
 801c9b8:	f000 ff50 	bl	801d85c <sniprintf>
 801c9bc:	687a      	ldr	r2, [r7, #4]
 801c9be:	f109 0901 	add.w	r9, r9, #1
 801c9c2:	3401      	adds	r4, #1
 801c9c4:	4544      	cmp	r4, r8
 801c9c6:	46a2      	mov	sl, r4
 801c9c8:	d3dc      	bcc.n	801c984 <rcutils_split+0x74>
 801c9ca:	4554      	cmp	r4, sl
 801c9cc:	d043      	beq.n	801ca56 <rcutils_split+0x146>
 801c9ce:	eba4 040a 	sub.w	r4, r4, sl
 801c9d2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c9d4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801c9d6:	9201      	str	r2, [sp, #4]
 801c9d8:	1ca0      	adds	r0, r4, #2
 801c9da:	4798      	blx	r3
 801c9dc:	9a01      	ldr	r2, [sp, #4]
 801c9de:	687b      	ldr	r3, [r7, #4]
 801c9e0:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
 801c9e4:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 801c9e8:	b300      	cbz	r0, 801ca2c <rcutils_split+0x11c>
 801c9ea:	4a21      	ldr	r2, [pc, #132]	@ (801ca70 <rcutils_split+0x160>)
 801c9ec:	eb06 030a 	add.w	r3, r6, sl
 801c9f0:	1c61      	adds	r1, r4, #1
 801c9f2:	f000 ff33 	bl	801d85c <sniprintf>
 801c9f6:	2000      	movs	r0, #0
 801c9f8:	b00b      	add	sp, #44	@ 0x2c
 801c9fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9fe:	b002      	add	sp, #8
 801ca00:	4770      	bx	lr
 801ca02:	683b      	ldr	r3, [r7, #0]
 801ca04:	3b01      	subs	r3, #1
 801ca06:	2100      	movs	r1, #0
 801ca08:	603b      	str	r3, [r7, #0]
 801ca0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801ca0e:	e7d8      	b.n	801c9c2 <rcutils_split+0xb2>
 801ca10:	a802      	add	r0, sp, #8
 801ca12:	ac02      	add	r4, sp, #8
 801ca14:	f000 f82e 	bl	801ca74 <rcutils_get_zero_initialized_string_array>
 801ca18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ca1a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801ca1c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801ca20:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801ca24:	2000      	movs	r0, #0
 801ca26:	e7e7      	b.n	801c9f8 <rcutils_split+0xe8>
 801ca28:	f8c7 9000 	str.w	r9, [r7]
 801ca2c:	4638      	mov	r0, r7
 801ca2e:	f000 f861 	bl	801caf4 <rcutils_string_array_fini>
 801ca32:	b928      	cbnz	r0, 801ca40 <rcutils_split+0x130>
 801ca34:	200a      	movs	r0, #10
 801ca36:	b00b      	add	sp, #44	@ 0x2c
 801ca38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca3c:	b002      	add	sp, #8
 801ca3e:	4770      	bx	lr
 801ca40:	f7f2 fd2a 	bl	800f498 <rcutils_reset_error>
 801ca44:	e7f6      	b.n	801ca34 <rcutils_split+0x124>
 801ca46:	aa14      	add	r2, sp, #80	@ 0x50
 801ca48:	2101      	movs	r1, #1
 801ca4a:	4638      	mov	r0, r7
 801ca4c:	f000 f830 	bl	801cab0 <rcutils_string_array_init>
 801ca50:	2800      	cmp	r0, #0
 801ca52:	d1eb      	bne.n	801ca2c <rcutils_split+0x11c>
 801ca54:	687a      	ldr	r2, [r7, #4]
 801ca56:	683b      	ldr	r3, [r7, #0]
 801ca58:	3b01      	subs	r3, #1
 801ca5a:	2100      	movs	r1, #0
 801ca5c:	603b      	str	r3, [r7, #0]
 801ca5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801ca62:	e7df      	b.n	801ca24 <rcutils_split+0x114>
 801ca64:	200b      	movs	r0, #11
 801ca66:	b00b      	add	sp, #44	@ 0x2c
 801ca68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca6c:	b002      	add	sp, #8
 801ca6e:	4770      	bx	lr
 801ca70:	08020670 	.word	0x08020670

0801ca74 <rcutils_get_zero_initialized_string_array>:
 801ca74:	b570      	push	{r4, r5, r6, lr}
 801ca76:	b086      	sub	sp, #24
 801ca78:	4606      	mov	r6, r0
 801ca7a:	4668      	mov	r0, sp
 801ca7c:	f7f2 fcac 	bl	800f3d8 <rcutils_get_zero_initialized_allocator>
 801ca80:	46ee      	mov	lr, sp
 801ca82:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ca86:	4c09      	ldr	r4, [pc, #36]	@ (801caac <rcutils_get_zero_initialized_string_array+0x38>)
 801ca88:	f104 0508 	add.w	r5, r4, #8
 801ca8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ca8e:	46a4      	mov	ip, r4
 801ca90:	f8de 3000 	ldr.w	r3, [lr]
 801ca94:	602b      	str	r3, [r5, #0]
 801ca96:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ca9a:	4634      	mov	r4, r6
 801ca9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ca9e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801caa2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801caa6:	4630      	mov	r0, r6
 801caa8:	b006      	add	sp, #24
 801caaa:	bd70      	pop	{r4, r5, r6, pc}
 801caac:	2000f8a0 	.word	0x2000f8a0

0801cab0 <rcutils_string_array_init>:
 801cab0:	b1da      	cbz	r2, 801caea <rcutils_string_array_init+0x3a>
 801cab2:	b570      	push	{r4, r5, r6, lr}
 801cab4:	4605      	mov	r5, r0
 801cab6:	b1d0      	cbz	r0, 801caee <rcutils_string_array_init+0x3e>
 801cab8:	460e      	mov	r6, r1
 801caba:	4614      	mov	r4, r2
 801cabc:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 801cac0:	6001      	str	r1, [r0, #0]
 801cac2:	2104      	movs	r1, #4
 801cac4:	4630      	mov	r0, r6
 801cac6:	4798      	blx	r3
 801cac8:	6068      	str	r0, [r5, #4]
 801caca:	b150      	cbz	r0, 801cae2 <rcutils_string_array_init+0x32>
 801cacc:	46a4      	mov	ip, r4
 801cace:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801cad2:	f105 0408 	add.w	r4, r5, #8
 801cad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801cad8:	f8dc 3000 	ldr.w	r3, [ip]
 801cadc:	6023      	str	r3, [r4, #0]
 801cade:	2000      	movs	r0, #0
 801cae0:	bd70      	pop	{r4, r5, r6, pc}
 801cae2:	2e00      	cmp	r6, #0
 801cae4:	d0f2      	beq.n	801cacc <rcutils_string_array_init+0x1c>
 801cae6:	200a      	movs	r0, #10
 801cae8:	bd70      	pop	{r4, r5, r6, pc}
 801caea:	200b      	movs	r0, #11
 801caec:	4770      	bx	lr
 801caee:	200b      	movs	r0, #11
 801caf0:	bd70      	pop	{r4, r5, r6, pc}
 801caf2:	bf00      	nop

0801caf4 <rcutils_string_array_fini>:
 801caf4:	b310      	cbz	r0, 801cb3c <rcutils_string_array_fini+0x48>
 801caf6:	6843      	ldr	r3, [r0, #4]
 801caf8:	b570      	push	{r4, r5, r6, lr}
 801cafa:	4604      	mov	r4, r0
 801cafc:	b1d3      	cbz	r3, 801cb34 <rcutils_string_array_fini+0x40>
 801cafe:	3008      	adds	r0, #8
 801cb00:	f7f2 fca4 	bl	800f44c <rcutils_allocator_is_valid>
 801cb04:	b1c0      	cbz	r0, 801cb38 <rcutils_string_array_fini+0x44>
 801cb06:	e9d4 3000 	ldrd	r3, r0, [r4]
 801cb0a:	b16b      	cbz	r3, 801cb28 <rcutils_string_array_fini+0x34>
 801cb0c:	2500      	movs	r5, #0
 801cb0e:	462e      	mov	r6, r5
 801cb10:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801cb14:	68e3      	ldr	r3, [r4, #12]
 801cb16:	69a1      	ldr	r1, [r4, #24]
 801cb18:	4798      	blx	r3
 801cb1a:	e9d4 3000 	ldrd	r3, r0, [r4]
 801cb1e:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801cb22:	3501      	adds	r5, #1
 801cb24:	42ab      	cmp	r3, r5
 801cb26:	d8f3      	bhi.n	801cb10 <rcutils_string_array_fini+0x1c>
 801cb28:	68e3      	ldr	r3, [r4, #12]
 801cb2a:	69a1      	ldr	r1, [r4, #24]
 801cb2c:	4798      	blx	r3
 801cb2e:	2300      	movs	r3, #0
 801cb30:	e9c4 3300 	strd	r3, r3, [r4]
 801cb34:	2000      	movs	r0, #0
 801cb36:	bd70      	pop	{r4, r5, r6, pc}
 801cb38:	200b      	movs	r0, #11
 801cb3a:	bd70      	pop	{r4, r5, r6, pc}
 801cb3c:	200b      	movs	r0, #11
 801cb3e:	4770      	bx	lr

0801cb40 <rmw_create_guard_condition>:
 801cb40:	b538      	push	{r3, r4, r5, lr}
 801cb42:	4605      	mov	r5, r0
 801cb44:	4807      	ldr	r0, [pc, #28]	@ (801cb64 <rmw_create_guard_condition+0x24>)
 801cb46:	f7fd faab 	bl	801a0a0 <get_memory>
 801cb4a:	b148      	cbz	r0, 801cb60 <rmw_create_guard_condition+0x20>
 801cb4c:	6884      	ldr	r4, [r0, #8]
 801cb4e:	2300      	movs	r3, #0
 801cb50:	7423      	strb	r3, [r4, #16]
 801cb52:	61e5      	str	r5, [r4, #28]
 801cb54:	f7fd fb2a 	bl	801a1ac <rmw_get_implementation_identifier>
 801cb58:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801cb5c:	f104 0014 	add.w	r0, r4, #20
 801cb60:	bd38      	pop	{r3, r4, r5, pc}
 801cb62:	bf00      	nop
 801cb64:	2000a518 	.word	0x2000a518

0801cb68 <rmw_destroy_guard_condition>:
 801cb68:	b508      	push	{r3, lr}
 801cb6a:	4b08      	ldr	r3, [pc, #32]	@ (801cb8c <rmw_destroy_guard_condition+0x24>)
 801cb6c:	6819      	ldr	r1, [r3, #0]
 801cb6e:	b911      	cbnz	r1, 801cb76 <rmw_destroy_guard_condition+0xe>
 801cb70:	e00a      	b.n	801cb88 <rmw_destroy_guard_condition+0x20>
 801cb72:	6849      	ldr	r1, [r1, #4]
 801cb74:	b141      	cbz	r1, 801cb88 <rmw_destroy_guard_condition+0x20>
 801cb76:	688b      	ldr	r3, [r1, #8]
 801cb78:	3314      	adds	r3, #20
 801cb7a:	4298      	cmp	r0, r3
 801cb7c:	d1f9      	bne.n	801cb72 <rmw_destroy_guard_condition+0xa>
 801cb7e:	4803      	ldr	r0, [pc, #12]	@ (801cb8c <rmw_destroy_guard_condition+0x24>)
 801cb80:	f7fd fa9e 	bl	801a0c0 <put_memory>
 801cb84:	2000      	movs	r0, #0
 801cb86:	bd08      	pop	{r3, pc}
 801cb88:	2001      	movs	r0, #1
 801cb8a:	bd08      	pop	{r3, pc}
 801cb8c:	2000a518 	.word	0x2000a518

0801cb90 <rmw_trigger_guard_condition>:
 801cb90:	b160      	cbz	r0, 801cbac <rmw_trigger_guard_condition+0x1c>
 801cb92:	b510      	push	{r4, lr}
 801cb94:	4604      	mov	r4, r0
 801cb96:	6800      	ldr	r0, [r0, #0]
 801cb98:	f7f3 fff8 	bl	8010b8c <is_uxrce_rmw_identifier_valid>
 801cb9c:	b908      	cbnz	r0, 801cba2 <rmw_trigger_guard_condition+0x12>
 801cb9e:	2001      	movs	r0, #1
 801cba0:	bd10      	pop	{r4, pc}
 801cba2:	6863      	ldr	r3, [r4, #4]
 801cba4:	2201      	movs	r2, #1
 801cba6:	741a      	strb	r2, [r3, #16]
 801cba8:	2000      	movs	r0, #0
 801cbaa:	bd10      	pop	{r4, pc}
 801cbac:	2001      	movs	r0, #1
 801cbae:	4770      	bx	lr

0801cbb0 <arm_mat_trans_f32>:
 801cbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbb4:	8802      	ldrh	r2, [r0, #0]
 801cbb6:	884b      	ldrh	r3, [r1, #2]
 801cbb8:	f8d0 c004 	ldr.w	ip, [r0, #4]
 801cbbc:	684f      	ldr	r7, [r1, #4]
 801cbbe:	8840      	ldrh	r0, [r0, #2]
 801cbc0:	4293      	cmp	r3, r2
 801cbc2:	b083      	sub	sp, #12
 801cbc4:	d14c      	bne.n	801cc60 <arm_mat_trans_f32+0xb0>
 801cbc6:	f8b1 e000 	ldrh.w	lr, [r1]
 801cbca:	4586      	cmp	lr, r0
 801cbcc:	d148      	bne.n	801cc60 <arm_mat_trans_f32+0xb0>
 801cbce:	ea4f 089e 	mov.w	r8, lr, lsr #2
 801cbd2:	009c      	lsls	r4, r3, #2
 801cbd4:	f00e 0e03 	and.w	lr, lr, #3
 801cbd8:	fb08 f904 	mul.w	r9, r8, r4
 801cbdc:	ea4f 028e 	mov.w	r2, lr, lsl #2
 801cbe0:	011d      	lsls	r5, r3, #4
 801cbe2:	00db      	lsls	r3, r3, #3
 801cbe4:	ea4f 0989 	mov.w	r9, r9, lsl #2
 801cbe8:	eb07 0a04 	add.w	sl, r7, r4
 801cbec:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 801cbf0:	9201      	str	r2, [sp, #4]
 801cbf2:	9300      	str	r3, [sp, #0]
 801cbf4:	463b      	mov	r3, r7
 801cbf6:	f1b8 0f00 	cmp.w	r8, #0
 801cbfa:	d01d      	beq.n	801cc38 <arm_mat_trans_f32+0x88>
 801cbfc:	9900      	ldr	r1, [sp, #0]
 801cbfe:	f10c 0210 	add.w	r2, ip, #16
 801cc02:	4439      	add	r1, r7
 801cc04:	4640      	mov	r0, r8
 801cc06:	f852 6c10 	ldr.w	r6, [r2, #-16]
 801cc0a:	601e      	str	r6, [r3, #0]
 801cc0c:	ed52 7a03 	vldr	s15, [r2, #-12]
 801cc10:	191e      	adds	r6, r3, r4
 801cc12:	edc6 7a00 	vstr	s15, [r6]
 801cc16:	f852 6c08 	ldr.w	r6, [r2, #-8]
 801cc1a:	600e      	str	r6, [r1, #0]
 801cc1c:	ed52 7a01 	vldr	s15, [r2, #-4]
 801cc20:	190e      	adds	r6, r1, r4
 801cc22:	3801      	subs	r0, #1
 801cc24:	442b      	add	r3, r5
 801cc26:	f102 0210 	add.w	r2, r2, #16
 801cc2a:	edc6 7a00 	vstr	s15, [r6]
 801cc2e:	4429      	add	r1, r5
 801cc30:	d1e9      	bne.n	801cc06 <arm_mat_trans_f32+0x56>
 801cc32:	44dc      	add	ip, fp
 801cc34:	eb09 0307 	add.w	r3, r9, r7
 801cc38:	f1be 0f00 	cmp.w	lr, #0
 801cc3c:	d009      	beq.n	801cc52 <arm_mat_trans_f32+0xa2>
 801cc3e:	4672      	mov	r2, lr
 801cc40:	4661      	mov	r1, ip
 801cc42:	f851 0b04 	ldr.w	r0, [r1], #4
 801cc46:	6018      	str	r0, [r3, #0]
 801cc48:	3a01      	subs	r2, #1
 801cc4a:	4423      	add	r3, r4
 801cc4c:	d1f9      	bne.n	801cc42 <arm_mat_trans_f32+0x92>
 801cc4e:	9b01      	ldr	r3, [sp, #4]
 801cc50:	449c      	add	ip, r3
 801cc52:	3704      	adds	r7, #4
 801cc54:	4557      	cmp	r7, sl
 801cc56:	d1cd      	bne.n	801cbf4 <arm_mat_trans_f32+0x44>
 801cc58:	2000      	movs	r0, #0
 801cc5a:	b003      	add	sp, #12
 801cc5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc60:	f06f 0002 	mvn.w	r0, #2
 801cc64:	e7f9      	b.n	801cc5a <arm_mat_trans_f32+0xaa>
 801cc66:	bf00      	nop

0801cc68 <arm_mat_sub_f32>:
 801cc68:	b4f0      	push	{r4, r5, r6, r7}
 801cc6a:	e9d1 4700 	ldrd	r4, r7, [r1]
 801cc6e:	6803      	ldr	r3, [r0, #0]
 801cc70:	f8d0 c004 	ldr.w	ip, [r0, #4]
 801cc74:	6856      	ldr	r6, [r2, #4]
 801cc76:	42a3      	cmp	r3, r4
 801cc78:	d15d      	bne.n	801cd36 <arm_mat_sub_f32+0xce>
 801cc7a:	6812      	ldr	r2, [r2, #0]
 801cc7c:	4293      	cmp	r3, r2
 801cc7e:	d15a      	bne.n	801cd36 <arm_mat_sub_f32+0xce>
 801cc80:	8803      	ldrh	r3, [r0, #0]
 801cc82:	8844      	ldrh	r4, [r0, #2]
 801cc84:	fb04 f403 	mul.w	r4, r4, r3
 801cc88:	08a5      	lsrs	r5, r4, #2
 801cc8a:	d032      	beq.n	801ccf2 <arm_mat_sub_f32+0x8a>
 801cc8c:	f10c 0110 	add.w	r1, ip, #16
 801cc90:	f107 0210 	add.w	r2, r7, #16
 801cc94:	f106 0310 	add.w	r3, r6, #16
 801cc98:	4628      	mov	r0, r5
 801cc9a:	ed12 7a04 	vldr	s14, [r2, #-16]
 801cc9e:	ed51 7a04 	vldr	s15, [r1, #-16]
 801cca2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cca6:	3801      	subs	r0, #1
 801cca8:	ed43 7a04 	vstr	s15, [r3, #-16]
 801ccac:	ed12 7a03 	vldr	s14, [r2, #-12]
 801ccb0:	ed51 7a03 	vldr	s15, [r1, #-12]
 801ccb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ccb8:	f101 0110 	add.w	r1, r1, #16
 801ccbc:	ed43 7a03 	vstr	s15, [r3, #-12]
 801ccc0:	ed12 7a02 	vldr	s14, [r2, #-8]
 801ccc4:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 801ccc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cccc:	f102 0210 	add.w	r2, r2, #16
 801ccd0:	ed43 7a02 	vstr	s15, [r3, #-8]
 801ccd4:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 801ccd8:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 801ccdc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cce0:	f103 0310 	add.w	r3, r3, #16
 801cce4:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 801cce8:	d1d7      	bne.n	801cc9a <arm_mat_sub_f32+0x32>
 801ccea:	012b      	lsls	r3, r5, #4
 801ccec:	449c      	add	ip, r3
 801ccee:	441f      	add	r7, r3
 801ccf0:	441e      	add	r6, r3
 801ccf2:	f014 0403 	ands.w	r4, r4, #3
 801ccf6:	d01b      	beq.n	801cd30 <arm_mat_sub_f32+0xc8>
 801ccf8:	eddc 7a00 	vldr	s15, [ip]
 801ccfc:	ed97 7a00 	vldr	s14, [r7]
 801cd00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cd04:	3c01      	subs	r4, #1
 801cd06:	edc6 7a00 	vstr	s15, [r6]
 801cd0a:	d011      	beq.n	801cd30 <arm_mat_sub_f32+0xc8>
 801cd0c:	eddc 7a01 	vldr	s15, [ip, #4]
 801cd10:	ed97 7a01 	vldr	s14, [r7, #4]
 801cd14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cd18:	2c01      	cmp	r4, #1
 801cd1a:	edc6 7a01 	vstr	s15, [r6, #4]
 801cd1e:	d007      	beq.n	801cd30 <arm_mat_sub_f32+0xc8>
 801cd20:	eddc 7a02 	vldr	s15, [ip, #8]
 801cd24:	ed97 7a02 	vldr	s14, [r7, #8]
 801cd28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cd2c:	edc6 7a02 	vstr	s15, [r6, #8]
 801cd30:	2000      	movs	r0, #0
 801cd32:	bcf0      	pop	{r4, r5, r6, r7}
 801cd34:	4770      	bx	lr
 801cd36:	f06f 0002 	mvn.w	r0, #2
 801cd3a:	e7fa      	b.n	801cd32 <arm_mat_sub_f32+0xca>

0801cd3c <arm_mat_mult_f32>:
 801cd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd40:	8845      	ldrh	r5, [r0, #2]
 801cd42:	880b      	ldrh	r3, [r1, #0]
 801cd44:	8806      	ldrh	r6, [r0, #0]
 801cd46:	6847      	ldr	r7, [r0, #4]
 801cd48:	6854      	ldr	r4, [r2, #4]
 801cd4a:	6848      	ldr	r0, [r1, #4]
 801cd4c:	b08b      	sub	sp, #44	@ 0x2c
 801cd4e:	42ab      	cmp	r3, r5
 801cd50:	9109      	str	r1, [sp, #36]	@ 0x24
 801cd52:	9604      	str	r6, [sp, #16]
 801cd54:	8849      	ldrh	r1, [r1, #2]
 801cd56:	f040 808a 	bne.w	801ce6e <arm_mat_mult_f32+0x132>
 801cd5a:	8815      	ldrh	r5, [r2, #0]
 801cd5c:	42b5      	cmp	r5, r6
 801cd5e:	f040 8086 	bne.w	801ce6e <arm_mat_mult_f32+0x132>
 801cd62:	8852      	ldrh	r2, [r2, #2]
 801cd64:	428a      	cmp	r2, r1
 801cd66:	f040 8082 	bne.w	801ce6e <arm_mat_mult_f32+0x132>
 801cd6a:	ea4f 0893 	mov.w	r8, r3, lsr #2
 801cd6e:	1d01      	adds	r1, r0, #4
 801cd70:	0116      	lsls	r6, r2, #4
 801cd72:	9108      	str	r1, [sp, #32]
 801cd74:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 801cd78:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 801cd7c:	9101      	str	r1, [sp, #4]
 801cd7e:	fb06 f108 	mul.w	r1, r6, r8
 801cd82:	0095      	lsls	r5, r2, #2
 801cd84:	9103      	str	r1, [sp, #12]
 801cd86:	00d2      	lsls	r2, r2, #3
 801cd88:	ea4f 018c 	mov.w	r1, ip, lsl #2
 801cd8c:	f003 0903 	and.w	r9, r3, #3
 801cd90:	009b      	lsls	r3, r3, #2
 801cd92:	f107 0b10 	add.w	fp, r7, #16
 801cd96:	eb04 0a05 	add.w	sl, r4, r5
 801cd9a:	9107      	str	r1, [sp, #28]
 801cd9c:	9202      	str	r2, [sp, #8]
 801cd9e:	9306      	str	r3, [sp, #24]
 801cda0:	f1ab 0310 	sub.w	r3, fp, #16
 801cda4:	9305      	str	r3, [sp, #20]
 801cda6:	9b07      	ldr	r3, [sp, #28]
 801cda8:	f8dd e020 	ldr.w	lr, [sp, #32]
 801cdac:	eb03 0c0a 	add.w	ip, r3, sl
 801cdb0:	eddf 7a31 	vldr	s15, [pc, #196]	@ 801ce78 <arm_mat_mult_f32+0x13c>
 801cdb4:	f1b8 0f00 	cmp.w	r8, #0
 801cdb8:	d053      	beq.n	801ce62 <arm_mat_mult_f32+0x126>
 801cdba:	9b02      	ldr	r3, [sp, #8]
 801cdbc:	4644      	mov	r4, r8
 801cdbe:	18c1      	adds	r1, r0, r3
 801cdc0:	4602      	mov	r2, r0
 801cdc2:	465b      	mov	r3, fp
 801cdc4:	ed92 6a00 	vldr	s12, [r2]
 801cdc8:	ed13 7a04 	vldr	s14, [r3, #-16]
 801cdcc:	ed53 4a03 	vldr	s9, [r3, #-12]
 801cdd0:	ed53 6a02 	vldr	s13, [r3, #-8]
 801cdd4:	ed91 5a00 	vldr	s10, [r1]
 801cdd8:	ed53 5a01 	vldr	s11, [r3, #-4]
 801cddc:	1957      	adds	r7, r2, r5
 801cdde:	ee27 7a06 	vmul.f32	s14, s14, s12
 801cde2:	ed97 6a00 	vldr	s12, [r7]
 801cde6:	ee77 7a27 	vadd.f32	s15, s14, s15
 801cdea:	ee26 6a24 	vmul.f32	s12, s12, s9
 801cdee:	194f      	adds	r7, r1, r5
 801cdf0:	ee36 6a27 	vadd.f32	s12, s12, s15
 801cdf4:	ee26 7a85 	vmul.f32	s14, s13, s10
 801cdf8:	edd7 7a00 	vldr	s15, [r7]
 801cdfc:	ee37 7a06 	vadd.f32	s14, s14, s12
 801ce00:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801ce04:	3c01      	subs	r4, #1
 801ce06:	4432      	add	r2, r6
 801ce08:	4431      	add	r1, r6
 801ce0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ce0e:	f103 0310 	add.w	r3, r3, #16
 801ce12:	d1d7      	bne.n	801cdc4 <arm_mat_mult_f32+0x88>
 801ce14:	9b03      	ldr	r3, [sp, #12]
 801ce16:	9a01      	ldr	r2, [sp, #4]
 801ce18:	4418      	add	r0, r3
 801ce1a:	f1b9 0f00 	cmp.w	r9, #0
 801ce1e:	d00b      	beq.n	801ce38 <arm_mat_mult_f32+0xfc>
 801ce20:	464b      	mov	r3, r9
 801ce22:	edd0 6a00 	vldr	s13, [r0]
 801ce26:	ecb2 7a01 	vldmia	r2!, {s14}
 801ce2a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801ce2e:	3b01      	subs	r3, #1
 801ce30:	4428      	add	r0, r5
 801ce32:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ce36:	d1f4      	bne.n	801ce22 <arm_mat_mult_f32+0xe6>
 801ce38:	ecec 7a01 	vstmia	ip!, {s15}
 801ce3c:	45d4      	cmp	ip, sl
 801ce3e:	4670      	mov	r0, lr
 801ce40:	f10e 0e04 	add.w	lr, lr, #4
 801ce44:	d1b4      	bne.n	801cdb0 <arm_mat_mult_f32+0x74>
 801ce46:	9a01      	ldr	r2, [sp, #4]
 801ce48:	9b06      	ldr	r3, [sp, #24]
 801ce4a:	4611      	mov	r1, r2
 801ce4c:	4419      	add	r1, r3
 801ce4e:	449b      	add	fp, r3
 801ce50:	9b04      	ldr	r3, [sp, #16]
 801ce52:	9101      	str	r1, [sp, #4]
 801ce54:	3b01      	subs	r3, #1
 801ce56:	44aa      	add	sl, r5
 801ce58:	9304      	str	r3, [sp, #16]
 801ce5a:	d004      	beq.n	801ce66 <arm_mat_mult_f32+0x12a>
 801ce5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce5e:	6858      	ldr	r0, [r3, #4]
 801ce60:	e79e      	b.n	801cda0 <arm_mat_mult_f32+0x64>
 801ce62:	9a05      	ldr	r2, [sp, #20]
 801ce64:	e7d9      	b.n	801ce1a <arm_mat_mult_f32+0xde>
 801ce66:	4618      	mov	r0, r3
 801ce68:	b00b      	add	sp, #44	@ 0x2c
 801ce6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce6e:	f06f 0002 	mvn.w	r0, #2
 801ce72:	b00b      	add	sp, #44	@ 0x2c
 801ce74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce78:	00000000 	.word	0x00000000

0801ce7c <arm_mat_inverse_f32>:
 801ce7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce80:	8843      	ldrh	r3, [r0, #2]
 801ce82:	8804      	ldrh	r4, [r0, #0]
 801ce84:	684e      	ldr	r6, [r1, #4]
 801ce86:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801ce8a:	b087      	sub	sp, #28
 801ce8c:	429c      	cmp	r4, r3
 801ce8e:	9301      	str	r3, [sp, #4]
 801ce90:	9603      	str	r6, [sp, #12]
 801ce92:	f040 80ea 	bne.w	801d06a <arm_mat_inverse_f32+0x1ee>
 801ce96:	880a      	ldrh	r2, [r1, #0]
 801ce98:	884b      	ldrh	r3, [r1, #2]
 801ce9a:	4293      	cmp	r3, r2
 801ce9c:	f040 80e5 	bne.w	801d06a <arm_mat_inverse_f32+0x1ee>
 801cea0:	429c      	cmp	r4, r3
 801cea2:	f040 80e2 	bne.w	801d06a <arm_mat_inverse_f32+0x1ee>
 801cea6:	9005      	str	r0, [sp, #20]
 801cea8:	b30c      	cbz	r4, 801ceee <arm_mat_inverse_f32+0x72>
 801ceaa:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 801ceae:	1e67      	subs	r7, r4, #1
 801ceb0:	f846 bb04 	str.w	fp, [r6], #4
 801ceb4:	d01b      	beq.n	801ceee <arm_mat_inverse_f32+0x72>
 801ceb6:	f04f 0801 	mov.w	r8, #1
 801ceba:	00ba      	lsls	r2, r7, #2
 801cebc:	eb06 0a02 	add.w	sl, r6, r2
 801cec0:	ea4f 0588 	mov.w	r5, r8, lsl #2
 801cec4:	4630      	mov	r0, r6
 801cec6:	2100      	movs	r1, #0
 801cec8:	f000 fe36 	bl	801db38 <memset>
 801cecc:	eb0a 0605 	add.w	r6, sl, r5
 801ced0:	462a      	mov	r2, r5
 801ced2:	2100      	movs	r1, #0
 801ced4:	4650      	mov	r0, sl
 801ced6:	f1b8 0f00 	cmp.w	r8, #0
 801ceda:	f000 80cb 	beq.w	801d074 <arm_mat_inverse_f32+0x1f8>
 801cede:	f000 fe2b 	bl	801db38 <memset>
 801cee2:	3f01      	subs	r7, #1
 801cee4:	f108 0801 	add.w	r8, r8, #1
 801cee8:	f846 bb04 	str.w	fp, [r6], #4
 801ceec:	d1e5      	bne.n	801ceba <arm_mat_inverse_f32+0x3e>
 801ceee:	9b01      	ldr	r3, [sp, #4]
 801cef0:	2b00      	cmp	r3, #0
 801cef2:	f000 80b5 	beq.w	801d060 <arm_mat_inverse_f32+0x1e4>
 801cef6:	009d      	lsls	r5, r3, #2
 801cef8:	eb09 0205 	add.w	r2, r9, r5
 801cefc:	46cc      	mov	ip, r9
 801cefe:	9202      	str	r2, [sp, #8]
 801cf00:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801cf04:	1d2a      	adds	r2, r5, #4
 801cf06:	9204      	str	r2, [sp, #16]
 801cf08:	462f      	mov	r7, r5
 801cf0a:	469e      	mov	lr, r3
 801cf0c:	2600      	movs	r6, #0
 801cf0e:	9b02      	ldr	r3, [sp, #8]
 801cf10:	eddc 6a00 	vldr	s13, [ip]
 801cf14:	42b4      	cmp	r4, r6
 801cf16:	eba3 0b07 	sub.w	fp, r3, r7
 801cf1a:	f000 80a1 	beq.w	801d060 <arm_mat_inverse_f32+0x1e4>
 801cf1e:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 801d084 <arm_mat_inverse_f32+0x208>
 801cf22:	4632      	mov	r2, r6
 801cf24:	4663      	mov	r3, ip
 801cf26:	e00b      	b.n	801cf40 <arm_mat_inverse_f32+0xc4>
 801cf28:	eef4 7a47 	vcmp.f32	s15, s14
 801cf2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf30:	f102 0201 	add.w	r2, r2, #1
 801cf34:	bfc8      	it	gt
 801cf36:	eeb0 7a67 	vmovgt.f32	s14, s15
 801cf3a:	42a2      	cmp	r2, r4
 801cf3c:	442b      	add	r3, r5
 801cf3e:	d014      	beq.n	801cf6a <arm_mat_inverse_f32+0xee>
 801cf40:	edd3 7a00 	vldr	s15, [r3]
 801cf44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801cf48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf4c:	eeb1 6a67 	vneg.f32	s12, s15
 801cf50:	dcea      	bgt.n	801cf28 <arm_mat_inverse_f32+0xac>
 801cf52:	eeb4 6a47 	vcmp.f32	s12, s14
 801cf56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf5a:	f102 0201 	add.w	r2, r2, #1
 801cf5e:	bfc8      	it	gt
 801cf60:	eeb0 7a46 	vmovgt.f32	s14, s12
 801cf64:	42a2      	cmp	r2, r4
 801cf66:	442b      	add	r3, r5
 801cf68:	d1ea      	bne.n	801cf40 <arm_mat_inverse_f32+0xc4>
 801cf6a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801cf6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf72:	d075      	beq.n	801d060 <arm_mat_inverse_f32+0x1e4>
 801cf74:	eef5 6a40 	vcmp.f32	s13, #0.0
 801cf78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf7c:	d070      	beq.n	801d060 <arm_mat_inverse_f32+0x1e4>
 801cf7e:	4672      	mov	r2, lr
 801cf80:	4663      	mov	r3, ip
 801cf82:	ed93 7a00 	vldr	s14, [r3]
 801cf86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801cf8a:	3a01      	subs	r2, #1
 801cf8c:	ece3 7a01 	vstmia	r3!, {s15}
 801cf90:	d1f7      	bne.n	801cf82 <arm_mat_inverse_f32+0x106>
 801cf92:	9901      	ldr	r1, [sp, #4]
 801cf94:	464b      	mov	r3, r9
 801cf96:	ed93 7a00 	vldr	s14, [r3]
 801cf9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801cf9e:	3901      	subs	r1, #1
 801cfa0:	ece3 7a01 	vstmia	r3!, {s15}
 801cfa4:	d1f7      	bne.n	801cf96 <arm_mat_inverse_f32+0x11a>
 801cfa6:	9803      	ldr	r0, [sp, #12]
 801cfa8:	ea4f 0886 	mov.w	r8, r6, lsl #2
 801cfac:	42b1      	cmp	r1, r6
 801cfae:	d039      	beq.n	801d024 <arm_mat_inverse_f32+0x1a8>
 801cfb0:	eddb 6a00 	vldr	s13, [fp]
 801cfb4:	465a      	mov	r2, fp
 801cfb6:	4673      	mov	r3, lr
 801cfb8:	46e2      	mov	sl, ip
 801cfba:	ecba 7a01 	vldmia	sl!, {s14}
 801cfbe:	edd2 7a00 	vldr	s15, [r2]
 801cfc2:	ee26 7a87 	vmul.f32	s14, s13, s14
 801cfc6:	3b01      	subs	r3, #1
 801cfc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cfcc:	ece2 7a01 	vstmia	r2!, {s15}
 801cfd0:	d1f3      	bne.n	801cfba <arm_mat_inverse_f32+0x13e>
 801cfd2:	9b01      	ldr	r3, [sp, #4]
 801cfd4:	44bb      	add	fp, r7
 801cfd6:	4602      	mov	r2, r0
 801cfd8:	46ca      	mov	sl, r9
 801cfda:	ecba 7a01 	vldmia	sl!, {s14}
 801cfde:	edd2 7a00 	vldr	s15, [r2]
 801cfe2:	ee26 7a87 	vmul.f32	s14, s13, s14
 801cfe6:	3b01      	subs	r3, #1
 801cfe8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cfec:	ece2 7a01 	vstmia	r2!, {s15}
 801cff0:	d1f3      	bne.n	801cfda <arm_mat_inverse_f32+0x15e>
 801cff2:	4428      	add	r0, r5
 801cff4:	3101      	adds	r1, #1
 801cff6:	428c      	cmp	r4, r1
 801cff8:	44c3      	add	fp, r8
 801cffa:	d1d7      	bne.n	801cfac <arm_mat_inverse_f32+0x130>
 801cffc:	9b04      	ldr	r3, [sp, #16]
 801cffe:	f1be 0e01 	subs.w	lr, lr, #1
 801d002:	f106 0601 	add.w	r6, r6, #1
 801d006:	449c      	add	ip, r3
 801d008:	f1a7 0704 	sub.w	r7, r7, #4
 801d00c:	44a9      	add	r9, r5
 801d00e:	f47f af7e 	bne.w	801cf0e <arm_mat_inverse_f32+0x92>
 801d012:	eef5 6a40 	vcmp.f32	s13, #0.0
 801d016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d01a:	d006      	beq.n	801d02a <arm_mat_inverse_f32+0x1ae>
 801d01c:	2000      	movs	r0, #0
 801d01e:	b007      	add	sp, #28
 801d020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d024:	44bb      	add	fp, r7
 801d026:	4428      	add	r0, r5
 801d028:	e7e4      	b.n	801cff4 <arm_mat_inverse_f32+0x178>
 801d02a:	9b05      	ldr	r3, [sp, #20]
 801d02c:	9a01      	ldr	r2, [sp, #4]
 801d02e:	685b      	ldr	r3, [r3, #4]
 801d030:	edd3 7a00 	vldr	s15, [r3]
 801d034:	eef5 7a40 	vcmp.f32	s15, #0.0
 801d038:	fb02 f204 	mul.w	r2, r2, r4
 801d03c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d040:	4614      	mov	r4, r2
 801d042:	bf08      	it	eq
 801d044:	3304      	addeq	r3, #4
 801d046:	d007      	beq.n	801d058 <arm_mat_inverse_f32+0x1dc>
 801d048:	e7e8      	b.n	801d01c <arm_mat_inverse_f32+0x1a0>
 801d04a:	ecf3 7a01 	vldmia	r3!, {s15}
 801d04e:	eef5 7a40 	vcmp.f32	s15, #0.0
 801d052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d056:	d1e1      	bne.n	801d01c <arm_mat_inverse_f32+0x1a0>
 801d058:	f10e 0e01 	add.w	lr, lr, #1
 801d05c:	4574      	cmp	r4, lr
 801d05e:	d1f4      	bne.n	801d04a <arm_mat_inverse_f32+0x1ce>
 801d060:	f06f 0004 	mvn.w	r0, #4
 801d064:	b007      	add	sp, #28
 801d066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d06a:	f06f 0002 	mvn.w	r0, #2
 801d06e:	b007      	add	sp, #28
 801d070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d074:	4656      	mov	r6, sl
 801d076:	3f01      	subs	r7, #1
 801d078:	f846 bb04 	str.w	fp, [r6], #4
 801d07c:	f47f af1b 	bne.w	801ceb6 <arm_mat_inverse_f32+0x3a>
 801d080:	e735      	b.n	801ceee <arm_mat_inverse_f32+0x72>
 801d082:	bf00      	nop
 801d084:	00000000 	.word	0x00000000

0801d088 <arm_mat_init_f32>:
 801d088:	8001      	strh	r1, [r0, #0]
 801d08a:	8042      	strh	r2, [r0, #2]
 801d08c:	6043      	str	r3, [r0, #4]
 801d08e:	4770      	bx	lr

0801d090 <arm_mat_add_f32>:
 801d090:	b4f0      	push	{r4, r5, r6, r7}
 801d092:	e9d1 4700 	ldrd	r4, r7, [r1]
 801d096:	6803      	ldr	r3, [r0, #0]
 801d098:	f8d0 c004 	ldr.w	ip, [r0, #4]
 801d09c:	6856      	ldr	r6, [r2, #4]
 801d09e:	42a3      	cmp	r3, r4
 801d0a0:	d15d      	bne.n	801d15e <arm_mat_add_f32+0xce>
 801d0a2:	6812      	ldr	r2, [r2, #0]
 801d0a4:	4293      	cmp	r3, r2
 801d0a6:	d15a      	bne.n	801d15e <arm_mat_add_f32+0xce>
 801d0a8:	8803      	ldrh	r3, [r0, #0]
 801d0aa:	8844      	ldrh	r4, [r0, #2]
 801d0ac:	fb04 f403 	mul.w	r4, r4, r3
 801d0b0:	08a5      	lsrs	r5, r4, #2
 801d0b2:	d032      	beq.n	801d11a <arm_mat_add_f32+0x8a>
 801d0b4:	f10c 0110 	add.w	r1, ip, #16
 801d0b8:	f107 0210 	add.w	r2, r7, #16
 801d0bc:	f106 0310 	add.w	r3, r6, #16
 801d0c0:	4628      	mov	r0, r5
 801d0c2:	ed12 7a04 	vldr	s14, [r2, #-16]
 801d0c6:	ed51 7a04 	vldr	s15, [r1, #-16]
 801d0ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d0ce:	3801      	subs	r0, #1
 801d0d0:	ed43 7a04 	vstr	s15, [r3, #-16]
 801d0d4:	ed12 7a03 	vldr	s14, [r2, #-12]
 801d0d8:	ed51 7a03 	vldr	s15, [r1, #-12]
 801d0dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d0e0:	f101 0110 	add.w	r1, r1, #16
 801d0e4:	ed43 7a03 	vstr	s15, [r3, #-12]
 801d0e8:	ed12 7a02 	vldr	s14, [r2, #-8]
 801d0ec:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 801d0f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d0f4:	f102 0210 	add.w	r2, r2, #16
 801d0f8:	ed43 7a02 	vstr	s15, [r3, #-8]
 801d0fc:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 801d100:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 801d104:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d108:	f103 0310 	add.w	r3, r3, #16
 801d10c:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 801d110:	d1d7      	bne.n	801d0c2 <arm_mat_add_f32+0x32>
 801d112:	012b      	lsls	r3, r5, #4
 801d114:	449c      	add	ip, r3
 801d116:	441f      	add	r7, r3
 801d118:	441e      	add	r6, r3
 801d11a:	f014 0403 	ands.w	r4, r4, #3
 801d11e:	d01b      	beq.n	801d158 <arm_mat_add_f32+0xc8>
 801d120:	edd7 7a00 	vldr	s15, [r7]
 801d124:	ed9c 7a00 	vldr	s14, [ip]
 801d128:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d12c:	3c01      	subs	r4, #1
 801d12e:	edc6 7a00 	vstr	s15, [r6]
 801d132:	d011      	beq.n	801d158 <arm_mat_add_f32+0xc8>
 801d134:	eddc 7a01 	vldr	s15, [ip, #4]
 801d138:	ed97 7a01 	vldr	s14, [r7, #4]
 801d13c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d140:	2c01      	cmp	r4, #1
 801d142:	edc6 7a01 	vstr	s15, [r6, #4]
 801d146:	d007      	beq.n	801d158 <arm_mat_add_f32+0xc8>
 801d148:	eddc 7a02 	vldr	s15, [ip, #8]
 801d14c:	ed97 7a02 	vldr	s14, [r7, #8]
 801d150:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d154:	edc6 7a02 	vstr	s15, [r6, #8]
 801d158:	2000      	movs	r0, #0
 801d15a:	bcf0      	pop	{r4, r5, r6, r7}
 801d15c:	4770      	bx	lr
 801d15e:	f06f 0002 	mvn.w	r0, #2
 801d162:	e7fa      	b.n	801d15a <arm_mat_add_f32+0xca>

0801d164 <calloc>:
 801d164:	4b02      	ldr	r3, [pc, #8]	@ (801d170 <calloc+0xc>)
 801d166:	460a      	mov	r2, r1
 801d168:	4601      	mov	r1, r0
 801d16a:	6818      	ldr	r0, [r3, #0]
 801d16c:	f000 b802 	b.w	801d174 <_calloc_r>
 801d170:	200034bc 	.word	0x200034bc

0801d174 <_calloc_r>:
 801d174:	b570      	push	{r4, r5, r6, lr}
 801d176:	fba1 5402 	umull	r5, r4, r1, r2
 801d17a:	b93c      	cbnz	r4, 801d18c <_calloc_r+0x18>
 801d17c:	4629      	mov	r1, r5
 801d17e:	f000 f899 	bl	801d2b4 <_malloc_r>
 801d182:	4606      	mov	r6, r0
 801d184:	b928      	cbnz	r0, 801d192 <_calloc_r+0x1e>
 801d186:	2600      	movs	r6, #0
 801d188:	4630      	mov	r0, r6
 801d18a:	bd70      	pop	{r4, r5, r6, pc}
 801d18c:	220c      	movs	r2, #12
 801d18e:	6002      	str	r2, [r0, #0]
 801d190:	e7f9      	b.n	801d186 <_calloc_r+0x12>
 801d192:	462a      	mov	r2, r5
 801d194:	4621      	mov	r1, r4
 801d196:	f000 fccf 	bl	801db38 <memset>
 801d19a:	e7f5      	b.n	801d188 <_calloc_r+0x14>

0801d19c <exit>:
 801d19c:	b508      	push	{r3, lr}
 801d19e:	4b06      	ldr	r3, [pc, #24]	@ (801d1b8 <exit+0x1c>)
 801d1a0:	4604      	mov	r4, r0
 801d1a2:	b113      	cbz	r3, 801d1aa <exit+0xe>
 801d1a4:	2100      	movs	r1, #0
 801d1a6:	f3af 8000 	nop.w
 801d1aa:	4b04      	ldr	r3, [pc, #16]	@ (801d1bc <exit+0x20>)
 801d1ac:	681b      	ldr	r3, [r3, #0]
 801d1ae:	b103      	cbz	r3, 801d1b2 <exit+0x16>
 801d1b0:	4798      	blx	r3
 801d1b2:	4620      	mov	r0, r4
 801d1b4:	f7e6 faf4 	bl	80037a0 <_exit>
 801d1b8:	00000000 	.word	0x00000000
 801d1bc:	2000f9fc 	.word	0x2000f9fc

0801d1c0 <getenv>:
 801d1c0:	b507      	push	{r0, r1, r2, lr}
 801d1c2:	4b04      	ldr	r3, [pc, #16]	@ (801d1d4 <getenv+0x14>)
 801d1c4:	4601      	mov	r1, r0
 801d1c6:	aa01      	add	r2, sp, #4
 801d1c8:	6818      	ldr	r0, [r3, #0]
 801d1ca:	f000 f805 	bl	801d1d8 <_findenv_r>
 801d1ce:	b003      	add	sp, #12
 801d1d0:	f85d fb04 	ldr.w	pc, [sp], #4
 801d1d4:	200034bc 	.word	0x200034bc

0801d1d8 <_findenv_r>:
 801d1d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1dc:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801d24c <_findenv_r+0x74>
 801d1e0:	4606      	mov	r6, r0
 801d1e2:	4689      	mov	r9, r1
 801d1e4:	4617      	mov	r7, r2
 801d1e6:	f000 fdaf 	bl	801dd48 <__env_lock>
 801d1ea:	f8da 4000 	ldr.w	r4, [sl]
 801d1ee:	b134      	cbz	r4, 801d1fe <_findenv_r+0x26>
 801d1f0:	464b      	mov	r3, r9
 801d1f2:	4698      	mov	r8, r3
 801d1f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d1f8:	b13a      	cbz	r2, 801d20a <_findenv_r+0x32>
 801d1fa:	2a3d      	cmp	r2, #61	@ 0x3d
 801d1fc:	d1f9      	bne.n	801d1f2 <_findenv_r+0x1a>
 801d1fe:	4630      	mov	r0, r6
 801d200:	f000 fda8 	bl	801dd54 <__env_unlock>
 801d204:	2000      	movs	r0, #0
 801d206:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d20a:	eba8 0809 	sub.w	r8, r8, r9
 801d20e:	46a3      	mov	fp, r4
 801d210:	f854 0b04 	ldr.w	r0, [r4], #4
 801d214:	2800      	cmp	r0, #0
 801d216:	d0f2      	beq.n	801d1fe <_findenv_r+0x26>
 801d218:	4642      	mov	r2, r8
 801d21a:	4649      	mov	r1, r9
 801d21c:	f000 fca1 	bl	801db62 <strncmp>
 801d220:	2800      	cmp	r0, #0
 801d222:	d1f4      	bne.n	801d20e <_findenv_r+0x36>
 801d224:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801d228:	eb03 0508 	add.w	r5, r3, r8
 801d22c:	f813 3008 	ldrb.w	r3, [r3, r8]
 801d230:	2b3d      	cmp	r3, #61	@ 0x3d
 801d232:	d1ec      	bne.n	801d20e <_findenv_r+0x36>
 801d234:	f8da 3000 	ldr.w	r3, [sl]
 801d238:	ebab 0303 	sub.w	r3, fp, r3
 801d23c:	109b      	asrs	r3, r3, #2
 801d23e:	4630      	mov	r0, r6
 801d240:	603b      	str	r3, [r7, #0]
 801d242:	f000 fd87 	bl	801dd54 <__env_unlock>
 801d246:	1c68      	adds	r0, r5, #1
 801d248:	e7dd      	b.n	801d206 <_findenv_r+0x2e>
 801d24a:	bf00      	nop
 801d24c:	20000000 	.word	0x20000000

0801d250 <malloc>:
 801d250:	4b02      	ldr	r3, [pc, #8]	@ (801d25c <malloc+0xc>)
 801d252:	4601      	mov	r1, r0
 801d254:	6818      	ldr	r0, [r3, #0]
 801d256:	f000 b82d 	b.w	801d2b4 <_malloc_r>
 801d25a:	bf00      	nop
 801d25c:	200034bc 	.word	0x200034bc

0801d260 <free>:
 801d260:	4b02      	ldr	r3, [pc, #8]	@ (801d26c <free+0xc>)
 801d262:	4601      	mov	r1, r0
 801d264:	6818      	ldr	r0, [r3, #0]
 801d266:	f000 bd7b 	b.w	801dd60 <_free_r>
 801d26a:	bf00      	nop
 801d26c:	200034bc 	.word	0x200034bc

0801d270 <sbrk_aligned>:
 801d270:	b570      	push	{r4, r5, r6, lr}
 801d272:	4e0f      	ldr	r6, [pc, #60]	@ (801d2b0 <sbrk_aligned+0x40>)
 801d274:	460c      	mov	r4, r1
 801d276:	6831      	ldr	r1, [r6, #0]
 801d278:	4605      	mov	r5, r0
 801d27a:	b911      	cbnz	r1, 801d282 <sbrk_aligned+0x12>
 801d27c:	f000 fce0 	bl	801dc40 <_sbrk_r>
 801d280:	6030      	str	r0, [r6, #0]
 801d282:	4621      	mov	r1, r4
 801d284:	4628      	mov	r0, r5
 801d286:	f000 fcdb 	bl	801dc40 <_sbrk_r>
 801d28a:	1c43      	adds	r3, r0, #1
 801d28c:	d103      	bne.n	801d296 <sbrk_aligned+0x26>
 801d28e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801d292:	4620      	mov	r0, r4
 801d294:	bd70      	pop	{r4, r5, r6, pc}
 801d296:	1cc4      	adds	r4, r0, #3
 801d298:	f024 0403 	bic.w	r4, r4, #3
 801d29c:	42a0      	cmp	r0, r4
 801d29e:	d0f8      	beq.n	801d292 <sbrk_aligned+0x22>
 801d2a0:	1a21      	subs	r1, r4, r0
 801d2a2:	4628      	mov	r0, r5
 801d2a4:	f000 fccc 	bl	801dc40 <_sbrk_r>
 801d2a8:	3001      	adds	r0, #1
 801d2aa:	d1f2      	bne.n	801d292 <sbrk_aligned+0x22>
 801d2ac:	e7ef      	b.n	801d28e <sbrk_aligned+0x1e>
 801d2ae:	bf00      	nop
 801d2b0:	2000f8bc 	.word	0x2000f8bc

0801d2b4 <_malloc_r>:
 801d2b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d2b8:	1ccd      	adds	r5, r1, #3
 801d2ba:	f025 0503 	bic.w	r5, r5, #3
 801d2be:	3508      	adds	r5, #8
 801d2c0:	2d0c      	cmp	r5, #12
 801d2c2:	bf38      	it	cc
 801d2c4:	250c      	movcc	r5, #12
 801d2c6:	2d00      	cmp	r5, #0
 801d2c8:	4606      	mov	r6, r0
 801d2ca:	db01      	blt.n	801d2d0 <_malloc_r+0x1c>
 801d2cc:	42a9      	cmp	r1, r5
 801d2ce:	d904      	bls.n	801d2da <_malloc_r+0x26>
 801d2d0:	230c      	movs	r3, #12
 801d2d2:	6033      	str	r3, [r6, #0]
 801d2d4:	2000      	movs	r0, #0
 801d2d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d2da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d3b0 <_malloc_r+0xfc>
 801d2de:	f000 f869 	bl	801d3b4 <__malloc_lock>
 801d2e2:	f8d8 3000 	ldr.w	r3, [r8]
 801d2e6:	461c      	mov	r4, r3
 801d2e8:	bb44      	cbnz	r4, 801d33c <_malloc_r+0x88>
 801d2ea:	4629      	mov	r1, r5
 801d2ec:	4630      	mov	r0, r6
 801d2ee:	f7ff ffbf 	bl	801d270 <sbrk_aligned>
 801d2f2:	1c43      	adds	r3, r0, #1
 801d2f4:	4604      	mov	r4, r0
 801d2f6:	d158      	bne.n	801d3aa <_malloc_r+0xf6>
 801d2f8:	f8d8 4000 	ldr.w	r4, [r8]
 801d2fc:	4627      	mov	r7, r4
 801d2fe:	2f00      	cmp	r7, #0
 801d300:	d143      	bne.n	801d38a <_malloc_r+0xd6>
 801d302:	2c00      	cmp	r4, #0
 801d304:	d04b      	beq.n	801d39e <_malloc_r+0xea>
 801d306:	6823      	ldr	r3, [r4, #0]
 801d308:	4639      	mov	r1, r7
 801d30a:	4630      	mov	r0, r6
 801d30c:	eb04 0903 	add.w	r9, r4, r3
 801d310:	f000 fc96 	bl	801dc40 <_sbrk_r>
 801d314:	4581      	cmp	r9, r0
 801d316:	d142      	bne.n	801d39e <_malloc_r+0xea>
 801d318:	6821      	ldr	r1, [r4, #0]
 801d31a:	1a6d      	subs	r5, r5, r1
 801d31c:	4629      	mov	r1, r5
 801d31e:	4630      	mov	r0, r6
 801d320:	f7ff ffa6 	bl	801d270 <sbrk_aligned>
 801d324:	3001      	adds	r0, #1
 801d326:	d03a      	beq.n	801d39e <_malloc_r+0xea>
 801d328:	6823      	ldr	r3, [r4, #0]
 801d32a:	442b      	add	r3, r5
 801d32c:	6023      	str	r3, [r4, #0]
 801d32e:	f8d8 3000 	ldr.w	r3, [r8]
 801d332:	685a      	ldr	r2, [r3, #4]
 801d334:	bb62      	cbnz	r2, 801d390 <_malloc_r+0xdc>
 801d336:	f8c8 7000 	str.w	r7, [r8]
 801d33a:	e00f      	b.n	801d35c <_malloc_r+0xa8>
 801d33c:	6822      	ldr	r2, [r4, #0]
 801d33e:	1b52      	subs	r2, r2, r5
 801d340:	d420      	bmi.n	801d384 <_malloc_r+0xd0>
 801d342:	2a0b      	cmp	r2, #11
 801d344:	d917      	bls.n	801d376 <_malloc_r+0xc2>
 801d346:	1961      	adds	r1, r4, r5
 801d348:	42a3      	cmp	r3, r4
 801d34a:	6025      	str	r5, [r4, #0]
 801d34c:	bf18      	it	ne
 801d34e:	6059      	strne	r1, [r3, #4]
 801d350:	6863      	ldr	r3, [r4, #4]
 801d352:	bf08      	it	eq
 801d354:	f8c8 1000 	streq.w	r1, [r8]
 801d358:	5162      	str	r2, [r4, r5]
 801d35a:	604b      	str	r3, [r1, #4]
 801d35c:	4630      	mov	r0, r6
 801d35e:	f000 f82f 	bl	801d3c0 <__malloc_unlock>
 801d362:	f104 000b 	add.w	r0, r4, #11
 801d366:	1d23      	adds	r3, r4, #4
 801d368:	f020 0007 	bic.w	r0, r0, #7
 801d36c:	1ac2      	subs	r2, r0, r3
 801d36e:	bf1c      	itt	ne
 801d370:	1a1b      	subne	r3, r3, r0
 801d372:	50a3      	strne	r3, [r4, r2]
 801d374:	e7af      	b.n	801d2d6 <_malloc_r+0x22>
 801d376:	6862      	ldr	r2, [r4, #4]
 801d378:	42a3      	cmp	r3, r4
 801d37a:	bf0c      	ite	eq
 801d37c:	f8c8 2000 	streq.w	r2, [r8]
 801d380:	605a      	strne	r2, [r3, #4]
 801d382:	e7eb      	b.n	801d35c <_malloc_r+0xa8>
 801d384:	4623      	mov	r3, r4
 801d386:	6864      	ldr	r4, [r4, #4]
 801d388:	e7ae      	b.n	801d2e8 <_malloc_r+0x34>
 801d38a:	463c      	mov	r4, r7
 801d38c:	687f      	ldr	r7, [r7, #4]
 801d38e:	e7b6      	b.n	801d2fe <_malloc_r+0x4a>
 801d390:	461a      	mov	r2, r3
 801d392:	685b      	ldr	r3, [r3, #4]
 801d394:	42a3      	cmp	r3, r4
 801d396:	d1fb      	bne.n	801d390 <_malloc_r+0xdc>
 801d398:	2300      	movs	r3, #0
 801d39a:	6053      	str	r3, [r2, #4]
 801d39c:	e7de      	b.n	801d35c <_malloc_r+0xa8>
 801d39e:	230c      	movs	r3, #12
 801d3a0:	6033      	str	r3, [r6, #0]
 801d3a2:	4630      	mov	r0, r6
 801d3a4:	f000 f80c 	bl	801d3c0 <__malloc_unlock>
 801d3a8:	e794      	b.n	801d2d4 <_malloc_r+0x20>
 801d3aa:	6005      	str	r5, [r0, #0]
 801d3ac:	e7d6      	b.n	801d35c <_malloc_r+0xa8>
 801d3ae:	bf00      	nop
 801d3b0:	2000f8c0 	.word	0x2000f8c0

0801d3b4 <__malloc_lock>:
 801d3b4:	4801      	ldr	r0, [pc, #4]	@ (801d3bc <__malloc_lock+0x8>)
 801d3b6:	f000 bc90 	b.w	801dcda <__retarget_lock_acquire_recursive>
 801d3ba:	bf00      	nop
 801d3bc:	2000fa05 	.word	0x2000fa05

0801d3c0 <__malloc_unlock>:
 801d3c0:	4801      	ldr	r0, [pc, #4]	@ (801d3c8 <__malloc_unlock+0x8>)
 801d3c2:	f000 bc8b 	b.w	801dcdc <__retarget_lock_release_recursive>
 801d3c6:	bf00      	nop
 801d3c8:	2000fa05 	.word	0x2000fa05

0801d3cc <srand>:
 801d3cc:	b538      	push	{r3, r4, r5, lr}
 801d3ce:	4b10      	ldr	r3, [pc, #64]	@ (801d410 <srand+0x44>)
 801d3d0:	681d      	ldr	r5, [r3, #0]
 801d3d2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801d3d4:	4604      	mov	r4, r0
 801d3d6:	b9b3      	cbnz	r3, 801d406 <srand+0x3a>
 801d3d8:	2018      	movs	r0, #24
 801d3da:	f7ff ff39 	bl	801d250 <malloc>
 801d3de:	4602      	mov	r2, r0
 801d3e0:	6328      	str	r0, [r5, #48]	@ 0x30
 801d3e2:	b920      	cbnz	r0, 801d3ee <srand+0x22>
 801d3e4:	4b0b      	ldr	r3, [pc, #44]	@ (801d414 <srand+0x48>)
 801d3e6:	480c      	ldr	r0, [pc, #48]	@ (801d418 <srand+0x4c>)
 801d3e8:	2146      	movs	r1, #70	@ 0x46
 801d3ea:	f000 fc8f 	bl	801dd0c <__assert_func>
 801d3ee:	490b      	ldr	r1, [pc, #44]	@ (801d41c <srand+0x50>)
 801d3f0:	4b0b      	ldr	r3, [pc, #44]	@ (801d420 <srand+0x54>)
 801d3f2:	e9c0 1300 	strd	r1, r3, [r0]
 801d3f6:	4b0b      	ldr	r3, [pc, #44]	@ (801d424 <srand+0x58>)
 801d3f8:	6083      	str	r3, [r0, #8]
 801d3fa:	230b      	movs	r3, #11
 801d3fc:	8183      	strh	r3, [r0, #12]
 801d3fe:	2100      	movs	r1, #0
 801d400:	2001      	movs	r0, #1
 801d402:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d406:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801d408:	2200      	movs	r2, #0
 801d40a:	611c      	str	r4, [r3, #16]
 801d40c:	615a      	str	r2, [r3, #20]
 801d40e:	bd38      	pop	{r3, r4, r5, pc}
 801d410:	200034bc 	.word	0x200034bc
 801d414:	08021ed4 	.word	0x08021ed4
 801d418:	08021eeb 	.word	0x08021eeb
 801d41c:	abcd330e 	.word	0xabcd330e
 801d420:	e66d1234 	.word	0xe66d1234
 801d424:	0005deec 	.word	0x0005deec

0801d428 <rand>:
 801d428:	4b16      	ldr	r3, [pc, #88]	@ (801d484 <rand+0x5c>)
 801d42a:	b510      	push	{r4, lr}
 801d42c:	681c      	ldr	r4, [r3, #0]
 801d42e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d430:	b9b3      	cbnz	r3, 801d460 <rand+0x38>
 801d432:	2018      	movs	r0, #24
 801d434:	f7ff ff0c 	bl	801d250 <malloc>
 801d438:	4602      	mov	r2, r0
 801d43a:	6320      	str	r0, [r4, #48]	@ 0x30
 801d43c:	b920      	cbnz	r0, 801d448 <rand+0x20>
 801d43e:	4b12      	ldr	r3, [pc, #72]	@ (801d488 <rand+0x60>)
 801d440:	4812      	ldr	r0, [pc, #72]	@ (801d48c <rand+0x64>)
 801d442:	2152      	movs	r1, #82	@ 0x52
 801d444:	f000 fc62 	bl	801dd0c <__assert_func>
 801d448:	4911      	ldr	r1, [pc, #68]	@ (801d490 <rand+0x68>)
 801d44a:	4b12      	ldr	r3, [pc, #72]	@ (801d494 <rand+0x6c>)
 801d44c:	e9c0 1300 	strd	r1, r3, [r0]
 801d450:	4b11      	ldr	r3, [pc, #68]	@ (801d498 <rand+0x70>)
 801d452:	6083      	str	r3, [r0, #8]
 801d454:	230b      	movs	r3, #11
 801d456:	8183      	strh	r3, [r0, #12]
 801d458:	2100      	movs	r1, #0
 801d45a:	2001      	movs	r0, #1
 801d45c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d460:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d462:	480e      	ldr	r0, [pc, #56]	@ (801d49c <rand+0x74>)
 801d464:	690b      	ldr	r3, [r1, #16]
 801d466:	694c      	ldr	r4, [r1, #20]
 801d468:	4a0d      	ldr	r2, [pc, #52]	@ (801d4a0 <rand+0x78>)
 801d46a:	4358      	muls	r0, r3
 801d46c:	fb02 0004 	mla	r0, r2, r4, r0
 801d470:	fba3 3202 	umull	r3, r2, r3, r2
 801d474:	3301      	adds	r3, #1
 801d476:	eb40 0002 	adc.w	r0, r0, r2
 801d47a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801d47e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801d482:	bd10      	pop	{r4, pc}
 801d484:	200034bc 	.word	0x200034bc
 801d488:	08021ed4 	.word	0x08021ed4
 801d48c:	08021eeb 	.word	0x08021eeb
 801d490:	abcd330e 	.word	0xabcd330e
 801d494:	e66d1234 	.word	0xe66d1234
 801d498:	0005deec 	.word	0x0005deec
 801d49c:	5851f42d 	.word	0x5851f42d
 801d4a0:	4c957f2d 	.word	0x4c957f2d

0801d4a4 <realloc>:
 801d4a4:	4b02      	ldr	r3, [pc, #8]	@ (801d4b0 <realloc+0xc>)
 801d4a6:	460a      	mov	r2, r1
 801d4a8:	4601      	mov	r1, r0
 801d4aa:	6818      	ldr	r0, [r3, #0]
 801d4ac:	f000 b802 	b.w	801d4b4 <_realloc_r>
 801d4b0:	200034bc 	.word	0x200034bc

0801d4b4 <_realloc_r>:
 801d4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d4b8:	4680      	mov	r8, r0
 801d4ba:	4615      	mov	r5, r2
 801d4bc:	460c      	mov	r4, r1
 801d4be:	b921      	cbnz	r1, 801d4ca <_realloc_r+0x16>
 801d4c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d4c4:	4611      	mov	r1, r2
 801d4c6:	f7ff bef5 	b.w	801d2b4 <_malloc_r>
 801d4ca:	b92a      	cbnz	r2, 801d4d8 <_realloc_r+0x24>
 801d4cc:	f000 fc48 	bl	801dd60 <_free_r>
 801d4d0:	2400      	movs	r4, #0
 801d4d2:	4620      	mov	r0, r4
 801d4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d4d8:	f000 fc8c 	bl	801ddf4 <_malloc_usable_size_r>
 801d4dc:	4285      	cmp	r5, r0
 801d4de:	4606      	mov	r6, r0
 801d4e0:	d802      	bhi.n	801d4e8 <_realloc_r+0x34>
 801d4e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801d4e6:	d8f4      	bhi.n	801d4d2 <_realloc_r+0x1e>
 801d4e8:	4629      	mov	r1, r5
 801d4ea:	4640      	mov	r0, r8
 801d4ec:	f7ff fee2 	bl	801d2b4 <_malloc_r>
 801d4f0:	4607      	mov	r7, r0
 801d4f2:	2800      	cmp	r0, #0
 801d4f4:	d0ec      	beq.n	801d4d0 <_realloc_r+0x1c>
 801d4f6:	42b5      	cmp	r5, r6
 801d4f8:	462a      	mov	r2, r5
 801d4fa:	4621      	mov	r1, r4
 801d4fc:	bf28      	it	cs
 801d4fe:	4632      	movcs	r2, r6
 801d500:	f000 fbf5 	bl	801dcee <memcpy>
 801d504:	4621      	mov	r1, r4
 801d506:	4640      	mov	r0, r8
 801d508:	f000 fc2a 	bl	801dd60 <_free_r>
 801d50c:	463c      	mov	r4, r7
 801d50e:	e7e0      	b.n	801d4d2 <_realloc_r+0x1e>

0801d510 <_strtoul_l.constprop.0>:
 801d510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d514:	4e34      	ldr	r6, [pc, #208]	@ (801d5e8 <_strtoul_l.constprop.0+0xd8>)
 801d516:	4686      	mov	lr, r0
 801d518:	460d      	mov	r5, r1
 801d51a:	4628      	mov	r0, r5
 801d51c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d520:	5d37      	ldrb	r7, [r6, r4]
 801d522:	f017 0708 	ands.w	r7, r7, #8
 801d526:	d1f8      	bne.n	801d51a <_strtoul_l.constprop.0+0xa>
 801d528:	2c2d      	cmp	r4, #45	@ 0x2d
 801d52a:	d12f      	bne.n	801d58c <_strtoul_l.constprop.0+0x7c>
 801d52c:	782c      	ldrb	r4, [r5, #0]
 801d52e:	2701      	movs	r7, #1
 801d530:	1c85      	adds	r5, r0, #2
 801d532:	f033 0010 	bics.w	r0, r3, #16
 801d536:	d109      	bne.n	801d54c <_strtoul_l.constprop.0+0x3c>
 801d538:	2c30      	cmp	r4, #48	@ 0x30
 801d53a:	d12c      	bne.n	801d596 <_strtoul_l.constprop.0+0x86>
 801d53c:	7828      	ldrb	r0, [r5, #0]
 801d53e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801d542:	2858      	cmp	r0, #88	@ 0x58
 801d544:	d127      	bne.n	801d596 <_strtoul_l.constprop.0+0x86>
 801d546:	786c      	ldrb	r4, [r5, #1]
 801d548:	2310      	movs	r3, #16
 801d54a:	3502      	adds	r5, #2
 801d54c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801d550:	2600      	movs	r6, #0
 801d552:	fbb8 f8f3 	udiv	r8, r8, r3
 801d556:	fb03 f908 	mul.w	r9, r3, r8
 801d55a:	ea6f 0909 	mvn.w	r9, r9
 801d55e:	4630      	mov	r0, r6
 801d560:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801d564:	f1bc 0f09 	cmp.w	ip, #9
 801d568:	d81c      	bhi.n	801d5a4 <_strtoul_l.constprop.0+0x94>
 801d56a:	4664      	mov	r4, ip
 801d56c:	42a3      	cmp	r3, r4
 801d56e:	dd2a      	ble.n	801d5c6 <_strtoul_l.constprop.0+0xb6>
 801d570:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801d574:	d007      	beq.n	801d586 <_strtoul_l.constprop.0+0x76>
 801d576:	4580      	cmp	r8, r0
 801d578:	d322      	bcc.n	801d5c0 <_strtoul_l.constprop.0+0xb0>
 801d57a:	d101      	bne.n	801d580 <_strtoul_l.constprop.0+0x70>
 801d57c:	45a1      	cmp	r9, r4
 801d57e:	db1f      	blt.n	801d5c0 <_strtoul_l.constprop.0+0xb0>
 801d580:	fb00 4003 	mla	r0, r0, r3, r4
 801d584:	2601      	movs	r6, #1
 801d586:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d58a:	e7e9      	b.n	801d560 <_strtoul_l.constprop.0+0x50>
 801d58c:	2c2b      	cmp	r4, #43	@ 0x2b
 801d58e:	bf04      	itt	eq
 801d590:	782c      	ldrbeq	r4, [r5, #0]
 801d592:	1c85      	addeq	r5, r0, #2
 801d594:	e7cd      	b.n	801d532 <_strtoul_l.constprop.0+0x22>
 801d596:	2b00      	cmp	r3, #0
 801d598:	d1d8      	bne.n	801d54c <_strtoul_l.constprop.0+0x3c>
 801d59a:	2c30      	cmp	r4, #48	@ 0x30
 801d59c:	bf0c      	ite	eq
 801d59e:	2308      	moveq	r3, #8
 801d5a0:	230a      	movne	r3, #10
 801d5a2:	e7d3      	b.n	801d54c <_strtoul_l.constprop.0+0x3c>
 801d5a4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801d5a8:	f1bc 0f19 	cmp.w	ip, #25
 801d5ac:	d801      	bhi.n	801d5b2 <_strtoul_l.constprop.0+0xa2>
 801d5ae:	3c37      	subs	r4, #55	@ 0x37
 801d5b0:	e7dc      	b.n	801d56c <_strtoul_l.constprop.0+0x5c>
 801d5b2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801d5b6:	f1bc 0f19 	cmp.w	ip, #25
 801d5ba:	d804      	bhi.n	801d5c6 <_strtoul_l.constprop.0+0xb6>
 801d5bc:	3c57      	subs	r4, #87	@ 0x57
 801d5be:	e7d5      	b.n	801d56c <_strtoul_l.constprop.0+0x5c>
 801d5c0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801d5c4:	e7df      	b.n	801d586 <_strtoul_l.constprop.0+0x76>
 801d5c6:	1c73      	adds	r3, r6, #1
 801d5c8:	d106      	bne.n	801d5d8 <_strtoul_l.constprop.0+0xc8>
 801d5ca:	2322      	movs	r3, #34	@ 0x22
 801d5cc:	f8ce 3000 	str.w	r3, [lr]
 801d5d0:	4630      	mov	r0, r6
 801d5d2:	b932      	cbnz	r2, 801d5e2 <_strtoul_l.constprop.0+0xd2>
 801d5d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d5d8:	b107      	cbz	r7, 801d5dc <_strtoul_l.constprop.0+0xcc>
 801d5da:	4240      	negs	r0, r0
 801d5dc:	2a00      	cmp	r2, #0
 801d5de:	d0f9      	beq.n	801d5d4 <_strtoul_l.constprop.0+0xc4>
 801d5e0:	b106      	cbz	r6, 801d5e4 <_strtoul_l.constprop.0+0xd4>
 801d5e2:	1e69      	subs	r1, r5, #1
 801d5e4:	6011      	str	r1, [r2, #0]
 801d5e6:	e7f5      	b.n	801d5d4 <_strtoul_l.constprop.0+0xc4>
 801d5e8:	08021f44 	.word	0x08021f44

0801d5ec <strtoul>:
 801d5ec:	4613      	mov	r3, r2
 801d5ee:	460a      	mov	r2, r1
 801d5f0:	4601      	mov	r1, r0
 801d5f2:	4802      	ldr	r0, [pc, #8]	@ (801d5fc <strtoul+0x10>)
 801d5f4:	6800      	ldr	r0, [r0, #0]
 801d5f6:	f7ff bf8b 	b.w	801d510 <_strtoul_l.constprop.0>
 801d5fa:	bf00      	nop
 801d5fc:	200034bc 	.word	0x200034bc

0801d600 <std>:
 801d600:	2300      	movs	r3, #0
 801d602:	b510      	push	{r4, lr}
 801d604:	4604      	mov	r4, r0
 801d606:	e9c0 3300 	strd	r3, r3, [r0]
 801d60a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d60e:	6083      	str	r3, [r0, #8]
 801d610:	8181      	strh	r1, [r0, #12]
 801d612:	6643      	str	r3, [r0, #100]	@ 0x64
 801d614:	81c2      	strh	r2, [r0, #14]
 801d616:	6183      	str	r3, [r0, #24]
 801d618:	4619      	mov	r1, r3
 801d61a:	2208      	movs	r2, #8
 801d61c:	305c      	adds	r0, #92	@ 0x5c
 801d61e:	f000 fa8b 	bl	801db38 <memset>
 801d622:	4b0d      	ldr	r3, [pc, #52]	@ (801d658 <std+0x58>)
 801d624:	6263      	str	r3, [r4, #36]	@ 0x24
 801d626:	4b0d      	ldr	r3, [pc, #52]	@ (801d65c <std+0x5c>)
 801d628:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d62a:	4b0d      	ldr	r3, [pc, #52]	@ (801d660 <std+0x60>)
 801d62c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801d62e:	4b0d      	ldr	r3, [pc, #52]	@ (801d664 <std+0x64>)
 801d630:	6323      	str	r3, [r4, #48]	@ 0x30
 801d632:	4b0d      	ldr	r3, [pc, #52]	@ (801d668 <std+0x68>)
 801d634:	6224      	str	r4, [r4, #32]
 801d636:	429c      	cmp	r4, r3
 801d638:	d006      	beq.n	801d648 <std+0x48>
 801d63a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801d63e:	4294      	cmp	r4, r2
 801d640:	d002      	beq.n	801d648 <std+0x48>
 801d642:	33d0      	adds	r3, #208	@ 0xd0
 801d644:	429c      	cmp	r4, r3
 801d646:	d105      	bne.n	801d654 <std+0x54>
 801d648:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801d64c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d650:	f000 bb42 	b.w	801dcd8 <__retarget_lock_init_recursive>
 801d654:	bd10      	pop	{r4, pc}
 801d656:	bf00      	nop
 801d658:	0801d8c5 	.word	0x0801d8c5
 801d65c:	0801d8e7 	.word	0x0801d8e7
 801d660:	0801d91f 	.word	0x0801d91f
 801d664:	0801d943 	.word	0x0801d943
 801d668:	2000f8c4 	.word	0x2000f8c4

0801d66c <stdio_exit_handler>:
 801d66c:	4a02      	ldr	r2, [pc, #8]	@ (801d678 <stdio_exit_handler+0xc>)
 801d66e:	4903      	ldr	r1, [pc, #12]	@ (801d67c <stdio_exit_handler+0x10>)
 801d670:	4803      	ldr	r0, [pc, #12]	@ (801d680 <stdio_exit_handler+0x14>)
 801d672:	f000 b869 	b.w	801d748 <_fwalk_sglue>
 801d676:	bf00      	nop
 801d678:	200034b0 	.word	0x200034b0
 801d67c:	0801e75d 	.word	0x0801e75d
 801d680:	200034c0 	.word	0x200034c0

0801d684 <cleanup_stdio>:
 801d684:	6841      	ldr	r1, [r0, #4]
 801d686:	4b0c      	ldr	r3, [pc, #48]	@ (801d6b8 <cleanup_stdio+0x34>)
 801d688:	4299      	cmp	r1, r3
 801d68a:	b510      	push	{r4, lr}
 801d68c:	4604      	mov	r4, r0
 801d68e:	d001      	beq.n	801d694 <cleanup_stdio+0x10>
 801d690:	f001 f864 	bl	801e75c <_fflush_r>
 801d694:	68a1      	ldr	r1, [r4, #8]
 801d696:	4b09      	ldr	r3, [pc, #36]	@ (801d6bc <cleanup_stdio+0x38>)
 801d698:	4299      	cmp	r1, r3
 801d69a:	d002      	beq.n	801d6a2 <cleanup_stdio+0x1e>
 801d69c:	4620      	mov	r0, r4
 801d69e:	f001 f85d 	bl	801e75c <_fflush_r>
 801d6a2:	68e1      	ldr	r1, [r4, #12]
 801d6a4:	4b06      	ldr	r3, [pc, #24]	@ (801d6c0 <cleanup_stdio+0x3c>)
 801d6a6:	4299      	cmp	r1, r3
 801d6a8:	d004      	beq.n	801d6b4 <cleanup_stdio+0x30>
 801d6aa:	4620      	mov	r0, r4
 801d6ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d6b0:	f001 b854 	b.w	801e75c <_fflush_r>
 801d6b4:	bd10      	pop	{r4, pc}
 801d6b6:	bf00      	nop
 801d6b8:	2000f8c4 	.word	0x2000f8c4
 801d6bc:	2000f92c 	.word	0x2000f92c
 801d6c0:	2000f994 	.word	0x2000f994

0801d6c4 <global_stdio_init.part.0>:
 801d6c4:	b510      	push	{r4, lr}
 801d6c6:	4b0b      	ldr	r3, [pc, #44]	@ (801d6f4 <global_stdio_init.part.0+0x30>)
 801d6c8:	4c0b      	ldr	r4, [pc, #44]	@ (801d6f8 <global_stdio_init.part.0+0x34>)
 801d6ca:	4a0c      	ldr	r2, [pc, #48]	@ (801d6fc <global_stdio_init.part.0+0x38>)
 801d6cc:	601a      	str	r2, [r3, #0]
 801d6ce:	4620      	mov	r0, r4
 801d6d0:	2200      	movs	r2, #0
 801d6d2:	2104      	movs	r1, #4
 801d6d4:	f7ff ff94 	bl	801d600 <std>
 801d6d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801d6dc:	2201      	movs	r2, #1
 801d6de:	2109      	movs	r1, #9
 801d6e0:	f7ff ff8e 	bl	801d600 <std>
 801d6e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801d6e8:	2202      	movs	r2, #2
 801d6ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d6ee:	2112      	movs	r1, #18
 801d6f0:	f7ff bf86 	b.w	801d600 <std>
 801d6f4:	2000f9fc 	.word	0x2000f9fc
 801d6f8:	2000f8c4 	.word	0x2000f8c4
 801d6fc:	0801d66d 	.word	0x0801d66d

0801d700 <__sfp_lock_acquire>:
 801d700:	4801      	ldr	r0, [pc, #4]	@ (801d708 <__sfp_lock_acquire+0x8>)
 801d702:	f000 baea 	b.w	801dcda <__retarget_lock_acquire_recursive>
 801d706:	bf00      	nop
 801d708:	2000fa06 	.word	0x2000fa06

0801d70c <__sfp_lock_release>:
 801d70c:	4801      	ldr	r0, [pc, #4]	@ (801d714 <__sfp_lock_release+0x8>)
 801d70e:	f000 bae5 	b.w	801dcdc <__retarget_lock_release_recursive>
 801d712:	bf00      	nop
 801d714:	2000fa06 	.word	0x2000fa06

0801d718 <__sinit>:
 801d718:	b510      	push	{r4, lr}
 801d71a:	4604      	mov	r4, r0
 801d71c:	f7ff fff0 	bl	801d700 <__sfp_lock_acquire>
 801d720:	6a23      	ldr	r3, [r4, #32]
 801d722:	b11b      	cbz	r3, 801d72c <__sinit+0x14>
 801d724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d728:	f7ff bff0 	b.w	801d70c <__sfp_lock_release>
 801d72c:	4b04      	ldr	r3, [pc, #16]	@ (801d740 <__sinit+0x28>)
 801d72e:	6223      	str	r3, [r4, #32]
 801d730:	4b04      	ldr	r3, [pc, #16]	@ (801d744 <__sinit+0x2c>)
 801d732:	681b      	ldr	r3, [r3, #0]
 801d734:	2b00      	cmp	r3, #0
 801d736:	d1f5      	bne.n	801d724 <__sinit+0xc>
 801d738:	f7ff ffc4 	bl	801d6c4 <global_stdio_init.part.0>
 801d73c:	e7f2      	b.n	801d724 <__sinit+0xc>
 801d73e:	bf00      	nop
 801d740:	0801d685 	.word	0x0801d685
 801d744:	2000f9fc 	.word	0x2000f9fc

0801d748 <_fwalk_sglue>:
 801d748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d74c:	4607      	mov	r7, r0
 801d74e:	4688      	mov	r8, r1
 801d750:	4614      	mov	r4, r2
 801d752:	2600      	movs	r6, #0
 801d754:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d758:	f1b9 0901 	subs.w	r9, r9, #1
 801d75c:	d505      	bpl.n	801d76a <_fwalk_sglue+0x22>
 801d75e:	6824      	ldr	r4, [r4, #0]
 801d760:	2c00      	cmp	r4, #0
 801d762:	d1f7      	bne.n	801d754 <_fwalk_sglue+0xc>
 801d764:	4630      	mov	r0, r6
 801d766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d76a:	89ab      	ldrh	r3, [r5, #12]
 801d76c:	2b01      	cmp	r3, #1
 801d76e:	d907      	bls.n	801d780 <_fwalk_sglue+0x38>
 801d770:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d774:	3301      	adds	r3, #1
 801d776:	d003      	beq.n	801d780 <_fwalk_sglue+0x38>
 801d778:	4629      	mov	r1, r5
 801d77a:	4638      	mov	r0, r7
 801d77c:	47c0      	blx	r8
 801d77e:	4306      	orrs	r6, r0
 801d780:	3568      	adds	r5, #104	@ 0x68
 801d782:	e7e9      	b.n	801d758 <_fwalk_sglue+0x10>

0801d784 <_fwrite_r>:
 801d784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d788:	9c08      	ldr	r4, [sp, #32]
 801d78a:	468a      	mov	sl, r1
 801d78c:	4690      	mov	r8, r2
 801d78e:	fb02 f903 	mul.w	r9, r2, r3
 801d792:	4606      	mov	r6, r0
 801d794:	b118      	cbz	r0, 801d79e <_fwrite_r+0x1a>
 801d796:	6a03      	ldr	r3, [r0, #32]
 801d798:	b90b      	cbnz	r3, 801d79e <_fwrite_r+0x1a>
 801d79a:	f7ff ffbd 	bl	801d718 <__sinit>
 801d79e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d7a0:	07dd      	lsls	r5, r3, #31
 801d7a2:	d405      	bmi.n	801d7b0 <_fwrite_r+0x2c>
 801d7a4:	89a3      	ldrh	r3, [r4, #12]
 801d7a6:	0598      	lsls	r0, r3, #22
 801d7a8:	d402      	bmi.n	801d7b0 <_fwrite_r+0x2c>
 801d7aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d7ac:	f000 fa95 	bl	801dcda <__retarget_lock_acquire_recursive>
 801d7b0:	89a3      	ldrh	r3, [r4, #12]
 801d7b2:	0719      	lsls	r1, r3, #28
 801d7b4:	d516      	bpl.n	801d7e4 <_fwrite_r+0x60>
 801d7b6:	6923      	ldr	r3, [r4, #16]
 801d7b8:	b1a3      	cbz	r3, 801d7e4 <_fwrite_r+0x60>
 801d7ba:	2500      	movs	r5, #0
 801d7bc:	454d      	cmp	r5, r9
 801d7be:	d01f      	beq.n	801d800 <_fwrite_r+0x7c>
 801d7c0:	68a7      	ldr	r7, [r4, #8]
 801d7c2:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801d7c6:	3f01      	subs	r7, #1
 801d7c8:	2f00      	cmp	r7, #0
 801d7ca:	60a7      	str	r7, [r4, #8]
 801d7cc:	da04      	bge.n	801d7d8 <_fwrite_r+0x54>
 801d7ce:	69a3      	ldr	r3, [r4, #24]
 801d7d0:	429f      	cmp	r7, r3
 801d7d2:	db0f      	blt.n	801d7f4 <_fwrite_r+0x70>
 801d7d4:	290a      	cmp	r1, #10
 801d7d6:	d00d      	beq.n	801d7f4 <_fwrite_r+0x70>
 801d7d8:	6823      	ldr	r3, [r4, #0]
 801d7da:	1c5a      	adds	r2, r3, #1
 801d7dc:	6022      	str	r2, [r4, #0]
 801d7de:	7019      	strb	r1, [r3, #0]
 801d7e0:	3501      	adds	r5, #1
 801d7e2:	e7eb      	b.n	801d7bc <_fwrite_r+0x38>
 801d7e4:	4621      	mov	r1, r4
 801d7e6:	4630      	mov	r0, r6
 801d7e8:	f000 f926 	bl	801da38 <__swsetup_r>
 801d7ec:	2800      	cmp	r0, #0
 801d7ee:	d0e4      	beq.n	801d7ba <_fwrite_r+0x36>
 801d7f0:	2500      	movs	r5, #0
 801d7f2:	e005      	b.n	801d800 <_fwrite_r+0x7c>
 801d7f4:	4622      	mov	r2, r4
 801d7f6:	4630      	mov	r0, r6
 801d7f8:	f000 f8e0 	bl	801d9bc <__swbuf_r>
 801d7fc:	3001      	adds	r0, #1
 801d7fe:	d1ef      	bne.n	801d7e0 <_fwrite_r+0x5c>
 801d800:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d802:	07da      	lsls	r2, r3, #31
 801d804:	d405      	bmi.n	801d812 <_fwrite_r+0x8e>
 801d806:	89a3      	ldrh	r3, [r4, #12]
 801d808:	059b      	lsls	r3, r3, #22
 801d80a:	d402      	bmi.n	801d812 <_fwrite_r+0x8e>
 801d80c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d80e:	f000 fa65 	bl	801dcdc <__retarget_lock_release_recursive>
 801d812:	fbb5 f0f8 	udiv	r0, r5, r8
 801d816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801d81c <fwrite>:
 801d81c:	b507      	push	{r0, r1, r2, lr}
 801d81e:	9300      	str	r3, [sp, #0]
 801d820:	4613      	mov	r3, r2
 801d822:	460a      	mov	r2, r1
 801d824:	4601      	mov	r1, r0
 801d826:	4803      	ldr	r0, [pc, #12]	@ (801d834 <fwrite+0x18>)
 801d828:	6800      	ldr	r0, [r0, #0]
 801d82a:	f7ff ffab 	bl	801d784 <_fwrite_r>
 801d82e:	b003      	add	sp, #12
 801d830:	f85d fb04 	ldr.w	pc, [sp], #4
 801d834:	200034bc 	.word	0x200034bc

0801d838 <iprintf>:
 801d838:	b40f      	push	{r0, r1, r2, r3}
 801d83a:	b507      	push	{r0, r1, r2, lr}
 801d83c:	4906      	ldr	r1, [pc, #24]	@ (801d858 <iprintf+0x20>)
 801d83e:	ab04      	add	r3, sp, #16
 801d840:	6808      	ldr	r0, [r1, #0]
 801d842:	f853 2b04 	ldr.w	r2, [r3], #4
 801d846:	6881      	ldr	r1, [r0, #8]
 801d848:	9301      	str	r3, [sp, #4]
 801d84a:	f000 fc5d 	bl	801e108 <_vfiprintf_r>
 801d84e:	b003      	add	sp, #12
 801d850:	f85d eb04 	ldr.w	lr, [sp], #4
 801d854:	b004      	add	sp, #16
 801d856:	4770      	bx	lr
 801d858:	200034bc 	.word	0x200034bc

0801d85c <sniprintf>:
 801d85c:	b40c      	push	{r2, r3}
 801d85e:	b530      	push	{r4, r5, lr}
 801d860:	4b17      	ldr	r3, [pc, #92]	@ (801d8c0 <sniprintf+0x64>)
 801d862:	1e0c      	subs	r4, r1, #0
 801d864:	681d      	ldr	r5, [r3, #0]
 801d866:	b09d      	sub	sp, #116	@ 0x74
 801d868:	da08      	bge.n	801d87c <sniprintf+0x20>
 801d86a:	238b      	movs	r3, #139	@ 0x8b
 801d86c:	602b      	str	r3, [r5, #0]
 801d86e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d872:	b01d      	add	sp, #116	@ 0x74
 801d874:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d878:	b002      	add	sp, #8
 801d87a:	4770      	bx	lr
 801d87c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801d880:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d884:	bf14      	ite	ne
 801d886:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801d88a:	4623      	moveq	r3, r4
 801d88c:	9304      	str	r3, [sp, #16]
 801d88e:	9307      	str	r3, [sp, #28]
 801d890:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d894:	9002      	str	r0, [sp, #8]
 801d896:	9006      	str	r0, [sp, #24]
 801d898:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d89c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801d89e:	ab21      	add	r3, sp, #132	@ 0x84
 801d8a0:	a902      	add	r1, sp, #8
 801d8a2:	4628      	mov	r0, r5
 801d8a4:	9301      	str	r3, [sp, #4]
 801d8a6:	f000 fb09 	bl	801debc <_svfiprintf_r>
 801d8aa:	1c43      	adds	r3, r0, #1
 801d8ac:	bfbc      	itt	lt
 801d8ae:	238b      	movlt	r3, #139	@ 0x8b
 801d8b0:	602b      	strlt	r3, [r5, #0]
 801d8b2:	2c00      	cmp	r4, #0
 801d8b4:	d0dd      	beq.n	801d872 <sniprintf+0x16>
 801d8b6:	9b02      	ldr	r3, [sp, #8]
 801d8b8:	2200      	movs	r2, #0
 801d8ba:	701a      	strb	r2, [r3, #0]
 801d8bc:	e7d9      	b.n	801d872 <sniprintf+0x16>
 801d8be:	bf00      	nop
 801d8c0:	200034bc 	.word	0x200034bc

0801d8c4 <__sread>:
 801d8c4:	b510      	push	{r4, lr}
 801d8c6:	460c      	mov	r4, r1
 801d8c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d8cc:	f000 f9a6 	bl	801dc1c <_read_r>
 801d8d0:	2800      	cmp	r0, #0
 801d8d2:	bfab      	itete	ge
 801d8d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801d8d6:	89a3      	ldrhlt	r3, [r4, #12]
 801d8d8:	181b      	addge	r3, r3, r0
 801d8da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d8de:	bfac      	ite	ge
 801d8e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801d8e2:	81a3      	strhlt	r3, [r4, #12]
 801d8e4:	bd10      	pop	{r4, pc}

0801d8e6 <__swrite>:
 801d8e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d8ea:	461f      	mov	r7, r3
 801d8ec:	898b      	ldrh	r3, [r1, #12]
 801d8ee:	05db      	lsls	r3, r3, #23
 801d8f0:	4605      	mov	r5, r0
 801d8f2:	460c      	mov	r4, r1
 801d8f4:	4616      	mov	r6, r2
 801d8f6:	d505      	bpl.n	801d904 <__swrite+0x1e>
 801d8f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d8fc:	2302      	movs	r3, #2
 801d8fe:	2200      	movs	r2, #0
 801d900:	f000 f97a 	bl	801dbf8 <_lseek_r>
 801d904:	89a3      	ldrh	r3, [r4, #12]
 801d906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d90a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d90e:	81a3      	strh	r3, [r4, #12]
 801d910:	4632      	mov	r2, r6
 801d912:	463b      	mov	r3, r7
 801d914:	4628      	mov	r0, r5
 801d916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d91a:	f000 b9a1 	b.w	801dc60 <_write_r>

0801d91e <__sseek>:
 801d91e:	b510      	push	{r4, lr}
 801d920:	460c      	mov	r4, r1
 801d922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d926:	f000 f967 	bl	801dbf8 <_lseek_r>
 801d92a:	1c43      	adds	r3, r0, #1
 801d92c:	89a3      	ldrh	r3, [r4, #12]
 801d92e:	bf15      	itete	ne
 801d930:	6560      	strne	r0, [r4, #84]	@ 0x54
 801d932:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d936:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d93a:	81a3      	strheq	r3, [r4, #12]
 801d93c:	bf18      	it	ne
 801d93e:	81a3      	strhne	r3, [r4, #12]
 801d940:	bd10      	pop	{r4, pc}

0801d942 <__sclose>:
 801d942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d946:	f000 b947 	b.w	801dbd8 <_close_r>

0801d94a <_vsniprintf_r>:
 801d94a:	b530      	push	{r4, r5, lr}
 801d94c:	4614      	mov	r4, r2
 801d94e:	2c00      	cmp	r4, #0
 801d950:	b09b      	sub	sp, #108	@ 0x6c
 801d952:	4605      	mov	r5, r0
 801d954:	461a      	mov	r2, r3
 801d956:	da05      	bge.n	801d964 <_vsniprintf_r+0x1a>
 801d958:	238b      	movs	r3, #139	@ 0x8b
 801d95a:	6003      	str	r3, [r0, #0]
 801d95c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d960:	b01b      	add	sp, #108	@ 0x6c
 801d962:	bd30      	pop	{r4, r5, pc}
 801d964:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801d968:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d96c:	bf14      	ite	ne
 801d96e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801d972:	4623      	moveq	r3, r4
 801d974:	9302      	str	r3, [sp, #8]
 801d976:	9305      	str	r3, [sp, #20]
 801d978:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d97c:	9100      	str	r1, [sp, #0]
 801d97e:	9104      	str	r1, [sp, #16]
 801d980:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d984:	4669      	mov	r1, sp
 801d986:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d988:	f000 fa98 	bl	801debc <_svfiprintf_r>
 801d98c:	1c43      	adds	r3, r0, #1
 801d98e:	bfbc      	itt	lt
 801d990:	238b      	movlt	r3, #139	@ 0x8b
 801d992:	602b      	strlt	r3, [r5, #0]
 801d994:	2c00      	cmp	r4, #0
 801d996:	d0e3      	beq.n	801d960 <_vsniprintf_r+0x16>
 801d998:	9b00      	ldr	r3, [sp, #0]
 801d99a:	2200      	movs	r2, #0
 801d99c:	701a      	strb	r2, [r3, #0]
 801d99e:	e7df      	b.n	801d960 <_vsniprintf_r+0x16>

0801d9a0 <vsniprintf>:
 801d9a0:	b507      	push	{r0, r1, r2, lr}
 801d9a2:	9300      	str	r3, [sp, #0]
 801d9a4:	4613      	mov	r3, r2
 801d9a6:	460a      	mov	r2, r1
 801d9a8:	4601      	mov	r1, r0
 801d9aa:	4803      	ldr	r0, [pc, #12]	@ (801d9b8 <vsniprintf+0x18>)
 801d9ac:	6800      	ldr	r0, [r0, #0]
 801d9ae:	f7ff ffcc 	bl	801d94a <_vsniprintf_r>
 801d9b2:	b003      	add	sp, #12
 801d9b4:	f85d fb04 	ldr.w	pc, [sp], #4
 801d9b8:	200034bc 	.word	0x200034bc

0801d9bc <__swbuf_r>:
 801d9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d9be:	460e      	mov	r6, r1
 801d9c0:	4614      	mov	r4, r2
 801d9c2:	4605      	mov	r5, r0
 801d9c4:	b118      	cbz	r0, 801d9ce <__swbuf_r+0x12>
 801d9c6:	6a03      	ldr	r3, [r0, #32]
 801d9c8:	b90b      	cbnz	r3, 801d9ce <__swbuf_r+0x12>
 801d9ca:	f7ff fea5 	bl	801d718 <__sinit>
 801d9ce:	69a3      	ldr	r3, [r4, #24]
 801d9d0:	60a3      	str	r3, [r4, #8]
 801d9d2:	89a3      	ldrh	r3, [r4, #12]
 801d9d4:	071a      	lsls	r2, r3, #28
 801d9d6:	d501      	bpl.n	801d9dc <__swbuf_r+0x20>
 801d9d8:	6923      	ldr	r3, [r4, #16]
 801d9da:	b943      	cbnz	r3, 801d9ee <__swbuf_r+0x32>
 801d9dc:	4621      	mov	r1, r4
 801d9de:	4628      	mov	r0, r5
 801d9e0:	f000 f82a 	bl	801da38 <__swsetup_r>
 801d9e4:	b118      	cbz	r0, 801d9ee <__swbuf_r+0x32>
 801d9e6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801d9ea:	4638      	mov	r0, r7
 801d9ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d9ee:	6823      	ldr	r3, [r4, #0]
 801d9f0:	6922      	ldr	r2, [r4, #16]
 801d9f2:	1a98      	subs	r0, r3, r2
 801d9f4:	6963      	ldr	r3, [r4, #20]
 801d9f6:	b2f6      	uxtb	r6, r6
 801d9f8:	4283      	cmp	r3, r0
 801d9fa:	4637      	mov	r7, r6
 801d9fc:	dc05      	bgt.n	801da0a <__swbuf_r+0x4e>
 801d9fe:	4621      	mov	r1, r4
 801da00:	4628      	mov	r0, r5
 801da02:	f000 feab 	bl	801e75c <_fflush_r>
 801da06:	2800      	cmp	r0, #0
 801da08:	d1ed      	bne.n	801d9e6 <__swbuf_r+0x2a>
 801da0a:	68a3      	ldr	r3, [r4, #8]
 801da0c:	3b01      	subs	r3, #1
 801da0e:	60a3      	str	r3, [r4, #8]
 801da10:	6823      	ldr	r3, [r4, #0]
 801da12:	1c5a      	adds	r2, r3, #1
 801da14:	6022      	str	r2, [r4, #0]
 801da16:	701e      	strb	r6, [r3, #0]
 801da18:	6962      	ldr	r2, [r4, #20]
 801da1a:	1c43      	adds	r3, r0, #1
 801da1c:	429a      	cmp	r2, r3
 801da1e:	d004      	beq.n	801da2a <__swbuf_r+0x6e>
 801da20:	89a3      	ldrh	r3, [r4, #12]
 801da22:	07db      	lsls	r3, r3, #31
 801da24:	d5e1      	bpl.n	801d9ea <__swbuf_r+0x2e>
 801da26:	2e0a      	cmp	r6, #10
 801da28:	d1df      	bne.n	801d9ea <__swbuf_r+0x2e>
 801da2a:	4621      	mov	r1, r4
 801da2c:	4628      	mov	r0, r5
 801da2e:	f000 fe95 	bl	801e75c <_fflush_r>
 801da32:	2800      	cmp	r0, #0
 801da34:	d0d9      	beq.n	801d9ea <__swbuf_r+0x2e>
 801da36:	e7d6      	b.n	801d9e6 <__swbuf_r+0x2a>

0801da38 <__swsetup_r>:
 801da38:	b538      	push	{r3, r4, r5, lr}
 801da3a:	4b29      	ldr	r3, [pc, #164]	@ (801dae0 <__swsetup_r+0xa8>)
 801da3c:	4605      	mov	r5, r0
 801da3e:	6818      	ldr	r0, [r3, #0]
 801da40:	460c      	mov	r4, r1
 801da42:	b118      	cbz	r0, 801da4c <__swsetup_r+0x14>
 801da44:	6a03      	ldr	r3, [r0, #32]
 801da46:	b90b      	cbnz	r3, 801da4c <__swsetup_r+0x14>
 801da48:	f7ff fe66 	bl	801d718 <__sinit>
 801da4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801da50:	0719      	lsls	r1, r3, #28
 801da52:	d422      	bmi.n	801da9a <__swsetup_r+0x62>
 801da54:	06da      	lsls	r2, r3, #27
 801da56:	d407      	bmi.n	801da68 <__swsetup_r+0x30>
 801da58:	2209      	movs	r2, #9
 801da5a:	602a      	str	r2, [r5, #0]
 801da5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801da60:	81a3      	strh	r3, [r4, #12]
 801da62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801da66:	e033      	b.n	801dad0 <__swsetup_r+0x98>
 801da68:	0758      	lsls	r0, r3, #29
 801da6a:	d512      	bpl.n	801da92 <__swsetup_r+0x5a>
 801da6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801da6e:	b141      	cbz	r1, 801da82 <__swsetup_r+0x4a>
 801da70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801da74:	4299      	cmp	r1, r3
 801da76:	d002      	beq.n	801da7e <__swsetup_r+0x46>
 801da78:	4628      	mov	r0, r5
 801da7a:	f000 f971 	bl	801dd60 <_free_r>
 801da7e:	2300      	movs	r3, #0
 801da80:	6363      	str	r3, [r4, #52]	@ 0x34
 801da82:	89a3      	ldrh	r3, [r4, #12]
 801da84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801da88:	81a3      	strh	r3, [r4, #12]
 801da8a:	2300      	movs	r3, #0
 801da8c:	6063      	str	r3, [r4, #4]
 801da8e:	6923      	ldr	r3, [r4, #16]
 801da90:	6023      	str	r3, [r4, #0]
 801da92:	89a3      	ldrh	r3, [r4, #12]
 801da94:	f043 0308 	orr.w	r3, r3, #8
 801da98:	81a3      	strh	r3, [r4, #12]
 801da9a:	6923      	ldr	r3, [r4, #16]
 801da9c:	b94b      	cbnz	r3, 801dab2 <__swsetup_r+0x7a>
 801da9e:	89a3      	ldrh	r3, [r4, #12]
 801daa0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801daa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801daa8:	d003      	beq.n	801dab2 <__swsetup_r+0x7a>
 801daaa:	4621      	mov	r1, r4
 801daac:	4628      	mov	r0, r5
 801daae:	f000 feb5 	bl	801e81c <__smakebuf_r>
 801dab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dab6:	f013 0201 	ands.w	r2, r3, #1
 801daba:	d00a      	beq.n	801dad2 <__swsetup_r+0x9a>
 801dabc:	2200      	movs	r2, #0
 801dabe:	60a2      	str	r2, [r4, #8]
 801dac0:	6962      	ldr	r2, [r4, #20]
 801dac2:	4252      	negs	r2, r2
 801dac4:	61a2      	str	r2, [r4, #24]
 801dac6:	6922      	ldr	r2, [r4, #16]
 801dac8:	b942      	cbnz	r2, 801dadc <__swsetup_r+0xa4>
 801daca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801dace:	d1c5      	bne.n	801da5c <__swsetup_r+0x24>
 801dad0:	bd38      	pop	{r3, r4, r5, pc}
 801dad2:	0799      	lsls	r1, r3, #30
 801dad4:	bf58      	it	pl
 801dad6:	6962      	ldrpl	r2, [r4, #20]
 801dad8:	60a2      	str	r2, [r4, #8]
 801dada:	e7f4      	b.n	801dac6 <__swsetup_r+0x8e>
 801dadc:	2000      	movs	r0, #0
 801dade:	e7f7      	b.n	801dad0 <__swsetup_r+0x98>
 801dae0:	200034bc 	.word	0x200034bc

0801dae4 <memcmp>:
 801dae4:	b510      	push	{r4, lr}
 801dae6:	3901      	subs	r1, #1
 801dae8:	4402      	add	r2, r0
 801daea:	4290      	cmp	r0, r2
 801daec:	d101      	bne.n	801daf2 <memcmp+0xe>
 801daee:	2000      	movs	r0, #0
 801daf0:	e005      	b.n	801dafe <memcmp+0x1a>
 801daf2:	7803      	ldrb	r3, [r0, #0]
 801daf4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801daf8:	42a3      	cmp	r3, r4
 801dafa:	d001      	beq.n	801db00 <memcmp+0x1c>
 801dafc:	1b18      	subs	r0, r3, r4
 801dafe:	bd10      	pop	{r4, pc}
 801db00:	3001      	adds	r0, #1
 801db02:	e7f2      	b.n	801daea <memcmp+0x6>

0801db04 <memmove>:
 801db04:	4288      	cmp	r0, r1
 801db06:	b510      	push	{r4, lr}
 801db08:	eb01 0402 	add.w	r4, r1, r2
 801db0c:	d902      	bls.n	801db14 <memmove+0x10>
 801db0e:	4284      	cmp	r4, r0
 801db10:	4623      	mov	r3, r4
 801db12:	d807      	bhi.n	801db24 <memmove+0x20>
 801db14:	1e43      	subs	r3, r0, #1
 801db16:	42a1      	cmp	r1, r4
 801db18:	d008      	beq.n	801db2c <memmove+0x28>
 801db1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801db1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801db22:	e7f8      	b.n	801db16 <memmove+0x12>
 801db24:	4402      	add	r2, r0
 801db26:	4601      	mov	r1, r0
 801db28:	428a      	cmp	r2, r1
 801db2a:	d100      	bne.n	801db2e <memmove+0x2a>
 801db2c:	bd10      	pop	{r4, pc}
 801db2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801db32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801db36:	e7f7      	b.n	801db28 <memmove+0x24>

0801db38 <memset>:
 801db38:	4402      	add	r2, r0
 801db3a:	4603      	mov	r3, r0
 801db3c:	4293      	cmp	r3, r2
 801db3e:	d100      	bne.n	801db42 <memset+0xa>
 801db40:	4770      	bx	lr
 801db42:	f803 1b01 	strb.w	r1, [r3], #1
 801db46:	e7f9      	b.n	801db3c <memset+0x4>

0801db48 <strchr>:
 801db48:	b2c9      	uxtb	r1, r1
 801db4a:	4603      	mov	r3, r0
 801db4c:	4618      	mov	r0, r3
 801db4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801db52:	b112      	cbz	r2, 801db5a <strchr+0x12>
 801db54:	428a      	cmp	r2, r1
 801db56:	d1f9      	bne.n	801db4c <strchr+0x4>
 801db58:	4770      	bx	lr
 801db5a:	2900      	cmp	r1, #0
 801db5c:	bf18      	it	ne
 801db5e:	2000      	movne	r0, #0
 801db60:	4770      	bx	lr

0801db62 <strncmp>:
 801db62:	b510      	push	{r4, lr}
 801db64:	b16a      	cbz	r2, 801db82 <strncmp+0x20>
 801db66:	3901      	subs	r1, #1
 801db68:	1884      	adds	r4, r0, r2
 801db6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801db6e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801db72:	429a      	cmp	r2, r3
 801db74:	d103      	bne.n	801db7e <strncmp+0x1c>
 801db76:	42a0      	cmp	r0, r4
 801db78:	d001      	beq.n	801db7e <strncmp+0x1c>
 801db7a:	2a00      	cmp	r2, #0
 801db7c:	d1f5      	bne.n	801db6a <strncmp+0x8>
 801db7e:	1ad0      	subs	r0, r2, r3
 801db80:	bd10      	pop	{r4, pc}
 801db82:	4610      	mov	r0, r2
 801db84:	e7fc      	b.n	801db80 <strncmp+0x1e>

0801db86 <strncpy>:
 801db86:	b510      	push	{r4, lr}
 801db88:	3901      	subs	r1, #1
 801db8a:	4603      	mov	r3, r0
 801db8c:	b132      	cbz	r2, 801db9c <strncpy+0x16>
 801db8e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801db92:	f803 4b01 	strb.w	r4, [r3], #1
 801db96:	3a01      	subs	r2, #1
 801db98:	2c00      	cmp	r4, #0
 801db9a:	d1f7      	bne.n	801db8c <strncpy+0x6>
 801db9c:	441a      	add	r2, r3
 801db9e:	2100      	movs	r1, #0
 801dba0:	4293      	cmp	r3, r2
 801dba2:	d100      	bne.n	801dba6 <strncpy+0x20>
 801dba4:	bd10      	pop	{r4, pc}
 801dba6:	f803 1b01 	strb.w	r1, [r3], #1
 801dbaa:	e7f9      	b.n	801dba0 <strncpy+0x1a>

0801dbac <strstr>:
 801dbac:	780a      	ldrb	r2, [r1, #0]
 801dbae:	b570      	push	{r4, r5, r6, lr}
 801dbb0:	b96a      	cbnz	r2, 801dbce <strstr+0x22>
 801dbb2:	bd70      	pop	{r4, r5, r6, pc}
 801dbb4:	429a      	cmp	r2, r3
 801dbb6:	d109      	bne.n	801dbcc <strstr+0x20>
 801dbb8:	460c      	mov	r4, r1
 801dbba:	4605      	mov	r5, r0
 801dbbc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801dbc0:	2b00      	cmp	r3, #0
 801dbc2:	d0f6      	beq.n	801dbb2 <strstr+0x6>
 801dbc4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801dbc8:	429e      	cmp	r6, r3
 801dbca:	d0f7      	beq.n	801dbbc <strstr+0x10>
 801dbcc:	3001      	adds	r0, #1
 801dbce:	7803      	ldrb	r3, [r0, #0]
 801dbd0:	2b00      	cmp	r3, #0
 801dbd2:	d1ef      	bne.n	801dbb4 <strstr+0x8>
 801dbd4:	4618      	mov	r0, r3
 801dbd6:	e7ec      	b.n	801dbb2 <strstr+0x6>

0801dbd8 <_close_r>:
 801dbd8:	b538      	push	{r3, r4, r5, lr}
 801dbda:	4d06      	ldr	r5, [pc, #24]	@ (801dbf4 <_close_r+0x1c>)
 801dbdc:	2300      	movs	r3, #0
 801dbde:	4604      	mov	r4, r0
 801dbe0:	4608      	mov	r0, r1
 801dbe2:	602b      	str	r3, [r5, #0]
 801dbe4:	f7e5 fe20 	bl	8003828 <_close>
 801dbe8:	1c43      	adds	r3, r0, #1
 801dbea:	d102      	bne.n	801dbf2 <_close_r+0x1a>
 801dbec:	682b      	ldr	r3, [r5, #0]
 801dbee:	b103      	cbz	r3, 801dbf2 <_close_r+0x1a>
 801dbf0:	6023      	str	r3, [r4, #0]
 801dbf2:	bd38      	pop	{r3, r4, r5, pc}
 801dbf4:	2000fa00 	.word	0x2000fa00

0801dbf8 <_lseek_r>:
 801dbf8:	b538      	push	{r3, r4, r5, lr}
 801dbfa:	4d07      	ldr	r5, [pc, #28]	@ (801dc18 <_lseek_r+0x20>)
 801dbfc:	4604      	mov	r4, r0
 801dbfe:	4608      	mov	r0, r1
 801dc00:	4611      	mov	r1, r2
 801dc02:	2200      	movs	r2, #0
 801dc04:	602a      	str	r2, [r5, #0]
 801dc06:	461a      	mov	r2, r3
 801dc08:	f7e5 fe35 	bl	8003876 <_lseek>
 801dc0c:	1c43      	adds	r3, r0, #1
 801dc0e:	d102      	bne.n	801dc16 <_lseek_r+0x1e>
 801dc10:	682b      	ldr	r3, [r5, #0]
 801dc12:	b103      	cbz	r3, 801dc16 <_lseek_r+0x1e>
 801dc14:	6023      	str	r3, [r4, #0]
 801dc16:	bd38      	pop	{r3, r4, r5, pc}
 801dc18:	2000fa00 	.word	0x2000fa00

0801dc1c <_read_r>:
 801dc1c:	b538      	push	{r3, r4, r5, lr}
 801dc1e:	4d07      	ldr	r5, [pc, #28]	@ (801dc3c <_read_r+0x20>)
 801dc20:	4604      	mov	r4, r0
 801dc22:	4608      	mov	r0, r1
 801dc24:	4611      	mov	r1, r2
 801dc26:	2200      	movs	r2, #0
 801dc28:	602a      	str	r2, [r5, #0]
 801dc2a:	461a      	mov	r2, r3
 801dc2c:	f7e5 fdc3 	bl	80037b6 <_read>
 801dc30:	1c43      	adds	r3, r0, #1
 801dc32:	d102      	bne.n	801dc3a <_read_r+0x1e>
 801dc34:	682b      	ldr	r3, [r5, #0]
 801dc36:	b103      	cbz	r3, 801dc3a <_read_r+0x1e>
 801dc38:	6023      	str	r3, [r4, #0]
 801dc3a:	bd38      	pop	{r3, r4, r5, pc}
 801dc3c:	2000fa00 	.word	0x2000fa00

0801dc40 <_sbrk_r>:
 801dc40:	b538      	push	{r3, r4, r5, lr}
 801dc42:	4d06      	ldr	r5, [pc, #24]	@ (801dc5c <_sbrk_r+0x1c>)
 801dc44:	2300      	movs	r3, #0
 801dc46:	4604      	mov	r4, r0
 801dc48:	4608      	mov	r0, r1
 801dc4a:	602b      	str	r3, [r5, #0]
 801dc4c:	f7e5 fe20 	bl	8003890 <_sbrk>
 801dc50:	1c43      	adds	r3, r0, #1
 801dc52:	d102      	bne.n	801dc5a <_sbrk_r+0x1a>
 801dc54:	682b      	ldr	r3, [r5, #0]
 801dc56:	b103      	cbz	r3, 801dc5a <_sbrk_r+0x1a>
 801dc58:	6023      	str	r3, [r4, #0]
 801dc5a:	bd38      	pop	{r3, r4, r5, pc}
 801dc5c:	2000fa00 	.word	0x2000fa00

0801dc60 <_write_r>:
 801dc60:	b538      	push	{r3, r4, r5, lr}
 801dc62:	4d07      	ldr	r5, [pc, #28]	@ (801dc80 <_write_r+0x20>)
 801dc64:	4604      	mov	r4, r0
 801dc66:	4608      	mov	r0, r1
 801dc68:	4611      	mov	r1, r2
 801dc6a:	2200      	movs	r2, #0
 801dc6c:	602a      	str	r2, [r5, #0]
 801dc6e:	461a      	mov	r2, r3
 801dc70:	f7e5 fdbe 	bl	80037f0 <_write>
 801dc74:	1c43      	adds	r3, r0, #1
 801dc76:	d102      	bne.n	801dc7e <_write_r+0x1e>
 801dc78:	682b      	ldr	r3, [r5, #0]
 801dc7a:	b103      	cbz	r3, 801dc7e <_write_r+0x1e>
 801dc7c:	6023      	str	r3, [r4, #0]
 801dc7e:	bd38      	pop	{r3, r4, r5, pc}
 801dc80:	2000fa00 	.word	0x2000fa00

0801dc84 <__errno>:
 801dc84:	4b01      	ldr	r3, [pc, #4]	@ (801dc8c <__errno+0x8>)
 801dc86:	6818      	ldr	r0, [r3, #0]
 801dc88:	4770      	bx	lr
 801dc8a:	bf00      	nop
 801dc8c:	200034bc 	.word	0x200034bc

0801dc90 <__libc_init_array>:
 801dc90:	b570      	push	{r4, r5, r6, lr}
 801dc92:	4d0d      	ldr	r5, [pc, #52]	@ (801dcc8 <__libc_init_array+0x38>)
 801dc94:	4c0d      	ldr	r4, [pc, #52]	@ (801dccc <__libc_init_array+0x3c>)
 801dc96:	1b64      	subs	r4, r4, r5
 801dc98:	10a4      	asrs	r4, r4, #2
 801dc9a:	2600      	movs	r6, #0
 801dc9c:	42a6      	cmp	r6, r4
 801dc9e:	d109      	bne.n	801dcb4 <__libc_init_array+0x24>
 801dca0:	4d0b      	ldr	r5, [pc, #44]	@ (801dcd0 <__libc_init_array+0x40>)
 801dca2:	4c0c      	ldr	r4, [pc, #48]	@ (801dcd4 <__libc_init_array+0x44>)
 801dca4:	f001 ff52 	bl	801fb4c <_init>
 801dca8:	1b64      	subs	r4, r4, r5
 801dcaa:	10a4      	asrs	r4, r4, #2
 801dcac:	2600      	movs	r6, #0
 801dcae:	42a6      	cmp	r6, r4
 801dcb0:	d105      	bne.n	801dcbe <__libc_init_array+0x2e>
 801dcb2:	bd70      	pop	{r4, r5, r6, pc}
 801dcb4:	f855 3b04 	ldr.w	r3, [r5], #4
 801dcb8:	4798      	blx	r3
 801dcba:	3601      	adds	r6, #1
 801dcbc:	e7ee      	b.n	801dc9c <__libc_init_array+0xc>
 801dcbe:	f855 3b04 	ldr.w	r3, [r5], #4
 801dcc2:	4798      	blx	r3
 801dcc4:	3601      	adds	r6, #1
 801dcc6:	e7f2      	b.n	801dcae <__libc_init_array+0x1e>
 801dcc8:	08022500 	.word	0x08022500
 801dccc:	08022500 	.word	0x08022500
 801dcd0:	08022500 	.word	0x08022500
 801dcd4:	08022518 	.word	0x08022518

0801dcd8 <__retarget_lock_init_recursive>:
 801dcd8:	4770      	bx	lr

0801dcda <__retarget_lock_acquire_recursive>:
 801dcda:	4770      	bx	lr

0801dcdc <__retarget_lock_release_recursive>:
 801dcdc:	4770      	bx	lr

0801dcde <strcpy>:
 801dcde:	4603      	mov	r3, r0
 801dce0:	f811 2b01 	ldrb.w	r2, [r1], #1
 801dce4:	f803 2b01 	strb.w	r2, [r3], #1
 801dce8:	2a00      	cmp	r2, #0
 801dcea:	d1f9      	bne.n	801dce0 <strcpy+0x2>
 801dcec:	4770      	bx	lr

0801dcee <memcpy>:
 801dcee:	440a      	add	r2, r1
 801dcf0:	4291      	cmp	r1, r2
 801dcf2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801dcf6:	d100      	bne.n	801dcfa <memcpy+0xc>
 801dcf8:	4770      	bx	lr
 801dcfa:	b510      	push	{r4, lr}
 801dcfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dd00:	f803 4f01 	strb.w	r4, [r3, #1]!
 801dd04:	4291      	cmp	r1, r2
 801dd06:	d1f9      	bne.n	801dcfc <memcpy+0xe>
 801dd08:	bd10      	pop	{r4, pc}
	...

0801dd0c <__assert_func>:
 801dd0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801dd0e:	4614      	mov	r4, r2
 801dd10:	461a      	mov	r2, r3
 801dd12:	4b09      	ldr	r3, [pc, #36]	@ (801dd38 <__assert_func+0x2c>)
 801dd14:	681b      	ldr	r3, [r3, #0]
 801dd16:	4605      	mov	r5, r0
 801dd18:	68d8      	ldr	r0, [r3, #12]
 801dd1a:	b954      	cbnz	r4, 801dd32 <__assert_func+0x26>
 801dd1c:	4b07      	ldr	r3, [pc, #28]	@ (801dd3c <__assert_func+0x30>)
 801dd1e:	461c      	mov	r4, r3
 801dd20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801dd24:	9100      	str	r1, [sp, #0]
 801dd26:	462b      	mov	r3, r5
 801dd28:	4905      	ldr	r1, [pc, #20]	@ (801dd40 <__assert_func+0x34>)
 801dd2a:	f000 fd3f 	bl	801e7ac <fiprintf>
 801dd2e:	f000 fdd3 	bl	801e8d8 <abort>
 801dd32:	4b04      	ldr	r3, [pc, #16]	@ (801dd44 <__assert_func+0x38>)
 801dd34:	e7f4      	b.n	801dd20 <__assert_func+0x14>
 801dd36:	bf00      	nop
 801dd38:	200034bc 	.word	0x200034bc
 801dd3c:	0802207f 	.word	0x0802207f
 801dd40:	08022051 	.word	0x08022051
 801dd44:	08022044 	.word	0x08022044

0801dd48 <__env_lock>:
 801dd48:	4801      	ldr	r0, [pc, #4]	@ (801dd50 <__env_lock+0x8>)
 801dd4a:	f7ff bfc6 	b.w	801dcda <__retarget_lock_acquire_recursive>
 801dd4e:	bf00      	nop
 801dd50:	2000fa04 	.word	0x2000fa04

0801dd54 <__env_unlock>:
 801dd54:	4801      	ldr	r0, [pc, #4]	@ (801dd5c <__env_unlock+0x8>)
 801dd56:	f7ff bfc1 	b.w	801dcdc <__retarget_lock_release_recursive>
 801dd5a:	bf00      	nop
 801dd5c:	2000fa04 	.word	0x2000fa04

0801dd60 <_free_r>:
 801dd60:	b538      	push	{r3, r4, r5, lr}
 801dd62:	4605      	mov	r5, r0
 801dd64:	2900      	cmp	r1, #0
 801dd66:	d041      	beq.n	801ddec <_free_r+0x8c>
 801dd68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dd6c:	1f0c      	subs	r4, r1, #4
 801dd6e:	2b00      	cmp	r3, #0
 801dd70:	bfb8      	it	lt
 801dd72:	18e4      	addlt	r4, r4, r3
 801dd74:	f7ff fb1e 	bl	801d3b4 <__malloc_lock>
 801dd78:	4a1d      	ldr	r2, [pc, #116]	@ (801ddf0 <_free_r+0x90>)
 801dd7a:	6813      	ldr	r3, [r2, #0]
 801dd7c:	b933      	cbnz	r3, 801dd8c <_free_r+0x2c>
 801dd7e:	6063      	str	r3, [r4, #4]
 801dd80:	6014      	str	r4, [r2, #0]
 801dd82:	4628      	mov	r0, r5
 801dd84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dd88:	f7ff bb1a 	b.w	801d3c0 <__malloc_unlock>
 801dd8c:	42a3      	cmp	r3, r4
 801dd8e:	d908      	bls.n	801dda2 <_free_r+0x42>
 801dd90:	6820      	ldr	r0, [r4, #0]
 801dd92:	1821      	adds	r1, r4, r0
 801dd94:	428b      	cmp	r3, r1
 801dd96:	bf01      	itttt	eq
 801dd98:	6819      	ldreq	r1, [r3, #0]
 801dd9a:	685b      	ldreq	r3, [r3, #4]
 801dd9c:	1809      	addeq	r1, r1, r0
 801dd9e:	6021      	streq	r1, [r4, #0]
 801dda0:	e7ed      	b.n	801dd7e <_free_r+0x1e>
 801dda2:	461a      	mov	r2, r3
 801dda4:	685b      	ldr	r3, [r3, #4]
 801dda6:	b10b      	cbz	r3, 801ddac <_free_r+0x4c>
 801dda8:	42a3      	cmp	r3, r4
 801ddaa:	d9fa      	bls.n	801dda2 <_free_r+0x42>
 801ddac:	6811      	ldr	r1, [r2, #0]
 801ddae:	1850      	adds	r0, r2, r1
 801ddb0:	42a0      	cmp	r0, r4
 801ddb2:	d10b      	bne.n	801ddcc <_free_r+0x6c>
 801ddb4:	6820      	ldr	r0, [r4, #0]
 801ddb6:	4401      	add	r1, r0
 801ddb8:	1850      	adds	r0, r2, r1
 801ddba:	4283      	cmp	r3, r0
 801ddbc:	6011      	str	r1, [r2, #0]
 801ddbe:	d1e0      	bne.n	801dd82 <_free_r+0x22>
 801ddc0:	6818      	ldr	r0, [r3, #0]
 801ddc2:	685b      	ldr	r3, [r3, #4]
 801ddc4:	6053      	str	r3, [r2, #4]
 801ddc6:	4408      	add	r0, r1
 801ddc8:	6010      	str	r0, [r2, #0]
 801ddca:	e7da      	b.n	801dd82 <_free_r+0x22>
 801ddcc:	d902      	bls.n	801ddd4 <_free_r+0x74>
 801ddce:	230c      	movs	r3, #12
 801ddd0:	602b      	str	r3, [r5, #0]
 801ddd2:	e7d6      	b.n	801dd82 <_free_r+0x22>
 801ddd4:	6820      	ldr	r0, [r4, #0]
 801ddd6:	1821      	adds	r1, r4, r0
 801ddd8:	428b      	cmp	r3, r1
 801ddda:	bf04      	itt	eq
 801dddc:	6819      	ldreq	r1, [r3, #0]
 801ddde:	685b      	ldreq	r3, [r3, #4]
 801dde0:	6063      	str	r3, [r4, #4]
 801dde2:	bf04      	itt	eq
 801dde4:	1809      	addeq	r1, r1, r0
 801dde6:	6021      	streq	r1, [r4, #0]
 801dde8:	6054      	str	r4, [r2, #4]
 801ddea:	e7ca      	b.n	801dd82 <_free_r+0x22>
 801ddec:	bd38      	pop	{r3, r4, r5, pc}
 801ddee:	bf00      	nop
 801ddf0:	2000f8c0 	.word	0x2000f8c0

0801ddf4 <_malloc_usable_size_r>:
 801ddf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ddf8:	1f18      	subs	r0, r3, #4
 801ddfa:	2b00      	cmp	r3, #0
 801ddfc:	bfbc      	itt	lt
 801ddfe:	580b      	ldrlt	r3, [r1, r0]
 801de00:	18c0      	addlt	r0, r0, r3
 801de02:	4770      	bx	lr

0801de04 <__ssputs_r>:
 801de04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801de08:	688e      	ldr	r6, [r1, #8]
 801de0a:	461f      	mov	r7, r3
 801de0c:	42be      	cmp	r6, r7
 801de0e:	680b      	ldr	r3, [r1, #0]
 801de10:	4682      	mov	sl, r0
 801de12:	460c      	mov	r4, r1
 801de14:	4690      	mov	r8, r2
 801de16:	d82d      	bhi.n	801de74 <__ssputs_r+0x70>
 801de18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801de1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801de20:	d026      	beq.n	801de70 <__ssputs_r+0x6c>
 801de22:	6965      	ldr	r5, [r4, #20]
 801de24:	6909      	ldr	r1, [r1, #16]
 801de26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801de2a:	eba3 0901 	sub.w	r9, r3, r1
 801de2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801de32:	1c7b      	adds	r3, r7, #1
 801de34:	444b      	add	r3, r9
 801de36:	106d      	asrs	r5, r5, #1
 801de38:	429d      	cmp	r5, r3
 801de3a:	bf38      	it	cc
 801de3c:	461d      	movcc	r5, r3
 801de3e:	0553      	lsls	r3, r2, #21
 801de40:	d527      	bpl.n	801de92 <__ssputs_r+0x8e>
 801de42:	4629      	mov	r1, r5
 801de44:	f7ff fa36 	bl	801d2b4 <_malloc_r>
 801de48:	4606      	mov	r6, r0
 801de4a:	b360      	cbz	r0, 801dea6 <__ssputs_r+0xa2>
 801de4c:	6921      	ldr	r1, [r4, #16]
 801de4e:	464a      	mov	r2, r9
 801de50:	f7ff ff4d 	bl	801dcee <memcpy>
 801de54:	89a3      	ldrh	r3, [r4, #12]
 801de56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801de5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801de5e:	81a3      	strh	r3, [r4, #12]
 801de60:	6126      	str	r6, [r4, #16]
 801de62:	6165      	str	r5, [r4, #20]
 801de64:	444e      	add	r6, r9
 801de66:	eba5 0509 	sub.w	r5, r5, r9
 801de6a:	6026      	str	r6, [r4, #0]
 801de6c:	60a5      	str	r5, [r4, #8]
 801de6e:	463e      	mov	r6, r7
 801de70:	42be      	cmp	r6, r7
 801de72:	d900      	bls.n	801de76 <__ssputs_r+0x72>
 801de74:	463e      	mov	r6, r7
 801de76:	6820      	ldr	r0, [r4, #0]
 801de78:	4632      	mov	r2, r6
 801de7a:	4641      	mov	r1, r8
 801de7c:	f7ff fe42 	bl	801db04 <memmove>
 801de80:	68a3      	ldr	r3, [r4, #8]
 801de82:	1b9b      	subs	r3, r3, r6
 801de84:	60a3      	str	r3, [r4, #8]
 801de86:	6823      	ldr	r3, [r4, #0]
 801de88:	4433      	add	r3, r6
 801de8a:	6023      	str	r3, [r4, #0]
 801de8c:	2000      	movs	r0, #0
 801de8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de92:	462a      	mov	r2, r5
 801de94:	f7ff fb0e 	bl	801d4b4 <_realloc_r>
 801de98:	4606      	mov	r6, r0
 801de9a:	2800      	cmp	r0, #0
 801de9c:	d1e0      	bne.n	801de60 <__ssputs_r+0x5c>
 801de9e:	6921      	ldr	r1, [r4, #16]
 801dea0:	4650      	mov	r0, sl
 801dea2:	f7ff ff5d 	bl	801dd60 <_free_r>
 801dea6:	230c      	movs	r3, #12
 801dea8:	f8ca 3000 	str.w	r3, [sl]
 801deac:	89a3      	ldrh	r3, [r4, #12]
 801deae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801deb2:	81a3      	strh	r3, [r4, #12]
 801deb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801deb8:	e7e9      	b.n	801de8e <__ssputs_r+0x8a>
	...

0801debc <_svfiprintf_r>:
 801debc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dec0:	4698      	mov	r8, r3
 801dec2:	898b      	ldrh	r3, [r1, #12]
 801dec4:	061b      	lsls	r3, r3, #24
 801dec6:	b09d      	sub	sp, #116	@ 0x74
 801dec8:	4607      	mov	r7, r0
 801deca:	460d      	mov	r5, r1
 801decc:	4614      	mov	r4, r2
 801dece:	d510      	bpl.n	801def2 <_svfiprintf_r+0x36>
 801ded0:	690b      	ldr	r3, [r1, #16]
 801ded2:	b973      	cbnz	r3, 801def2 <_svfiprintf_r+0x36>
 801ded4:	2140      	movs	r1, #64	@ 0x40
 801ded6:	f7ff f9ed 	bl	801d2b4 <_malloc_r>
 801deda:	6028      	str	r0, [r5, #0]
 801dedc:	6128      	str	r0, [r5, #16]
 801dede:	b930      	cbnz	r0, 801deee <_svfiprintf_r+0x32>
 801dee0:	230c      	movs	r3, #12
 801dee2:	603b      	str	r3, [r7, #0]
 801dee4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801dee8:	b01d      	add	sp, #116	@ 0x74
 801deea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801deee:	2340      	movs	r3, #64	@ 0x40
 801def0:	616b      	str	r3, [r5, #20]
 801def2:	2300      	movs	r3, #0
 801def4:	9309      	str	r3, [sp, #36]	@ 0x24
 801def6:	2320      	movs	r3, #32
 801def8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801defc:	f8cd 800c 	str.w	r8, [sp, #12]
 801df00:	2330      	movs	r3, #48	@ 0x30
 801df02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801e0a0 <_svfiprintf_r+0x1e4>
 801df06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801df0a:	f04f 0901 	mov.w	r9, #1
 801df0e:	4623      	mov	r3, r4
 801df10:	469a      	mov	sl, r3
 801df12:	f813 2b01 	ldrb.w	r2, [r3], #1
 801df16:	b10a      	cbz	r2, 801df1c <_svfiprintf_r+0x60>
 801df18:	2a25      	cmp	r2, #37	@ 0x25
 801df1a:	d1f9      	bne.n	801df10 <_svfiprintf_r+0x54>
 801df1c:	ebba 0b04 	subs.w	fp, sl, r4
 801df20:	d00b      	beq.n	801df3a <_svfiprintf_r+0x7e>
 801df22:	465b      	mov	r3, fp
 801df24:	4622      	mov	r2, r4
 801df26:	4629      	mov	r1, r5
 801df28:	4638      	mov	r0, r7
 801df2a:	f7ff ff6b 	bl	801de04 <__ssputs_r>
 801df2e:	3001      	adds	r0, #1
 801df30:	f000 80a7 	beq.w	801e082 <_svfiprintf_r+0x1c6>
 801df34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801df36:	445a      	add	r2, fp
 801df38:	9209      	str	r2, [sp, #36]	@ 0x24
 801df3a:	f89a 3000 	ldrb.w	r3, [sl]
 801df3e:	2b00      	cmp	r3, #0
 801df40:	f000 809f 	beq.w	801e082 <_svfiprintf_r+0x1c6>
 801df44:	2300      	movs	r3, #0
 801df46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801df4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801df4e:	f10a 0a01 	add.w	sl, sl, #1
 801df52:	9304      	str	r3, [sp, #16]
 801df54:	9307      	str	r3, [sp, #28]
 801df56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801df5a:	931a      	str	r3, [sp, #104]	@ 0x68
 801df5c:	4654      	mov	r4, sl
 801df5e:	2205      	movs	r2, #5
 801df60:	f814 1b01 	ldrb.w	r1, [r4], #1
 801df64:	484e      	ldr	r0, [pc, #312]	@ (801e0a0 <_svfiprintf_r+0x1e4>)
 801df66:	f7e2 f96b 	bl	8000240 <memchr>
 801df6a:	9a04      	ldr	r2, [sp, #16]
 801df6c:	b9d8      	cbnz	r0, 801dfa6 <_svfiprintf_r+0xea>
 801df6e:	06d0      	lsls	r0, r2, #27
 801df70:	bf44      	itt	mi
 801df72:	2320      	movmi	r3, #32
 801df74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801df78:	0711      	lsls	r1, r2, #28
 801df7a:	bf44      	itt	mi
 801df7c:	232b      	movmi	r3, #43	@ 0x2b
 801df7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801df82:	f89a 3000 	ldrb.w	r3, [sl]
 801df86:	2b2a      	cmp	r3, #42	@ 0x2a
 801df88:	d015      	beq.n	801dfb6 <_svfiprintf_r+0xfa>
 801df8a:	9a07      	ldr	r2, [sp, #28]
 801df8c:	4654      	mov	r4, sl
 801df8e:	2000      	movs	r0, #0
 801df90:	f04f 0c0a 	mov.w	ip, #10
 801df94:	4621      	mov	r1, r4
 801df96:	f811 3b01 	ldrb.w	r3, [r1], #1
 801df9a:	3b30      	subs	r3, #48	@ 0x30
 801df9c:	2b09      	cmp	r3, #9
 801df9e:	d94b      	bls.n	801e038 <_svfiprintf_r+0x17c>
 801dfa0:	b1b0      	cbz	r0, 801dfd0 <_svfiprintf_r+0x114>
 801dfa2:	9207      	str	r2, [sp, #28]
 801dfa4:	e014      	b.n	801dfd0 <_svfiprintf_r+0x114>
 801dfa6:	eba0 0308 	sub.w	r3, r0, r8
 801dfaa:	fa09 f303 	lsl.w	r3, r9, r3
 801dfae:	4313      	orrs	r3, r2
 801dfb0:	9304      	str	r3, [sp, #16]
 801dfb2:	46a2      	mov	sl, r4
 801dfb4:	e7d2      	b.n	801df5c <_svfiprintf_r+0xa0>
 801dfb6:	9b03      	ldr	r3, [sp, #12]
 801dfb8:	1d19      	adds	r1, r3, #4
 801dfba:	681b      	ldr	r3, [r3, #0]
 801dfbc:	9103      	str	r1, [sp, #12]
 801dfbe:	2b00      	cmp	r3, #0
 801dfc0:	bfbb      	ittet	lt
 801dfc2:	425b      	neglt	r3, r3
 801dfc4:	f042 0202 	orrlt.w	r2, r2, #2
 801dfc8:	9307      	strge	r3, [sp, #28]
 801dfca:	9307      	strlt	r3, [sp, #28]
 801dfcc:	bfb8      	it	lt
 801dfce:	9204      	strlt	r2, [sp, #16]
 801dfd0:	7823      	ldrb	r3, [r4, #0]
 801dfd2:	2b2e      	cmp	r3, #46	@ 0x2e
 801dfd4:	d10a      	bne.n	801dfec <_svfiprintf_r+0x130>
 801dfd6:	7863      	ldrb	r3, [r4, #1]
 801dfd8:	2b2a      	cmp	r3, #42	@ 0x2a
 801dfda:	d132      	bne.n	801e042 <_svfiprintf_r+0x186>
 801dfdc:	9b03      	ldr	r3, [sp, #12]
 801dfde:	1d1a      	adds	r2, r3, #4
 801dfe0:	681b      	ldr	r3, [r3, #0]
 801dfe2:	9203      	str	r2, [sp, #12]
 801dfe4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801dfe8:	3402      	adds	r4, #2
 801dfea:	9305      	str	r3, [sp, #20]
 801dfec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801e0b0 <_svfiprintf_r+0x1f4>
 801dff0:	7821      	ldrb	r1, [r4, #0]
 801dff2:	2203      	movs	r2, #3
 801dff4:	4650      	mov	r0, sl
 801dff6:	f7e2 f923 	bl	8000240 <memchr>
 801dffa:	b138      	cbz	r0, 801e00c <_svfiprintf_r+0x150>
 801dffc:	9b04      	ldr	r3, [sp, #16]
 801dffe:	eba0 000a 	sub.w	r0, r0, sl
 801e002:	2240      	movs	r2, #64	@ 0x40
 801e004:	4082      	lsls	r2, r0
 801e006:	4313      	orrs	r3, r2
 801e008:	3401      	adds	r4, #1
 801e00a:	9304      	str	r3, [sp, #16]
 801e00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e010:	4824      	ldr	r0, [pc, #144]	@ (801e0a4 <_svfiprintf_r+0x1e8>)
 801e012:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e016:	2206      	movs	r2, #6
 801e018:	f7e2 f912 	bl	8000240 <memchr>
 801e01c:	2800      	cmp	r0, #0
 801e01e:	d036      	beq.n	801e08e <_svfiprintf_r+0x1d2>
 801e020:	4b21      	ldr	r3, [pc, #132]	@ (801e0a8 <_svfiprintf_r+0x1ec>)
 801e022:	bb1b      	cbnz	r3, 801e06c <_svfiprintf_r+0x1b0>
 801e024:	9b03      	ldr	r3, [sp, #12]
 801e026:	3307      	adds	r3, #7
 801e028:	f023 0307 	bic.w	r3, r3, #7
 801e02c:	3308      	adds	r3, #8
 801e02e:	9303      	str	r3, [sp, #12]
 801e030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e032:	4433      	add	r3, r6
 801e034:	9309      	str	r3, [sp, #36]	@ 0x24
 801e036:	e76a      	b.n	801df0e <_svfiprintf_r+0x52>
 801e038:	fb0c 3202 	mla	r2, ip, r2, r3
 801e03c:	460c      	mov	r4, r1
 801e03e:	2001      	movs	r0, #1
 801e040:	e7a8      	b.n	801df94 <_svfiprintf_r+0xd8>
 801e042:	2300      	movs	r3, #0
 801e044:	3401      	adds	r4, #1
 801e046:	9305      	str	r3, [sp, #20]
 801e048:	4619      	mov	r1, r3
 801e04a:	f04f 0c0a 	mov.w	ip, #10
 801e04e:	4620      	mov	r0, r4
 801e050:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e054:	3a30      	subs	r2, #48	@ 0x30
 801e056:	2a09      	cmp	r2, #9
 801e058:	d903      	bls.n	801e062 <_svfiprintf_r+0x1a6>
 801e05a:	2b00      	cmp	r3, #0
 801e05c:	d0c6      	beq.n	801dfec <_svfiprintf_r+0x130>
 801e05e:	9105      	str	r1, [sp, #20]
 801e060:	e7c4      	b.n	801dfec <_svfiprintf_r+0x130>
 801e062:	fb0c 2101 	mla	r1, ip, r1, r2
 801e066:	4604      	mov	r4, r0
 801e068:	2301      	movs	r3, #1
 801e06a:	e7f0      	b.n	801e04e <_svfiprintf_r+0x192>
 801e06c:	ab03      	add	r3, sp, #12
 801e06e:	9300      	str	r3, [sp, #0]
 801e070:	462a      	mov	r2, r5
 801e072:	4b0e      	ldr	r3, [pc, #56]	@ (801e0ac <_svfiprintf_r+0x1f0>)
 801e074:	a904      	add	r1, sp, #16
 801e076:	4638      	mov	r0, r7
 801e078:	f3af 8000 	nop.w
 801e07c:	1c42      	adds	r2, r0, #1
 801e07e:	4606      	mov	r6, r0
 801e080:	d1d6      	bne.n	801e030 <_svfiprintf_r+0x174>
 801e082:	89ab      	ldrh	r3, [r5, #12]
 801e084:	065b      	lsls	r3, r3, #25
 801e086:	f53f af2d 	bmi.w	801dee4 <_svfiprintf_r+0x28>
 801e08a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e08c:	e72c      	b.n	801dee8 <_svfiprintf_r+0x2c>
 801e08e:	ab03      	add	r3, sp, #12
 801e090:	9300      	str	r3, [sp, #0]
 801e092:	462a      	mov	r2, r5
 801e094:	4b05      	ldr	r3, [pc, #20]	@ (801e0ac <_svfiprintf_r+0x1f0>)
 801e096:	a904      	add	r1, sp, #16
 801e098:	4638      	mov	r0, r7
 801e09a:	f000 f9bb 	bl	801e414 <_printf_i>
 801e09e:	e7ed      	b.n	801e07c <_svfiprintf_r+0x1c0>
 801e0a0:	08022080 	.word	0x08022080
 801e0a4:	0802208a 	.word	0x0802208a
 801e0a8:	00000000 	.word	0x00000000
 801e0ac:	0801de05 	.word	0x0801de05
 801e0b0:	08022086 	.word	0x08022086

0801e0b4 <__sfputc_r>:
 801e0b4:	6893      	ldr	r3, [r2, #8]
 801e0b6:	3b01      	subs	r3, #1
 801e0b8:	2b00      	cmp	r3, #0
 801e0ba:	b410      	push	{r4}
 801e0bc:	6093      	str	r3, [r2, #8]
 801e0be:	da08      	bge.n	801e0d2 <__sfputc_r+0x1e>
 801e0c0:	6994      	ldr	r4, [r2, #24]
 801e0c2:	42a3      	cmp	r3, r4
 801e0c4:	db01      	blt.n	801e0ca <__sfputc_r+0x16>
 801e0c6:	290a      	cmp	r1, #10
 801e0c8:	d103      	bne.n	801e0d2 <__sfputc_r+0x1e>
 801e0ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e0ce:	f7ff bc75 	b.w	801d9bc <__swbuf_r>
 801e0d2:	6813      	ldr	r3, [r2, #0]
 801e0d4:	1c58      	adds	r0, r3, #1
 801e0d6:	6010      	str	r0, [r2, #0]
 801e0d8:	7019      	strb	r1, [r3, #0]
 801e0da:	4608      	mov	r0, r1
 801e0dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e0e0:	4770      	bx	lr

0801e0e2 <__sfputs_r>:
 801e0e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0e4:	4606      	mov	r6, r0
 801e0e6:	460f      	mov	r7, r1
 801e0e8:	4614      	mov	r4, r2
 801e0ea:	18d5      	adds	r5, r2, r3
 801e0ec:	42ac      	cmp	r4, r5
 801e0ee:	d101      	bne.n	801e0f4 <__sfputs_r+0x12>
 801e0f0:	2000      	movs	r0, #0
 801e0f2:	e007      	b.n	801e104 <__sfputs_r+0x22>
 801e0f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e0f8:	463a      	mov	r2, r7
 801e0fa:	4630      	mov	r0, r6
 801e0fc:	f7ff ffda 	bl	801e0b4 <__sfputc_r>
 801e100:	1c43      	adds	r3, r0, #1
 801e102:	d1f3      	bne.n	801e0ec <__sfputs_r+0xa>
 801e104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e108 <_vfiprintf_r>:
 801e108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e10c:	460d      	mov	r5, r1
 801e10e:	b09d      	sub	sp, #116	@ 0x74
 801e110:	4614      	mov	r4, r2
 801e112:	4698      	mov	r8, r3
 801e114:	4606      	mov	r6, r0
 801e116:	b118      	cbz	r0, 801e120 <_vfiprintf_r+0x18>
 801e118:	6a03      	ldr	r3, [r0, #32]
 801e11a:	b90b      	cbnz	r3, 801e120 <_vfiprintf_r+0x18>
 801e11c:	f7ff fafc 	bl	801d718 <__sinit>
 801e120:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e122:	07d9      	lsls	r1, r3, #31
 801e124:	d405      	bmi.n	801e132 <_vfiprintf_r+0x2a>
 801e126:	89ab      	ldrh	r3, [r5, #12]
 801e128:	059a      	lsls	r2, r3, #22
 801e12a:	d402      	bmi.n	801e132 <_vfiprintf_r+0x2a>
 801e12c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e12e:	f7ff fdd4 	bl	801dcda <__retarget_lock_acquire_recursive>
 801e132:	89ab      	ldrh	r3, [r5, #12]
 801e134:	071b      	lsls	r3, r3, #28
 801e136:	d501      	bpl.n	801e13c <_vfiprintf_r+0x34>
 801e138:	692b      	ldr	r3, [r5, #16]
 801e13a:	b99b      	cbnz	r3, 801e164 <_vfiprintf_r+0x5c>
 801e13c:	4629      	mov	r1, r5
 801e13e:	4630      	mov	r0, r6
 801e140:	f7ff fc7a 	bl	801da38 <__swsetup_r>
 801e144:	b170      	cbz	r0, 801e164 <_vfiprintf_r+0x5c>
 801e146:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e148:	07dc      	lsls	r4, r3, #31
 801e14a:	d504      	bpl.n	801e156 <_vfiprintf_r+0x4e>
 801e14c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e150:	b01d      	add	sp, #116	@ 0x74
 801e152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e156:	89ab      	ldrh	r3, [r5, #12]
 801e158:	0598      	lsls	r0, r3, #22
 801e15a:	d4f7      	bmi.n	801e14c <_vfiprintf_r+0x44>
 801e15c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e15e:	f7ff fdbd 	bl	801dcdc <__retarget_lock_release_recursive>
 801e162:	e7f3      	b.n	801e14c <_vfiprintf_r+0x44>
 801e164:	2300      	movs	r3, #0
 801e166:	9309      	str	r3, [sp, #36]	@ 0x24
 801e168:	2320      	movs	r3, #32
 801e16a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e16e:	f8cd 800c 	str.w	r8, [sp, #12]
 801e172:	2330      	movs	r3, #48	@ 0x30
 801e174:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e324 <_vfiprintf_r+0x21c>
 801e178:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e17c:	f04f 0901 	mov.w	r9, #1
 801e180:	4623      	mov	r3, r4
 801e182:	469a      	mov	sl, r3
 801e184:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e188:	b10a      	cbz	r2, 801e18e <_vfiprintf_r+0x86>
 801e18a:	2a25      	cmp	r2, #37	@ 0x25
 801e18c:	d1f9      	bne.n	801e182 <_vfiprintf_r+0x7a>
 801e18e:	ebba 0b04 	subs.w	fp, sl, r4
 801e192:	d00b      	beq.n	801e1ac <_vfiprintf_r+0xa4>
 801e194:	465b      	mov	r3, fp
 801e196:	4622      	mov	r2, r4
 801e198:	4629      	mov	r1, r5
 801e19a:	4630      	mov	r0, r6
 801e19c:	f7ff ffa1 	bl	801e0e2 <__sfputs_r>
 801e1a0:	3001      	adds	r0, #1
 801e1a2:	f000 80a7 	beq.w	801e2f4 <_vfiprintf_r+0x1ec>
 801e1a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e1a8:	445a      	add	r2, fp
 801e1aa:	9209      	str	r2, [sp, #36]	@ 0x24
 801e1ac:	f89a 3000 	ldrb.w	r3, [sl]
 801e1b0:	2b00      	cmp	r3, #0
 801e1b2:	f000 809f 	beq.w	801e2f4 <_vfiprintf_r+0x1ec>
 801e1b6:	2300      	movs	r3, #0
 801e1b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e1bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e1c0:	f10a 0a01 	add.w	sl, sl, #1
 801e1c4:	9304      	str	r3, [sp, #16]
 801e1c6:	9307      	str	r3, [sp, #28]
 801e1c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e1cc:	931a      	str	r3, [sp, #104]	@ 0x68
 801e1ce:	4654      	mov	r4, sl
 801e1d0:	2205      	movs	r2, #5
 801e1d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e1d6:	4853      	ldr	r0, [pc, #332]	@ (801e324 <_vfiprintf_r+0x21c>)
 801e1d8:	f7e2 f832 	bl	8000240 <memchr>
 801e1dc:	9a04      	ldr	r2, [sp, #16]
 801e1de:	b9d8      	cbnz	r0, 801e218 <_vfiprintf_r+0x110>
 801e1e0:	06d1      	lsls	r1, r2, #27
 801e1e2:	bf44      	itt	mi
 801e1e4:	2320      	movmi	r3, #32
 801e1e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e1ea:	0713      	lsls	r3, r2, #28
 801e1ec:	bf44      	itt	mi
 801e1ee:	232b      	movmi	r3, #43	@ 0x2b
 801e1f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e1f4:	f89a 3000 	ldrb.w	r3, [sl]
 801e1f8:	2b2a      	cmp	r3, #42	@ 0x2a
 801e1fa:	d015      	beq.n	801e228 <_vfiprintf_r+0x120>
 801e1fc:	9a07      	ldr	r2, [sp, #28]
 801e1fe:	4654      	mov	r4, sl
 801e200:	2000      	movs	r0, #0
 801e202:	f04f 0c0a 	mov.w	ip, #10
 801e206:	4621      	mov	r1, r4
 801e208:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e20c:	3b30      	subs	r3, #48	@ 0x30
 801e20e:	2b09      	cmp	r3, #9
 801e210:	d94b      	bls.n	801e2aa <_vfiprintf_r+0x1a2>
 801e212:	b1b0      	cbz	r0, 801e242 <_vfiprintf_r+0x13a>
 801e214:	9207      	str	r2, [sp, #28]
 801e216:	e014      	b.n	801e242 <_vfiprintf_r+0x13a>
 801e218:	eba0 0308 	sub.w	r3, r0, r8
 801e21c:	fa09 f303 	lsl.w	r3, r9, r3
 801e220:	4313      	orrs	r3, r2
 801e222:	9304      	str	r3, [sp, #16]
 801e224:	46a2      	mov	sl, r4
 801e226:	e7d2      	b.n	801e1ce <_vfiprintf_r+0xc6>
 801e228:	9b03      	ldr	r3, [sp, #12]
 801e22a:	1d19      	adds	r1, r3, #4
 801e22c:	681b      	ldr	r3, [r3, #0]
 801e22e:	9103      	str	r1, [sp, #12]
 801e230:	2b00      	cmp	r3, #0
 801e232:	bfbb      	ittet	lt
 801e234:	425b      	neglt	r3, r3
 801e236:	f042 0202 	orrlt.w	r2, r2, #2
 801e23a:	9307      	strge	r3, [sp, #28]
 801e23c:	9307      	strlt	r3, [sp, #28]
 801e23e:	bfb8      	it	lt
 801e240:	9204      	strlt	r2, [sp, #16]
 801e242:	7823      	ldrb	r3, [r4, #0]
 801e244:	2b2e      	cmp	r3, #46	@ 0x2e
 801e246:	d10a      	bne.n	801e25e <_vfiprintf_r+0x156>
 801e248:	7863      	ldrb	r3, [r4, #1]
 801e24a:	2b2a      	cmp	r3, #42	@ 0x2a
 801e24c:	d132      	bne.n	801e2b4 <_vfiprintf_r+0x1ac>
 801e24e:	9b03      	ldr	r3, [sp, #12]
 801e250:	1d1a      	adds	r2, r3, #4
 801e252:	681b      	ldr	r3, [r3, #0]
 801e254:	9203      	str	r2, [sp, #12]
 801e256:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e25a:	3402      	adds	r4, #2
 801e25c:	9305      	str	r3, [sp, #20]
 801e25e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801e334 <_vfiprintf_r+0x22c>
 801e262:	7821      	ldrb	r1, [r4, #0]
 801e264:	2203      	movs	r2, #3
 801e266:	4650      	mov	r0, sl
 801e268:	f7e1 ffea 	bl	8000240 <memchr>
 801e26c:	b138      	cbz	r0, 801e27e <_vfiprintf_r+0x176>
 801e26e:	9b04      	ldr	r3, [sp, #16]
 801e270:	eba0 000a 	sub.w	r0, r0, sl
 801e274:	2240      	movs	r2, #64	@ 0x40
 801e276:	4082      	lsls	r2, r0
 801e278:	4313      	orrs	r3, r2
 801e27a:	3401      	adds	r4, #1
 801e27c:	9304      	str	r3, [sp, #16]
 801e27e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e282:	4829      	ldr	r0, [pc, #164]	@ (801e328 <_vfiprintf_r+0x220>)
 801e284:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e288:	2206      	movs	r2, #6
 801e28a:	f7e1 ffd9 	bl	8000240 <memchr>
 801e28e:	2800      	cmp	r0, #0
 801e290:	d03f      	beq.n	801e312 <_vfiprintf_r+0x20a>
 801e292:	4b26      	ldr	r3, [pc, #152]	@ (801e32c <_vfiprintf_r+0x224>)
 801e294:	bb1b      	cbnz	r3, 801e2de <_vfiprintf_r+0x1d6>
 801e296:	9b03      	ldr	r3, [sp, #12]
 801e298:	3307      	adds	r3, #7
 801e29a:	f023 0307 	bic.w	r3, r3, #7
 801e29e:	3308      	adds	r3, #8
 801e2a0:	9303      	str	r3, [sp, #12]
 801e2a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e2a4:	443b      	add	r3, r7
 801e2a6:	9309      	str	r3, [sp, #36]	@ 0x24
 801e2a8:	e76a      	b.n	801e180 <_vfiprintf_r+0x78>
 801e2aa:	fb0c 3202 	mla	r2, ip, r2, r3
 801e2ae:	460c      	mov	r4, r1
 801e2b0:	2001      	movs	r0, #1
 801e2b2:	e7a8      	b.n	801e206 <_vfiprintf_r+0xfe>
 801e2b4:	2300      	movs	r3, #0
 801e2b6:	3401      	adds	r4, #1
 801e2b8:	9305      	str	r3, [sp, #20]
 801e2ba:	4619      	mov	r1, r3
 801e2bc:	f04f 0c0a 	mov.w	ip, #10
 801e2c0:	4620      	mov	r0, r4
 801e2c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e2c6:	3a30      	subs	r2, #48	@ 0x30
 801e2c8:	2a09      	cmp	r2, #9
 801e2ca:	d903      	bls.n	801e2d4 <_vfiprintf_r+0x1cc>
 801e2cc:	2b00      	cmp	r3, #0
 801e2ce:	d0c6      	beq.n	801e25e <_vfiprintf_r+0x156>
 801e2d0:	9105      	str	r1, [sp, #20]
 801e2d2:	e7c4      	b.n	801e25e <_vfiprintf_r+0x156>
 801e2d4:	fb0c 2101 	mla	r1, ip, r1, r2
 801e2d8:	4604      	mov	r4, r0
 801e2da:	2301      	movs	r3, #1
 801e2dc:	e7f0      	b.n	801e2c0 <_vfiprintf_r+0x1b8>
 801e2de:	ab03      	add	r3, sp, #12
 801e2e0:	9300      	str	r3, [sp, #0]
 801e2e2:	462a      	mov	r2, r5
 801e2e4:	4b12      	ldr	r3, [pc, #72]	@ (801e330 <_vfiprintf_r+0x228>)
 801e2e6:	a904      	add	r1, sp, #16
 801e2e8:	4630      	mov	r0, r6
 801e2ea:	f3af 8000 	nop.w
 801e2ee:	4607      	mov	r7, r0
 801e2f0:	1c78      	adds	r0, r7, #1
 801e2f2:	d1d6      	bne.n	801e2a2 <_vfiprintf_r+0x19a>
 801e2f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e2f6:	07d9      	lsls	r1, r3, #31
 801e2f8:	d405      	bmi.n	801e306 <_vfiprintf_r+0x1fe>
 801e2fa:	89ab      	ldrh	r3, [r5, #12]
 801e2fc:	059a      	lsls	r2, r3, #22
 801e2fe:	d402      	bmi.n	801e306 <_vfiprintf_r+0x1fe>
 801e300:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e302:	f7ff fceb 	bl	801dcdc <__retarget_lock_release_recursive>
 801e306:	89ab      	ldrh	r3, [r5, #12]
 801e308:	065b      	lsls	r3, r3, #25
 801e30a:	f53f af1f 	bmi.w	801e14c <_vfiprintf_r+0x44>
 801e30e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e310:	e71e      	b.n	801e150 <_vfiprintf_r+0x48>
 801e312:	ab03      	add	r3, sp, #12
 801e314:	9300      	str	r3, [sp, #0]
 801e316:	462a      	mov	r2, r5
 801e318:	4b05      	ldr	r3, [pc, #20]	@ (801e330 <_vfiprintf_r+0x228>)
 801e31a:	a904      	add	r1, sp, #16
 801e31c:	4630      	mov	r0, r6
 801e31e:	f000 f879 	bl	801e414 <_printf_i>
 801e322:	e7e4      	b.n	801e2ee <_vfiprintf_r+0x1e6>
 801e324:	08022080 	.word	0x08022080
 801e328:	0802208a 	.word	0x0802208a
 801e32c:	00000000 	.word	0x00000000
 801e330:	0801e0e3 	.word	0x0801e0e3
 801e334:	08022086 	.word	0x08022086

0801e338 <_printf_common>:
 801e338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e33c:	4616      	mov	r6, r2
 801e33e:	4698      	mov	r8, r3
 801e340:	688a      	ldr	r2, [r1, #8]
 801e342:	690b      	ldr	r3, [r1, #16]
 801e344:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e348:	4293      	cmp	r3, r2
 801e34a:	bfb8      	it	lt
 801e34c:	4613      	movlt	r3, r2
 801e34e:	6033      	str	r3, [r6, #0]
 801e350:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801e354:	4607      	mov	r7, r0
 801e356:	460c      	mov	r4, r1
 801e358:	b10a      	cbz	r2, 801e35e <_printf_common+0x26>
 801e35a:	3301      	adds	r3, #1
 801e35c:	6033      	str	r3, [r6, #0]
 801e35e:	6823      	ldr	r3, [r4, #0]
 801e360:	0699      	lsls	r1, r3, #26
 801e362:	bf42      	ittt	mi
 801e364:	6833      	ldrmi	r3, [r6, #0]
 801e366:	3302      	addmi	r3, #2
 801e368:	6033      	strmi	r3, [r6, #0]
 801e36a:	6825      	ldr	r5, [r4, #0]
 801e36c:	f015 0506 	ands.w	r5, r5, #6
 801e370:	d106      	bne.n	801e380 <_printf_common+0x48>
 801e372:	f104 0a19 	add.w	sl, r4, #25
 801e376:	68e3      	ldr	r3, [r4, #12]
 801e378:	6832      	ldr	r2, [r6, #0]
 801e37a:	1a9b      	subs	r3, r3, r2
 801e37c:	42ab      	cmp	r3, r5
 801e37e:	dc26      	bgt.n	801e3ce <_printf_common+0x96>
 801e380:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801e384:	6822      	ldr	r2, [r4, #0]
 801e386:	3b00      	subs	r3, #0
 801e388:	bf18      	it	ne
 801e38a:	2301      	movne	r3, #1
 801e38c:	0692      	lsls	r2, r2, #26
 801e38e:	d42b      	bmi.n	801e3e8 <_printf_common+0xb0>
 801e390:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801e394:	4641      	mov	r1, r8
 801e396:	4638      	mov	r0, r7
 801e398:	47c8      	blx	r9
 801e39a:	3001      	adds	r0, #1
 801e39c:	d01e      	beq.n	801e3dc <_printf_common+0xa4>
 801e39e:	6823      	ldr	r3, [r4, #0]
 801e3a0:	6922      	ldr	r2, [r4, #16]
 801e3a2:	f003 0306 	and.w	r3, r3, #6
 801e3a6:	2b04      	cmp	r3, #4
 801e3a8:	bf02      	ittt	eq
 801e3aa:	68e5      	ldreq	r5, [r4, #12]
 801e3ac:	6833      	ldreq	r3, [r6, #0]
 801e3ae:	1aed      	subeq	r5, r5, r3
 801e3b0:	68a3      	ldr	r3, [r4, #8]
 801e3b2:	bf0c      	ite	eq
 801e3b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e3b8:	2500      	movne	r5, #0
 801e3ba:	4293      	cmp	r3, r2
 801e3bc:	bfc4      	itt	gt
 801e3be:	1a9b      	subgt	r3, r3, r2
 801e3c0:	18ed      	addgt	r5, r5, r3
 801e3c2:	2600      	movs	r6, #0
 801e3c4:	341a      	adds	r4, #26
 801e3c6:	42b5      	cmp	r5, r6
 801e3c8:	d11a      	bne.n	801e400 <_printf_common+0xc8>
 801e3ca:	2000      	movs	r0, #0
 801e3cc:	e008      	b.n	801e3e0 <_printf_common+0xa8>
 801e3ce:	2301      	movs	r3, #1
 801e3d0:	4652      	mov	r2, sl
 801e3d2:	4641      	mov	r1, r8
 801e3d4:	4638      	mov	r0, r7
 801e3d6:	47c8      	blx	r9
 801e3d8:	3001      	adds	r0, #1
 801e3da:	d103      	bne.n	801e3e4 <_printf_common+0xac>
 801e3dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e3e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e3e4:	3501      	adds	r5, #1
 801e3e6:	e7c6      	b.n	801e376 <_printf_common+0x3e>
 801e3e8:	18e1      	adds	r1, r4, r3
 801e3ea:	1c5a      	adds	r2, r3, #1
 801e3ec:	2030      	movs	r0, #48	@ 0x30
 801e3ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801e3f2:	4422      	add	r2, r4
 801e3f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801e3f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801e3fc:	3302      	adds	r3, #2
 801e3fe:	e7c7      	b.n	801e390 <_printf_common+0x58>
 801e400:	2301      	movs	r3, #1
 801e402:	4622      	mov	r2, r4
 801e404:	4641      	mov	r1, r8
 801e406:	4638      	mov	r0, r7
 801e408:	47c8      	blx	r9
 801e40a:	3001      	adds	r0, #1
 801e40c:	d0e6      	beq.n	801e3dc <_printf_common+0xa4>
 801e40e:	3601      	adds	r6, #1
 801e410:	e7d9      	b.n	801e3c6 <_printf_common+0x8e>
	...

0801e414 <_printf_i>:
 801e414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e418:	7e0f      	ldrb	r7, [r1, #24]
 801e41a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e41c:	2f78      	cmp	r7, #120	@ 0x78
 801e41e:	4691      	mov	r9, r2
 801e420:	4680      	mov	r8, r0
 801e422:	460c      	mov	r4, r1
 801e424:	469a      	mov	sl, r3
 801e426:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801e42a:	d807      	bhi.n	801e43c <_printf_i+0x28>
 801e42c:	2f62      	cmp	r7, #98	@ 0x62
 801e42e:	d80a      	bhi.n	801e446 <_printf_i+0x32>
 801e430:	2f00      	cmp	r7, #0
 801e432:	f000 80d2 	beq.w	801e5da <_printf_i+0x1c6>
 801e436:	2f58      	cmp	r7, #88	@ 0x58
 801e438:	f000 80b9 	beq.w	801e5ae <_printf_i+0x19a>
 801e43c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e440:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801e444:	e03a      	b.n	801e4bc <_printf_i+0xa8>
 801e446:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801e44a:	2b15      	cmp	r3, #21
 801e44c:	d8f6      	bhi.n	801e43c <_printf_i+0x28>
 801e44e:	a101      	add	r1, pc, #4	@ (adr r1, 801e454 <_printf_i+0x40>)
 801e450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e454:	0801e4ad 	.word	0x0801e4ad
 801e458:	0801e4c1 	.word	0x0801e4c1
 801e45c:	0801e43d 	.word	0x0801e43d
 801e460:	0801e43d 	.word	0x0801e43d
 801e464:	0801e43d 	.word	0x0801e43d
 801e468:	0801e43d 	.word	0x0801e43d
 801e46c:	0801e4c1 	.word	0x0801e4c1
 801e470:	0801e43d 	.word	0x0801e43d
 801e474:	0801e43d 	.word	0x0801e43d
 801e478:	0801e43d 	.word	0x0801e43d
 801e47c:	0801e43d 	.word	0x0801e43d
 801e480:	0801e5c1 	.word	0x0801e5c1
 801e484:	0801e4eb 	.word	0x0801e4eb
 801e488:	0801e57b 	.word	0x0801e57b
 801e48c:	0801e43d 	.word	0x0801e43d
 801e490:	0801e43d 	.word	0x0801e43d
 801e494:	0801e5e3 	.word	0x0801e5e3
 801e498:	0801e43d 	.word	0x0801e43d
 801e49c:	0801e4eb 	.word	0x0801e4eb
 801e4a0:	0801e43d 	.word	0x0801e43d
 801e4a4:	0801e43d 	.word	0x0801e43d
 801e4a8:	0801e583 	.word	0x0801e583
 801e4ac:	6833      	ldr	r3, [r6, #0]
 801e4ae:	1d1a      	adds	r2, r3, #4
 801e4b0:	681b      	ldr	r3, [r3, #0]
 801e4b2:	6032      	str	r2, [r6, #0]
 801e4b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e4b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801e4bc:	2301      	movs	r3, #1
 801e4be:	e09d      	b.n	801e5fc <_printf_i+0x1e8>
 801e4c0:	6833      	ldr	r3, [r6, #0]
 801e4c2:	6820      	ldr	r0, [r4, #0]
 801e4c4:	1d19      	adds	r1, r3, #4
 801e4c6:	6031      	str	r1, [r6, #0]
 801e4c8:	0606      	lsls	r6, r0, #24
 801e4ca:	d501      	bpl.n	801e4d0 <_printf_i+0xbc>
 801e4cc:	681d      	ldr	r5, [r3, #0]
 801e4ce:	e003      	b.n	801e4d8 <_printf_i+0xc4>
 801e4d0:	0645      	lsls	r5, r0, #25
 801e4d2:	d5fb      	bpl.n	801e4cc <_printf_i+0xb8>
 801e4d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e4d8:	2d00      	cmp	r5, #0
 801e4da:	da03      	bge.n	801e4e4 <_printf_i+0xd0>
 801e4dc:	232d      	movs	r3, #45	@ 0x2d
 801e4de:	426d      	negs	r5, r5
 801e4e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e4e4:	4859      	ldr	r0, [pc, #356]	@ (801e64c <_printf_i+0x238>)
 801e4e6:	230a      	movs	r3, #10
 801e4e8:	e011      	b.n	801e50e <_printf_i+0xfa>
 801e4ea:	6821      	ldr	r1, [r4, #0]
 801e4ec:	6833      	ldr	r3, [r6, #0]
 801e4ee:	0608      	lsls	r0, r1, #24
 801e4f0:	f853 5b04 	ldr.w	r5, [r3], #4
 801e4f4:	d402      	bmi.n	801e4fc <_printf_i+0xe8>
 801e4f6:	0649      	lsls	r1, r1, #25
 801e4f8:	bf48      	it	mi
 801e4fa:	b2ad      	uxthmi	r5, r5
 801e4fc:	2f6f      	cmp	r7, #111	@ 0x6f
 801e4fe:	4853      	ldr	r0, [pc, #332]	@ (801e64c <_printf_i+0x238>)
 801e500:	6033      	str	r3, [r6, #0]
 801e502:	bf14      	ite	ne
 801e504:	230a      	movne	r3, #10
 801e506:	2308      	moveq	r3, #8
 801e508:	2100      	movs	r1, #0
 801e50a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801e50e:	6866      	ldr	r6, [r4, #4]
 801e510:	60a6      	str	r6, [r4, #8]
 801e512:	2e00      	cmp	r6, #0
 801e514:	bfa2      	ittt	ge
 801e516:	6821      	ldrge	r1, [r4, #0]
 801e518:	f021 0104 	bicge.w	r1, r1, #4
 801e51c:	6021      	strge	r1, [r4, #0]
 801e51e:	b90d      	cbnz	r5, 801e524 <_printf_i+0x110>
 801e520:	2e00      	cmp	r6, #0
 801e522:	d04b      	beq.n	801e5bc <_printf_i+0x1a8>
 801e524:	4616      	mov	r6, r2
 801e526:	fbb5 f1f3 	udiv	r1, r5, r3
 801e52a:	fb03 5711 	mls	r7, r3, r1, r5
 801e52e:	5dc7      	ldrb	r7, [r0, r7]
 801e530:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e534:	462f      	mov	r7, r5
 801e536:	42bb      	cmp	r3, r7
 801e538:	460d      	mov	r5, r1
 801e53a:	d9f4      	bls.n	801e526 <_printf_i+0x112>
 801e53c:	2b08      	cmp	r3, #8
 801e53e:	d10b      	bne.n	801e558 <_printf_i+0x144>
 801e540:	6823      	ldr	r3, [r4, #0]
 801e542:	07df      	lsls	r7, r3, #31
 801e544:	d508      	bpl.n	801e558 <_printf_i+0x144>
 801e546:	6923      	ldr	r3, [r4, #16]
 801e548:	6861      	ldr	r1, [r4, #4]
 801e54a:	4299      	cmp	r1, r3
 801e54c:	bfde      	ittt	le
 801e54e:	2330      	movle	r3, #48	@ 0x30
 801e550:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e554:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801e558:	1b92      	subs	r2, r2, r6
 801e55a:	6122      	str	r2, [r4, #16]
 801e55c:	f8cd a000 	str.w	sl, [sp]
 801e560:	464b      	mov	r3, r9
 801e562:	aa03      	add	r2, sp, #12
 801e564:	4621      	mov	r1, r4
 801e566:	4640      	mov	r0, r8
 801e568:	f7ff fee6 	bl	801e338 <_printf_common>
 801e56c:	3001      	adds	r0, #1
 801e56e:	d14a      	bne.n	801e606 <_printf_i+0x1f2>
 801e570:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e574:	b004      	add	sp, #16
 801e576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e57a:	6823      	ldr	r3, [r4, #0]
 801e57c:	f043 0320 	orr.w	r3, r3, #32
 801e580:	6023      	str	r3, [r4, #0]
 801e582:	4833      	ldr	r0, [pc, #204]	@ (801e650 <_printf_i+0x23c>)
 801e584:	2778      	movs	r7, #120	@ 0x78
 801e586:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801e58a:	6823      	ldr	r3, [r4, #0]
 801e58c:	6831      	ldr	r1, [r6, #0]
 801e58e:	061f      	lsls	r7, r3, #24
 801e590:	f851 5b04 	ldr.w	r5, [r1], #4
 801e594:	d402      	bmi.n	801e59c <_printf_i+0x188>
 801e596:	065f      	lsls	r7, r3, #25
 801e598:	bf48      	it	mi
 801e59a:	b2ad      	uxthmi	r5, r5
 801e59c:	6031      	str	r1, [r6, #0]
 801e59e:	07d9      	lsls	r1, r3, #31
 801e5a0:	bf44      	itt	mi
 801e5a2:	f043 0320 	orrmi.w	r3, r3, #32
 801e5a6:	6023      	strmi	r3, [r4, #0]
 801e5a8:	b11d      	cbz	r5, 801e5b2 <_printf_i+0x19e>
 801e5aa:	2310      	movs	r3, #16
 801e5ac:	e7ac      	b.n	801e508 <_printf_i+0xf4>
 801e5ae:	4827      	ldr	r0, [pc, #156]	@ (801e64c <_printf_i+0x238>)
 801e5b0:	e7e9      	b.n	801e586 <_printf_i+0x172>
 801e5b2:	6823      	ldr	r3, [r4, #0]
 801e5b4:	f023 0320 	bic.w	r3, r3, #32
 801e5b8:	6023      	str	r3, [r4, #0]
 801e5ba:	e7f6      	b.n	801e5aa <_printf_i+0x196>
 801e5bc:	4616      	mov	r6, r2
 801e5be:	e7bd      	b.n	801e53c <_printf_i+0x128>
 801e5c0:	6833      	ldr	r3, [r6, #0]
 801e5c2:	6825      	ldr	r5, [r4, #0]
 801e5c4:	6961      	ldr	r1, [r4, #20]
 801e5c6:	1d18      	adds	r0, r3, #4
 801e5c8:	6030      	str	r0, [r6, #0]
 801e5ca:	062e      	lsls	r6, r5, #24
 801e5cc:	681b      	ldr	r3, [r3, #0]
 801e5ce:	d501      	bpl.n	801e5d4 <_printf_i+0x1c0>
 801e5d0:	6019      	str	r1, [r3, #0]
 801e5d2:	e002      	b.n	801e5da <_printf_i+0x1c6>
 801e5d4:	0668      	lsls	r0, r5, #25
 801e5d6:	d5fb      	bpl.n	801e5d0 <_printf_i+0x1bc>
 801e5d8:	8019      	strh	r1, [r3, #0]
 801e5da:	2300      	movs	r3, #0
 801e5dc:	6123      	str	r3, [r4, #16]
 801e5de:	4616      	mov	r6, r2
 801e5e0:	e7bc      	b.n	801e55c <_printf_i+0x148>
 801e5e2:	6833      	ldr	r3, [r6, #0]
 801e5e4:	1d1a      	adds	r2, r3, #4
 801e5e6:	6032      	str	r2, [r6, #0]
 801e5e8:	681e      	ldr	r6, [r3, #0]
 801e5ea:	6862      	ldr	r2, [r4, #4]
 801e5ec:	2100      	movs	r1, #0
 801e5ee:	4630      	mov	r0, r6
 801e5f0:	f7e1 fe26 	bl	8000240 <memchr>
 801e5f4:	b108      	cbz	r0, 801e5fa <_printf_i+0x1e6>
 801e5f6:	1b80      	subs	r0, r0, r6
 801e5f8:	6060      	str	r0, [r4, #4]
 801e5fa:	6863      	ldr	r3, [r4, #4]
 801e5fc:	6123      	str	r3, [r4, #16]
 801e5fe:	2300      	movs	r3, #0
 801e600:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e604:	e7aa      	b.n	801e55c <_printf_i+0x148>
 801e606:	6923      	ldr	r3, [r4, #16]
 801e608:	4632      	mov	r2, r6
 801e60a:	4649      	mov	r1, r9
 801e60c:	4640      	mov	r0, r8
 801e60e:	47d0      	blx	sl
 801e610:	3001      	adds	r0, #1
 801e612:	d0ad      	beq.n	801e570 <_printf_i+0x15c>
 801e614:	6823      	ldr	r3, [r4, #0]
 801e616:	079b      	lsls	r3, r3, #30
 801e618:	d413      	bmi.n	801e642 <_printf_i+0x22e>
 801e61a:	68e0      	ldr	r0, [r4, #12]
 801e61c:	9b03      	ldr	r3, [sp, #12]
 801e61e:	4298      	cmp	r0, r3
 801e620:	bfb8      	it	lt
 801e622:	4618      	movlt	r0, r3
 801e624:	e7a6      	b.n	801e574 <_printf_i+0x160>
 801e626:	2301      	movs	r3, #1
 801e628:	4632      	mov	r2, r6
 801e62a:	4649      	mov	r1, r9
 801e62c:	4640      	mov	r0, r8
 801e62e:	47d0      	blx	sl
 801e630:	3001      	adds	r0, #1
 801e632:	d09d      	beq.n	801e570 <_printf_i+0x15c>
 801e634:	3501      	adds	r5, #1
 801e636:	68e3      	ldr	r3, [r4, #12]
 801e638:	9903      	ldr	r1, [sp, #12]
 801e63a:	1a5b      	subs	r3, r3, r1
 801e63c:	42ab      	cmp	r3, r5
 801e63e:	dcf2      	bgt.n	801e626 <_printf_i+0x212>
 801e640:	e7eb      	b.n	801e61a <_printf_i+0x206>
 801e642:	2500      	movs	r5, #0
 801e644:	f104 0619 	add.w	r6, r4, #25
 801e648:	e7f5      	b.n	801e636 <_printf_i+0x222>
 801e64a:	bf00      	nop
 801e64c:	08022091 	.word	0x08022091
 801e650:	080220a2 	.word	0x080220a2

0801e654 <__sflush_r>:
 801e654:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e65c:	0716      	lsls	r6, r2, #28
 801e65e:	4605      	mov	r5, r0
 801e660:	460c      	mov	r4, r1
 801e662:	d454      	bmi.n	801e70e <__sflush_r+0xba>
 801e664:	684b      	ldr	r3, [r1, #4]
 801e666:	2b00      	cmp	r3, #0
 801e668:	dc02      	bgt.n	801e670 <__sflush_r+0x1c>
 801e66a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e66c:	2b00      	cmp	r3, #0
 801e66e:	dd48      	ble.n	801e702 <__sflush_r+0xae>
 801e670:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e672:	2e00      	cmp	r6, #0
 801e674:	d045      	beq.n	801e702 <__sflush_r+0xae>
 801e676:	2300      	movs	r3, #0
 801e678:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e67c:	682f      	ldr	r7, [r5, #0]
 801e67e:	6a21      	ldr	r1, [r4, #32]
 801e680:	602b      	str	r3, [r5, #0]
 801e682:	d030      	beq.n	801e6e6 <__sflush_r+0x92>
 801e684:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e686:	89a3      	ldrh	r3, [r4, #12]
 801e688:	0759      	lsls	r1, r3, #29
 801e68a:	d505      	bpl.n	801e698 <__sflush_r+0x44>
 801e68c:	6863      	ldr	r3, [r4, #4]
 801e68e:	1ad2      	subs	r2, r2, r3
 801e690:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e692:	b10b      	cbz	r3, 801e698 <__sflush_r+0x44>
 801e694:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e696:	1ad2      	subs	r2, r2, r3
 801e698:	2300      	movs	r3, #0
 801e69a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e69c:	6a21      	ldr	r1, [r4, #32]
 801e69e:	4628      	mov	r0, r5
 801e6a0:	47b0      	blx	r6
 801e6a2:	1c43      	adds	r3, r0, #1
 801e6a4:	89a3      	ldrh	r3, [r4, #12]
 801e6a6:	d106      	bne.n	801e6b6 <__sflush_r+0x62>
 801e6a8:	6829      	ldr	r1, [r5, #0]
 801e6aa:	291d      	cmp	r1, #29
 801e6ac:	d82b      	bhi.n	801e706 <__sflush_r+0xb2>
 801e6ae:	4a2a      	ldr	r2, [pc, #168]	@ (801e758 <__sflush_r+0x104>)
 801e6b0:	410a      	asrs	r2, r1
 801e6b2:	07d6      	lsls	r6, r2, #31
 801e6b4:	d427      	bmi.n	801e706 <__sflush_r+0xb2>
 801e6b6:	2200      	movs	r2, #0
 801e6b8:	6062      	str	r2, [r4, #4]
 801e6ba:	04d9      	lsls	r1, r3, #19
 801e6bc:	6922      	ldr	r2, [r4, #16]
 801e6be:	6022      	str	r2, [r4, #0]
 801e6c0:	d504      	bpl.n	801e6cc <__sflush_r+0x78>
 801e6c2:	1c42      	adds	r2, r0, #1
 801e6c4:	d101      	bne.n	801e6ca <__sflush_r+0x76>
 801e6c6:	682b      	ldr	r3, [r5, #0]
 801e6c8:	b903      	cbnz	r3, 801e6cc <__sflush_r+0x78>
 801e6ca:	6560      	str	r0, [r4, #84]	@ 0x54
 801e6cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e6ce:	602f      	str	r7, [r5, #0]
 801e6d0:	b1b9      	cbz	r1, 801e702 <__sflush_r+0xae>
 801e6d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e6d6:	4299      	cmp	r1, r3
 801e6d8:	d002      	beq.n	801e6e0 <__sflush_r+0x8c>
 801e6da:	4628      	mov	r0, r5
 801e6dc:	f7ff fb40 	bl	801dd60 <_free_r>
 801e6e0:	2300      	movs	r3, #0
 801e6e2:	6363      	str	r3, [r4, #52]	@ 0x34
 801e6e4:	e00d      	b.n	801e702 <__sflush_r+0xae>
 801e6e6:	2301      	movs	r3, #1
 801e6e8:	4628      	mov	r0, r5
 801e6ea:	47b0      	blx	r6
 801e6ec:	4602      	mov	r2, r0
 801e6ee:	1c50      	adds	r0, r2, #1
 801e6f0:	d1c9      	bne.n	801e686 <__sflush_r+0x32>
 801e6f2:	682b      	ldr	r3, [r5, #0]
 801e6f4:	2b00      	cmp	r3, #0
 801e6f6:	d0c6      	beq.n	801e686 <__sflush_r+0x32>
 801e6f8:	2b1d      	cmp	r3, #29
 801e6fa:	d001      	beq.n	801e700 <__sflush_r+0xac>
 801e6fc:	2b16      	cmp	r3, #22
 801e6fe:	d11e      	bne.n	801e73e <__sflush_r+0xea>
 801e700:	602f      	str	r7, [r5, #0]
 801e702:	2000      	movs	r0, #0
 801e704:	e022      	b.n	801e74c <__sflush_r+0xf8>
 801e706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e70a:	b21b      	sxth	r3, r3
 801e70c:	e01b      	b.n	801e746 <__sflush_r+0xf2>
 801e70e:	690f      	ldr	r7, [r1, #16]
 801e710:	2f00      	cmp	r7, #0
 801e712:	d0f6      	beq.n	801e702 <__sflush_r+0xae>
 801e714:	0793      	lsls	r3, r2, #30
 801e716:	680e      	ldr	r6, [r1, #0]
 801e718:	bf08      	it	eq
 801e71a:	694b      	ldreq	r3, [r1, #20]
 801e71c:	600f      	str	r7, [r1, #0]
 801e71e:	bf18      	it	ne
 801e720:	2300      	movne	r3, #0
 801e722:	eba6 0807 	sub.w	r8, r6, r7
 801e726:	608b      	str	r3, [r1, #8]
 801e728:	f1b8 0f00 	cmp.w	r8, #0
 801e72c:	dde9      	ble.n	801e702 <__sflush_r+0xae>
 801e72e:	6a21      	ldr	r1, [r4, #32]
 801e730:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e732:	4643      	mov	r3, r8
 801e734:	463a      	mov	r2, r7
 801e736:	4628      	mov	r0, r5
 801e738:	47b0      	blx	r6
 801e73a:	2800      	cmp	r0, #0
 801e73c:	dc08      	bgt.n	801e750 <__sflush_r+0xfc>
 801e73e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e746:	81a3      	strh	r3, [r4, #12]
 801e748:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e750:	4407      	add	r7, r0
 801e752:	eba8 0800 	sub.w	r8, r8, r0
 801e756:	e7e7      	b.n	801e728 <__sflush_r+0xd4>
 801e758:	dfbffffe 	.word	0xdfbffffe

0801e75c <_fflush_r>:
 801e75c:	b538      	push	{r3, r4, r5, lr}
 801e75e:	690b      	ldr	r3, [r1, #16]
 801e760:	4605      	mov	r5, r0
 801e762:	460c      	mov	r4, r1
 801e764:	b913      	cbnz	r3, 801e76c <_fflush_r+0x10>
 801e766:	2500      	movs	r5, #0
 801e768:	4628      	mov	r0, r5
 801e76a:	bd38      	pop	{r3, r4, r5, pc}
 801e76c:	b118      	cbz	r0, 801e776 <_fflush_r+0x1a>
 801e76e:	6a03      	ldr	r3, [r0, #32]
 801e770:	b90b      	cbnz	r3, 801e776 <_fflush_r+0x1a>
 801e772:	f7fe ffd1 	bl	801d718 <__sinit>
 801e776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e77a:	2b00      	cmp	r3, #0
 801e77c:	d0f3      	beq.n	801e766 <_fflush_r+0xa>
 801e77e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e780:	07d0      	lsls	r0, r2, #31
 801e782:	d404      	bmi.n	801e78e <_fflush_r+0x32>
 801e784:	0599      	lsls	r1, r3, #22
 801e786:	d402      	bmi.n	801e78e <_fflush_r+0x32>
 801e788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e78a:	f7ff faa6 	bl	801dcda <__retarget_lock_acquire_recursive>
 801e78e:	4628      	mov	r0, r5
 801e790:	4621      	mov	r1, r4
 801e792:	f7ff ff5f 	bl	801e654 <__sflush_r>
 801e796:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e798:	07da      	lsls	r2, r3, #31
 801e79a:	4605      	mov	r5, r0
 801e79c:	d4e4      	bmi.n	801e768 <_fflush_r+0xc>
 801e79e:	89a3      	ldrh	r3, [r4, #12]
 801e7a0:	059b      	lsls	r3, r3, #22
 801e7a2:	d4e1      	bmi.n	801e768 <_fflush_r+0xc>
 801e7a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e7a6:	f7ff fa99 	bl	801dcdc <__retarget_lock_release_recursive>
 801e7aa:	e7dd      	b.n	801e768 <_fflush_r+0xc>

0801e7ac <fiprintf>:
 801e7ac:	b40e      	push	{r1, r2, r3}
 801e7ae:	b503      	push	{r0, r1, lr}
 801e7b0:	4601      	mov	r1, r0
 801e7b2:	ab03      	add	r3, sp, #12
 801e7b4:	4805      	ldr	r0, [pc, #20]	@ (801e7cc <fiprintf+0x20>)
 801e7b6:	f853 2b04 	ldr.w	r2, [r3], #4
 801e7ba:	6800      	ldr	r0, [r0, #0]
 801e7bc:	9301      	str	r3, [sp, #4]
 801e7be:	f7ff fca3 	bl	801e108 <_vfiprintf_r>
 801e7c2:	b002      	add	sp, #8
 801e7c4:	f85d eb04 	ldr.w	lr, [sp], #4
 801e7c8:	b003      	add	sp, #12
 801e7ca:	4770      	bx	lr
 801e7cc:	200034bc 	.word	0x200034bc

0801e7d0 <__swhatbuf_r>:
 801e7d0:	b570      	push	{r4, r5, r6, lr}
 801e7d2:	460c      	mov	r4, r1
 801e7d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e7d8:	2900      	cmp	r1, #0
 801e7da:	b096      	sub	sp, #88	@ 0x58
 801e7dc:	4615      	mov	r5, r2
 801e7de:	461e      	mov	r6, r3
 801e7e0:	da0d      	bge.n	801e7fe <__swhatbuf_r+0x2e>
 801e7e2:	89a3      	ldrh	r3, [r4, #12]
 801e7e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801e7e8:	f04f 0100 	mov.w	r1, #0
 801e7ec:	bf14      	ite	ne
 801e7ee:	2340      	movne	r3, #64	@ 0x40
 801e7f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801e7f4:	2000      	movs	r0, #0
 801e7f6:	6031      	str	r1, [r6, #0]
 801e7f8:	602b      	str	r3, [r5, #0]
 801e7fa:	b016      	add	sp, #88	@ 0x58
 801e7fc:	bd70      	pop	{r4, r5, r6, pc}
 801e7fe:	466a      	mov	r2, sp
 801e800:	f000 f848 	bl	801e894 <_fstat_r>
 801e804:	2800      	cmp	r0, #0
 801e806:	dbec      	blt.n	801e7e2 <__swhatbuf_r+0x12>
 801e808:	9901      	ldr	r1, [sp, #4]
 801e80a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801e80e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801e812:	4259      	negs	r1, r3
 801e814:	4159      	adcs	r1, r3
 801e816:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e81a:	e7eb      	b.n	801e7f4 <__swhatbuf_r+0x24>

0801e81c <__smakebuf_r>:
 801e81c:	898b      	ldrh	r3, [r1, #12]
 801e81e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e820:	079d      	lsls	r5, r3, #30
 801e822:	4606      	mov	r6, r0
 801e824:	460c      	mov	r4, r1
 801e826:	d507      	bpl.n	801e838 <__smakebuf_r+0x1c>
 801e828:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801e82c:	6023      	str	r3, [r4, #0]
 801e82e:	6123      	str	r3, [r4, #16]
 801e830:	2301      	movs	r3, #1
 801e832:	6163      	str	r3, [r4, #20]
 801e834:	b003      	add	sp, #12
 801e836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e838:	ab01      	add	r3, sp, #4
 801e83a:	466a      	mov	r2, sp
 801e83c:	f7ff ffc8 	bl	801e7d0 <__swhatbuf_r>
 801e840:	9f00      	ldr	r7, [sp, #0]
 801e842:	4605      	mov	r5, r0
 801e844:	4639      	mov	r1, r7
 801e846:	4630      	mov	r0, r6
 801e848:	f7fe fd34 	bl	801d2b4 <_malloc_r>
 801e84c:	b948      	cbnz	r0, 801e862 <__smakebuf_r+0x46>
 801e84e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e852:	059a      	lsls	r2, r3, #22
 801e854:	d4ee      	bmi.n	801e834 <__smakebuf_r+0x18>
 801e856:	f023 0303 	bic.w	r3, r3, #3
 801e85a:	f043 0302 	orr.w	r3, r3, #2
 801e85e:	81a3      	strh	r3, [r4, #12]
 801e860:	e7e2      	b.n	801e828 <__smakebuf_r+0xc>
 801e862:	89a3      	ldrh	r3, [r4, #12]
 801e864:	6020      	str	r0, [r4, #0]
 801e866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e86a:	81a3      	strh	r3, [r4, #12]
 801e86c:	9b01      	ldr	r3, [sp, #4]
 801e86e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801e872:	b15b      	cbz	r3, 801e88c <__smakebuf_r+0x70>
 801e874:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e878:	4630      	mov	r0, r6
 801e87a:	f000 f81d 	bl	801e8b8 <_isatty_r>
 801e87e:	b128      	cbz	r0, 801e88c <__smakebuf_r+0x70>
 801e880:	89a3      	ldrh	r3, [r4, #12]
 801e882:	f023 0303 	bic.w	r3, r3, #3
 801e886:	f043 0301 	orr.w	r3, r3, #1
 801e88a:	81a3      	strh	r3, [r4, #12]
 801e88c:	89a3      	ldrh	r3, [r4, #12]
 801e88e:	431d      	orrs	r5, r3
 801e890:	81a5      	strh	r5, [r4, #12]
 801e892:	e7cf      	b.n	801e834 <__smakebuf_r+0x18>

0801e894 <_fstat_r>:
 801e894:	b538      	push	{r3, r4, r5, lr}
 801e896:	4d07      	ldr	r5, [pc, #28]	@ (801e8b4 <_fstat_r+0x20>)
 801e898:	2300      	movs	r3, #0
 801e89a:	4604      	mov	r4, r0
 801e89c:	4608      	mov	r0, r1
 801e89e:	4611      	mov	r1, r2
 801e8a0:	602b      	str	r3, [r5, #0]
 801e8a2:	f7e4 ffcd 	bl	8003840 <_fstat>
 801e8a6:	1c43      	adds	r3, r0, #1
 801e8a8:	d102      	bne.n	801e8b0 <_fstat_r+0x1c>
 801e8aa:	682b      	ldr	r3, [r5, #0]
 801e8ac:	b103      	cbz	r3, 801e8b0 <_fstat_r+0x1c>
 801e8ae:	6023      	str	r3, [r4, #0]
 801e8b0:	bd38      	pop	{r3, r4, r5, pc}
 801e8b2:	bf00      	nop
 801e8b4:	2000fa00 	.word	0x2000fa00

0801e8b8 <_isatty_r>:
 801e8b8:	b538      	push	{r3, r4, r5, lr}
 801e8ba:	4d06      	ldr	r5, [pc, #24]	@ (801e8d4 <_isatty_r+0x1c>)
 801e8bc:	2300      	movs	r3, #0
 801e8be:	4604      	mov	r4, r0
 801e8c0:	4608      	mov	r0, r1
 801e8c2:	602b      	str	r3, [r5, #0]
 801e8c4:	f7e4 ffcc 	bl	8003860 <_isatty>
 801e8c8:	1c43      	adds	r3, r0, #1
 801e8ca:	d102      	bne.n	801e8d2 <_isatty_r+0x1a>
 801e8cc:	682b      	ldr	r3, [r5, #0]
 801e8ce:	b103      	cbz	r3, 801e8d2 <_isatty_r+0x1a>
 801e8d0:	6023      	str	r3, [r4, #0]
 801e8d2:	bd38      	pop	{r3, r4, r5, pc}
 801e8d4:	2000fa00 	.word	0x2000fa00

0801e8d8 <abort>:
 801e8d8:	b508      	push	{r3, lr}
 801e8da:	2006      	movs	r0, #6
 801e8dc:	f000 f82c 	bl	801e938 <raise>
 801e8e0:	2001      	movs	r0, #1
 801e8e2:	f7e4 ff5d 	bl	80037a0 <_exit>

0801e8e6 <_raise_r>:
 801e8e6:	291f      	cmp	r1, #31
 801e8e8:	b538      	push	{r3, r4, r5, lr}
 801e8ea:	4605      	mov	r5, r0
 801e8ec:	460c      	mov	r4, r1
 801e8ee:	d904      	bls.n	801e8fa <_raise_r+0x14>
 801e8f0:	2316      	movs	r3, #22
 801e8f2:	6003      	str	r3, [r0, #0]
 801e8f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e8f8:	bd38      	pop	{r3, r4, r5, pc}
 801e8fa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e8fc:	b112      	cbz	r2, 801e904 <_raise_r+0x1e>
 801e8fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e902:	b94b      	cbnz	r3, 801e918 <_raise_r+0x32>
 801e904:	4628      	mov	r0, r5
 801e906:	f000 f831 	bl	801e96c <_getpid_r>
 801e90a:	4622      	mov	r2, r4
 801e90c:	4601      	mov	r1, r0
 801e90e:	4628      	mov	r0, r5
 801e910:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e914:	f000 b818 	b.w	801e948 <_kill_r>
 801e918:	2b01      	cmp	r3, #1
 801e91a:	d00a      	beq.n	801e932 <_raise_r+0x4c>
 801e91c:	1c59      	adds	r1, r3, #1
 801e91e:	d103      	bne.n	801e928 <_raise_r+0x42>
 801e920:	2316      	movs	r3, #22
 801e922:	6003      	str	r3, [r0, #0]
 801e924:	2001      	movs	r0, #1
 801e926:	e7e7      	b.n	801e8f8 <_raise_r+0x12>
 801e928:	2100      	movs	r1, #0
 801e92a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e92e:	4620      	mov	r0, r4
 801e930:	4798      	blx	r3
 801e932:	2000      	movs	r0, #0
 801e934:	e7e0      	b.n	801e8f8 <_raise_r+0x12>
	...

0801e938 <raise>:
 801e938:	4b02      	ldr	r3, [pc, #8]	@ (801e944 <raise+0xc>)
 801e93a:	4601      	mov	r1, r0
 801e93c:	6818      	ldr	r0, [r3, #0]
 801e93e:	f7ff bfd2 	b.w	801e8e6 <_raise_r>
 801e942:	bf00      	nop
 801e944:	200034bc 	.word	0x200034bc

0801e948 <_kill_r>:
 801e948:	b538      	push	{r3, r4, r5, lr}
 801e94a:	4d07      	ldr	r5, [pc, #28]	@ (801e968 <_kill_r+0x20>)
 801e94c:	2300      	movs	r3, #0
 801e94e:	4604      	mov	r4, r0
 801e950:	4608      	mov	r0, r1
 801e952:	4611      	mov	r1, r2
 801e954:	602b      	str	r3, [r5, #0]
 801e956:	f7e4 ff13 	bl	8003780 <_kill>
 801e95a:	1c43      	adds	r3, r0, #1
 801e95c:	d102      	bne.n	801e964 <_kill_r+0x1c>
 801e95e:	682b      	ldr	r3, [r5, #0]
 801e960:	b103      	cbz	r3, 801e964 <_kill_r+0x1c>
 801e962:	6023      	str	r3, [r4, #0]
 801e964:	bd38      	pop	{r3, r4, r5, pc}
 801e966:	bf00      	nop
 801e968:	2000fa00 	.word	0x2000fa00

0801e96c <_getpid_r>:
 801e96c:	f7e4 bf00 	b.w	8003770 <_getpid>

0801e970 <atan2>:
 801e970:	f000 bb32 	b.w	801efd8 <__ieee754_atan2>

0801e974 <sqrt>:
 801e974:	b538      	push	{r3, r4, r5, lr}
 801e976:	ed2d 8b02 	vpush	{d8}
 801e97a:	ec55 4b10 	vmov	r4, r5, d0
 801e97e:	f000 fa51 	bl	801ee24 <__ieee754_sqrt>
 801e982:	4622      	mov	r2, r4
 801e984:	462b      	mov	r3, r5
 801e986:	4620      	mov	r0, r4
 801e988:	4629      	mov	r1, r5
 801e98a:	eeb0 8a40 	vmov.f32	s16, s0
 801e98e:	eef0 8a60 	vmov.f32	s17, s1
 801e992:	f7e2 f903 	bl	8000b9c <__aeabi_dcmpun>
 801e996:	b990      	cbnz	r0, 801e9be <sqrt+0x4a>
 801e998:	2200      	movs	r2, #0
 801e99a:	2300      	movs	r3, #0
 801e99c:	4620      	mov	r0, r4
 801e99e:	4629      	mov	r1, r5
 801e9a0:	f7e2 f8d4 	bl	8000b4c <__aeabi_dcmplt>
 801e9a4:	b158      	cbz	r0, 801e9be <sqrt+0x4a>
 801e9a6:	f7ff f96d 	bl	801dc84 <__errno>
 801e9aa:	2321      	movs	r3, #33	@ 0x21
 801e9ac:	6003      	str	r3, [r0, #0]
 801e9ae:	2200      	movs	r2, #0
 801e9b0:	2300      	movs	r3, #0
 801e9b2:	4610      	mov	r0, r2
 801e9b4:	4619      	mov	r1, r3
 801e9b6:	f7e1 ff81 	bl	80008bc <__aeabi_ddiv>
 801e9ba:	ec41 0b18 	vmov	d8, r0, r1
 801e9be:	eeb0 0a48 	vmov.f32	s0, s16
 801e9c2:	eef0 0a68 	vmov.f32	s1, s17
 801e9c6:	ecbd 8b02 	vpop	{d8}
 801e9ca:	bd38      	pop	{r3, r4, r5, pc}
 801e9cc:	0000      	movs	r0, r0
	...

0801e9d0 <atan>:
 801e9d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9d4:	ec55 4b10 	vmov	r4, r5, d0
 801e9d8:	4bbf      	ldr	r3, [pc, #764]	@ (801ecd8 <atan+0x308>)
 801e9da:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801e9de:	429e      	cmp	r6, r3
 801e9e0:	46ab      	mov	fp, r5
 801e9e2:	d918      	bls.n	801ea16 <atan+0x46>
 801e9e4:	4bbd      	ldr	r3, [pc, #756]	@ (801ecdc <atan+0x30c>)
 801e9e6:	429e      	cmp	r6, r3
 801e9e8:	d801      	bhi.n	801e9ee <atan+0x1e>
 801e9ea:	d109      	bne.n	801ea00 <atan+0x30>
 801e9ec:	b144      	cbz	r4, 801ea00 <atan+0x30>
 801e9ee:	4622      	mov	r2, r4
 801e9f0:	462b      	mov	r3, r5
 801e9f2:	4620      	mov	r0, r4
 801e9f4:	4629      	mov	r1, r5
 801e9f6:	f7e1 fc81 	bl	80002fc <__adddf3>
 801e9fa:	4604      	mov	r4, r0
 801e9fc:	460d      	mov	r5, r1
 801e9fe:	e006      	b.n	801ea0e <atan+0x3e>
 801ea00:	f1bb 0f00 	cmp.w	fp, #0
 801ea04:	f340 812b 	ble.w	801ec5e <atan+0x28e>
 801ea08:	a597      	add	r5, pc, #604	@ (adr r5, 801ec68 <atan+0x298>)
 801ea0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ea0e:	ec45 4b10 	vmov	d0, r4, r5
 801ea12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea16:	4bb2      	ldr	r3, [pc, #712]	@ (801ece0 <atan+0x310>)
 801ea18:	429e      	cmp	r6, r3
 801ea1a:	d813      	bhi.n	801ea44 <atan+0x74>
 801ea1c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801ea20:	429e      	cmp	r6, r3
 801ea22:	d80c      	bhi.n	801ea3e <atan+0x6e>
 801ea24:	a392      	add	r3, pc, #584	@ (adr r3, 801ec70 <atan+0x2a0>)
 801ea26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea2a:	4620      	mov	r0, r4
 801ea2c:	4629      	mov	r1, r5
 801ea2e:	f7e1 fc65 	bl	80002fc <__adddf3>
 801ea32:	4bac      	ldr	r3, [pc, #688]	@ (801ece4 <atan+0x314>)
 801ea34:	2200      	movs	r2, #0
 801ea36:	f7e2 f8a7 	bl	8000b88 <__aeabi_dcmpgt>
 801ea3a:	2800      	cmp	r0, #0
 801ea3c:	d1e7      	bne.n	801ea0e <atan+0x3e>
 801ea3e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801ea42:	e029      	b.n	801ea98 <atan+0xc8>
 801ea44:	f000 f95c 	bl	801ed00 <fabs>
 801ea48:	4ba7      	ldr	r3, [pc, #668]	@ (801ece8 <atan+0x318>)
 801ea4a:	429e      	cmp	r6, r3
 801ea4c:	ec55 4b10 	vmov	r4, r5, d0
 801ea50:	f200 80bc 	bhi.w	801ebcc <atan+0x1fc>
 801ea54:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801ea58:	429e      	cmp	r6, r3
 801ea5a:	f200 809e 	bhi.w	801eb9a <atan+0x1ca>
 801ea5e:	4622      	mov	r2, r4
 801ea60:	462b      	mov	r3, r5
 801ea62:	4620      	mov	r0, r4
 801ea64:	4629      	mov	r1, r5
 801ea66:	f7e1 fc49 	bl	80002fc <__adddf3>
 801ea6a:	4b9e      	ldr	r3, [pc, #632]	@ (801ece4 <atan+0x314>)
 801ea6c:	2200      	movs	r2, #0
 801ea6e:	f7e1 fc43 	bl	80002f8 <__aeabi_dsub>
 801ea72:	2200      	movs	r2, #0
 801ea74:	4606      	mov	r6, r0
 801ea76:	460f      	mov	r7, r1
 801ea78:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801ea7c:	4620      	mov	r0, r4
 801ea7e:	4629      	mov	r1, r5
 801ea80:	f7e1 fc3c 	bl	80002fc <__adddf3>
 801ea84:	4602      	mov	r2, r0
 801ea86:	460b      	mov	r3, r1
 801ea88:	4630      	mov	r0, r6
 801ea8a:	4639      	mov	r1, r7
 801ea8c:	f7e1 ff16 	bl	80008bc <__aeabi_ddiv>
 801ea90:	f04f 0a00 	mov.w	sl, #0
 801ea94:	4604      	mov	r4, r0
 801ea96:	460d      	mov	r5, r1
 801ea98:	4622      	mov	r2, r4
 801ea9a:	462b      	mov	r3, r5
 801ea9c:	4620      	mov	r0, r4
 801ea9e:	4629      	mov	r1, r5
 801eaa0:	f7e1 fde2 	bl	8000668 <__aeabi_dmul>
 801eaa4:	4602      	mov	r2, r0
 801eaa6:	460b      	mov	r3, r1
 801eaa8:	4680      	mov	r8, r0
 801eaaa:	4689      	mov	r9, r1
 801eaac:	f7e1 fddc 	bl	8000668 <__aeabi_dmul>
 801eab0:	a371      	add	r3, pc, #452	@ (adr r3, 801ec78 <atan+0x2a8>)
 801eab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eab6:	4606      	mov	r6, r0
 801eab8:	460f      	mov	r7, r1
 801eaba:	f7e1 fdd5 	bl	8000668 <__aeabi_dmul>
 801eabe:	a370      	add	r3, pc, #448	@ (adr r3, 801ec80 <atan+0x2b0>)
 801eac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eac4:	f7e1 fc1a 	bl	80002fc <__adddf3>
 801eac8:	4632      	mov	r2, r6
 801eaca:	463b      	mov	r3, r7
 801eacc:	f7e1 fdcc 	bl	8000668 <__aeabi_dmul>
 801ead0:	a36d      	add	r3, pc, #436	@ (adr r3, 801ec88 <atan+0x2b8>)
 801ead2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ead6:	f7e1 fc11 	bl	80002fc <__adddf3>
 801eada:	4632      	mov	r2, r6
 801eadc:	463b      	mov	r3, r7
 801eade:	f7e1 fdc3 	bl	8000668 <__aeabi_dmul>
 801eae2:	a36b      	add	r3, pc, #428	@ (adr r3, 801ec90 <atan+0x2c0>)
 801eae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eae8:	f7e1 fc08 	bl	80002fc <__adddf3>
 801eaec:	4632      	mov	r2, r6
 801eaee:	463b      	mov	r3, r7
 801eaf0:	f7e1 fdba 	bl	8000668 <__aeabi_dmul>
 801eaf4:	a368      	add	r3, pc, #416	@ (adr r3, 801ec98 <atan+0x2c8>)
 801eaf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eafa:	f7e1 fbff 	bl	80002fc <__adddf3>
 801eafe:	4632      	mov	r2, r6
 801eb00:	463b      	mov	r3, r7
 801eb02:	f7e1 fdb1 	bl	8000668 <__aeabi_dmul>
 801eb06:	a366      	add	r3, pc, #408	@ (adr r3, 801eca0 <atan+0x2d0>)
 801eb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb0c:	f7e1 fbf6 	bl	80002fc <__adddf3>
 801eb10:	4642      	mov	r2, r8
 801eb12:	464b      	mov	r3, r9
 801eb14:	f7e1 fda8 	bl	8000668 <__aeabi_dmul>
 801eb18:	a363      	add	r3, pc, #396	@ (adr r3, 801eca8 <atan+0x2d8>)
 801eb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb1e:	4680      	mov	r8, r0
 801eb20:	4689      	mov	r9, r1
 801eb22:	4630      	mov	r0, r6
 801eb24:	4639      	mov	r1, r7
 801eb26:	f7e1 fd9f 	bl	8000668 <__aeabi_dmul>
 801eb2a:	a361      	add	r3, pc, #388	@ (adr r3, 801ecb0 <atan+0x2e0>)
 801eb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb30:	f7e1 fbe2 	bl	80002f8 <__aeabi_dsub>
 801eb34:	4632      	mov	r2, r6
 801eb36:	463b      	mov	r3, r7
 801eb38:	f7e1 fd96 	bl	8000668 <__aeabi_dmul>
 801eb3c:	a35e      	add	r3, pc, #376	@ (adr r3, 801ecb8 <atan+0x2e8>)
 801eb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb42:	f7e1 fbd9 	bl	80002f8 <__aeabi_dsub>
 801eb46:	4632      	mov	r2, r6
 801eb48:	463b      	mov	r3, r7
 801eb4a:	f7e1 fd8d 	bl	8000668 <__aeabi_dmul>
 801eb4e:	a35c      	add	r3, pc, #368	@ (adr r3, 801ecc0 <atan+0x2f0>)
 801eb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb54:	f7e1 fbd0 	bl	80002f8 <__aeabi_dsub>
 801eb58:	4632      	mov	r2, r6
 801eb5a:	463b      	mov	r3, r7
 801eb5c:	f7e1 fd84 	bl	8000668 <__aeabi_dmul>
 801eb60:	a359      	add	r3, pc, #356	@ (adr r3, 801ecc8 <atan+0x2f8>)
 801eb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb66:	f7e1 fbc7 	bl	80002f8 <__aeabi_dsub>
 801eb6a:	4632      	mov	r2, r6
 801eb6c:	463b      	mov	r3, r7
 801eb6e:	f7e1 fd7b 	bl	8000668 <__aeabi_dmul>
 801eb72:	4602      	mov	r2, r0
 801eb74:	460b      	mov	r3, r1
 801eb76:	4640      	mov	r0, r8
 801eb78:	4649      	mov	r1, r9
 801eb7a:	f7e1 fbbf 	bl	80002fc <__adddf3>
 801eb7e:	4622      	mov	r2, r4
 801eb80:	462b      	mov	r3, r5
 801eb82:	f7e1 fd71 	bl	8000668 <__aeabi_dmul>
 801eb86:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801eb8a:	4602      	mov	r2, r0
 801eb8c:	460b      	mov	r3, r1
 801eb8e:	d148      	bne.n	801ec22 <atan+0x252>
 801eb90:	4620      	mov	r0, r4
 801eb92:	4629      	mov	r1, r5
 801eb94:	f7e1 fbb0 	bl	80002f8 <__aeabi_dsub>
 801eb98:	e72f      	b.n	801e9fa <atan+0x2a>
 801eb9a:	4b52      	ldr	r3, [pc, #328]	@ (801ece4 <atan+0x314>)
 801eb9c:	2200      	movs	r2, #0
 801eb9e:	4620      	mov	r0, r4
 801eba0:	4629      	mov	r1, r5
 801eba2:	f7e1 fba9 	bl	80002f8 <__aeabi_dsub>
 801eba6:	4b4f      	ldr	r3, [pc, #316]	@ (801ece4 <atan+0x314>)
 801eba8:	4606      	mov	r6, r0
 801ebaa:	460f      	mov	r7, r1
 801ebac:	2200      	movs	r2, #0
 801ebae:	4620      	mov	r0, r4
 801ebb0:	4629      	mov	r1, r5
 801ebb2:	f7e1 fba3 	bl	80002fc <__adddf3>
 801ebb6:	4602      	mov	r2, r0
 801ebb8:	460b      	mov	r3, r1
 801ebba:	4630      	mov	r0, r6
 801ebbc:	4639      	mov	r1, r7
 801ebbe:	f7e1 fe7d 	bl	80008bc <__aeabi_ddiv>
 801ebc2:	f04f 0a01 	mov.w	sl, #1
 801ebc6:	4604      	mov	r4, r0
 801ebc8:	460d      	mov	r5, r1
 801ebca:	e765      	b.n	801ea98 <atan+0xc8>
 801ebcc:	4b47      	ldr	r3, [pc, #284]	@ (801ecec <atan+0x31c>)
 801ebce:	429e      	cmp	r6, r3
 801ebd0:	d21c      	bcs.n	801ec0c <atan+0x23c>
 801ebd2:	4b47      	ldr	r3, [pc, #284]	@ (801ecf0 <atan+0x320>)
 801ebd4:	2200      	movs	r2, #0
 801ebd6:	4620      	mov	r0, r4
 801ebd8:	4629      	mov	r1, r5
 801ebda:	f7e1 fb8d 	bl	80002f8 <__aeabi_dsub>
 801ebde:	4b44      	ldr	r3, [pc, #272]	@ (801ecf0 <atan+0x320>)
 801ebe0:	4606      	mov	r6, r0
 801ebe2:	460f      	mov	r7, r1
 801ebe4:	2200      	movs	r2, #0
 801ebe6:	4620      	mov	r0, r4
 801ebe8:	4629      	mov	r1, r5
 801ebea:	f7e1 fd3d 	bl	8000668 <__aeabi_dmul>
 801ebee:	4b3d      	ldr	r3, [pc, #244]	@ (801ece4 <atan+0x314>)
 801ebf0:	2200      	movs	r2, #0
 801ebf2:	f7e1 fb83 	bl	80002fc <__adddf3>
 801ebf6:	4602      	mov	r2, r0
 801ebf8:	460b      	mov	r3, r1
 801ebfa:	4630      	mov	r0, r6
 801ebfc:	4639      	mov	r1, r7
 801ebfe:	f7e1 fe5d 	bl	80008bc <__aeabi_ddiv>
 801ec02:	f04f 0a02 	mov.w	sl, #2
 801ec06:	4604      	mov	r4, r0
 801ec08:	460d      	mov	r5, r1
 801ec0a:	e745      	b.n	801ea98 <atan+0xc8>
 801ec0c:	4622      	mov	r2, r4
 801ec0e:	462b      	mov	r3, r5
 801ec10:	4938      	ldr	r1, [pc, #224]	@ (801ecf4 <atan+0x324>)
 801ec12:	2000      	movs	r0, #0
 801ec14:	f7e1 fe52 	bl	80008bc <__aeabi_ddiv>
 801ec18:	f04f 0a03 	mov.w	sl, #3
 801ec1c:	4604      	mov	r4, r0
 801ec1e:	460d      	mov	r5, r1
 801ec20:	e73a      	b.n	801ea98 <atan+0xc8>
 801ec22:	4b35      	ldr	r3, [pc, #212]	@ (801ecf8 <atan+0x328>)
 801ec24:	4e35      	ldr	r6, [pc, #212]	@ (801ecfc <atan+0x32c>)
 801ec26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801ec2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec2e:	f7e1 fb63 	bl	80002f8 <__aeabi_dsub>
 801ec32:	4622      	mov	r2, r4
 801ec34:	462b      	mov	r3, r5
 801ec36:	f7e1 fb5f 	bl	80002f8 <__aeabi_dsub>
 801ec3a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801ec3e:	4602      	mov	r2, r0
 801ec40:	460b      	mov	r3, r1
 801ec42:	e9d6 0100 	ldrd	r0, r1, [r6]
 801ec46:	f7e1 fb57 	bl	80002f8 <__aeabi_dsub>
 801ec4a:	f1bb 0f00 	cmp.w	fp, #0
 801ec4e:	4604      	mov	r4, r0
 801ec50:	460d      	mov	r5, r1
 801ec52:	f6bf aedc 	bge.w	801ea0e <atan+0x3e>
 801ec56:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ec5a:	461d      	mov	r5, r3
 801ec5c:	e6d7      	b.n	801ea0e <atan+0x3e>
 801ec5e:	a51c      	add	r5, pc, #112	@ (adr r5, 801ecd0 <atan+0x300>)
 801ec60:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ec64:	e6d3      	b.n	801ea0e <atan+0x3e>
 801ec66:	bf00      	nop
 801ec68:	54442d18 	.word	0x54442d18
 801ec6c:	3ff921fb 	.word	0x3ff921fb
 801ec70:	8800759c 	.word	0x8800759c
 801ec74:	7e37e43c 	.word	0x7e37e43c
 801ec78:	e322da11 	.word	0xe322da11
 801ec7c:	3f90ad3a 	.word	0x3f90ad3a
 801ec80:	24760deb 	.word	0x24760deb
 801ec84:	3fa97b4b 	.word	0x3fa97b4b
 801ec88:	a0d03d51 	.word	0xa0d03d51
 801ec8c:	3fb10d66 	.word	0x3fb10d66
 801ec90:	c54c206e 	.word	0xc54c206e
 801ec94:	3fb745cd 	.word	0x3fb745cd
 801ec98:	920083ff 	.word	0x920083ff
 801ec9c:	3fc24924 	.word	0x3fc24924
 801eca0:	5555550d 	.word	0x5555550d
 801eca4:	3fd55555 	.word	0x3fd55555
 801eca8:	2c6a6c2f 	.word	0x2c6a6c2f
 801ecac:	bfa2b444 	.word	0xbfa2b444
 801ecb0:	52defd9a 	.word	0x52defd9a
 801ecb4:	3fadde2d 	.word	0x3fadde2d
 801ecb8:	af749a6d 	.word	0xaf749a6d
 801ecbc:	3fb3b0f2 	.word	0x3fb3b0f2
 801ecc0:	fe231671 	.word	0xfe231671
 801ecc4:	3fbc71c6 	.word	0x3fbc71c6
 801ecc8:	9998ebc4 	.word	0x9998ebc4
 801eccc:	3fc99999 	.word	0x3fc99999
 801ecd0:	54442d18 	.word	0x54442d18
 801ecd4:	bff921fb 	.word	0xbff921fb
 801ecd8:	440fffff 	.word	0x440fffff
 801ecdc:	7ff00000 	.word	0x7ff00000
 801ece0:	3fdbffff 	.word	0x3fdbffff
 801ece4:	3ff00000 	.word	0x3ff00000
 801ece8:	3ff2ffff 	.word	0x3ff2ffff
 801ecec:	40038000 	.word	0x40038000
 801ecf0:	3ff80000 	.word	0x3ff80000
 801ecf4:	bff00000 	.word	0xbff00000
 801ecf8:	080220b8 	.word	0x080220b8
 801ecfc:	080220d8 	.word	0x080220d8

0801ed00 <fabs>:
 801ed00:	ec51 0b10 	vmov	r0, r1, d0
 801ed04:	4602      	mov	r2, r0
 801ed06:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801ed0a:	ec43 2b10 	vmov	d0, r2, r3
 801ed0e:	4770      	bx	lr

0801ed10 <cosf>:
 801ed10:	ee10 3a10 	vmov	r3, s0
 801ed14:	b507      	push	{r0, r1, r2, lr}
 801ed16:	4a1e      	ldr	r2, [pc, #120]	@ (801ed90 <cosf+0x80>)
 801ed18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ed1c:	4293      	cmp	r3, r2
 801ed1e:	d806      	bhi.n	801ed2e <cosf+0x1e>
 801ed20:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 801ed94 <cosf+0x84>
 801ed24:	b003      	add	sp, #12
 801ed26:	f85d eb04 	ldr.w	lr, [sp], #4
 801ed2a:	f000 ba1b 	b.w	801f164 <__kernel_cosf>
 801ed2e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801ed32:	d304      	bcc.n	801ed3e <cosf+0x2e>
 801ed34:	ee30 0a40 	vsub.f32	s0, s0, s0
 801ed38:	b003      	add	sp, #12
 801ed3a:	f85d fb04 	ldr.w	pc, [sp], #4
 801ed3e:	4668      	mov	r0, sp
 801ed40:	f000 fab0 	bl	801f2a4 <__ieee754_rem_pio2f>
 801ed44:	f000 0003 	and.w	r0, r0, #3
 801ed48:	2801      	cmp	r0, #1
 801ed4a:	d009      	beq.n	801ed60 <cosf+0x50>
 801ed4c:	2802      	cmp	r0, #2
 801ed4e:	d010      	beq.n	801ed72 <cosf+0x62>
 801ed50:	b9b0      	cbnz	r0, 801ed80 <cosf+0x70>
 801ed52:	eddd 0a01 	vldr	s1, [sp, #4]
 801ed56:	ed9d 0a00 	vldr	s0, [sp]
 801ed5a:	f000 fa03 	bl	801f164 <__kernel_cosf>
 801ed5e:	e7eb      	b.n	801ed38 <cosf+0x28>
 801ed60:	eddd 0a01 	vldr	s1, [sp, #4]
 801ed64:	ed9d 0a00 	vldr	s0, [sp]
 801ed68:	f000 fa54 	bl	801f214 <__kernel_sinf>
 801ed6c:	eeb1 0a40 	vneg.f32	s0, s0
 801ed70:	e7e2      	b.n	801ed38 <cosf+0x28>
 801ed72:	eddd 0a01 	vldr	s1, [sp, #4]
 801ed76:	ed9d 0a00 	vldr	s0, [sp]
 801ed7a:	f000 f9f3 	bl	801f164 <__kernel_cosf>
 801ed7e:	e7f5      	b.n	801ed6c <cosf+0x5c>
 801ed80:	eddd 0a01 	vldr	s1, [sp, #4]
 801ed84:	ed9d 0a00 	vldr	s0, [sp]
 801ed88:	2001      	movs	r0, #1
 801ed8a:	f000 fa43 	bl	801f214 <__kernel_sinf>
 801ed8e:	e7d3      	b.n	801ed38 <cosf+0x28>
 801ed90:	3f490fd8 	.word	0x3f490fd8
 801ed94:	00000000 	.word	0x00000000

0801ed98 <sinf>:
 801ed98:	ee10 3a10 	vmov	r3, s0
 801ed9c:	b507      	push	{r0, r1, r2, lr}
 801ed9e:	4a1f      	ldr	r2, [pc, #124]	@ (801ee1c <sinf+0x84>)
 801eda0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801eda4:	4293      	cmp	r3, r2
 801eda6:	d807      	bhi.n	801edb8 <sinf+0x20>
 801eda8:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 801ee20 <sinf+0x88>
 801edac:	2000      	movs	r0, #0
 801edae:	b003      	add	sp, #12
 801edb0:	f85d eb04 	ldr.w	lr, [sp], #4
 801edb4:	f000 ba2e 	b.w	801f214 <__kernel_sinf>
 801edb8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801edbc:	d304      	bcc.n	801edc8 <sinf+0x30>
 801edbe:	ee30 0a40 	vsub.f32	s0, s0, s0
 801edc2:	b003      	add	sp, #12
 801edc4:	f85d fb04 	ldr.w	pc, [sp], #4
 801edc8:	4668      	mov	r0, sp
 801edca:	f000 fa6b 	bl	801f2a4 <__ieee754_rem_pio2f>
 801edce:	f000 0003 	and.w	r0, r0, #3
 801edd2:	2801      	cmp	r0, #1
 801edd4:	d00a      	beq.n	801edec <sinf+0x54>
 801edd6:	2802      	cmp	r0, #2
 801edd8:	d00f      	beq.n	801edfa <sinf+0x62>
 801edda:	b9c0      	cbnz	r0, 801ee0e <sinf+0x76>
 801eddc:	eddd 0a01 	vldr	s1, [sp, #4]
 801ede0:	ed9d 0a00 	vldr	s0, [sp]
 801ede4:	2001      	movs	r0, #1
 801ede6:	f000 fa15 	bl	801f214 <__kernel_sinf>
 801edea:	e7ea      	b.n	801edc2 <sinf+0x2a>
 801edec:	eddd 0a01 	vldr	s1, [sp, #4]
 801edf0:	ed9d 0a00 	vldr	s0, [sp]
 801edf4:	f000 f9b6 	bl	801f164 <__kernel_cosf>
 801edf8:	e7e3      	b.n	801edc2 <sinf+0x2a>
 801edfa:	eddd 0a01 	vldr	s1, [sp, #4]
 801edfe:	ed9d 0a00 	vldr	s0, [sp]
 801ee02:	2001      	movs	r0, #1
 801ee04:	f000 fa06 	bl	801f214 <__kernel_sinf>
 801ee08:	eeb1 0a40 	vneg.f32	s0, s0
 801ee0c:	e7d9      	b.n	801edc2 <sinf+0x2a>
 801ee0e:	eddd 0a01 	vldr	s1, [sp, #4]
 801ee12:	ed9d 0a00 	vldr	s0, [sp]
 801ee16:	f000 f9a5 	bl	801f164 <__kernel_cosf>
 801ee1a:	e7f5      	b.n	801ee08 <sinf+0x70>
 801ee1c:	3f490fd8 	.word	0x3f490fd8
 801ee20:	00000000 	.word	0x00000000

0801ee24 <__ieee754_sqrt>:
 801ee24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee28:	4a68      	ldr	r2, [pc, #416]	@ (801efcc <__ieee754_sqrt+0x1a8>)
 801ee2a:	ec55 4b10 	vmov	r4, r5, d0
 801ee2e:	43aa      	bics	r2, r5
 801ee30:	462b      	mov	r3, r5
 801ee32:	4621      	mov	r1, r4
 801ee34:	d110      	bne.n	801ee58 <__ieee754_sqrt+0x34>
 801ee36:	4622      	mov	r2, r4
 801ee38:	4620      	mov	r0, r4
 801ee3a:	4629      	mov	r1, r5
 801ee3c:	f7e1 fc14 	bl	8000668 <__aeabi_dmul>
 801ee40:	4602      	mov	r2, r0
 801ee42:	460b      	mov	r3, r1
 801ee44:	4620      	mov	r0, r4
 801ee46:	4629      	mov	r1, r5
 801ee48:	f7e1 fa58 	bl	80002fc <__adddf3>
 801ee4c:	4604      	mov	r4, r0
 801ee4e:	460d      	mov	r5, r1
 801ee50:	ec45 4b10 	vmov	d0, r4, r5
 801ee54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee58:	2d00      	cmp	r5, #0
 801ee5a:	dc0e      	bgt.n	801ee7a <__ieee754_sqrt+0x56>
 801ee5c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801ee60:	4322      	orrs	r2, r4
 801ee62:	d0f5      	beq.n	801ee50 <__ieee754_sqrt+0x2c>
 801ee64:	b19d      	cbz	r5, 801ee8e <__ieee754_sqrt+0x6a>
 801ee66:	4622      	mov	r2, r4
 801ee68:	4620      	mov	r0, r4
 801ee6a:	4629      	mov	r1, r5
 801ee6c:	f7e1 fa44 	bl	80002f8 <__aeabi_dsub>
 801ee70:	4602      	mov	r2, r0
 801ee72:	460b      	mov	r3, r1
 801ee74:	f7e1 fd22 	bl	80008bc <__aeabi_ddiv>
 801ee78:	e7e8      	b.n	801ee4c <__ieee754_sqrt+0x28>
 801ee7a:	152a      	asrs	r2, r5, #20
 801ee7c:	d115      	bne.n	801eeaa <__ieee754_sqrt+0x86>
 801ee7e:	2000      	movs	r0, #0
 801ee80:	e009      	b.n	801ee96 <__ieee754_sqrt+0x72>
 801ee82:	0acb      	lsrs	r3, r1, #11
 801ee84:	3a15      	subs	r2, #21
 801ee86:	0549      	lsls	r1, r1, #21
 801ee88:	2b00      	cmp	r3, #0
 801ee8a:	d0fa      	beq.n	801ee82 <__ieee754_sqrt+0x5e>
 801ee8c:	e7f7      	b.n	801ee7e <__ieee754_sqrt+0x5a>
 801ee8e:	462a      	mov	r2, r5
 801ee90:	e7fa      	b.n	801ee88 <__ieee754_sqrt+0x64>
 801ee92:	005b      	lsls	r3, r3, #1
 801ee94:	3001      	adds	r0, #1
 801ee96:	02dc      	lsls	r4, r3, #11
 801ee98:	d5fb      	bpl.n	801ee92 <__ieee754_sqrt+0x6e>
 801ee9a:	1e44      	subs	r4, r0, #1
 801ee9c:	1b12      	subs	r2, r2, r4
 801ee9e:	f1c0 0420 	rsb	r4, r0, #32
 801eea2:	fa21 f404 	lsr.w	r4, r1, r4
 801eea6:	4323      	orrs	r3, r4
 801eea8:	4081      	lsls	r1, r0
 801eeaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801eeae:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801eeb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801eeb6:	07d2      	lsls	r2, r2, #31
 801eeb8:	bf5c      	itt	pl
 801eeba:	005b      	lslpl	r3, r3, #1
 801eebc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801eec0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801eec4:	bf58      	it	pl
 801eec6:	0049      	lslpl	r1, r1, #1
 801eec8:	2600      	movs	r6, #0
 801eeca:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801eece:	106d      	asrs	r5, r5, #1
 801eed0:	0049      	lsls	r1, r1, #1
 801eed2:	2016      	movs	r0, #22
 801eed4:	4632      	mov	r2, r6
 801eed6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801eeda:	1917      	adds	r7, r2, r4
 801eedc:	429f      	cmp	r7, r3
 801eede:	bfde      	ittt	le
 801eee0:	193a      	addle	r2, r7, r4
 801eee2:	1bdb      	suble	r3, r3, r7
 801eee4:	1936      	addle	r6, r6, r4
 801eee6:	0fcf      	lsrs	r7, r1, #31
 801eee8:	3801      	subs	r0, #1
 801eeea:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801eeee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801eef2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801eef6:	d1f0      	bne.n	801eeda <__ieee754_sqrt+0xb6>
 801eef8:	4604      	mov	r4, r0
 801eefa:	2720      	movs	r7, #32
 801eefc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801ef00:	429a      	cmp	r2, r3
 801ef02:	eb00 0e0c 	add.w	lr, r0, ip
 801ef06:	db02      	blt.n	801ef0e <__ieee754_sqrt+0xea>
 801ef08:	d113      	bne.n	801ef32 <__ieee754_sqrt+0x10e>
 801ef0a:	458e      	cmp	lr, r1
 801ef0c:	d811      	bhi.n	801ef32 <__ieee754_sqrt+0x10e>
 801ef0e:	f1be 0f00 	cmp.w	lr, #0
 801ef12:	eb0e 000c 	add.w	r0, lr, ip
 801ef16:	da42      	bge.n	801ef9e <__ieee754_sqrt+0x17a>
 801ef18:	2800      	cmp	r0, #0
 801ef1a:	db40      	blt.n	801ef9e <__ieee754_sqrt+0x17a>
 801ef1c:	f102 0801 	add.w	r8, r2, #1
 801ef20:	1a9b      	subs	r3, r3, r2
 801ef22:	458e      	cmp	lr, r1
 801ef24:	bf88      	it	hi
 801ef26:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801ef2a:	eba1 010e 	sub.w	r1, r1, lr
 801ef2e:	4464      	add	r4, ip
 801ef30:	4642      	mov	r2, r8
 801ef32:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801ef36:	3f01      	subs	r7, #1
 801ef38:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801ef3c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801ef40:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801ef44:	d1dc      	bne.n	801ef00 <__ieee754_sqrt+0xdc>
 801ef46:	4319      	orrs	r1, r3
 801ef48:	d01b      	beq.n	801ef82 <__ieee754_sqrt+0x15e>
 801ef4a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801efd0 <__ieee754_sqrt+0x1ac>
 801ef4e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801efd4 <__ieee754_sqrt+0x1b0>
 801ef52:	e9da 0100 	ldrd	r0, r1, [sl]
 801ef56:	e9db 2300 	ldrd	r2, r3, [fp]
 801ef5a:	f7e1 f9cd 	bl	80002f8 <__aeabi_dsub>
 801ef5e:	e9da 8900 	ldrd	r8, r9, [sl]
 801ef62:	4602      	mov	r2, r0
 801ef64:	460b      	mov	r3, r1
 801ef66:	4640      	mov	r0, r8
 801ef68:	4649      	mov	r1, r9
 801ef6a:	f7e1 fdf9 	bl	8000b60 <__aeabi_dcmple>
 801ef6e:	b140      	cbz	r0, 801ef82 <__ieee754_sqrt+0x15e>
 801ef70:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801ef74:	e9da 0100 	ldrd	r0, r1, [sl]
 801ef78:	e9db 2300 	ldrd	r2, r3, [fp]
 801ef7c:	d111      	bne.n	801efa2 <__ieee754_sqrt+0x17e>
 801ef7e:	3601      	adds	r6, #1
 801ef80:	463c      	mov	r4, r7
 801ef82:	1072      	asrs	r2, r6, #1
 801ef84:	0863      	lsrs	r3, r4, #1
 801ef86:	07f1      	lsls	r1, r6, #31
 801ef88:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801ef8c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801ef90:	bf48      	it	mi
 801ef92:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801ef96:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801ef9a:	4618      	mov	r0, r3
 801ef9c:	e756      	b.n	801ee4c <__ieee754_sqrt+0x28>
 801ef9e:	4690      	mov	r8, r2
 801efa0:	e7be      	b.n	801ef20 <__ieee754_sqrt+0xfc>
 801efa2:	f7e1 f9ab 	bl	80002fc <__adddf3>
 801efa6:	e9da 8900 	ldrd	r8, r9, [sl]
 801efaa:	4602      	mov	r2, r0
 801efac:	460b      	mov	r3, r1
 801efae:	4640      	mov	r0, r8
 801efb0:	4649      	mov	r1, r9
 801efb2:	f7e1 fdcb 	bl	8000b4c <__aeabi_dcmplt>
 801efb6:	b120      	cbz	r0, 801efc2 <__ieee754_sqrt+0x19e>
 801efb8:	1ca0      	adds	r0, r4, #2
 801efba:	bf08      	it	eq
 801efbc:	3601      	addeq	r6, #1
 801efbe:	3402      	adds	r4, #2
 801efc0:	e7df      	b.n	801ef82 <__ieee754_sqrt+0x15e>
 801efc2:	1c63      	adds	r3, r4, #1
 801efc4:	f023 0401 	bic.w	r4, r3, #1
 801efc8:	e7db      	b.n	801ef82 <__ieee754_sqrt+0x15e>
 801efca:	bf00      	nop
 801efcc:	7ff00000 	.word	0x7ff00000
 801efd0:	20003518 	.word	0x20003518
 801efd4:	20003510 	.word	0x20003510

0801efd8 <__ieee754_atan2>:
 801efd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801efdc:	ec57 6b11 	vmov	r6, r7, d1
 801efe0:	4273      	negs	r3, r6
 801efe2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 801f160 <__ieee754_atan2+0x188>
 801efe6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801efea:	4333      	orrs	r3, r6
 801efec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801eff0:	4543      	cmp	r3, r8
 801eff2:	ec51 0b10 	vmov	r0, r1, d0
 801eff6:	4635      	mov	r5, r6
 801eff8:	d809      	bhi.n	801f00e <__ieee754_atan2+0x36>
 801effa:	4244      	negs	r4, r0
 801effc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801f000:	4304      	orrs	r4, r0
 801f002:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801f006:	4544      	cmp	r4, r8
 801f008:	468e      	mov	lr, r1
 801f00a:	4681      	mov	r9, r0
 801f00c:	d907      	bls.n	801f01e <__ieee754_atan2+0x46>
 801f00e:	4632      	mov	r2, r6
 801f010:	463b      	mov	r3, r7
 801f012:	f7e1 f973 	bl	80002fc <__adddf3>
 801f016:	ec41 0b10 	vmov	d0, r0, r1
 801f01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f01e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801f022:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801f026:	4334      	orrs	r4, r6
 801f028:	d103      	bne.n	801f032 <__ieee754_atan2+0x5a>
 801f02a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f02e:	f7ff bccf 	b.w	801e9d0 <atan>
 801f032:	17bc      	asrs	r4, r7, #30
 801f034:	f004 0402 	and.w	r4, r4, #2
 801f038:	ea53 0909 	orrs.w	r9, r3, r9
 801f03c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801f040:	d107      	bne.n	801f052 <__ieee754_atan2+0x7a>
 801f042:	2c02      	cmp	r4, #2
 801f044:	d05f      	beq.n	801f106 <__ieee754_atan2+0x12e>
 801f046:	2c03      	cmp	r4, #3
 801f048:	d1e5      	bne.n	801f016 <__ieee754_atan2+0x3e>
 801f04a:	a141      	add	r1, pc, #260	@ (adr r1, 801f150 <__ieee754_atan2+0x178>)
 801f04c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f050:	e7e1      	b.n	801f016 <__ieee754_atan2+0x3e>
 801f052:	4315      	orrs	r5, r2
 801f054:	d106      	bne.n	801f064 <__ieee754_atan2+0x8c>
 801f056:	f1be 0f00 	cmp.w	lr, #0
 801f05a:	da5f      	bge.n	801f11c <__ieee754_atan2+0x144>
 801f05c:	a13e      	add	r1, pc, #248	@ (adr r1, 801f158 <__ieee754_atan2+0x180>)
 801f05e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f062:	e7d8      	b.n	801f016 <__ieee754_atan2+0x3e>
 801f064:	4542      	cmp	r2, r8
 801f066:	d10f      	bne.n	801f088 <__ieee754_atan2+0xb0>
 801f068:	4293      	cmp	r3, r2
 801f06a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801f06e:	d107      	bne.n	801f080 <__ieee754_atan2+0xa8>
 801f070:	2c02      	cmp	r4, #2
 801f072:	d84c      	bhi.n	801f10e <__ieee754_atan2+0x136>
 801f074:	4b34      	ldr	r3, [pc, #208]	@ (801f148 <__ieee754_atan2+0x170>)
 801f076:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f07a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f07e:	e7ca      	b.n	801f016 <__ieee754_atan2+0x3e>
 801f080:	2c02      	cmp	r4, #2
 801f082:	d848      	bhi.n	801f116 <__ieee754_atan2+0x13e>
 801f084:	4b31      	ldr	r3, [pc, #196]	@ (801f14c <__ieee754_atan2+0x174>)
 801f086:	e7f6      	b.n	801f076 <__ieee754_atan2+0x9e>
 801f088:	4543      	cmp	r3, r8
 801f08a:	d0e4      	beq.n	801f056 <__ieee754_atan2+0x7e>
 801f08c:	1a9b      	subs	r3, r3, r2
 801f08e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801f092:	ea4f 5223 	mov.w	r2, r3, asr #20
 801f096:	da1e      	bge.n	801f0d6 <__ieee754_atan2+0xfe>
 801f098:	2f00      	cmp	r7, #0
 801f09a:	da01      	bge.n	801f0a0 <__ieee754_atan2+0xc8>
 801f09c:	323c      	adds	r2, #60	@ 0x3c
 801f09e:	db1e      	blt.n	801f0de <__ieee754_atan2+0x106>
 801f0a0:	4632      	mov	r2, r6
 801f0a2:	463b      	mov	r3, r7
 801f0a4:	f7e1 fc0a 	bl	80008bc <__aeabi_ddiv>
 801f0a8:	ec41 0b10 	vmov	d0, r0, r1
 801f0ac:	f7ff fe28 	bl	801ed00 <fabs>
 801f0b0:	f7ff fc8e 	bl	801e9d0 <atan>
 801f0b4:	ec51 0b10 	vmov	r0, r1, d0
 801f0b8:	2c01      	cmp	r4, #1
 801f0ba:	d013      	beq.n	801f0e4 <__ieee754_atan2+0x10c>
 801f0bc:	2c02      	cmp	r4, #2
 801f0be:	d015      	beq.n	801f0ec <__ieee754_atan2+0x114>
 801f0c0:	2c00      	cmp	r4, #0
 801f0c2:	d0a8      	beq.n	801f016 <__ieee754_atan2+0x3e>
 801f0c4:	a318      	add	r3, pc, #96	@ (adr r3, 801f128 <__ieee754_atan2+0x150>)
 801f0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0ca:	f7e1 f915 	bl	80002f8 <__aeabi_dsub>
 801f0ce:	a318      	add	r3, pc, #96	@ (adr r3, 801f130 <__ieee754_atan2+0x158>)
 801f0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0d4:	e014      	b.n	801f100 <__ieee754_atan2+0x128>
 801f0d6:	a118      	add	r1, pc, #96	@ (adr r1, 801f138 <__ieee754_atan2+0x160>)
 801f0d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f0dc:	e7ec      	b.n	801f0b8 <__ieee754_atan2+0xe0>
 801f0de:	2000      	movs	r0, #0
 801f0e0:	2100      	movs	r1, #0
 801f0e2:	e7e9      	b.n	801f0b8 <__ieee754_atan2+0xe0>
 801f0e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f0e8:	4619      	mov	r1, r3
 801f0ea:	e794      	b.n	801f016 <__ieee754_atan2+0x3e>
 801f0ec:	a30e      	add	r3, pc, #56	@ (adr r3, 801f128 <__ieee754_atan2+0x150>)
 801f0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0f2:	f7e1 f901 	bl	80002f8 <__aeabi_dsub>
 801f0f6:	4602      	mov	r2, r0
 801f0f8:	460b      	mov	r3, r1
 801f0fa:	a10d      	add	r1, pc, #52	@ (adr r1, 801f130 <__ieee754_atan2+0x158>)
 801f0fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f100:	f7e1 f8fa 	bl	80002f8 <__aeabi_dsub>
 801f104:	e787      	b.n	801f016 <__ieee754_atan2+0x3e>
 801f106:	a10a      	add	r1, pc, #40	@ (adr r1, 801f130 <__ieee754_atan2+0x158>)
 801f108:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f10c:	e783      	b.n	801f016 <__ieee754_atan2+0x3e>
 801f10e:	a10c      	add	r1, pc, #48	@ (adr r1, 801f140 <__ieee754_atan2+0x168>)
 801f110:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f114:	e77f      	b.n	801f016 <__ieee754_atan2+0x3e>
 801f116:	2000      	movs	r0, #0
 801f118:	2100      	movs	r1, #0
 801f11a:	e77c      	b.n	801f016 <__ieee754_atan2+0x3e>
 801f11c:	a106      	add	r1, pc, #24	@ (adr r1, 801f138 <__ieee754_atan2+0x160>)
 801f11e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f122:	e778      	b.n	801f016 <__ieee754_atan2+0x3e>
 801f124:	f3af 8000 	nop.w
 801f128:	33145c07 	.word	0x33145c07
 801f12c:	3ca1a626 	.word	0x3ca1a626
 801f130:	54442d18 	.word	0x54442d18
 801f134:	400921fb 	.word	0x400921fb
 801f138:	54442d18 	.word	0x54442d18
 801f13c:	3ff921fb 	.word	0x3ff921fb
 801f140:	54442d18 	.word	0x54442d18
 801f144:	3fe921fb 	.word	0x3fe921fb
 801f148:	08022110 	.word	0x08022110
 801f14c:	080220f8 	.word	0x080220f8
 801f150:	54442d18 	.word	0x54442d18
 801f154:	c00921fb 	.word	0xc00921fb
 801f158:	54442d18 	.word	0x54442d18
 801f15c:	bff921fb 	.word	0xbff921fb
 801f160:	7ff00000 	.word	0x7ff00000

0801f164 <__kernel_cosf>:
 801f164:	ee10 3a10 	vmov	r3, s0
 801f168:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f16c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801f170:	eef0 6a40 	vmov.f32	s13, s0
 801f174:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801f178:	d204      	bcs.n	801f184 <__kernel_cosf+0x20>
 801f17a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801f17e:	ee17 2a90 	vmov	r2, s15
 801f182:	b342      	cbz	r2, 801f1d6 <__kernel_cosf+0x72>
 801f184:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801f188:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 801f1f4 <__kernel_cosf+0x90>
 801f18c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 801f1f8 <__kernel_cosf+0x94>
 801f190:	4a1a      	ldr	r2, [pc, #104]	@ (801f1fc <__kernel_cosf+0x98>)
 801f192:	eea7 6a27 	vfma.f32	s12, s14, s15
 801f196:	4293      	cmp	r3, r2
 801f198:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801f200 <__kernel_cosf+0x9c>
 801f19c:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f1a0:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 801f204 <__kernel_cosf+0xa0>
 801f1a4:	eea7 6a87 	vfma.f32	s12, s15, s14
 801f1a8:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801f208 <__kernel_cosf+0xa4>
 801f1ac:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f1b0:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 801f20c <__kernel_cosf+0xa8>
 801f1b4:	eea7 6a87 	vfma.f32	s12, s15, s14
 801f1b8:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 801f1bc:	ee26 6a07 	vmul.f32	s12, s12, s14
 801f1c0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801f1c4:	eee7 0a06 	vfma.f32	s1, s14, s12
 801f1c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f1cc:	d804      	bhi.n	801f1d8 <__kernel_cosf+0x74>
 801f1ce:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801f1d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f1d6:	4770      	bx	lr
 801f1d8:	4a0d      	ldr	r2, [pc, #52]	@ (801f210 <__kernel_cosf+0xac>)
 801f1da:	4293      	cmp	r3, r2
 801f1dc:	bf9a      	itte	ls
 801f1de:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801f1e2:	ee07 3a10 	vmovls	s14, r3
 801f1e6:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801f1ea:	ee30 0a47 	vsub.f32	s0, s0, s14
 801f1ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f1f2:	e7ec      	b.n	801f1ce <__kernel_cosf+0x6a>
 801f1f4:	ad47d74e 	.word	0xad47d74e
 801f1f8:	310f74f6 	.word	0x310f74f6
 801f1fc:	3e999999 	.word	0x3e999999
 801f200:	b493f27c 	.word	0xb493f27c
 801f204:	37d00d01 	.word	0x37d00d01
 801f208:	bab60b61 	.word	0xbab60b61
 801f20c:	3d2aaaab 	.word	0x3d2aaaab
 801f210:	3f480000 	.word	0x3f480000

0801f214 <__kernel_sinf>:
 801f214:	ee10 3a10 	vmov	r3, s0
 801f218:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f21c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801f220:	d204      	bcs.n	801f22c <__kernel_sinf+0x18>
 801f222:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801f226:	ee17 3a90 	vmov	r3, s15
 801f22a:	b35b      	cbz	r3, 801f284 <__kernel_sinf+0x70>
 801f22c:	ee20 7a00 	vmul.f32	s14, s0, s0
 801f230:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801f288 <__kernel_sinf+0x74>
 801f234:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801f28c <__kernel_sinf+0x78>
 801f238:	eea7 6a27 	vfma.f32	s12, s14, s15
 801f23c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 801f290 <__kernel_sinf+0x7c>
 801f240:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f244:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 801f294 <__kernel_sinf+0x80>
 801f248:	eea7 6a87 	vfma.f32	s12, s15, s14
 801f24c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801f298 <__kernel_sinf+0x84>
 801f250:	ee60 6a07 	vmul.f32	s13, s0, s14
 801f254:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f258:	b930      	cbnz	r0, 801f268 <__kernel_sinf+0x54>
 801f25a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 801f29c <__kernel_sinf+0x88>
 801f25e:	eea7 6a27 	vfma.f32	s12, s14, s15
 801f262:	eea6 0a26 	vfma.f32	s0, s12, s13
 801f266:	4770      	bx	lr
 801f268:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801f26c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801f270:	eee0 7a86 	vfma.f32	s15, s1, s12
 801f274:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801f278:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801f2a0 <__kernel_sinf+0x8c>
 801f27c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801f280:	ee30 0a60 	vsub.f32	s0, s0, s1
 801f284:	4770      	bx	lr
 801f286:	bf00      	nop
 801f288:	2f2ec9d3 	.word	0x2f2ec9d3
 801f28c:	b2d72f34 	.word	0xb2d72f34
 801f290:	3638ef1b 	.word	0x3638ef1b
 801f294:	b9500d01 	.word	0xb9500d01
 801f298:	3c088889 	.word	0x3c088889
 801f29c:	be2aaaab 	.word	0xbe2aaaab
 801f2a0:	3e2aaaab 	.word	0x3e2aaaab

0801f2a4 <__ieee754_rem_pio2f>:
 801f2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f2a6:	ee10 6a10 	vmov	r6, s0
 801f2aa:	4b88      	ldr	r3, [pc, #544]	@ (801f4cc <__ieee754_rem_pio2f+0x228>)
 801f2ac:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 801f2b0:	429d      	cmp	r5, r3
 801f2b2:	b087      	sub	sp, #28
 801f2b4:	4604      	mov	r4, r0
 801f2b6:	d805      	bhi.n	801f2c4 <__ieee754_rem_pio2f+0x20>
 801f2b8:	2300      	movs	r3, #0
 801f2ba:	ed80 0a00 	vstr	s0, [r0]
 801f2be:	6043      	str	r3, [r0, #4]
 801f2c0:	2000      	movs	r0, #0
 801f2c2:	e022      	b.n	801f30a <__ieee754_rem_pio2f+0x66>
 801f2c4:	4b82      	ldr	r3, [pc, #520]	@ (801f4d0 <__ieee754_rem_pio2f+0x22c>)
 801f2c6:	429d      	cmp	r5, r3
 801f2c8:	d83a      	bhi.n	801f340 <__ieee754_rem_pio2f+0x9c>
 801f2ca:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801f2ce:	2e00      	cmp	r6, #0
 801f2d0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801f4d4 <__ieee754_rem_pio2f+0x230>
 801f2d4:	4a80      	ldr	r2, [pc, #512]	@ (801f4d8 <__ieee754_rem_pio2f+0x234>)
 801f2d6:	f023 030f 	bic.w	r3, r3, #15
 801f2da:	dd18      	ble.n	801f30e <__ieee754_rem_pio2f+0x6a>
 801f2dc:	4293      	cmp	r3, r2
 801f2de:	ee70 7a47 	vsub.f32	s15, s0, s14
 801f2e2:	bf09      	itett	eq
 801f2e4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801f4dc <__ieee754_rem_pio2f+0x238>
 801f2e8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 801f4e0 <__ieee754_rem_pio2f+0x23c>
 801f2ec:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801f4e4 <__ieee754_rem_pio2f+0x240>
 801f2f0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801f2f4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 801f2f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f2fc:	ed80 7a00 	vstr	s14, [r0]
 801f300:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f304:	edc0 7a01 	vstr	s15, [r0, #4]
 801f308:	2001      	movs	r0, #1
 801f30a:	b007      	add	sp, #28
 801f30c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f30e:	4293      	cmp	r3, r2
 801f310:	ee70 7a07 	vadd.f32	s15, s0, s14
 801f314:	bf09      	itett	eq
 801f316:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801f4dc <__ieee754_rem_pio2f+0x238>
 801f31a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 801f4e0 <__ieee754_rem_pio2f+0x23c>
 801f31e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801f4e4 <__ieee754_rem_pio2f+0x240>
 801f322:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801f326:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801f32a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f32e:	ed80 7a00 	vstr	s14, [r0]
 801f332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f336:	edc0 7a01 	vstr	s15, [r0, #4]
 801f33a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f33e:	e7e4      	b.n	801f30a <__ieee754_rem_pio2f+0x66>
 801f340:	4b69      	ldr	r3, [pc, #420]	@ (801f4e8 <__ieee754_rem_pio2f+0x244>)
 801f342:	429d      	cmp	r5, r3
 801f344:	d873      	bhi.n	801f42e <__ieee754_rem_pio2f+0x18a>
 801f346:	f000 f8dd 	bl	801f504 <fabsf>
 801f34a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801f4ec <__ieee754_rem_pio2f+0x248>
 801f34e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801f352:	eee0 7a07 	vfma.f32	s15, s0, s14
 801f356:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f35a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f35e:	ee17 0a90 	vmov	r0, s15
 801f362:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801f4d4 <__ieee754_rem_pio2f+0x230>
 801f366:	eea7 0a67 	vfms.f32	s0, s14, s15
 801f36a:	281f      	cmp	r0, #31
 801f36c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801f4e0 <__ieee754_rem_pio2f+0x23c>
 801f370:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f374:	eeb1 6a47 	vneg.f32	s12, s14
 801f378:	ee70 6a67 	vsub.f32	s13, s0, s15
 801f37c:	ee16 1a90 	vmov	r1, s13
 801f380:	dc09      	bgt.n	801f396 <__ieee754_rem_pio2f+0xf2>
 801f382:	4a5b      	ldr	r2, [pc, #364]	@ (801f4f0 <__ieee754_rem_pio2f+0x24c>)
 801f384:	1e47      	subs	r7, r0, #1
 801f386:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801f38a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801f38e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801f392:	4293      	cmp	r3, r2
 801f394:	d107      	bne.n	801f3a6 <__ieee754_rem_pio2f+0x102>
 801f396:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801f39a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801f39e:	2a08      	cmp	r2, #8
 801f3a0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801f3a4:	dc14      	bgt.n	801f3d0 <__ieee754_rem_pio2f+0x12c>
 801f3a6:	6021      	str	r1, [r4, #0]
 801f3a8:	ed94 7a00 	vldr	s14, [r4]
 801f3ac:	ee30 0a47 	vsub.f32	s0, s0, s14
 801f3b0:	2e00      	cmp	r6, #0
 801f3b2:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f3b6:	ed84 0a01 	vstr	s0, [r4, #4]
 801f3ba:	daa6      	bge.n	801f30a <__ieee754_rem_pio2f+0x66>
 801f3bc:	eeb1 7a47 	vneg.f32	s14, s14
 801f3c0:	eeb1 0a40 	vneg.f32	s0, s0
 801f3c4:	ed84 7a00 	vstr	s14, [r4]
 801f3c8:	ed84 0a01 	vstr	s0, [r4, #4]
 801f3cc:	4240      	negs	r0, r0
 801f3ce:	e79c      	b.n	801f30a <__ieee754_rem_pio2f+0x66>
 801f3d0:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801f4dc <__ieee754_rem_pio2f+0x238>
 801f3d4:	eef0 6a40 	vmov.f32	s13, s0
 801f3d8:	eee6 6a25 	vfma.f32	s13, s12, s11
 801f3dc:	ee70 7a66 	vsub.f32	s15, s0, s13
 801f3e0:	eee6 7a25 	vfma.f32	s15, s12, s11
 801f3e4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801f4e4 <__ieee754_rem_pio2f+0x240>
 801f3e8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801f3ec:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801f3f0:	ee15 2a90 	vmov	r2, s11
 801f3f4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801f3f8:	1a5b      	subs	r3, r3, r1
 801f3fa:	2b19      	cmp	r3, #25
 801f3fc:	dc04      	bgt.n	801f408 <__ieee754_rem_pio2f+0x164>
 801f3fe:	edc4 5a00 	vstr	s11, [r4]
 801f402:	eeb0 0a66 	vmov.f32	s0, s13
 801f406:	e7cf      	b.n	801f3a8 <__ieee754_rem_pio2f+0x104>
 801f408:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801f4f4 <__ieee754_rem_pio2f+0x250>
 801f40c:	eeb0 0a66 	vmov.f32	s0, s13
 801f410:	eea6 0a25 	vfma.f32	s0, s12, s11
 801f414:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801f418:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801f4f8 <__ieee754_rem_pio2f+0x254>
 801f41c:	eee6 7a25 	vfma.f32	s15, s12, s11
 801f420:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801f424:	ee30 7a67 	vsub.f32	s14, s0, s15
 801f428:	ed84 7a00 	vstr	s14, [r4]
 801f42c:	e7bc      	b.n	801f3a8 <__ieee754_rem_pio2f+0x104>
 801f42e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801f432:	d306      	bcc.n	801f442 <__ieee754_rem_pio2f+0x19e>
 801f434:	ee70 7a40 	vsub.f32	s15, s0, s0
 801f438:	edc0 7a01 	vstr	s15, [r0, #4]
 801f43c:	edc0 7a00 	vstr	s15, [r0]
 801f440:	e73e      	b.n	801f2c0 <__ieee754_rem_pio2f+0x1c>
 801f442:	15ea      	asrs	r2, r5, #23
 801f444:	3a86      	subs	r2, #134	@ 0x86
 801f446:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801f44a:	ee07 3a90 	vmov	s15, r3
 801f44e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801f452:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801f4fc <__ieee754_rem_pio2f+0x258>
 801f456:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f45a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f45e:	ed8d 7a03 	vstr	s14, [sp, #12]
 801f462:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f466:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801f46a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f46e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f472:	ed8d 7a04 	vstr	s14, [sp, #16]
 801f476:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f47a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801f47e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f482:	edcd 7a05 	vstr	s15, [sp, #20]
 801f486:	d11e      	bne.n	801f4c6 <__ieee754_rem_pio2f+0x222>
 801f488:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801f48c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f490:	bf0c      	ite	eq
 801f492:	2301      	moveq	r3, #1
 801f494:	2302      	movne	r3, #2
 801f496:	491a      	ldr	r1, [pc, #104]	@ (801f500 <__ieee754_rem_pio2f+0x25c>)
 801f498:	9101      	str	r1, [sp, #4]
 801f49a:	2102      	movs	r1, #2
 801f49c:	9100      	str	r1, [sp, #0]
 801f49e:	a803      	add	r0, sp, #12
 801f4a0:	4621      	mov	r1, r4
 801f4a2:	f000 f837 	bl	801f514 <__kernel_rem_pio2f>
 801f4a6:	2e00      	cmp	r6, #0
 801f4a8:	f6bf af2f 	bge.w	801f30a <__ieee754_rem_pio2f+0x66>
 801f4ac:	edd4 7a00 	vldr	s15, [r4]
 801f4b0:	eef1 7a67 	vneg.f32	s15, s15
 801f4b4:	edc4 7a00 	vstr	s15, [r4]
 801f4b8:	edd4 7a01 	vldr	s15, [r4, #4]
 801f4bc:	eef1 7a67 	vneg.f32	s15, s15
 801f4c0:	edc4 7a01 	vstr	s15, [r4, #4]
 801f4c4:	e782      	b.n	801f3cc <__ieee754_rem_pio2f+0x128>
 801f4c6:	2303      	movs	r3, #3
 801f4c8:	e7e5      	b.n	801f496 <__ieee754_rem_pio2f+0x1f2>
 801f4ca:	bf00      	nop
 801f4cc:	3f490fd8 	.word	0x3f490fd8
 801f4d0:	4016cbe3 	.word	0x4016cbe3
 801f4d4:	3fc90f80 	.word	0x3fc90f80
 801f4d8:	3fc90fd0 	.word	0x3fc90fd0
 801f4dc:	37354400 	.word	0x37354400
 801f4e0:	37354443 	.word	0x37354443
 801f4e4:	2e85a308 	.word	0x2e85a308
 801f4e8:	43490f80 	.word	0x43490f80
 801f4ec:	3f22f984 	.word	0x3f22f984
 801f4f0:	08022128 	.word	0x08022128
 801f4f4:	2e85a300 	.word	0x2e85a300
 801f4f8:	248d3132 	.word	0x248d3132
 801f4fc:	43800000 	.word	0x43800000
 801f500:	080221a8 	.word	0x080221a8

0801f504 <fabsf>:
 801f504:	ee10 3a10 	vmov	r3, s0
 801f508:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f50c:	ee00 3a10 	vmov	s0, r3
 801f510:	4770      	bx	lr
	...

0801f514 <__kernel_rem_pio2f>:
 801f514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f518:	ed2d 8b04 	vpush	{d8-d9}
 801f51c:	b0d9      	sub	sp, #356	@ 0x164
 801f51e:	4690      	mov	r8, r2
 801f520:	9001      	str	r0, [sp, #4]
 801f522:	4ab9      	ldr	r2, [pc, #740]	@ (801f808 <__kernel_rem_pio2f+0x2f4>)
 801f524:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801f526:	f118 0f04 	cmn.w	r8, #4
 801f52a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801f52e:	460f      	mov	r7, r1
 801f530:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 801f534:	db27      	blt.n	801f586 <__kernel_rem_pio2f+0x72>
 801f536:	f1b8 0203 	subs.w	r2, r8, #3
 801f53a:	bf48      	it	mi
 801f53c:	f108 0204 	addmi.w	r2, r8, #4
 801f540:	10d2      	asrs	r2, r2, #3
 801f542:	1c55      	adds	r5, r2, #1
 801f544:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801f546:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 801f818 <__kernel_rem_pio2f+0x304>
 801f54a:	00e8      	lsls	r0, r5, #3
 801f54c:	eba2 060b 	sub.w	r6, r2, fp
 801f550:	9002      	str	r0, [sp, #8]
 801f552:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801f556:	eb0a 0c0b 	add.w	ip, sl, fp
 801f55a:	ac1c      	add	r4, sp, #112	@ 0x70
 801f55c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801f560:	2000      	movs	r0, #0
 801f562:	4560      	cmp	r0, ip
 801f564:	dd11      	ble.n	801f58a <__kernel_rem_pio2f+0x76>
 801f566:	a91c      	add	r1, sp, #112	@ 0x70
 801f568:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801f56c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801f570:	f04f 0c00 	mov.w	ip, #0
 801f574:	45d4      	cmp	ip, sl
 801f576:	dc27      	bgt.n	801f5c8 <__kernel_rem_pio2f+0xb4>
 801f578:	f8dd e004 	ldr.w	lr, [sp, #4]
 801f57c:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 801f818 <__kernel_rem_pio2f+0x304>
 801f580:	4606      	mov	r6, r0
 801f582:	2400      	movs	r4, #0
 801f584:	e016      	b.n	801f5b4 <__kernel_rem_pio2f+0xa0>
 801f586:	2200      	movs	r2, #0
 801f588:	e7db      	b.n	801f542 <__kernel_rem_pio2f+0x2e>
 801f58a:	42c6      	cmn	r6, r0
 801f58c:	bf5d      	ittte	pl
 801f58e:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801f592:	ee07 1a90 	vmovpl	s15, r1
 801f596:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801f59a:	eef0 7a47 	vmovmi.f32	s15, s14
 801f59e:	ece4 7a01 	vstmia	r4!, {s15}
 801f5a2:	3001      	adds	r0, #1
 801f5a4:	e7dd      	b.n	801f562 <__kernel_rem_pio2f+0x4e>
 801f5a6:	ecfe 6a01 	vldmia	lr!, {s13}
 801f5aa:	ed96 7a00 	vldr	s14, [r6]
 801f5ae:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f5b2:	3401      	adds	r4, #1
 801f5b4:	455c      	cmp	r4, fp
 801f5b6:	f1a6 0604 	sub.w	r6, r6, #4
 801f5ba:	ddf4      	ble.n	801f5a6 <__kernel_rem_pio2f+0x92>
 801f5bc:	ece9 7a01 	vstmia	r9!, {s15}
 801f5c0:	f10c 0c01 	add.w	ip, ip, #1
 801f5c4:	3004      	adds	r0, #4
 801f5c6:	e7d5      	b.n	801f574 <__kernel_rem_pio2f+0x60>
 801f5c8:	a908      	add	r1, sp, #32
 801f5ca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f5ce:	9104      	str	r1, [sp, #16]
 801f5d0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801f5d2:	eddf 8a90 	vldr	s17, [pc, #576]	@ 801f814 <__kernel_rem_pio2f+0x300>
 801f5d6:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 801f810 <__kernel_rem_pio2f+0x2fc>
 801f5da:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801f5de:	9203      	str	r2, [sp, #12]
 801f5e0:	4654      	mov	r4, sl
 801f5e2:	00a2      	lsls	r2, r4, #2
 801f5e4:	9205      	str	r2, [sp, #20]
 801f5e6:	aa58      	add	r2, sp, #352	@ 0x160
 801f5e8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801f5ec:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801f5f0:	a944      	add	r1, sp, #272	@ 0x110
 801f5f2:	aa08      	add	r2, sp, #32
 801f5f4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801f5f8:	4694      	mov	ip, r2
 801f5fa:	4626      	mov	r6, r4
 801f5fc:	2e00      	cmp	r6, #0
 801f5fe:	f1a0 0004 	sub.w	r0, r0, #4
 801f602:	dc4c      	bgt.n	801f69e <__kernel_rem_pio2f+0x18a>
 801f604:	4628      	mov	r0, r5
 801f606:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801f60a:	f000 f9f5 	bl	801f9f8 <scalbnf>
 801f60e:	eeb0 8a40 	vmov.f32	s16, s0
 801f612:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801f616:	ee28 0a00 	vmul.f32	s0, s16, s0
 801f61a:	f000 fa53 	bl	801fac4 <floorf>
 801f61e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801f622:	eea0 8a67 	vfms.f32	s16, s0, s15
 801f626:	2d00      	cmp	r5, #0
 801f628:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f62c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801f630:	ee17 9a90 	vmov	r9, s15
 801f634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f638:	ee38 8a67 	vsub.f32	s16, s16, s15
 801f63c:	dd41      	ble.n	801f6c2 <__kernel_rem_pio2f+0x1ae>
 801f63e:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801f642:	a908      	add	r1, sp, #32
 801f644:	f1c5 0e08 	rsb	lr, r5, #8
 801f648:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801f64c:	fa46 f00e 	asr.w	r0, r6, lr
 801f650:	4481      	add	r9, r0
 801f652:	fa00 f00e 	lsl.w	r0, r0, lr
 801f656:	1a36      	subs	r6, r6, r0
 801f658:	f1c5 0007 	rsb	r0, r5, #7
 801f65c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801f660:	4106      	asrs	r6, r0
 801f662:	2e00      	cmp	r6, #0
 801f664:	dd3c      	ble.n	801f6e0 <__kernel_rem_pio2f+0x1cc>
 801f666:	f04f 0e00 	mov.w	lr, #0
 801f66a:	f109 0901 	add.w	r9, r9, #1
 801f66e:	4670      	mov	r0, lr
 801f670:	4574      	cmp	r4, lr
 801f672:	dc68      	bgt.n	801f746 <__kernel_rem_pio2f+0x232>
 801f674:	2d00      	cmp	r5, #0
 801f676:	dd03      	ble.n	801f680 <__kernel_rem_pio2f+0x16c>
 801f678:	2d01      	cmp	r5, #1
 801f67a:	d074      	beq.n	801f766 <__kernel_rem_pio2f+0x252>
 801f67c:	2d02      	cmp	r5, #2
 801f67e:	d07d      	beq.n	801f77c <__kernel_rem_pio2f+0x268>
 801f680:	2e02      	cmp	r6, #2
 801f682:	d12d      	bne.n	801f6e0 <__kernel_rem_pio2f+0x1cc>
 801f684:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801f688:	ee30 8a48 	vsub.f32	s16, s0, s16
 801f68c:	b340      	cbz	r0, 801f6e0 <__kernel_rem_pio2f+0x1cc>
 801f68e:	4628      	mov	r0, r5
 801f690:	9306      	str	r3, [sp, #24]
 801f692:	f000 f9b1 	bl	801f9f8 <scalbnf>
 801f696:	9b06      	ldr	r3, [sp, #24]
 801f698:	ee38 8a40 	vsub.f32	s16, s16, s0
 801f69c:	e020      	b.n	801f6e0 <__kernel_rem_pio2f+0x1cc>
 801f69e:	ee60 7a28 	vmul.f32	s15, s0, s17
 801f6a2:	3e01      	subs	r6, #1
 801f6a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f6a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f6ac:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801f6b0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f6b4:	ecac 0a01 	vstmia	ip!, {s0}
 801f6b8:	ed90 0a00 	vldr	s0, [r0]
 801f6bc:	ee37 0a80 	vadd.f32	s0, s15, s0
 801f6c0:	e79c      	b.n	801f5fc <__kernel_rem_pio2f+0xe8>
 801f6c2:	d105      	bne.n	801f6d0 <__kernel_rem_pio2f+0x1bc>
 801f6c4:	1e60      	subs	r0, r4, #1
 801f6c6:	a908      	add	r1, sp, #32
 801f6c8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801f6cc:	11f6      	asrs	r6, r6, #7
 801f6ce:	e7c8      	b.n	801f662 <__kernel_rem_pio2f+0x14e>
 801f6d0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801f6d4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801f6d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f6dc:	da31      	bge.n	801f742 <__kernel_rem_pio2f+0x22e>
 801f6de:	2600      	movs	r6, #0
 801f6e0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801f6e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f6e8:	f040 8098 	bne.w	801f81c <__kernel_rem_pio2f+0x308>
 801f6ec:	1e60      	subs	r0, r4, #1
 801f6ee:	2200      	movs	r2, #0
 801f6f0:	4550      	cmp	r0, sl
 801f6f2:	da4b      	bge.n	801f78c <__kernel_rem_pio2f+0x278>
 801f6f4:	2a00      	cmp	r2, #0
 801f6f6:	d065      	beq.n	801f7c4 <__kernel_rem_pio2f+0x2b0>
 801f6f8:	3c01      	subs	r4, #1
 801f6fa:	ab08      	add	r3, sp, #32
 801f6fc:	3d08      	subs	r5, #8
 801f6fe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801f702:	2b00      	cmp	r3, #0
 801f704:	d0f8      	beq.n	801f6f8 <__kernel_rem_pio2f+0x1e4>
 801f706:	4628      	mov	r0, r5
 801f708:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801f70c:	f000 f974 	bl	801f9f8 <scalbnf>
 801f710:	1c63      	adds	r3, r4, #1
 801f712:	aa44      	add	r2, sp, #272	@ 0x110
 801f714:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801f814 <__kernel_rem_pio2f+0x300>
 801f718:	0099      	lsls	r1, r3, #2
 801f71a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801f71e:	4623      	mov	r3, r4
 801f720:	2b00      	cmp	r3, #0
 801f722:	f280 80a9 	bge.w	801f878 <__kernel_rem_pio2f+0x364>
 801f726:	4623      	mov	r3, r4
 801f728:	2b00      	cmp	r3, #0
 801f72a:	f2c0 80c7 	blt.w	801f8bc <__kernel_rem_pio2f+0x3a8>
 801f72e:	aa44      	add	r2, sp, #272	@ 0x110
 801f730:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801f734:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801f80c <__kernel_rem_pio2f+0x2f8>
 801f738:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801f818 <__kernel_rem_pio2f+0x304>
 801f73c:	2000      	movs	r0, #0
 801f73e:	1ae2      	subs	r2, r4, r3
 801f740:	e0b1      	b.n	801f8a6 <__kernel_rem_pio2f+0x392>
 801f742:	2602      	movs	r6, #2
 801f744:	e78f      	b.n	801f666 <__kernel_rem_pio2f+0x152>
 801f746:	f852 1b04 	ldr.w	r1, [r2], #4
 801f74a:	b948      	cbnz	r0, 801f760 <__kernel_rem_pio2f+0x24c>
 801f74c:	b121      	cbz	r1, 801f758 <__kernel_rem_pio2f+0x244>
 801f74e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801f752:	f842 1c04 	str.w	r1, [r2, #-4]
 801f756:	2101      	movs	r1, #1
 801f758:	f10e 0e01 	add.w	lr, lr, #1
 801f75c:	4608      	mov	r0, r1
 801f75e:	e787      	b.n	801f670 <__kernel_rem_pio2f+0x15c>
 801f760:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801f764:	e7f5      	b.n	801f752 <__kernel_rem_pio2f+0x23e>
 801f766:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801f76a:	aa08      	add	r2, sp, #32
 801f76c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801f770:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801f774:	a908      	add	r1, sp, #32
 801f776:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801f77a:	e781      	b.n	801f680 <__kernel_rem_pio2f+0x16c>
 801f77c:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801f780:	aa08      	add	r2, sp, #32
 801f782:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801f786:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801f78a:	e7f3      	b.n	801f774 <__kernel_rem_pio2f+0x260>
 801f78c:	a908      	add	r1, sp, #32
 801f78e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801f792:	3801      	subs	r0, #1
 801f794:	430a      	orrs	r2, r1
 801f796:	e7ab      	b.n	801f6f0 <__kernel_rem_pio2f+0x1dc>
 801f798:	3201      	adds	r2, #1
 801f79a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801f79e:	2e00      	cmp	r6, #0
 801f7a0:	d0fa      	beq.n	801f798 <__kernel_rem_pio2f+0x284>
 801f7a2:	9905      	ldr	r1, [sp, #20]
 801f7a4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801f7a8:	eb0d 0001 	add.w	r0, sp, r1
 801f7ac:	18e6      	adds	r6, r4, r3
 801f7ae:	a91c      	add	r1, sp, #112	@ 0x70
 801f7b0:	f104 0c01 	add.w	ip, r4, #1
 801f7b4:	384c      	subs	r0, #76	@ 0x4c
 801f7b6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801f7ba:	4422      	add	r2, r4
 801f7bc:	4562      	cmp	r2, ip
 801f7be:	da04      	bge.n	801f7ca <__kernel_rem_pio2f+0x2b6>
 801f7c0:	4614      	mov	r4, r2
 801f7c2:	e70e      	b.n	801f5e2 <__kernel_rem_pio2f+0xce>
 801f7c4:	9804      	ldr	r0, [sp, #16]
 801f7c6:	2201      	movs	r2, #1
 801f7c8:	e7e7      	b.n	801f79a <__kernel_rem_pio2f+0x286>
 801f7ca:	9903      	ldr	r1, [sp, #12]
 801f7cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 801f7d0:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801f7d4:	9105      	str	r1, [sp, #20]
 801f7d6:	ee07 1a90 	vmov	s15, r1
 801f7da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f7de:	2400      	movs	r4, #0
 801f7e0:	ece6 7a01 	vstmia	r6!, {s15}
 801f7e4:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801f818 <__kernel_rem_pio2f+0x304>
 801f7e8:	46b1      	mov	r9, r6
 801f7ea:	455c      	cmp	r4, fp
 801f7ec:	dd04      	ble.n	801f7f8 <__kernel_rem_pio2f+0x2e4>
 801f7ee:	ece0 7a01 	vstmia	r0!, {s15}
 801f7f2:	f10c 0c01 	add.w	ip, ip, #1
 801f7f6:	e7e1      	b.n	801f7bc <__kernel_rem_pio2f+0x2a8>
 801f7f8:	ecfe 6a01 	vldmia	lr!, {s13}
 801f7fc:	ed39 7a01 	vldmdb	r9!, {s14}
 801f800:	3401      	adds	r4, #1
 801f802:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f806:	e7f0      	b.n	801f7ea <__kernel_rem_pio2f+0x2d6>
 801f808:	080224ec 	.word	0x080224ec
 801f80c:	080224c0 	.word	0x080224c0
 801f810:	43800000 	.word	0x43800000
 801f814:	3b800000 	.word	0x3b800000
 801f818:	00000000 	.word	0x00000000
 801f81c:	9b02      	ldr	r3, [sp, #8]
 801f81e:	eeb0 0a48 	vmov.f32	s0, s16
 801f822:	eba3 0008 	sub.w	r0, r3, r8
 801f826:	f000 f8e7 	bl	801f9f8 <scalbnf>
 801f82a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801f810 <__kernel_rem_pio2f+0x2fc>
 801f82e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801f832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f836:	db19      	blt.n	801f86c <__kernel_rem_pio2f+0x358>
 801f838:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801f814 <__kernel_rem_pio2f+0x300>
 801f83c:	ee60 7a27 	vmul.f32	s15, s0, s15
 801f840:	aa08      	add	r2, sp, #32
 801f842:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f846:	3508      	adds	r5, #8
 801f848:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f84c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801f850:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f854:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f858:	ee10 3a10 	vmov	r3, s0
 801f85c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801f860:	ee17 3a90 	vmov	r3, s15
 801f864:	3401      	adds	r4, #1
 801f866:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801f86a:	e74c      	b.n	801f706 <__kernel_rem_pio2f+0x1f2>
 801f86c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f870:	aa08      	add	r2, sp, #32
 801f872:	ee10 3a10 	vmov	r3, s0
 801f876:	e7f6      	b.n	801f866 <__kernel_rem_pio2f+0x352>
 801f878:	a808      	add	r0, sp, #32
 801f87a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801f87e:	9001      	str	r0, [sp, #4]
 801f880:	ee07 0a90 	vmov	s15, r0
 801f884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f888:	3b01      	subs	r3, #1
 801f88a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801f88e:	ee20 0a07 	vmul.f32	s0, s0, s14
 801f892:	ed62 7a01 	vstmdb	r2!, {s15}
 801f896:	e743      	b.n	801f720 <__kernel_rem_pio2f+0x20c>
 801f898:	ecfc 6a01 	vldmia	ip!, {s13}
 801f89c:	ecb5 7a01 	vldmia	r5!, {s14}
 801f8a0:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f8a4:	3001      	adds	r0, #1
 801f8a6:	4550      	cmp	r0, sl
 801f8a8:	dc01      	bgt.n	801f8ae <__kernel_rem_pio2f+0x39a>
 801f8aa:	4282      	cmp	r2, r0
 801f8ac:	daf4      	bge.n	801f898 <__kernel_rem_pio2f+0x384>
 801f8ae:	a858      	add	r0, sp, #352	@ 0x160
 801f8b0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801f8b4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801f8b8:	3b01      	subs	r3, #1
 801f8ba:	e735      	b.n	801f728 <__kernel_rem_pio2f+0x214>
 801f8bc:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801f8be:	2b02      	cmp	r3, #2
 801f8c0:	dc09      	bgt.n	801f8d6 <__kernel_rem_pio2f+0x3c2>
 801f8c2:	2b00      	cmp	r3, #0
 801f8c4:	dc2b      	bgt.n	801f91e <__kernel_rem_pio2f+0x40a>
 801f8c6:	d044      	beq.n	801f952 <__kernel_rem_pio2f+0x43e>
 801f8c8:	f009 0007 	and.w	r0, r9, #7
 801f8cc:	b059      	add	sp, #356	@ 0x164
 801f8ce:	ecbd 8b04 	vpop	{d8-d9}
 801f8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f8d6:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801f8d8:	2b03      	cmp	r3, #3
 801f8da:	d1f5      	bne.n	801f8c8 <__kernel_rem_pio2f+0x3b4>
 801f8dc:	aa30      	add	r2, sp, #192	@ 0xc0
 801f8de:	1f0b      	subs	r3, r1, #4
 801f8e0:	4413      	add	r3, r2
 801f8e2:	461a      	mov	r2, r3
 801f8e4:	4620      	mov	r0, r4
 801f8e6:	2800      	cmp	r0, #0
 801f8e8:	f1a2 0204 	sub.w	r2, r2, #4
 801f8ec:	dc52      	bgt.n	801f994 <__kernel_rem_pio2f+0x480>
 801f8ee:	4622      	mov	r2, r4
 801f8f0:	2a01      	cmp	r2, #1
 801f8f2:	f1a3 0304 	sub.w	r3, r3, #4
 801f8f6:	dc5d      	bgt.n	801f9b4 <__kernel_rem_pio2f+0x4a0>
 801f8f8:	ab30      	add	r3, sp, #192	@ 0xc0
 801f8fa:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 801f818 <__kernel_rem_pio2f+0x304>
 801f8fe:	440b      	add	r3, r1
 801f900:	2c01      	cmp	r4, #1
 801f902:	dc67      	bgt.n	801f9d4 <__kernel_rem_pio2f+0x4c0>
 801f904:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801f908:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801f90c:	2e00      	cmp	r6, #0
 801f90e:	d167      	bne.n	801f9e0 <__kernel_rem_pio2f+0x4cc>
 801f910:	edc7 6a00 	vstr	s13, [r7]
 801f914:	ed87 7a01 	vstr	s14, [r7, #4]
 801f918:	edc7 7a02 	vstr	s15, [r7, #8]
 801f91c:	e7d4      	b.n	801f8c8 <__kernel_rem_pio2f+0x3b4>
 801f91e:	ab30      	add	r3, sp, #192	@ 0xc0
 801f920:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 801f818 <__kernel_rem_pio2f+0x304>
 801f924:	440b      	add	r3, r1
 801f926:	4622      	mov	r2, r4
 801f928:	2a00      	cmp	r2, #0
 801f92a:	da24      	bge.n	801f976 <__kernel_rem_pio2f+0x462>
 801f92c:	b34e      	cbz	r6, 801f982 <__kernel_rem_pio2f+0x46e>
 801f92e:	eef1 7a47 	vneg.f32	s15, s14
 801f932:	edc7 7a00 	vstr	s15, [r7]
 801f936:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801f93a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f93e:	aa31      	add	r2, sp, #196	@ 0xc4
 801f940:	2301      	movs	r3, #1
 801f942:	429c      	cmp	r4, r3
 801f944:	da20      	bge.n	801f988 <__kernel_rem_pio2f+0x474>
 801f946:	b10e      	cbz	r6, 801f94c <__kernel_rem_pio2f+0x438>
 801f948:	eef1 7a67 	vneg.f32	s15, s15
 801f94c:	edc7 7a01 	vstr	s15, [r7, #4]
 801f950:	e7ba      	b.n	801f8c8 <__kernel_rem_pio2f+0x3b4>
 801f952:	ab30      	add	r3, sp, #192	@ 0xc0
 801f954:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 801f818 <__kernel_rem_pio2f+0x304>
 801f958:	440b      	add	r3, r1
 801f95a:	2c00      	cmp	r4, #0
 801f95c:	da05      	bge.n	801f96a <__kernel_rem_pio2f+0x456>
 801f95e:	b10e      	cbz	r6, 801f964 <__kernel_rem_pio2f+0x450>
 801f960:	eef1 7a67 	vneg.f32	s15, s15
 801f964:	edc7 7a00 	vstr	s15, [r7]
 801f968:	e7ae      	b.n	801f8c8 <__kernel_rem_pio2f+0x3b4>
 801f96a:	ed33 7a01 	vldmdb	r3!, {s14}
 801f96e:	3c01      	subs	r4, #1
 801f970:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f974:	e7f1      	b.n	801f95a <__kernel_rem_pio2f+0x446>
 801f976:	ed73 7a01 	vldmdb	r3!, {s15}
 801f97a:	3a01      	subs	r2, #1
 801f97c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f980:	e7d2      	b.n	801f928 <__kernel_rem_pio2f+0x414>
 801f982:	eef0 7a47 	vmov.f32	s15, s14
 801f986:	e7d4      	b.n	801f932 <__kernel_rem_pio2f+0x41e>
 801f988:	ecb2 7a01 	vldmia	r2!, {s14}
 801f98c:	3301      	adds	r3, #1
 801f98e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f992:	e7d6      	b.n	801f942 <__kernel_rem_pio2f+0x42e>
 801f994:	edd2 7a00 	vldr	s15, [r2]
 801f998:	edd2 6a01 	vldr	s13, [r2, #4]
 801f99c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801f9a0:	3801      	subs	r0, #1
 801f9a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f9a6:	ed82 7a00 	vstr	s14, [r2]
 801f9aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f9ae:	edc2 7a01 	vstr	s15, [r2, #4]
 801f9b2:	e798      	b.n	801f8e6 <__kernel_rem_pio2f+0x3d2>
 801f9b4:	edd3 7a00 	vldr	s15, [r3]
 801f9b8:	edd3 6a01 	vldr	s13, [r3, #4]
 801f9bc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801f9c0:	3a01      	subs	r2, #1
 801f9c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f9c6:	ed83 7a00 	vstr	s14, [r3]
 801f9ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f9ce:	edc3 7a01 	vstr	s15, [r3, #4]
 801f9d2:	e78d      	b.n	801f8f0 <__kernel_rem_pio2f+0x3dc>
 801f9d4:	ed33 7a01 	vldmdb	r3!, {s14}
 801f9d8:	3c01      	subs	r4, #1
 801f9da:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f9de:	e78f      	b.n	801f900 <__kernel_rem_pio2f+0x3ec>
 801f9e0:	eef1 6a66 	vneg.f32	s13, s13
 801f9e4:	eeb1 7a47 	vneg.f32	s14, s14
 801f9e8:	edc7 6a00 	vstr	s13, [r7]
 801f9ec:	ed87 7a01 	vstr	s14, [r7, #4]
 801f9f0:	eef1 7a67 	vneg.f32	s15, s15
 801f9f4:	e790      	b.n	801f918 <__kernel_rem_pio2f+0x404>
 801f9f6:	bf00      	nop

0801f9f8 <scalbnf>:
 801f9f8:	ee10 3a10 	vmov	r3, s0
 801f9fc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801fa00:	d02b      	beq.n	801fa5a <scalbnf+0x62>
 801fa02:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801fa06:	d302      	bcc.n	801fa0e <scalbnf+0x16>
 801fa08:	ee30 0a00 	vadd.f32	s0, s0, s0
 801fa0c:	4770      	bx	lr
 801fa0e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801fa12:	d123      	bne.n	801fa5c <scalbnf+0x64>
 801fa14:	4b24      	ldr	r3, [pc, #144]	@ (801faa8 <scalbnf+0xb0>)
 801fa16:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801faac <scalbnf+0xb4>
 801fa1a:	4298      	cmp	r0, r3
 801fa1c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801fa20:	db17      	blt.n	801fa52 <scalbnf+0x5a>
 801fa22:	ee10 3a10 	vmov	r3, s0
 801fa26:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801fa2a:	3a19      	subs	r2, #25
 801fa2c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801fa30:	4288      	cmp	r0, r1
 801fa32:	dd15      	ble.n	801fa60 <scalbnf+0x68>
 801fa34:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801fab0 <scalbnf+0xb8>
 801fa38:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801fab4 <scalbnf+0xbc>
 801fa3c:	ee10 3a10 	vmov	r3, s0
 801fa40:	eeb0 7a67 	vmov.f32	s14, s15
 801fa44:	2b00      	cmp	r3, #0
 801fa46:	bfb8      	it	lt
 801fa48:	eef0 7a66 	vmovlt.f32	s15, s13
 801fa4c:	ee27 0a87 	vmul.f32	s0, s15, s14
 801fa50:	4770      	bx	lr
 801fa52:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801fab8 <scalbnf+0xc0>
 801fa56:	ee27 0a80 	vmul.f32	s0, s15, s0
 801fa5a:	4770      	bx	lr
 801fa5c:	0dd2      	lsrs	r2, r2, #23
 801fa5e:	e7e5      	b.n	801fa2c <scalbnf+0x34>
 801fa60:	4410      	add	r0, r2
 801fa62:	28fe      	cmp	r0, #254	@ 0xfe
 801fa64:	dce6      	bgt.n	801fa34 <scalbnf+0x3c>
 801fa66:	2800      	cmp	r0, #0
 801fa68:	dd06      	ble.n	801fa78 <scalbnf+0x80>
 801fa6a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801fa6e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801fa72:	ee00 3a10 	vmov	s0, r3
 801fa76:	4770      	bx	lr
 801fa78:	f110 0f16 	cmn.w	r0, #22
 801fa7c:	da09      	bge.n	801fa92 <scalbnf+0x9a>
 801fa7e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801fab8 <scalbnf+0xc0>
 801fa82:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801fabc <scalbnf+0xc4>
 801fa86:	ee10 3a10 	vmov	r3, s0
 801fa8a:	eeb0 7a67 	vmov.f32	s14, s15
 801fa8e:	2b00      	cmp	r3, #0
 801fa90:	e7d9      	b.n	801fa46 <scalbnf+0x4e>
 801fa92:	3019      	adds	r0, #25
 801fa94:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801fa98:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801fa9c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801fac0 <scalbnf+0xc8>
 801faa0:	ee07 3a90 	vmov	s15, r3
 801faa4:	e7d7      	b.n	801fa56 <scalbnf+0x5e>
 801faa6:	bf00      	nop
 801faa8:	ffff3cb0 	.word	0xffff3cb0
 801faac:	4c000000 	.word	0x4c000000
 801fab0:	7149f2ca 	.word	0x7149f2ca
 801fab4:	f149f2ca 	.word	0xf149f2ca
 801fab8:	0da24260 	.word	0x0da24260
 801fabc:	8da24260 	.word	0x8da24260
 801fac0:	33000000 	.word	0x33000000

0801fac4 <floorf>:
 801fac4:	ee10 3a10 	vmov	r3, s0
 801fac8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801facc:	3a7f      	subs	r2, #127	@ 0x7f
 801face:	2a16      	cmp	r2, #22
 801fad0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801fad4:	dc2b      	bgt.n	801fb2e <floorf+0x6a>
 801fad6:	2a00      	cmp	r2, #0
 801fad8:	da12      	bge.n	801fb00 <floorf+0x3c>
 801fada:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801fb40 <floorf+0x7c>
 801fade:	ee30 0a27 	vadd.f32	s0, s0, s15
 801fae2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801fae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801faea:	dd06      	ble.n	801fafa <floorf+0x36>
 801faec:	2b00      	cmp	r3, #0
 801faee:	da24      	bge.n	801fb3a <floorf+0x76>
 801faf0:	2900      	cmp	r1, #0
 801faf2:	4b14      	ldr	r3, [pc, #80]	@ (801fb44 <floorf+0x80>)
 801faf4:	bf08      	it	eq
 801faf6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801fafa:	ee00 3a10 	vmov	s0, r3
 801fafe:	4770      	bx	lr
 801fb00:	4911      	ldr	r1, [pc, #68]	@ (801fb48 <floorf+0x84>)
 801fb02:	4111      	asrs	r1, r2
 801fb04:	420b      	tst	r3, r1
 801fb06:	d0fa      	beq.n	801fafe <floorf+0x3a>
 801fb08:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801fb40 <floorf+0x7c>
 801fb0c:	ee30 0a27 	vadd.f32	s0, s0, s15
 801fb10:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801fb14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb18:	ddef      	ble.n	801fafa <floorf+0x36>
 801fb1a:	2b00      	cmp	r3, #0
 801fb1c:	bfbe      	ittt	lt
 801fb1e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801fb22:	fa40 f202 	asrlt.w	r2, r0, r2
 801fb26:	189b      	addlt	r3, r3, r2
 801fb28:	ea23 0301 	bic.w	r3, r3, r1
 801fb2c:	e7e5      	b.n	801fafa <floorf+0x36>
 801fb2e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801fb32:	d3e4      	bcc.n	801fafe <floorf+0x3a>
 801fb34:	ee30 0a00 	vadd.f32	s0, s0, s0
 801fb38:	4770      	bx	lr
 801fb3a:	2300      	movs	r3, #0
 801fb3c:	e7dd      	b.n	801fafa <floorf+0x36>
 801fb3e:	bf00      	nop
 801fb40:	7149f2ca 	.word	0x7149f2ca
 801fb44:	bf800000 	.word	0xbf800000
 801fb48:	007fffff 	.word	0x007fffff

0801fb4c <_init>:
 801fb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fb4e:	bf00      	nop
 801fb50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fb52:	bc08      	pop	{r3}
 801fb54:	469e      	mov	lr, r3
 801fb56:	4770      	bx	lr

0801fb58 <_fini>:
 801fb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fb5a:	bf00      	nop
 801fb5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fb5e:	bc08      	pop	{r3}
 801fb60:	469e      	mov	lr, r3
 801fb62:	4770      	bx	lr
